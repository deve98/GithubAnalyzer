,Draft,Prerelease,Created_at,Published_at,Details,Id
0,False,False,2020-03-04T12:15:29Z,2020-03-09T19:58:58Z,"Bitcoin Core version 0.19.1 is now available from:

https://bitcoincore.org/bin/bitcoin-core-0.19.1/

For the release notes please see the git repository:

https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.19.1.md

Preferably use the above download link, not the links provided by GitHub to download the source tarball, as the release tarballs are generated deterministically whereas GitHub's are not.",1181927
1,False,False,2019-11-18T13:17:18Z,2019-11-24T13:26:31Z,"Bitcoin Core version 0.19.0.1 is now available from:

https://bitcoincore.org/bin/bitcoin-core-0.19.0.1/

For the release notes please see the git repository:

https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.19.0.1.md

Preferably use the above download link, not the links provided by GitHub to download the source tarball, as the release tarballs are generated deterministically whereas GitHub's are not.
",1181927
2,False,False,2019-08-02T20:41:45Z,2019-08-09T18:53:34Z,"Bitcoin Core version 0.18.1 is now available from:

https://bitcoincore.org/bin/bitcoin-core-0.18.1/

For the release notes please see the git repository:

https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.18.1.md

Preferably use the above download link, not the links provided by GitHub to download the source tarball, as the release tarballs are generated deterministically whereas GitHub's are not.
",1181927
3,False,False,2019-04-30T12:14:06Z,2019-05-18T18:22:20Z,"Bitcoin Core version 0.18.0 is now available from:

https://bitcoincore.org/bin/bitcoin-core-0.18.0/

For the release notes please see the git repository:

https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.18.0.md

Preferably use the above download link, not the links provided by GitHub to download the source tarball, as the release tarballs are generated deterministically whereas GitHub's are not.
",1181927
4,False,False,2018-12-22T09:08:12Z,2018-12-25T09:36:21Z,"Bitcoin Core version 0.17.1 is now available from:

https://bitcoincore.org/bin/bitcoin-core-0.17.1/

For the release notes please see the git repository:

https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.17.1.md

Preferably use the above download link, not the links provided by GitHub to download the source tarball, as the release tarballs are generated deterministically whereas GitHub's are not.
",1181927
5,False,False,2018-10-26T11:05:42Z,2018-11-06T08:34:16Z,"Bitcoin Core version 0.17.0.1 is now available from:

https://bitcoincore.org/bin/bitcoin-core-0.17.0.1/

For the release notes please see the git repository:

https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.17.0.1.md

Preferably use the above download link, not the links provided by GitHub to download the source tarball, as the release tarballs are generated deterministically whereas GitHub's are not.
",1181927
6,False,False,2018-10-01T10:49:12Z,2018-10-03T09:22:37Z,"Bitcoin Core version 0.17.0 is now available from:

https://bitcoincore.org/bin/bitcoin-core-0.17.0/

For the release notes please see the git repository:

https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.17.0.md

Preferably use the above download link, not the links provided by GitHub to download the source tarball, as the release tarballs are generated deterministically whereas GitHub's are not.
",1181927
7,False,False,2018-09-19T11:51:30Z,2018-09-28T15:30:19Z,"Bitcoin Core version 0.15.2 is now available from:

https://bitcoincore.org/bin/bitcoin-core-0.15.2/

For the release notes please see the git repository:

https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.15.2.md

Preferably use the above download link, not the below links to download the source tarball, as the release tarballs are generated deterministically whereas GitHub's are not.
",1181927
8,False,False,2018-09-20T17:15:35Z,2018-09-28T15:29:44Z,"Bitcoin Core version 0.14.3 is now available from:

https://bitcoincore.org/bin/bitcoin-core-0.14.3/

For the release notes please see the git repository:

https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.14.3.md

Preferably use the above download link, not the below links to download the source tarball, as the release tarballs are generated deterministically whereas GitHub's are not.
",1181927
9,False,False,2018-09-18T00:24:44Z,2018-09-18T21:14:45Z,"Bitcoin Core version 0.16.3 is now available from:

https://bitcoincore.org/bin/bitcoin-core-0.16.3/

For the release notes please see the git repository:

https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.16.3.md

Preferably use the above download link, not the below links to download the source tarball, as the release tarballs are generated deterministically whereas GitHub's are not.
",1181927
10,False,False,2018-07-26T20:48:25Z,2018-07-29T17:04:40Z,"Bitcoin Core version 0.16.2 is now available from:

https://bitcoincore.org/bin/bitcoin-core-0.16.2/

For the release notes please see the git repository:

https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.16.2.md

Preferably use the above download link, not the below links to download the source tarball, as the release tarballs are generated deterministically whereas GitHub's are not.
",1181927
11,False,False,2018-06-13T12:44:57Z,2018-06-15T16:35:36Z,"Bitcoin Core version 0.16.1 is now available from:

https://bitcoincore.org/bin/bitcoin-core-0.16.1/

For the release notes please see the git repository:

https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.16.1.md

Preferably use the above download link, not the below links to download the source tarball, as the release tarballs are generated deterministically whereas GitHub's are not.
",1181927
12,False,False,2018-02-22T19:25:44Z,2018-02-26T11:59:39Z,"Bitcoin Core version 0.16.0 is now available from:

https://bitcoin.org/bin/bitcoin-core-0.16.0/

and

https://bitcoincore.org/bin/bitcoin-core-0.16.0/

For the release notes please see the git repository:

https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.16.0.md

Preferably use the above download link, not the below links to download the source tarball, as the release tarballs are generated deterministically whereas GitHub's are not.",1181927
13,False,False,2017-11-09T20:24:56Z,2017-11-11T14:24:25Z,"Bitcoin Core version 0.15.1 is now available from:

https://bitcoin.org/bin/bitcoin-core-0.15.1/

and

https://bitcoincore.org/bin/bitcoin-core-0.15.1/

For the release notes please see the git repository:

https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.15.1.md

Preferably use the above download link, not the below links to download the source tarball, as the release tarballs are generated deterministically and GitHub's are not.",1181927
14,False,False,2017-09-15T14:05:26Z,2017-09-19T13:05:50Z,"Bitcoin Core version 0.15.0.1 is now available from:

https://bitcoin.org/bin/bitcoin-core-0.15.0.1/

and

https://bitcoincore.org/bin/bitcoin-core-0.15.0.1/

For the release notes please see the git repository:

https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.15.0.1.md

Preferably use the above download link, not the below links to download the source tarball, as the release tarballs are generated deterministically and GitHub's are not.",1181927
15,False,False,2017-09-10T22:14:20Z,2017-09-14T14:34:57Z,"Bitcoin Core version 0.15.0 is now available from:

https://bitcoin.org/bin/bitcoin-core-0.15.0/

and

https://bitcoincore.org/bin/bitcoin-core-0.15.0/

For the release notes please see the git repository:

https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.15.0.md

Preferably use the above download link, not the below links to download the source tarball, as the release tarballs are generated deterministically and GitHubs's are not.",1181927
16,False,False,2017-06-15T12:08:29Z,2017-06-18T08:42:37Z,"Bitcoin Core version 0.14.2 is now available from:

  https://bitcoin.org/bin/bitcoin-core-0.14.2/

For the release notes please see the git repository:

https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.14.2.md",1181927
17,False,False,2017-04-20T19:45:34Z,2017-04-22T14:19:24Z,"Bitcoin Core version 0.14.1 is now available from:

  https://bitcoin.org/bin/bitcoin-core-0.14.1/

For the release notes please see the git repository:

https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.14.1.md",1181927
18,False,False,2017-03-07T10:52:21Z,2017-03-08T15:20:25Z,"Bitcoin Core version 0.14.0 is now available from:

  https://bitcoin.org/bin/bitcoin-core-0.14.0/

For the release notes please see the git repository:

https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.14.0.md",1181927
19,False,False,2017-01-02T08:55:44Z,2017-01-03T10:48:14Z,"Bitcoin Core version 0.13.2 is now available from:

  https://bitcoin.org/bin/bitcoin-core-0.13.2/

For the release notes please see the git repository:

https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.13.2.md
",1181927
20,False,False,2015-02-13T09:24:49Z,2016-11-01T19:31:28Z,"Bitcoin Core version 0.10.0 is now available from:

  https://bitcoin.org/bin/0.10.0/

For the release notes please see the git repository:

https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.10.0.md
",1181927
21,False,False,2015-04-26T12:19:13Z,2016-11-01T19:31:06Z,"Bitcoin Core version 0.10.1 is now available from:

  https://bitcoin.org/bin/bitcoin-core-0.10.1/

For the release notes please see the git repository:

https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.10.1.md
",1181927
22,False,False,2015-05-16T08:37:50Z,2016-11-01T19:30:39Z,"Bitcoin Core version 0.10.2 is now available from:

  https://bitcoin.org/bin/bitcoin-core-0.10.2/

For the release notes please see the git repository:

https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.10.2.md
",1181927
23,False,False,2015-10-14T08:02:20Z,2016-11-01T19:30:08Z,"Bitcoin Core version 0.10.3 is now available from:

  https://bitcoin.org/bin/bitcoin-core-0.10.3/

For the release notes please see the git repository:

https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.10.3.md
",1181927
24,False,False,2015-10-14T08:03:45Z,2016-11-01T19:29:28Z,"Bitcoin Core version 0.11.1 is now available from:

  https://bitcoin.org/bin/bitcoin-core-0.11.1/

For the release notes please see the git repository:

https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.11.1.md
",1181927
25,False,False,2015-11-12T20:03:22Z,2016-11-01T19:28:46Z,"Bitcoin Core version 0.11.2 is now available from:

  https://bitcoin.org/bin/bitcoin-core-0.11.2/

For the release notes please see the git repository:

https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.11.2.md
",1181927
26,False,False,2015-11-12T20:10:11Z,2016-11-01T19:27:11Z,"Bitcoin Core version 0.10.4 is now available from:

  https://bitcoin.org/bin/bitcoin-core-0.10.4/

For the release notes please see the git repository:

https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.10.4.md
",1181927
27,False,False,2016-02-18T08:24:33Z,2016-11-01T19:26:15Z,"Bitcoin Core version 0.12.0 is now available from:

  https://bitcoin.org/bin/bitcoin-core-0.12.0/

For the release notes please see the git repository:

https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.12.0.md
",1181927
28,False,False,2016-04-14T20:08:19Z,2016-11-01T19:25:45Z,"Bitcoin Core version 0.12.1 is now available from:

  https://bitcoin.org/bin/bitcoin-core-0.12.1/

For the release notes please see the git repository:

https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.12.1.md
",1181927
29,False,False,2016-08-22T10:34:55Z,2016-11-01T19:25:12Z,"Bitcoin Core version 0.13.0 is now available from:

  https://bitcoin.org/bin/bitcoin-core-0.13.0/

For the release notes please see the git repository:

https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.13.0.md
",1181927
30,False,False,2016-10-27T08:24:32Z,2016-11-01T19:23:04Z,"Bitcoin Core version 0.13.1 is now available from:

  https://bitcoin.org/bin/bitcoin-core-0.13.1/

For the release notes please see the git repository:

https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.13.1.md
",1181927
31,False,False,2019-09-04T18:16:57Z,2019-09-06T01:10:43Z,"- Pull down top-right 0 button to show console
- New UiPluginManager plugin: Manage and install third-party plugins.
- Full support of OpenSSL 1.1 (Thanks to radfish & imachug)
- Fix a bug that did not load merged site data for 5 sec after the site got added
- Add fake SNI and ALPN to peer connections to make it more like standard https connections

### Important security update:
#### Wrapper template HTML injection vulnerability [Reported by ivanq]

In ZeroNet before rev4188 the wrapper template variables was rendered incorrectly.

**Result:** The opened site was able to gain WebSocket connection with unrestricted ADMIN/NOSANDBOX access, change configuration values and possible RCE on the client's machine.

**Fix:** Fixed the template rendering code, disallowed WebSocket connections from unknown locations,
restricted open_browser configuration values to avoid possible RCE in case of sandbox escape.",29112049
32,False,False,2019-06-12T00:57:18Z,2019-09-06T00:43:51Z,"- Re-factored code to Python3 runtime (compatible with Python 3.4-3.8)
- More safe database sync mode
- Removed bundled third-party libraries where it's possible
- 5-10x faster signature verification by using libsecp256k1 (Thanks to ZeroMux)
- Generated SSL certificate randomization to avoid protocol filters (Thanks to ValdikSS)
- P2P source code update using ZeroNet protocol
- Offline mode
- Fix sending files with \0 characters",29112049
33,False,False,2019-02-16T19:50:49Z,2019-02-16T20:36:42Z,"*   IPv6 support in peer exchange, bigfiles, optional file finding, tracker sharing, socket listening and connecting (based on tangdou1 modifications)
*   New tracker database format with IPv6 support
*   Refactored port open checking with IPv6 support
*   Display notification if there is an unpublished modification for your site
*   Consider non-local IPs as external even is the open port check fails (for CJDNS and Yggdrasil support)
*   Listen and shut down normally for SIGTERM (Thanks to blurHY)
*   Check the length of master seed when executing cryptGetPrivatekey CLI command
*   Only reload source code on file modification / creation
*   Add IPv6 tracker and change unstable tracker
*   Support tilde `~` in filenames (by d14na)
*   Detection and issue warning for latest no-script plugin
*   Don't correct sent local time with the calculated time correction
*   Support map for Namecoin subdomain names (Thanks to lola)
*   Add log level to config page
*   Don't show meek proxy option if the tor client does not supports it
*   Quick check content.db on startup and rebuild if necessary
*   Only support CREATE commands in dbschema indexes node and SELECT from storage.query
*   Support `{data}` for data dir variable in trackers_file value
*   Disable CSP for Edge
*   Fix site cloning before site downloaded (Reported by unsystemizer)
*   Fix queryJson for non-list nodes (Reported by MingchenZhang)
*   Fix multi-line parsing of zeronet.conf (Reported by xx)
*   Fix site deletion from users.json
*   Fix sql queries with lots of variables and sites with lots of content.json (Reported by xx)
*   Fix atomic write of a non-existent file

",29112049
34,False,False,2018-10-20T00:36:29Z,2018-10-20T00:46:10Z,"### Added
 - New plugin: UiConfig. A web interface that allows changing ZeroNet settings.
 - New plugin: AnnounceShare. Share trackers between users, automatically announce client's ip as tracker if Bootstrapper plugin is enabled.
 - Global tracker stats on ZeroHello: Include statistics from all served sites instead of displaying request statistics only for one site.
 - Support custom proxy for trackers. (Configurable with /Config)
 - Adding peers to sites manually using zeronet_peers get parameter
 - Copy site address with peers link on the sidebar.
 - Zip file listing and streaming support for Bigfiles.
 - Tracker statistics on /Stats page
 - Peer reputation save/restore to speed up sync time after startup.
 - Full support fileGet, fileList, dirList calls on tar.gz/zip files.
 - Archived_before support to user content rules to allow deletion of all user files before the specified date
 - Show and manage ""Connecting"" sites on ZeroHello
 - Add theme support to ZeroNet sites
 - Dark theme for ZeroHello, ZeroBlog, ZeroTalk

### Changed
 - Dynamic big file allocation: More efficient storage usage by don't pre-allocate the whole file at the beginning, but expand the size as the content downloads.
 - Reduce the request frequency to unreliable trackers.
 - Only allow 5 concurrent checkSites to run in parallel to reduce load under Tor/slow connection.
 - Stop site downloading if it reached 95% of site limit to avoid download loop for sites out of limit
 - The pinned optional files won't be removed from download queue after 30 retries and won't be deleted even if the site owner removes it.
 - Don't remove incomplete (downloading) sites on startup
 - Remove --pin_bigfile argument as big files are automatically excluded from optional files limit.

### Fixed
 - Trayicon compatibility with latest gevent
 - Request number counting for zero:// trackers
 - Peer reputation boost for zero:// trackers.
 - Blocklist of peers loaded from peerdb (Thanks tangdou1 for report)
 - Sidebar map loading on foreign languages (Thx tangdou1 for report)
 - FileGet on non-existent files (Thanks mcdev for reporting)
 - Peer connecting bug for sites with low amount of peers

#### ""The Vacation"" Sandbox escape bug [Reported by GitCenter / Krixano / ZeroLSTN]

In ZeroNet 0.6.3 Rev3615 and earlier as a result of invalid file type detection, a malicious site could escape the iframe sandbox.

Result: Browser iframe sandbox escape

Applied fix: Replaced the previous, file extension based file type identification with a proper one.

Affected versions: All versions before ZeroNet Rev3616 ",29112049
35,False,False,2018-06-25T12:41:34Z,2018-10-20T00:45:13Z,"### Added
 - New plugin: ContentFilter that allows to have shared site and user block list.
 - Support Tor meek proxies to avoid tracker blocking of GFW
 - Detect network level tracker blocking and easy setting meek proxy for tracker connections.
 - Support downloading 2GB+ sites as .zip (Thx to Radtoo)
 - Support ZeroNet as a transparent proxy (Thx to JeremyRand)
 - Allow fileQuery as CORS command (Thx to imachug)
 - Windows distribution includes Tor and meek client by default
 - Download sites as zip link to sidebar
 - File server port randomization
 - Implicit SSL for all connection
 - fileList API command for zip files
 - Auto download bigfiles size limit on sidebar
 - Local peer number to the sidebar
 - Open site directory button in sidebar

## Changed
 - Switched to Azure Tor meek proxy as Amazon one became unavailable
 - Refactored/rewritten tracker connection manager
 - Improved peer discovery for optional files without opened port
 - Also delete Bigfile's piecemap on deletion

## Fixed
 - Important security issue: Iframe sandbox escape [Reported by Ivanq / gitcenter]
 - Local peer discovery when running multiple clients on the same machine
 - Uploading small files with Bigfile plugin
 - Ctrl-c shutdown when running CLI commands
 - High CPU/IO usage when Multiuser plugin enabled
 - Firefox back button
 - Peer discovery on older Linux kernels
 - Optional file handling when multiple files have the same hash_id (first 4 chars of the hash)
 - Msgpack 0.5.5 and 0.5.6 compatibility
",29112049
36,False,False,2018-02-18T05:38:42Z,2018-02-18T05:39:39Z,"## ZeroNet 0.6.2 (2018-02-18)

### Added
 - New plugin: AnnounceLocal to make ZeroNet work without an internet connection on the local network.
 - Allow dbQuey and userGetSettings using the `as` API command on different sites with Cors permission
 - New config option: `--log_level` to reduce log verbosity and IO load
 - Prefer to connect to recent peers from trackers first
 - Mark peers with port 1 is also unconnectable for future fix for trackers that do not support port 0 announce

### Changed
 - Don't keep connection for sites that have not been modified in the last week
 - Change unreliable trackers to new ones
 - Send maximum 10 findhash request in one find optional files round (15sec)
 - Change ""Unique to site"" to ""No certificate"" for default option in cert selection dialog.
 - Dont print warnings if not in debug mode
 - Generalized tracker logging format
 - Only recover sites from sites.json if they had peers
 - Message from local peers does not means internet connection
 - Removed `--debug_gevent` and turned on Gevent block logging by default

### Fixed
 - Limit connections to 512 to avoid reaching 1024 limit on windows
 - Exception when logging foreign operating system socket errors
 - Don't send private (local) IPs on pex
 - Don't connect to private IPs in tor always mode
 - Properly recover data from msgpack unpacker on file stream start
 - Symlinked data directory deletion when deleting site using Windows
 - De-duplicate peers before publishing
 - Bigfile info for non-existing files ",29112049
37,False,False,2018-01-25T15:24:09Z,2018-01-25T15:24:35Z,"### Added
 - New plugin: Chart
 - Collect and display charts about your contribution to ZeroNet network
 - Allow list as argument replacement in sql queries. (Thanks to imachug)
 - Newsfeed query time statistics (Click on ""From XX sites in X.Xs on ZeroHello)
 - New UiWebsocket API command: As to run commands as other site
 - Ranged ajax queries for big files
 - Filter feed by type and site address
 - FileNeed, Bigfile upload command compatibility with merger sites
 - Send event on port open / tor status change
 - More description on permission request

### Changed
 - Reduce memory usage of sidebar geoip database cache
 - Change unreliable tracker to new one
 - Don't display Cors permission ask if it already granted
 - Avoid UI blocking when rebuilding a merger site
 - Skip listing ignored directories on signing
 - In Multiuser mode show the seed welcome message when adding new certificate instead of first visit
 - Faster async port opening on multiple network interfaces
 - Allow javascript modals
 - Only zoom sidebar globe if mouse button is pressed down

### Fixed
 - Open port checking error reporting (Thanks to imachug)
 - Out-of-range big file requests
 - Don't output errors happened on gevent greenlets twice
 - Newsfeed skip sites with no database
 - Newsfeed queries with multiple params
 - Newsfeed queries with UNION and UNION ALL
 - Fix site clone with sites larger that 10MB
 - Unreliable Websocket connection when requesting files from different sites at the same time",29112049
38,False,False,2017-10-16T18:26:41Z,2017-10-17T07:28:45Z,"### Added
 - New plugin: Big file support
 - Automatic pinning on Big file download
 - Enable TCP_NODELAY for supporting sockets
 - actionOptionalFileList API command arguments to list non-downloaded files or only big files
 - serverShowdirectory API command arguments to allow to display site's directory in OS file browser
 - fileNeed API command to initialize optional file downloading
 - wrapperGetAjaxKey API command to request nonce for AJAX request
 - Json.gz support for database files
 - P2P port checking (Thanks for grez911)
 - `--download_optional auto` argument to enable automatic optional file downloading for newly added site
 - Statistics for big files and protocol command requests on /Stats
 - Allow to set user limitation based on auth_address

### Changed
 - More aggressive and frequent connection timeout checking
 - Use out of msgpack context file streaming for files larger than 512KB
 - Allow optional files workers over the worker limit
 - Automatic redirection to wrapper on nonce_error
 - Send websocket event on optional file deletion
 - Optimize sites.json saving
 - Enable faster C-based msgpack packer by default
 - Major optimization on Bootstrapper plugin SQL queries
 - Don't reset bad file counter on restart, to allow easier give up on unreachable files
 - Incoming connection limit changed from 1000 to 500 to avoid reaching socket limit on Windows
 - Changed tracker boot.zeronet.io domain, because zeronet.io got banned in some countries

#### Fixed
 - Sub-directories in user directories",29112049
39,False,False,2017-07-29T11:46:04Z,2017-07-30T00:21:06Z,"Added
 - New plugin: CORS to request read permission to other site's content
 - New API command: userSetSettings/userGetSettings to store site's settings in users.json
 - Avoid file download if the file size does not match with the requested one
 - JavaScript and wrapper less file access using /raw/ prefix ([Example](http://127.0.0.1:43110/raw/1AsRLpuRxr3pb9p3TKoMXPSWHzh6i7fMGi/en.tar.gz/index.html))
 - --silent command line option to disable logging to stdout


Changed
 - Better error reporting on sign/verification errors
 - More test for sign and verification process
 - Update to OpenSSL v1.0.2l
 - Limit compressed files to 6MB to avoid zip/tar.gz bomb
 - Allow space, [], () characters in filenames
 - Disable cross-site resource loading to improve privacy. [Reported by Beardog108]
 - Download directly accessed Pdf/Svg/Swf files instead of displaying them to avoid wrapper escape using in JS in SVG file. [Reported by Beardog108]
 - Disallow potentially unsafe regular expressions to avoid ReDoS [Reported by MuxZeroNet]

Fixed
 - Detecting data directory when running Windows distribution exe [Reported by Plasmmer]
 - OpenSSL loading under Android 6+
 - Error on exiting when no connection server started
",29112049
40,False,False,2017-06-15T20:38:02Z,2017-06-18T09:21:44Z,"Fix
- Proxy bypass during source upgrade
- XSS vulnerability using DNS rebinding
- Opened port checking
- Standalone update.py argument parsing
- uPnP crash on startup
- CoffeeScript 1.12.6 compatibility
- Multi value argument parsing
- Database error when running from directory that contains special characters
- Site lock violation logging

Added
- Callback for certSelect API command
- More compact list formatting in json

Changed
- Remove obsolete auth_key_sha512 and signature format
- Improved Spanish translation",29112049
41,False,False,2017-05-18T21:03:26Z,2017-05-22T09:11:37Z,"- Site blacklist option at deletion
- Update cloned sites source code
- New priority algorithm for faster site content display
- Outgoing socket bind option",29112049
42,False,False,2017-04-14T15:50:42Z,2017-04-18T14:14:43Z,"- Major Tor: always mode improvements
- Important security fixes
- Updated dependencies
- Better content distibution",29112049
43,False,False,2017-03-15T12:13:21Z,2017-03-15T19:22:56Z,- Tar.gz and zip compressed static content support,29112049
44,False,False,2017-02-14T18:04:25Z,2017-02-24T15:03:23Z,"- User mute
",29112049
45,False,False,2017-02-08T08:13:33Z,2017-02-08T08:59:36Z,"- Multi-language interface and site translate support
",29112049
46,False,False,2016-11-18T19:48:38Z,2016-11-18T19:53:01Z,"- Limit and manage optional files
- API command to sign up/download/delete optional files
",29112049
47,False,False,2016-09-05T13:47:48Z,2016-09-05T13:54:20Z,"- Merger sites
- User file archiving
- Allow to store custom fields in json table
",29112049
48,False,False,2016-10-19T20:19:32Z,2016-09-06T22:23:13Z,"- Dramatically speedup startup times
- Reduce memory usage
",29112049
49,False,False,2016-05-27T10:47:11Z,2016-08-10T11:02:56Z,"- Patch command to reduce bandwidth usage by transfer only the changed lines
- Other cpu/memory optimalizations
",29112049
50,False,False,2016-04-11T09:51:33Z,2016-04-20T17:32:34Z,"- New ZeroHello
- Newsfeed function
- Security fixes
",29112049
51,False,False,2016-02-01T23:49:43Z,2016-02-01T23:51:21Z,"- Full Tor support with .onion hidden services
- Bootstrap using ZeroNet protocol
- Fix Gevent 1.0.2 compatibility
",29112049
52,False,False,2015-12-27T23:19:58Z,2016-01-04T18:24:55Z,"- AES, ECIES API function support
- PushState and ReplaceState url manipulation support in API
- Multiuser localstorage
",29112049
53,False,False,2020-03-13T00:02:51Z,2020-03-13T01:33:32Z,"This marks the second minor release in the `v0.9.0` series. This release fixes a _single_ bug that affects 32-bit *ARM machines*. If you run `lnd` on any other architecture, then you can safely skip this release, and get ready for our upcoming `v0.10` release!


# Verifying the Release

In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import the keys that have signed this release if you haven't done so already: 

```
curl https://keybase.io/roasbeef/pgp_keys.asc | gpg --import
```

Once you have the required PGP keys, you can verify the release (assuming `manifest-v0.9.2-beta.txt` and `manifest-v0.9.2-beta.txt.sig` are in the current directory) with:

```
gpg --verify manifest-v0.9.2-beta.txt.sig
```

You should see the following if the verification was successful:

```
gpg: assuming signed data in 'manifest-v0.9.2-beta.txt'
gpg: Signature made Thu Mar 12 17:55:15 2020 PDT
gpg:                using RSA key 4AB7F8DA6FAEBB3B70B1F903BC13F65E2DC84465
gpg: Good signature from ""Olaoluwa Osuntokun <laolu32@gmail.com>"" [ultimate]
```

That will verify the signature of the manifest file, which ensures integrity and authenticity of the archive you've downloaded locally containing the binaries. Next, depending on your operating system, you should then re-compute the `sha256` hash of the archive with `shasum -a 256 <filename>`, compare it with the corresponding one in the manifest file, and ensure they match *exactly*.

## Verifying the Release Binaries

Our release binaries are fully reproducible. Third parties are able to verify that the release binaries were produced properly without having to trust the release manager(s). See our [reproducible builds guide](https://github.com/lightningnetwork/lnd/tree/master/build/release) for how this can be achieved. The release binaries are compiled with `go1.13.7`, which is required by verifiers to arrive at the same ones. They include the following build tags: `autopilotrpc`, `signrpc`, `walletrpc`, `chainrpc`, `invoicesrpc`, `routerrpc`, and `watchtowerrpc`. Note that these are already included in the release script, so they do not need to be provided.

Finally, you can also verify the _tag_ itself with the following command:

```
git verify-tag v0.9.2-beta
```

# Building the Contained Release 

Users are able to rebuild the target release themselves without having to fetch any of the dependencies. In order to do so, assuming that `vendor.tar.gz` and `lnd-source-v0.9.2-beta.tar.gz` are in the current directory, follow these steps:

```
tar -xvzf vendor.tar.gz
tar -xvzf lnd-source-v0.9.2-beta.tar.gz
GO111MODULE=on go install -v -mod=vendor -ldflags ""-X github.com/lightningnetwork/lnd/build.Commit=v0.9.2-beta"" ./cmd/lnd
GO111MODULE=on go install -v -mod=vendor -ldflags ""-X github.com/lightningnetwork/lnd/build.Commit=v0.9.2-beta"" ./cmd/lncli
```

The `-mod=vendor` flag tells the `go build` command that it doesn't need to fetch the dependencies, and instead, they're all enclosed in the local vendor directory. 

Additionally, it's now possible to use the [enclosed `release.sh` script to bundle a release for a _specific_ system like so](https://github.com/lightningnetwork/lnd/pull/2191): 

```
LNDBUILDSYS=""linux-arm64 darwin-amd64"" ./build/release/release.sh
```

⚡️⚡️⚡️ OK, now to the rest of the release notes! ⚡️⚡️⚡️

# Release Notes

## Bug Fixes 

In this release, we update to a new version of x/crypto that drops broken ARM assembly that can cause a segfault in systems like Raspberry Pis. The broken assembly was removed in this commit to the runtime: golang/go@8b77410.

The full list of changes since `v0.9.1-beta` can be found here:

* https://github.com/lightningnetwork/lnd/compare/v0.9.1-beta...v0.9.2-beta

# Contributors (Alphabetical Order)

Olaoluwa Osuntokun 

",49765480
54,False,False,2020-02-28T21:06:50Z,2020-03-01T15:53:49Z,"This marks the first minor release in the `v0.9.0` series. As this is a minor release, no major features are included in this release, but a number of important bug fixes are present. These bug fixes should eliminate the current known instance of erroneous force closes between nodes, optimizes invoice expiry for larger nodes, and fixes some accounting issues related to estimating the correct amount of available balance when forwarding. 


# Verifying the Release

In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import the keys that have signed this release if you haven't done so already: 

```
curl https://keybase.io/roasbeef/pgp_keys.asc | gpg --import
```

Once you have the required PGP keys, you can verify the release (assuming `manifest-v0.9.1-beta.txt` and `manifest-v0.9.1-beta.txt.sig` are in the current directory) with:

```
gpg --verify manifest-v0.9.1-beta.txt.sig
```

You should see the following if the verification was successful:

```
gpg: assuming signed data in 'manifest-v0.9.1-beta.txt'
gpg: Signature made Fri Feb 28 18:44:18 2020 -03
gpg:                using RSA key 4AB7F8DA6FAEBB3B70B1F903BC13F65E2DC84465
gpg: Good signature from ""Olaoluwa Osuntokun <laolu32@gmail.com>"" [ultimate]
```

That will verify the signature of the manifest file, which ensures integrity and authenticity of the archive you've downloaded locally containing the binaries. Next, depending on your operating system, you should then re-compute the `sha256` hash of the archive with `shasum -a 256 <filename>`, compare it with the corresponding one in the manifest file, and ensure they match *exactly*.

## Verifying the Release Binaries

Our release binaries are fully reproducible. Third parties are able to verify that the release binaries were produced properly without having to trust the release manager(s). See our [reproducible builds guide](https://github.com/lightningnetwork/lnd/tree/master/build/release) for how this can be achieved. The release binaries are compiled with `go1.13.7`, which is required by verifiers to arrive at the same ones. They include the following build tags: `autopilotrpc`, `signrpc`, `walletrpc`, `chainrpc`, `invoicesrpc`, `routerrpc`, and `watchtowerrpc`. Note that these are already included in the release script, so they do not need to be provided.

Finally, you can also verify the _tag_ itself with the following command:

```
git verify-tag v0.9.0-beta
```

# Building the Contained Release 

Users are able to rebuild the target release themselves without having to fetch any of the dependencies. In order to do so, assuming that `vendor.tar.gz` and `lnd-source-v0.9.1-beta.tar.gz` are in the current directory, follow these steps:

```
tar -xvzf vendor.tar.gz
tar -xvzf lnd-source-v0.9.1-beta.tar.gz
GO111MODULE=on go install -v -mod=vendor -ldflags ""-X github.com/lightningnetwork/lnd/build.Commit=v0.9.1-beta"" ./cmd/lnd
GO111MODULE=on go install -v -mod=vendor -ldflags ""-X github.com/lightningnetwork/lnd/build.Commit=v0.9.1-beta"" ./cmd/lncli
```

The `-mod=vendor` flag tells the `go build` command that it doesn't need to fetch the dependencies, and instead, they're all enclosed in the local vendor directory. 

Additionally, it's now possible to use the [enclosed `release.sh` script to bundle a release for a _specific_ system like so](https://github.com/lightningnetwork/lnd/pull/2191): 

```
LNDBUILDSYS=""linux-arm64 darwin-amd64"" ./build/release/release.sh
```

⚡️⚡️⚡️ OK, now to the rest of the release notes! ⚡️⚡️⚡️

# Release Notes

## RPC Configuration 

[A new flag (`--tlsautorefresh`) has been added to instruct `lnd` to _re-generate_ TLS certs](https://github.com/lightningnetwork/lnd/pull/3932) if the certs on disk differ from the specified configuration options. An example would be if you add a new TLS domain, but the certs on disk only have `localhost` as a valid domain for the cert. 

[We've updated a config on our end to ensure all default values are ALWAYS emitted when using the REST interface](https://github.com/lightningnetwork/lnd/pull/3965). As an example, if the field `""f""` wasn't set, rather than omitting it in our response, we'll emit: `""f"": false""`. 

## Peer to Peer Gossip 

[We'll now send blank response if a peer sends us a request for channels](https://github.com/lightningnetwork/lnd/pull/3925) on a different chain than we advertise. 

## Invoice Handling 

[A bug has been fixed that would result in a deadlock with the invoice managing sub-system on a rare occasion](https://github.com/lightningnetwork/lnd/pull/3980). 

[Batch invoice expiry has been optimized for larger nodes](https://github.com/lightningnetwork/lnd/pull/3950). Before this change, very large nodes (10s of thousands of invoices) may have witnessed very slow start up if they just upgraded to this new version, or had a large number of invoices expire while they were offline. 

## Wallet 

[A bug has been fixed in the wallet](https://github.com/lightningnetwork/lnd/pull/4017) where rescans would include more addresses that actually necessary. This would result in slower times to readiness for larger nodes, and also trigger an increased amount of false positives for neutrinos nodes. 

## Channel State Machine

[A number of accounting related fixes have been made to the channel state machine](https://github.com/lightningnetwork/lnd/pull/3691). With these fixes, we'll now more accurately estimate the types of HTLCs that the commitment transaction can carry, properly factoring in things like the added cost of an HTLC, the reserve, and asymmetric dust values across commitments. User affected by this bug might've seen weird retry loops when path finding due to not properly recoding the ""available balance"" in one's commitment transaction. This bug fixes also preps us for payment splitting, as balance will run lower as we're able to utilize multiple channels to make a single payment. 

[We now perform _stricter_ accounting w.r.t the maximum number of HTLCs allowed in a single commitment transaction](https://github.com/lightningnetwork/lnd/pull/3910). 

[A series of fixes in our unit tests will now properly exercise expected behavior between other implementations](https://github.com/lightningnetwork/lnd/pull/3998). 

[A bug that would at times causes a de-sync that would lead to an inadvertent force close between `lnd` nodes, and also other implementations](https://github.com/lightningnetwork/lnd/pull/3872). 

## On-Chain Contract Handling 

[A new config option has been added to allow mobile clients to give their connected parties a chance to settle/fail an HTLC before we go to chain](https://github.com/lightningnetwork/lnd/pull/3876). This new config option takes the form of `--payments-expiration-grace-period=T`, where `T` is a ""duration"" (1s, 5s, 5m, 5h, etc). Developers deploying `lnd` for mobile applications may want to set this value as they see fit, if their users are reporting frequent channel force closes due to intermittent connectivity.  

## Changelog


The full list of changes since `v0.9.0-beta` can be found here:

* https://github.com/lightningnetwork/lnd/compare/v0.9.0-beta...v0.9.1-beta

# Contributors (Alphabetical Order)

Andras Banki-Horvath 
Eugene Siegel 
Johan T. Halseth 
Joost Jager 
Olaoluwa Osuntokun 
Oliver Gugger 
Roei Erez 
Wilmer Paulino 
",49765480
55,False,True,2020-02-21T03:25:21Z,2020-02-21T04:41:58Z,"This marks the first minor release in the `v0.9.0` series. As this is a minor release, no major features are included in this release, but a number of important bug fixes are present. These bug fixes should eliminate the current known instance of erroneous force closes between nodes, optimize invoice expiry for larger nodes, and fix some accounting issues related to estimating the correct amount of available balance when forwarding. 


# Verifying the Release

In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import the keys that have signed this release if you haven't done so already: 

```
curl https://keybase.io/roasbeef/pgp_keys.asc | gpg --import
```

Once you have the required PGP keys, you can verify the release (assuming `manifest-v0.9.1-beta.rc1.txt` and `manifest-v0.9.1-beta.rc1.txt.sig` are in the current directory) with:

```
gpg --verify manifest-v0.9.1-beta.rc1.txt.sig
```

You should see the following if the verification was successful:

```
gpg: assuming signed data in 'manifest-v0.9.1-beta.rc1.txt'
gpg: Signature made Thu Feb 20 20:38:37 2020 PST
gpg:                using RSA key 4AB7F8DA6FAEBB3B70B1F903BC13F65E2DC84465
gpg: Good signature from ""Olaoluwa Osuntokun <laolu32@gmail.com>"" [ultimate]
```

That will verify the signature of the manifest file, which ensures integrity and authenticity of the archive you've downloaded locally containing the binaries. Next, depending on your operating system, you should then re-compute the `sha256` hash of the archive with `shasum -a 256 <filename>`, compare it with the corresponding one in the manifest file, and ensure they match *exactly*.

## Verifying the Release Binaries

Our release binaries are fully reproducible. Third parties are able to verify that the release binaries were produced properly without having to trust the release manager(s). See our [reproducible builds guide](https://github.com/lightningnetwork/lnd/tree/master/build/release) for how this can be achieved. The release binaries are compiled with `go1.13.7`, which is required by verifiers to arrive at the same ones. They include the following build tags: `autopilotrpc`, `signrpc`, `walletrpc`, `chainrpc`, `invoicesrpc`, `routerrpc`, and `watchtowerrpc`. Note that these are already included in the release script, so they do not need to be provided.

Finally, you can also verify the _tag_ itself with the following command:

```
git verify-tag v0.9.0-beta
```

# Building the Contained Release 

Users are able to rebuild the target release themselves without having to fetch any of the dependencies. In order to do so, assuming that `vendor.tar.gz` and `lnd-source-v0.9.1-beta.rc1.tar.gz` are in the current directory, follow these steps:

```
tar -xvzf vendor.tar.gz
tar -xvzf lnd-source-v0.9.1-beta.rc1.tar.gz
GO111MODULE=on go install -v -mod=vendor -ldflags ""-X github.com/lightningnetwork/lnd/build.Commit=v0.9.1-beta"" ./cmd/lnd
GO111MODULE=on go install -v -mod=vendor -ldflags ""-X github.com/lightningnetwork/lnd/build.Commit=v0.9.1-beta"" ./cmd/lncli
```

The `-mod=vendor` flag tells the `go build` command that it doesn't need to fetch the dependencies, and instead, they're all enclosed in the local vendor directory. 

Additionally, it's now possible to use the [enclosed `release.sh` script to bundle a release for a _specific_ system like so](https://github.com/lightningnetwork/lnd/pull/2191): 

```
LNDBUILDSYS=""linux-arm64 darwin-amd64"" ./build/release/release.sh
```

⚡️⚡️⚡️ OK, now to the rest of the release notes! ⚡️⚡️⚡️

# Release Notes

## RPC Configuration 

[A new flag (`--tlsautorefresh`) has been added to instruct `lnd` to _re-generate_ TLS certs](https://github.com/lightningnetwork/lnd/pull/3932) if the certs on disk differ from the specified configuration options. An example would be if you add a new TLS domain, but the certs on disk only have `localhost` as a valid domain for the cert. 

[We've updated a config on our end to ensure all default values are ALWAYS emitted when using the REST interface](https://github.com/lightningnetwork/lnd/pull/3965). As an example, if the field `""f""` wasn't set, rather than omitting it in our response, we'll emit: `""f"": false""`. 

## Peer to Peer Gossip 

[We'll now send blank response if a peer sends us a request for channels](https://github.com/lightningnetwork/lnd/pull/3925) on a different chain than we advertise. 

## Invoice Handling 

[A bug has been fixed that would result in a deadlock with the invoice managing sub-system on a rare occasion](https://github.com/lightningnetwork/lnd/pull/3980). 

[Batch invoice expiry has been optimized for larger nodes](https://github.com/lightningnetwork/lnd/pull/3950). Before this change, very large nodes (10s of thousands of invoices) may have witnessed very slow start up if they just upgraded to this new version, or had a large number of invoices expire while they were offline. 

## Wallet 

[A bug has been fixed in the wallet](https://github.com/lightningnetwork/lnd/pull/4017) where rescans would include more addresses that actually necessary. This would result in slower times to readiness for larger nodes, and also trigger an increased amount of false positives for neutrinos nodes. 

## Channel State Machine

[A number of accounting related fixes have been made to the channel state machine](https://github.com/lightningnetwork/lnd/pull/3691). With these fixes, we'll now more accurately estimate the types of HTLCs that the commitment transaction can carry, properly factoring in things like the added cost of an HTLC, the reserve, and asymmetric dust values across commitments. User affected by this bug might've seen weird retry loops when path finding due to not properly recoding the ""available balance"" in one's commitment transaction. This bug fixes also preps us for payment splitting, as balance will run lower as we're able to utilize multiple channels to make a single payment. 

[We now perform _stricter_ accounting w.r.t the maximum number of HTLCs allowed in a single commitment transaction](https://github.com/lightningnetwork/lnd/pull/3910). 

[A series of fixes in our unit tests will now properly exercise expected behavior between other implementations](https://github.com/lightningnetwork/lnd/pull/3998). 

[A bug that would at times causes a de-sync that would lead to an inadvertent force close between `lnd` nodes, and also other implementations](https://github.com/lightningnetwork/lnd/pull/3872). 

## On-Chain Contract Handling 

[A new config option has been added to allow mobile clients to give their connected parties a chance to settle/fail an HTLC before we go to chain](https://github.com/lightningnetwork/lnd/pull/3876). This new config option takes the form of `--payments-expiration-grace-period=T`, where `T` is a ""duration"" (1s, 5s, 5m, 5h, etc). Developers deploying `lnd` for mobile applications may want to set this value as they see fit, if their users are reporting frequent channel force closes due to intermittent connectivity.  

## Changelog


The full list of changes since `v0.9.0-beta` can be found here:

* https://github.com/lightningnetwork/lnd/compare/v0.9.0-beta...v0.9.1-beta.rc1

# Contributors (Alphabetical Order)

Andras Banki-Horvath 
Eugene Seigel 
Johan T. Halseth 
Joost Jager 
Olaoluwa Osuntokun 
Oliver Gugger 
Roei Erez 
Wilmer Paulino 
",49765480
56,False,False,2020-01-22T08:31:11Z,2020-01-22T17:23:57Z,"This marks the first major release in the `v0.9.x` series, as well as the first `lnd` release of the new decade! This release contains several new features, optimizations, new protocol-level features surfaced on the RPC layer, cross-implementation protocol compatibility fixes, and as usual a ton of bug fixes. Shouts out to all the contributors (over 30+ for this release!) as well as all those that reported bugs and tested, that helped make this new release happen.

# Database Migrations

This release contains a single migration which modifies the on-disk representation of the invoices to be more flexible by utilizing the TLV serialization defined in the BOLT specifications. This change allows us to easily add more information to the invoices, which will be especially useful as we finalize our support for AMP within the daemon. The migration should look something like this upon initial start up: 
```
2020-01-09 16:35:39.586 [INF] LTND: Version: 0.9.0-beta commit=v0.9.0-beta, build=development, logging=default
2020-01-09 16:35:39.587 [INF] LTND: Active chain: Bitcoin (network=simnet)
2020-01-09 16:35:39.589 [INF] CHDB: Checking for schema update: latest_version=12, db_version=11
2020-01-09 16:35:39.589 [INF] CHDB: Performing database schema migration
2020-01-09 16:35:39.589 [INF] CHDB: Applying migration #12
2020-01-09 16:35:39.589 [INF] CHDB: Migrating invoice bodies to TLV, adding payment addresses and feature vectors.
2020-01-09 16:35:39.589 [INF] CHDB: Migration to TLV invoice bodies, payment address, and features complete!
```

# Verifying the Release

In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import the keys that have signed this release if you haven't done so already: 

```
curl https://keybase.io/roasbeef/pgp_keys.asc | gpg --import
```

Once you have the required PGP keys, you can verify the release (assuming `manifest-v0.9.0-beta.txt` and `manifest-v0.9.0-beta.txt.sig` are in the current directory) with:

```
gpg --verify manifest-v0.9.0-beta.txt.sig
```

You should see the following if the verification was successful:

```
gpg: assuming signed data in 'manifest-v0.9.0-beta.txt'
gpg: Signature made Wed Jan 22 09:02:56 2020 PST
gpg:                using RSA key 4AB7F8DA6FAEBB3B70B1F903BC13F65E2DC84465
gpg: Good signature from ""Olaoluwa Osuntokun <laolu32@gmail.com>"" [ultimate]
```

That will verify the signature of the manifest file, which ensures integrity and authenticity of the archive you've downloaded locally containing the binaries. Next, depending on your operating system, you should then re-compute the `sha256` hash of the archive with `shasum -a 256 <filename>`, compare it with the corresponding one in the manifest file, and ensure they match *exactly*.

## Verifying the Release Binaries

Our release binaries are fully reproducible. Third parties are able to verify that the release binaries were produced properly without having to trust the release manager(s). See our [reproducible builds guide](https://github.com/lightningnetwork/lnd/tree/master/build/release) for how this can be achieved. The release binaries are compiled with `go1.13.6`, which is required by verifiers to arrive at the same ones. They include the following build tags: `autopilotrpc`, `signrpc`, `walletrpc`, `chainrpc`, `invoicesrpc`, `routerrpc`, and `watchtowerrpc`. Note that these are already included in the release script, so they do not need to be provided.

Finally, you can also verify the _tag_ itself with the following command:

```
git verify-tag v0.9.0-beta
```

# Building the Contained Release 

Users are able to rebuild the target release themselves without having to fetch any of the dependencies. In order to do so, assuming that `vendor.tar.gz` and `lnd-source-v0.9.0-beta.tar.gz` are in the current directory, follow these steps:

```
tar -xvzf vendor.tar.gz
tar -xvzf lnd-source-v0.9.0-beta.tar.gz
GO111MODULE=on go install -v -mod=vendor -ldflags ""-X github.com/lightningnetwork/lnd/build.Commit=v0.9.0-beta"" ./cmd/lnd
GO111MODULE=on go install -v -mod=vendor -ldflags ""-X github.com/lightningnetwork/lnd/build.Commit=v0.9.0-beta"" ./cmd/lncli
```

The `-mod=vendor` flag tells the `go build` command that it doesn't need to fetch the dependencies, and instead, they're all enclosed in the local vendor directory. 

Additionally, it's now possible to use the [enclosed `release.sh` script to bundle a release for a _specific_ system like so](https://github.com/lightningnetwork/lnd/pull/2191): 

```
LNDBUILDSYS=""linux-arm64 darwin-amd64"" ./build/release/release.sh
```

⚡️⚡️⚡️ OK, now to the rest of the release notes! ⚡️⚡️⚡️

# Release Notes


## Macaroon Bakery 🍪

A new custom [macaroon bakery](https://github.com/lightningnetwork/lnd/pull/1160) is now available through gRPC (`BakeMacaroon`) or  the command line (`lncli bakemacaroon`)! The bakery allows users to mint macaroons with their own custom set of read/write permissions for use cases where the three pre-defined default macaroons (admin, readonly and invoice) are not enough. The [documentation has also been updated](https://github.com/lightningnetwork/lnd/blob/master/macaroons/README.md#bakery) to describe the process.

**Note:** The bakery requires a new permission that the existing `admin.macaroon` does not contain. Follow the steps described in [the documentation](https://github.com/lightningnetwork/lnd/blob/master/macaroons/README.md#upgrading-from-v080-beta-or-earlier) to re-generate the admin macaroon.


## New Payment Features

### Multi-Path Payments

This release includes full support for receiving [Multi-Path Payments](https://github.com/lightningnetwork/lightning-rfc/pull/643) as defined in BOLT 04, which is the first flavor of AMP rolling out on the network. MPP allows an invoice to be settled by multiple concurrent HTLCs, each of which carries a portion of the total payment.

With receiving support, MPP-aware senders can make better use of the payee's total inbound capacity in case there is no single channel that can support the payment amount. From a UX perspective, this allows wallet UIs to begin exploring a true, _unified_ receiving capacity since the sender is able to utilize all of the receiver's channels for a single payment. As more MPP-aware senders come on to the network, 0.9 nodes will be able to accept payments without upgrading their software. We are currently targeting support for sending MPP in 0.10.

At a high-level, MPP is implemented via an additional TLV record in the final hop's onion blob, containing a random `payment_secret` and `total_amt_msat` being sent. [Each HTLC carries this additional record in its onion blob](https://github.com/lightningnetwork/lnd/pull/3442), allowing the receiver to identify and [settle an invoice with multiple HTLCs](https://github.com/lightningnetwork/lnd/pull/3415). Invoices will track all HTLCs in the set that are used to settle an invoices, as can be seen in this stripped down invoice settled by two HTLCs:
```                                              
{                                                                  
    ""memo"": ""multi path payment"",                                             
    ""r_preimage"": ""73d8d926c13579b0b1decf6b808a2bbf7db59073999c5d0a14d4dcc9c4225a49"",
    ""r_hash"": ""a3309015130da7cc28f529191a3d0aeb06edfedfd58dac1dfde8b1fbd4eadc91"",
    ""value_msat"": ""1000000"",                                                                               
    ""amt_paid_msat"": ""1000000"",                                    
    ""state"": ""SETTLED"",                                            
    ""htlcs"": [                                                     
        {                                                          
            ""chan_id"": ""571746046509056"",                          
            ""htlc_index"": ""4"",                                     
            ""amt_msat"": ""500000"",                                 
            ""accept_height"": 525,                                  
            ""accept_time"": ""1579112858"",                           
            ""resolve_time"": ""1579112860"",                          
            ""expiry_height"": 565,                                  
            ""state"": ""SETTLED"",                                    
            ""custom_records"": {                                    
            },                                                     
            ""mpp_total_amt_msat"": ""1000000""                        
        },
        {                                                          
            ""chan_id"": ""571746046509056"",                          
            ""htlc_index"": ""5"",                                     
            ""amt_msat"": ""500000"",                                 
            ""accept_height"": 525,                                  
            ""accept_time"": ""1579112654"",                           
            ""resolve_time"": ""1579112654"",                          
            ""expiry_height"": 565,                                  
            ""state"": ""SETTLED"",                                    
            ""custom_records"": {                                    
            },                                                     
            ""mpp_total_amt_msat"": ""1000000""                        
        }                                                               
    ],                                                                                    
}
```

Note that `amt_msat` paid by each HTLC sums both to the `mpp_total_amt_msat` value included by the sender, as well as `amt_paid_msat` displaying the total amount received.

The [rpc responses for `ListPayments`, `routerrpc.SendPayment`, and `routerrpc.TrackPayment` have also been extended with an `htlcs` field that exposes additional data about individual HTLC attempts](https://github.com/lightningnetwork/lnd/pull/3499). For now these will only show the last attempted HTLC, but will be populated with a full log of all HTLC attempts sent once MPP sending is fully integrated. This will allow us to display multiple successful HTLCs, as well as failed attempts. The latter will useful in allowing senders to inspect failed routes, and glean insights about why certain attempts failed.

A stripped down example of the new payment responses:
```
        {
            ""payment_hash"": ""8eedb4bcd024f7f46fdf60b57e54dba60e19cb2c8934ec5b6fbb7f5efb58b29b"",
            ""payment_preimage"": ""cf6b808a2bbf7db59073973d8d926c13579b0b1de99c5d0a14d4dcc9c4225a49"",
            ""creation_time_ns"": ""1578620428000000000"",
            ""path"": [
                ""03186ce6a4a186895ee44a9864ef025fde8fb587d98926bfc370e2c366597a3f8f"",
                ""0206e82064f547768dcef9776b80cabdf82638aac86948e4c77b9ea931ea75bab5""
            ],
            ""value_msat"": ""1000"",
            ""fee_msat"": ""0"",
            ""status"": ""SUCCEEDED"",
            ""htlcs"": [
                {
                    ""status"": ""SUCCEEDED"",
                    ""route"": {
                        ""total_time_lock"": 612315,
                        ""total_fees_msat"": ""0"",
                        ""total_amt_msat"": ""1000"",
                        ""hops"": [
                            {
                                ""chan_id"": ""612270746636810592"",
                                ""chan_capacity"": ""5000000"",
                                ""fee_msat"": ""0"",
                                ""amt_to_forward_msat"": ""1000"",
                                ""expiry"": 612171,
                                ""pub_key"": ""03186ce6a4a186895ee44a9864ef025fde8fb587d98926bfc370e2c366597a3f8f"",
                                ""tlv_payload"": true,
                                ""mpp_record"": null,
                                ""custom_records"": {
                                }
                            },
                            {
                                ""chan_id"": ""612270746636810592"",
                                ""chan_capacity"": ""5000000"",
                                ""expiry"": 612171,
                                ""fee_msat"": ""0"",
                                ""amt_to_forward_msat"": ""1000"",
                                ""pub_key"": ""0206e82064f547768dcef9776b80cabdf82638aac86948e4c77b9ea931ea75bab5"",
                                ""tlv_payload"": true,
                                ""mpp_record"": {
                                    ""payment_addr"": ""f91731b1e2227cc26137d2a2c0029ceef41ac8c481c8d3cc61510bf76ff27cbe"",
                                    ""total_amt_msat"": ""1000""
                                },
                                ""custom_records"": {
                                }
                            }
                        ]
                    },
                }
            ]
        }
```

Here we can see that each HTLC attempt displays it's full route, including the fees paid and timelocks incurred at each hop. MPP payments can be identified by the presences of an `mpp_record` attached to the final hop, which containing the new fields described above. If this field is not present, it indicates that payment was made using the legacy payment type.

Note: The `path` field has been deprecated in favor of extracting the pubkeys from the route directly. `creation_date`  has also been deprecated and will replaced by `creation_time_ns`. As seen above, legacy `creation_date`s are converted into nanoseconds for display, but still only have one second resolution.

#### Weakness Addressed by MPP

MPP is more robust against active probing of the receiver, since the sender must know the invoice's `payment_secret`. This value serves as a one-time authentication token, further restricting the set of individuals who can settle a particular invoice. In particular, invoices can now only be settled by those who have seen it, rather than only needing to know the correct payment hash which is transmitted in clear over the network.

MPP also offers increased safety to situations involving over payment of invoices, most notably zero-value invoices used for tipping or donations. With the legacy protocol, it is possible to snipe the difference between the invoice amount and total amount carried by the HTLC, allowing intermediaries to take the difference as profit in addition to fees earned. MPP payments resolve this by privately communicating the _sender's_ intended payment amount in the onion blob (via `total_amt_msat`) to the receiver. Since intermediaries will not know the `payment_secret`, sniping is prevented even if the intermediary can construct a valid HTLC with a smaller `total_amt_msat`.

### Single-Shot MPP Payments by Default

Although 0.9 does not support sending true MPP payments, it does use the new MPP protocol as the default mechanism for single-shot payments (payments with only one HTLC). Doing so addresses the known weaknesses in the legacy payment mechanism discussed above, and seamlessly upgrades the overall privacy and security of the basic payment style used today.

No action needs to be taken in order to benefit from this upgrade. Senders will [automatically detect the receiver's support via feature bits in BOLT 11 invoices, falling back to the legacy protocol for older nodes](https://github.com/lightningnetwork/lnd/pull/3679). As such, the new mechanism will be used when paying from 0.9 to another 0.9 node, or a newer release of C-Lightning or Eclair. Further, these improved payments are secure and can be used even if intermediaries are outdated, as it only requires support from the endpoints.

### Custom Onion-Tunneled TLV Payment Metadata Records 

It is now possible to [attach additional data](https://github.com/lightningnetwork/lnd/pull/3744) to a payment using custom records. The send calls on the RPC interface have a field `dest_custom_records` that takes the custom records to send. This field is also present on `QueryRoutes`. Custom records take up space in the fixed size onion packet, leaving fewer bytes to describe the route. The pathfinding algorithm needs to know how many bytes are left and limit the route length to that. Checks for [length](https://github.com/lightningnetwork/lnd/pull/3818) and [size](https://github.com/lightningnetwork/lnd/pull/3841) have been added.

On the receiving end, the [custom records are stored](https://github.com/lightningnetwork/lnd/pull/3742) in the invoice database and exposed through the existing invoice query calls (`LookupInvoice`, `ListInvoices`, etc). This new feature allows any payment on the network to attach additional _meta-data_ along with the payment. As an example, a user could send a payment to an exchange to deposit funds, and attach their account ID along-side the payment, which the exchange then checks+verifies upon receipt before crediting their account with the deposit. This is a highly anticipated feature as it allows far a large class of new applications to be built on top of Lightning. For further ideas on how to leverage this new feature, [check out Laolu's talk on Advanced Lightning Applications from last last year](https://docs.google.com/presentation/d/1nCqBVPF63xi0apzDEfWNrj_IA0iNt1XYSINjHtmmqaI/edit?usp=sharing). 

Sending a payment with custom records attached will look something like the following on the command line: 
```
{
    ""payment_error"": """",
    ""payment_preimage"": ""5c8fb9c043d00e4c1780b2e0992a979284b941700219726c71e6093c387679de"",
    ""payment_route"": {
        ""total_time_lock"": 1657728,
        ""total_fees"": ""0"",
        ""total_amt"": ""1000"",
        ""hops"": [
            {
                ""chan_id"": ""1589156041461923840"",
                ""chan_capacity"": ""16777215"",
                ""amt_to_forward"": ""1000"",
                ""fee"": ""0"",
                ""expiry"": 1657728,
                ""amt_to_forward_msat"": ""1000000"",
                ""fee_msat"": ""0"",
                ""pub_key"": ""0270685ca81a8e4d4d01beec5781f4cc924684072ae52c507f8ebe9daf0caaab7b"",
                ""tlv_payload"": true,
                ""mpp_record"": null,
                ""custom_records"": {
                    ""5482373484"": ""5c8fb9c043d00e4c1780b2e0992a979284b941700219726c71e6093c387679de""
                }
            }
        ],
        ""total_fees_msat"": ""0"",
        ""total_amt_msat"": ""1000000""
    },
    ""payment_hash"": ""8cf790cc128a0bb0552b3223d542adfba6a93c948f84e49dcd532309f5b85634""
}
```

Notice the new `custom_records` field, as well as the `tlv_payload` boolean which specifies that this route used the new modern onion paylaoad format. 

On the receiver, end, the new output of `ListInvoices` looks something like: 
```
        {
            ""memo"": """",
            ""r_preimage"": ""5c8fb9c043d00e4c1780b2e0992a979284b941700219726c71e6093c387679de"",
            ""r_hash"": ""8cf790cc128a0bb0552b3223d542adfba6a93c948f84e49dcd532309f5b85634"",
            <snip>
            ""htlcs"": [
                {
                    ""chan_id"": ""1589156041461923840"",
                    ""htlc_index"": ""8"",
                    ""amt_msat"": ""1000000"",
                    ""accept_height"": 1657685,
                    ""accept_time"": ""1578617436"",
                    ""resolve_time"": ""1578617436"",
                    ""expiry_height"": 1657728,
                    ""state"": ""SETTLED"",
                    ""custom_records"": {
                        ""5482373484"": ""5c8fb9c043d00e4c1780b2e0992a979284b941700219726c71e6093c387679de""
                    },
                    ""mpp_total_amt_msat"": ""0""
                }
            ],
          <snip>
        }
```

Once again the `custom_records` will will expose a map from the integer type of the record to the raw bytes of the value. Note that custom records are only permitted with a type greater than `65536`, any records below this value are reversed for official protocol usage. For further details with respect to the new RPC-level changes to the payment sending/invoicing calls, see the [`lnd` API documentation which is now up-to-date as of `lnd` `v0.9.0`](https://api.lightning.community/). 

With the introduction of custom record sending and receiving, it became possible to attach arbitrary data to a payment. One obvious use case is attaching a human-readable message to a payment. Especially in the case of spontaneous keysend payments, this can give the receiver some context on the payment.

For example: tipping. Usually people sending a tip would want to include some information on who they are or what the tip is for. For Lightning this may be even more desired than for other payment methods, because payments are anonymous by default.

Custom records can also be set using the `lncli` command like so: 
```
lncli sendpayment -d 0374e7fb33eafd74fe1acb6db7680bb4aa78e1c839a6f954e38abfad680f645ef7 -a 100 --keysend --data 323442=00,3234556=ffff080812
```

To specify a string value, the standard command line tool xxd can be used (the example record id here is the 3-byte ascii string 'tip' converted to an integer):
```
--data 7629168=$(echo -n ""Thank you!"" | xxd -pu -c 10000)
```
(The `-c` parameter is to prevent `xxd` from inserting line breaks)

Note: The available onion blob space of `1300` bytes is used for routing info and custom records. The bigger the size of the custom records, the fewer bytes remain for routing info and the shorter the maximum route length will be.

### New Payment Type: `keysend` 

One application of custom records is a spontaneous payment, also known as [keysend](https://github.com/lightningnetwork/lnd/pull/3795). In key send, a custom record is used to encode the payment preimage in the onion payload for the recipient of the payment. This allows them to pull the payment without prior knowledge of the preimage.

Note that spontaneous payment is not yet defined in the Lightning spec. Therefore the current implementation should be considered experimental and is subjected to change.

In order to send a `keysend` payment on the command line, a new flag `--keysend` needs to be specified, along with the destination (`--dest`) and the amount to send (`--amt`). Notice that we don't specify a payment hash anywhere! Instead, the sender will actually _encrypt_ the payment pre-image to the receiver, who will then decrypt the payload along with the rest of the normal per-hop routing information. 

A sample `keysend` executed at the command line resembles something liek the following: 
```
🏔 tlncli sendpayment --keysend --dest=0270685ca81a8e4d4d01beec5781f4cc924684072ae52c507f8ebe9daf0caaab7b --amt=1000 --final_cltv_delta=40
{
    ""payment_error"": """",
    ""payment_preimage"": ""5c8fb9c043d00e4c1780b2e0992a979284b941700219726c71e6093c387679de"",
    ""payment_route"": {
        ""total_time_lock"": 1657728,
        ""total_fees"": ""0"",
        ""total_amt"": ""1000"",
        ""hops"": [
            {
                ""chan_id"": ""1589156041461923840"",
                ""chan_capacity"": ""16777215"",
                ""amt_to_forward"": ""1000"",
                ""fee"": ""0"",
                ""expiry"": 1657728,
                ""amt_to_forward_msat"": ""1000000"",
                ""fee_msat"": ""0"",
                ""pub_key"": ""0270685ca81a8e4d4d01beec5781f4cc924684072ae52c507f8ebe9daf0caaab7b"",
                ""tlv_payload"": true,
                ""mpp_record"": null,
                ""custom_records"": {
                    ""5482373484"": ""5c8fb9c043d00e4c1780b2e0992a979284b941700219726c71e6093c387679de""
                }
            }
        ],
        ""total_fees_msat"": ""0"",
        ""total_amt_msat"": ""1000000""
    },
    ""payment_hash"": ""8cf790cc128a0bb0552b3223d542adfba6a93c948f84e49dcd532309f5b85634""
}
```

The key area to examine is the following: 
```
                ""custom_records"": {
                    ""5482373484"": ""5c8fb9c043d00e4c1780b2e0992a979284b941700219726c71e6093c387679de""
                }
```

Here we use [lnd's keysend record](https://github.com/lightningnetwork/lnd/blob/6c8c99dae99e741d2817d444f8b11945ddd15e2e/record/experimental.go#L4) record to package the pre-image to the receiver. You can verify that the `payment_preimage` field and the `payment_hash` field correspond. If one wishes to perform a `keysend` _programmatically_ via the RPC API, [then the `DestCustomRecords` field will need to be set accordingly](https://api.lightning.community/#grpc-request-sendrequest-streaming). 

On the receiver side, by default all nodes will reject any incoming `keysend` payments. In order to enable receiving such payments, nodes will need to opt-in by starting `lnd` with a new flag: `--accept-keysend`. When examining an invoice, it's easy to determine if it was payed using a `keysend` or not. When we receive a new incoming `keysend` payment that's to be accepted, we'll insert a _new_ invoice into the database which looks something like the following:
```
        {
            ""memo"": """",
            ""r_preimage"": ""5c8fb9c043d00e4c1780b2e0992a979284b941700219726c71e6093c387679de"",
            ""r_hash"": ""8cf790cc128a0bb0552b3223d542adfba6a93c948f84e49dcd532309f5b85634"",
            ""value"": ""1000"",
            ""value_msat"": ""1000000"",
            ""settled"": true,
            ""creation_date"": ""1578617436"",
            ""settle_date"": ""1578617436"",
            ""payment_request"": """",
            ""description_hash"": null,
            <snip>
                {
                    ""chan_id"": ""1589156041461923840"",
                    ""htlc_index"": ""8"",
                    ""amt_msat"": ""1000000"",
                    ""accept_height"": 1657685,
                    ""accept_time"": ""1578617436"",
                    ""resolve_time"": ""1578617436"",
                    ""expiry_height"": 1657728,
                    ""state"": ""SETTLED"",
                    ""custom_records"": {
                        ""5482373484"": ""5c8fb9c043d00e4c1780b2e0992a979284b941700219726c71e6093c387679de""
                    },
                    ""mpp_total_amt_msat"": ""0""
                }
            ],
            ""features"": {
                ""9"": {
                    ""name"": ""tlv-onion"",
                    ""is_required"": false,
                    ""is_known"": true
                }
            },
            ""is_keysend"": true
        }
```

Notice that there's no `payment_request` value, and the set of new fields such as `custom_records` and information detailing the set of feature bits used to complete the payment (described in further detail below). 

### First-Class Rebalancing via Circular Payments to Self

We have added support to send a [payment to yourself](https://github.com/lightningnetwork/lnd/pull/3736). This allows rebalancing of channels without the need for external scripts. To control the incoming channel, a new [last hop](https://github.com/lightningnetwork/lnd/pull/3739) routing restriction was added.

This new feature is a valuable tool in one's toolkit for node management as it allows you control the _incoming_ and _outgoing_ channels used to send a payment. Let's say I have a channel with ID `12345` and I sent to send funds _from_ that channel (rebalancing to be able to receive more into the channel) to another channel that I have with peer `02e1dfa` (rebalancing to be able to send more out of the channel). First, I'll create a new invoice on the command line for the amount I want to use for rebalancing purposes: 
```
🏔 lncli --network=testnet addinvoice --amt=1000
{
    ""r_hash"": ""ac7c8d8f72b34d68b1ed53b1401908b4fa3a2b0c41a21206686289f437bd02fa"",
    ""payment_request"": ""lntb10u1p0p0nm3pp5437gmrmjkdxk3v0d2wc5qxggknar52cvgx3pypngv2ylgdaaqtaqdqqcqzpgrzjq027z73uyyl7fy8pkrpcn7x0el82pz3fw974p2052de4uz4j5lqqx943xgqqq9qqqqqqqqqqqqqqqqqqpusp5ljp309kulcyghcfs7usd9ed0fxm85tquuyxf36z5k6wj6cddyssq9qy9qsqqwsldznwmg3prdgq7ddul7jspgk3n6fvkqgjc94phjc78jhkzc9y9q8vsmknp02mqg8tglhlvuseqq2nnar338tnqsspu79qvtmae0gpujtztv"",
    ""add_index"": ""167""
}
```

Now `lnd` is ready to execute the rebalancing attempt. To do this, we'll execute a new modified call to our trusty `payinvoice` command. Note that it's possible to do this _programmatically_+ as well using the RPC interface API. In any case, here's our command to _complete_ this rebalancing attempt: 
```
lncli --network=testnet payinvoice --allow_self_payment --outgoing_chan_id=12345 --last_hop=02e1dfa --pay_req=lntb10u1p0p0nm3pp5437gmrmjkdxk3v0d2wc5qxggknar52cvgx3pypngv2ylgdaaqtaqdqqcqzpgrzjq027z73uyyl7fy8pkrpcn7x0el82pz3fw974p2052de4uz4j5lqqx943xgqqq9qqqqqqqqqqqqqqqqqqpusp5ljp309kulcyghcfs7usd9ed0fxm85tquuyxf36z5k6wj6cddyssq9qy9qsqqwsldznwmg3prdgq7ddul7jspgk3n6fvkqgjc94phjc78jhkzc9y9q8vsmknp02mqg8tglhlvuseqq2nnar338tnqsspu79qvtmae0gpujtztv
```

### Local balance check

Failure reporting in case none of the local channels has enough balance to execute the payment has been improved. We now return a specific [insufficient balance](https://github.com/lightningnetwork/lnd/pull/3749) payment result instead of only indicating that no route could be found.

### mSAT support

Support for `mSAT` payments has been added on the RPC level for [payments](https://github.com/lightningnetwork/lnd/pull/3706) and [invoices](https://github.com/lightningnetwork/lnd/pull/3729).

## Privacy Enhancement 

This new release of `lnd` will properly initialize the starting mix-header Sphinx packets with random bytes in order to patch a recently discovered privacy leak that could potentially allow the receiver of a payment to ascertain the number of hops the payment traveled. See this [email by roasbeef for further details](https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-November/002288.html). 

## BOLT Compatibility

### Invalid Onion Payload Failure

0.9 now [returns the new `invalid_onion_payload` failure upon receiving a malformed onion TLV payload](https://github.com/lightningnetwork/lnd/pull/3470).

### Flat Features

The legacy local and global feature bit namespaces have been [merged into a single namespace](https://github.com/lightningnetwork/lnd/pull/3685), simplifying the way feature bits are assigned and used within the protocol. Features previously advertised as global in `init` messages will remain for backwards compatibility, while new features will be appended to the existing local features field. The global features field will be deprecated entirely once this is widespread within the network.

### Validate Sorted Uncompressed Short Channel IDs

0.9 now [verifies that short channel IDs in `QueryShortChanIDs` and `ChannelRangeReply` are sent in ascending order for the uncompressed format](https://github.com/lightningnetwork/lnd/pull/3743). This had already implemented for the zlib encoding, but is now checked across both encodings.

### Add `payment_secret` to BOLT 11 Payment Requests

Payment requests containing a `payment_secret` are properly encoded and decoded in 0.9. In addition, every newly created payment requests will encode a random `payment_secret` so that senders may use the improved MPP payment mechanism.

https://github.com/lightningnetwork/lnd/pull/3788

## Cross-Implementation Protocol Compatibility Fixes 

It was discovered that slight deviations existed between the various implementations w.r.t the way they implemented the gossip queries protocol feature. This version of `lnd` [has been patched](https://github.com/lightningnetwork/lnd/pull/3785) to ensure [that we'll properly send responses](https://github.com/lightningnetwork/lnd/pull/3836) as dictated by the spec to ensure better compatibility with c-lightning and various other implementations. 


## Channel Funding+Management Extensions

### Funding Flow Abstraction 

[This new release of `lnd` contains a dramatically refactored funding workflow internally](https://github.com/lightningnetwork/lnd/pull/3659). This new refactoring allowed us to abstract away aspects such as _how_ the funding transaction is constructed. We have many new features planned around this cut out such as generic external channel funding driven by PSBT, internal merging of several funding transaction into a single, or specifying a cold commitment key (where all your funds are sent to on force close, only need for sweeping and not channel updates). 

[With this release, we're shipping a low-level call that allow _external_ crafting of a funding transaction, given extra-protocol negotiation](https://github.com/lightningnetwork/lnd/pull/3722). In other words, a new RPC call that allows two parties to agree on the structure of a funding transaction outside of the protocol, obtain the outpoint, then use that as part of the normal funding workflow. Such a flow is useful for a number of _advanced_ features such as the creation of *channel factories*. 

The new [`FundingShim`](https://api.lightning.community/#fundingshim) parameter allows a caller to initiate a new funding flow, with apriori knowledge of information typically generated dynamically during the funding workflow such as the outpoint of the final funding transaction and the keys used within the multi-sig output. [A responder will then use the new `FundingStateStep` method to register a matching funding intent to dispatch automatically based on an expected pending channel ID](https://api.lightning.community/#fundingstatestep). 

As mentioned above, we have a number of interesting features planned for this new API call, so stay tuned! 

### Decoupled Min HTLC Settings

The default minimum htlc amount channel open parameter is [lowered from 1000 msat to 1 msat](https://github.com/lightningnetwork/lnd/pull/3697). This parameter is immutable during the life of the channel. By changing it to the lowest possible value, maximum flexibility is achieved. The minimum htlc amount can still be constrained to a higher value through the forwarding policy. Updating the minimum forward amount is now possible via the RPC and `lncli`.

### Option Upfront Shutdown Support

This release adds [support](https://github.com/lightningnetwork/lnd/pull/3655) for `option_upfront_shutdown` which enforces payout on cooperative close to an address that is set on channel open. `lnd` will disconnect from peers that attempt to close out to a script other than the one that they specified on startup.  Further information about feature bit can be found in the [BOLT2 specification](https://github.com/lightningnetwork/lightning-rfc/blob/8e69306e0a93375a1bbb1a0099f7ce3025ae4c0f/02-peer-protocol.md#the-open_channel-message). Use of this feature provides a partial protection against node compromise because channels can be set to close out to addresses which are not controlled by `lnd`. 

An upfront shutdown address can be set with the `close_address` field in the lnrpc/lncli `OpenChannel` call. Currently, only seed controlled addresses can be set as the upfront shutdown address when we do not initiate a channel open because this step is non-interactive. `lnd` can be started with `--enable-upfront-shutdown` to set seed addresses for all channel opens and closes by default. 

### Sweep Small Outputs

Sweeper (responsible for sweeping close transaction outputs back into the wallet) has been enhanced so that it also [sweeps small outputs](https://github.com/lightningnetwork/lnd/pull/3814) that on their own do not reach the sweep transaction dust limit. It does so by attaching additional utxos from the wallet, if available. This change is a preparation for the upcoming [anchor commitment format](https://github.com/lightningnetwork/lightning-rfc/pull/688). 

This change also makes it easier to use the [`BumpFee` RPC](https://github.com/lightningnetwork/lnd/blob/03cf9a53e4cb63aba47b715faa9e3cf52fe2d09c/lnrpc/walletrpc/walletkit.proto#L277) (or `lncli wallet bumpfee`) call for generic CPFP usage. 


### Close Address

Channels can be closed out to a [custom address](https://github.com/lightningnetwork/lnd/pull/3702) using the `delivery_address` field in lncli/lnrpc's `CloseChannel` call. Note that this feature cannot be used if `option_upfront_shutdown`, described [above](###Option-Upfront-Shutdown-Support), was pre-set for the channel on opening. 

This feature allows users to close out a channel and make a payment within the same transaction. This can also be used with [`Lightning Loop`](https://blog.lightning.engineering/posts/2019/03/20/loop.html) to initiate a _Loop In_ from a channel close, or even to create a new channel by sending to a P2WSH multi-sig script using the new funding APIs described above.  

### Autopilot External Score Trigger

Autopilot will now [check whether it should open more channels](https://github.com/lightningnetwork/lnd/pull/3520) after the external scores list has been updates.


## Channel Fitness Tracking

A [channelfitness subsytem](https://github.com/lightningnetwork/lnd/pull/3332) for tracking the health of the node's existing set of channels has been added. This subsystem tracks the online status of the remote peers that we have channels open with. These results are not currently persisted, so uptime is tracked from node restart rather than from channel open time. A lifetime value which indicates how long a peer has been monitored for is provided to allow calculation of uptime percentages. Uptime and lifetime are exposed as experimental fields on the lnrpc/lncli `ListChannels` call; both are expressed in seconds. 
**Note:** these fields are experimental and may be moved or changed in future versions on LND.

## Routing

### Mission control

Several updates have been applied to mission control, the sub-system in `lnd` that is responsible for tracking the performance of nodes involved in past payments.

The estimation of success probabilities for channels has been improved. Channels are no longer evaluated in isolation. A [new factor](https://github.com/lightningnetwork/lnd/pull/3462) was added that represents the overall performance of a node. This prevents pathfinding from getting stuck in trying every channel of a badly performing node.

Probability estimation for local channels is [more accurate](https://github.com/lightningnetwork/lnd/pull/3686) now. This prevents unnecessary detours to reach a direct peer.

Mission control now remembers more about what happened in the past. Previously it only kept the last payment attempt for a channel. With this release, this is extended to [tracking both the last failure and the last success](https://github.com/lightningnetwork/lnd/pull/3493). The goal is to improve payment success rates especially when small amount probes are performed frequently.

Finally, mission control state reporting has changed slightly. Probabilities are now amount-dependent and are therefore no longer reported through `QueryMissionControl`. A new call [`QueryProbability`](https://github.com/lightningnetwork/lnd/pull/3556) takes over this function.

### Pathfinding Improvements

The [routing algorithm acknowledges](https://github.com/lightningnetwork/lnd/pull/3558) that a pair of nodes may have multiple channels between them with distinct forwarding policies. This is [not a recommended practice](https://github.com/lightningnetwork/lightning-rfc/blob/master/04-onion-routing.md#recommendation), but needs to be dealt with nevertheless. `lnd` will craft a route that satisfies the most demanding (fee and time lock) channel of the channel set.

Routing decisions are based on cost and reliability. We applied a small touch up in this area to [tie break on reliability](https://github.com/lightningnetwork/lnd/pull/3782) when costs are equal.

## RPC Enhancements 

### Deeper Feature Bit Inspection

The tried and true `lncli getinfo` call has been upgraded to show additional detail including the set of _feature bits_ that the node is configured to advertise on the network. A sample of the new format of the call looks something like: 
```
{
    ""version"": ""0.9.0-beta commit=queue/v1.0.2-222-g6c8c99dae99e741d2817d444f8b11945ddd15e2e"",
    ""identity_pubkey"": ""0270685ca81a8e4d4d01beec5781f4cc924684072ae52c507f8ebe9daf0caaab7b"",
     <snip>
    ""features"": {
        ""0"": {
            ""name"": ""data-loss-protect"",
            ""is_required"": true,
            ""is_known"": true
        },
        ""5"": {
            ""name"": ""upfront-shutdown-script"",
            ""is_required"": false,
            ""is_known"": true
        },
        ""7"": {
            ""name"": ""gossip-queries"",
            ""is_required"": false,
            ""is_known"": true
        },
        ""9"": {
            ""name"": ""tlv-onion"",
            ""is_required"": false,
            ""is_known"": true
        },
        ""13"": {
            ""name"": ""static-remote-key"",
            ""is_required"": false,
            ""is_known"": true
        },
        ""15"": {
            ""name"": ""payment-addr"",
            ""is_required"": false,
            ""is_known"": true
        },
        ""17"": {
            ""name"": ""multi-path-payments"",
            ""is_required"": false,
            ""is_known"": true
        }
    }
}
```

The same feature vectors format is also now exposed on a variety of other rpc responses, each with slightly difference semantics:
 - `GetNodeInfo` and `DescribeGraph`: displays the current feature vector advertised on a `node_announcement` within our routing table.
 - `DecodePayReq`: displays the feature vector decoded from an arbitrary payment request.
 - `ListInvoices`: displays the feature vectors advertised on our own invoices.
 - `ListPeers`: displays the set of features advertised by the remote party while exchanging `init` messages.

### Updates to Default gRPC Settings 

The receive buffer of the gRPC client in [`lncli`](https://github.com/lightningnetwork/lnd/pull/3730) and the [REST proxy](https://github.com/lightningnetwork/lnd/pull/3740) has been increased from 50MiB to 200MiB to avoid errors on very large response data (for example, thousands of transactions in `listchaintxns`).

### Uniform `lncli` Hex-Encoding 

The gRPC gateway library that is used to expose lnd's interface as a REST/JSON API on top of the normal gRPC API did not support request parameters of the type `[]byte` (or `bytes` in the gRPC proto language). The [update to version 1.8.6 of this library](https://github.com/lightningnetwork/lnd/pull/3650) fixes this and should now allow REST users to use all API calls that lnd offers. Fields declared as `bytes` in the proto file must be encoded as base64 when used over REST. Some [`string` fields in `rpc.proto`](https://github.com/lightningnetwork/lnd/pull/3661) that were only added as a workaround in earlier versions have been deprecated and will be removed in the next version.

With this change, _all_ raw byte fields exposed on the `lncli` command responses will now all be _hex-encoded_, with no more usage of base64. This change was made to clear up confusion that users ran into when information was encoded in multiple ways across distinct calls. 

### Updates to `QueryRoutes` 

[The `QueryRoutes` RPC call is now able to pin _which outgoing_ channel is used when path finding, pin a pubkey to target for the final hop, and also accept custom unrolled hop hints](https://github.com/lightningnetwork/lnd/pull/3911). All of these changes make the RPC even _more_ generally useable as it can be used for things like rebalancing pre-processing, advanced more advanced payment types, and fine-grained channel selection. 

### New RPC Calls 

With the experimental `signer` RPC subserver you can now [sign and verify messages with custom keys](https://github.com/lightningnetwork/lnd/pull/3812) of the wallet (limited to the `m/1017'/` special purpose derivation branch).

**Note:** This RPC requires a new permission, re-generate your `admin.macaron` and/or `signer.macaroon` to get the new permission.

A new RPC to [derive shared Diffie-Hellman (ECDH) keys](https://github.com/lightningnetwork/lnd/pull/3812) against a node's identity public key has been added to the experimental `signer` subserver.

A new RPC endpoint has been added to provide a subscription for [peer online and offline events](https://github.com/lightningnetwork/lnd/pull/3397).

## Mobile

### Building

The mobile build is [now created](https://github.com/lightningnetwork/lnd/pull/3748) using the `github.com/lightninglabs/falafel` tool.

### API changes

The `Start` library method [has gotten an additional callback](https://github.com/lightningnetwork/lnd/pull/3775). Now `lnd` will notify both when the wallet is ready to be unlocked, and when `lnd` is ready to receive commands after the wallet has been unlocked.

### Macaroons and TLS support

With `falafel v0.7` the proper [macaroon and TLS certificate](https://github.com/lightningnetwork/lnd/pull/3783) is needed also when using the in-memory gRPC connections (which is done under the hood in the mobile build). This has no external facing changes, so it should work using the same APIs as before. This paves the way for using custom macaroons also on mobile, and moves the mobile API closer to the regular gRPC API.

## Docker

The docker quick start files located in the `docker` directory have been made more user friendly by [adding a persistent volume to lnd](https://github.com/lightningnetwork/lnd/pull/2533). This allows the lnd container to be restarted without losing its user data. The build instructions in `docker/lnd/Dockerfile` now also allow for quicker rebuilds [by making use of the docker build cache](https://github.com/lightningnetwork/lnd/pull/2598).

The main `Dockerfile` in the root directory [takes a branch, label or commit as a build argument](https://github.com/lightningnetwork/lnd/pull/2520) to allow for custom builds.

The use of the `docker-compose` file [is now easier](https://github.com/lightningnetwork/lnd/pull/2699) and you can spin a `btcd` and `lnd` pair with just one command.
**Note:** If you've used the `docker-compose.yml` file before, make sure you run `docker-compose build --no-cache` the first time you use to new version to make sure the changes are taken into account.

## Config Changes

### Default `unsafe-disconnect` Setting and Deprecation

This option is deprecated and now defaults to true, [allowing users to disconnect peers with active channels via the `disconnectpeer` rpc](https://github.com/lightningnetwork/lnd/pull/3648). This option was originally added long ago for purposes of testing and off by default to prevent unintended consistency bugs. This extra caution has been unneeded for several releases and no longer required. Once `unsafe-disconnect` is fully removed, this will remain the default behavior.

## Staged Travis Builds

The [travis build matrix now does preliminary sanity checks before entering a second phase that executes long-running tests](https://github.com/lightningnetwork/lnd/pull/3794). This results in less wasteful usage of travis instances, and tightens the feedback loop for developers contributing to the project.

## Bug fixes

* Accidental modification of database migration code has caused issues in the past. In this release, all migration code was [isolated](https://github.com/lightningnetwork/lnd/pull/3633) to prevent this from happening again.

* Several fixes have been applied to the [exchange of commitment signatures](https://github.com/lightningnetwork/lnd/pull/2927). Empty commit signatures are no longer sent.

* Forwarding in `lnd` is ""non-strict"", meaning that any channel that is capable of carrying the payment may be utilized. The channel specified in the payload merely serves as a short-hand notation for the next node pub key. A [bug](https://github.com/lightningnetwork/lnd/pull/3547) was fixed where an incorrect failure message was returned if none of the channels qualified.

* Expired invoices are now canceled correctly. This fixes the ""[Invoices can be paid after expiration](https://github.com/lightningnetwork/lnd/pull/3694)"" bug.

* A bug in the chain notifier has been fixed that led to a panic when [paying a subscribed script hash multiple times](https://github.com/lightningnetwork/lnd/pull/3569) in different blocks.

## Changelog

The full list of changes since `v0.8.2-beta` can be found here:

* https://github.com/lightningnetwork/lnd/compare/v0.8.2-beta...v0.9.0-beta

# Contributors (Alphabetical Order)

Alex Bosworth
Andras Banki-Horvath
Andreas M. Antonopoulos
Anton Kovalenko
Arik Sosman
bitromortac
Bjarne Magnussen
bluetegu
Carla Kirk-Cohen
Carson Mullins
Conner Fromknecht
Daniel McNally
Dennis Reimann
Elle Mouton
Johan T. Halseth
Joost Jager
Juan Pablo Civile
kiwiidb
Lars Lehtonen
Matheus Degiovani
Eugene Siegel
Olaoluwa Osuntokun
Oliver Gugger
Otto Suess
Philipp Gillé
Roei Erez
Steven Roose
Tomas Carnecky
Vignesh Karthikeyan
Wilmer Paulino
Yancy Tibbens
Yan Pritzker",49765480
57,False,True,2020-01-20T08:11:39Z,2020-01-20T08:21:33Z,,49765480
58,False,True,2020-01-15T22:30:16Z,2020-01-15T22:54:56Z,,49765480
59,False,True,2020-01-08T19:58:13Z,2020-01-15T22:55:43Z,,49765480
60,False,False,2019-12-12T00:55:48Z,2019-12-12T01:21:06Z,"This release marks the second minor release in the `v0.8.x` series and contains no major new features. This release includes a number of fixes for SCB (Static Channel Backup) recovery, additional logging in the `ChainNotifier`, and a consistency fix to the `SendToRoute` RPC call.

# Verifying the Release

In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import the keys that have signed this release if you haven't done so already: 

```
curl https://keybase.io/roasbeef/pgp_keys.asc | gpg --import
```

Once you have the required PGP keys, you can verify the release (assuming `manifest-v0.8.2-beta.txt` and `manifest-v0.8.2-beta.txt.sig` are in the current directory) with:

```
gpg --verify manifest-v0.8.2-beta.txt.sig
```

You should see the following if the verification was successful:

```
gpg: assuming signed data in 'manifest-v0.8.2-beta.txt'
gpg: Signature made Wed Dec 11 17:18:41 2019 PST
gpg:                using RSA key 4AB7F8DA6FAEBB3B70B1F903BC13F65E2DC84465
gpg: Good signature from ""Olaoluwa Osuntokun <laolu32@gmail.com>"" [ultimate]
```

That will verify the signature of the manifest file, which ensures integrity and authenticity of the archive you've downloaded locally containing the binaries. Next, depending on your operating system, you should then re-compute the `sha256` hash of the archive with `shasum -a 256 <filename>`, compare it with the corresponding one in the manifest file, and ensure they match *exactly*.

## Verifying the Release Binaries

As of this release, our release binaries are **fully reproducible** thanks to `go1.13`! Third parties are now able to verify that the release binaries were produced properly without having to trust the release manager(s). See our [reproducible builds guide](https://github.com/lightningnetwork/lnd/tree/master/build/release) for how this can be achieved. The release binaries are compiled with `go1.13.4`, which is required by verifiers to arrive at the same ones. They include the following build tags: `autopilotrpc`, `signrpc`, `walletrpc`, `chainrpc`, `invoicesrpc`, `routerrpc`, and `watchtowerrpc`. Note that these are already included in the release script, so they do not need to be provided.

Finally, you can also verify the _tag_ itself with the following command:

```
git verify-tag v0.8.2-beta
```

# Building the Contained Release 

Users are able to rebuild the target release themselves without having to fetch any of the dependencies. In order to do so, assuming that `vendor.tar.gz` and `lnd-source-v0.8.2-beta.tar.gz` are in the current directory, follow these steps:

```
tar -xvzf vendor.tar.gz
tar -xvzf lnd-source-v0.8.2-beta.tar.gz
GO111MODULE=on go install -v -mod=vendor -ldflags ""-X github.com/lightningnetwork/lnd/build.Commit=v0.8.2-beta"" ./cmd/lnd
GO111MODULE=on go install -v -mod=vendor -ldflags ""-X github.com/lightningnetwork/lnd/build.Commit=v0.8.2-beta"" ./cmd/lncli
```

The `-mod=vendor` flag tells the `go build` command that it doesn't need to fetch the dependencies, and instead, they're all enclosed in the local vendor directory. 

Additionally, it's now possible to use the [enclosed `release.sh` script to bundle a release for a _specific_ system like so](https://github.com/lightningnetwork/lnd/pull/2191): 

```
LNDBUILDSYS=""linux-arm64 darwin-amd64"" ./build/release/release.sh
```

⚡️⚡️⚡️ OK, now to the rest of the release notes! ⚡️⚡️⚡️

# Release Notes

[It's now possible to use an SCB to recover the funds of an unconfirmed channel](https://github.com/lightningnetwork/lnd/pull/3719). Before this fix, if one attempted to recover an SCB for a channel which was unconfirmed at . the time of SCB creation, then the process would fail. We'll node encode a special short channel ID to detect this case to ensure the channel funds can be recovered as normal. 

[We'll now warn a user that is using the `lncli unlock` or `lncli create` calls to recover an SCB](https://github.com/lightningnetwork/lnd/pull/3698). The new warning message now makes it more clear that in order to recover the funds of the channel, we need to close the channel on chain, resulting in additional chain fees. 

[If some or all of the channels in a `Multi` SCB backup have already been received, then we'll no longer exit early](https://github.com/lightningnetwork/lnd/pull/3737). Instead, this case will be detected allowing a user to re-issue an SCB recovery CLI or RPC command.

[The `SendToRoute` RPC call has been updated to properly check the current max payment size parameter](https://github.com/lightningnetwork/lnd/pull/3790) of the registered router backend, just as all the other payment RPC calls do. 


## Changelog

The full list of changes since `v0.8.1-beta` can be found here:

* https://github.com/lightningnetwork/lnd/compare/v0.8.1-beta...v0.8.2-beta

# Contributors (Alphabetical Order)

Andreas M. Antonopoulos
Johan T. Halseth 
Olaoluwa Osuntokun 
Oliver Gugger ",49765480
61,False,True,2019-12-07T00:10:52Z,2019-12-07T00:37:22Z,,49765480
62,False,False,2019-12-05T03:41:17Z,2019-12-05T04:35:03Z,,49765480
63,False,False,2019-11-15T00:33:27Z,2019-11-15T01:11:41Z,"This release marks the first minor release in the `v0.8.x` series and contains no major new features. This release fixes an issue with building `v0.8.0` for some users under a particular build configuration, and also updates `lnd` to be compatible with the upcoming `bitcoind v0.19` release as well. Additionally, several bugs in projects that `lnd` depends on (`btcd`., `neutrino`, `btcwallet`) have been fixed. There are no database migrations in this release, so users are able to downgrade back to 0.8.0 if they choose to do so. 

# Verifying the Release

In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import the keys that have signed this release if you haven't done so already: 

```
curl https://keybase.io/roasbeef/pgp_keys.asc | gpg --import
```

Once you have the required PGP keys, you can verify the release (assuming `manifest-v0.8.1-beta.txt` and `manifest-v0.8.1-beta.txt.sig` are in the current directory) with:

```
gpg --verify manifest-v0.8.1-beta.txt.sig
```

You should see the following if the verification was successful:

```
gpg: assuming signed data in 'manifest-v0.8.1-beta.txt'
gpg: Signature made Thu Nov 14 17:08:07 2019 PST
gpg:                using RSA key 4AB7F8DA6FAEBB3B70B1F903BC13F65E2DC84465
gpg: Good signature from ""Olaoluwa Osuntokun <laolu32@gmail.com>"" [ultimate]
```

That will verify the signature of the manifest file, which ensures integrity and authenticity of the archive you've downloaded locally containing the binaries. Next, depending on your operating system, you should then re-compute the `sha256` hash of the archive with `shasum -a 256 <filename>`, compare it with the corresponding one in the manifest file, and ensure they match *exactly*.

## Verifying the Release Binaries

As of this release, our release binaries are **fully reproducible** thanks to `go1.13`! Third parties are now able to verify that the release binaries were produced properly without having to trust the release manager(s). See our [reproducible builds guide](https://github.com/lightningnetwork/lnd/tree/master/build/release) for how this can be achieved. The release binaries are compiled with `go1.13.4`, which is required by verifiers to arrive at the same ones. They include the following build tags: `autopilotrpc`, `signrpc`, `walletrpc`, `chainrpc`, `invoicesrpc`, `routerrpc`, and `watchtowerrpc`. Note that these are already included in the release script, so they do not need to be provided.

Finally, you can also verify the _tag_ itself with the following command:

```
git verify-tag v0.8.1-beta
```

# Building the Contained Release 

Users are able to rebuild the target release themselves without having to fetch any of the dependencies. In order to do so, assuming that `vendor.tar.gz` and `lnd-source-v0.8.1-beta.tar.gz` are in the current directory, follow these steps:

```
tar -xvzf vendor.tar.gz
tar -xvzf lnd-source-v0.8.1-beta.tar.gz
GO111MODULE=on go install -v -mod=vendor -ldflags ""-X github.com/lightningnetwork/lnd/build.Commit=v0.8.1-beta"" ./cmd/lnd
GO111MODULE=on go install -v -mod=vendor -ldflags ""-X github.com/lightningnetwork/lnd/build.Commit=v0.8.1-beta"" ./cmd/lncli
```

The `-mod=vendor` flag tells the `go build` command that it doesn't need to fetch the dependencies, and instead, they're all enclosed in the local vendor directory. 

Additionally, it's now possible to use the [enclosed `release.sh` script to bundle a release for a _specific_ system like so](https://github.com/lightningnetwork/lnd/pull/2191): 

```
LNDBUILDSYS=""linux-arm64 darwin-amd64"" ./build/release/release.sh
```

⚡️⚡️⚡️ OK, now to the rest of the release notes! ⚡️⚡️⚡️

# Release Notes

This release fixes an issue with certain build configuration that could cause `lnd v0.8.0` to not build using the latest version of go. 

With this release, `lnd` is now compatible with `bitcoin v0.19`. 

## Changelog

The full list of changes since `v0.8.1-beta` can be found here:

* https://github.com/lightningnetwork/lnd/compare/v0.8.0-beta...v0.8.1-beta

# Contributors (Alphabetical Order)

Wilmer Paulino",49765480
64,False,False,2019-10-15T17:31:35Z,2019-10-15T17:51:42Z,"# Database Migrations

This release includes two migrations. The first migration [upgrades existing payment attempts and results to support the new TLV onion format](https://github.com/lightningnetwork/lnd/pull/3362). The migration should look like this:

```
2019-09-26 15:37:31.794 [INF] CHDB: Checking for schema update: latest_version=11, min_upgrade_version=9, db_version=9
2019-09-26 15:37:31.794 [INF] CHDB: Performing database schema migration
2019-09-26 15:37:31.794 [INF] CHDB: Applying migration #10
2019-09-26 15:37:31.795 [INF] CHDB: Migration of route/hop serialization complete!
2019-09-26 15:37:31.795 [INF] CHDB: Migrating to new mission control store by clearing existing data
2019-09-26 15:37:31.795 [INF] CHDB: Migration to new mission control completed!
```

The second migration [upgrades invoices to support tracking multiple HTLCs](https://github.com/lightningnetwork/lnd/pull/3390), rather than a single one. This increases the accuracy of invoice accounting within `lnd` across restarts. Note that you cannot update if you have any pending hodl invoice. The migration should look like this:

```
2019-09-26 15:37:31.795 [INF] CHDB: Applying migration #11
2019-09-26 15:37:31.795 [INF] CHDB: Migrating invoices to new invoice format
2019-09-26 15:37:31.795 [INF] CHDB: Migration of invoices completed!
```

**Once these migrations succeed, it will not be possible to return to a prior version of `lnd`.**

# Verifying the Release

In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import the keys that have signed this release if you haven't done so already: 

```
curl https://keybase.io/roasbeef/pgp_keys.asc | gpg --import
```

Once you have the required PGP keys, you can verify the release (assuming `manifest-v0.8.0-beta.txt` and `manifest-v0.8.0-beta.txt.sig` are in the current directory) with:

```
gpg --verify manifest-v0.8.0-beta.txt.sig
```

You should see the following if the verification was successful:

```
gpg: assuming signed data in 'manifest-v0.8.0-beta.txt'
gpg: Signature made Tue Oct 22 15:45:18 2019 PDT
gpg:                using RSA key 4AB7F8DA6FAEBB3B70B1F903BC13F65E2DC84465
gpg: Good signature from ""Olaoluwa Osuntokun <laolu32@gmail.com>"" [ultimate]
```

That will verify the signature of the manifest file, which ensures integrity and authenticity of the archive you've downloaded locally containing the binaries. Next, depending on your operating system, you should then re-compute the `sha256` hash of the archive with `shasum -a 256 <filename>`, compare it with the corresponding one in the manifest file, and ensure they match *exactly*.

## Verifying the Release Binaries

As of this release, our release binaries are **fully reproducible** thanks to `go1.13`! Third parties are now able to verify that the release binaries were produced properly without having to trust the release manager(s). See our [reproducible builds guide](https://github.com/lightningnetwork/lnd/tree/master/build/release) for how this can be achieved. The release binaries are compiled with `go1.13.3`, which is required by verifiers to arrive at the same ones. They include the following build tags: `autopilotrpc`, `signrpc`, `walletrpc`, `chainrpc`, `invoicesrpc`, `routerrpc`, and `watchtowerrpc`. Note that these are already included in the release script, so they do not need to be provided.

Finally, you can also verify the _tag_ itself with the following command:

```
git verify-tag v0.8.0-beta
```

# Building the Contained Release 

Users are able to rebuild the target release themselves without having to fetch any of the dependencies. In order to do so, assuming that `vendor.tar.gz` and `lnd-source-v0.8.0-beta.tar.gz` are in the current directory, follow these steps:

```
tar -xvzf vendor.tar.gz
tar -xvzf lnd-source-v0.8.0-beta.tar.gz
GO111MODULE=on go install -v -mod=vendor -ldflags ""-X github.com/lightningnetwork/lnd/build.Commit=v0.8.0-beta"" ./cmd/lnd
GO111MODULE=on go install -v -mod=vendor -ldflags ""-X github.com/lightningnetwork/lnd/build.Commit=v0.8.0-beta"" ./cmd/lncli
```

The `-mod=vendor` flag tells the `go build` command that it doesn't need to fetch the dependencies, and instead, they're all enclosed in the local vendor directory. 

Additionally, it's now possible to use the [enclosed `release.sh` script to bundle a release for a _specific_ system like so](https://github.com/lightningnetwork/lnd/pull/2191): 

```
LNDBUILDSYS=""linux-arm64 darwin-amd64"" ./build/release/release.sh
```

⚡️⚡️⚡️ OK, now to the rest of the release notes! ⚡️⚡️⚡️

# Release Notes

## Protocol Upgrades 

### Multi-Frame TLV Based Onion 

[In this release of `lnd`, we’ll now by default signal adherence to the new multi-frame TLV based onion format used when routing HTLCs end to end within the network](https://github.com/lightningnetwork/lnd/pull/3362). Compared to the legacy format, this format is much more flexible as rather than using a handpacked encoding for each field, we’ll now transmit TLV (type-length-value) streams, which is essentially a key-value map. As a result, the onion format is now far more extensible, as we can easily add new types without triggering a network wide update. In many instances (such as AMP), only the sender and receiver need to know of the new information in the onion, streamlining upgrade paths. 

This change isn’t exposed to developers yet, but will be in future versions, allowing them to send a small amount of bytes to the receiver _alongside_ a payment. The largest impact of this new feature is to lay the groundwork for the AMP/MPP work that has begun. In the case of AMP, this new namespace in the onion will be used for things like sending a partial payment shard, the total amount of the unified set of payments, and so on. We’ll also leverage this space to roll out our spontaneous payment feature (keysend) in a future version of `lnd`.  

### Safu Commitments (`option_static_remote_key`) 

Another major protocol update that has shipped in this new version of `lnd` is something we call “safu commitments”. This new commitment format represents a large step in making Lightning safer to use for end users. Before this change, if the remote party forced closed the channel on-chain, in order to sweep your funds (in the case of partial data loss, but SCB existence), then the party that lost data would need to obtain a random nonce from the other party in order to sweep their funds. This dependency at times made recovery very difficult, or even indeterminate, if the party that lost data was unable to obtain this per-state nonce from the remote party.

With this new commitment format, we’ve instead _removed_ this nonce derivation from the commitment output. Instead, when the remote party force closes, the funds will go _directly into one’s wallet_. As a result, the only thing required to recover funds in the case of partial data loss now are one’s SCB and the on-chain event of the channel being confirmed on chain. A new SCB version (`v1`) has been added to signal if the channel being backed up uses the old or new commitment format, allowing us to keep our recovery flow identical to the current one.

It’s important to note that in order to use this new commitment format, _new channels_ must be opened. The SCBs stored on disk, as well as those that are sent over the various RPC calls, will be automatically updated to reflect if this new commitment is being used in the channels being backed up. A new field has been added to the `ListChannels` output (`static_remote_key`) that indicates if the channel is using the new safu commitment format or not. 

### TLV Serialization Library

[This release also includes a new TLV serialization library](#3061), which implements the [TLV format described in BOLT 01](https://github.com/lightningnetwork/lightning-rfc/pull/607). The `tlv` package produces encodings that are both forwards and backwards compatible, and will form the basis of making wire messages and onion payloads easily extensible fields for new features like [MPP](https://github.com/lightningnetwork/lightning-rfc/pull/643), [AMP](https://github.com/lightningnetwork/lightning-rfc/pull/658), or [extended gossip queries](https://github.com/lightningnetwork/lightning-rfc/pull/557).

### BOLT 11 Feature Bits

In 0.8.0, `lnd` now supports the ability to [generate and parse invoices with payment-specific feature bits](https://github.com/lightningnetwork/lnd/pull/3432). At the moment there are no such feature bits that are advertised, however this is a preliminary step in order to widely deploy the parsing logic for when this happens. The first candidate features for being advertised are likely for [MPP](https://github.com/lightningnetwork/lightning-rfc/pull/643) or [AMP](https://github.com/lightningnetwork/lightning-rfc/pull/658), which can inform the sender as to whether they may pay a particular invoice using those payment methods. In theory, the sender can also require that an invoice be fulfilled with a particular payment type.

### Indefinite Channel Reestablishment

Prior to 0.8.0, `lnd` would give the remote peer 30 seconds to send a their `channel_reestablish` message. Typically this duration was sufficient, however if the exchange was not completed in a timely manner `lnd` would incorrectly escalate this into a protocol error, and cause strict implementations to force close the channel.

In one instance with a c-lightning node, this [resulted in 40 channels being force closed](https://github.com/ElementsProject/lightning/issues/2847), since the contention at startup prevented the remote node from promptly sending `channel_reestablish`. In 0.7.2, c-lightning also added mitigations to avoid this situation, by [spacing out reconnections to peers on startup](https://github.com/ElementsProject/lightning/pull/2885) and [ignoring the escalated errors](https://github.com/ElementsProject/lightning/pull/2842).

In 0.8.0, [`lnd` will wait indefinitely over the span of a connection for the remote peer to send `channel_reestablish`](#3369). As a result, these sporadic failures should not occur between updated nodes. Further, the `active` flag will in `ListChannels` is stricter and more accurate, which now only displays `true` if the channel is sufficiently confirmed, has ever received `funding_locked`, and has received `channel_reestablish` _on the current connection_. Previously the `active` boolean would display `true` whenever the first two conditions had been met.

## Chain Notifier Subserver

[Subscriptions for confirmation and spend notifications now require a height hint to be provided](https://github.com/lightningnetwork/lnd/pull/3405), also known as the earliest height in the chain at which the event could have happened. This prevents `lnd` from scanning blocks that are irrelevant to the subscription. Subscriptions for confirmation notifications now also require at least one confirmation. Previously, subscriptions without providing a number of confirmations would lead `lnd` to deadlock.

## Watchtower Client Subserver

Continuing our subserver saga, this release includes a new addition: the [Watchtower Client subserver](https://github.com/lightningnetwork/lnd/pull/3184). This is the first subserver that is included in `lnd` by default and does not require a build tag.

The subserver includes the following RPCs, along with a `lncli` command for each:

* AddTower (`lncli wtclient add`)
* RemoveTower (`lncli wtclient remove`)
* ListTowers (`lncli wtclient towers`)
* GetTowerInfo (`lncli wtclient tower`)
* Stats (`lncli wtclient stats`)
* Policy (`lncli wtclient policy`)

These RPCs allow users to interact with the watchtower client of their `lnd` node, allowing for modifications and information retrieval of any registered watchtowers and the policies used with them.

Note that due to the introduction of this interface, the `--wtclient.private-tower-uris` flag has now been deprecated and will be removed in the next major release, `v0.9.0-beta`. All that is required for the client to be active is `--wtclient.active`, any setup that had been configured from before will carry over. If you're setting up a new watchtower or want to change the configuration, users will now need to so as stated in the [watchtower documentation](https://github.com/lightningnetwork/lnd/blob/master/docs/watchtower.md).

## Gossip Enhancements

[A rough graph sync progress is now exposed via the `GetInfo` RPC as a boolean named `is_graph_synced`](https://github.com/lightningnetwork/lnd/pull/3355).

[Gossip received as part of an initial sync is no longer forwarded to other peers](https://github.com/lightningnetwork/lnd/pull/3366) as it’s assumed that they have been previously broadcast to the network. This results in a small decrease in outbound bandwidth usage.

`lnd` now [rebroadcasts its node announcement to the network every 24 hours](https://github.com/lightningnetwork/lnd/pull/2084) to ensure nodes have up-to-date information about them.

A new [`--ignore-historical-gossip-filters` option has been added in 0.8.0](#3359) to reduce outbound bandwidth usage in syncing older lightning nodes. Some older nodes send gossip timestamp filters that request large portions of the graph on each connection; this flag will still allow new gossip messages to be forwarded that satisfy the timestamp, but forgo the initial dump which can rack up outgoing bandwidth.

## Routing

Mission control, the subsystem in `lnd` that drives the payment process and tracks past node performance, [has been made persistent](https://github.com/lightningnetwork/lnd/pull/3164). It now retains historical payment results across restarts.

Further improvements have been made to mission control that make the payment process faster and more reliable. Routing nodes forward in a non-strict matter, meaning that if the requested channel isn’t available, the node may forward an HTLC over an alternative channel to the same next hop. Therefore, it is enough to try a single channel for each node pair. To speed up payments, [we now track node performance based on node pairs instead of channels](https://github.com/lightningnetwork/lnd/pull/1734). 

When a payment attempt fails, the sender receives a failure message from which information can be distilled that helps identifying the cause of the failure. This information can be used to steer around the problem for the next attempt. [The interpretation of the failure message has been improved](https://github.com/lightningnetwork/lnd/pull/3256).

Previously, mission control only recorded payment failures. This prevented hitting the same failure twice, but ignored previously successful routes. It didn’t distinguish between a route that worked before and an untried route. [We now favor successful routes over untried routes](https://github.com/lightningnetwork/lnd/pull/3372) and thereby reduce the number of required payment attempts. The [explore-exploit](https://www.scotthyoung.com/blog/2019/09/17/explore-exploit/) trade-off that this presents is controlled by the existing `routerrpc.attemptcost` config parameter.

To enhance the transparency of the path finding process, [the total route success probability is exposed on `QueryRoutes` calls](https://github.com/lightningnetwork/lnd/pull/3449).

[A new RPC `BuildRoute` has been added](https://github.com/lightningnetwork/lnd/pull/3440). This call targets advanced users who want to build their own routes without needing to keep a shadow copy of the graph. The call takes a list of hop pubkeys and transforms this into a fully specified route by looking up channel policies from the graph. It also allows the construction of circular routes.

## Routing Node Enhancements

[Nodes can now specify the maximum outgoing CLTV delta (in number of blocks) they will accept for an outgoing HTLC through the `--max-cltv-expiry` CLI flag](https://github.com/lightningnetwork/lnd/pull/3348).

[Nodes will now enforce a maximum channel commitment fee for channels in which they are initiators when attempting to update their commitment fee](https://github.com/lightningnetwork/lnd/pull/3401). The maximum enforced depends on a percentage (default of 50%) of a channel initiator’s balance. The percentage can be modified through the `--max-channel-fee-allocation` CLI flag.

[The `max_htlc` channel policy parameter is now exposed on the RPC interface](https://github.com/lightningnetwork/lnd/pull/3523). This allows callers of `UpdateChannelPolicy` to reduce the maximum htlc amount that is forwarded over a channel.

## RPC Bug Fixes

[The `RemoteBalance`, `LocalChanReserveSat`, and `RemoteChanReserveSat` fields for waiting close channels are now properly set](https://github.com/lightningnetwork/lnd/pull/3456). These weren’t set previously, leading to the fields being blank until the channel moved to pending close.

Previously, using the `UpdateChannelPolicy` RPC with a zero base fee and/or fee rate would lead to a desynchronization between the routing policy propagated throughout the network and the one within the channel state machine, leading to routing failures throughout the network. To work around this, users were required to restart their nodes, but this is no longer required as of https://github.com/lightningnetwork/lnd/pull/3439.

The REST endpoint for the `DescribeGraph` RPC call (`v1/graph`) [has been updated to allow a larger response size due to the growing channel graph](https://github.com/lightningnetwork/lnd/pull/3379). 

A bug in the ordering of channel updates for `getnodeinfo` has been fixed that [could cause the updates not to be sorted in order of increasing pubkey](#3427). Additionally, the `last_update` time displayed will now properly compute the maximum of the each update's `last_update` instead of inconsistently selecting one or the other.

Users who set the `perm` field (or `--perm` for `lncli`) prior to 0.8.0 may have noticed that `lnd` would not automatically reconnect to peers if the connection was severed. This release fixes the bug by [tracking whether or not the current connection was requested as permanent via the RPC](#3562), and restoring the original functionality of the `ConnectPeer` RPC.

## `lncli` Bug Fixes

[`lncli` now returns a proper error rather than panic when providing a channel backup to the `restorechanbackup` command without its corresponding flag](https://github.com/lightningnetwork/lnd/pull/3455).

## Invoice Validation

[To mitigate potential DoS vectors when parsing invoice payment requests, any larger than the maximum size a QR code is allowed to store are now considered invalid](https://github.com/lightningnetwork/lnd/pull/3505).

## Invoice HTLC tracking

[Calls to `LookupInvoice` and `ListInvoices` now return a list of all HTLCs that pay to an invoice](https://github.com/lightningnetwork/lnd/pull/3390). This provides insight into the channel through which the invoice was paid, as well as acceptance time, resolution time, and the exact HTLC amount. The handling of HTLCs internally has also been improved, which fixed several existing consistency and accounting issues.

## Privacy

[A potential probe vector that allowed attackers to find out the final destination of a payment via the `final_expiry_too_soon` response has been eliminated](https://github.com/lightningnetwork/lnd/pull/3391). To not deprive the payer of information that is required for continuation of the payment process, [the height at which the receiver accepted the HTLC is added to the failure message](https://github.com/lightningnetwork/lnd/pull/3414).

## New OS/Arch Release Targets

0.8.0 will [provide compiled binaries for 11 new architectures](#3577): `illumos-amd64`, `linux-ppc64le`, `linux-mips`, `linux-mipsle`, `linux-s390x`, `netbsd-arm`, `netbsd-arm64`, `openbsd-arm`, `openbsd-arm64`, `solaris-amd64`, and `windows-arm`. The `illumos-amd64` and `solaris-amd64` builds were newly enabled by `go1.13` while the others had been previously available but not included in the release targets. If you're interested in a target that is not listed, please file an issue!

## `bitcoind` Compatibility

The `lnd` integration test suite is now also [continuously being run with `bitcoind` as the chain backend](https://github.com/lightningnetwork/lnd/pull/1583). All supported backends (`btcd`, `neutrino`, and `bitcoind`) now enjoy the same test coverage, which ensures `lnd` will behave the same regardless of which backend users choose. As of this release, `lnd` is fully compatible with `bitcoind` versions up to `v0.18.1`.

## Mobile Support

The [mobile APIs and build tools](https://github.com/lightningnetwork/lnd/pull/3282) have been included in this release. This allows developers to start building mobile apps which integrate `lnd`, either by checking out the latest release, or the master branch.

## RBF Aware Transaction Broadcast

The wallet has been updated to [understand RBF specific errors](https://github.com/lightningnetwork/lnd/pull/3510). For now, this handles a few edge cases with non-critical broadcast errors. In the future, this will pave the way for direct fee bumping through RBF in the wallet.

## Channel Close Transaction Rebroadcast

To ensure proper confirmation of a channel close transaction, `lnd` has been updated to [rebroadcast it after restarts](https://github.com/lightningnetwork/lnd/pull/3016). It also now also aids remote nodes that have lost state by resending channel reestablishment messages for already closed channels.

## Mainnet Neutrino

Neutrino has steadily been improved, and this release contains several fixes and optimizations that make it [stable enough for mainnet support](https://github.com/lightningnetwork/lnd/pull/3358). Keep in mind that it is still early, and stay craeful.

## Changelog

The full list of changes since `v0.7.1-beta` can be found here:

* https://github.com/lightningnetwork/lnd/compare/v0.7.1-beta...v0.8.0-beta

# Contributors (Alphabetical Order)

Carla Kirk-Cohen
chokoboko
Christopher Coverdale
Conner Fromknecht
Dario Sneidermanis
Eugene
Fernando Guisso
fiatjaf
Hampus Sjöberg
Johan T. Halseth
Jonathan Cross
Joost Jager
Juan Pablo Civile
Lars Lehtonen
lieteau2
Lightning Koala
Matheus Degiovani
Olaoluwa Osuntokun
Oliver Gugger
openoms
Oskar F
Spencer Dupre
Vadym Popov
Valentine Wallace
Will Roscoe
Wilmer Paulino",49765480
65,False,False,2019-10-15T11:53:14Z,2019-10-15T11:57:21Z,,49765480
66,False,True,2019-10-04T22:43:29Z,2019-10-09T01:10:55Z,,49765480
67,False,True,2019-09-26T20:19:14Z,2019-09-26T21:18:10Z,,49765480
68,False,False,2019-07-30T17:36:35Z,2019-07-30T19:01:52Z,"This marks the first minor release in the `v0.7.0` series. There are no database migration in this release. Instead, this release contains a number of optimization, bug fixes, slight RPC interface tweaks, and some minor features. 

# Verifying the Release

In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import the keys that have signed this release if you haven't done so already: 

```
curl https://keybase.io/roasbeef/pgp_keys.asc | gpg --import
```

Once you have the required PGP keys, you can verify the release (assuming `manifest-v0.7.1-beta.txt` and `manifest-v0.7.1-beta.txt.sig` are in the current directory) with:

```
gpg --verify manifest-v0.7.1-beta.txt.sig
```

You should see the following if the verification was successful:

```
gpg: assuming signed data in 'manifest-v0.7.1-beta.txt'
gpg: Signature made Thu Jul 25 16:56:33 2019 PDT
gpg:                using RSA key F8037E70C12C7A263C032508CE58F7F8E20FD9A2
gpg: Good signature from ""Olaoluwa Osuntokun <laolu32@gmail.com>"" [ultimate]

```

That will verify the signature on the main manifest page which ensures integrity and authenticity of the binaries you've downloaded locally. Next, depending on your operating system you should then re-calculate the `sha256` sum of the binary, and compare that with the following hashes (which are included in the manifest file):

```
e4e347076f924c0b9800ca6ebe534ddc3994054df129ad55e14590a958a17825  lnd-darwin-386-v0.7.1-beta.tar.gz
bd2ce2df54d08df4e2c48ec26954946a1e05e2385efce2d40fbe952b20e237f3  lnd-darwin-amd64-v0.7.1-beta.tar.gz
f2e3b6a7bc4b1725fa81c6795919aad39c363cdb18763974a2691934f13809d4  lnd-dragonfly-amd64-v0.7.1-beta.tar.gz
57021bdab4693b16c7bc5afcbcde4ed31edebb1e0f4a4b1fa327d337f4001bd0  lnd-freebsd-386-v0.7.1-beta.tar.gz
95d263659a39e891986b121924c6c701218a390ecb04fb6898466b2f3da844af  lnd-freebsd-amd64-v0.7.1-beta.tar.gz
6c16d14d5514093ff9495c5ad56ccd2fea1585a38ed8ee078d75ce9838d4c8f7  lnd-freebsd-arm-v0.7.1-beta.tar.gz
273c21b7a6900ca91f3f09a9d8753cb0c0a549d8ac81fdc3748c1292141b5133  lnd-linux-386-v0.7.1-beta.tar.gz
8a7dcf0cdb1c3dda1f9936625f74644ee0b58940970f2025935590952be8d7ba  lnd-linux-amd64-v0.7.1-beta.tar.gz
755c505c48af1531f784cbff1fa62424c7831698433889680fd2f6030fc15f76  lnd-linux-arm64-v0.7.1-beta.tar.gz
afd3384adaf1adf7545ae7c47cf274532b5cda8cab547c2cc6fc65d21a52d231  lnd-linux-armv6-v0.7.1-beta.tar.gz
a8c5199fdad4a900ce2dc70d9de08e303235e796bf960d1a07f803f837c086da  lnd-linux-armv7-v0.7.1-beta.tar.gz
f657f914bc9a5fd4ebaa65ee4e94fac03e8b03fe59e193972e1038b4b9399388  lnd-linux-mips64-v0.7.1-beta.tar.gz
e1d7133e27be8507381357f3478f1aadcb4d328e446a1981e3f2427739fc2bb1  lnd-linux-mips64le-v0.7.1-beta.tar.gz
b7b43f4bce9738d28d60b79f57778fb14b6180eeed9f3f731a3b7bd4169834cf  lnd-linux-ppc64-v0.7.1-beta.tar.gz
366516b68d9e49775429ecd6c1971a2940c4c3e84421f59966342b45a44c5cf4  lnd-netbsd-386-v0.7.1-beta.tar.gz
eb9c83dca69696d195a5b98059f8aefb61e4522411ebc988bf25940adda6b570  lnd-netbsd-amd64-v0.7.1-beta.tar.gz
e7e70a835d4358e7357b19f857eb8ed2e05b3bf392aa0201016ac0e6282f4585  lnd-openbsd-386-v0.7.1-beta.tar.gz
10b0866377ef7452da4097596aa03afc42fcd2c037a3255e8e402a0bc04a1eea  lnd-openbsd-amd64-v0.7.1-beta.tar.gz
ae8cb77eb7567ed9f8041a17eb6f65280cf81f4fbc3bf10eb671a423f62fc948  lnd-source-v0.7.1-beta.tar.gz
b68357ffd9d9527d04cb7d16534998711bca5948d7704c1439437c993f68b555  lnd-windows-386-v0.7.1-beta.zip
249378747307d7dff0d5da9b0ef8acc14908d18d4b5adddc68a66939432f4770  lnd-windows-amd64-v0.7.1-beta.zip
3bbfa000e2b4c7702f92d24235b5a098f37fd7b5830ca42586678f03d7cf9da3  vendor.tar.gz
```

One can use the `shasum -a 256 <file name here>` tool in order to re-compute the `sha256` hash of the target binary for your operating system. The produced hash should be compared with the hashes listed above and they should match *exactly*.

Finally, you can also verify the _tag_ itself with the following command:

```
git verify-tag v0.7.1-beta
```

The binaries are compiled with `go1.12.6` and include the following build tags: `autopilotrpc`, `signrpc`, `walletrpc`, `chainrpc`, `invoicesrpc`, and `routerrpc`.

# Building the Contained Release 

With this new version of `lnd`, we've modified our release process to ensure the bundled release is now _fully self contained_. As a result, with only the attached payload with this release, users will be able to rebuild the target release themselves without having to fetch any of the dependencies. Note that at this stage, binaries aren't yet fully reproducible (even with `go modules`). This is due to the fact that by default, [Go will include the full directory path where the binary was built in the binary itself](https://github.com/golang/go/issues/16860). As a result, unless your file system exactly mirrors the machine used to build the binary, you'll get a different binary, as it includes artifacts from your local file system. This will be fixed in `go1.13`, and before then we may modify our release system to do this automatically. 

In order to re-build from scratch, assuming that `vendor.tar.gz` and `lnd-source-v0.7.1-beta.tar.gz` are in the current directory:
```
tar -xvzf vendor.tar.gz
tar -xvzf lnd-source-v0.7.1-beta.tar.gz
GO111MODULE=on go install -v -mod=vendor -ldflags ""-X github.com/lightningnetwork/lnd/build.Commit=v0.7.1-beta"" ./cmd/lnd
GO111MODULE=on go install -v -mod=vendor -ldflags ""-X github.com/lightningnetwork/lnd/build.Commit=v0.7.1-beta"" ./cmd/lncli
```

The `-mod=vendor` flag tells the `go build` command that it doesn't need to fetch the dependencies, and instead, they're all enclosed in the local vendor directory. 

Additionally, it's now possible to use the [enclosed `release.sh` script to bundle a release for a _specific_ system like so](https://github.com/lightningnetwork/lnd/pull/2191): 

```
LNDBUILDSYS=""linux-arm64 darwin-amd64"" ./release.sh
```

⚡️⚡️⚡️ OK, now to the rest of the release notes! ⚡️⚡️⚡️

# Release Notes

## Networking Payment Latency Improvements 

[We'll now _pipeline_ HTLC pre-images across the route before each hop fully locks in the change](https://github.com/lightningnetwork/lnd/pull/3143). As a result, the _network as a whole_ should now see dramatically reduced payment latency. Before this change, it would take `1.5 * N` round trips (where `N` is the number of hops) for the sender of an HTLC to obtain a pre-image for a successful payment. With the prior logic, the pre-image would flow backwards in lock-step, with the receiver having it fully locked in first. With this _new_ logic, it now only takes `0.5 * N` RTT for the same operation. As a result, the sender of the payment will now get the pre-image _much sooner_, resulting in lower perceived payment latency. The higher the round trip latency between links, the more profound the speed up will be within the network. 

## Build

One of the dependencies required by `lnd` was being fetched from the author’s host rather than GitHub. At some point the host was down, causing new installations of `lnd` to fail. To resolve this, we’ve decided to [use the author’s GitHub mirror of the dependency](https://github.com/lightningnetwork/lnd/pull/3294), which should provide a higher bar of reliability.

## `lncli` Improvements 

[The help message for `updatechannelpolicy` has been updated](https://github.com/lightningnetwork/lnd/pull/3263) to reflect the newly added ability to set fee rates to zero for channels. 

[We'll now confirm the `aezeed` pass phrase during initial wallet creation](https://github.com/lightningnetwork/lnd/pull/3303). 

## RPC Changes

[The `QueryRoutes` command now has a new option `UseMissionControl` allowing it to tap into the central `MissionControl` path finding history](https://github.com/lightningnetwork/lnd/pull/3221). As a result, the command will now benefit from the path finding history of `lnd` as a whole, which means it'll now return more pertinent routes. 

[The `ForwardingHistory` command has been made easier to use by assuming an start+end time of within the past 24 hours](https://github.com/lightningnetwork/lnd/pull/3246). This makes the command easier to use both on the RPC level, and also on the command line. 

[An off-by-one error has been fixed in the `AddInvoice` call within the `invoicerpc` sub-server](https://github.com/lightningnetwork/lnd/pull/3306). This would at times caused `lnd` to add _too many_ hop hints, making invoices invalid. 

The payments returned from the `ListPayments` RPC included a `fee` field, indicating how many satoshis were paid in fees. This wasn’t consistent, as payments can have sub-satoshi fees. To address this, we’ve [deprecated the existing `fee` field](https://github.com/lightningnetwork/lnd/pull/3279) and have added two new ones to replace it: `fee_msat` and `fee_sat`. The existing `fee` field will likely be removed in a future release.

[The addresses a transaction pays to are now included for unconfirmed transactions retrieved through the `GetTransactions` and `SubscribeTransactions` RPCs](https://github.com/lightningnetwork/lnd/pull/1933).

[The channel reserve of each party within a channel is now shown through the `ListChannels` RPC](https://github.com/lightningnetwork/lnd/pull/3238). This provides applications building on top of `lnd` with finer granularity with regards to how much each party is allowed to send.

Payment related RPC calls in the new `routerrprc` sub-server have been extended to return richer error information. The `SendPayment/SendToRoute` calls will now also return the following concrete errors:
  * `FailureReasonError`: This is returned in case we get an unexpected response to our payment attempt for which it does not make sense to try different routes.

  * `FailureReasonIncorrectPaymentDetails`: This is returned in case the payment hash is unknown, the amount is incorrect and/or the final cltv expiry is incorrect. The route that triggered this failure is returned along side the failure message itself.

Additionally, individual hop hints can now be passed into `routerrpc.SendPayment`.

The channels returned from `GetChanInfo`, `GetNodeInfo`, and `DescribeGraph` [will now properly display timestamp for when each channel policy was last updated](https://github.com/lightningnetwork/lnd/pull/2366).

[The `GetNetworkInfo` command will now also return the number of zombie channels](https://github.com/lightningnetwork/lnd/pull/3316).

## Graph Database + Pathfinding Optimizations

[Pruning closed channels has been optimized](https://github.com/lightningnetwork/lnd/pull/3251) to be much faster (20seconds to 1 second for hundreds of blocks worth of channels), and also utilize less memory (200 MB down to 1 MB for hundreds of channels). 

[We'll now explicitly track the past visited nodes during the core of our path finding algorithm](https://github.com/lightningnetwork/lnd/pull/2926). As a result, path finding has been sped up across the board when we need to explore more routes that normal. 

[The `MissionControl` sub-system is now fully globalized](https://github.com/lightningnetwork/lnd/pull/3298). As a result, all concurrent payment attempts are now able to share information with each other pertaining to failed routes. This allows concurrent attempts to avoid re-trying channels/nodes that have been known to recently fail.  

[Zombie channel pruning has been optimized. Users on mobile phones should see the biggest improvement](https://github.com/lightningnetwork/lnd/pull/3197). Before this change, pruning on a Samsung Galaxy S7 would take 5-12 seconds (on a fresh graph, no zombie pruning yet). After this change, that same operation now takes `15ms`. 

[When sending a payment, we'll now add additional block padding to the CLTV value](https://github.com/lightningnetwork/lnd/pull/3339). This fixes an issue where if a block was mined _right_ as a user sent a payment, then it would fail. By adding additional padding, we mitigate the issue, resulting in less extraneous payment failure. 

## Watchtower Improvements 

[A bug has been fixed that would cause `lnd` to crash if a `lncli tower`](https://github.com/lightningnetwork/lnd/pull/3262) command was used while the tower wasn't actually active. 

## Wallet Changes

[A sanity check has been added to ensure a transaction cannot be added to the wallet’s database as unconfirmed if it already exists as confirmed](https://github.com/btcsuite/btcwallet/pull/633). This could lead to users at times seeing an inflated unconfirmed balance.

[A bug has been fixed in our key derivation scheme](https://github.com/lightningnetwork/lnd/pull/3280) that would cause us to be at times unable to close channels that were the very first a node opened. This could happen if a user kept their
same `channel.db`, but restored their wallet resulting in fresh `wallet.db` state. 

## Interfacing with bitcoind

[We’ve addressed an issue in which connections to bitcoind’s ZMQ listeners would unnecessarily time out if there weren’t any messages available to read from the connection](https://github.com/lightninglabs/gozmq/pull/3). This would cause connections to be torn down, which would then trigger the reconnection logic. With the issue fixed, we can expect ZMQ connections to be a bit more reliable.

## Funding and Autopilot Fee Improvements

When opening a channel of a given size, `lnd` would add the transaction fee and take the this total amount from its wallet. This could fail if the attempted channel size was close to the wallet's remaining balance, as in high fee scenarios it wouldn't have enough funds left to cover the fee. [This has been fixed by adding  a new `subtractFee` option](https://github.com/lightningnetwork/lnd/pull/3165) to the internal `openChannel` request, which instructs `lnd` to subtract the fee from the total channel size instead. Autopilot has been updated to use this option by default, which makes it possible to move all funds into channels by setting `autopilot.allocation=1.0`.

## Gossip + P2P Improvements 

[We'll now no longe reply to nodes that request the old legacy full routing table dump via (`initial_graph_sync`)](https://github.com/lightningnetwork/lnd/pull/3314).  Nodes should instead now use the newer graph query extensions, which are more efficient and more granular. 

## Daemon Bug Fixes

[We’ve fixed an issue where it was possible for `lnd` to panic if an error occurred while initializing a Neutrino backend](https://github.com/lightningnetwork/lnd/pull/3313). An error is returned instead, which can provide details as to what went wrong.

Errors that occurred while initializing `lnd` were only reported within `stdout`/`stderr`. [We’ll now also write them to `lnd`’s logs](https://github.com/lightningnetwork/lnd/pull/3325). This is useful for node operators who run `lnd` through system service managers, e.g., systemd, which don’t easily provide access to `stdout`/`stderr`.

[An exception on regtest chains to prevent waiting for the backend to be considered synced has been included](https://github.com/lightningnetwork/lnd/pull/3337). This allows nodes to start with old regtest chains without having to mine a new block.

[We gracefully handle the go runtime failing to report hostname](https://github.com/lightningnetwork/lnd/pull/3229), which could happen on certain versions of Android.

## Changelog

The full list of changes since `0.7.0-beta` can be found here:

* https://github.com/lightningnetwork/lnd/compare/v0.7.0-beta...v0.7.1-beta

# Contributors (Alphabetical Order)

Brett Cawley
Carla Kirk-Cohen  
Chris Coverdale
Conner Fromknecht 
Federico Bond 
Eugene Sigel 
Johan T. Halseth
Joost Jager
Olaoluwa Osuntokun
Oliver Gugger 
Orbitalturtle 
Otto Suess 
Roei Erez 
tyzbit
Valentine Wallace 
Wilmer Paulino
Yaacov Akiba Slama
",49765480
69,False,True,2019-07-25T23:48:03Z,2019-07-26T23:12:20Z,,49765480
70,False,True,2019-07-23T23:18:38Z,2019-07-24T00:07:21Z,,49765480
71,False,False,2019-07-02T16:27:47Z,2019-07-02T17:11:59Z,"This release marks a new major release of `lnd` that includes several important bug fixes, an improved payment API, pathfinding enhancements, faster initial sync times, support for fee bumping on sweeps, and an initial rollout of altruistic watchtowers. As always, **users are highly encouraged to upgrade to this new version**. 

# Database Migrations

This version includes two migrations, the first is in `channel.db` which modifies the structure of the payment tracking data to support the refactored router and its ability to reliably display payments via the RPC. The migration should look like this:

```
2019-06-14 21:54:53.576 [INF] LTND: Version: 0.7.0-beta commit=v0.7.0-beta, build=production, logging=default
2019-06-14 21:54:53.579 [INF] LTND: Active chain: Bitcoin (network=mainnet)
2019-06-14 21:54:53.583 [INF] CHDB: Checking for schema update: latest_version=9, db_version=8
2019-06-14 21:54:53.586 [INF] CHDB: Performing database schema migration
2019-06-14 21:54:53.586 [INF] CHDB: Applying migration #9
2019-06-14 21:54:53.586 [INF] CHDB: Migrating outgoing payments to new bucket structure
2019-06-14 21:54:53.586 [INF] CHDB: Migration of outgoing payment bucket structure completed!
```

The second migration is in `wallet.db`, which prunes redundant block data already being stored by the underlying backend. The migration should look like this:

```
2019-06-14 21:54:53.744 [INF] LNWL: Applying wallet address manager migration #8
2019-06-14 21:54:53.746 [INF] LNWL: Removing block hash entries beyond maximum reorg depth of 10000 from current tip 580748
```

Once updated, it will not be possible to return to an older version of lnd.

# Verifying the Release

In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import the keys that have signed this release if you haven't done so already: 

```
curl https://keybase.io/roasbeef/pgp_keys.asc | gpg --import
```

Once you have the required PGP keys, you can verify the release (assuming `manifest-v0.7.0-beta.txt` and `manifest-v0.7.0-beta.txt.sig` are in the current directory) with:

```
gpg --verify manifest-v0.7.0-beta.txt.sig
```

You should see the following if the verification was successful:

```
gpg: assuming signed data in 'manifest-v0.7.0-beta.txt'
gpg: Signature made Tue Jul  2 09:46:47 2019 PDT
gpg:                using RSA key F8037E70C12C7A263C032508CE58F7F8E20FD9A2
gpg: Good signature from ""Olaoluwa Osuntokun <laolu32@gmail.com>"" [ultimate]
```

That will verify the signature on the main manifest page which ensures integrity and authenticity of the binaries you've downloaded locally. Next, depending on your operating system you should then re-calculate the `sha256` sum of the binary, and compare that with the following hashes (which are included in the manifest file):

```
f8452608ff2e3ca6a0327c830f2fee5e837b5a39e0bf7cedd190857a5b8894f8  lnd-darwin-386-v0.7.0-beta.tar.gz
57a2eef7c337dbad6bbdc2bdffe459292d34ce354b58d74e74b329753dc134c8  lnd-darwin-amd64-v0.7.0-beta.tar.gz
c7cd6a1f4980fbefaf4acc49940332d3159b7b6af989afb9d0c211abe0208d53  lnd-dragonfly-amd64-v0.7.0-beta.tar.gz
8380e5944053f5a8255deb0f69b3dc0a2bac30402b82abec9f348cad53ec166f  lnd-freebsd-386-v0.7.0-beta.tar.gz
c818c3a983167312f3bf2c84cb285212c5052131319caaef287a97541d2ff479  lnd-freebsd-amd64-v0.7.0-beta.tar.gz
a1e861f4c9a4cf056030f40debd882c6f34502821d0edca27f415dcfbb9f7d8c  lnd-freebsd-arm-v0.7.0-beta.tar.gz
47be6c3391fadbc5a169fa1dd6dd13031d759b3d42c71a2d556751746b705c48  lnd-linux-386-v0.7.0-beta.tar.gz
2e7ed105b9e57103645bda30501cbf3386909cfed19a2fabcc3dc9117ce99a8f  lnd-linux-amd64-v0.7.0-beta.tar.gz
c995fa67d6b23e547723801de49817dda34188fba78d0fe8ae506774e54c0afd  lnd-linux-arm64-v0.7.0-beta.tar.gz
a653b66e28b30131c9b766989cb490013128022e047273f287bf0f42a19693b9  lnd-linux-armv6-v0.7.0-beta.tar.gz
ac51d96ee9b57bfcab0b05dbcfcd9ce3bd42a216354c0972e97c1a1c86c2479a  lnd-linux-armv7-v0.7.0-beta.tar.gz
a4a119855e3759e49472d7d0f1f8529e984e7e7fbcedb78463daf4d7f6aceb6e  lnd-linux-mips64-v0.7.0-beta.tar.gz
2e06c33c0c8c4f6ef680071095e652ea0b32ff164545a60aa372de3b12644db1  lnd-linux-mips64le-v0.7.0-beta.tar.gz
6d4bc470ae424bf46f1057149880f60a83057f26693f0098f3e9dd774355cdcd  lnd-linux-ppc64-v0.7.0-beta.tar.gz
d931981d6a742b07abc965e779fd8ed93a7dfdbbdeefea0a47b0cdf90a94b645  lnd-netbsd-386-v0.7.0-beta.tar.gz
db6d6be0cf5e7e791be097de944261db74ef1400b711dc6b825b21b7d3a2958f  lnd-netbsd-amd64-v0.7.0-beta.tar.gz
0ef5470c6ba928e740bf83ba86b7af05eb0df0d3077e92c347fb93cdcf7fb276  lnd-openbsd-386-v0.7.0-beta.tar.gz
ec8dae2c01d818a6cbc622b07f5be8a4355a25cc7a887216edc232c528257c20  lnd-openbsd-amd64-v0.7.0-beta.tar.gz
d5d9178178dca9a3e770dc74d655f579e6aafaec9e7b32a726c44dc093c52aa0  lnd-source-v0.7.0-beta.tar.gz
254ccdf63c2dbd95381663be0e132d60f3423c9568d304a4384823c198d12f8a  lnd-windows-386-v0.7.0-beta.zip
51badb5f690e8bc15e90331a42ea823399d1eb60708c4d682683f070ece13c23  lnd-windows-amd64-v0.7.0-beta.zip
4ee8e4b7d8372c8e750125dcdd93cd1b1b55687460a2f7fe1c8a23e60bb17e7b  vendor.tar.gz
```

One can use the `shasum -a 256 <file name here>` tool in order to re-compute the `sha256` hash of the target binary for your operating system. The produced hash should be compared with the hashes listed above and they should match *exactly*.

Finally, you can also verify the _tag_ itself with the following command:

```
git verify-tag v0.7.0-beta
```

The binaries are compiled with `go1.12.6` and include the following build tags: `autopilotrpc`, `signrpc`, `walletrpc`, `chainrpc`, `invoicesrpc`, and `routerrpc`.

# Building the Contained Release 

With this new version of `lnd`, we've modified our release process to ensure the bundled release is now _fully self contained_. As a result, with only the attached payload with this release, users will be able to rebuild the target release themselves without having to fetch any of the dependencies. Note that at this stage, binaries aren't yet fully reproducible (even with `go modules`). This is due to the fact that by default, [Go will include the full directory path where the binary was built in the binary itself](https://github.com/golang/go/issues/16860). As a result, unless your file system exactly mirrors the machine used to build the binary, you'll get a different binary, as it includes artifacts from your local file system. This will be fixed in `go1.13`, and before then we may modify our release system to do this automatically. 

In order to re-build from scratch, assuming that `vendor.tar.gz` and `lnd-source-v0.7.0-beta.tar.gz` are in the current directory:
```
tar -xvzf vendor.tar.gz
tar -xvzf lnd-source-v0.7.0-beta.tar.gz
GO111MODULE=on go install -v -mod=vendor -ldflags ""-X github.com/lightningnetwork/lnd/build.Commit=v0.7.0-beta"" ./cmd/lnd
GO111MODULE=on go install -v -mod=vendor -ldflags ""-X github.com/lightningnetwork/lnd/build.Commit=v0.7.0-beta"" ./cmd/lncli
```

The `-mod=vendor` flag tells the `go build` command that it doesn't need to fetch the dependencies, and instead, they're all enclosed in the local vendor directory. 

Additionally, it's now possible to use the [enclosed `release.sh` script to bundle a release for a _specific_ system like so](https://github.com/lightningnetwork/lnd/pull/2191): 

```
LNDBUILDSYS=""linux-arm64 darwin-amd64"" ./release.sh
```

⚡️⚡️⚡️ OK, now to the rest of the release notes! ⚡️⚡️⚡️

# Release Notes (in progress)


## `bitcoind` 0.18 compatibility 

This new version of `lnd` has updated the way we check for errors over the RPC interface after we broadcast a transaction to be compatible with `bitcoind v0.18`. Note that the “master” branch of `bitcoind` isn’t yet supported yet as it includes distinct RPC changes to `sendrawtransaction` in particular that will require further updates in `lnd`. We’re targeting `lnd v0.7.1.` to fix these remaining RPC compatibility issues. 

## Private Altruist Watchtowers

In this release, we’re rolling out the ability to run a private, altruist watchtower as a fully-integrated subsystem of `lnd`. Watchtowers act as a second line of defense in responding to malicious or accidental breach scenarios in the event that client’s node is offline or unable to respond at the time of a breach, offering greater degree of safety to channel funds.

In contrast to a _reward watchtower_ which demand a portion of the channel funds as a reward for fulfilling its duty, an _altruist watchtower_ returns all of the victim’s funds (minus on-chain fees) without taking a cut. Reward watchtowers will be enabled in a subsequent release, though are still undergoing further testing and refinement.

In addition, `lnd` can now be configured to operate as a _watchtower client_, backing up encrypted breach-remedy transactions (aka. justice transactions) to other altruist watchtowers. The watchtower stores the fixed-size, encrypted blobs and is only able to decrypt and publish the justice transaction after the offending party has broadcast a revoked commitment state. Client communications with a watchtower are encrypted and authenticated using ephemeral keypairs, mitigating the amount of tracking the watchtower can perform on its clients using long-term identifiers.

Note that we have chosen to deploy a restricted set of features in this release that can begin to provide meaningful security to `lnd` users. Many more watchtower-related features are nearly complete or have meaningful progress, and we will continue to ship them as they receive further testing and become safe to release.

### Configuring a Watchtower

To set up a watchtower, command line users should compile in the optional `watchtowerrpc` subserver, which will offer the ability to interface with the tower via gRPC or `lncli`. The minimal configuration needed to activate the tower is `watchtower.active=1`. 

By default, the watchtower will listen on `:9911` which specifies port `9911` listening on all available interfaces. Users may configure their own listeners via the `--watchtower.listen=` option.

Additionally, users can specify their tower’s external IP address(es) using `watchtower.externalips`, which will expose the full tower URI over RPC. These can be given to clients in order to connect and use the tower.

Note: _The watchtower’s public key is distinct from `lnd`’s node public key. For now this acts as a soft whitelist as it requires clients to know the tower’s public key in order to use it for backups before more advanced whitelisting features are implemented. We recommend NOT disclosing this public key openly, unless you are prepared to open your tower up to the entire Internet._

Retrieving information about your tower’s configurations can be done using `lncli tower info`:
```
🏔 lncli tower info
{
        ""pubkey"": ""03281d603b2c5e19b8893a484eb938d7377179a9ef1a6bca4c0bcbbfc291657b63"",
        ""listeners"": [
                ""[::]:9911""
        ],
        ""uris"": [
                ""03281d603b2c5e19b8893a484eb938d7377179a9ef1a6bca4c0bcbbfc291657b63@1.2.3.4:9911""
        
}
```

The entire set of watchtower configuration options can be found using `lncli -h`:
```
watchtower:
      --watchtower.active                                     If the watchtower should be active or not
      --watchtower.towerdir=                                  Directory of the watchtower.db (default: $HOME/.lnd/data/watchtower)
      --watchtower.listen=                                    Add interfaces/ports to listen for peer connections
      --watchtower.externalip=                                Add interfaces/ports where the watchtower can accept peer connections
      --watchtower.readtimeout=                               Duration the watchtower server will wait for messages to be received before hanging up on client connections
      --watchtower.writetimeout=                              Duration the watchtower server will wait for messages to be written before hanging up on client connections
```

### Configuring a Watchtower Client


In order to set up a watchtower client, you’ll need the watchtower URI of an active watchtower. `lnd` can the ben configured to start using the tower by setting:
```
wtclient.private-tower-uris=03281d603b2c5e19b8893a484eb938d7377179a9ef1a6bca4c0bcbbfc291657b63@1.2.3.4:9911
```
Users may optionally configure the fee rate of justice transactions by setting the `wtclient.sweep-fee-rate` option, which accepts values in sat/byte.

The entire set of watchtower client configuration options can be found using `lncli -h`:
```
wtclient:
      --wtclient.private-tower-uris=                          Specifies the URIs of private watchtowers to use in backing up revoked states. URIs must be of the form <pubkey>@<addr>. Only 1 URI is supported at this time, if none are provided the tower will not be enabled.
      --wtclient.sweep-fee-rate=                              Specifies the fee rate in sat/byte to be used when constructing justice transactions sent to the watchtower.
```

For now, no information regarding the operation of the watchtower client is exposed over the RPC interface. We are working to expose this information in a later release, progress on this can be tracked [in this PR](https://github.com/lightningnetwork/lnd/pull/3184). Users will be reliant on logs for observing the behavior of the client. We also plan to expand on the initial feature set by permitting multiple active towers for redundancy, as well as modifying the chosen set of towers dynamically without restarting the daemon.

## gRPC Prometheus Exports

A build tag has been added: `monitoring`. If built with this tag, `lnd` has the ability to export Prometheus metrics about its gRPC performance.  These metrics include keeping track of how many times each gRPC call has been invoked, how many bytes have been transmitted and received for each gRPC call, and more.

To enable Prometheus exporting after building `lnd` with the `monitoring` tag, run `lnd` with this flag: 
```
--prometheus.enable
```

To change the address that `lnd` listens on for Prometheus, add this flag:
```
--prometheus.listen=<address>
```

By default, `lnd`'s Prometheus exporter listens on `localhost:8989`.

## Wallet Bug Fixes 

[A bug has been fixed that would cause the `EstimateFee` and `SendOutputs` RPC commands to fail if conditions of higher fees](https://github.com/lightningnetwork/lnd/pull/3218). The root cause was using the transactions effective fee rate instead of the minrelayfee when computing dust in certain scenarios. 

## Wallet Chain Sync Improvements

There was a period of time where the wallet would only store the latest 25,000 block headers of the chain in order to properly recover from chain reorgs, but this was modified to the existing behavior of storing all of them due to deep reorgs on the testnet chain during `lnd`s initial testing and development. [In this release, we revert back to the prior behavior, but will instead only store the latest 10,000 as a generous safety margin](https://github.com/btcsuite/btcwallet/pull/618).

As a result of doing so, the initial sync process is sped up. Neutrino backends saw the least improvements in this department, while bitcoind saw the most.

[The wallet will also now detect that the chain backend (i.e., `btcd`, `bitcoind`, etc.) is currently syncing if its latest block does not have a timestamp within the past 2 hours](https://github.com/btcsuite/btcwallet/commit/17efcdba2fc05889b8157f436d44b120e5fb01b1), allowing us to start `lnd` while the chain backend syncs.

## UtxoSweeper Improvements

Recent versions of `lnd` have seen development of a new subsystem: the `UtxoSweeper`. The [release notes of our v0.6.0-beta release](https://github.com/lightningnetwork/lnd/releases/tag/v0.6-beta) provide a brief overview of its duties. In this release, we continue to expand its functionality by allowing users to obtain information about the list of inputs being batched by the `UtxoSweeper` through [a new `PendingSweeps` RPC and its corresponding `lncli wallet pendingseeps` command](https://github.com/lightningnetwork/lnd/pull/3089).

[We also now allow users to bump the fee rate of an input with the Replace-By-Fee (RBF) policy or a transaction with the Child-Pays-For-Parent (CPFP) policy through the `BumpFee` RPC and its corresponding `lncli wallet bumpfee` command](https://github.com/lightningnetwork/lnd/pull/3140). In order to provide this functionality, the `UtxoSweeper` first had to be [extended to support sweeping distinct batches of inputs with similar fee preferences](https://github.com/lightningnetwork/lnd/pull/3026).

Fee bumping within `lnd` will take a different approach than the popular `bitcoin-cli bumpfee` command. Since the `UtxoSweeper` batches transactions together, `lnd` cannot rely on bumping a transaction’s fee by providing its hash since it can change at any point with the addition/removal of new inputs. Instead, fee bumping relies on an outpoint being provided along with a fee preference.

A fee preference can be defined as one of any of the following options, which will likely expand in future releases.

* Static fee rate: fixed fee rate to spent an input on-chain with.
* Confirmation target: a delta of blocks from the current height of the chain in which an input should be spend on-chain within.

When bumping the fee of an input that currently exists within the `UtxoSweeper`, a transaction is created with a fee rate backed by the fee preference provided that replaces the lower fee transaction through the RBF policy. When bumping the fee of an input that points to an unconfirmed transaction output which belongs to the user’s wallet, a transaction that spends this input is created with a fee rate backed by the fee preference provided. This spending transaction can be interpreted as the child in a CPFP scenario.

The current design presents some shortcomings which will be addressed in future releases as we develop things further. These include:

* Fee preference validation checks are _not_ in place to ensure they provide a sufficiently higher fee rate in order for a fee bump to be successful. This responsibility is delegated to the user.
* The `UtxoSweeper` does not persist any inputs to disk, so restarting `lnd` will require incomplete fee bump requests to be requested again.

## `lncli` Bug Fixes

[We'll now properly parse an optional single or multi channel backup being provided as part of `lncli create`](https://github.com/lightningnetwork/lnd/pull/3104).

[We'll now properly spend unconfirmed UTXOs as part of `lncli openchannel` when providing a `min_confs` parameter of 0](https://github.com/lightningnetwork/lnd/pull/3093).

## Config Changes 

[Users can now use the `--tlsextraip` and `--tlsextradomain` fields to set multiple IPs or domains when generating certs](https://github.com/lightningnetwork/lnd/pull/2704). 

[A new `neutrino.assertfilterheader` filter header flag has been added to `lnd`](https://github.com/lightningnetwork/lnd/pull/3118). In the past the neutrino protocol underwent a number of changes, some of which affected exactly _what_ is included in the filter. Older clients may have been on persistent incorrect filter chains as a result of this. This new argument allows a client to ensure it has the right filter chain using an externally provided filter header hash. If this hash doesn’t match, then the neutrino client will delete their state and re-sync the filter header chain. 

Litecoin support has been extended to also [include the simnet](https://github.com/lightningnetwork/lnd/pull/3045) and [regtest chains](https://github.com/lightningnetwork/lnd/pull/2189). 

## Interoperability Improvements

### CLTV Tie-Breaking in Commitment Output Sorting

A nuanced, spec-level bug has been fixed for [properly sorting HTLCs on the commitment transaction](https://github.com/lightningnetwork/lnd/pull/3142). When HTLCs of identical payment hash and amount appear on the same commitment transaction, the original BIP69 sorting could lead to a channel failure if the HTLCs had different CLTV values since the second-layer transactions would have different sighashes. This happens because the CLTV is enforced via `nLockTime` field of the descendant transaction, and weren’t being considered in the sorting of the commitment outputs. The [new spec sorting](https://github.com/lightningnetwork/lightning-rfc/pull/491) resolves this by using the CLTV values of HTLC outputs as tiebreakers when the payment hash and amount are identical.


Since 0.5, `lnd` has forbidden sending out more than one HTLC for the same payment hash at a given time, so users on pre-0.7 versions are unlikely to experience this bug in purely `lnd` to `lnd` interactions, or have triggered it on other nodes in the network. However, it’s possible that forwarding payments from implementations that permit duplicate payments can trigger the bug and result in a channel closure. This bug should be completely eliminated going forward.

### Increased Non-initiator Funding Timeout

When another node initiates a channel open with `lnd`, the non-initiator forgets about the channel if it doesn’t confirm in timely manner. In 0.7, this timeout has been [raised to two weeks](https://github.com/lightningnetwork/lnd/pull/3098) from the prior value of two days. This allows `lnd` to tolerate channel initiators with a low time preference (set a low fee rate) and better tolerate fee spikes or on-chain congestion during the funding process.

## P2P and Gossip Improvements

Prior versions of `lnd` would send out all updates (or new channels) to connected active syncing peers in a single payload. This could at times cause slight memory spikes if many channels were mined in a single block for example. [This latest version of `lnd` will instead now split announcements into multi sub-batches when it’s time to flush the set of pending messages](https://github.com/lightningnetwork/lnd/pull/2985). This change reduces GC pressure, and also naturally implements a variant of flow control to ensure minimal load during announcement batch flushes. It also makes sure to [redo a historical sync](https://github.com/lightningnetwork/lnd/pull/3103) if a new peer has connected after losing all of its peers.

## RPC Server and RPC Sub-Server Changes

[`lnd`’s RPC certificates will now be automatically re-generated by the daemon if upon restart, we detect that they’ve expired](https://github.com/lightningnetwork/lnd/pull/3011). Many nodes that were created greater than a year ago may have run into this issue, and had to delete and then regenerate themselves. 

[The `NodeUpdate` and `GetNodeInfo` commands now include the color of the target node](https://github.com/lightningnetwork/lnd/pull/2312). 

[The `closeallchannels` command within `lncli` now exposes a `conf_target` or `sat_per_byte` arguments in order to allow the user to control the fee rate used to close all transactions.](https://github.com/lightningnetwork/lnd/pull/990) 

### Transaction Hex in GetTransactions 

[The `GetTransactions` RPC call now also includes the serialized hex version of the transaction.](https://github.com/lightningnetwork/lnd/pull/3174) This exposes information the wallet already has and can be helpful for external accounting systems connected to `lnd`, or for usage with the new `BumpFee` command added in this version. 

### Display Paid Payment Requests

When making payments via the `SendPayment` RPC, the [paid invoice will now be displayed](https://github.com/lightningnetwork/lnd/pull/2717) in the `ListPayments` results. Similarly, payments via `lncli payinvoice` will show the invoice in `lncli listpayments`. This allows applications to recover the details, e.g. the invoice memo, without needing to track them separately.

### Zero Fees With `UpdateChanPolicy` 

[It’s now possible to set fees to rock bottom (zero!) using `lncli updatechanpolicy` or the `UpdateChanPolicy` RPC command](https://github.com/lightningnetwork/lnd/pull/3139). 

### Channel Display in GetNodeInfo 

The `GetNodeInfo` command will now optionally also return the set of channels belonging to a particular node. This is useful as it saves additional look ups, and a client-side mapping between channel ID and node using the `DescribeGraph` command. Arguments for the new `lncli` command are as follows: 
```
⛰   lncli getnodeinfo -h
NAME:
   lncli getnodeinfo - Get information on a specific node.

USAGE:
   lncli getnodeinfo [command options] [arguments...]

CATEGORY:
   Peers

DESCRIPTION:
   Prints out the latest authenticated node state for an advertised node

OPTIONS:
   --pub_key value     the 33-byte hex-encoded compressed public of the target node
   --include_channels  if true, will return all known channels associated with the node
```

### Structured SendToRoute Errors

A [new `SendToRoute` rpc](https://github.com/lightningnetwork/lnd/pull/1662) has been added to the `router` sub-server. This call improves upon the main rpc `SendToRoute` rpc by returning errors as proper proto messages. No more (regex) string parsing. As part of this change, the (deprecated) option to pass in multiple routes to the main `SendToRoute` was removed. 

### Payment RPCs

The interface of [`SendPayment`](https://github.com/lightningnetwork/lnd/pull/2973) in the `router` sub-server has been modified. It now takes a custom payment timeout value. This defines the duration after which no new attempts to complete the payment are initiated. The call also requires the fee limit to be set explicitly. The fee limit is an important parameter and not having a default value for this forces callers to make a conscious decision about its value. Another change is that `SendPayment` only returns payment-level failures. This set of failures is currently limited, but will be extended in the future. The previously returned last payment attempt error is no longer available, because its informative value is considered limited. 

Furthermore a new call `TrackPayment` was added. `TrackPayment` can be used to pick up and track the status of pending payments, for example after losing the connection or across restarts.

### Payment Persistence

A series of PRs (#3064, #3063, #2761, #2762) has been merged, making `lnd` better handle in-flights payments across restarts. `lnd` will now write any attempted payment to the database, such that should the daemon restart before the result comes back, it will correctly record it to the DB. This means that payments can now be in states “in flight”, “failed” or “succeeded”, which can all be shown by calling `lncli listpayments  --include_incomplete` (#3190).

## Probability Based Mission Control

In prior versions of `lnd`, when we encountered a path finding failure, we would simply ignore the edge or node that caused for error for 5 or 15 seconds, continuing one with that path finding session. This naive approach has a number of issues. As an example, this means that shortly after a node makes a payment, it forgets all the prior context it used to successfully route the payment. Additionally, the prior version didn’t share this information amongst concurrent in-flight payment sessions, meaning each session couldn’t learn from attempts of other on going sessions. Users may have noticed this “cold start” effect when they go to send a new payment a few minutes the last successful payment attempt. In older versions of `lnd`, the path finding would try a series of channels that it likely knew _wouldn’t_ work, before finally finding the golden set of channels that reliably work. 

In this new version of `lnd`, the previously used edge and node black lists in path finding are replaced by [a probability based system](https://github.com/lightningnetwork/lnd/pull/2802). It modifies path finding so that it not only compares routes on fee and time lock, but also takes route success probability into account. Each channel starts out with a default “apriori” probability. As path finding attempts fail, we reduce the probability of channels that have failed to zero, exponentially decaying back to the default apiori probability. This means that `lnd` will now properly “learn” from its past path finding attempts. Additionally, since this algorithm is less greedy than the prior algorithm, it may return a distinct set of paths compared to the prior algorithm, exploring avenues that maybe didn’t seem “optimal”, but still have a high probability of success. 

The new system is similar to “active learning” based approaches in machine learning. `lnd` will now continually update its view of the network based on empirical observations of payment failures. In addition to that, historical payment attempt outcomes are kept in mission control memory longer and improve path finding for future payments. A new diagnostic rpc has been added to query the current mission control state. Several configuration options are exposed to give more control of mission control behavior:
```
      --routerrpc.minrtprob=                                  Minimum required route success probability to attempt the payment (default: 0.01)
      --routerrpc.apriorihopprob=                             Assumed success probability of a hop in a route when no other information is available. (default: 0.95)
      --routerrpc.penaltyhalflife=                            Defines the duration after which a penalized node or channel is back at 50% probability (default: 1h0m0s)
      --routerrpc.attemptcost=                                The (virtual) cost in sats of a failed payment attempt (default: 100)
```

A new `querymc` sub-server RPC command has been added to allow users to peek into this diagnostic information. Eventually users may be able to share their mission control state (the effective “memory” of the router), amongst their other nodes in order to ensure they don’t need to re-discover the set of reliable channels. 

These changes prepare for further enhancements that will increase payment reliability.

The deprecated `num_routes` parameter of `QueryRoutes` has [been removed](https://github.com/lightningnetwork/lnd/pull/3054).

## Invoice Settling

Several changes with respect to [invoice settling](https://github.com/lightningnetwork/lnd/pull/2913) have been made. This makes the logic of off-chain and on-chain invoice settling more consistent and is a preparatory step for atomic multiple path payments.

## Neutrino Improvements 

All integration tests are now run continuously with the [`neutrino` chain backend](https://github.com/lightningnetwork/lnd/pull/1881) , in addition to the existing tests using `btcd`!

[When running `lnd` with neutrino active, the daemon will now properly shutdown even if it’s in the middle of checking for the spentness of a particular UTXO.](https://github.com/lightningnetwork/lnd/pull/2716)  

## Static Channel Backups 

A bug fix has been made to the current on-disk SCB format in the Windows operating system. Before this release, `lnd` wouldn’t properly close the temporary SCB file before swapping it over to the permanent file name (atomic file rename). On Windows in particular, this would cause the swap to fail, meaning that the file wouldn’t be updated on disk. [We’ve fixed this issue in this latest release, by always closing the temporary file before we attempt to modify it](https://github.com/lightningnetwork/lnd/pull/3129).

## Changelog

The full list of changes since `0.6.1-beta` can be found here:

* https://github.com/lightningnetwork/lnd/compare/v0.6.1-beta...v0.7.0-beta

# Contributors (Alphabetical Order)

2xic
AdamISZ
chokoboko
Conner Fromknecht
Daniel McNally
Eugene Zeigel
Federico Bond
Francisco Calderón
Geoff Taylor
Johan T. Halseth
John Griffith
Joost Jager
Matt Drollette
michael1011
Neevai Esinly
Olaoluwa Osuntokun
OrbitalTurtle
Valentine Wallace
Wilmer Paulino
Xavi Soler
Yaacov Akiba Slama
",49765480
72,False,True,2019-06-29T21:47:02Z,2019-06-29T22:10:26Z,"This release marks a new major release of `lnd` that includes several important bug fixes, an improved payment API, pathfinding enhancements, faster initial sync times, support for fee bumping on sweeps, and an initial rollout of altruistic watchtowers. As always, **users are highly encouraged to upgrade to this new version**. 

# Database Migrations

This version includes two migrations, the first is in `channel.db` which modifies the structure of the payment tracking data to support the refactored router and its ability to reliably display payments via the RPC. The migration should look like this:

```
2019-06-14 21:54:53.576 [INF] LTND: Version: 0.7.0-beta commit=v0.7.0-beta-rc3, build=production, logging=default
2019-06-14 21:54:53.579 [INF] LTND: Active chain: Bitcoin (network=mainnet)
2019-06-14 21:54:53.583 [INF] CHDB: Checking for schema update: latest_version=9, db_version=8
2019-06-14 21:54:53.586 [INF] CHDB: Performing database schema migration
2019-06-14 21:54:53.586 [INF] CHDB: Applying migration #9
2019-06-14 21:54:53.586 [INF] CHDB: Migrating outgoing payments to new bucket structure
2019-06-14 21:54:53.586 [INF] CHDB: Migration of outgoing payment bucket structure completed!
```

The second migration is in `wallet.db`, which prunes redundant block data already being stored by the underlying backend. The migration should look like this:

```
2019-06-14 21:54:53.744 [INF] LNWL: Applying wallet address manager migration #8
2019-06-14 21:54:53.746 [INF] LNWL: Removing block hash entries beyond maximum reorg depth of 10000 from current tip 580748
```

Once updated, it will not be possible to return to an older version of lnd.

# Verifying the Release

In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import the keys that have signed this release if you haven't done so already: 

```
curl https://keybase.io/bitconner/pgp_keys.asc | gpg --import
```

Once you have the required PGP keys, you can verify the release (assuming `manifest-v0.7.0-beta-rc3.txt` and `manifest-v0.7.0-beta-rc3.txt.sig` are in the current directory) with:

```
gpg --verify manifest-v0.7.0-beta-rc3.txt.sig
```

You should see the following if the verification was successful:

```
gpg: assuming signed data in 'manifest-v0.7.0-beta-rc3.txt'
gpg: Signature made Sat Jun 29 15:00:20 2019 PDT
gpg:                using RSA key 9C8D61868A7C492003B2744EE7D737B67FA592C7
gpg: Good signature from ""Conner Fromknecht <conner@lightning.engineering>"" [ultimate]
```

That will verify the signature on the main manifest page which ensures integrity and authenticity of the binaries you've downloaded locally. Next, depending on your operating system you should then re-calculate the `sha256` sum of the binary, and compare that with the following hashes (which are included in the manifest file):

```
bb7ef26ed0a8dfa31f6bd2016d87a5f28db0bba1b5c1cf203c2fda23bbdbe215  lnd-darwin-386-v0.7.0-beta-rc3.tar.gz
41d48f7f0cedcf7b212ace6a34ad4679eb9130c2abc8bf21e9367e08f852d22e  lnd-darwin-amd64-v0.7.0-beta-rc3.tar.gz
a754be7b37456f998c898bd9db31247f35897a5fed9ddaaba2e9a9db6e07c869  lnd-dragonfly-amd64-v0.7.0-beta-rc3.tar.gz
96c756ac172415eb852b65f5fce58ea03adde85aa55ba53708b6dda079e1285f  lnd-freebsd-386-v0.7.0-beta-rc3.tar.gz
4c6f8534d09ebf5a9227a4d272aba88e860f81543a8c4035cccf45e3742ea998  lnd-freebsd-amd64-v0.7.0-beta-rc3.tar.gz
ae6c6f7068b1b05a9a2536f97da497b8c8de27703d482644d4779b88bf97cc0f  lnd-freebsd-arm-v0.7.0-beta-rc3.tar.gz
2723ce9dff50a2b063ba01b2b2cf4159db5aed5ade76a20978dfac361152fa06  lnd-linux-386-v0.7.0-beta-rc3.tar.gz
d90bf078edc57f12cfebfae96aaa6d686a8036a3cb1b8684855f773edd9f2ec7  lnd-linux-amd64-v0.7.0-beta-rc3.tar.gz
a0f40ec55ac9a9898657ede6084b32ae150d2d0483975eb1a6aab3c5fa691f2d  lnd-linux-arm64-v0.7.0-beta-rc3.tar.gz
d6f993aa68d02bc2ee10445e28ba6133fa903a1dae45121581f48585fa60aa40  lnd-linux-armv6-v0.7.0-beta-rc3.tar.gz
92d2cf564714057ebf63f952454e4255e3e16e590178d096f75efc40931ace9a  lnd-linux-armv7-v0.7.0-beta-rc3.tar.gz
3e11af4a161ffc0174718ab0f6e9bf6ade90acd92c0d6fbeaae10bf3471b8a6b  lnd-linux-mips64-v0.7.0-beta-rc3.tar.gz
1932492a36d6ceacb1e073ebf68ee7e4b2a4bdccd26efbccec7d607d5a21cf3f  lnd-linux-mips64le-v0.7.0-beta-rc3.tar.gz
0355917888200b4df575fe8d1600d0c3da591c7771cf0a240402a49e345a37b5  lnd-linux-ppc64-v0.7.0-beta-rc3.tar.gz
e9d7954589b6b7747d83f01b654828ae46cbff537e6d96e4732c43af61031ee6  lnd-netbsd-386-v0.7.0-beta-rc3.tar.gz
8e337e27269f50e3ed87de6649ae09d813d1e7dc6d0177555df138b07da664a6  lnd-netbsd-amd64-v0.7.0-beta-rc3.tar.gz
d1ab52fa7e454414476c6d6291802d44ef43bc0cb50e4c9169f01d1eee8d4547  lnd-openbsd-386-v0.7.0-beta-rc3.tar.gz
169bbfd8141fb41f29b4e68fd81463b7be460a411f11c8de91c9d6675617165d  lnd-openbsd-amd64-v0.7.0-beta-rc3.tar.gz
97831392024dc17f35334d423d7905f400516e4a0f3623388b6a5c870d03914b  lnd-source-v0.7.0-beta-rc3.tar.gz
1e05a93de75269f63c1019d2f0c36a9f85692253ee146e367cffb2cad1cae194  lnd-windows-386-v0.7.0-beta-rc3.zip
232bd9fad897d6a180ade63dc16a128751606ad87653fe0834cd2109c8b5754e  lnd-windows-amd64-v0.7.0-beta-rc3.zip
bea687b821e4647f5a0228c25c4b5f25609a8fe47166f4cd0578ad09a849dbfb  vendor.tar.gz
```

One can use the `shasum -a 256 <file name here>` tool in order to re-compute the `sha256` hash of the target binary for your operating system. The produced hash should be compared with the hashes listed above and they should match *exactly*.

Finally, you can also verify the _tag_ itself with the following command:

```
git verify-tag v0.7.0-beta-rc3
```

The binaries are compiled with `go1.12.6` and include the following build tags: `autopilotrpc`, `signrpc`, `walletrpc`, `chainrpc`, `invoicesrpc`, and `routerrpc`.

# Building the Contained Release 

With this new version of `lnd`, we've modified our release process to ensure the bundled release is now _fully self contained_. As a result, with only the attached payload with this release, users will be able to rebuild the target release themselves without having to fetch any of the dependencies. Note that at this stage, binaries aren't yet fully reproducible (even with `go modules`). This is due to the fact that by default, [Go will include the full directory path where the binary was built in the binary itself](https://github.com/golang/go/issues/16860). As a result, unless your file system exactly mirrors the machine used to build the binary, you'll get a different binary, as it includes artifacts from your local file system. This will be fixed in `go1.13`, and before then we may modify our release system to do this automatically. 

In order to re-build from scratch, assuming that `vendor.tar.gz` and `lnd-source-v0.7.0-beta-rc3.tar.gz` are in the current directory:
```
tar -xvzf vendor.tar.gz
tar -xvzf lnd-source-v0.7.0-beta-rc3.tar.gz
GO111MODULE=on go install -v -mod=vendor -ldflags ""-X github.com/lightningnetwork/lnd/build.Commit=v0.7.0-beta-rc3"" ./cmd/lnd
GO111MODULE=on go install -v -mod=vendor -ldflags ""-X github.com/lightningnetwork/lnd/build.Commit=v0.7.0-beta-rc3"" ./cmd/lncli
```

The `-mod=vendor` flag tells the `go build` command that it doesn't need to fetch the dependencies, and instead, they're all enclosed in the local vendor directory. 

Additionally, it's now possible to use the [enclosed `release.sh` script to bundle a release for a _specific_ system like so](https://github.com/lightningnetwork/lnd/pull/2191): 

```
LNDBUILDSYS=""linux-arm64 darwin-amd64"" ./release.sh
```

⚡️⚡️⚡️ OK, now to the rest of the release notes! ⚡️⚡️⚡️

# Release Notes (in progress)


## `bitcoind` 0.18 compatibility 

This new version of `lnd` has updated the way we check for errors over the RPC interface after we broadcast a transaction to be compatible with `bitcoind v0.18`. Note that the “master” branch of `bitcoind` isn’t yet supported yet as it includes distinct RPC changes to `sendrawtransaction` in particular that will require further updates in `lnd`. We’re targeting `lnd v0.7.1.` to fix these remaining RPC compatibility issues. 

## Private Altruist Watchtowers

In this release, we’re rolling out the ability to run a private, altruist watchtower as a fully-integrated subsystem of `lnd`. Watchtowers act as a second line of defense in responding to malicious or accidental breach scenarios in the event that client’s node is offline or unable to respond at the time of a breach, offering greater degree of safety to channel funds.

In contrast to a _reward watchtower_ which demand a portion of the channel funds as a reward for fulfilling its duty, an _altruist watchtower_ returns all of the victim’s funds (minus on-chain fees) without taking a cut. Reward watchtowers will be enabled in a subsequent release, though are still undergoing further testing and refinement.

In addition, `lnd` can now be configured to operate as a _watchtower client_, backing up encrypted breach-remedy transactions (aka. justice transactions) to other altruist watchtowers. The watchtower stores the fixed-size, encrypted blobs and is only able to decrypt and publish the justice transaction after the offending party has broadcast a revoked commitment state. Client communications with a watchtower are encrypted and authenticated using ephemeral keypairs, mitigating the amount of tracking the watchtower can perform on its clients using long-term identifiers.

Note that we have chosen to deploy a restricted set of features in this release that can begin to provide meaningful security to `lnd` users. Many more watchtower-related features are nearly complete or have meaningful progress, and we will continue to ship them as they receive further testing and become safe to release.

### Configuring a Watchtower

To set up a watchtower, command line users should compile in the optional `watchtowerrpc` subserver, which will offer the ability to interface with the tower via gRPC or `lncli`. The minimal configuration needed to activate the tower is `watchtower.active=1`. 

By default, the watchtower will listen on `:9911` which specifies port `9911` listening on all available interfaces. Users may configure their own listeners via the `--watchtower.listen=` option.

Additionally, users can specify their tower’s external IP address(es) using `watchtower.externalips`, which will expose the full tower URI over RPC. These can be given to clients in order to connect and use the tower.

Note: _The watchtower’s public key is distinct from `lnd`’s node public key. For now this acts as a soft whitelist as it requires clients to know the tower’s public key in order to use it for backups before more advanced whitelisting features are implemented. We recommend NOT disclosing this public key openly, unless you are prepared to open your tower up to the entire Internet._

Retrieving information about your tower’s configurations can be done using `lncli tower info`:
```
🏔 lncli tower info
{
        ""pubkey"": ""03281d603b2c5e19b8893a484eb938d7377179a9ef1a6bca4c0bcbbfc291657b63"",
        ""listeners"": [
                ""[::]:9911""
        ],
        ""uris"": [
                ""03281d603b2c5e19b8893a484eb938d7377179a9ef1a6bca4c0bcbbfc291657b63@1.2.3.4:9911""
        
}
```

The entire set of watchtower configuration options can be found using `lncli -h`:
```
watchtower:
      --watchtower.active                                     If the watchtower should be active or not
      --watchtower.towerdir=                                  Directory of the watchtower.db (default: $HOME/.lnd/data/watchtower)
      --watchtower.listen=                                    Add interfaces/ports to listen for peer connections
      --watchtower.externalip=                                Add interfaces/ports where the watchtower can accept peer connections
      --watchtower.readtimeout=                               Duration the watchtower server will wait for messages to be received before hanging up on client connections
      --watchtower.writetimeout=                              Duration the watchtower server will wait for messages to be written before hanging up on client connections
```

### Configuring a Watchtower Client


In order to set up a watchtower client, you’ll need the watchtower URI of an active watchtower. `lnd` can the ben configured to start using the tower by setting:
```
wtclient.private-tower-uris=03281d603b2c5e19b8893a484eb938d7377179a9ef1a6bca4c0bcbbfc291657b63@1.2.3.4:9911
```
Users may optionally configure the fee rate of justice transactions by setting the `wtclient.sweep-fee-rate` option, which accepts values in sat/byte.

The entire set of watchtower client configuration options can be found using `lncli -h`:
```
wtclient:
      --wtclient.private-tower-uris=                          Specifies the URIs of private watchtowers to use in backing up revoked states. URIs must be of the form <pubkey>@<addr>. Only 1 URI is supported at this time, if none are provided the tower will not be enabled.
      --wtclient.sweep-fee-rate=                              Specifies the fee rate in sat/byte to be used when constructing justice transactions sent to the watchtower.
```

For now, no information regarding the operation of the watchtower client is exposed over the RPC interface. We are working to expose this information in a later release, progress on this can be tracked [in this PR](https://github.com/lightningnetwork/lnd/pull/3184). Users will be reliant on logs for observing the behavior of the client. We also plan to expand on the initial feature set by permitting multiple active towers for redundancy, as well as modifying the chosen set of towers dynamically without restarting the daemon.

## gRPC Prometheus Exports

A build tag has been added: `monitoring`. If built with this tag, `lnd` has the ability to export Prometheus metrics about its gRPC performance.  These metrics include keeping track of how many times each gRPC call has been invoked, how many bytes have been transmitted and received for each gRPC call, and more.

To enable Prometheus exporting after building `lnd` with the `monitoring` tag, run `lnd` with this flag: 
```
--prometheus.enable
```

To change the address that `lnd` listens on for Prometheus, add this flag:
```
--prometheus.listen=<address>
```

By default, `lnd`'s Prometheus exporter listens on `localhost:8989`.

## Wallet Bug Fixes 

[A bug has been fixed that would cause the `EstimateFee` and `SendOutputs` RPC commands to fail if conditions of higher fees](https://github.com/lightningnetwork/lnd/pull/3218). The root cause was using the transactions effective fee rate instead of the minrelayfee when computing dust in certain scenarios. 

## Wallet Chain Sync Improvements

There was a period of time where the wallet would only store the latest 25,000 block headers of the chain in order to properly recover from chain reorgs, but this was modified to the existing behavior of storing all of them due to deep reorgs on the testnet chain during `lnd`s initial testing and development. [In this release, we revert back to the prior behavior, but will instead only store the latest 10,000 as a generous safety margin](https://github.com/btcsuite/btcwallet/pull/618).

As a result of doing so, the initial sync process is sped up. Neutrino backends saw the least improvements in this department, while bitcoind saw the most.

[The wallet will also now detect that the chain backend (i.e., `btcd`, `bitcoind`, etc.) is currently syncing if its latest block does not have a timestamp within the past 2 hours](https://github.com/btcsuite/btcwallet/commit/17efcdba2fc05889b8157f436d44b120e5fb01b1), allowing us to start `lnd` while the chain backend syncs.

## UtxoSweeper Improvements

Recent versions of `lnd` have seen development of a new subsystem: the `UtxoSweeper`. The [release notes of our v0.6.0-beta release](https://github.com/lightningnetwork/lnd/releases/tag/v0.6-beta) provide a brief overview of its duties. In this release, we continue to expand its functionality by allowing users to obtain information about the list of inputs being batched by the `UtxoSweeper` through [a new `PendingSweeps` RPC and its corresponding `lncli wallet pendingseeps` command](https://github.com/lightningnetwork/lnd/pull/3089).

[We also now allow users to bump the fee rate of an input with the Replace-By-Fee (RBF) policy or a transaction with the Child-Pays-For-Parent (CPFP) policy through the `BumpFee` RPC and its corresponding `lncli wallet bumpfee` command](https://github.com/lightningnetwork/lnd/pull/3140). In order to provide this functionality, the `UtxoSweeper` first had to be [extended to support sweeping distinct batches of inputs with similar fee preferences](https://github.com/lightningnetwork/lnd/pull/3026).

Fee bumping within `lnd` will take a different approach than the popular `bitcoin-cli bumpfee` command. Since the `UtxoSweeper` batches transactions together, `lnd` cannot rely on bumping a transaction’s fee by providing its hash since it can change at any point with the addition/removal of new inputs. Instead, fee bumping relies on an outpoint being provided along with a fee preference.

A fee preference can be defined as one of any of the following options, which will likely expand in future releases.

* Static fee rate: fixed fee rate to spent an input on-chain with.
* Confirmation target: a delta of blocks from the current height of the chain in which an input should be spend on-chain within.

When bumping the fee of an input that currently exists within the `UtxoSweeper`, a transaction is created with a fee rate backed by the fee preference provided that replaces the lower fee transaction through the RBF policy. When bumping the fee of an input that points to an unconfirmed transaction output which belongs to the user’s wallet, a transaction that spends this input is created with a fee rate backed by the fee preference provided. This spending transaction can be interpreted as the child in a CPFP scenario.

The current design presents some shortcomings which will be addressed in future releases as we develop things further. These include:

* Fee preference Validation checks are _not_ in place to ensure they provide a sufficiently higher fee rate in order for a fee bump to be successful. This responsibility is delegated to the user.
* The `UtxoSweeper` does not persist any inputs to disk, so restarting `lnd` will require incomplete fee bump requests to be requested again.

## `lncli` Bug Fixes

[We'll now properly parse an optional single or multi channel backup being provided as part of `lncli create`](https://github.com/lightningnetwork/lnd/pull/3104).

[We'll now properly spend unconfirmed UTXOs as part of `lncli openchannel` when providing a `min_confs` parameter of 0](https://github.com/lightningnetwork/lnd/pull/3093).

## Config Changes 

[Users can now use the `--tlsextraip` and `--tlsextradomain` fields to set multiple IPs or domains when generating certs](https://github.com/lightningnetwork/lnd/pull/2704). 

[A new `neutrino.assertfilterheader` filter header flag has been added to `lnd`](https://github.com/lightningnetwork/lnd/pull/3118). In the past the neutrino protocol underwent a number of changes, some of which affected exactly _what_ is included in the filter. Older clients may have been on persistent incorrect filter chains as a result of this. This new argument allows a client to ensure it has the right filter chain using an externally provided filter header hash. If this hash doesn’t match, then the neutrino client will delete their state and re-sync the filter header chain. 

Litecoin support has been extended to also [include the simnet](https://github.com/lightningnetwork/lnd/pull/3045) and [regtest chains](https://github.com/lightningnetwork/lnd/pull/2189). 

## Interoperability Improvements

### CLTV Tie-Breaking in Commitment Output Sorting

A nuanced, spec-level bug has been fixed for [properly sorting HTLCs on the commitment transaction](https://github.com/lightningnetwork/lnd/pull/3142). When HTLCs of identical payment hash and amount appear on the same commitment transaction, the original BIP69 sorting could lead to a channel failure if the HTLCs had different CLTV values since the second-layer transactions would have different sighashes. This happens because the CLTV is enforced via `nLockTime` field of the descendant transaction, and weren’t being considered in the sorting of the commitment outputs. The [new spec sorting](https://github.com/lightningnetwork/lightning-rfc/pull/491) resolves this by using the CLTV values of HTLC outputs as tiebreakers when the payment hash and amount are identical.


Since 0.5, `lnd` has forbidden sending out more than one HTLC for the same payment hash at a given time, so users on pre-0.7 versions are unlikely to experience this bug in purely `lnd` to `lnd` interactions, or have triggered it on other nodes in the network. However, it’s possible that forwarding payments from implementations that permit duplicate payments can trigger the bug and result in a channel closure. This bug should be completely eliminated going forward.

### Increased Non-initiator Funding Timeout

When another node initiates a channel open with `lnd`, the non-initiator forgets about the channel if it doesn’t confirm in timely manner. In 0.7, this timeout has been [raised to two weeks](https://github.com/lightningnetwork/lnd/pull/3098) from the prior value of two days. This allows `lnd` to tolerate channel initiators with a low time preference (set a low fee rate) and better tolerate fee spikes or on-chain congestion during the funding process.

## P2P and Gossip Improvements

Prior versions of `lnd` would send out all updates (or new channels) to connected active syncing peers in a single payload. This could at times cause slight memory spikes if many channels were mined in a single block for example. [This latest version of `lnd` will instead now split announcements into multi sub-batches when it’s time to flush the set of pending messages](https://github.com/lightningnetwork/lnd/pull/2985). This change reduces GC pressure, and also naturally implements a variant of flow control to ensure minimal load during announcement batch flushes. It also make sure to [redo a historical sync ](https://github.com/lightningnetwork/lnd/pull/3103) the first time it gets a peer

## RPC Server and RPC Sub-Server Changes

[`lnd`’s RPC certificates will now be automatically re-generated by the daemon if upon restart, we detect that they’ve expired](https://github.com/lightningnetwork/lnd/pull/3011). Many nodes that were created greater than a year ago may have run into this issue, and had to delete and then regenerate themselves. 

[The `NodeUpdate` and `GetNodeInfo` commands now include the color of the target node](https://github.com/lightningnetwork/lnd/pull/2312). 

[The `closeallchannels` command within `lncli` now exposes a `conf_target` or `sat_per_byte` arguments in order to allow the user to control the fee rate used to close all transactions.](https://github.com/lightningnetwork/lnd/pull/990) 

### Transaction Hex in GetTransactions 

[The `GetTransactions` RPC call now also includes the serialized hex version of the transaction.](https://github.com/lightningnetwork/lnd/pull/3174) This exposes information the wallet already has and can be helpful for external accounting systems connected to `lnd`, or for usage with the new `BumpFee` command added in this version. 

### Display Paid Payment Requests

When making payments via the `SendPayment` RPC, the [paid invoice will now be displayed](https://github.com/lightningnetwork/lnd/pull/2717) in the `ListPayments` results. Similarly, payments via `lncli payinvoice` will show the invoice in `lncli listpayments`. This allows applications to recover the details, e.g. the invoice memo, without needing to track them separately.

### Zero Fees With `UpdateChanPolicy` 

[It’s now possible to set fees to rock bottom (zero!) using `lncli updatechanpolicy` or the `UpdateChanPolicy` RPC command]https://github.com/lightningnetwork/lnd/pull/3139). 

### Channel Display in GetNodeInfo 

The `GetNodeInfo` command will now optionally also return the set of channels belonging to a particular node. This is useful as it saves additional look ups, and a client-side mapping between channel ID and node using the `DescribeGraph` command. Arguments for the new `lncli` command are as follows: 
```
⛰   lncli getnodeinfo -h
NAME:
   lncli getnodeinfo - Get information on a specific node.

USAGE:
   lncli getnodeinfo [command options] [arguments...]

CATEGORY:
   Peers

DESCRIPTION:
   Prints out the latest authenticated node state for an advertised node

OPTIONS:
   --pub_key value     the 33-byte hex-encoded compressed public of the target node
   --include_channels  if true, will return all known channels associated with the node
```

### Structured SendToRoute Errors

A [new `SendToRoute` rpc](https://github.com/lightningnetwork/lnd/pull/1662) has been added to the `router` sub-server. This call improves upon the main rpc `SendToRoute` rpc by returning errors as proper proto messages. No more (regex) string parsing. As part of this change, the (deprecated) option to pass in multiple routes to the main `SendToRoute` was removed. 

### Payment RPCs

The interface of [`SendPayment`](https://github.com/lightningnetwork/lnd/pull/2973) in the `router` sub-server has been modified. It now takes a custom payment timeout value. This defines the duration after which no new attempts to complete the payment are initiated. The call also requires the fee limit to be set explicitly. The fee limit is an important parameter and not having a default value for this forces callers to make a conscious decision about its value. Another change is that `SendPayment` only returns payment-level failures. This set of failures is currently limited, but will be extended in the future. The previously returned last payment attempt error is no longer available, because its informative value is considered limited. 

Furthermore a new call `TrackPayment` was added. `TrackPayment` can be used to pick up and track the status of pending payments, for example after losing the connection or across restarts.

### Payment Persistence

A series of PRs (#3064, #3063, #2761, #2762) has been merged, making `lnd` better handle in-flights payments across restarts. `lnd` will now write any attempted payment to the database, such that should the daemon restart before the result comes back, it will correctly record it to the DB. This means that payments can now be in states “in flight”, “failed” or “succeeded”, which can all be shown by calling `lncli listpayments  --include_incomplete` (#3190).

## Probability Based Mission Control

In prior versions of `lnd`, when we encountered a path finding failure, we would simply ignore the edge or node that caused for error for 5 or 15 seconds, continuing one with that path finding session. This naive approach has a number of issues. As an example, this means that shortly after a node makes a payment, it forgets all the prior context it used to successfully route the payment. Additionally, the prior version didn’t share this information amongst concurrent in-flight payment sessions, meaning each session couldn’t learn from attempts of other on going sessions. Users may have noticed this “cold start” effect when they go to send a new payment a few minutes the last successful payment attempt. In older versions of `lnd`, the path finding would try a series of channels that it likely knew _wouldn’t_ work, before finally finding the golden set of channels that reliably work. 

In this new version of `lnd`, the previously used edge and node black lists in path finding are replaced by [a probability based system](https://github.com/lightningnetwork/lnd/pull/2802). It modifies path finding so that it not only compares routes on fee and time lock, but also takes route success probability into account. Each channel starts out with a default “apriori” probability. As path finding attempts fail, we reduce the probability of channels that have failed to zero, exponentially decaying back to the default apiori probability. This means that `lnd` will now properly “learn” from its past path finding attempts. Additionally, since this algorithm is less greedy than the prior algorithm, it may return a distinct set of paths compared to the prior algorithm, exploring avenues that maybe didn’t seem “optimal”, but still have a high probability of success. 

The new system is similar to “active learning” based approaches in machine learning. `lnd` will now continually update its view of the network based on empirical observations of payment failures. In addition to that, historical payment attempt outcomes are kept in mission control memory longer and improve path finding for future payments. A new diagnostic rpc has been added to query the current mission control state. Several configuration options are exposed to give more control of mission control behavior:
```
      --routerrpc.minrtprob=                                  Minimum required route success probability to attempt the payment (default: 0.01)
      --routerrpc.apriorihopprob=                             Assumed success probability of a hop in a route when no other information is available. (default: 0.95)
      --routerrpc.penaltyhalflife=                            Defines the duration after which a penalized node or channel is back at 50% probability (default: 1h0m0s)
      --routerrpc.attemptcost=                                The (virtual) cost in sats of a failed payment attempt (default: 100)
```

A new `querymc` sub-server RPC command has been added to allow users to peek into this diagnostic information. Eventually users may be able to share their mission control state (the effective “memory” of the router), amongst their other nodes in order to ensure they don’t need to re-discover the set of reliable channels. 

These changes prepare for further enhancements that will increase payment reliability.

The deprecated `num_routes` parameter of `QueryRoutes` has [been removed](https://github.com/lightningnetwork/lnd/pull/3054).

## Invoice Settling

Several changes with respect to [invoice settling](https://github.com/lightningnetwork/lnd/pull/2913) have been made. This makes the logic of off-chain and on-chain invoice settling more consistent and is a preparatory step for atomic multiple path payments.

## Neutrino Improvements 

All integration tests are now run continuously with the [`neutrino` chain backend](https://github.com/lightningnetwork/lnd/pull/1881) , in addition to the existing tests using `btcd`!

[When running `lnd` with neutrino active, the daemon will now properly shutdown even if it’s in the middle of checking for the spentness of a particular UTXO.](https://github.com/lightningnetwork/lnd/pull/2716)  

## Static Channel Backups 

A bug fix has been made to the current on-disk SCB format in the Windows operating system. Before this release, `lnd` wouldn’t properly close the temporary SCB file before swapping it over to the permanent file name (atomic file rename). On Windows in particular, this would cause the swap to fail, meaning that the file wouldn’t be updated on disk. [We’ve fixed this issue in this latest release, by always closing the temporary file before we attempt to modify it](https://github.com/lightningnetwork/lnd/pull/3129).

## Changelog

The full list of changes since `0.6.1-beta` can be found here:

* https://github.com/lightningnetwork/lnd/compare/v0.6.1-beta...v0.7.0-beta-rc3

# Contributors (Alphabetical Order)

2xic
AdamISZ
chokoboko
Conner Fromknecht
Daniel McNally
Federico Bond
Francisco Calderón
Geoff Taylor
Johan T. Halseth
John Griffith
Joost Jager
Matt Drollette
michael1011
Neevai Esinly
Olaoluwa Osuntokun
OrbitalTurtle
Valentine Wallace
Wilmer Paulino
Xavi Soler
Yaacov Akiba Slama

",49765480
73,False,True,2019-06-14T21:01:21Z,2019-06-18T20:07:33Z,"This release marks a new major release of `lnd` that includes several important bug fixes, an improved payment API, pathfinding enhancements, faster initial sync times, support for fee bumping on sweeps, and an initial rollout of altruistic watchtowers. As always, **users are highly encouraged to upgrade to this new version**. 

# Database migrations

This version includes two migrations, the first is in `channel.db` which modifies the structure of the payment tracking data to support the refactored router and its ability to reliably display payments via the RPC. The migration should look like this:

```
2019-06-14 21:54:53.576 [INF] LTND: Version: 0.7.0-beta commit=v0.7.0-beta-rc1, build=production, logging=default
2019-06-14 21:54:53.579 [INF] LTND: Active chain: Bitcoin (network=mainnet)
2019-06-14 21:54:53.583 [INF] CHDB: Checking for schema update: latest_version=9, db_version=8
2019-06-14 21:54:53.586 [INF] CHDB: Performing database schema migration
2019-06-14 21:54:53.586 [INF] CHDB: Applying migration #9
2019-06-14 21:54:53.586 [INF] CHDB: Migrating outgoing payments to new bucket structure
2019-06-14 21:54:53.586 [INF] CHDB: Migration of outgoing payment bucket structure completed!
```

The second migration is in `wallet.db`, which prunes redundant block data already being stored by the underlying backend. The migration should look like this:

```
2019-06-14 21:54:53.744 [INF] LNWL: Applying wallet address manager migration #8
2019-06-14 21:54:53.746 [INF] LNWL: Removing block hash entries beyond maximum reorg depth of 10000 from current tip 580748
```

Once updated, it will not be possible to return to an older version of lnd.

# Verifying the Release

In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import the keys that have signed this release if you haven't done so already: 

```
curl https://keybase.io/bitconner/pgp_keys.asc | gpg --import
```

Once you have the required PGP keys, you can verify the release (assuming `manifest-v0.7.0-beta.txt` and `manifest-v0.7.0-beta.txt.sig` are in the current directory) with:

```
gpg --verify manifest-v0.7.0-beta.txt.sig
```

You should see the following if the verification was successful:

```
gpg: assuming signed data in 'manifest-v0.7.0-beta-rc1.txt'       
gpg: Signature made Fri Jun 14 14:24:37 2019 PDT                  
gpg:                using RSA key 9C8D61868A7C492003B2744EE7D737B67FA592C7                                                           
gpg: Good signature from ""Conner Fromknecht <conner@lightning.engineering>"" [ultimate]  
```

That will verify the signature on the main manifest page which ensures integrity and authenticity of the binaries you've downloaded locally. Next, depending on your operating system you should then re-calculate the `sha256` sum of the binary, and compare that with the following hashes (which are included in the manifest file):

```
a0af101b730d3f30cb85d46ce9b70f639ed845318deb72f08196714974a9a4f7  lnd-darwin-386-v0.7.0-beta-rc1.tar.gz
2385d2dcdcf2df7623d51611074968ecc575943e7fd06e0c31821d4454ff1cc4  lnd-darwin-amd64-v0.7.0-beta-rc1.tar.gz
ba584ff4528b7a8e91785c2b53258fcae795d8faa2ab5f71b74a0111ac1ea885  lnd-dragonfly-amd64-v0.7.0-beta-rc1.tar.gz
e19ee77f5c680b3dd9cdd9286273ae076f653e31a930ec2e268ac38a2102c11a  lnd-freebsd-386-v0.7.0-beta-rc1.tar.gz
210f1977bd9e6c1904a9ef215575e7ec43bb52775d04f7e431d9919c1df3c31c  lnd-freebsd-amd64-v0.7.0-beta-rc1.tar.gz
4a1b7783e928ac56887b874851595983e62414a95e67bbd422052a7a75b4a760  lnd-freebsd-arm-v0.7.0-beta-rc1.tar.gz
034570245b113074d9b1ccaf6f74b5fe16d2cd06ba97fe357cd8d77dd3d2f744  lnd-linux-386-v0.7.0-beta-rc1.tar.gz
6cb52c42c6b837b8dda35124cb74c591b3f9167f92e73d0e3ea46b359cb5bdf4  lnd-linux-amd64-v0.7.0-beta-rc1.tar.gz
5f4666a9c12e578c41faea4868cd5ea447dfa0e80ce7a282eced36e1205df968  lnd-linux-arm64-v0.7.0-beta-rc1.tar.gz
0573093e4d84213941adab88cc5cd604f9b3e1344a28bb7b8894d2302fa05022  lnd-linux-armv6-v0.7.0-beta-rc1.tar.gz
24f4860d44d726a0e2fb14c5a368d521637b9ecc009b552a8ce987b0b28f3544  lnd-linux-armv7-v0.7.0-beta-rc1.tar.gz
4ea4e15e4b15c8c2ad86590c30315200090dcb74173448e394e3e4e4dae78415  lnd-linux-mips64-v0.7.0-beta-rc1.tar.gz
4bc989aececec53c42f8d8338e3f25358b0e05de94223259f6222b6230a1c498  lnd-linux-mips64le-v0.7.0-beta-rc1.tar.gz
876996e045ad241b594048223069be2f96dc8c4d46aaf81d7e3c47327c3b6ecc  lnd-linux-ppc64-v0.7.0-beta-rc1.tar.gz
d402847b1efeb039aa72fbf20320df30161a7aa3dca54b09de4b29c8f499f03a  lnd-netbsd-386-v0.7.0-beta-rc1.tar.gz
4cb2996dfb5fa42a9a771f0631631f102080512d406d942d5816ecc9c1d5705e  lnd-netbsd-amd64-v0.7.0-beta-rc1.tar.gz
4e7dd42d39e81cdbfb2de14f67415e0c3c986eeaa7d9ed9ec029b7d6bf963f73  lnd-openbsd-386-v0.7.0-beta-rc1.tar.gz
8bf0514c74d80584d87544f07a2e520ca9311ef7a1a6e42e9029ac8fcb3b533b  lnd-openbsd-amd64-v0.7.0-beta-rc1.tar.gz
f13d1628ccba4bc963e7ed2a81be0ed0cd6c9c11ea71a4a7a68a4ff01d2a4d0b  lnd-source-v0.7.0-beta-rc1.tar.gz
04b0768147197846603a0465b962c6fec3dfb315e3b446b0d148620a81e8266c  lnd-windows-386-v0.7.0-beta-rc1.zip
1a9ee1d3e30e69e14cb00ef982e0a63d05ed39f74e3fc7d3a16b31efe8685a89  lnd-windows-amd64-v0.7.0-beta-rc1.zip
21098c814a77dfdff0bf53329f8337ee69b49fa27829507402934a60147a9dcc  vendor.tar.gz
```

One can use the `shasum -a 256 <file name here>` tool in order to re-compute the `sha256` hash of the target binary for your operating system. The produced hash should be compared with the hashes listed above and they should match *exactly*.

Finally, you can also verify the _tag_ itself with the following command:

 ```
git verify-tag v0.7.0-beta
```

The binaries are compiled with `go1.12.6` and include the following build tags: `autopilotrpc`, `signrpc`, `walletrpc`, `chainrpc`, `invoicesrpc`, and `routerrpc`.

# Building the Contained Release 

With this new version of `lnd`, we've modified our release process to ensure the bundled release is now _fully self contained_. As a result, with only the attached payload with this release, users will be able to rebuild the target release themselves without having to fetch any of the dependencies. Note that at this stage, binaries aren't yet fully reproducible (even with `go modules`). This is due to the fact that by default, [Go will include the full directory path where the binary was built in the binary itself](https://github.com/golang/go/issues/16860). As a result, unless your file system exactly mirrors the machine used to build the binary, you'll get a different binary, as it includes artifacts from your local file system. This will be fixed in `go1.13`, and before then we may modify our release system to do this automatically. 

In order to re-build from scratch, assuming that `vendor.tar.gz` and `lnd-source-v0.7.0-beta.tar.gz` are in the current directory:
```
tar -xvzf vendor.tar.gz
tar -xvzf lnd-source-v0.7.0-beta.tar.gz
GO111MODULE=on go install -v -mod=vendor -ldflags ""-X github.com/lightningnetwork/lnd/build.Commit=v0.7.0-beta"" ./cmd/lnd
GO111MODULE=on go install -v -mod=vendor -ldflags ""-X github.com/lightningnetwork/lnd/build.Commit=v0.7.0-beta"" ./cmd/lncli
```

The `-mod=vendor` flag tells the `go build` command that it doesn't need to fetch the dependencies, and instead, they're all enclosed in the local vendor directory. 

Additionally, it's now possible to use the [enclosed `release.sh` script to bundle a release for a _specific_ system like so](https://github.com/lightningnetwork/lnd/pull/2191): 

```
LNDBUILDSYS=""linux-arm64 darwin-amd64"" ./release.sh
```

⚡️⚡️⚡️ OK, now to the rest of the release notes! ⚡️⚡️⚡️

# Release Notes

Coming soon...

## Changelog

The full list of changes since `0.6.1-beta` can be found here:

* https://github.com/lightningnetwork/lnd/compare/v0.6.1-beta...v0.7.0-beta-rc1

# Contributors (Alphabetical Order)

AdamISZ
chokoboko
Conner Fromknecht
Daniel McNally
Federico Bond
Francisco Calderón
Geoff Taylor
Johan T. Halseth
John Griffith
Joost Jager
Matt Drollette
michael1011
Neevai Esinly
Olaoluwa Osuntokun
Turtle
Valentine Wallace
Wilmer Paulino
Xavi Soler
Yaacov Akiba Slama

",49765480
74,False,False,2019-05-09T23:00:38Z,2019-05-09T23:33:21Z,"This release marks a minor release in the `0.6-beta` series. This release contains no major new features, and instead contains a series of bug-fixes, optimizations, and stability improvements. 

# Verifying the Release

In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import the keys that have signed this release if you haven't done so already: 

```
curl https://keybase.io/roasbeef/pgp_keys.asc | gpg --import
```

Once you have his PGP key you can verify the release (assuming `manifest-v0.6.1-beta.txt` and `manifest-v0.6.1-beta.txt.sig` are in the current directory) with:

```
gpg --verify manifest-v0.6.1-beta.txt.sig
```

You should see the following if the verification was successful:

```
gpg: assuming signed data in 'manifest-v0.6.1-beta.txt'
gpg: Signature made Thu May  9 16:31:08 2019 PDT
gpg:                using RSA key F8037E70C12C7A263C032508CE58F7F8E20FD9A2
gpg: Good signature from ""Olaoluwa Osuntokun <laolu32@gmail.com>"" [ultimate]
```

That will verify the signature on the main manifest page which ensures integrity and authenticity of the binaries you've downloaded locally. Next, depending on your operating system you should then re-calculate the `sha256` sum of the binary, and compare that with the following hashes (which are included in the manifest file):

```
8fd4bfb26d402a4882f4c89ab700186431c178af0a9f0bf61513bbb48cd497c3  lnd-darwin-386-v0.6.1-beta.tar.gz
02330ede4e7508a37e92bcc4c0dd0ac977f51a8fd42be9f114b1e42e58ff07c9  lnd-darwin-amd64-v0.6.1-beta.tar.gz
60c7aef87789271cc1c55286068ce2e6e94ccae48d85465df0606fe96bbe01cd  lnd-dragonfly-amd64-v0.6.1-beta.tar.gz
8f328ef03e2f6fb47aab28af7a8949d3fadaac5769382d45ebbdf2fca7921593  lnd-freebsd-386-v0.6.1-beta.tar.gz
f50b91b6c0e95b2a5c0e246fb17e07eddefb77533b10c034bb5454ad4001edcd  lnd-freebsd-amd64-v0.6.1-beta.tar.gz
9e2c4b926140aacfc680e53191b1b56a18b0def422b1f8f4cc66536298721115  lnd-freebsd-arm-v0.6.1-beta.tar.gz
00a7cd0ca657bb242b0f3acb5f4e26a13fd789946fab73c252118e3f89c1cf57  lnd-linux-386-v0.6.1-beta.tar.gz
c55367edb82955dc942baf9f48f79fadde1eee0e86c1d59d2fe1993140ec1b3f  lnd-linux-amd64-v0.6.1-beta.tar.gz
d5f7280c324ebc1d322435a0eac4c42dca73ebc6a613878d9e0d33a68276da5c  lnd-linux-arm64-v0.6.1-beta.tar.gz
00ff9c61fbd272863aef677db240b04eecdaae0cfb479cf25c713b89ff81d41c  lnd-linux-armv6-v0.6.1-beta.tar.gz
5541959c7fde98d76d88cc8070ca626c681ba38c44afcb85bf417a9a677e23c2  lnd-linux-armv7-v0.6.1-beta.tar.gz
ed8aa2ef8f4e42651a16c90d5ab2d4485396b4c795bc183fd01ae63b39d4201e  lnd-linux-mips64-v0.6.1-beta.tar.gz
a97dfc432747f4dcd6deb8f263b18453c68b4882b1cc1ff84d90f25ba2ed5151  lnd-linux-mips64le-v0.6.1-beta.tar.gz
95ff869a1bbcba20b5c6387f09175eaf3a16f2026e5113eff9abb7b595039423  lnd-linux-ppc64-v0.6.1-beta.tar.gz
5efb454850f41f69a397d4a9cd4778f6a251ce21cf796960b60d6799ff128bf1  lnd-netbsd-386-v0.6.1-beta.tar.gz
6059ab2d6d03604d48c69eeaf1f59f2131b1ce76f714629a6e1c2063f4da4788  lnd-netbsd-amd64-v0.6.1-beta.tar.gz
5db4391a3d5646c3adcdaa1f57fbd9a8b9cfb585e38cccc37729bd5fe2bca8e6  lnd-openbsd-386-v0.6.1-beta.tar.gz
c5b84fe5982ae4b7745d0f083d123d304f97c5da4e6fe515f84b3272495fb1a2  lnd-openbsd-amd64-v0.6.1-beta.tar.gz
68fcede095d6e4f038ba49c46f24a07ff2d07ea11eab95d2d02d5c1467d4d2fc  lnd-source-v0.6.1-beta.tar.gz
e2cb484fda567eb03a534f36613771b1bc10c7220b255b3972784f38abdc2342  lnd-windows-386-v0.6.1-beta.zip
c370735f280ab2b5f6421dafccbdc0e09ff5cfe5f3a65f87155d5cf1e20b1249  lnd-windows-amd64-v0.6.1-beta.zip
afb75c146f03bc4d2af77c49ac4ced88f945a5d3cb9ba32181bc9145149e6af6  vendor.tar.gz
```

One can use the `shasum -a 256 <file name here>` tool in order to re-compute the `sha256` hash of the target binary for your operating system. The produced hash should be compared with the hashes listed above and they should match *exactly*.

Finally, you can also verify the _tag_ itself with the following command:

 ```
git verify-tag v0.6.1-beta
```

# Building the Contained Release 

With this new version of `lnd`, we've modified our release process to ensure the bundled release is now _fully self contained_. As a result, with only the attached payload with this release, users will be able to rebuild the target release themselves without having to fetch any of the dependencies. Note that at this stage, binaries aren't yet fully reproducible (even with `go modules`). This is due to the fact that by default, [Go will include the full directory path where the binary was built in the binary itself](https://github.com/golang/go/issues/16860). As a result, unless your file system exactly mirrors the machine used to build the binary, you'll get a different binary, as it includes artifacts from your local file system. This will be fixed in `go1.13`, and before then we may modify our release system to do this automatically. 

In order to re-build from scratch, assuming that `vendor.tar.gz` and `lnd-source-v0.6-beta.tar.gz` are in the current directory:
```
tar -xvzf vendor.tar.gz
tar -xvzf lnd-source-v0.6.1-beta.tar.gz
GO111MODULE=on go install -v -mod=vendor -ldflags ""-X github.com/lightningnetwork/lnd/build.Commit=v0.6.1-beta"" ./cmd/lnd
GO111MODULE=on go install -v -mod=vendor -ldflags ""-X github.com/lightningnetwork/lnd/build.Commit=v0.6.1-beta"" ./cmd/lncli
```

The `-mod=vendor` flag tells the `go build` command that it doesn't need to fetch the dependencies, and instead, they're all enclosed in the local vendor directory. 

Additionally, it's now possible to use the [enclosed `release.sh` script to bundle a release for a _specific_ system like so](https://github.com/lightningnetwork/lnd/pull/2191): 

```
LNDBUILDSYS=""linux-arm64 darwin-amd64"" ./release.sh
```

The `release.sh` script [will now also properly include the commit hash once again](https://github.com/lightningnetwork/lnd/pull/2400), as a regression caused by a change to the internal build system has been fixed. 

 ⚡️⚡️⚡️ OK, now to the rest of the release notes! ⚡️⚡️⚡️

# Release Notes

## Tor

[A bug has been fixed in the minimum version verification for the Tor daemon that `lnd` enforces](https://github.com/lightningnetwork/lnd/pull/3038). Before this fix, `lnd` would at times fail to connect to a Tor daemon with a version beyond the minimum version we require. 

## Protocol and Cross Implementation Compatibility Improvements

[`lnd` will now properly handle the conversion from an `UpdateFailMalformedHTLC` error to a regular `UpdateFailHTLC` error](https://github.com/lightningnetwork/lnd/pull/3027). Before this fix, `lnd` would incorrectly send an error that wasn't able to be decrypted by the sender of an the original HTLC. 

## On-Chain Commitment/HTLC Handling 

[A series of parameters related to when `lnd` will go to chain for an HTLC, and also when it will reject an incoming/outgoing HTLC for being ""too close for comfort"" have been adjusted](https://github.com/lightningnetwork/lnd/pull/2887). As a result, it's no longer possible for `lnd` to accept an HTLC then _immediately_ go to chain for it. Additionally, it's now possible for `lnd` to forward an HTLC as the last hop to a destination with a very low final CLTV delta. 

`lnd` will now detect a local force close (self initiated) based on the outputs rather then the old `txid` based comparison. This patches an edge case related to SCB restoration where if a user broadcasted a force close _then_ restored their SCB, `lnd` would miss this local force close transaction and attempt to redeem using an incorrect path. This bug has never been observed in the wild, but nevertheless warranted patching. 

## Gossip and P2P Handling 

### Non Write Pool Blocking Writes
Flushing a message to the socket is no longer blocks the write pool. One result of this change is that we are now we are able to gracefully handle timeout errors and resume partially sent messages. As of #2819, if a message is partially written to the wire due to a timeout error, we will try to write the full message again. In turn, this will produce an authentication error on the remote side (after it is able to read the number of bytes specified in the header) since the middle of the latter ciphertext will not pass as the MAC check. 

We resolve this by splitting the Write call into two subroutines, WriteMessage and Flush. WriteMessage encrypts the plaintext and buffers the ciphertext on the underlying connection. A subsequent call to Flush will then attempt to write the bytes out on the wire. If a timeout error is encountered during flush, we can safely resume the byte stream by calling Flush again. In addition to being able to resume partial writes, this also has a yuuuge benefit in not blocking the write pool with network operations. This fully decouples the number of write pool workers from the number of peers, since the blocking operations now take place in each peer.

### Synchronous Gossip Response Writes
[All replies to gossip query messages are now _fully synchronous_](https://github.com/lightningnetwork/lnd/pull/2916). This means that if a peer requests a set of channels, then we won't send the next message until _after_ the current message has been flushed to the socket. Node operators should find that start up is now much snappier, and the post start up memory burst to also be much lower. 

### `SyncManager` Simplification and Improvements 

[We've made some improvements to the recently introduced SyncManager](https://github.com/lightningnetwork/lnd/pull/2932). These improvements include:
 * Active syncers will no longer attempt to synchronize our graph with remote peers. Instead, we'll now rely on synchronizing our graph with remote peers through the routine historical syncs performed by the `SyncManager`. Since active syncers will no longer attempt this synchronization, the `SyncManager`'s round-robin is no longer needed.
 * Handling initial historical sync disconnections: Every time lnd starts up, it attempts an initial historical graph sync with the first peer that connects. If the peer ends up disconnecting, then we wouldn't handle finding a replacement to continue performing the initial historical sync.
 * Queueing active syncers until the initial historical sync completes: We do this to ensure we can properly handle any new channel updates at tip. This is required for fresh nodes that are syncing the channel graph for the first time. If we begin accepting updates at tip while the initial historical sync is still ongoing, then we risk not processing certain updates since we've yet to learn of the channels themselves.

## RPC Bug Fixes 

[Sends to regular `p2pk`(Pay to PubKey)  addresses are now disallowed](https://github.com/lightningnetwork/lnd/pull/2922). 

[The route cache has been removed](https://github.com/lightningnetwork/lnd/pull/2950). After updates to the `SendToRoute` RPC command, the cache could at times cause an incorrect result from `QueryRoutes`. 


## Networking Bug Fixes 

[We've fixed an issue that would cause our automatic NAT traversal to fail on certain Linux distributions](https://github.com/lightningnetwork/lnd/pull/2989). 

[It's now again possible for the gRPC server to listen on _both_ IPv4 and IPv6 simultaneously](https://github.com/lightningnetwork/lnd/issues/2776).

[`lnd` will now automatically re-create port port forwarding if we detect that the external public IP has changed](https://github.com/lightningnetwork/lnd/pull/2014). 

## Litecoin 

[`lnd` is now able to connect to Litecoin coins running on the `regest` network](https://github.com/lightningnetwork/lnd/pull/2189) as well [as the `simnet` network](https://github.com/lightningnetwork/lnd/pull/1865). 

## No More `main` Package!

[There is no longer a `main` package, instead the top-level package within the project is now `lnd`](https://github.com/lightningnetwork/lnd/pull/1926). This is a prep for changes to make `lnd` easier to embed in mobile applications for iOS and Android. 

## Changelog

The full list of changes since `0.6.0-beta` can be found here:

* https://github.com/lightningnetwork/lnd/compare/v0.6-beta...v0.6.1-beta

# Contributors (Alphabetical Order)

Chris Coverdale
Conner Fromknecht 
Damian Mee 
Danny Paz 
frennkie
Johan T. Halseth 
Joost Jager 
Matt Drollette 
Offer Markovich 
Olaoluwa Osuntokun 
Robert Habermann
Valentine Wallace 
Wilmer Paulino 
",49765480
75,False,False,2019-04-16T21:24:30Z,2019-04-17T03:14:03Z,"This release marks a new major release of `lnd` that includes several important bug fixes, numerous performance optimizations, static channel backups (SCB), reduced bandwidth usage for larger nodes, an overhaul of the internals of the autopilot system, and a new batch sweeping sub-system. Due to the nature of some of the bug fixes which were made during the implementation of the new SCB feature, **users are highly encouraged to upgrade to this new version**. 

# Database migrations

This version includes a single migration to modify the message store format, used to send messages to remote peers reliably when attempting to construct channel proofs. The migration should appear as below:

```
2019-04-03 22:35:44.596 [INF] LTND: Version: 0.6.0-beta commit=v0.6-beta, build=production, logging=default
2019-04-03 22:35:44.596 [INF] LTND: Active chain: Bitcoin (network=mainnet)
2019-04-03 22:35:44.597 [INF] CHDB: Checking for schema update: latest_version=8, db_version=7
2019-04-03 22:35:44.597 [INF] CHDB: Performing database schema migration
2019-04-03 22:35:44.597 [INF] CHDB: Applying migration #8
2019-04-03 22:35:44.597 [INF] CHDB: Migrating to the gossip message store new key format
2019-04-03 22:35:44.597 [INF] CHDB: Migration to the gossip message store new key format complete!
```

# Verifying the Release

In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import the keys that have signed this release if you haven't done so already: 

```
curl https://keybase.io/roasbeef/pgp_keys.asc | gpg --import
```

Once you have his PGP key you can verify the release (assuming `manifest-v0.6-beta.txt` and `manifest-v0.6-beta.txt.sig` are in the current directory) with:

```
gpg --verify manifest-v0.6-beta.txt.sig
```

You should see the following if the verification was successful:

```
gpg: assuming signed data in 'manifest-v0.6-beta.txt'
gpg: Signature made Tue Apr 16 14:35:13 2019 PDT
gpg:                using RSA key F8037E70C12C7A263C032508CE58F7F8E20FD9A2
gpg: Good signature from ""Olaoluwa Osuntokun <laolu32@gmail.com>"" [ultimate]
```

That will verify the signature on the main manifest page which ensures integrity and authenticity of the binaries you've downloaded locally. Next, depending on your operating system you should then re-calculate the `sha256` sum of the binary, and compare that with the following hashes (which are included in the manifest file):

```
e9f3ff0f551f3ce4ad113ad10f8009a3aaca82fb6cd0244a994c299602b29334  lnd-darwin-386-v0.6-beta.tar.gz
76816b2d0d0e3f4c0e7d41c0ecb1457afe2ba95b8f37f4aa1adebbd9bc19aa4b  lnd-darwin-amd64-v0.6-beta.tar.gz
f7650749dc50c3f8c1957680333d95562b159ed13fea26737dc29bff76212925  lnd-dragonfly-amd64-v0.6-beta.tar.gz
7b77ecbfcffb3e2151ff54c27133aebe0d9b6324c80594bce4df265b5f990f61  lnd-freebsd-386-v0.6-beta.tar.gz
d48ce7ed7cc71e988af65e4175e949a5e52f2b8109f5239ae595edc3b8442f05  lnd-freebsd-amd64-v0.6-beta.tar.gz
c783ce9987577d2b7a5e95b6a16767158ef98f48d0eeedf58f4c3a1ce7500e6d  lnd-freebsd-arm-v0.6-beta.tar.gz
cde995167b428696cd6e78733fd934ebda9e03c0b63938af4654c42bd2d86e88  lnd-linux-386-v0.6-beta.tar.gz
ef37b3658fd864dfb3af6af29404d92337229378c24bfb78aa2010ede4cd06af  lnd-linux-amd64-v0.6-beta.tar.gz
2f31b13a4da6217ed7e27a44e1705103d7ed846aa2f599b7e5de0e6033a66c19  lnd-linux-arm64-v0.6-beta.tar.gz
ae8571de0e033a05279469348102982fcfbd3f88c83d549a3d43165ab8ab5aa0  lnd-linux-armv6-v0.6-beta.tar.gz
effea372c207293fd42b0cc27800da3a70c22f8c9a0e7b5eb8dbe56b5b98e1a3  lnd-linux-armv7-v0.6-beta.tar.gz
61038e6cd67562ba3d832de38917d6d37b0cb74fe5e32d4d41fb6d9193f8109d  lnd-linux-mips64-v0.6-beta.tar.gz
28e5be6510fbae4f893253b34db0fcc92d720016f46abe00684a00d2d11a1be3  lnd-linux-mips64le-v0.6-beta.tar.gz
5c13f83344d2634763cf4e178a2d2ca69031a985030713d585d3b37f7a261c06  lnd-linux-ppc64-v0.6-beta.tar.gz
07e91fc56cb0cfcfe52dcaa2bdec008c401b04fe466e970449bcdb4ebb6bb077  lnd-netbsd-386-v0.6-beta.tar.gz
465f4649bdb1393543de52b0dc60aa6121fad0bcf5ad8e7ff62a72c2484dd264  lnd-netbsd-amd64-v0.6-beta.tar.gz
f75b70cf657bffef6cbf2147f69e4296fb98adb48bd18e26950aedb7802748e9  lnd-openbsd-386-v0.6-beta.tar.gz
e5ce0e16a815d5ad98a60c9f7a148efcdb083c0af73965962156f2e3fc03e0df  lnd-openbsd-amd64-v0.6-beta.tar.gz
2c46e9e1f519fe7b0177f30c77611591023442df63c0a1e186154baf7dd9a284  lnd-source-v0.6-beta.tar.gz
77069e9971cd3240891698c02d821ae28254f765c77b5f943b6b88b4943434e7  lnd-windows-386-v0.6-beta.zip
b84de3702074f7e6ecab5f60a1489fb4ee9cd83bcf7c7e9a44604c600ff1d37e  lnd-windows-amd64-v0.6-beta.zip
31205f95fcf7bab7eeff043807ef0485ca14f4506e2e3864db81411ef637aebc  vendor.tar.gz
```

One can use the `shasum -a 256 <file name here>` tool in order to re-compute the `sha256` hash of the target binary for your operating system. The produced hash should be compared with the hashes listed above and they should match *exactly*.

Finally, you can also verify the _tag_ itself with the following command:

 ```
git verify-tag v0.6-beta
```

# Building the Contained Release 

With this new version of `lnd`, we've modified our release process to ensure the bundled release is now _fully self contained_. As a result, with only the attached payload with this release, users will be able to rebuild the target release themselves without having to fetch any of the dependencies. Note that at this stage, binaries aren't yet fully reproducible (even with `go modules`). This is due to the fact that by default, [Go will include the full directory path where the binary was built in the binary itself](https://github.com/golang/go/issues/16860). As a result, unless your file system exactly mirrors the machine used to build the binary, you'll get a different binary, as it includes artifacts from your local file system. This will be fixed in `go1.13`, and before then we may modify our release system to do this automatically. 

In order to re-build from scratch, assuming that `vendor.tar.gz` and `lnd-source-v0.6-beta.tar.gz` are in the current directory:
```
tar -xvzf vendor.tar.gz
tar -xvzf lnd-source-v0.6-beta.tar.gz
GO111MODULE=on go install -v -mod=vendor -ldflags ""-X github.com/lightningnetwork/lnd/build.Commit=v0.6-beta""
GO111MODULE=on go install -v -mod=vendor -ldflags ""-X github.com/lightningnetwork/lnd/build.Commit=v0.6-beta"" ./cmd/lncli
```

The `-mod=vendor` flag tells the `go build` command that it doesn't need to fetch the dependencies, and instead, they're all enclosed in the local vendor directory. 

Additionally, it's now possible to use the [enclosed `release.sh` script to bundle a release for a _specific_ system like so](https://github.com/lightningnetwork/lnd/pull/2191): 

```
LNDBUILDSYS=""linux-arm64 darwin-amd64"" ./release.sh
```

The `release.sh` script [will now also properly include the commit hash once again](https://github.com/lightningnetwork/lnd/pull/2400), as a regression caused by a change to the internal build system has been fixed. 

 ⚡️⚡️⚡️ OK, now to the rest of the release notes! ⚡️⚡️⚡️

# Release Notes

## Protocol and Cross-Implementation Compatibility Fixes 

We’ll now [properly validate our own announcement signatures](https://github.com/lightningnetwork/lnd/pull/2030) for `NodeAnnouncements` before writing them to disk and propagating them to other peers. 

A [bug has been fixed causing us to send an `FinalFailExpiryTooSoon` error rather than a `FinalFailIncorrectCltvExpiry`](https://github.com/lightningnetwork/lnd/pull/2335) when the last HTLC of a route has an expiration height that is deemed too soon by the final destination of the HTLC. 

[Aliases received on the wire are now properly validated. Additionally, we’ll no longer disconnect peers that send us invalid aliases](https://github.com/lightningnetwork/lnd/pull/2412).

[A bug has been fixed that would at times cause commitments to desynchronize in the face of multiple concurrent updates that included an `UpdateFee` message](https://github.com/lightningnetwork/lnd/pull/2397). The fix generalizes the existing commitment state machine logic to treat an `UpdateFee` message as we would any other `Update*` messages. 

We’ll now[ _reject_ funding requests that require an unreasonable confirmation depth](https://github.com/lightningnetwork/lnd/pull/2275) before the channel can be used. 

We’ll now [space out our broadcast batches more](https://github.com/lightningnetwork/lnd/pull/2538) in order to save bandwidth and consolidate more updates behind a single batch. 

[We’ll now require all peers we connect to, to have the DLP (Data Loss Protection) bit set](https://github.com/lightningnetwork/lnd/pull/2500). This is required for the new SCB (Static Channel Backups) to function properly. 

For private channels, [we’ll now always resend the latest `ChannelUpdate` to the remote peer on reconnecting](https://github.com/lightningnetwork/lnd/pull/1595). This update is required to properly make invoices with hop hints which are required for receiving over a non-advertised channel. 

## Reject and Channel Caches

[A number of internal caches have been added](https://github.com/lightningnetwork/lnd/pull/2847) to reduce memory idle memory usage with a large number of peers, and also reduce idle CPU usage due to stale channel updates. 


In this release, `lnd` now maintains a small reject cache for detecting stale ChannelAnnouncment and ChannelUpdate messages from its peers. Prior versions of `lnd` would perform a database lookup for each incoming messages, which produced a huge amount of contention under load and as the channel graph exploded.

The reject cache maintains just 25 bytes per edge, and easily holds today's graph in memory. Users on low power devices or with a large number of peers will benefit immensely from `lnd`'s improved ability to filter gossip traffic for the latest information and clear large backlogs received from their peers.

The number of items in the cache is configurable using the `--caches.reject-cache-size` flag. The default value of 50,000 comfortably fits all known channels in the reject cache, requiring 1.2MB.

Additionally, we now maintain a separate channel cache, which contains in-memory copies of ChannelAnnouncements, ChannelUpdates, and NodeAnnouncements for a given channel. This cache is used to satisfy queries in hot paths of our peers’ gossip queries, allow us to serve more responses from memory and perform fewer database reads and allocations in deserialization. 

The size of the channel cache is also configurable via the `--caches.chan-cache-size` flag. The default value of 20,000 stores about half of all known channels in memory and constitutes about 40MB.


## Graceful Shutdown via `SIGTERM`

It was discovered that prior versions of `lnd` didn’t attempt to catch the `SIGTERM` signal to execute a graceful shutdown. When possible, users should prefer to shutdown `lnd` gracefully via either `SIGTERM` or `SIGINT` to ensure the database is closed and any outstanding transactions committed in order to avoid database corruption. Commonly used process management systems such as Docker or systemd typically send `SIGTERM`, then wait for a period of time to allow the process to respond before forcefully killing the process. Before this release, `lnd` would always be forcefully killed by these platforms, rendering it unable to properly execute a graceful shutdown. 

[This new release of `lnd` will now properly catch these signals to ensure that we’re more likely to be able to execute a graceful shutdown](https://github.com/lightningnetwork/lnd/pull/2842). We believe that many reports of partial database corruption typically reported by those running on Raspberry Pi’s should be addressed by this change. 

## Static Channel Backups

In this release, we’ve implemented a new safe scheme for static channel backups (SCB's) for `lnd`. We say _safe_, as care has been taken to ensure that there are no foot guns in this method of backing up channels, vs doing things like `rsync`ing or copying the `channel.db` file periodically. Those methods can be dangerous as one never knows if they have the latest state of a channel or not. Instead, we aim to provide a simple safe instead to allow users to recover the settled funds in their channels in the case of partial or complete data loss. The backups themselves are encrypted using a key derived from the user's seed, this way we protect the privacy of the users channels in the back up state, and ensure that a random node can't attempt to import another user's channels. WIth this backup file, given their **seed and the latest back up file**, the user will be able to recover _both_ their on-chain funds, and also funds that are fully settled within their channels. By ""fully settled"" we mean funds that are in the base commitment outputs, and not HTLCs. We can only restore these funds as right after the channel is created, we have all the data required to make a backup. 

We call these “static” backups, as they only need to be obtained _once_ for a given channel and are valid until the channel has been closed. One can view this backup as a final method of recovery in the case of total data loss. It’s important to note that during recovery the channels **must be closed in order to recover the funds fully**. This set up ensures that there’s no way to incorrectly uses an SCB that would result in broadcast of a revoked commitment state. [Recovery documentation for both on-chain and off-chain coins can be found here](https://github.com/lightningnetwork/lnd/blob/master/docs/recovery.md). 

### Backup + Recovery Methods 

The SCB feature exposes multiple _safe_ ways to backup and recover a channel. We expect only one of them to be used primarily by unsophisticated end users, but have provided other mechanisms for more advanced users and business that already script `lnd` via the gRPC system. 

First, the **easiest method for backup+recovery**. `lnd` now will maintain a **`channels.backup`** file in the _same_ location that we store all the other files. Users will *at any time* be able to safely copy and backup this file. Each time a channel is opened or closed, `lnd` will update this file with the latest channel state. Users can use scripts to detect changes to the file, and upload them to their backup location. Something like `fsnotify` can notify a script each time the file changes to be backed up once again. The file is encrypted using an AEAD scheme, so it can safely be stored plainly in cloud storage, your SD card, etc. The file uses a special format and can be used to import via any of the recovery methods described below. 

The second mechanism is via the new `SubscribeChanBackups` _steaming gRPC method_. Each time an channel is opened or closed, you'll get a new notification with all the `chanbackup.Single` files (described below), and a single `chanbackup.Multi` that contains all the information for all channels. 

Finally, users are able to request a backup of a single channel, or all the channels via the cli and RPC methods.  Here's an example, of a few ways users can obtain backups:
```
⛰ lncli --network=simnet exportchanbackup --chan_point=29be6d259dc71ebdf0a3a0e83b240eda78f9023d8aeaae13c89250c7e59467d5:0
{
    ""chan_point"": ""29be6d259dc71ebdf0a3a0e83b240eda78f9023d8aeaae13c89250c7e59467d5:0"",
    ""chan_backup"": ""02e7b423c8cf11038354732e9696caff9d5ac9720440f70a50ca2b9fcef5d873c8e64d53bdadfe208a86c96c7f31dc4eb370a02631bb02dce6611c435753a0c1f86c9f5b99006457f0dc7ee4a1c19e0d31a1036941d65717a50136c877d66ec80bb8f3e67cee8d9a5cb3f4081c3817cd830a8d0cf851c1f1e03fee35d790e42d98df5b24e07e6d9d9a46a16352e9b44ad412571c903a532017a5bc1ffe1369c123e1e17e1e4d52cc32329aa205d73d57f846389a6e446f612eeb2dcc346e4590f59a4c533f216ee44f09c1d2298b7d6c""
}

⛰ lncli --network=simnet exportchanbackup --all
{
    ""chan_points"": [
        ""29be6d259dc71ebdf0a3a0e83b240eda78f9023d8aeaae13c89250c7e59467d5:0""
    ],
    ""multi_chan_backup"": ""fd73e992e5133aa085c8e45548e0189c411c8cfe42e902b0ee2dec528a18fb472c3375447868ffced0d4812125e4361d667b7e6a18b2357643e09bbe7e9110c6b28d74f4f55e7c29e92419b52509e5c367cf2d977b670a2ff7560f5fe24021d246abe30542e6c6e3aa52f903453c3a2389af918249dbdb5f1199aaecf4931c0366592165b10bdd58eaf706d6df02a39d9323a0c65260ffcc84776f2705e4942d89e4dbefa11c693027002c35582d56e295dcf74d27e90873699657337696b32c05c8014911a7ec8eb03bdbe526fe658be8abdf50ab12c4fec9ddeefc489cf817721c8e541d28fbe71e32137b5ea066a9f4e19814deedeb360def90eff2965570aab5fedd0ebfcd783ce3289360953680ac084b2e988c9cbd0912da400861467d7bb5ad4b42a95c2d541653e805cbfc84da401baf096fba43300358421ae1b43fd25f3289c8c73489977592f75bc9f73781f41718a752ab325b70c8eb2011c5d979f6efc7a76e16492566e43d94dbd42698eb06ff8ad4fd3f2baabafded""
}

⛰ lncli --network=simnet exportchanbackup --all --output_file=channels.backup

⛰ ll channels.backup
-rw-r--r--  1 roasbeef  staff   381B Dec  9 18:16 channels.backup
```


SCBs can be viewed as a last ditch method for recovering funds from channels due to total data loss. In future releases, we plan to implement methods that require more sophistication with respect to operational architecture, yet allow for _dynamic_ backups. Even with these dynamic backups in place, SCBs will still serve as a fallback method if a dynamic back up may be known to be out of date, or in a partial state of consistency. 

Future protocol changes will make the SCB recovery method more robust, as it will no longer rely on the remote peer to send the normal channel reestablishment handshake upon reconnection. Instead, given the SCB, `lnd` will be able to find the closing output directly on the chain after a force close by the remote party. 

For further details w.r.t the lower level implementation of SCBs as well as the new RPC calls, users can check out the new `recovery.md` file which goes over methods to recover both on-chain and off-chain funds from `lnd`. 

### New Channel Status Manager 

Within the protocol, nodes can mark a channel as enabled or disabled. A dsiable channel signals to other nodes that the channel isn’t to be used for routing for whatever reason. This allows clients to void these channels during path finding, and also lets routing nodes signal any faults in a channel to other nodes allowing them to ignore them and possibly remove them from their graph view. `lnd` has a system to automatically detect when a channel has been inactive for too long, and disable it, signalling to other peers that they can ignore it when routing. The system will also eventually re-enable a channel if it has been stable for long enough. 

The prior version of sub-system had a number of flaws which would cause channels to be excessively enabled/disabled, causing `ChannelUpdate` spam in the network. [In this release, this system has been revamped, resulting in a much more conservative, stable channel status manager](https://github.com/lightningnetwork/lnd/pull/2411). We’ll now only disable channels programmatically, and channels will only be re-enabled once the peer is stable for a long enough period of time. This period of time is now configurable. 

## Server and P2P Improvements 

The max reconnection [back off interval is now configurable](https://github.com/lightningnetwork/lnd/pull/2007). We cap this value by default to ensure we don’t wait an eternity before attempting to reconnect to a peer. However, on laptops and mobile platforms, users may want to value to be much lower to ensure they maintain connectivity in the face of roaming, or wi-ifi drops. The new field is: `--maxbackoff=`. A new [complementary `--minbackoff` field](https://github.com/lightningnetwork/lnd/pull/2417) has also been added. 

[We’ll now attempt to retry when faced with a write timeout rather than disconnect the peer immediately](https://github.com/lightningnetwork/lnd/pull/2819). This serves to generally make peer connections more stable to/from `lnd`. 

Users operating larger `lnd` nodes may find that at times restarts can be rather load heavy due to the rapid burst of potentially hundreds of new p2p connections. In this new version of `lnd`, we’ve added a new flag (`--stagger-initial-reconnect`) to space out these connection attempts by several seconds, rather than trying to establish all the connections at once on start up. 

## Performance Enhancements  

### Outgoing Message Queue Prioritization

[A new distinct queue of gossip messages has been added to the outgoing write queue system within `lnd`](https://github.com/lightningnetwork/lnd/pull/2690). We’ll now maintain two distinct queues: messages for gossip message, and everything else. Upon reconnection, certain messages are time sensitive such as sending the Channel Reestablishment message which causes a channel to shift from active to inactive. This queue optimization also means that making new channels, or updating existing channels will no longer be blocked by any outgoing gossip traffic, improving the quality of service. 

### Batched Pre-Image Writing in the HTLCSwitch

This new release will now batch writes for witnesses discovered in HTLC forwarding. At the same time, we correct a nuanced consistency issue related to a lack of synchronization with the channel state machine. Naively, forcing the individual preimage writes to be synchronized with the link incurs a heavy performance penalty (about 80% in profiling). Batching these allows us to minimize the number of db transactions required to write the preimages, allowing us to reinsert the batched write into the link's critical path and resolve the possible inconsistency. In fact, the benchmarks actually showed a slight performance improvement, even with the extra write in the critical path.

### Unified Global SigPool 

`lnd` uses a pool of goroutines that are tasked with signing and validating commitment and HTLC signatures for new channel updates. This pool allows us to process these commitment updates in parallel, rather than in a serial manner which would reduce payment throughput. [Rather than using a single `SigPool` per channel, we now use a single global `SigPool`](https://github.com/lightningnetwork/lnd/pull/2329_. With this change, we ensure that as the number of channels grows, the number of goroutines idling in the sigPool stays constant. It's the case that currently in the daemon, most channels are likely inactive, with only a handful actually consistently carrying out channel updates. As a result, this change should reduce the amount of idle CPU usage, as we have less active goroutines in select loops.

### Read and Write Buffer Pools 

In this release, we implement a write buffer pool for LN peers. Previously, each peer object would embed a 65KB byte array, which is used to serialize messages before writing them to the wire. As a result, every new peer causes a large memory allocation, which places unnecessary burden on the garbage collector when faced with short-lived or flapping peers. We’ll now use a buffer pool, that dynamically grows and shrinks based on the demand for write buffers corresponding to active peers. This greatly helps when there is a high level of churn in peer activity, or even if there is a single one flapping peer.

Similarly, whenever a new peer would connect, we would allocate a 65KB+16 byte array to use as a read buffer for each connection object. The read buffer stores the ciphertext and MAC read from the wire, and used to decrypt and then decode messages from the peer. Because the read buffer is implemented at the connection-level, as opposed to the peer-level like write buffers, simply opening a TCP connection would cause this allocation. Therefore peers that send no messages, or do not complete the handshake, will add to this memory overhead even if they are released promptly. To avoid this, we now use a similar read buffer pool to tend towards a steady working set of read buffers which drastically reduces memory usage.

Finally, we introduce a set of read/write worker pools, which are responsible for scheduling access to the read/write buffers in the underlying buffer pools.  With the read and write pools, we modify the memory requirements to be at most linear in the number of specified workers. More importantly, these changes completely decouple read and write buffer allocations from the peer/connection lifecycle, allowing `lnd` to tolerate flapping peers with minimal overhead.

Nodes that have a large number of peers will see the most drastic benefit. In testing, we were able to create stable connections (w/o gossip queries) to over 900 unique nodes, all while keeping `lnd`'s total memory allocations due to read/write buffers under 15 MB. This configuration could have easily connected to more nodes, though that was all that reachable via the bootstrapper.
This same test would have used between 90-100MB on master, and continues to grow as more connections are established or peers flap if the garbage collector could not keep up. In contrast, the memory used with read/write pools remains constant even as more peers are established.

## Sweeper

A new sweeper subsystem has been introduced. The sweeper is responsible for sweeping mature on-chain outputs back to the wallet. It does so by combining sets of outputs in a single transaction per block. It takes care not to sweep outputs that have a negative yield at the current fee estimate. Those will be left until the fee estimate has decreased enough. Some outputs may still be contested and possibly swept by the remote party. The sweeper is aware of this and properly reports the outcome of the sweep for an output to other subsystems. [sweep: create sweeper](https://github.com/lightningnetwork/lnd/pull/1960). 

The new Sweeper sub-system is the start of a generalized transaction batching engine within `lnd`. As is today, it will batch _all_ sweeps (HTLC timeouts, commitment sweeps, CSV sweeps) across `lnd` into a single transaction per block. In the future, the sweeper will be generalized in order to implement fee bumping techniques like RBF and CPFP in a single logical unit. Additionally, the existence of such a batching engine will allow us to batch all transaction daemon wide into a single transaction, which will allow us to implement block saving features such as: opening multiple channels in a single transaction, combining cross channel splice in/outs, closing out one channel in order to open a new channel or fulfill a request payment.  payment. 

Overtime the sweeper will also grow to obsolete the existing `UtxoNursery` as sweep requests will become more distributed (an HTLC asks to be swept rather than the nursery sweeping when the time is right). 

## Graph Sync Improvements

With the recent rapid growth of the network, it almost became unbearable for nodes to sync their routing table with their peers due to the huge number of updates/channels being announced. We’ve made significant improvements towards addressing this issue with the [introduction of the `SyncManager`](https://github.com/lightningnetwork/lnd/pull/2740). Nodes will now only receive new graph updates from 3 peers by default. This number has been exposed as a CLI flag, `—numgraphsyncpeers`, and can be tuned for light clients and routing nodes for bandwidth savings. In testing, we’ve seen over a 95% bandwidth reduction as a result of these changes.

This version also [reduces the batch size of channels requested via `QueryShortChanIDs` from 8000 to 500](https://github.com/lightningnetwork/lnd/pull/2905), leading to more stability in large or initial syncs. The previous version was found to invite disconnections from the remote peer once the receiver had received the first few thousand messages. The reduced batch size prevents us from overflowing our own internal queues for gossip messages, and ensuring the remote peer doesn’t interpret this as jammed connection.

## Goodbye Zombie Channels

Within the last couple months, we started to experience a large number of zombie channels in the network being gossiped between nodes. A zombie channel is a channel that is still open, but hasn’t been updated for 2 weeks. This issue was also present on testnet a few years back, so we’ve finally addressed the issue for
good. [Nodes will now maintain an index of zombie channels which they can query to determine whether they should process/forward announcements for an arbitrary channel](https://github.com/lightningnetwork/lnd/pull/2777/).

Using this index, we will also refrain from [requesting channels we know to be zombies from peers that think otherwise](https://github.com/lightningnetwork/lnd/pull/2893). At the time of writing, there are roughly 3.3k zombie channels on mainnet. This optimization saves us from requesting 10k individual messages, amounting to roughly 3MB when attempting historical syncs with peers presenting `lnd` with zombie channels.

## On-Chain Commitment and HTLC Handling 

[A bug has been fixed that would previously cause an HTLC which was settled _on chain_ to not properly be marked as _settled_.](https://github.com/lightningnetwork/lnd/pull/2075). 

[An off-by-one-error has been fixed in the contract court when handling a remote commitment close due to a DLP execution instance](https://github.com/lightningnetwork/lnd/pull/2766). This ensures that funds will now properly be swept in the case of a force close due to DLP wherein the remote party is one state ahead of ours. Users that ran into this issue in the wild should find that the dispatch logic is re-executed, resulting in on-chain funds properly being swept back into the wallet. 

## Bitcoind Spend Hint Bug Fix

Fixes a bug that would cause bitcoind backends to perform historical rescans on successive restarts, even if the first rescan completed and did not find a spending transaction. Affected nodes will have to complete one more rescan after upgrading before symptoms will disappear. In more severe cases, this will save tens of thousands of getblocks calls to the backend on each restart.

## Autopilot Architecture Revamp

In this release, as a prep for more advanced autopilot heuristics in a future release, we’ve completely revamped the way the system works. Before this release, the autopilot “agent” was _directive_ based, meaning that it when queried, it would simply say “connect to these nodes”. This detective based suggestion was simple, yet limiting in that: it didn’t easily lend to combining multiple heuristics and using only the dertive model, there isn’t a clear way of comparing to distinct heuristics. 

The _new_ system instead implements a *scoring* based agent. Rather than simply suggesting a set of node to connect to, the agent will now return a set of _scores_ for a target, or all peers within the network. This score is then incorporated into the main channel selection loop, adding a bit of jitter to ensure diversity. The scoring based system really shines when you start to consider adding multiple heuristics that work in tandem (connectivity optimized, uptime optimized, reliability optimized, redundancy optimized, etc). With the new scoring system, it’s now possible to create a new heuristics which is actually a combination of several _sub heuristics_. As an example, we’ve created a new [`WeightedCombAttachment`](https://github.com/lightningnetwork/lnd/blob/master/autopilot/combinedattach.go#L20) heuristics that outputs a linear combination of the scores of a set of registered hueirticis. 

This new scoring based system will pave the road for more advanced autopilot heuristics which may make certain trade offs in order to target specific use cases like: mobile/laptop oriented, net receiver (merchant, etc) optimized, routing network robustness (min-cut and the like). As a bonus, the new system also makes it much easier to add a new heuristic as the new interface has a [ _single_ method: `NodeScores`](https://github.com/lightningnetwork/lnd/blob/master/autopilot/interface.go#L125): given the graph, target channel size, and existing set of node channel it should return a score for all non-filtered out nodes. 

## Penalize small channels for autopilot scoring
With rearchitechting autopilot to be scoring based, the default heuristic (_prefattach_) will now [decrease the score of nodes having a large number of small channels.](https://github.com/lightningnetwork/lnd/pull/2797) 

## New Sweep All Coins Command 

A new argument has been added to the `lncli sendcoins` interface to allow users to _sweep all coins_ from `lnd`'s wallet to a target on-chain address. An example run of the new command looks something like: 
```
⛰   lncli --network=simnet sendcoins --sweepall --addr=sb1qsy8772pkfucsvmuyw82gexyd4u69pvve9w98v3
{
    ""txid"": ""1931f6653ecb2add24e00ce03d6a66ce705ebf633bfffb2b67674000d5f3d5d4""
}
```

For those using the RPC interface, the new field to set is `send_all`, which is a boolean that indicates the amount is left blank, and all coins should be sent to that target address. 

## RPC Interface Enhancements and Fixes

The default number of routes returned from [`QueryRoutes` is now 10 (prior the default was unspecified)](https://github.com/lightningnetwork/lnd/pull/2128). 

[`QueryRoutes` with used with more than one route target has been deprecated](https://github.com/lightningnetwork/lnd/pull/2497) and will be phased out in future versions of `lnd`. In order to make up for the lost functionality, we’ve added a series of new arguments to the RPC call that allow users to ignore an arbitrary set of edges or vertexes. This new feature makes it easier to implement things like rebalancing externally, as you can know modify the _source node_ for path finding, which can be used to find a path from node A to B, then back from B to A that _must_ travel in/out of a specific edge set. 

`VerifyMessage` and `SignMessage` now properly [expose a REST endpoint](https://github.com/lightningnetwork/lnd/pull/2148).  

The [response to `SendPayment` now also includes the payment hash](https://github.com/lightningnetwork/lnd/pull/2033) in order to make it easy to associate a success or failure amongst several payments when using the streaming RPC. 

A number of fixes to the request validation within the RPC server have been made. These changes make the server more defensive w.r.t what it accepts from clients. 

Invoices created with the `--private` option (include hop hints to private channels) are [now marked as such on the RPC interface}(https://github.com/lightningnetwork/lnd/pull/2222). 

A new RPC call `ListUnspent` has been added to allow users to examine the current UTXO state of `lnd`. Combined with the new Signer Sub-Server, users can use this to craft arbitrary transactions using `lnd`’s backing keystore. 

[A bug has been fixed that would cause channels that are unconfirmed, but waiting to be closed from being returned via the `PendingChannels` RPC](https://github.com/lightningnetwork/lnd/pull/2248). 

A bug has been fixed that wouldn’t allow users to [expose the REST interface on all network interfaces](https://github.com/lightningnetwork/lnd/pull/2247). 

The [existing `settled` field from the `Invoice` proto is now _deprecated_](https://github.com/lightningnetwork/lnd/pull/2354). Instead, the new `state` field is to be used as it allows us to reflect additional states of invoices (open, settled, cancelled, etc). 

A number of fields in the `Invoice` proto that have never been populated /used have been removed. 

The [name of the network is now exposed in the response of the `GetInfo` RPC](https://github.com/lightningnetwork/lnd/pull/2399). 

[The `UnsettledBalance` field in the `PendingChannels` RPC response is now properly set](https://github.com/lightningnetwork/lnd/pull/2289). 

The `ListChannels` response now [includes a field which denotes if the node is the _iniatitor_ of a channel or not](https://github.com/lightningnetwork/lnd/pull/2473). 

[HTLCs which haven’t yet timed out, are now properly shown in the output of `PendingChannels`](https://github.com/lightningnetwork/lnd/pull/1875). 

[A new `SubscribeChannels` RPC has been added to allow clients to be notified whenever a channel becomes inactive, active, or closed](https://github.com/lightningnetwork/lnd/pull/1988). This is useful for any type of application that would otherwise need to poll the channel state to keep up to date on what channels are active, inactive, or closed.

[Two new address types have been added to the `NewAddress` RPC call](https://github.com/lightningnetwork/lnd/pull/2661). These address types will return the same address until they have been used, then rotate to a new address. These new address types are useful for displaying a new address in UIs without running into “address inflation”. 

[The `getnetworkinfo` RPC](https://github.com/lightningnetwork/lnd/pull/2797)  now also returns the _median channel size_ of the graph. [The average degree output in `GetNetworkInfo` has also been corrected](https://github.com/lightningnetwork/lnd/pull/2832). 

[A bug that would cause the autopilot agent to over-allocate funds](https://github.com/lightningnetwork/lnd/pull/2633)  if multiple channels were opened in parallel has been fixed.

We’ll now [retrieve the `chan_id` of an open channel from the channel database when using the `ListChannels` RPC/`listchannels` lncli command, rather than the graph](https://github.com/lightningnetwork/lnd/pull/2824). If a channel doesn’t have a new update within the last 2 weeks, then it’ll be pruned from the graph, which caused the `chan_id` lookup to fail and result in a `0` value being displayed.

### Sub-Servers

In this new release, we’ve begun the process of slowly evolving the RPC interface via the new _Sub-Server_ system. The gRPC system allows multiple independent _services_ to be registered to the same endpoint. Before this release, `lnd` had one primary service: `Lightning`. All current RPC calls are directed to this unified service. In the early days of `lnd`, this structure emerged organically as many RPCs were added based on speculative future uses, or  primarily for the purposes of testing new features added to the codebase. The result today is one mega interface, without any clear specialization or feature delineation. 

Since the initial release of `lnd`, we’ve received a considerable amount of valuable feedback w..r the RPC interface from developers, businesses, and node operators that use the interface daily. Some of this feedback may require us to extensively re-work core RPC calls like `SendPayment`. Doing so directly in the main service would be disruptive as the calls may change over night, or have their behavior be drastically modified. We consider Sub-Servers to be a solution to this issue as they allow us to recreate a small subset of the existing RPC interface in a concentrated, methodical manner. By being able to start from scratch, we gain more freedom w.r.t crafting the new interface. Additionally, by being forced to examine a smaller subset of the total functionality in a new Sub-Server, we’re able to consolidate existing code, decouple the RPC interface from the rest of `lnd`, and also expose *new* functionality to the RPC interface that may only be tangentially related to Lightning. 

As of this release, all sub-servers are guarded behind special build flags (`make install -tags=<buildtag>`). The rationale here is that the sub-servers only expose new functionality, so existing users of `lnd` that don’t yet have a need for these new features shouldn’t be burdened with them at runtime. Over time as the interfaces crystalize more, we’ll begin the process of depreciating certain older RPCs in order to promote the newer more design sound Sub-Server RPCs. As a result, the current Sub-Server interfaces should be considered *non final* and subject to change at anytime. Due to their volatile nature, we don’t yet have documentation up at api.lightning.community. On their application development side of things, using a new sub-server is as simple as creating a new gRPC client service with the existing gRPC client connection. 

Sub-Servers also make `lnd` generally more useful as a one-stop shop for any sort of Bitcoin related programming or application as they expose some core interfaces that `lnd` uses across the codebase to accomplish routine tasks. When compiled in, certain sub-servers will also augment `lncli` with a set of _new_ commands. The current set of Sub-Servers (and their respective build tags) include:
   * `ChainNotifier` (`chainrpc`)
   * `WalletKit` (`walletrpc`)
   * `Signer` (`signrpc`)
   * `Invoices` (`invoicesrpc`)
   *  `Autopilot` (`autopilotrpc`)
   * `Router` (`routerrpc`)

The release binaries for `lnd` 0.6 are compiled using the `signrpc`, `walletrpc`, `chainrpc`, and `invoicesrpc` build tags, making them compatible with [Lightning Loop](https://github.com/lightninglabs/loop) services.

#### ChainNotifier Sub-Server

[The `ChainNotifier` Sub-Server](https://github.com/lightningnetwork/lnd/pull/2314) is a utility toolkit responsible for requesting the chain backend for notifications about the tip of the chain, transaction confirmations, and output spends. It also includes support for requesting these notifications for arbitrary output scripts _as well_.

#### WalletKit Sub-Server

[The `WalletKit` Sub-Server](https://github.com/lightningnetwork/lnd/pull/2093) is a utility toolkit that contains method which allow clients to perform common interactions with a wallet such as getting a new address, or sending a transaction. It also includes some supplementary actions such as fee estimation. Combined with the Signer Sub-Server, this lets users create arbitrary transactions (like CoinJoins!) using the existing set of private keys under the control of `lnd`. 

#### Signer Sub-Server

[The `Signer` Sub-Server](https://github.com/lightningnetwork/lnd/pull/2081) exposes the existing [`input.Signer`](https://github.com/lightningnetwork/lnd/blob/master/input/signer.go#L7) interface within `lnd` as an accessible sub-server. The existence of this sub-servers also opens up the possibility of having the actual signer and signing code existing _outside_ of `lnd` taking the form of either a distinct process, or remote server with additional access control mechanisms. 

#### Invoices Sub-Server

The `Invoices` Sub-Sever exposes a number of new ways to interact with invoices that don’t exist in the existing invoice related calls for the main service. A new type of invoice called ‘hodl invoice’ has been added. Instead of immediately locking in and settling the htlc when the payment arrives, the htlc for a hodl invoice is only locked in and not yet settled. At that point, it is not possible anymore for the sender to revoke the payment, but the receiver still can choose whether to settle or cancel the htlc and invoice [htlcswitch: hodl invoice](https://github.com/lightningnetwork/lnd/pull/2022).

The new invoice function `CancelInvoice` has been implemented. `CancelInvoice` can be called on a hodl invoice, but also on a regular invoice. It makes the invoice unpayable [invoices: CancelInvoice](https://github.com/lightningnetwork/lnd/pull/2457).

A last improvement to the invoices subsystem is the ability to subscribe to updates of a single invoice instead of receiving all invoice updates [invoices: add subscribesingleinvoice](https://github.com/lightningnetwork/lnd/pull/2356).

#### Autopilot Sub-Server

[The `Autopilot` Sub-Server](https://github.com/lightningnetwork/lnd/pull/2039) allows users to programatically drive certain aspects of the `autopilot` system. Before this new Sub-Server, the only way to modify the settings of `autopilot` were to modify command line parameters and restart the system. This new Sub-Server allows users to turn autopilot on/off without restarting, and also query the score of a prospective node with the new query interface. 

#### Router Sub-Server

[The `Router` Sub-server](https://github.com/lightningnetwork/lnd/pull/2083) presents a simplified interface for sending payments off-chain, and also getting a fee estimate for potential off-chain payments. In future releases, we’ll begin to revamp the off-chain sending interface in order to give users more control w.r.t when we start/stop attempting to fulfill a payment attempt, and also more transparency w.r.t the state of an initiated off-chain payment. 

## Tor 

`lnd` will now allow a user to access the Tor daemon with `NULL` authentication. Additionally, [it’s now possible to listen on a distinct interface that isn’t localhost](https://github.com/lightningnetwork/lnd/pull/2490) when running in auto hidden service mode. This allows users that are aware of the implications to run in a hybrid mode that accepts both inbound clearnet and hidden service connections. Additionally, users can now listen on an arbitrary interface if they have outbound Tor configured. 

## Neutrino Enhancements

We’ll now start [syncing headers and filter headers as soon as `lnd`’s wallet is created/unlocked](https://github.com/lightningnetwork/lnd/commit/1fe6599fd8694d38cbfd9a73c5e5d31cfea880b4). This greatly improves the user experience by reducing the amount of time to reach a fully synced light client `lnd` instance.

We’ll [reliably broadcast transactions to our bitcoin peers](https://github.com/lightninglabs/neutrino/commit/294dd7579f7a0f68808d19ba44b3e654d3e8bdb6) to ensure they propagate throughout the network.

## Library Enhancements and Multi-Module Support

[This release begins some efforts towards transitioning into a multi-module repository.](https://github.com/lightningnetwork/lnd/pull/2602) This allows specific packages within `lnd` to be used externally without the need of duplicating code or running into import cycles.

The [`ReadElements` and `WriteElements`](https://github.com/lightningnetwork/lnd/pull/2369) methods from `lnwire` are now exposed publicly. This allows any Go program to easily be able to serialize structs/data using the codec described in the BOLT documents. 

## Wallet Bug Fixes and Improvements

[The wallet will no longer rescan from its birthday if it has no UTXOs.](https://github.com/btcsuite/btcwallet/pull/577)

[The wallet will now properly remove transactions from its persistent store that the chain backend deems as
invalid.](https://github.com/btcsuite/btcwallet/pull/597)

[The wallet will now properly remove transaction conflicts from its persistent store.](https://github.com/btcsuite/btcwallet/pull/609)

[The default recovery window has been increased from 250 to 2500](https://github.com/lightningnetwork/lnd/pull/2691). This increase is meant to ensure that the typical wallet is able to complete the regular seed rescan/import without needing to increase the existing default look ahead value.


## Routing

Two new optional restrictions have been added that influence route optimization for sending payments:
* Maximum route cltv time lock. Route optimization will be limited to routes that do not exceed the specified cltv limit [routing: add cltv limit](https://github.com/lightningnetwork/lnd/pull/2640).
* Outgoing channel. Only routes that start with the specified channel will be considered [routing: add outgoing channel restriction](https://github.com/lightningnetwork/lnd/pull/2572).

Furthermore, several new parameters have been added to the `QueryRoutes` rpc call to allow more control over the returned route [lnrpc: deprecate QueryRoutes with more than one route](https://github.com/lightningnetwork/lnd/pull/2497). Requesting multiple routes from `QueryRoutes` based on the k-shortest algorithm has been deprecated. This behaviour can be re-implemented client side using the new `QueryRoutes` parameters.

In the `SendToRoute` rpc call, the ability to specify multiple routes has been deprecated [lnrpc: deprecate SendToRoute with more than one route](https://github.com/lightningnetwork/lnd/pull/2521).

[The default CLTV delta for channels created by `lnd` has been lowered from 144 blocks to 40 blocks](https://github.com/lightningnetwork/lnd/pull/2759). Future versions of `lnd` will begin to automatically modify this parameter based on the sampled fee levels in the chain. 

## Breacharbiter Preparatory Work 

A number of enhancements to the Breacharbiter have been made which are required for the ultimate watch tower implementation. [These changes ensure that `lnd` is able to continue to function if it isn’t the one that ends up sweeping _all_ the outputs](https://github.com/lightningnetwork/lnd/pull/2765) in the case of a breach (the tower might sweep the commitment outputs for example, and lnd sweeps the HTLCs itself). 
  * https://github.com/lightningnetwork/lnd/pull/2430
  * https://github.com/lightningnetwork/lnd/pull/2431 


## Accounting

Improvements have been made to the `PendingChannels` report. Several categories of funds in limbo that were previously unreported have been added to the report [rpc+contractcourt: merge the contractResolver state into the pendingchannels RPC response](https://github.com/lightningnetwork/lnd/pull/1875).

## Changelog

The full list of changes since `0.5.2-beta` can be found here:

* https://github.com/lightningnetwork/lnd/compare/v0.5.2-beta...v0.6-beta

# Contributors (Alphabetical Order)

Adam Gibson
Alex Akselrod 
Alex Bosworth 
Brian Sipple 
Carla Kirk-Cohen
Chris Coverdale
Conner Fromknecht
chokoboko
Cryptcoin Junkey 
cryptagoras 
Erik Ek
Eugene Siegel
Federico Bond
Francisco Calderón
Gfloresechaiz 
Igor Cota 
Jim Posen 
Johan T. Halseth 
John Ng
John Griffith 
Jonathan Cross 
Joost Jager 
Matt Drollette 
Max Kaplan 
Moshe Shababo 
Offer Markovich 
Olaoluwa Osuntokun 
Ondrej Calda 
orbitalturtle 
Otto Suess
Philipp Gillé 
Roei Erez 
Ron Cohen
Sanket Kanjalkar 
Sevastos 
solid-pay
Thomas Braunberger 
Tom Kirkpatrick 
Valentine Wallace
Vincent Woo 
Wilmer Paulino 
Xavi Soler 
Yancy Ribbens 

",49765480
76,False,True,2019-04-11T23:05:31Z,2019-04-12T00:00:52Z,"This release marks a new major release of `lnd` that includes several important bug fixes, numerous performance optimizations, static channel backups (SCB), reduced bandwidth usage for larger nodes, an overhaul of the internals of the autopilot system, and a new batch sweeping sub-system. Due to the nature of some of the bug fixes which were made during the implementation of the new SCB feature, **users are highly encouraged to upgrade to this new version**. 

# Database migrations

This version includes a single migration to modify the message store format, used to send messages to remote peers reliably when attempting to construct channel proofs. The migration should appear as below:

```
2019-04-03 22:35:44.596 [INF] LTND: Version: 0.6.0-beta commit=v0.6-beta-rc4, build=production, logging=default
2019-04-03 22:35:44.596 [INF] LTND: Active chain: Bitcoin (network=mainnet)
2019-04-03 22:35:44.597 [INF] CHDB: Checking for schema update: latest_version=8, db_version=7
2019-04-03 22:35:44.597 [INF] CHDB: Performing database schema migration
2019-04-03 22:35:44.597 [INF] CHDB: Applying migration #8
2019-04-03 22:35:44.597 [INF] CHDB: Migrating to the gossip message store new key format
2019-04-03 22:35:44.597 [INF] CHDB: Migration to the gossip message store new key format complete!
```

# Verifying the Release

In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import the keys that have signed this release if you haven't done so already: 

```
curl https://keybase.io/roasbeef/pgp_keys.asc | gpg --import
```

Once you have his PGP key you can verify the release (assuming `manifest-v0.6-beta-rc4.txt` and `manifest-v0.6-beta-rc4.txt.sig` are in the current directory) with:

```
gpg --verify manifest-v0.6-beta-rc4.txt.sig
```

You should see the following if the verification was successful:

```
gpg: assuming signed data in 'manifest-v0.6-beta-rc4.txt'
gpg: Signature made Thu Apr 11 16:36:48 2019 PDT
gpg:                using RSA key F8037E70C12C7A263C032508CE58F7F8E20FD9A2
gpg: Good signature from ""Olaoluwa Osuntokun <laolu32@gmail.com>"" [ultimate]
```

That will verify the signature on the main manifest page which ensures integrity and authenticity of the binaries you've downloaded locally. Next, depending on your operating system you should then re-calculate the `sha256` sum of the binary, and compare that with the following hashes (which are included in the manifest file):

```
b5fd7f1f0fb2d15ea7733093891fec0b0da2a8559b3f8af35d9b90e7e9f1f88d  lnd-darwin-386-v0.6-beta-rc4.tar.gz
21bf54da68ff0274c9533c42960ede68bfbdd1c0d6731f98a4840581c373ef82  lnd-darwin-amd64-v0.6-beta-rc4.tar.gz
a91aba806048be5cb0edc832592628770c4a9551b1b0fa5929379e0e84697f13  lnd-dragonfly-amd64-v0.6-beta-rc4.tar.gz
b7e6061a80280fe410b0b89936c4aae1bb710ad5d2c12e753458d15e03315650  lnd-freebsd-386-v0.6-beta-rc4.tar.gz
0257b8a370966e8b4a811025bf8f7ef4db0bd41b3b5b261b7db32c8374d50bcd  lnd-freebsd-amd64-v0.6-beta-rc4.tar.gz
7db9bb741d6ff2f7eeb8971157145a4fcee448fb32410eff62bbc7a74eb5ab27  lnd-freebsd-arm-v0.6-beta-rc4.tar.gz
3af9247ac71da98db8690dcf1f2b7c3e041a05fe557c00dd25116e114851224b  lnd-linux-386-v0.6-beta-rc4.tar.gz
e03680698dc980885f2aa794953b8abffb0b672e2baf042d6deed62ecd8bfd26  lnd-linux-amd64-v0.6-beta-rc4.tar.gz
43c86a8fd50dc54d942bc85883202396da063780c249769f7b97b2159e8d5630  lnd-linux-arm64-v0.6-beta-rc4.tar.gz
92b61e47c6fa741b1f3ff7507e1fe8c540d87ece272b5b3b1d7104228ce15c7a  lnd-linux-armv6-v0.6-beta-rc4.tar.gz
3ed4b5e54afb6bf083a9693058dbf7d490e15837da5e5dc49ba06bfb942a1312  lnd-linux-armv7-v0.6-beta-rc4.tar.gz
41c96d503eb7f166b95963a3d0c25e39ad43e4719ce1b61f07481b96e4adf6c5  lnd-linux-mips64-v0.6-beta-rc4.tar.gz
fe3a4fd2ad36c1cb5aa2bbc6dcaca67cbe22fa3bc40d2494c55a6713dd1ccc31  lnd-linux-mips64le-v0.6-beta-rc4.tar.gz
f910d790956dd6db56b0fb4f08e88eff3453cc4eccac974f9cbb5dccdde794ec  lnd-linux-ppc64-v0.6-beta-rc4.tar.gz
b9591ee4d92811d3e5a6a1c7162788acb53000087db535ec53b945c2204cc42c  lnd-netbsd-386-v0.6-beta-rc4.tar.gz
4f66044356d144face2687c80a09b63860b949f874a1e80d6abdab1106bdbbf3  lnd-netbsd-amd64-v0.6-beta-rc4.tar.gz
2b9055ddd3686ebe3eb266a95fa6231319b9c29cf130b8ab8513c3af48e5158f  lnd-openbsd-386-v0.6-beta-rc4.tar.gz
8f900a1fab45aaabbee9ff50ce2140ae8f36f14e84ad4a2d56d5c50ebfcaba84  lnd-openbsd-amd64-v0.6-beta-rc4.tar.gz
0befbe91617e837287f391f08f374a8ac0b88b0770c5b1a79eaa4987fe334fe0  lnd-source-v0.6-beta-rc4.tar.gz
4ec02a37c7fd923f7f0114f889a1b6d042617e9dc870d1f42a31ef0caff1ae84  lnd-windows-386-v0.6-beta-rc4.zip
22545a7c5db140e4e42ea658befd38ea8d422d909e7811196e18308870ec5aae  lnd-windows-amd64-v0.6-beta-rc4.zip
9880b8643c3fc1cfce755cec8329e6a3372664e91bce5ae2cf2dfe7aba325d2d  vendor.tar.gz
```

One can use the `shasum -a 256 <file name here>` tool in order to re-compute the `sha256` hash of the target binary for your operating system. The produced hash should be compared with the hashes listed above and they should match *exactly*.

Finally, you can also verify the _tag_ itself with the following command:

 ```
git verify-tag v0.6-beta-rc4
```

# Building the Contained Release 

With this new version of `lnd`, we've modified our release process to ensure the bundled release is now _fully self contained_. As a result, with only the attached payload with this release, users will be able to rebuild the target release themselves without having to fetch any of the dependencies. Note that at this stage, binaries aren't yet fully reproducible (even with `go modules`). This is due to the fact that by default, [Go will include the full directory path where the binary was built in the binary itself](https://github.com/golang/go/issues/16860). As a result, unless your file system exactly mirrors the machine used to build the binary, you'll get a different binary, as it includes artifacts from your local file system. This will be fixed in `go1.13`, and before then we may modify our release system to do this automatically. 

In order to re-build from scratch, assuming that `vendor.tar.gz` and `lnd-source-v0.6-beta-rc4.tar.gz` are in the current directory:
```
tar -xvzf vendor.tar.gz
tar -xvzf lnd-source-v0.6-beta-rc4.tar.gz
GO111MODULE=on go install -v -mod=vendor -ldflags ""-X github.com/lightningnetwork/lnd/build.Commit=v0.6-beta""
GO111MODULE=on go install -v -mod=vendor -ldflags ""-X github.com/lightningnetwork/lnd/build.Commit=v0.6-beta"" ./cmd/lncli
```

The `-mod=vendor` flag tells the `go build` command that it doesn't need to fetch the dependencies, and instead, they're all enclosed in the local vendor directory. 

Additionally, it's now possible to use the [enclosed `release.sh` script to bundle a release for a _specific_ system like so](https://github.com/lightningnetwork/lnd/pull/2191): 

```
LNDBUILDSYS=""linux-arm64 darwin-amd64"" ./release.sh
```

The `release.sh` script [will now also properly include the commit hash once again](https://github.com/lightningnetwork/lnd/pull/2400), as a regression caused by a change to the internal build system has been fixed. 

 ⚡️⚡️⚡️ OK, now to the rest of the release notes! ⚡️⚡️⚡️

# Release Notes

## Protocol and Cross-Implementation Compatibility Fixes 

We’ll now [properly validate our own announcement signatures](https://github.com/lightningnetwork/lnd/pull/2030) for `NodeAnnouncements` before writing them to disk and propagating them to other peers. 

A [bug has been fixed causing us to send an `FinalFailExpiryTooSoon` error rather than a `FinalFailIncorrectCltvExpiry`](https://github.com/lightningnetwork/lnd/pull/2335) when the last HTLC of a route has an expiration height that is deemed too soon by the final destination of the HTLC. 

[Aliases received on the wire are now properly validated. Additionally, we’ll no longer disconnect peers that send us invalid aliases](https://github.com/lightningnetwork/lnd/pull/2412).

[A bug has been fixed that would at times cause commitments to desynchronize in the face of multiple concurrent updates that included an `UpdateFee` message](https://github.com/lightningnetwork/lnd/pull/2397). The fix generalizes the existing commitment state machine logic to treat an `UpdateFee` message as we would any other `Update*` messages. 

We’ll now[ _reject_ funding requests that require an unreasonable confirmation depth](https://github.com/lightningnetwork/lnd/pull/2275) before the channel can be used. 

We’ll now [space out our broadcast batches more](https://github.com/lightningnetwork/lnd/pull/2538) in order to save bandwidth and consolidate more updates behind a single batch. 

[We’ll now require all peers we connect to, to have the DLP (Data Loss Protection) bit set](https://github.com/lightningnetwork/lnd/pull/2500). This is required for the new SCB (Static Channel Backups) to function properly. 

For private channels, [we’ll now always resend the latest `ChannelUpdate` to the remote peer on reconnecting](https://github.com/lightningnetwork/lnd/pull/1595). This update is required to properly make invoices with hop hints which are required for receiving over a non-advertised channel. 

## Reject and Channel Caches

[A number of internal caches have been added](https://github.com/lightningnetwork/lnd/pull/2847) to reduce memory idle memory usage with a large number of peers, and also reduce idle CPU usage due to stale channel updates. 


In this release, `lnd` now maintains a small reject cache for detecting stale ChannelAnnouncment and ChannelUpdate messages from its peers. Prior versions of `lnd` would perform a database lookup for each incoming messages, which produced a huge amount of contention under load and as the channel graph exploded.

The reject cache maintains just 17 bytes per edge, and easily holds today's graph in memory. Users on low power devices or with a large number of peers will benefit immensely from `lnd`'s improved ability to filter gossip traffic for the latest information and clear large backlogs received from their peers.

The number of items in the cache is configurable using the `--caches.reject-cache-size` flag. The default value of 50,000 comfortably fits all known channels in the reject cache, requiring 1.2MB.

Additionally, we now maintain a separate channel cache, which contains in-memory copies of ChannelAnnouncements, ChannelUpdates, and NodeAnnouncements for a given channel. This cache is used to satisfy queries in hot paths of our peers’ gossip queries, allow us to serve more responses from memory and perform fewer database reads and allocations in deserialization. 

The size of the channel cache is also configurable via the `--caches.chan-cache-size` flag. The default value of 20,000 stores about half of all known channels in memory and constitutes about 40MB.


## Graceful Shutdown via `SIGTERM`

It was discovered that prior versions of `lnd` didn’t attempt to catch the `SIGTERM` signal to execute a graceful shutdown. When possible, users should prefer to shutdown `lnd` gracefully via either `SIGTERM` or `SIGINT` to ensure the database is closed and any outstanding transactions committed in order to avoid database corruption. Commonly used process management systems such as Docker or systemd typically send `SIGTERM`, then wait for a period of time to allow the process to respond before forcefully killing the process. Before this release, `lnd` would always be forcefully killed by these platforms, rendering it unable to properly execute a graceful shutdown. 

[This new release of `lnd` will now properly catch these signals to ensure that we’re more likely to be able to execute a graceful shutdown](https://github.com/lightningnetwork/lnd/pull/2842). We believe that many reports of partial database corruption typically reported by those running on Raspberry Pi’s should be addressed by this change. 

## Static Channel Backups

In this release, we’ve implemented a new safe scheme for static channel backups (SCB's) for `lnd`. We say _safe_, as care has been taken to ensure that there are no foot guns in this method of backing up channels, vs doing things like `rsync`ing or copying the `channel.db` file periodically. Those methods can be dangerous as one never knows if they have the latest state of a channel or not. Instead, we aim to provide a simple safe instead to allow users to recover the settled funds in their channels in the case of partial or complete data loss. The backups themselves are encrypted using a key derived from the user's seed, this way we protect the privacy of the users channels in the back up state, and ensure that a random node can't attempt to import another user's channels. WIth this backup file, given their **seed and the latest back up file**, the user will be able to recover _both_ their on-chain funds, and also funds that are fully settled within their channels. By ""fully settled"" we mean funds that are in the base commitment outputs, and not HTLCs. We can only restore these funds as right after the channel is created, we have all the data required to make a backup. 

We call these “static” backups, as they only need to be obtained _once_ for a given channel and are valid until the channel has been closed. One can view this backup as a final method of recovery in the case of total data loss. It’s important to note that during recovery the channels **must be closed in order to recover the funds fully**. This set up ensures that there’s no way to incorrectly uses an SCB that would result in broadcast of a revoked commitment state. [Recovery documentation for both on-chain and off-chain coins can be found here](https://github.com/lightningnetwork/lnd/blob/docs/recovery.md). 

### Backup + Recovery Methods 

The SCB feature exposes multiple _safe_ ways to backup and recover a channel. We expect only one of them to be used primarily by unsophisticated end users, but have provided other mechanisms for more advanced users and business that already script `lnd` via the gRPC system. 

First, the **easiest method for backup+recovery**. `lnd` now will maintain a **`channels.backup`** file in the _same_ location that we store all the other files. Users will *at any time* be able to safely copy and backup this file. Each time a channel is opened or closed, `lnd` will update this file with the latest channel state. Users can use scripts to detect changes to the file, and upload them to their backup location. Something like `fsnotify` can notify a script each time the file changes to be backed up once again. The file is encrypted using an AEAD scheme, so it can safely be stored plainly in cloud storage, your SD card, etc. The file uses a special format and can be used to import via any of the recovery methods described below. 

The second mechanism is via the new `SubscribeChanBackups` _steaming gRPC method_. Each time an channel is opened or closed, you'll get a new notification with all the `chanbackup.Single` files (described below), and a single `chanbackup.Multi` that contains all the information for all channels. 

Finally, users are able to request a backup of a single channel, or all the channels via the cli and RPC methods.  Here's an example, of a few ways users can obtain backups:
```
⛰ lncli --network=simnet exportchanbackup --chan_point=29be6d259dc71ebdf0a3a0e83b240eda78f9023d8aeaae13c89250c7e59467d5:0
{
    ""chan_point"": ""29be6d259dc71ebdf0a3a0e83b240eda78f9023d8aeaae13c89250c7e59467d5:0"",
    ""chan_backup"": ""02e7b423c8cf11038354732e9696caff9d5ac9720440f70a50ca2b9fcef5d873c8e64d53bdadfe208a86c96c7f31dc4eb370a02631bb02dce6611c435753a0c1f86c9f5b99006457f0dc7ee4a1c19e0d31a1036941d65717a50136c877d66ec80bb8f3e67cee8d9a5cb3f4081c3817cd830a8d0cf851c1f1e03fee35d790e42d98df5b24e07e6d9d9a46a16352e9b44ad412571c903a532017a5bc1ffe1369c123e1e17e1e4d52cc32329aa205d73d57f846389a6e446f612eeb2dcc346e4590f59a4c533f216ee44f09c1d2298b7d6c""
}

⛰ lncli --network=simnet exportchanbackup --all
{
    ""chan_points"": [
        ""29be6d259dc71ebdf0a3a0e83b240eda78f9023d8aeaae13c89250c7e59467d5:0""
    ],
    ""multi_chan_backup"": ""fd73e992e5133aa085c8e45548e0189c411c8cfe42e902b0ee2dec528a18fb472c3375447868ffced0d4812125e4361d667b7e6a18b2357643e09bbe7e9110c6b28d74f4f55e7c29e92419b52509e5c367cf2d977b670a2ff7560f5fe24021d246abe30542e6c6e3aa52f903453c3a2389af918249dbdb5f1199aaecf4931c0366592165b10bdd58eaf706d6df02a39d9323a0c65260ffcc84776f2705e4942d89e4dbefa11c693027002c35582d56e295dcf74d27e90873699657337696b32c05c8014911a7ec8eb03bdbe526fe658be8abdf50ab12c4fec9ddeefc489cf817721c8e541d28fbe71e32137b5ea066a9f4e19814deedeb360def90eff2965570aab5fedd0ebfcd783ce3289360953680ac084b2e988c9cbd0912da400861467d7bb5ad4b42a95c2d541653e805cbfc84da401baf096fba43300358421ae1b43fd25f3289c8c73489977592f75bc9f73781f41718a752ab325b70c8eb2011c5d979f6efc7a76e16492566e43d94dbd42698eb06ff8ad4fd3f2baabafded""
}

⛰ lncli --network=simnet exportchanbackup --all --output_file=channels.backup

⛰ ll channels.backup
-rw-r--r--  1 roasbeef  staff   381B Dec  9 18:16 channels.backup
```


SCBs can be viewed as a last ditch method for recovering funds from channels due to total data loss. In future releases, we plan to implement methods that require more sophistication with respect to operational architecture, yet allow for _dynamic_ backups. Even with these dynamic backups in place, SCBs will still serve as a fallback method if a dynamic back up may be known to be out of date, or in a partial state of consistency. 

Future protocol changes will make the SCB recovery method more robust, as it will no longer rely on the remote peer to send the normal channel reestablishment handshake upon reconnection. Instead, given the SCB, `lnd` will be able to find the closing output directly on the chain after a force close by the remote party. 

For further details w.r.t the lower level implementation of SCBs as well as the new RPC calls, users can check out the new `recovery.md` file which goes over methods to recover both on-chain and off-chain funds from `lnd`. 

### New Channel Status Manager 

Within the protocol, nodes can mark a channel as enabled or disabled. A dsiable channel signals to other nodes that the channel isn’t to be used for routing for whatever reason. This allows clients to void these channels during path finding, and also lets routing nodes signal any faults in a channel to other nodes allowing them to ignore them and possibly remove them from their graph view. `lnd` has a system to automatically detect when a channel has been inactive for too long, and disable it, signalling to other peers that they can ignore it when routing. The system will also eventually re-enable a channel if it has been stable for long enough. 

The prior version of sub-system had a number of flaws which would cause channels to be excessively enabled/disabled, causing `ChannelUpdate` spam in the network. [In this release, this system has been revamped, resulting in a much more conservative, stable channel status manager](https://github.com/lightningnetwork/lnd/pull/2411). We’ll now only disable channels programmatically, and channels will only be re-enabled once the peer is stable for a long enough period of time. This period of time is now configurable. 

## Server and P2P Improvements 

The max reconnection [back off interval is now configurable](https://github.com/lightningnetwork/lnd/pull/2007). We cap this value by default to ensure we don’t wait an eternity before attempting to reconnect to a peer. However, on laptops and mobile platforms, users may want to value to be much lower to ensure they maintain connectivity in the face of roaming, or wi-ifi drops. The new field is: `--maxbackoff=`. A new [complementary `--minbackoff` field](https://github.com/lightningnetwork/lnd/pull/2417) has also been added. 

[We’ll now attempt to retry when faced with a write timeout rather than disconnect the peer immediately](https://github.com/lightningnetwork/lnd/pull/2819). This serves to generally make peer connections more stable to/from `lnd`. 

Users operating larger `lnd` nodes may find that at times restarts can be rather load heavy due to the rapid burst of potentially hundreds of new p2p connections. In this new version of `lnd`, we’ve added a new flag (`--stagger-initial-reconnect`) to space out these connection attempts by several seconds, rather than trying to establish all the connections at once on start up. 

## Performance Enhancements  

### Outgoing Message Queue Prioritization

[A new distinct queue of gossip messages has been added to the outgoing write queue system within `lnd`](https://github.com/lightningnetwork/lnd/pull/2690. We’ll now maintain two distinct queues: messages for gossip message, and everything else. Upon reconnection, certain messages are time sensitive such as sending the Channel Reestablishment message which causes a channel to shift from active to inactive. This queue optimization also means that making new channels, or updating existing channels will no longer be blocked by any outgoing gossip traffic, improving the quality of service. 

### Batched Pre-Image Writing in the HTLCSwitch

This new release will now batch writes for witnesses discovered in HTLC forwarding. At the same time, we correct a nuanced consistency issue related to a lack of synchronization with the channel state machine. Naively, forcing the individual preimage writes to be synchronized with the link incurs a heavy performance penalty (about 80% in profiling). Batching these allows us to minimize the number of db transactions required to write the preimages, allowing us to reinsert the batched write into the link's critical path and resolve the possible inconsistency. In fact, the benchmarks actually showed a slight performance improvement, even with the extra write in the critical path.

### Unified Global SigPool 

`lnd` uses a pool of goroutines that are tasked with signing and validating commitment and HTLC signatures for new channel updates. This pool allows us to process these commitment updates in parallel, rather than in a serial manner which would reduce payment throughput. [Rather than using a single `SigPool` per channel, we now use a single global `SigPool`](https://github.com/lightningnetwork/lnd/pull/2329_. With this change, we ensure that as the number of channels grows, the number of goroutines idling in the sigPool stays constant. It's the case that currently in the daemon, most channels are likely inactive, with only a handful actually consistently carrying out channel updates. As a result, this change should reduce the amount of idle CPU usage, as we have less active goroutines in select loops.

### Read and Write Buffer Pools 

In this release, we implement a write buffer pool for LN peers. Previously, each peer object would embed a 65KB byte array, which is used to serialize messages before writing them to the wire. As a result, every new peer causes a large memory allocation, which places unnecessary burden on the garbage collector when faced with short-lived or flapping peers. We’ll now use a buffer pool, that dynamically grows and shrinks based on the demand for write buffers corresponding to active peers. This greatly helps when there is a high level of churn in peer activity, or even if there is a single one flapping peer.

Similarly, whenever a new peer would connect, we would allocate a 65KB+16 byte array to use as a read buffer for each connection object. The read buffer stores the ciphertext and MAC read from the wire, and used to decrypt and then decode messages from the peer. Because the read buffer is implemented at the connection-level, as opposed to the peer-level like write buffers, simply opening a TCP connection would cause this allocation. Therefore peers that send no messages, or do not complete the handshake, will add to this memory overhead even if they are released promptly. To avoid this, we now use a similar read buffer pool to tend towards a steady working set of read buffers which drastically reduces memory usage.

Finally, we introduce a set of read/write worker pools, which are responsible for scheduling access to the read/write buffers in the underlying buffer pools.  With the read and write pools, we modify the memory requirements to be at most linear in the number of specified workers. More importantly, these changes completely decouple read and write buffer allocations from the peer/connection lifecycle, allowing `lnd` to tolerate flapping peers with minimal overhead.

Nodes that have a large number of peers will see the most drastic benefit. In testing, we were able to create stable connections (w/o gossip queries) to over 900 unique nodes, all while keeping `lnd`'s total memory allocations due to read/write buffers under 15 MB. This configuration could have easily connected to more nodes, though that was all that reachable via the bootstrapper.
This same test would have used between 90-100MB on master, and continues to grow as more connections are established or peers flap if the garbage collector could not keep up. In contrast, the memory used with read/write pools remains constant even as more peers are established.

## Sweeper

A new sweeper subsystem has been introduced. The sweeper is responsible for sweeping mature on-chain outputs back to the wallet. It does so by combining sets of outputs in a single transaction per block. It takes care not to sweep outputs that have a negative yield at the current fee estimate. Those will be left until the fee estimate has decreased enough. Some outputs may still be contested and possibly swept by the remote party. The sweeper is aware of this and properly reports the outcome of the sweep for an output to other subsystems. [sweep: create sweeper](https://github.com/lightningnetwork/lnd/pull/1960). 

The new Sweeper sub-system is the start of a generalized transaction batching engine within `lnd`. As is today, it will batch _all_ sweeps (HTLC timeouts, commitment sweeps, CSV sweeps) across `lnd` into a single transaction per block. In the future, the sweeper will be generalized in order to implement fee bumping techniques like RBF and CPFP in a single logical unit. Additionally, the existence of such a batching engine will allow us to batch all transaction daemon wide into a single transaction, which will allow us to implement block saving features such as: opening multiple channels in a single transaction, combining cross channel splice in/outs, closing out one channel in order to open a new channel or fulfill a request payment.  payment. 

Overtime the sweeper will also grow to obsolete the existing `UtxoNursery` as sweep requests will become more distributed (an HTLC asks to be swept rather than the nursery sweeping when the time is right). 

## Graph Sync Improvements

With the recent rapid growth of the network, it almost became unbearable for nodes to sync their routing table with their peers due to the huge number of updates/channels being announced. We’ve made significant improvements towards addressing this issue with the [introduction of the `SyncManager`](https://github.com/lightningnetwork/lnd/pull/2740). Nodes will now only receive new graph updates from 3 peers by default. This number has been exposed as a CLI flag, `—numgraphsyncpeers`, and can be tuned for light clients and routing nodes for bandwidth savings. In testing, we’ve seen over a 95% bandwidth reduction as a result of these changes.

This version also [reduces the batch size of channels requested via `QueryShortChanIDs` from 8000 to 500](https://github.com/lightningnetwork/lnd/pull/2905), leading to more stability in large or initial syncs. The previous version was found to invite disconnections from the remote peer once the receiver had received the first few thousand messages. The reduced batch size prevents us from overflowing our own internal queues for gossip messages, and ensuring the remote peer doesn’t interpret this as jammed connection.

## Goodbye Zombie Channels

Within the last couple months, we started to experience a large number of zombie channels in the network being gossiped between nodes. A zombie channel is a channel that is still open, but hasn’t been updated for 2 weeks. This issue was also present on testnet a few years back, so we’ve finally addressed the issue for
good. [Nodes will now maintain an index of zombie channels which they can query to determine whether they should process/forward announcements for an arbitrary channel](https://github.com/lightningnetwork/lnd/pull/2777/).

Using this index, we will also refrain from [requesting channels we know to be zombies from peers that think otherwise](https://github.com/lightningnetwork/lnd/pull/2893). At the time of writing, there are roughly 3.3k zombie channels on mainnet. This optimization saves us from requesting 10k individual messages, amounting to roughly 3MB when attempting historical syncs with peers presenting `lnd` with zombie channels.

## On-Chain Commitment and HTLC Handling 

[A bug has been fixed that would previously cause an HTLC which was settled _on chain_ to not properly be marked as _settled_.](https://github.com/lightningnetwork/lnd/pull/2075). 

[An off-by-one-error has been fixed in the contract court when handling a remote commitment close due to a DLP execution instance](https://github.com/lightningnetwork/lnd/pull/2766). This ensures that funds will now properly be swept in the case of a force close due to DLP wherein the remote party is one state ahead of ours. Users that ran into this issue in the wild should find that the dispatch logic is re-executed, resulting in on-chain funds properly being swept back into the wallet. 

## Bitcoind Spend Hint Bug Fix

Fixes a bug that would cause bitcoind backends to perform historical rescans on successive restarts, even if the first rescan completed and did not find a spending transaction. Affected nodes will have to complete one more rescan after upgrading before symptoms will disappear. In more severe cases, this will save tens of thousands of getblocks calls to the backend on each restart.

## Autopilot Architecture Revamp

In this release, as a prep for more advanced autopilot heuristics in a future release, we’ve completely revamped the way the system works. Before this release, the autopilot “agent” was _directive_ based, meaning that it when queried, it would simply say “connect to these nodes”. This detective based suggestion was simple, yet limiting in that: it didn’t easily lend to combining multiple heuristics and using only the dertive model, there isn’t a clear way of comparing to distinct heuristics. 

The _new_ system instead implements a *scoring* based agent. Rather than simply suggesting a set of node to connect to, the agent will now return a set of _scores_ for a target, or all peers within the network. This score is then incorporated into the main channel selection loop, adding a bit of jitter to ensure diversity. The scoring based system really shines when you start to consider adding multiple heuristics that work in tandem (connectivity optimized, uptime optimized, reliability optimized, redundancy optimized, etc). With the new scoring system, it’s now possible to create a new heuristics which is actually a combination of several _sub heuristics_. As an example, we’ve created a new [`WeightedCombAttachment`](https://github.com/lightningnetwork/lnd/blob/master/autopilot/combinedattach.go#L20) heuristics that outputs a linear combination of the scores of a set of registered hueirticis. 

This new scoring based system will pave the road for more advanced autopilot heuristics which may make certain trade offs in order to target specific use cases like: mobile/laptop oriented, net receiver (merchant, etc) optimized, routing network robustness (min-cut and the like). As a bonus, the new system also makes it much easier to add a new heuristic as the new interface has a [ _single_ method: `NodeScores`](https://github.com/lightningnetwork/lnd/blob/master/autopilot/interface.go#L125): given the graph, target channel size, and existing set of node channel it should return a score for all non-filtered out nodes. 

## Penalize small channels for autopilot scoring
WIth rearchitechting autopilot to be scoring based, the default heuristic (_prefattach_) will now ]decrease the score of nodes having a large number of small channels.](https://github.com/lightningnetwork/lnd/pull/2797) 

## New Sweep All Coins Command 

A new argument has been added to the `lncli sendcoins` interface to allow users to _sweep all coins_ from `lnd`'s wallet to a target on-chain address. An example run of the new command looks something like: 
```
⛰   lncli --network=simnet sendcoins --sweepall --addr=sb1qsy8772pkfucsvmuyw82gexyd4u69pvve9w98v3
{
    ""txid"": ""1931f6653ecb2add24e00ce03d6a66ce705ebf633bfffb2b67674000d5f3d5d4""
}
```

For those using the RPC interface, the new field to set is `send_all`, which is a boolean that indicates the amount is left blank, and all coins should be sent to that target address. 

## RPC Interface Enhancements and Fixes

The default number of routes returned from [`QueryRoutes` is now 10 (prior the default was unspecified)](https://github.com/lightningnetwork/lnd/pull/2128). 

[`QueryRoutes` with used with more than one route target has been deprecated](https://github.com/lightningnetwork/lnd/pull/2497) and will be phased out in future versions of `lnd`. In order to make up for the lost functionality, we’ve added a series of new arguments to the RPC call that allow users to ignore an arbitrary set of edges or vertexes. This new feature makes it easier to implement things like rebalancing externally, as you can know modify the _source node_ for path finding, which can be used to find a path from node A to B, then back from B to A that _must_ travel in/out of a specific edge set. 

`VerifyMessage` and `SignMessage` now properly [expose a REST endpoint](https://github.com/lightningnetwork/lnd/pull/2148).  

The [response to `SendPayment` now also includes the payment hash](https://github.com/lightningnetwork/lnd/pull/2033) in order to make it easy to associate a success or failure amongst several payments when using the streaming RPC. 

A number of fixes to the request validation within the RPC server have been made. These changes make the server more defensive w.r.t what it accepts from clients. 

Invoices created with the `--private` option (include hop hints to private channels) are [now marked as such on the RPC interface}(https://github.com/lightningnetwork/lnd/pull/2222). 

A new RPC call `ListUnspent` has been added to allow users to examine the current UTXO state of `lnd`. Combined with the new Signer Sub-Server, users can use this to craft arbitrary transactions using `lnd`’s backing keystore. 

[A bug has been fixed that would cause channels that are unconfirmed, but waiting to be closed from being returned via the `PendingChannels` RPC](https://github.com/lightningnetwork/lnd/pull/2248). 

A bug has been fixed that wouldn’t allow users to [expose the REST interface on all network interfaces](https://github.com/lightningnetwork/lnd/pull/2247). 

The [existing `settled` field from the `Invoice` proto is now _deprecated_](https://github.com/lightningnetwork/lnd/pull/2354). Instead, the new `state` field is to be used as it allows us to reflect additional states of invoices (open, settled, cancelled, etc). 

A number of fields in the `Invoice` proto that have never been populated /used have been removed. 

The [name of the network is now exposed in the response of the `GetInfo` RPC](https://github.com/lightningnetwork/lnd/pull/2399). 

[The `UnsettledBalance` field in the `PendingChannels` RPC response is now properly set](https://github.com/lightningnetwork/lnd/pull/2289). 

The `ListChannels` response now [includes a field which denotes if the node is the _iniatitor_ of a channel or not](https://github.com/lightningnetwork/lnd/pull/2473). 

[HTLCs which haven’t yet timed out, are now properly shown in the output of `PendingChannels`](https://github.com/lightningnetwork/lnd/pull/1875). 

[A new `SubscribeChannels` RPC has been added to allow clients to be notified whenever a channel becomes inactive, active, or closed](https://github.com/lightningnetwork/lnd/pull/1988). This is useful for any type of application that would otherwise need to poll the channel state to keep up to date on what channels are active, inactive, or closed.

[Two new address types have been added to the `NewAddress` RPC call](https://github.com/lightningnetwork/lnd/pull/2661). These address types will return the same address until they have been used, then rotate to a new address. These new address types are useful for displaying a new address in UIs without running into “address inflation”. 

[The `getnetworkinfo` RPC](https://github.com/lightningnetwork/lnd/pull/2797)  now also returns the _median channel size_ of the graph. [The average degree output in `GetNetworkInfo` has also been corrected](https://github.com/lightningnetwork/lnd/pull/2832). 

[A bug that would cause the autopilot agent to over-allocate funds](https://github.com/lightningnetwork/lnd/pull/2633)  if multiple channels were opened in parallel has been fixed.

We’ll now [retrieve the `chan_id` of an open channel from the channel database when using the `ListChannels` RPC/`listchannels` lncli command, rather than the graph](https://github.com/lightningnetwork/lnd/pull/2824). If a channel doesn’t have a new update within the last 2 weeks, then it’ll be pruned from the graph, which caused the `chan_id` lookup to fail and result in a `0` value being displayed.

### Sub-Servers

In this new release, we’ve begun the process of slowly evolving the RPC interface via the new _Sub-Server_ system. The gRPC system allows multiple independent _services_ to be registered to the same endpoint. Before this release, `lnd` had one primary service: `Lightning`. All current RPC calls are directed to this unified service. In the early days of `lnd`, this structure emerged organically as many RPCs were added based on speculative future uses, or  primarily for the purposes of testing new features added to the codebase. The result today is one mega interface, without any clear specialization or feature delineation. 

Since the initial release of `lnd`, we’ve received a considerable amount of valuable feedback w..r the RPC interface from developers, businesses, and node operators that use the interface daily. Some of this feedback may require us to extensively re-work core RPC calls like `SendPayment`. Doing so directly in the main service would be disruptive as the calls may change over night, or have their behavior be drastically modified. We consider Sub-Servers to be a solution to this issue as they allow us to recreate a small subset of the existing RPC interface in a concentrated, methodical manner. By being able to start from scratch, we gain more freedom w.r.t crafting the new interface. Additionally, by being forced to examine a smaller subset of the total functionality in a new Sub-Server, we’re able to consolidate existing code, decouple the RPC interface from the rest of `lnd`, and also expose *new* functionality to the RPC interface that may only be tangentially related to Lightning. 

As of this release, all sub-servers are guarded behind special build flags (`make install -tags=<buildtag>`). The rationale here is that the sub-servers only expose new functionality, so existing users of `lnd` that don’t yet have a need for these new features shouldn’t be burdened with them at runtime. Over time as the interfaces crystalize more, we’ll begin the process of depreciating certain older RPCs in order to promote the newer more design sound Sub-Server RPCs. As a result, the current Sub-Server interfaces should be considered *non final* and subject to change at anytime. Due to their volatile nature, we don’t yet have documentation up at api.lightning.community. On their application development side of things, using a new sub-server is as simple as creating a new gRPC client service with the existing gRPC client connection. 

Sub-Servers also make `lnd` generally more useful as a one-stop shop for any sort of Bitcoin related programming or application as they expose some core interfaces that `lnd` uses across the codebase to accomplish routine tasks. When compiled in, certain sub-servers will also augment `lncli` with a set of _new_ commands. The current set of Sub-Servers (and their respective build tags) include:
   * `ChainNotifier` (`chainrpc`)
   * `WalletKit` (`walletrpc`)
   * `Signer` (`signrpc`)
   * `Invoices` (`invoicesrpc`)
   *  `Autopilot` (`autopilotrpc`)
   * `Router` (`routerrpc`)


#### ChainNotifier Sub-Server

[The `ChainNotifier` Sub-Server](https://github.com/lightningnetwork/lnd/pull/2314) is a utility toolkit responsible for requesting the chain backend for notifications about the tip of the chain, transaction confirmations, and output spends. It also includes support for requesting these notifications for arbitrary output scripts _as well_.

#### WalletKit Sub-Server

[The `WalletKit` Sub-Server](https://github.com/lightningnetwork/lnd/pull/2093) is a utility toolkit that contains method which allow clients to perform common interactions with a wallet such as getting a new address, or sending a transaction. It also includes some supplementary actions such as fee estimation. Combined with the Signer Sub-Server, this lets users create arbitrary transactions (like CoinJoins!) using the existing set of private keys under the control of `lnd`. 

#### Signer Sub-Server

[The `Signer` Sub-Server](https://github.com/lightningnetwork/lnd/pull/2081) exposes the existing [`input.Signer`](https://github.com/lightningnetwork/lnd/blob/master/input/signer.go#L7) interface within `lnd` as an accessible sub-server. The existence of this sub-servers also opens up the possibility of having the actual signer and signing code existing _outside_ of `lnd` taking the form of either a distinct process, or remote server with additional access control mechanisms. 

#### Invoices Sub-Server

The `Invoices` Sub-Sever exposes a number of new ways to interact with invoices that don’t exist in the existing invoice related calls for the main service. A new type of invoice called ‘hodl invoice’ has been added. Instead of immediately locking in and settling the htlc when the payment arrives, the htlc for a hodl invoice is only locked in and not yet settled. At that point, it is not possible anymore for the sender to revoke the payment, but the receiver still can choose whether to settle or cancel the htlc and invoice [htlcswitch: hodl invoice](https://github.com/lightningnetwork/lnd/pull/2022).

The new invoice function `CancelInvoice` has been implemented. `CancelInvoice` can be called on a hodl invoice, but also on a regular invoice. It makes the invoice unpayable [invoices: CancelInvoice](https://github.com/lightningnetwork/lnd/pull/2457).

A last improvement to the invoices subsystem is the ability to subscribe to updates of a single invoice instead of receiving all invoice updates [invoices: add subscribesingleinvoice](https://github.com/lightningnetwork/lnd/pull/2356).

#### Autopilot Sub-Server

[The `Autopilot` Sub-Server](https://github.com/lightningnetwork/lnd/pull/2039) allows users to programatically drive certain aspects of the `autopilot` system. Before this new Sub-Server, the only way to modify the settings of `autopilot` were to modify command line parameters and restart the system. This new Sub-Server allows users to turn autopilot on/off without restarting, and also query the score of a prospective node with the new query interface. 

#### Router Sub-Server

[The `Router` Sub-server](https://github.com/lightningnetwork/lnd/pull/2083) presents a simplified interface for sending payments off-chain, and also getting a fee estimate for potential off-chain payments. In future releases, we’ll begin to revamp the off-chain sending interface in order to give users more control w.r.t when we start/stop attempting to fulfill a payment attempt, and also more transparency w.r.t the state of an initiated off-chain payment. 

## Tor 

`lnd` will now allow a user to access the Tor daemon with `NULL` authentication. Additionally, [it’s now possible to listen on a distinct interface that isn’t localhost](https://github.com/lightningnetwork/lnd/pull/2490) when running in auto hidden service mode. This allows users that are aware of the implications to run in a hybrid mode that accepts both inbound clearnet and hidden service connections. Additionally, users can now listen on an arbitrary interface if they have outbound Tor configured. 

## Neutrino Enhancements

We’ll now start [syncing headers and filter headers as soon as `lnd`’s wallet is created/unlocked](https://github.com/lightningnetwork/lnd/commit/1fe6599fd8694d38cbfd9a73c5e5d31cfea880b4). This greatly improves the user experience by reducing the amount of time to reach a fully synced light client `lnd` instance.

We’ll [reliably broadcast transactions to our bitcoin peers](https://github.com/lightninglabs/neutrino/commit/294dd7579f7a0f68808d19ba44b3e654d3e8bdb6) to ensure they propagate throughout the network.

## Library Enhancements and Multi-Module Support

[This release begins some efforts towards transitioning into a multi-module repository.](https://github.com/lightningnetwork/lnd/pull/2602) This allows specific packages within `lnd` to be used externally without the need of duplicating code or running into import cycles.

The [`ReadElements` and `WriteElements`](https://github.com/lightningnetwork/lnd/pull/2369) methods from `lnwire` are now exposed publicly. This allows any Go program to easily be able to serialize structs/data using the codec described in the BOLT documents. 

## Wallet Bug Fixes and Improvements

[The wallet will no longer rescan from its birthday if it has no UTXOs.](https://github.com/btcsuite/btcwallet/pull/577)

[The wallet will now properly remove transactions from its persistent store that the chain backend deems as
invalid.](https://github.com/btcsuite/btcwallet/pull/597)

[The wallet will now properly remove transaction conflicts from its persistent store.](https://github.com/btcsuite/btcwallet/pull/609)

[The default recovery window has been increased from 250 to 2500](https://github.com/lightningnetwork/lnd/pull/2691). This increase is meant to ensure that the typical wallet is able to complete the regular seed rescan/import without needing to increase the existing default look ahead value.


## Routing

Two new optional restrictions have been added that influence route optimization for sending payments:
* Maximum route cltv time lock. Route optimization will be limited to routes that do not exceed the specified cltv limit [routing: add cltv limit](https://github.com/lightningnetwork/lnd/pull/2640).
* Outgoing channel. Only routes that start with the specified channel will be considered [routing: add outgoing channel restriction](https://github.com/lightningnetwork/lnd/pull/2572).

Furthermore, several new parameters have been added to the `QueryRoutes` rpc call to allow more control over the returned route [lnrpc: deprecate QueryRoutes with more than one route](https://github.com/lightningnetwork/lnd/pull/2497). Requesting multiple routes from `QueryRoutes` based on the k-shortest algorithm has been deprecated. This behaviour can be re-implemented client side using the new `QueryRoutes` parameters.

In the `SendToRoute` rpc call, the ability to specify multiple routes has been deprecated [lnrpc: deprecate SendToRoute with more than one route](https://github.com/lightningnetwork/lnd/pull/2521).

[The default CLTV delta for channels created by `lnd` has been lowered from 144 blocks to 40 blocks](https://github.com/lightningnetwork/lnd/pull/2759). Future versions of `lnd` will begin to automatically modify this parameter based on the sampled fee levels in the chain. 

## Breacharbiter Preparatory Work 

A number of enhancements to the Breacharbiter have been made which are required for the ultimate watch tower implementation. [These changes ensure that `lnd` is able to continue to function if it isn’t the one that ends up sweeping _all_ the outputs](https://github.com/lightningnetwork/lnd/pull/2765) in the case of a breach (the tower might sweep the commitment outputs for example, and lnd sweeps the HTLCs itself). 
  * https://github.com/lightningnetwork/lnd/pull/2430
  * https://github.com/lightningnetwork/lnd/pull/2431 


## Accounting

Improvements have been made to the `PendingChannels` report. Several categories of funds in limbo that were previously unreported have been added to the report [rpc+contractcourt: merge the contractResolver state into the pendingchannels RPC response](https://github.com/lightningnetwork/lnd/pull/1875).

## Changelog

The full list of changes since `0.5.2-beta` can be found here:

* https://github.com/lightningnetwork/lnd/compare/v0.5.2-beta...v0.6-beta

# Contributors (Alphabetical Order)

Adam Gibson
Alex Akselrod 
Alex Bosworth 
Brian Sipple 
Carla Kirk-Cohen
Chris Coverdale
Conner Fromknecht
chokoboko
Cryptcoin Junkey 
cryptagoras 
Erik Ek
Eugene Siegel
Federico Bond
Francisco Calderón
Gfloresechaiz 
Igor Cota 
Jim Posen 
Johan T. Halseth 
John Ng
John Griffith 
Jonathan Cross 
Joost Jager 
Matt Drollette 
Max Kaplan 
Moshe Shababo 
Offer Markovich 
Olaoluwa Osuntokun 
Ondrej Calda 
orbitalturtle 
Otto Suess
Philipp Gillé 
Roei Erez 
Ron Cohen
Sanket Kanjalkar 
Sevastos 
solid-pay
Thomas Braunberger 
Tom Kirkpatrick 
Valentine Wallace
Vincent Woo 
Wilmer Paulino 
Xavi Soler 
Yancy Ribbens 

",49765480
77,False,True,2019-04-05T22:48:43Z,2019-04-05T23:33:22Z,,49765480
78,False,True,2019-04-04T05:53:37Z,2019-04-05T01:53:26Z,,49765480
79,False,False,2019-02-06T22:36:02Z,2019-02-06T22:41:12Z,"This release is minor release of `lnd`, which includes several fixes which increase the stability of `lnd`, and also further increases cross implementation compatibility. There are no new database migrations, or functional RPC changes in this new version. As a result, users should expect a smooth upgrade path with no manual intervention required. 

# Verifying the Release
In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import the keys that have signed this release if you haven't done so already: 
```
curl https://keybase.io/roasbeef/pgp_keys.asc | gpg --import
```

Once you have his PGP key you can verify the release (assuming `manifest-v0.5.2-beta.txt` and `manifest-v0.5.2-beta.txt.sig` are in the current directory) with:
```
gpg --verify manifest-v0.5.2-beta.txt.sig
```

You should see the following if the verification was successful:
```
gpg: assuming signed data in 'manifest-v0.5.2-beta.txt'
gpg: Signature made Thu Feb  7 13:29:16 2019 PST
gpg:                using RSA key F8037E70C12C7A263C032508CE58F7F8E20FD9A2
gpg: Good signature from ""Olaoluwa Osuntokun <laolu32@gmail.com>"" [ultimate]
```

That will verify the signature on the main manifest page which ensures integrity and authenticity of the binaries you've downloaded locally. Next, depending on your operating system you should then re-calculate the `sha256` sum of the binary, and compare that with the following hashes (which are included in the manifest file):
```
8c1d4c50847c665ac277bc8a659b8320f8a053d074a05e99c59f52ac87033968  lnd-darwin-386-v0.5.2-beta.tar.gz
478833d7d4efbbfe5c04f6ce7f5d69f45a163fcca0d4b83a1cba96556e76b916  lnd-darwin-amd64-v0.5.2-beta.tar.gz
8c351581f7887e5eeb9b2fc905e2057e5d1b03d5e58c29acbaeb19fb320cc157  lnd-dragonfly-amd64-v0.5.2-beta.tar.gz
29bc87951a65d8541b355cba3600db5439d70720addfb8c194a5e035fd20ff47  lnd-freebsd-386-v0.5.2-beta.tar.gz
5dfb7eb58039389f14d0c76a5a54f7d890c80f97ad1be3cb7e39a032b19634b5  lnd-freebsd-amd64-v0.5.2-beta.tar.gz
6422cdee33b42b7efcad84fff4c3d6dddd3e6f015057b7b131f6ce262cc2bf61  lnd-freebsd-arm-v0.5.2-beta.tar.gz
ae2858e8ae7b2cfd9b0901032634056f9839bc26d01edc32e26524d2ba386084  lnd-linux-386-v0.5.2-beta.tar.gz
d876ffe5f18431cb0ec97c75e3d8b34a8d2c84e36a0114636a92dabe71340a99  lnd-linux-amd64-v0.5.2-beta.tar.gz
e178ba9aa7b207b5381519c34fd0b24cc74eebb0e1498536cf267988c6946858  lnd-linux-arm64-v0.5.2-beta.tar.gz
f03401fb24ce7a5d4dc498a6f3c88a766c186ac88d7f52791ecb95b5e983ef5c  lnd-linux-armv6-v0.5.2-beta.tar.gz
9adf9f3d0b8a62942f68d75ffe043f9255319209f751dee4eac82375ec0a86cd  lnd-linux-armv7-v0.5.2-beta.tar.gz
e8ef8bd34384b8f9c52198a53034c30f162cccb8b31262b822424d640ad5dfaf  lnd-linux-mips64-v0.5.2-beta.tar.gz
33037ed61c7f0c1939b1233d579fb39aa9261086f75dd24c7172ea3dba1aa63f  lnd-linux-mips64le-v0.5.2-beta.tar.gz
671bf900995eaa9349e869383397580c9f4d6cbe4d5fbb32673c7b217b4fe10f  lnd-linux-ppc64-v0.5.2-beta.tar.gz
3d3b4d117594becd19f89c1ed82a6167b53a8b22a3351e85b5d21045ade821e8  lnd-netbsd-386-v0.5.2-beta.tar.gz
b090505e313a9998d307c06dc340908145167f262746accca6f330f1d74bbfad  lnd-netbsd-amd64-v0.5.2-beta.tar.gz
d720671b9fc253c4e857bb53875daa15a367b21d20e2d9d2e149714315cfb15a  lnd-openbsd-386-v0.5.2-beta.tar.gz
af0db952379a67e40f988eb94261f59fb0173f63de1806eb38c529751dd6c674  lnd-openbsd-amd64-v0.5.2-beta.tar.gz
f3b601a66fe5a277f8e7600637f15712146971be11adf7074cc01a0edd869be7  lnd-source-v0.5.2-beta.tar.gz
64ce298461dae68133823b3b43cfa7cb05e821e7688f29df14fbce02e64e14a9  lnd-windows-386-v0.5.2-beta.zip
9ac0667a877e3884627c019390cc593b5a783777314b2e30121aac76d1c71993  lnd-windows-amd64-v0.5.2-beta.zip
70607224b051c8919090f108669c35f5582c080cc0341ee1fe953b10b82368ca  vendor.tar.gz
```

One can use the `shasum -a 256 <file name here>` tool in order to re-compute the `sha256` hash of the target binary for your operating system. The produced hash should be compared with the hashes listed above and they should match *exactly*.

Finally, you can also verify the _tag_ itself with the following command:
```
git verify-tag v0.5.2-beta
```

# Building the Contained Release 

With this new version of `lnd`, we've modified our release process to ensure the bundled release is now _fully self contained_. As a result, with only the attached payload with this release, users will be able to rebuild the target release themselves without having to fetch any of the dependancies. Note that at this stage, binaries aren't yet fully reproducible (even with 
`go modules`). This is due to the fact that by default, [Go will include the full directory path where the binary was built in the binary itself](https://github.com/golang/go/issues/16860). As a result, unless your file system exactly mirrors the machine used to build the binary, you'll get a different binary, as it includes artifacts from your local file system. This will be fixed in `go1.13`, and before then we may modify our release system to do this automatically. 

In order to re-build from scratch, assuming that `vendor.tar.gz` and `lnd-source-v0.5.2-beta.tar.gz` are in the current directory: 
```
tar -xvzf vendor.tar.gz
tar -xvzf lnd-source-v0.5.2-beta.tar.gz
GO111MODULE=on go install -v -mod=vendor -ldflags ""-X github.com/lightningnetwork/lnd/build.Commit=v0.5.2-beta""
GO111MODULE=on go install -v -mod=vendor -ldflags ""-X github.com/lightningnetwork/lnd/build.Commit=v0.5.2-beta"" ./cmd/lncli
```

The `-mod=vendor` flag tells the `go build` command that it doesn't need to fetch the dependencies, and instead, they're all enclosed in the local vendor directory. 

Additionally, it's now possible to use the [enclosed `release.sh` script to bundle a release for a _specific_ system like so](https://github.com/lightningnetwork/lnd/pull/2191): 
```
LNDBUILDSYS=""linux-arm64 darwin-amd64"" ./release.sh
```

The `release.sh` script [will now also properly include the commit hash once again](https://github.com/lightningnetwork/lnd/pull/2400), as a regression caused by a change to the internal build system has been fixed. 


⚡️⚡️⚡️ OK, now to the rest of the release notes! ⚡️⚡️⚡️

# Notable changes

## Expansion of `lncli` block size

In this release, [we increase the gRPC block size from 4MB to 50MB](https://github.com/lightningnetwork/lnd/pull/2374). Recently, the output of `lncli describegraph` has hit the block size cap due to the expansion of the mainnet graph. Without this attempts to fetch the graph return an error of:
```
[lncli] rpc error: code = ResourceExhausted desc = grpc: received message larger than max (4246753 vs. 4194304)
```

With this commit, we give ourselves some breathing room. It's important to note that the max message size limit is a _client side_ setting. As a result, any developers driving `lnd` with gRPC will also need to raise their block size limit as well if they wish to fetch the graph over gRPC.

## [Switch to Go Modules](https://github.com/lightningnetwork/lnd/pull/2239) for Dependency Management 

With this release, `lnd` now uses [`go modules`](https://github.com/golang/go/wiki/Modules) rather than `glide` to handle our package dependency management. End users and developers should see no functional change, as [the `Makefile` is still the primary interaction point](https://github.com/lightningnetwork/lnd/blob/master/docs/MAKEFILE.md) when building and testing `lnd`. Switching to `go modules` also preps us for the fully reproducible binary builds for Go which are slated to land in `go1.13`. 

## Wallet Bug Fixes 

[The wallet will no longer rescan from the seed birthday if a wallet has no UTXOs once it has already been created](https://github.com/lightningnetwork/lnd/pull/2532). 

## Config and Wire Protocol Validation Fixes 

[A node's color is now properly validated](https://github.com/lightningnetwork/lnd/pull/2094) when passed in as a config or command line parameter. This fix ensures that we're able to properly parse a hex color before attempting to commit it to the database. With this change, if an invalid color is passed, then `lnd` will refuse to start.

[We'll now validate our own node announcement](https://github.com/lightningnetwork/lnd/pull/2030) as a sanity check to ensure generated announcements elsewhere in `lnd` are fully protocol compliant. 

[We'll now properly avoid creating empty buckets within `bolt`](https://github.com/lightningnetwork/lnd/pull/1745) which have been the source of prior inadvertent bugs. 

We'll now ensure that we [don't accept any node announcements with an invalid alias](https://github.com/lightningnetwork/lnd/pull/2412). 

[A bug has been fixed wherein we'd encode an invalid (too long) length for the enclosed `ChannelUpdate` within an onion error](https://github.com/lightningnetwork/lnd/pull/2462). This didn't affect `lnd` nodes as we didn't rely on the encoded length when decoding the error payload. However, other implementations did, which rendered them unable to decode a sub-set of our onion error messages. 

[`lnd` will now reject (by default) requests for funding confirmations that we deem are too large](https://github.com/lightningnetwork/lnd/pull/2275). 

[A bug related to the `FeeUpdate` message has been fixed](https://github.com/lightningnetwork/lnd/pull/2397) which could at times cause two channels to de-synchronize. 

[`lnd`, will no longer send the `IncorrectHtlcAmount` error](https://github.com/lightningnetwork/lnd/pull/2554). Instead, it will now use the new `UnknownPaymentHash` error that includes the amount of the HTLC. 

## Network Level Channel Advertisements 

[All channels created by `lnd` will now properly have the new `max_htlc` field set](https://github.com/lightningnetwork/lnd/pull/2460). This is a prep for our upcoming AMP implementation. Payment splitting heuristics can use this value as a guide when determining payment chunk size, and nodes can use this value to control the largest payment shard they'll accept. In a future release, we'll make this value configurable over the RPC interface. 

## Payment Path Finding and Retries 

[We've modified our retry and search space pruning code when routing payments to be more consistent](https://github.com/lightningnetwork/lnd/pull/1706). The following issues has been fixed:
- If the channel update of `FailFeeInsufficient` contains an invalid channel
  id, it is not possible to properly add to the failed channels set.
- `FailAmountBelowMinimum` may apply a channel update, but does not retry.
- `FailIncorrectCltvExpiry` immediately prunes the vertex without
  trying one more time.

[A bug has been fixed to ensure that we get passed a non-nil route](https://github.com/lightningnetwork/lnd/pull/2301). Previously with unchecked usage of the `SendToRoute` API, this may have caused a panic. 

[A change has been made to decouple the disabled bit from our local path finding](https://github.com/lightningnetwork/lnd/pull/2115). This is a preparatory step for an overhaul w.r.t the way we enable/disable channels, which is expected to land in 0.6. 

## RPC Interface Bug Fixes 

[We'll now properly validate the `ChannelPoint` argument for the `CloseChannel` RPC call](https://github.com/lightningnetwork/lnd/pull/2319). The `lncli` command validates this field already, but a check was lacking in the main RPC pipeline as it assumed `lncli` was being used. 

[Invoices that were created with hop hints will now show up as ""private""](https://github.com/lightningnetwork/lnd/pull/2222) within the output of `lncli listinvoices`.

[Additional validation has been added to ensure that it's no longer possible to attempt to force close a channel _twice_ over the RPC interface](https://github.com/lightningnetwork/lnd/pull/2131). The second time wouldn't generate any new changes, but could at times unnecessarily block this second call. 

Channels that are waiting to be opened, but which also have an unconfirmed closing transaction [will now properly show up within `lncli pendingchannels`](https://github.com/lightningnetwork/lnd/pull/2248). 

The [`UnsettledBalance` field in the `PendingChannels` field will now properly be set](https://github.com/lightningnetwork/lnd/pull/2289). 

[False positives related to to showing a channel as `active` have been located and patched](https://github.com/lightningnetwork/lnd/pull/2452). 

## HTLC Forwarding Fixes 

[We'll now properly return `FinalFailExpiryTooSoon` rather](https://github.com/lightningnetwork/lnd/pull/2335) than `FinalFailIncorrectCltvExpiry` when the final hop of a route receives an HTLC expiry that's too soon. 


## Switch from `bolt` to `bbolt`. 

[In this version, we've made a full switch from `bolt` to `bbolt`](https://github.com/lightningnetwork/lnd/pull/2245). `bbolt` is the maintained fork of the original `bolt` project. As it's maintained by CoreOS it actively has bug fixes land it in, which should increase the stability of our primary database. 

## Optimizations 

We'll [now scan backwards from the latest height back to the height hint](https://github.com/lightningnetwork/lnd/pull/2211) when a sub-system needs to query for the unspentness of an output. This speeds up routine scans of recent channel closes as we no longer need to start from potentially months back in the past. 

Rather than create a thread pool to generate/check signatures for the commitment updated protocol, [we'll now use a _global_ signature thread pool](https://github.com/lightningnetwork/lnd/pull/2329). This serves to reduce the total number of goroutines, idle CPU usage, and memory usage of `lnd` for larger nodes. 

## Changelog
The full list of changes since `0.5-beta` can be found here:
* https://github.com/lightningnetwork/lnd/compare/v0.5.1-beta...v0.5.2-beta
    
# Contributors (Alphabetical Order)
Chris Coverdale (ccdle12)
Conner Fromknecht 
ErikEk 
Federico Bond 
Johan T. Halseth 
Joost Jager 
Olaoluwa Osuntokun 
orbitalturtle
Valentine Wallace 
Wilmer Paulino 
Xavi Soler
",49765480
80,False,False,2018-11-28T20:51:25Z,2018-11-28T21:36:30Z,"This release is minor release of `lnd`, which includes several fixes and optimizations to make `lnd` even better. This time around one of the points of focus has been around the reliability, robustness and speed of the `Neutrino` backend, which is now in a state where it can be used for building applications for the Bitcoin testnet. This will let us sort out the last quirks and performance bottlenecks before it is ready to be enabled for `mainnet`.

Additionally, a series of bugs have been fixed in primary wallet backend `btcwallet`. As a result of these prior bugs, there may have been an instance in time when your wallet missed a change addresses. The root cause of this issue has been resolved, with test coverage hardened in the affected areas. In order to ensure all funds are accounted for (and funds are safu!) `lnd` will perform a chain rescan from birthday once it starts up. For older nodes, nodes with many channels, and nodes with many used addresses, this may take some time. It's recommend to start your node with the `LNWL=trace` logging level in order to monitor the progress of the rescan. 

**It is highly encouraged to update to this version.**

# Breaking changes
* [Remove `NewWitnessAddress`](https://github.com/lightningnetwork/lnd/pull/1987): The RPC `NewWitnessAddress` has been removed. Since we are only using witness addresses, addresses can be fetched using `NewAddress`.

A few RPCs have changed their behavior slightly, see the the **RPC changes** section.

# Database migrations
We have made a change to the closed channels database format (see `Dataloss protection` improvements), and we now store the wallet's birthday block in the database to speed up rescans. If you are upgrading from an older version of `lnd` you should at startup see something like
```
2018-11-28 09:58:46.744 [INF] LTND: Active chain: Bitcoin (network=testnet)
2018-11-28 09:58:46.747 [INF] CHDB: Checking for schema update: latest_version=7, db_version=6
2018-11-28 09:58:46.747 [INF] CHDB: Performing database schema migration
2018-11-28 09:58:46.747 [INF] CHDB: Applying migration #7
2018-11-28 09:58:46.747 [INF] CHDB: Migrating to new closed channel format...
2018-11-28 09:58:46.747 [INF] CHDB: Migration to new closed channel format complete!
2018-11-28 09:58:46.762 [INF] RPCS: password RPC server listening on 127.0.0.1:10006
2018-11-28 09:58:46.762 [INF] RPCS: password gRPC proxy started at 127.0.0.1:8086
2018-11-28 09:58:46.762 [INF] LTND: Waiting for wallet encryption password. Use `lncli create` to create a wallet, `lncli unlock` to unlock an existing wallet, or `lncli changepassword` to change the password of an existing wallet and unlock it.
2018-11-28 09:59:20.459 [INF] LNWL: Applying wallet transaction manager migration #2
2018-11-28 09:59:20.459 [INF] LNWL: Dropping wallet transaction history
2018-11-28 09:59:20.459 [INF] LNWL: Applying wallet address manager migration #6
2018-11-28 09:59:20.460 [INF] LNWL: Setting the wallet's birthday block from timestamp=2018-09-16 20:15:05 +0200 CEST
2018-11-28 09:59:20.461 [INF] LNWL: Estimated birthday block from timestamp=2018-09-16 20:15:05 +0200 CEST: height=400721, hash=0000000001874116d18dca88baf9f5f41b48c69e9c01a7d4fe467df09e5de352
2018-11-28 09:59:20.461 [INF] LNWL: Applying wallet address manager migration #7
2018-11-28 09:59:21.331 [INF] LNWL: Opened wallet
```
Note that it will then perform a rescan from the birthday, which **might take a while**. By setting the debug level to `debug` you'll be able to track the process of this rescan. 

# Verifying the Release
In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import the keys that have signed this release if you haven't done so already: 
```
curl https://keybase.io/roasbeef/pgp_keys.asc | gpg --import
curl https://keybase.io/halseth/pgp_keys.asc | gpg --import
```

Once you have his PGP key you can verify the release (assuming `manifest-v0.5.1-beta.txt` and `manifest-v0.5.1-beta.txt.sig` are in the current directory) with:
```
gpg --verify manifest-v0.5.1-beta.txt.sig
gpg --verify manifest-v0.5.1-beta.txt.sig.halseth manifest-v0.5.1-beta.txt
```

You should see the following if the verification was successful:
```
gpg: assuming signed data in 'manifest-v0.5.1-beta.txt'
gpg: Signature made Wed Nov 28 13:31:43 2018 PST
gpg:                using RSA key F8037E70C12C7A263C032508CE58F7F8E20FD9A2
gpg: Good signature from ""Olaoluwa Osuntokun <laolu32@gmail.com>"" [ultimate]

gpg: Signature made Wed Nov 28 23:30:24 2018 CET
gpg:                using RSA key 7AB3D7F5911708842796513415BAADA29DA20D26
gpg: Good signature from ""Johan T Halseth <johanth@gmail.com>"" [unknown]
```

That will verify the signature on the main manifest page which ensures integrity and authenticity of the binaries you've downloaded locally. Next, depending on your operating system you should then re-calculate the `sha256` sum of the binary, and compare that with the following hashes (which are included in the manifest file):
```
e0bfb53c722005d2447be2ccc0e7a5a8f0213e0733f3938264d9164d04d67ee7  lnd-darwin-386-v0.5.1-beta.tar.gz
5886c0228c97fbe5c7798f90c436a38815ac0e88112f78af025ce90b344ad888  lnd-darwin-amd64-v0.5.1-beta.tar.gz
448a6ca7015f1a225dbe162f61669c1bfd4a7a98af405877f020a5eb9ae4d41f  lnd-dragonfly-amd64-v0.5.1-beta.tar.gz
ae9ff40da44db16f51c047101b34cfc1c0903018895f041c8746c91877798a03  lnd-freebsd-386-v0.5.1-beta.tar.gz
16f8a9f357dea4e90ab025cebab57e48d93c3b9026f340d8f3de3675add3b890  lnd-freebsd-amd64-v0.5.1-beta.tar.gz
18867fed043d0a63014df65b8dda16774ede07b5d4496c5f1e6319b873c99d79  lnd-freebsd-arm-v0.5.1-beta.tar.gz
39b529597577c30b4cfa809edebed36031df5f951d0604d3f705bdfc847f8bb7  lnd-linux-386-v0.5.1-beta.tar.gz
41bff3deda46777f498a23feb7feff331638bd0a745fac43ecff99179c701675  lnd-linux-amd64-v0.5.1-beta.tar.gz
a5f3dfff3d93e420b45994b69b1eb97a183c3d3f67e143da0bbb34fb2893ba5b  lnd-linux-arm64-v0.5.1-beta.tar.gz
f714f2bd7db653f921df219fa123fd55e0090d9d4aa20f0f82aae2a2f3db31a8  lnd-linux-armv6-v0.5.1-beta.tar.gz
c8be77708fe95d5076fa6988229100598c14ae6c54e92a56d5f09f3e17732244  lnd-linux-armv7-v0.5.1-beta.tar.gz
da6798a93820889e6f0a68bf03c742510accdf2a684f0a145442e10ea8de91b9  lnd-linux-mips64-v0.5.1-beta.tar.gz
97c97b064088a809e584636733f47c2885b843cc8d802858932c6d1c1a6d5fdb  lnd-linux-mips64le-v0.5.1-beta.tar.gz
1207d49ea114ccdf6b2c10e437c3442adb2f32250444b82e58beaca1cccee443  lnd-linux-ppc64-v0.5.1-beta.tar.gz
a8324390835bb0da44296b3a7468ef3fb676b4ef8b169ca35d473bfd9beac2a0  lnd-netbsd-386-v0.5.1-beta.tar.gz
3bfd0ca1759079217dd09572ddcf0661793fc3eb1db8242d9a861b0597d4ce97  lnd-netbsd-amd64-v0.5.1-beta.tar.gz
0cdd2f32eef3849b5315c2112b90e148c4005e14fe83e5b7c8fb9235bf430447  lnd-openbsd-386-v0.5.1-beta.tar.gz
11ba3a4b5d144f2941b10353bd9b2c98ae5f4d8194c3c347d3fec998e270f8cb  lnd-openbsd-amd64-v0.5.1-beta.tar.gz
f05bcc38bd0dd9ae7f676f3587e96fdb699d0c960146fad0b56571c06bc50f65  lnd-windows-386-v0.5.1-beta.zip
c95b9374c139024bee54a254dc84d9b311c44c4f14b9613d8a7dee79f19e4b10  lnd-windows-amd64-v0.5.1-beta.zip
```

One can use the `shasum -a 256 <file name here>` tool in order to re-compute the `sha256` hash of the target binary for your operating system. The produced hash should be compared with the hashes listed above and they should match *exactly*.

Finally, you can also verify the _tag_ itself with the following command:
```
git verify-tag v0.5.1-beta
```

⚡️⚡️⚡️ OK, now to the rest of the release notes! ⚡️⚡️⚡️

## Notable changes

### Neutrino
Neutrino is a new light client for Bitcoin, that is more private and tailored for use on the Lightning Network than previous light clients. For more information, check out [this blog post](https://blog.lightning.engineering/posts/2018/10/17/neutrino.html).

Since the previous release of `lnd`, the version of `neutrino` used has gained a lot in terms of stability and speed. We now [start catching up](https://github.com/lightninglabs/neutrino/pull/98)  to the necessary filter hashes the moment we have enough block headers to verify them. This let us do most of the header fetching in parallel, drastically speeding up initial sync.

A number of fixes has also been deployed to ensure `neutrino` correctly handles header and filter responses from [multiple peers in parallel](https://github.com/lightninglabs/neutrino/pull/99), and even [peers serving invalid filters](https://github.com/lightninglabs/neutrino/pull/108).

### Height hint cache
When `lnd` opens channels to other nodes, it must always make sure the counterparty hasn't unilaterally closed the channel without its consent. This is done by scanning all blocks following the opening of the channel, to ensure no closing transaction has been confirmed. This is a quick check on full nodes, but since `neutrino` doesn't keep the entire chain around, it must request filters (and potentially blocks) from the network to perform this check. 

`lnd` performs this scan on every restart, checking if any of its channels have been closed while offline. With the addition of `height hint caches` we are now able to cache the results of previous such scans, letting us start the scan from where we left off, instead of scanning the chain all the way from the block where the channel was opened. With these additions, both `txid` [confirmations](https://github.com/lightningnetwork/lnd/pull/1787) and [spend detection](https://github.com/lightningnetwork/lnd/pull/2004) is now cached. This saves a lot on time and bandwidth at startup, letting light client users get back into sync with the network faster.

### Validating received `channel updates`
When sending a payment, there exists situation where the graph information the client has is not up to date with the nodes it is attempting to route through. In these cases the routing nodes will send an error back along with the updated information, such that the client can retry the payment with the correct parameters.

Previously we didn't check the signatures on this updated information, making it possible for nodes to respond with information for channels they didn't control. With an [added validity check](https://github.com/lightningnetwork/lnd/pull/1738), this is no longer the case, and all graph information must be signed by the controlling parties.

### `forgetchannel` RPC
A [new RPC](https://github.com/lightningnetwork/lnd/pull/1295) has been added for debug builds, that let users forcefully remove channels from their databases. This must be used with caution, as all state for the targeted channels will be lost, essentially making it impossible to recover any funds kept in these channels. This RPC is added to let advanced users get rid of leftover channels from earlier versions of `lnd`, where channels were not always cleaned up properly. Channels that had their funding transactions broadcast with a fee too small can also be removed with this RPC. To make sure no one uses this functionality by accident, it is only possible to use in debug builds.

### Build package
A new package `build` [has been added](https://github.com/lightningnetwork/lnd/pull/703) to `lnd`, greatly simplifying the process of adding build dependent changes, and improving logging during unit tests. The version string of `lnd` will with this change include the version tag, commit hash and number of commits since the tag. Logs from unit tests can be inspected by passing `log=""stdout <loglevel>""` to `make unit`. 

### Smarter rate limiting
`lnd` [will now rate limit peers](https://github.com/lightningnetwork/lnd/pull/1824) that are requesting excessive amounts of data to avoid DOS attacks. Since there are still older nodes running on the network which are acting spammy during graph sync, these will quickly be rate limited. To make sure a single ""bad peer"" won't degrade the performance of the daemon, they are limited on a [per-peer basis](https://github.com/lightningnetwork/lnd/pull/2135).

### go 1.11 support
The recommended [`go` version has been upgraded](https://github.com/lightningnetwork/lnd/pull/1786) to `v1.11`! The project now supports `go 1.10` and `go 1.11`.

### gRPC 1.15.0
`lnd` uses `gRPC` for its RPC interface, making it easy to gain access to the functionality of `lnd` from a wide set of languages. The `gRPC` version used was due for an upgrade, and has been [updated](https://github.com/lightningnetwork/lnd/pull/2055) to `v1.15.0`, up from `v1.5.2`. You shouldn't be seeing any breaking changes with this upgrade.

### Reject insane timelocks
We [now check](https://github.com/lightningnetwork/lnd/pull/2051) that forwarded payments don't impose a timelock that is too far in the future. Earlier an attacker willing to lock up his own funds could craft routes where funds got locked up for a very long time.

### New sweep package
A new package `sweep` [has been introduced](https://github.com/lightningnetwork/lnd/pull/1978), intended to take care of all kinds of sweeps within `lnd`, such as retrieving funds from closed channels. This is part of an ongoing effort to reduce the statefulness of funds sweeping, and be smarter about batching sweeps together in bigger transactions to save on chain fees.

### `rejectpush` option
When opening a channel to a peer on the network, you have the option to immediately send some funds as part of the opening process (what is called `push amount`). For most users accepting incoming channels this is not a problem (hey, free money!), but some merchants have seen customers pushing funds to them by mistake, resulting in an annoying refund process. Now there's [a new configuration option](https://github.com/lightningnetwork/lnd/pull/2027) `--rejectpush` that makes the node reject any incoming channels that include a push amount.

### Use `SendToRoute` with private channels
`SendToRoute` is an RPC that is used by advanced users to send payments along custom paths. Previously it had the restriction that the edges used in these custom paths were known to `lnd`. [A new option](https://github.com/lightningnetwork/lnd/pull/1944) `pub_key` in the route description given to `SendToRoute` lets `lnd` create the route without relying on the channel graph, making it possible to attempt payments even for channels unknown to `lnd`, such as private channels. This works since the payment is encrypted with the given public key, and now all information needed to construct the payload can be supplied over the RPC.

### RPC changes
* [Deprecating untyped value fields](https://github.com/lightningnetwork/lnd/pull/1922): Since RPC fields are not always typed to indicate their unit, there has been confusion especially whether `satoshis` or `millisatoshis` are used for certain RPCs. Going forward fields should indicate their type (ending with `_sat` or `_msat`), and you might see the existing, untyped fields getting deprecated.
* [`IncludeUnannounced` flag for `DescribeGraph`](https://github.com/lightningnetwork/lnd/pull/1389): The `DescribeGraph` RPC is used to get a list of the current information found in the local graph, including all known nodes and channels. Earlier this would include information about private nodes and channels you knew about. With this recent change, the caller must explicitly set the `IncludeUnannounced` flag if it wishes this private information to be part of the output, to avoid this information being leaked involuntarily.
* [Prevent spending unconfirmed funds by default](https://github.com/lightningnetwork/lnd/pull/2059): The `SpendUnconfirmed` flag must now be set for the wallet to use unconfirmed inputs when opening channels.
* [Reversed QueryInvoices consistency](https://github.com/lightningnetwork/lnd/pull/1992): When querying for an offset of invoices in the reverse order, we would earlier list the first available invoice found after this offset. This was inconsistent with the non-reversed case, and has been changed.
* [Number of inactive channels in `GetInfo`](https://github.com/lightningnetwork/lnd/pull/1782): The `GetInfo` RPC call now shows the number of inactive channels in addition to the number of active.

## Changelog
The full list of changes since `0.5-beta` can be found here:
* https://github.com/lightningnetwork/lnd/compare/v0.5-beta...v0.5.1-beta
    
# Contributors (Alphabetical Order)
AdamISZ
Alex Bosworth
Boblechinois
Carlos Garcia Ortiz
CirroStorm
Conner Fromknecht
Daniel McNally
Dave Kerr
Desuuuu
ErikEk
Francisco Calderón
Harald Nordgren
Johan T. Halseth
Joost Jager
Olaoluwa Osuntokun
Oliver Gugger
Oscar Lafarga
Patrick
Roei Erez
Valentine Wallace
Vincent Woo
Wilmer Paulino
Xavi Soler
babonet13
bluetegu
bob-333
chokoboko
maurycy
sevastos
tailnode
whythat",49765480
81,False,True,2018-11-15T09:17:30Z,2018-11-15T10:08:16Z,,49765480
82,False,False,2018-09-14T20:21:05Z,2018-09-18T18:33:56Z,"This release marks the _5th_ major release release of `lnd`: `v0.5-beta`! This release marks a massive step in the robustness and reliability of `lnd` as a routing node daemon for the Lightning Network. Additionally, a number of optimizations have been implemented which will reduce the memory and CPU footprint of `lnd` making it more amendable to run on smaller devices like Raspberry Pis and also eventually mobile phones! A number of bug fixes related to reliable HTLC forwarding, persistence recovery, and path finding have also landed in this release. As a result users should generally find path finding to be a smoother experience, and should find that `lnd` is able to recover from a number of partial and complete failures in routine protocol exchanges. 

The `0.5-beta` release doesn't include any _strictly_ breaking changes. So a result, users should find the upgrade process to be smooth. If one is upgrading from 0.4.2, the initial starting logs should look something like: 
```
2018-09-16 21:55:16.911 [INF] LTND: Version 0.5.0-beta commit=14bc024030d8603fd21b9d18e27a7bb061815d26
2018-09-16 21:55:16.911 [INF] LTND: Active chain: Bitcoin (network=testnet)
2018-09-16 21:55:16.911 [INF] CHDB: Checking for schema update: latest_version=6, db_version=0
2018-09-16 21:55:16.911 [INF] CHDB: Performing database schema migration
2018-09-16 21:55:16.911 [INF] CHDB: Applying migration #1
2018-09-16 21:55:16.911 [INF] CHDB: Populating new node update index bucket
2018-09-16 21:55:16.913 [INF] CHDB: Populating new edge update index bucket
2018-09-16 21:55:16.981 [INF] CHDB: Migration to node and edge update indexes complete!
2018-09-16 21:55:16.981 [INF] CHDB: Applying migration #2
2018-09-16 21:55:16.981 [INF] CHDB: Migrating invoice database to new time series format
2018-09-16 21:55:16.981 [INF] CHDB: Migration to invoice time series index complete!
2018-09-16 21:55:16.981 [INF] CHDB: Applying migration #3
2018-09-16 21:55:16.981 [INF] CHDB: Applying migration #4
2018-09-16 21:55:17.028 [INF] CHDB: Migration of edge policies complete!
2018-09-16 21:55:17.028 [INF] CHDB: Applying migration #5
2018-09-16 21:55:17.028 [INF] CHDB: Migrating database to support payment statuses
2018-09-16 21:55:17.028 [INF] CHDB: Marking all known circuits with status InFlight
2018-09-16 21:55:17.028 [INF] CHDB: Marking all existing payments with status Completed
2018-09-16 21:55:17.028 [INF] CHDB: Applying migration #6
2018-09-16 21:55:17.029 [INF] CHDB: Migrating database to properly prune edge update index
2018-09-16 21:55:17.218 [INF] CHDB: Migration to properly prune edge update index complete!
``` 

Breaking Changes
------------------

* One `lncli` related change that users running on `simnet` or `testnet` will notice is that the default location for macaroons has now _changed_. As a result, `lnd` will generate a **new set of macaroons** after it has initially been upgraded. Further details will be found below, but `lnd` will now generate a distinct set of macaroons for `simnet`, `testnet`, and `mainnet`. As a result, you may need to supply additional arguments for `lncli` to have it work as normal on `testnet` like so: 
    ```
    lncli --network=testnet getinfo
    ```
    or
    ```
    lncli --chain=litecoin --network=testnet getinfo
    ```

    In order to cut down on the typing one needs to go through, we recommend creating an alias like so:
    ```
    alias tlncli=lncli --network=testnet
    ```

    **NOTE**: In this release, the `--noencryptwallet` command line and config argument to `lnd` has been phased out. It has instead been replaced with an argument identical in functionality, but distinct in naming: `--noseedbackup`. The rationale for this change is to remove the foot gun that was the prior config value, as many users would unknowingly create _mainnet_ nodes using the argument. This is dangerous, as if done, the user wouldn't receive a _recovery mnemonic_ to recover their on-chain funds in the case of disaster.  We've changed the name of the argument to better reflect the underlying semantics.

* Users running a `bitcoind` backend will need to modify their existing ZMQ-related settings. Previously, lnd listened on one shared port for both blocks and transactions. 0.5 requires two distinct ports to be set, such that they are isolated. Users should remove the old `bitcoind.zmqpath` entry in `lnd.conf`, and, for example, replace it with:
   ```
    bitcoind.zmqpubrawblock=tcp://127.0.0.1:28332
    bitcoind.zmqpubrawtx=tcp://127.0.0.1:28333
    ```
    Also ensure that `bitcoind` is exposing distinct ZMQ ports in `bitcoin.conf`:
    ```
    zmqpubrawblock=tcp://127.0.0.1:28332
    zmqpubrawtx=tcp://127.0.0.1:28333
    ```

# Verifying the Release 
In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import `roasbeef`'s key if you haven't done so already:
```
curl https://keybase.io/roasbeef/pgp_keys.asc | gpg --import
```

The [keybase page of `roasbeef`](https://keybase.io/roasbeef) includes several attestations across distinct platforms in order to provide a degree of confidence that this release was really signed by ""roasbeef"". 

Once you have his PGP key you can verify the release (assuming `manifest-v0.5-beta.txt` and `manifest-v0.5-beta.txt.sig` are in the current directory) with: 
```
gpg --verify manifest-v0.5-beta.txt.sig
```

You should see the following if the verification was successful:  
```
gpg: assuming signed data in 'manifest-v0.5-beta.txt'
gpg: Signature made Fri Sep 14 13:26:49 2018 PDT
gpg:                using RSA key F8037E70C12C7A263C032508CE58F7F8E20FD9A2
gpg: Good signature from ""Olaoluwa Osuntokun <laolu32@gmail.com>"" [ultimate]
```

That will verify the signature on the main manifest page which ensures integrity and authenticity of the binaries you've downloaded locally. Next, depending on your operating system you should then re-calculate the `sha256` sum of the binary, and compare that with the following hashes (which are included in the manifest file): 
```
4f88ab4f19a41193e2e246a13981cec3c20f5b3bb7422af60955acf1a077e1cd  lnd-darwin-386-v0.5-beta.tar.gz
079c5398b952f8a479b3b0cad3bac2d4bcd52f7d5140688da2255728a607cf76  lnd-darwin-amd64-v0.5-beta.tar.gz
03942a1b09287653767c57278180806ad26f943e80121c2ce2fda9856438ffdf  lnd-dragonfly-amd64-v0.5-beta.tar.gz
95cc950191a1cddf03010052a3fd5b92971bbbfe53f84a17290863bb09974705  lnd-freebsd-386-v0.5-beta.tar.gz
9b7b92077a301cacaf5fe9a1f19473c9cc44adffaee401b1028c6d313882c574  lnd-freebsd-amd64-v0.5-beta.tar.gz
0834b4cd949cea3a3602c5c532e1f4b31ceba6ea6a54a47b941170709991086f  lnd-freebsd-arm-v0.5-beta.tar.gz
7fddc4a8cc039535a9450c24dc253f34a2d7620d306aaa894d6313ec510bf5b7  lnd-linux-386-v0.5-beta.tar.gz
d42ebcc3626016417c9473285190db90e4d7a634c69142fa16f0b182befe7edc  lnd-linux-amd64-v0.5-beta.tar.gz
b634e8877d18079d4a8dbdb6e8126806a1fd51a1752c00b934379b0f0fd93577  lnd-linux-arm64-v0.5-beta.tar.gz
3ac1113ae94c99609abd0c4da78f472689277551a9bd8e1a4e33d8b5051c8675  lnd-linux-armv6-v0.5-beta.tar.gz
f3d578e90061541935e0de888a40377d5131bb5008317ff8af11e245fe2c8510  lnd-linux-armv7-v0.5-beta.tar.gz
b842bdb31410a1de45e8edbeaade49987e7277592b846e8ef2f26421b71d9b9f  lnd-linux-mips64-v0.5-beta.tar.gz
b00489e3dc31359578011559acc88e851d53a6a4b9d7a49d4da5d4f614f25b55  lnd-linux-mips64le-v0.5-beta.tar.gz
bdc3a5ca87130520e93be58533a6d8bb40f709716c87051d69572a5f077d12b5  lnd-linux-ppc64-v0.5-beta.tar.gz
792c3296b90fc8b71bd00e391e930a6563fd1725508d58c815e6a83eb52e23c9  lnd-netbsd-386-v0.5-beta.tar.gz
9cb9c93eb185439bbd8059b2bac083b9f2de2f23a2e73beac9d4c9697d8b1958  lnd-netbsd-amd64-v0.5-beta.tar.gz
b39325128b19863ed67653f41abca10c8412eeea216c4721cdec516df6ecf77a  lnd-openbsd-386-v0.5-beta.tar.gz
9e545e29252559173866e037e08b4b94425d9acb82d0701da001d51815773857  lnd-openbsd-amd64-v0.5-beta.tar.gz
1bd6a2738de0d3408d8eff5e1a345eee0712553f72352fefe0ee1af133811218  lnd-windows-386-v0.5-beta.zip
c6d4b1a54338753a808c6cd3c23da4a840e1dab6aafd58030fe1a5e81a6d7e5d  lnd-windows-amd64-v0.5-beta.zip
```

One can use the `shasum -a 256 <file name here>` tool in order to re-compute the `sha256` hash of the target binary for your operating system. The produced hash should be compared with the hashes listed above and they should match *exactly*. 

Finally, you can also verify the _tag_ itself with the following command: 
```
git verify-tag v0.5-beta
```


This release can also be [found in `roasbeef`'s public keybase folder](https://keybase.pub/roasbeef/lnd-v0.05-beta/). 

After `go1.12` is released, we'll be switching to a method in order to allow _deterministic_ builds to allow for third party verifiability of the binaries included in this release.  

⚡️⚡️⚡️ OK, now to the rest of the release notes! ⚡️⚡️⚡️

# Notable Changes

### Switch to Mainline `btcsuite` Libraries 


With this release of `lnd`,[ the project no longer uses roasbeef's set of forks for the `btcsuite`](https://github.com/lightningnetwork/lnd/pull/1326) family of libraries such as `btcd`, and `btcutil`. The old set of forks will no longer be maintained as all development will now be focused on mainline `btcsuite`. Additionally, `roasbeef` is now a _maintainer_ of the `btcsuite` set of libraries. As a result, we'll be able to easily integrate any new feature or bug fixes we need to `btcsuite` directly, rather than maintaining our own fork again. As a result, we recommend that those users running `lnd` with a `btcd` upgrade to the latest versions of the master branch of `btcd`. 


### `txindex` For Full Node Backends is Now Optional!

Before this release, if a user was running with _any_ of the supported full node backends we _required_ them to run with the transaction index active. With this version of `lnd`, [running a full node backend with a transaction index is now _optional_!](https://github.com/lightningnetwork/lnd/pull/751) As a result, if a user wishes to run a lighter version of their full node without the transaction index, then they're able to do so. However, for performance reasons until the persistent height hints are re-activated, we _recommend_ running with an active transaction index for your full node which backs `lnd`. In either case, `lnd` will _automatically_ detect if the backing full node has an active transaction index and act accordingly.  

Future releases of `lnd` will allow for even lighter full node configuration by supporting pruned nodes as a first class citizen. 

### Neutrino BIP 157+158 Compliance and Optimizations 

This release of `lnd` contains several bug fixes, and optimizations for the `neutrino` light client backend. Additionally, [our implementation of BIP 157 and BIP 158 are now _fully_ compliant with the latest version of the set of BIPs](https://github.com/lightninglabs/neutrino/pull/54). The primary change between this version of the BIP 158 and the prior version lies in exactly [what the filters _contain_](https://github.com/lightninglabs/neutrino/pull/74) In a prior version, the regular filter contained: the txid of each transaction found in a block, the previous outpoint that all inputs spend, and finally the pkScript of each created output. The new version instead simply includes: the previous output script that each input references, and each pkScript created by outputs in the block. This modification results in more compact filters as scripts can be de-duplicated across blocks, and we drop an additional element per transaction. Several core interfaces within `lnd` have been revamped to listen for spends based on scripts (rather than outpoints) and confirmations based on scripts (rather than txids). 

 A re-write of the syncing logic for neutrino was undertaken in order to fix a number of stalling and performance related bugs in the prior implementation. At the time of writing of these release notes [`btcd`](https://github.com/btcsuite/btcd) is the only full node implementation that is able to serve BIP 157 clients. The latest version of the master branch of `btcd` has also been updated to be fully compliant with both BIP 157 and 158. 

The latest version of the `neutrino` implementation that's packaged with lnd will now [cache filters](https://github.com/lightninglabs/neutrino/pull/72) and [blocks in memory](https://github.com/lightninglabs/neutrino/pull/88). In prior versions of the implementation _all_ filters would be written to disk. This is unnecessary, as in the typical case, a filter is only scanned and checked once, therefore it's safe to _never_ write them to disk and instead only maintain a simple in-memory cache with a size based eviction policy. Caching filters (with an option to write select filters to disk) allows us to reduce to reduce the on-disk footprint for the neutrino mode of operation. We'll also now maintain a cache for blocks as during channel validation, it's likely that a block contains several funding transactions. Caching these blocks allows us to cut down on redundant p2p traffic, instead utilizing a pre-deserialized version of a block for validation purposes.

Finally, [a number of bugs have been fixed in the primary rescan logic for `neutrino`](https://github.com/lightninglabs/neutrino/pull/77) which serves as a [base abstraction](https://github.com/lightninglabs/neutrino/pull/78) for many components within lnd.  


### Duplicate Payments 

A new `ControlTower` has been integrated into the switch, which [prevents payments exhibiting the reused payment hashes](https://github.com/lightningnetwork/lnd/commit/d6083e0d66ee1e2ce459eccc82fa600af437dfcb#diff-7360a64faae2dea0a15c7a0f0544da8bR352) from being in-flight simultaneously, in addition to rejecting further attempts once a payment to a given hash is successful. By comparing the payment hashes directly, this also prevents paying two distinct invoices that include the same payment hash.

### Query Graph Sync

With this version of `lnd`, [we now implement the ""query graph syncing"" feature which has recently been added to the BOLT specifications](https://github.com/lightningnetwork/lnd/pull/1106). With this change, establishing connections to new peers for a fresh node is much lighter. The primary distinction is that when requesting the network view of the node we're connecting to, we'll now longer request they send _all_ the data they have. Instead, treating the blockchain and channels opened within it as a time series, we're able to precisely request only the data we need, eliminating redundant bandwidth usage and processing on both sides. 

As a result of this change, the load on routing nodes should generally be much lower, as they'll only request _new_ channels they don't already know of from newly connected peers. We've taken an additional step forward, and now _require_ this feature for nodes that the neutrino mode will connect out to. By doing this, we ensure the node we're connecting to doesn't send any _zombie_ channels, causing us to populate our local network view with stale, likely abandoned channels. 

### Aggressive Graph Vertex Pruning 

In order to maintain a healthy view of the network, `lnd` currently prunes any channels which haven't sent out a channel update heartbeat in 2 weeks. We call these pruned channels ""zombie channels"". In this release, [we now go a step further and prune out any _nodes_ which don't have any active channels within the network](https://github.com/lightningnetwork/lnd/pull/1371. This serves to keep our view of the network tight and lively. 

`lnd` currently keeps a special set of `LinkNode`s within the database that represent nodes which we have direct channels with. In addition to this unconnected vertex pruning, we now ensure that we won't automatically attempt to connect to a node on start up if we don't have any existing channels to itself. In the past, a lack of this feature has caused issues for larger nodes that have historically had a high channel turn over rate. 


### Async Daemon Start Up

In prior versions of `lnd` a number of blocking actions such as re-registering for confirmation and spend notifications would slow down the startup time of the deamon as we would wait for things like historical dispatches to finish before moving onto the next sub-system to start up. Additionally, in the prior release, establishing a new peer connection was done in a synchronous manner, meaning that we would only be able to carry out a single p2p handshake at a time. In the worst case, `lnd` would take tens of minutes to start up if the node was heavily loaded with channels. 

[In this new release we've modified all `ChainNotifier` registrations to be fully async](https://github.com/lightningnetwork/lnd/pull/1628). As a result, we'll [no longer block for their historical dispatch checks on startup](https://github.com/lightningnetwork/lnd/pull/1581), and instead can pipeline the start up of all sub-systems within the daemon. On the server, side, [once we obtain a TCP socket, all other peer negotiation is now done in a _distinct_ goroutine](https://github.com/lightningnetwork/lnd/pull/1658). These two changes should dramatically lower the initial start up time of the daemon for more heavily loaded nodes. 

### New `SendToRoute` RPC!

[A new routing/payment related RPC has been added to lnd: `SendToRoute`](https://github.com/lightningnetwork/lnd/pull/747). The RPC can be seen as a companion RPC to the existing `QueryRoutes` RPC. One can view this RPC as the Lightning analog to the `createrawtransaction` RPC typically implemented within Bitcoin full node daemons. The `SendToRoute` RPC allows a caller to specify a _custom_ route, which includes all details required to dispatch an HTLC such as the fee and time lock information at each hop of the route. The RPC has been fashioned in a way that allows users to either re-use the existing output from the `QueryRoutes` command, or craft a custom route by hand via a special JSON route format. 

There are three ways to specify routes:
 
* using the --routes parameter to manually specify a JSON encode set of routes in the format of the return value of queryroutes: `lncli sendtoroute --payment_hash=<pay_hash> --routes=<route>`
 
* passing the routes as a positional argument: `lncli sendtoroute --payment_hash=pay_hash <route>`

 * or reading in the routes from stdin, which can allow chaining the response from queryroutes, or even read in a file with a set of pre-computed routes: `lncli queryroutes --args.. | lncli sendtoroute --payment_hash=H -`. Notice the '-' at the end, which signals that lncli should read the route in from stdin


This was one of our most requested RPCs as it allows the caller to _execute advanced maneuvers_ on the Lightning Network **such as self-rebalancing channels**, making custom protocols which rely on data delivered within the Sphinx per-hop onion blob, and also cross-chain atomic swaps which need to manually specify the a particular HTLC is to be forwarded on a distinct chain from that which it came in on. 

### Strict Local HTLC Forwarding

In order to more precisely support the creation of self channel rebalancing scripts, we've modified the HTLC Switch to implement [_strict_ local forwarding](https://github.com/lightningnetwork/lnd/pull/1527). Before this change, when a node had multiple channels to another node and the first hop specified was meant to traverse that node's links, the system would select the link with the _highest_ available bandwidth. However, it may be the case that a users rebalancing script instead wishes to target a distinct channel. With strict forwarding however, we'll ensure that we take the _specified_ first hop rather than attempt to make a forwarding time decision using our additional information. Notably, we don't do so for remote routes, as there's no guarantee as to _which_ link a node forwarding a remote HTLC will choose as there's no way to enforce a particular action. 

### Automatic Channel Disable Policy

Within the protocol there exists a mechanism that allows nodes to ""disable"" a channel, marking it ineligible for carrying routed HTLC payments. Disabling channels that are faulty, inactive, or unable to route for w/e reason allows nodes on the network to have a better view of the ""healthy"" set of routable channels. The latest version of `lnd` will now disable channels in two instances:
  1. [When we co-op close or force close a channel](https://github.com/lightningnetwork/lnd/pull/1387). This signals to the network that the channel is in the process of being closed on the main chain, and therefore isn't eligible to route HTLCs. By sending out this disable update, we save the network a set of between the point of commitment broadcast, and the transaction being mined into the chain. 
  2. [If the peer is unreachable for a period of time `T`](https://github.com/lightningnetwork/lnd/pull/1687). The current default period is 20 miuntes, however this can be set from the command line via the `inactivechantimeout` option:
```
      --inactivechantimeout=                                  If a channel has been inactive for the set time, send a ChannelUpdate disabling it. (default: 20m0s)
```

These two measures should serve to reduce the number of failed routed HTLCs due to `UnknownNextPeer` errors, and we start to tend towards a network view of nodes with high uptime and availability. This is a small step towards our goal of bootstrapping a network with reliable, highly available nodes. 

### Reduced Idle CPU Usage

Users operating more heavily-loaded routing nodes should generally perceive lower idle CPU usage time. A number of optimization have been executed which reduce the number of idle goroutines, the number of goroutines per connection/channel, and also the number of high frequency tickers within the codebase. 

In 0.4.2, idle links would wake up every 50ms to check if they had any HTLCs to process. This caused wasteful CPU utilization, since we should only need to do so if there are unprocessed HTLCs. To remedy this, a new [ticker](https://github.com/lightningnetwork/lnd/tree/master/ticker`) package was implemented that allows the tickers to be stopped and resumed conditionally, [based on the presence or absence of pending HTLCs](https://github.com/lightningnetwork/lnd/commit/1c456a51443292728155890c4e9f4eae83c17d3f#diff-cce38a878c9f1dd2eda8083f5316bc15). With 0.5, the idle CPU usage of active links has been reduced drastically since links will now be truly asleep when not processing HTLCs.

### Automatic Tor V2+V3 Onion Services

Prior versions of `lnd` introduced the ability to establish _outbound_ connections over Tor via the socks proxy interface. This allows users to run routing nodes or clients without revealing the _location_ of their routing nodes.  This adds an additional layer of privacy as nodes no longer need to expose their IP address in order to route or send payments within the network. The latest version of `lnd` takes things a step further and enables [_automatic provisioning_](https://github.com/lightningnetwork/lnd/pull/1159) of an onion service to allow a node to accept _inbound_ connections over Tor. 

The auto setup works as follows: if `--tor.active --tor.v2` is set within the configuration, then `lnd` will attempt to automatically seek out and authenticate with the Tor daemon running at the specified control port. If we're able to connect out, then we'll create a new onion service identity, and modify `lnd` to _only_ listen on `localhost`. In this mode, we also ensure that all DNS queries utilize the SOCKS5 interface for tunneling DNS over Tor. In this version we also support the [_new_ v3 onion services](https://github.com/torproject/torspec/blob/master/rend-spec-v3.txt) ([`--tor.v3`](https://github.com/lightningnetwork/lnd/pull/1516). The new onion service protocol represents a large step for the Tpr network, as it does away with the existing legacy crypto used within the system, and also strengthens onion services against a number of discovered attacks. 

We'll soon be updating our DNS seed to be able to crawl and serve onion service peers. This will allow those that wish to run _purely_ over Tor to easily find peers they can connect to. For further documentation we recommend users check out [our official Tor integration docs](https://github.com/lightningnetwork/lnd/blob/master/docs/configuring_tor.md), as well as the relevant section of the `sample-lnd.conf`. 

### Dataloss Protection Recovery 

Within the protocol, there exists a measure put in place that will allow nodes that have partially or complete lost data to recovery a portion of the funds they had within active channels. We call this feature [""dataloss protection""](https://github.com/lightningnetwork/lightning-rfc/blob/master/02-peer-protocol.md#message-retransmission). The latest version of `lnd` has now completely implemented this feature! In the rare case that users exhibit partial data loss, upon connection to a peer which we had a channel open with, `lnd` will _automatically_ prompt the user to close out the channel as it can no longer be used. At that point, we'll then proceed to sweep out settled balance within the commitment transaction on-chain, and clean up the remaining channel state. 

Future versions of `lnd`, will finalize the ingratiation of this feature by also introducing _static channel backups_. These backups are essentially static files which represent a _description_ of the channel, namely: the parameters used, location on chain, channel peer, key paths we used within the channel, etc. With this set up backups and a users seed, in the face of _total_ data loss, we'll be able to recover the settled balance in the set of open channels. 

### Reliability improvements to `bitcoind` backend

Prior versions of `lnd` were plagued with reliability issues when interacting with the `bitcoind` backend. We'd at times miss notifications, or even drop block notification causing is to miss events such as a funding transaction confirming, or a channel being closed. With this new version of `lnd` we've implemented several measures to ensure that we no longer miss any notifications from `bitcoind`, and even if we do, then we're able to safely backtrack and recover from any missed block notifications. 

Before `0.5`, we would receive block and transaction notification via the _same_ zmq socket. As transaction notifications (mempool inclusion) is much more common than block notifications, they would dominate the queued backlog at any given time. In certain conditions, due to the notification backlog, block notifications would be dropped once the queue gets above a high water mark. To avoid possibly missing block notifications, [we now split the notification sources into two distinct sockets](https://github.com/btcsuite/btcwallet/pull/511). This ensures that the less critical transaction notifications [are isolated to a distinct queue from the block notifications](https://github.com/lightningnetwork/lnd/pull/1566). Due to this change, users must now specify distinct sockets for block and transaction notifications like so: 
```
lnd --bitcoin.active --bitcoin.testnet --bitcoin.node=bitcoind --bitcoind.zmqpubrawblock=tcp://127.0.0.1:28332 --bitcoind.zmqpubrawtx=tcp://127.0.0.1:28333
``` 

### HTLC Switch Persistence and Reliability Improvements 

[Removing links has been reworked to be blocking](https://github.com/lightningnetwork/lnd/commit/c78e81d32b46af7b259026f832f11a24dc258da8#diff-cce38a878c9f1dd2eda8083f5316bc15) from the caller’s perspective, offering safer isolation during shutdown and interactions with flapping peers. When shutting down LND, [stopping links is now done concurrently](https://github.com/lightningnetwork/lnd/commit/4e093a6cd29bc9f748fdeb5401836060039017f0#diff-cce38a878c9f1dd2eda8083f5316bc15), offering faster shutdowns to users with high channel counts.

Prior to the added safety surrounding removal of links, some issues were found that caused users to end up with an invalid, albeit recoverable, database state. 0.5 includes a fix to [automatically cleanup any databases that entered this state](https://github.com/lightningnetwork/lnd/commit/a21381056357e18bf11e4c05181683c1ca1b2f1b#diff-cce38a878c9f1dd2eda8083f5316bc15), which would otherwise prevent startup. The link startup logic has also been altered to [ensure we don’t read from this invalid state](https://github.com/lightningnetwork/lnd/commit/5cf911a762bdbbe9e6536026d450dbf3d9a36503#diff-cce38a878c9f1dd2eda8083f5316bc15).

The htlcswitch relies on a series of internal logs, referred to as forwarding packages, for ensuring that HTLCs are retransmitted internally with at-least-once semantics. An issue was fixed in 0.5 where [a missing reference on failed packets](https://github.com/lightningnetwork/lnd/commit/4f2137eafc4f4a4f372d4c2792b4f482377ed89d#diff-cce38a878c9f1dd2eda8083f5316bc15) would prevent the persistent references from being removed, and resulting in unnecessary internal retransmission and processing of the HTLCs on startup and peer reconnection. To correct databases that were not properly cleaning up this state, [links will now cleanup any references for packets that are detected as duplicates internally](https://github.com/lightningnetwork/lnd/commit/81b4af2ec8213d95a31b0b3af1468de3a838d74f#diff-cce38a878c9f1dd2eda8083f5316bc15). The combined result of both changes is reduced log spam and startup/reconnection latency.

[Processing of locally-sourced HTLC responses has been made asynchronous](https://github.com/lightningnetwork/lnd/commit/b59fea460a26b9747cd25ae93a48d2b847a593b1#diff-cce38a878c9f1dd2eda8083f5316bc15), so that it does not block the primary forwarding loop within the switch resulting in better performance and database batching. The ordering of database operations has also been reordered to properly cleanup forwarding package references, even if the daemon has been restarted. References that had not been cleaned up prior will be cleaned up after a restart with 0.5.

On channel reestablisment, links will now [force close the channel when detecting certain irrecoverable failure cases](https://github.com/lightningnetwork/lnd/commit/ebed786b2ac00921120e1dce05c2005c80da1c67#diff-cce38a878c9f1dd2eda8083f5316bc15), such as remote data loss and invalid commitment points.

When sending locally-initiated payments out of the switch, we will now [honor the exact channel requested by the channel router](https://github.com/lightningnetwork/lnd/commit/753537123832d0c480c1f6c563a525d78d529de2#diff-7360a64faae2dea0a15c7a0f0544da8bR789). Previously, we allowed the switch to select the best link to the same peer if multiple existed. However, this caused issues when trying to use `SendToRoute` since the user couldn’t be sure which channel the payment would flow over. This change allows provides a more feedback mechanism to the router, since local failures are now known to have been sourced from the outgoing link.

[Link-level fee updates are less aggressive](https://github.com/lightningnetwork/lnd/commit/4cc60493d233b4dcb4bc1ffab85a56f135d061e5#diff-cce38a878c9f1dd2eda8083f5316bc15), and now use randomized interval for each link. Prior all links checked for fee updates with each block, which resulted in an unnecessary number of state updates.

Timelocks of forwarded HTLCs are now [validated against the outgoing channel policy](https://github.com/lightningnetwork/lnd/pull/1447). Previously, the CLTV was incorrectly compared to the policy of the incoming link, resulting in unnecessary routing failures.

An exit hop will now [properly return FailFinalExpiryTooSoon](https://github.com/lightningnetwork/lnd/commit/d76bacee0e99ef58b57871310e278ff4049b47a8#diff-cce38a878c9f1dd2eda8083f5316bc15) when rejecting an HTLC whose timeout is too close to the current block height. The previous behavior incorrectly returned FailFinalIncorrectCltvExpiry, which should only be used if the timeouts are malformed.


### Default Autopilot Improvements 

The current autpoilot driving agent has received a number of updates in this new version.

[t's now possible to instruct the agent to only create unadvertised channels via the `autopilot.private` flag](https://github.com/lightningnetwork/lnd/pull/1692). This will be useful for desktop and mobile clients which won't be actively routing payments. When attempting to receive funds over these non-advertised channels, the `AddInvoice` RPC will now automatically populate the required routing hints which will allow nodes to traverse these non-advertised channels on the ""edge"" of the graph. 

One can now also [specify the number of confirmation that outputs need to have](https://github.com/lightningnetwork/lnd/pull/1693) before the agent starts to use them as inputs into channels. By specifying 0 confirmations, the agent is able to aggressively _pipeline_ channel openings, resulting in a faster time-to-first-n-channels than prior versions. 

Finally, [the agent will now first probe nodes to see if they're actually active and online](https://github.com/lightningnetwork/lnd/pull/1694), before marking them as a target directive to be executed. This will result in less failed attempts, as we only try to open a channel with a node that we know will respond to our request. 


### Distinct Network Macaroons

In prior versions of `lnd`, a _single_ set of macaroons were used for all possible networks (testnet, simnet, mainnet). This approach was flawed however, due to the fact that if one gave out a (possibly attenuated) macaroon for say testnet, then that same macaroon would be utilized for mainnet. This new version of `lnd` has now reverted this behavior, in favor of _network specific_ macaroons. With this change, the default location of all macaroons has been modified, and the behavior of `lncli` change das well. Once users upgrade, a _new_ set of macaroons will be created under the chain data directory for each supported network. For example, one can find the `testnet` invoice macaroon for Bitcoin at: 
```
~/.lnd/data/chain/bitcoin/testnet/invoice.macaroon
```

Most other behavior has been left unchanged, however, one must now also specify the target `network` (and also possibly `chain`) when using `lncli`, via the new set of arguments: 
```
   --chain value, -c value    the chain lnd is running on e.g. bitcoin (default: ""bitcoin"")
   --network value, -n value  the network lnd is running on e.g. mainnet, testnet, etc. (default: ""mainnet"")
```

Any scripts or gRPC programs will need to be modified in order to utilize the new set of macaroons, as any other prior created macaroons are now invalidated, as the root macaroon key has been regenerated. 

### Revamp of HTLC Pathfinding Algorithm

A number of changes have been made to the default HTLC path finding algorithm to fix existing bugs in our [fee calculation](https://github.com/lightningnetwork/lnd/pull/1321), [edge weighting](https://github.com/lightningnetwork/lnd/pull/1358), and also [fee ceiling enforcement](https://github.com/lightningnetwork/lnd/pull/1382). 

The old path finding algorithm would proceed to look for a path to the destination, starting from a given source (`lnd`). The old algorithm had several issues, namely: we would take into account our first outgoing edge in the edge weighting, we wouldn't properly factor in the carry over backwards in the route as fees were added meaning we wouldn't compute the fee ceiling properly, and finally we would skew the path finding based on _our_ own outbound routing policies. The new path finding code fixes all of these issues, and also revamps our testing infrastructure to make it easy to add new test cases in the future. 

Our old weighting function would at times prefer a route with higher fees but a an identical timelock, over a shorter route with lower fees and a similar timelock. Rather than try to scale the fees or timelock to be promotional, we instead now normalize the timelock values to essentially act as ""extra fees"". We borrow the terminology of a ""risk factor"" from c-lightning.  [Check out this table from the original PR](https://github.com/lightningnetwork/lnd/issues/1346#issuecomment-395995294) for a demonstration w.r.t how this improves our path selection given a set of candiate routes. 

Finally, the prior path finding code had a bug where it wouldn't properly carry over the fees from the prior hop when traversing backwards to convert a path into a route. This issue would cause unnecessary HTLC routing errors when routing over edges with a particular configuration fee wise. This new release of lnd fixes this bug by ensuring we properly compute and carry over fees which allows us to properly detect the case where a link can carry the initial amount, but once we factor in fees, it can no longer carry the final HTLC. 

### `contractcourt` Reliability Improvements 

A number of bug fixes and reliability improvements has been made within the `contractcourt`, the sub-system that lnd uses to handle all on-chain interaction related to contract (such as HTLCs, etc). [We now ensure that the handoff of a closed channel to the resolver which will ultimately resolve any pending contract is fully reliable](https://github.com/lightningnetwork/lnd/pull/1696).  

### Optional NAT Traversal (NAT-PMP + UPnP)

`lnd` has now [gained the ability to _optionally_ attempt NAT traversal](https://github.com/lightningnetwork/lnd/pull/1384) so clients that are behind at NAT are able to establish incoming connections from other peers in the network. The current system will try either NAT-PMP or UPnP to punch a hole in the nat, which ever of them works first. If `lnd` is unable to punch a hole, then it will fail to start in order to inform the users that the networking maneuver was unsuccessful. Additionally, `lnd` will spawn a background goroutine which will periodically poll the router to see if the external IP has changed, if so, then we'll send out a _new_ announcement on the network so that nodes always reach us at our latest IP address. This feature will be useful for those that cannot obtain static IPs where they run their nodes, and instead have a dynamic IP address which changes every few hours/days. 

In order to activate the auto NAT traversal use the following argument: 
```
      --nat                                                   Toggle NAT traversal support (using either UPnP or NAT-PMP) to automatically advertise your external IP address to the network -- NOTE this does not support devices behind multiple NATs
```

### Unix Socket Support for RPC

The primary [gRPC server is now able to listen on unix sockets](https://github.com/lightningnetwork/lnd/pull/1262)! An example of a valid configuration is: 
```
rpclisten=unix:///var/run/lnd/lnd-rpclistener.sock
```
### Robust Streaming Notification Delivery for Received Payments

In this new version of `lnd`, [we modify the streaming invoice subscription API slightly in order to allow callers to have assurance that they haven't missed any new payments](https://github.com/lightningnetwork/lnd/pull/1125). The `SubscribeInvoice` API now has two new values: `add_index`, and `settle_index`. To match these new values, the `Invoice` message has also gained a similar set of fields. These two indexes effectively act as an event time series: each time a new invoice is added the `add_index` will be incremented, and each time a new invoice is settled the `settle_index` will be incremented. With this new feature, clients can now specify one or both of these new optional fields with the _last_ index they know of. If specified, then we'll query the database to find all events greater than this index, and then deliver these backlog notifications before sending out any _new_ notifications. 

Care has been taken to ensure that the new API is backwards compatible with the expectations of the _old_ API. Namely, if the fields aren't specified (are zero), then no backlog notifications will be delivered. As a result, the index on-disk actually starts at 1. 

A database migration has been created in order to upgrade old databases to the new invoice schema that has these two new indexes which need to be updated each time a new invoice has been added, or an exiting one settled. 

Finally, a new field has been added to the on-disk `Invoice` struct: `AmtPaid`. This new field allows the link to commit exactly what value was accepted for the final invoice. This is important as invoices may have not have any value attached to them at all (""donation"" invoices), or it may be the case that the invoice was overpaid. In either case, the final value accepted for an invoice will now be stored on disk, and queryable over the RPC interface. The value is exposed via RPC in satoshi and millisatoshi deominations,`AmtPaidSat` and `AmtPaidMsat` repsecitvely.

### RPC Changes:

The `ListInvoices` command can now optionally be paginated. This was added as after a certain amount of invoice have been created, we can no longer return them in a single response over gRPC. On the command line, a new set of arguments have been added to control the pagination: 
```
⛰ lncli listinvoices -h
NAME:
   lncli listinvoices - List all invoices currently stored.

USAGE:
   lncli listinvoices [command options] [arguments...]

CATEGORY:
   Payments

OPTIONS:
   --pending_only        toggles if all invoices should be returned, or only those that are currently unsettled
   --index_offset value  the number of invoices to skip (default: 0)
   --max_invoices value  the max number of invoices to return (default: 0)
```

A new [`ClosedChannels` RPC has been added which will allow users to query for their historical closed channel state](https://github.com/lightningnetwork/lnd/pull/1274). The new command allows users to query for a particular _close type_ as well: 
```
⛰i  lncli closedchannels -h
NAME:
   lncli closedchannels - List all closed channels.

USAGE:
   lncli closedchannels [command options] [arguments...]

CATEGORY:
   Channels

OPTIONS:
   --cooperative       list channels that were closed cooperatively
   --local_force       list channels that were force-closed by the local node
   --remote_force      list channels that were force-closed by the remote node
   --breach            list channels for which the remote node attempted to broadcast a prior revoked channel state
   --funding_canceled  list channels that were never fully opened
```

### On-Chain Fee Management 

On-chain fee management within `lnd` has been [revamped in order to fix a number of errors related to fees being too low, and rounding errors that can occur when converting between vsize and weight](https://github.com/lightningnetwork/lnd/pull/1644). With these changes, we now use the `kilo-weight` unit everywhere internally, and now also ensure that we never dip below the widely used min relay fee on the network. In the past there were many issues related to funds not being swept from contracts due to sweeping transaction not propagating during times when fees on mainnet and testnet where very low. 


## Changelog 

The full list of changes since `0.4.2-beta` can be found here: 
  * https://github.com/lightningnetwork/lnd/compare/v0.4.2-beta...v0.5-beta

# Contributors (Alphabetical Order)
* 34ro 
* Ben Woosley 
* Brenden Matthews 
* Conner Fromknecht 
* Dan Bolser
* Johan T. Halseth 
* John Griffith 
* jonny1000
* Joost Jager 
* Lightning Koala 
* hackerrdave
* Matthew Lilley 
* maurycy
* Offer Markovich 
* Olaoluwa Osuntokun 
* Oliver Gugger 
* parth 
* Phil Opaola 
* rawtxapp
* Rudy Godoy 
* Rui Gomes 
* Sebastian Delgado 
* shtirlic
* Stefan Menzel
* Suriyaa ✌️️
* t4sk 
* Vadym Popov 
* Valentine Wallace 
* Vegard Engen 
* Wilmer Paulino 
* Xinxi Wang 
* Yaacov Akiba Slama 
* Yohei Okada 
",49765480
83,False,False,2018-09-06T04:18:08Z,2018-09-06T04:44:03Z,"This release marks the _5th_ major release release of `lnd`: `v0.5-beta`! This release marks a massive step in the robustness and reliability of `lnd` as a routing node daemon for the Lightning Network. Additionally, a number of optimizations have been implemented which will reduce the memory and CPU footprint of `lnd` making it more amendable to run on smaller devices like Raspberry Pis and also eventually mobile phones! A number of bug fixes related to reliable HTLC forwarding, persistence recovery, and path finding have also landed in this release. As a result users should generally find path finding to be a smoother experience, and should find that `lnd` is able to recover from a number of partial and complete failures in routine protocol exchanges. 

The `0.5-beta` release doesn't include any _strictly_ breaking changes. So a result, users should find the upgrade process to be smooth. If one is upgrading from 0.4.2, the initial starting logs should look something like: 
```
2018-08-29 01:50:42.690 [INF] LTND: Version 0.5.0-beta commit=73af09a06ae9cd5ba92a376e8253ae5450fe09cc
2018-08-29 01:50:42.690 [INF] LTND: Active chain: Bitcoin (network=mainnet)
2018-08-29 01:50:42.925 [INF] CHDB: Checking for schema update: latest_version=5, db_version=0
2018-08-29 01:50:42.925 [INF] CHDB: Performing database schema migration
2018-08-29 01:50:42.925 [INF] CHDB: Applying migration #1
2018-08-29 01:50:43.100 [INF] CHDB: Populating new node update index bucket
2018-08-29 01:50:45.345 [INF] CHDB: Populating new edge update index bucket
2018-08-29 01:51:19.532 [INF] CHDB: Migration to node and edge update indexes complete!
2018-08-29 01:51:19.532 [INF] CHDB: Applying migration #2
2018-08-29 01:51:19.613 [INF] CHDB: Migrating invoice database to new time series format
2018-08-29 01:51:19.613 [INF] CHDB: Migration to invoice time series index complete!
2018-08-29 01:51:19.613 [INF] CHDB: Applying migration #3
2018-08-29 01:51:19.613 [INF] CHDB: Migrating invoice database to new outgoing payment format
2018-08-29 01:51:19.613 [INF] CHDB: Migration to outgoing payment invoices complete!
2018-08-29 01:51:19.613 [INF] CHDB: Applying migration #4
2018-08-29 01:51:57.457 [INF] CHDB: Migration of edge policies complete!
2018-08-29 01:51:57.457 [INF] CHDB: Applying migration #5
2018-08-29 01:51:57.458 [INF] CHDB: Migrating database to support payment statuses
2018-08-29 01:51:57.458 [INF] CHDB: Marking all known circuits with status InFlight
2018-08-29 01:51:57.458 [INF] CHDB: Marking all existing payments with status Completed
2018-08-29 01:51:57.458 [INF] CHDB: Migration of payment statuses complete!
``` 

One `lncli` related change that users running on `simnet` or `testnet` will notice is that the default location for macaroons has now _changed_. As a result, `lnd` will generate a **new set of macaroons** after it has initially been upgraded. Further details will be found below, but `lnd` will now generate a distinct set of macaroons for `simnet`, `testnet`, and `mainnet`. As a result, you may need to supply additional arguments for `lncli` to have it work as normal on `testnet` like so: 
```
lncli --network=testnet getinfo
```
or
```
lncli --chain=litecoin --network=testnet getinfo
```

In order to cut down on the typing one needs to go through, we recommend creating an alias like so:
```
alias tlncli=lncli --network=testnet
```

**NOTE**: In this release, the `--noencryptwallet` command line and config argument to `lnd` has been phased out. It has instead been replaced with an argument identical in functionality, but distinct in naming: `--nowalletseed`. The rationale for this change is to remove the foot gun that was the prior config value, as many users would unknowingly create _mainnet_ nodes using the argument. This is dangerous, as if done, the user wouldn't receive a _recovery mnemonic_ to recover their on-chain funds in the case of disaster.  We've changed the name of the argument to better reflect the underlying semantics. 

# Verifying the Release 
In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import `roasbeef`'s key if you haven't done so already:
```
curl https://keybase.io/roasbeef/pgp_keys.asc | gpg --import
```

The [keybase page of `roasbeef`](https://keybase.io/roasbeef) includes several attestations across distinct platforms in order to provide a degree of confidence that this release was really signed by ""roasbeef"". 

Once you have his PGP key you can verify the release (assuming `manifest-v0.5-beta-rc2.txt` and `manifest-v0.5-beta-rc2.txt.sig` are in the current directory) with: 
```
gpg --verify manifest-v0.5-beta-rc2.txt.sig
```

That will verify the signature on the main manifest page which ensures integrity and authenticity of the binaries you've downloaded locally. Next, depending on your operating system you should then re-calculate the `sha256` sum of the binary, and compare that with the following hashes (which are included in the manifest file): 
```
0e7b733346734882f52f635c1d76473f9d2eda045a581c4c42e67d3044f04de6  lnd-darwin-386-v0.5-beta-rc2.tar.gz
73b6cecf56cfd7895890aea2e5dee5ea56e521f6cc65f8cea5482dfe94fd984a  lnd-darwin-amd64-v0.5-beta-rc2.tar.gz
cda6e9399a6b3dc447d2ccaf6679b3affc4220619c9d1aa859fd5a915abc97ce  lnd-dragonfly-amd64-v0.5-beta-rc2.tar.gz
ae4df8a4f871f9bf57498084ed3939eb4f7bf108c573ff85bf50023f655492eb  lnd-freebsd-386-v0.5-beta-rc2.tar.gz
7c21b6db971550bd6fe182d79b79028cf10fa41ddeeb856adb6369fd9d036e95  lnd-freebsd-amd64-v0.5-beta-rc2.tar.gz
b65c1b5bbfce0d2491e9a0a84924b7b975f789142bd4449ef073ca4d49b2db4e  lnd-freebsd-arm-v0.5-beta-rc2.tar.gz
60254c1ce30dc08faa68b87cd29264fc36eb27fad1bc7f6b15d80b1fe176a09d  lnd-linux-386-v0.5-beta-rc2.tar.gz
1ae4bd6a30f0bb4a4077fc40c3782a27ec48dcc41bb96f9faa8f56506f3a4fc3  lnd-linux-amd64-v0.5-beta-rc2.tar.gz
d82eb2ee2cd89d0689ed4582ad9803700f2db0d94449e2c7b239be05a133c899  lnd-linux-arm-v0.5-beta-rc2.tar.gz
4b26f06cc3d9f8a1aefeefb5399ac45ec693a719c0f3a39a42b582213022816a  lnd-linux-arm64-v0.5-beta-rc2.tar.gz
eac9ae87925c5b1bc1b7235a720992aa202a61aed789e8e235d2dd1d525e4ef3  lnd-linux-mips64-v0.5-beta-rc2.tar.gz
d9cdfa8655bf3dd8e32104d635532d71519cf4fb0f6e87a0c3fa590562273087  lnd-linux-mips64le-v0.5-beta-rc2.tar.gz
67a7004777d1a61c078ea2ed097adfa04c9184c6b909f0cefa6bddff14f7f752  lnd-linux-ppc64-v0.5-beta-rc2.tar.gz
c4ac913e6d516375516b8532d354e0cf242a2de5848aa868441a01078923ae5b  lnd-netbsd-386-v0.5-beta-rc2.tar.gz
b4727576bf1f453ef3261bc9fb65bc3b29c8949258818c1463bf21935d867712  lnd-netbsd-amd64-v0.5-beta-rc2.tar.gz
9369d62931dbd6977ad73e92add97960f63bdea97b55fa3d017a42db7b38d520  lnd-openbsd-386-v0.5-beta-rc2.tar.gz
f95a56223eb00ded888c22723cb662d9c827607d7880b01fb65daf565026d428  lnd-openbsd-amd64-v0.5-beta-rc2.tar.gz
15ee42130313fbfe81f5090064a26268bb21e3deba063f895d6e582fe84fd5d4  lnd-windows-386-v0.5-beta-rc2.zip
ad985b635651d59b74628d3f9e9bce7c17643c7326030b286246b6fe5a70d4ed  lnd-windows-amd64-v0.5-beta-rc2.zip
```

One can use the `shasum -a 256 <file name here>` tool in order to re-compute the `sha256` hash of the target binary for your operating system. The produced hash should be compared with the hashes listed above and they should match *exactly*. 

Finally, you can also verify the _tag_ itself with the following command: 
```
git verify-tag v0.5-beta-rc2
```

You should see the following if the verification was successful:  
```
gpg: Signature made Wed Sep  5 21:41:45 2018 PDT
gpg:                using RSA key 65317176B6857F98834EDBE8964EA263DD637C21
gpg: Good signature from ""Olaoluwa Osuntokun <laolu32@gmail.com>"" [ultimate]
```

After `go1.12` is released, we'll be switching to a method in order to allow _deterministic_ builds to allow for third party verifiability of the binaries included in this release.  

This release can also be [found in `roasbeef`'s public keybase folder](https://keybase.pub/roasbeef/lnd-v0.5-beta/). 

⚡️⚡️⚡️ OK, now to the rest of the release notes! ⚡️⚡️⚡️

# Notable Changes

### Switch to Mainline `btcsuite` Libraries 


With this release of `lnd`,[ the project no longer uses roasbeef's set of forks for the `btcsuite`](https://github.com/lightningnetwork/lnd/pull/1326) family of libraries such as `btcd`, and `btcutil`. The old set of forks will no longer be maintained as all development will now be focused on mainline `btcsuite`. Additionally, `roasbeef` is now a _maintainer_ of the `btcsuite` set of libraries. As a result, we'll be able to easily integrate any new feature or bug fixes we need to `btcsuite` directly, rather than maintaining our own fork again. As a result, we recommend that those users running `lnd` with a `btcd` upgrade to the latest versions of the master branch of `btcd`. 


### `txindex` For Full Node Backends is Now Optional!

Before this release, if a user was running with _any_ of the supported full node backends we _required_ them to run with the transaction index active. With this version of `lnd`, [running a full node backend with a transaction index is now _optional_!](https://github.com/lightningnetwork/lnd/pull/751) As a result, if a user wishes to run a lighter version of their full node without the transaction index, then they're able to do so. However, for performance reasons until the persistent height hints are re-activated, we _recommend_ running with an active transaction index for your full node which backs `lnd`. In either case, `lnd` will _automatically_ detect if the backing full node has an active transaction index and act accordingly.  

Future releases of `lnd` will allow for even lighter full node configuration by supporting pruned nodes as a first class citizen. 

### Neutrino BIP 157+158 Compliance and Optimizations 

This release of `lnd` contains several bug fixes, and optimizations for the `neutrino` light client backend. Additionally, [our implementation of BIP 157 and BIP 158 are now _fully_ compliant with the latest version of the set of BIPs](https://github.com/lightninglabs/neutrino/pull/54). The primary change between this version of the BIP 158 and the prior version lies in exactly [what the filters _contain_](https://github.com/lightninglabs/neutrino/pull/74) In a prior version, the regular filter contained: the txid of each transaction found in a block, the previous outpoint that all inputs spend, and finally the pkScript of each created output. The new version instead simply includes: the previous output script that each input references, and each pkScript created by outputs in the block. This modification results in more compact filters as we scripts can be de-duplicated across blocks, and we drop an additional element per transaction. Several core interfaces within `lnd` have been revamped to listen for spends based on scripts (rather than outpoints) and confirmations based on scripts (rater than txids). 

 A re-write of the syncing logic for neutrino was undertaken in order to fix a number of stalling and performance related bugs in the prior implementation. At the time of writing of these release notes [`btcd`](https://github.com/btcsuite/btcd) is the only full node implementation that is able to serve BIP 157 clients. The latest version of the master branch of `btcd` has also been updated to be fully compliant with both BIP 157 and 158. 

The latest version of the `neutrino` implementation that's packaged with lnd will now [cache filters](https://github.com/lightninglabs/neutrino/pull/72) and [blocks in memory](https://github.com/lightninglabs/neutrino/pull/88). In prior versions of the implementation _all_ filters would be written to disk. This is unnecessary, as in the typical case, a filter is only scanned and checked once, therefore it's safe to _never_ write them to disk and instead only maintain a simple in-memory cache with a size based eviction policy. Caching filters (with an option to write select filters to disk) allows us to reduce to reduce the on-disk footprint for the neutrino mode of operation. We'll also now maintain a cache for blocks as during channel validation, it's likely that a block contains several funding transactions. Caching these blocks allows us to cut down on redundant p2p traffic, instead utilizing a pre-deserialized version of a block for validation purposes.

Finally, [a number of bugs have been fixed in the primary rescan logic for `neutrino`](https://github.com/lightninglabs/neutrino/pull/77) which serves as a [base abstraction](https://github.com/lightninglabs/neutrino/pull/78) for many components within lnd.  


### Duplicate Payments 

A new `ControlTower` has been integrated into the switch, which [prevents payments exhibiting the reused payment hashes](https://github.com/lightningnetwork/lnd/commit/d6083e0d66ee1e2ce459eccc82fa600af437dfcb#diff-7360a64faae2dea0a15c7a0f0544da8bR352) from being in-flight simultaneously, in addition to rejecting further attempts once a payment to a given hash is successful. By comparing the payment hashes directly, this also prevents paying two distinct invoices that include the same payment hash.

### Query Graph Sync

With this version of `lnd`, [we now implement the ""query graph syncing"" feature which has recently been added to the BOLT specifications](https://github.com/lightningnetwork/lnd/pull/1106). With this change, establishing connections to new peers for a fresh node is much lighter. The primary distinction is that when requesting the network view of the node we're connecting to, we'll now longer request they send _all_ the data they have. Instead, treating the blockchain and channels opened within it as a time series, we're able to precisely request only the data we need, eliminating redundant bandwidth usage and processing on both sides. 

As a result of this change, the load on routing nodes should generally be much lower, as they'll only request _new_ channels they don't already know of from newly connected peers. We've taken an additional step forward, and now _require_ this feature for nodes that the neutrino mode will connect out to. By doing this, we ensure the node we're connecting to doesn't send any _zombie_ channels, causing us to populate our local network view with stale, likely abandoned channels. 

### Aggressive Graph Vertex Pruning 

In order to maintain a healthy view of the network, `lnd` currently prunes any channels which haven't sent out a channel update heartbeat in 2 weeks. We call these pruned channels ""zombie channels"". In this release, [we now go a step further and prune out any _nodes_ which don't have any active channels within the network](https://github.com/lightningnetwork/lnd/pull/1371. This serves to keep our view of the network tight and lively. 

`lnd` currently keeps a special set of `LinkNode`s within the database that represent nodes which we have direct channels with. In addition to this unconnected vertex pruning, we now ensure that we won't automatically attempt to connect to a node on start up if we don't have any existing channels to itself. In the past a lack of this feature has caused issues for larger nodes that have historically had a high channel turn over rate. 


### Async Daemon Start Up

In prior versions of `lnd` a number of blocking actions such as re-registering for confirmation  and spend notifications would slow down the start up time of the deamon as we would wait for things like historical dispatches to finish before moving onto the next sub-system to start up. Additionally, in prior release establishing a new peer connection was done in a synchronous manner, meaning that we would only be able to carry out a single p2p handshake at a time. In the worst case, `lnd` would take tens of minutes to start up if the node was heavily loaded with channels. 

[In this new release we've modified all `ChainNotifier` registrations to be fully async](https://github.com/lightningnetwork/lnd/pull/1628). As a result, we'll [no longer block for their historical dispatch checks on startup](https://github.com/lightningnetwork/lnd/pull/1581), and instead can pipeline the start up of all sub-systems within the daemon. On the server side, [once we obtain a TCP socket, all other peer negotiation is now done in a _distinct_ goroutine](https://github.com/lightningnetwork/lnd/pull/1658). These two changes should dramatically lower the initial start up time of the daemon for more heavily loaded nodes. 

### New `SendToRoute` RPC!

[A new routing/payment related RPC has been added to lnd: `SendToRoute`](https://github.com/lightningnetwork/lnd/pull/747). The RPC can be seen as a companion RPC to the existing `QueryRoutes` RPC. One can view this RPC as the Lightning analog to the `createrawtransaction` RPC typically implemented within Bitcoin full node daemons. The `SendToRoute` RPC allows a caller to specify a _custom_ route, which includes all details required to dispatch an HTLC such as the fee and time lock information at each hop of the route. The RPC has been fashioned in a way that allows users to either re-use the existing output from the `QueryRoutes` command, or craft a custom route by hand via a special JSON route format. 

There are three ways to specify routes:
 
* using the --routes parameter to manually specify a JSON encode set of routes in the format of the return value of queryroutes: `lncli sendtoroute --payment_hash=<pay_hash> --routes=<route>`
 
* passing the routes as a positional argument: `lncli sendtoroute --payment_hash=pay_hash <route>`

 * or reading in the routes from stdin, which can allow chaining the response from queryroutes, or even read in a file with a set of pre-computed routes: `lncli queryroutes --args.. | lncli sendtoroute --payment_hash=H -`. Notice the '-' at the end, which signals that lncli should read the route in from stdin


This was one of our most requested RPCs as it allows the caller to _execute advanced maneuvers_ on the Lightning Network **such as self-rebalancing channels**, making custom protocols which rely on data delivered within the Sphinx per-hop onion blob, and also cross-chain atomic swaps which need to manually specify the a particular HTLC is to be forwarded on a distinct chain from that which it came in on. 

### Strict Local Forwarding Switch

In order to more precisely support the creation of self channel rebalancing scripts, we've modified the HTLC Switch to implement [_strict_ local forwarding](https://github.com/lightningnetwork/lnd/pull/1527). Before this change, when node had multiple channels to another node, and the first hop specified was meant to traverse that nodes links, the system would select the link with the _highest_ available bandwidth. However, it may be the case that a users rebalancing script instead wishes to target a distinct channel. With strict forwarding however, we'll ensure that we take the _specified_ first hop rather than attempt to make a forwarding time decision using our additional information. Notably, we don't do so for remote routes, as there's no guarantee as to _which_ link a node forwarding a remote HTLC will choose as there's no way to enforce a particular action. 

### Automatic Channel Disable Policy

Within the protocol there exists a mechanism that allows nodes to ""disable"" a channel, marking it ineligible for carrying routed HTLC payments. Disabling channels that are faulty, inactive, or unable to route for w/e reason allows nodes on the network to have a better view of the ""healthy"" set of routable channels. The latest version of `lnd` will now disable channels in two instances:
  1. [When we co-op close or force close a channel](https://github.com/lightningnetwork/lnd/pull/1387). This signals to the network that the channel is in the process of being closed on the main chain, and therefore isn't eligible to route HTLCs. By sending out this disable update, we save the network a set of between the point of commitment broadcast, and the transaction being mined into the chain. 
  2. [If the peer is unreachable for a period of time `T`](https://github.com/lightningnetwork/lnd/pull/1687). The current default period is 20 miuntes, however this can be set from the command line via the `inactivechantimeout` option:
```
      --inactivechantimeout=                                  If a channel has been inactive for the set time, send a ChannelUpdate disabling it. (default: 20m0s)
```

These two measures should serve to reduce the number of failed routed HTLCs due to `UnknownNextPeer` errors, and we start to tend towards a network view of nodes with high uptime and availability. This is a small step towards our goal of bootstrapping a network with reliable, highly available nodes. 

### Reduced Idle CPU Usage

Users operating more heavily-loaded routing nodes should generally perceive lower idle CPU usage time. A number of optimization have been executed which reduce the number of idle goroutines, the number of goroutines per connection/channel, and also the number of high frequency tickers within the codebase. 

In 0.4.2, idle links would wake up every 50ms to check if they had any HTLCs to process. This caused wasteful CPU utilization, since we should only need to do so if there are unprocessed HTLCs. To remedy this, a new [ticker](https://github.com/lightningnetwork/lnd/tree/master/ticker`) package was implemented that allows the tickers to be stopped and resumed conditionally, [based on the presence or absence of pending HTLCs](https://github.com/lightningnetwork/lnd/commit/1c456a51443292728155890c4e9f4eae83c17d3f#diff-cce38a878c9f1dd2eda8083f5316bc15). With 0.5, the idle CPU usage of active links has been reduced drastically since links will now be truly asleep when not processing HTLCs.

### Automatic Tor V2+V3 Onion Services

Prior versions of `lnd` introduced the ability to establish _outbound_ connections over Tor via the socks proxy interface. This allows users to run routing nodes or clients without revealing the _location_ of their routing nodes.  This adds an additional layer of privacy as nodes no longer need to expose their IP address in order to route or send payments within the network. The latest version of `lnd` takes things a step further and enables [_automatic provisioning_](https://github.com/lightningnetwork/lnd/pull/1159) of an onion service to allow a node to accept _inbound_ connections over Tor. 

The auto setup works as follows: if `--tor.active --tor.v2` is set within the configuration, then `lnd` will attempt to automatically seek out and authenticate with the Tor daemon running at the specified control port. If we're able to connect out, then we'll create a new onion service identity, and modify `lnd` to _only_ listen on `localhost`. In this mode, we also ensure that all DNS queries utilize the SOCKS5 interface for tunneling DNS over Tor. In this version we also support the [_new_ v3 onion services](https://github.com/torproject/torspec/blob/master/rend-spec-v3.txt) ([`--tor.v3`](https://github.com/lightningnetwork/lnd/pull/1516). The new onion service protocol represents a large step for the Tor network as it does away with the existing legacy crypto used within the system, and also strengthens onion services against a number of discovered attacks. 

We'll soon be updating our DNS seed to be able to crawl and serve onion service peers. This will allow those that wish to run _purely_ over Tor to easily find peers they can connect to. For further documentation we recommend users check out [our official Tor integration docs](https://github.com/lightningnetwork/lnd/blob/master/docs/configuring_tor.md), as well as the relevant section of the `sample-lnd.conf`. 

### Dataloss Protection Recovery 

Within the protocol, there exists a measure put in place that will allow nodes that have partially or complete lost data to recover a portion of the funds they had within active channels. We call this feature [""dataloss protection""](https://github.com/lightningnetwork/lightning-rfc/blob/master/02-peer-protocol.md#message-retransmission). The latest version of `lnd` has now completely implemented this feature! In the rare case that users exhibit partial data loss, upon connection to a peer which we had a channel open with, `lnd` will _automatically_ prompt the user to close out the channel as it can no longer be used. At that point, we'll then proceed to sweep out settled balance within the commitment transaction on-chain, and clean up the remaining channel state. 

Future versions of `lnd`, will finalize the ingratiation of this feature by also introducing _static channel backups_. These backups are essentially static files which represent a _description_ of the channel, namely: the parameters used, location on chain, channel peer, key paths we used within the channel, etc. With this set up backups and a users seed, in the face of _total_ data loss, we'll be able to recover the settled balance in the set of open channels. 

### Reliability improvements to `bitcoind` backend

Prior versions of `lnd` were plagued with reliability issues when interacting with the `bitcoind` backend. We'd at times miss notifications, or even drop block notification causing is to miss events such as a funding transaction confirming, or a channel being closed. With this new version of `lnd` we've implemented several measures to ensure that we no longer miss any notifications from `bitcoind`, and even if we do, then we're able to safely backtrack and recover from any missed block notifications. 

Before `0.5`, we would receive block and transaction notification via the _same_ zmq socket. As transaction notifications (mempool inclusion) is much more common than block notifications, they would dominate the queued backlog at any given time. In certain conditions, due to the notification backlog, block notifications would be dropped once the queue gets above a high water mark. To avoid possibly missing block notifications, [we now split the notification sources into two distinct sockets](https://github.com/btcsuite/btcwallet/pull/511). This ensures that the less critical transaction notifications [are isolated to a distinct queue from the block notifications](https://github.com/lightningnetwork/lnd/pull/1566). Due to this change, users must now specify distinct sockets for block and transaction notifications like so: 
```
lnd --bitcoin.active --bitcoin.testnet --bitcoin.node=bitcoind --bitcoind.zmqpubrawblock=tcp://127.0.0.1:28332 --bitcoind.zmqpubrawblock=tcp://127.0.0.1:28333
``` 

### HTLC Switch Persistence and Reliability Improvements 

[Removing links has been reworked to be blocking](https://github.com/lightningnetwork/lnd/commit/c78e81d32b46af7b259026f832f11a24dc258da8#diff-cce38a878c9f1dd2eda8083f5316bc15) from the caller’s perspective, offering safer isolation during shutdown and interactions with flapping peers. When shutting down LND, [stopping links is now done concurrently](https://github.com/lightningnetwork/lnd/commit/4e093a6cd29bc9f748fdeb5401836060039017f0#diff-cce38a878c9f1dd2eda8083f5316bc15), offering faster shutdowns to users with high channel counts.

Prior to the added safety surrounding removal of links, some issues were found that caused users to end up with an invalid, albeit recoverable, database state. 0.5 includes a fix to [automatically cleanup any databases that entered this state](https://github.com/lightningnetwork/lnd/commit/a21381056357e18bf11e4c05181683c1ca1b2f1b#diff-cce38a878c9f1dd2eda8083f5316bc15), which would otherwise prevent startup. The link startup logic has also been altered to [ensure we don’t read from this invalid state](https://github.com/lightningnetwork/lnd/commit/5cf911a762bdbbe9e6536026d450dbf3d9a36503#diff-cce38a878c9f1dd2eda8083f5316bc15).

The htlcswitch relies on a series of internal logs, referred to as forwarding packages, for ensuring that HTLCs are retransmitted internally with at-least-once semantics. An issue was fixed in 0.5 where [a missing reference on failed packets](https://github.com/lightningnetwork/lnd/commit/4f2137eafc4f4a4f372d4c2792b4f482377ed89d#diff-cce38a878c9f1dd2eda8083f5316bc15) would prevent the persistent references from being removed, and resulting in unnecessary internal retransmission and processing of the HTLCs on startup and peer reconnection. To correct databases that were not properly cleaning up this state, [links will now cleanup any references for packets that are detected as duplicates internally](https://github.com/lightningnetwork/lnd/commit/81b4af2ec8213d95a31b0b3af1468de3a838d74f#diff-cce38a878c9f1dd2eda8083f5316bc15). The combined result of both changes is reduced log spam and startup/reconnection latency.

[Processing of locally-sourced HTLC responses has been made asynchronous](https://github.com/lightningnetwork/lnd/commit/b59fea460a26b9747cd25ae93a48d2b847a593b1#diff-cce38a878c9f1dd2eda8083f5316bc15), so that it does not block the primary forwarding loop within the switch resulting in better performance and database batching. The ordering of database operations has also been reordered to properly cleanup forwarding package references, even if the daemon has been restarted. References that had not been cleaned up prior will be cleaned up after a restart with 0.5.

On channel reestablisment, links will now [force close the channel when detecting certain irrecoverable failure cases](https://github.com/lightningnetwork/lnd/commit/ebed786b2ac00921120e1dce05c2005c80da1c67#diff-cce38a878c9f1dd2eda8083f5316bc15), such as remote data loss and invalid commitment points.

When sending locally-initiated payments out of the switch, we will now [honor the exact channel requested by the channel router](https://github.com/lightningnetwork/lnd/commit/753537123832d0c480c1f6c563a525d78d529de2#diff-7360a64faae2dea0a15c7a0f0544da8bR789). Previously, we allowed the switch to select the best link to the same peer if multiple existed. However, this caused issues when trying to use `SendToRoute` since the user couldn’t be sure which channel the payment would flow over. This change allows provides a more feedback mechanism to the router, since local failures are now known to have been sourced from the outgoing link.

[Link-level fee updates are less aggressive](https://github.com/lightningnetwork/lnd/commit/4cc60493d233b4dcb4bc1ffab85a56f135d061e5#diff-cce38a878c9f1dd2eda8083f5316bc15), and now use randomized interval for each link. Prior all links checked for fee updates with each block, which resulted in an unnecessary number of state updates.

Timelocks of forwarded HTLCs are now [validated against the outgoing channel policy](https://github.com/lightningnetwork/lnd/pull/1447). Previously, the CLTV was incorrectly compared to the policy of the incoming link, resulting in unnecessary routing failures.

An exit hop will now [properly return FailFinalExpiryTooSoon](https://github.com/lightningnetwork/lnd/commit/d76bacee0e99ef58b57871310e278ff4049b47a8#diff-cce38a878c9f1dd2eda8083f5316bc15) when rejecting an HTLC whose timeout is too close to the current block height. The previous behavior incorrectly returned FailFinalIncorrectCltvExpiry, which should only be used if the timeouts are malformed.


### Default Autopilot Improvements 

The current autpoilot driving agent has received a number of updates in this new version.

[t's now possible to instruct the agent to only create unadvertised channels via the `autopilot.private` flag](https://github.com/lightningnetwork/lnd/pull/1692). This will be useful for desktop and mobile clients which won't be actively routing payments. When attempting to receive funds over these non-advertised channels, the `AddInvoice` RPC will now automatically populate the required routing hints which will allow nodes to traverse these non-advertised channels on the ""edge"" of the graph. 

One can now also [specify the number of confirmation that outputs need to have](https://github.com/lightningnetwork/lnd/pull/1693) before the agent starts to use them as inputs into channels. By specifying 0 confirmations, the agent is able to aggressively _pipeline_ channel openings, resulting in a faster time-to-first-n-channels than prior versions. 

Finally, [the agent will now first probe nodes to see if they're actually active and online](https://github.com/lightningnetwork/lnd/pull/1694), before marking them as a target directive to be executed. This will result in less failed attempts, as we only try to open a channel with a node that we know will respond to our request. 


### Distinct Network Macaroons

In prior versions of `lnd`, a _single_ set of macaroons were used for all possible networks (testnet, simnet, mainnet). This approach was flawed however, due to the fact that if one gave out a (possibly attenuated) macaroon for say testnet, then that same macaroon would be utilized for mainnet. This new version of `lnd` has now reverted this behavior, in favor of _network specific_ macaroons. With this change, the default location of all macaroons has been modified, and the behavior of `lncli` change as well. Once users upgrade, a _new_ set of macaroons will be created under the chain data directory for each supported network. For example, one can find the `testnet` invoice macaroon for Bitcoin at: 
```
~/.lnd/data/chain/bitcoin/testnet/invoice.macaroon
```

Most other behavior has been left unchanged, however, one must now also specify the target `network` (and also possibly `chain`) when using `lncli`, via the new set of arguments: 
```
   --chain value, -c value    the chain lnd is running on e.g. bitcoin (default: ""bitcoin"")
   --network value, -n value  the network lnd is running on e.g. mainnet, testnet, etc. (default: ""mainnet"")
```

Any scripts or gRPC programs will need to be modified in order to utilize the new set of macaroons, as any other prior created macaroons are now invalidated, as the root macaroon key has been regenerated. 

### Revamp of HTLC Pathfinding Algorithm

A number of changes have been made to the default HTLC path finding algorithm to fix exiting bugs in our [fee calculation](https://github.com/lightningnetwork/lnd/pull/1321), [edge weighting](https://github.com/lightningnetwork/lnd/pull/1358), and also [fee ceiling enforcement](https://github.com/lightningnetwork/lnd/pull/1382). 

The old path finding algorithm would proceed to look for a path to the destination, starting from a given source (`lnd`). The old algorithm had several issues, namely: we would take into account our first outgoing edge in the edge weighting, we wouldn't properly factor in the carry over backwards in the route as fees were added meaning we wouldn't compute the fee ceiling properly, and finally we would skew the path finding based on _our_ own outbound routing policies. The new path finding code fixes all of these issues, and also revamps our testing infrastructure to make it easy to add new test cases in the future. 

Our old weighting function would at times prefer a route with higher fees but an identical timelock, over a shorter route with lower fees and a similar timelock. Rather than try to scale the fees or timelock to be promotional, we instead now normalize the timelock values to essentially act as ""extra fees"". We borrow the terminology of a ""risk factor"" from c-lightning.  [Check out this table from the original PR](https://github.com/lightningnetwork/lnd/issues/1346#issuecomment-395995294) for a demonstration w.r.t how this improves our path selection given a set of candiate routes. 

Finally, the prior path finding code had a bug where it wouldn't properly carry over the fees from the prior hop when traversing backwards to convert a path into a route. This issue would cause unnecessary HTLC routing errors when routing over edges with a particular configuration fee wise. This new release of lnd fixes this bug by ensuring we properly compute and carry over fees which allows us to properly detect the case where a link can carry the initial amount, but once we factor in fees, it can no longer carry the final HTLC. 

### `contractcourt` Reliability Improvements 

A number of bug fixes and reliability improvements has been made within the `contractcourt`, the sub-system that lnd uses to handle all on-chain interaction related to contract (such as HTLCs, etc). [We now ensure that the handoff of a closed channel to the resolver which will ultimately resolve any pending contract is fully reliable](https://github.com/lightningnetwork/lnd/pull/1696).  

### Optional NAT Traversal (NAT-PMP + UPnP)

`lnd` has now [gained the ability to _optionally_ attempt NAT traversal](https://github.com/lightningnetwork/lnd/pull/1384) so clients that are behind at NAT are able to establish incoming connections from other peers in the network. The current system will try either NAT-PMP or UPnP to punch a hole in the nat, which ever of them works first. If `lnd` is unable to punch a hole, then it will fail to start in order to inform the users that the networking maneuver was unsuccessful. Additionally, `lnd` will spawn a background goroutine which will periodically poll the router to see if the external IP has changed, if so, then we'll send out a _new_ announcement on the network so that nodes always reach us at our latest IP address. This feature will be useful for those that cannot obtain static IPs where they run their nodes, and instead have a dynamic IP address which changes every few hours/days. 

In order to activate the auto NAT traversal use the following argument: 
```
      --nat                                                   Toggle NAT traversal support (using either UPnP or NAT-PMP) to automatically advertise your external IP address to the network -- NOTE this does not support devices behind multiple NATs
```

### Unix Socket Support for RPC

The primary [gRPC server is now able to listen on unix sockets](https://github.com/lightningnetwork/lnd/pull/1262)! An example of a valid configuration is: 
```
rpclisten=unix:///var/run/lnd/lnd-rpclistener.sock
```
### Robust Streaming Notification Delivery for Received Payments

In this new version of `lnd`, [we modify the streaming invoice subscription API slightly in order to allow callers to have assurance that they haven't missed any new payments](https://github.com/lightningnetwork/lnd/pull/1125). The `SubscribeInvoice` API now has two new values: `add_index`, and `settle_index`. To match these new values, the `Invoice` message has also gained a similar set of fields. These two indexes effectively act as an event time series: each time a new invoice is added the `add_index` will be incremented, and each time a new invoice is settled the `settle_index` will be incremented. With this new feature, clients can now specify one or both of these new optional fields with the _last_ index they know of. If specified, then we'll query the database to find all events greater than this index, and then deliver these backlog notifications before sending out any _new_ notifications. 

Care has been taken to ensure that the new API is backwards compatible with the expectations of the _old_ API. Namely, if the fields aren't specified (are zero), then no backlog notifications will be delivered. As a result, the index on-disk actually starts at 1. 

A database migration has been created in order to upgrade old databases to the new invoice schema that has these two new indexes which need to be updated each time a new invoice has been added, or an exiting one settled. 

Finally, a new field has been added to the on-disk `Invoice` struct: `AmtPaid`. This new field allows the link to commit exactly what value was accepted for the final invoice. This is important as invoices may have not have any value attached to them at all (""donation"" invoices), or it may be the case that the invoice was overpaid. In either case, the final value accepted for an invoice will now be stored on disk, and queryable over the RPC interface. 

### RPC Changes:

The `ListInvoices` command can now optionally be paginated. This was added as after a certain amount of invoice have been created, we can no longer return them in a single response over gRPC. On the command line, a new set of arguments have been added to control the pagination: 
```
⛰ lncli listinvoices -h
NAME:
   lncli listinvoices - List all invoices currently stored.

USAGE:
   lncli listinvoices [command options] [arguments...]

CATEGORY:
   Payments

OPTIONS:
   --pending_only        toggles if all invoices should be returned, or only those that are currently unsettled
   --index_offset value  the number of invoices to skip (default: 0)
   --max_invoices value  the max number of invoices to return (default: 0)
```

A new [`ClosedChannels` RPC has been added which will allow users to query for their historical closed channel state](https://github.com/lightningnetwork/lnd/pull/1274). The new command allows users to query for a particular _close type_ as well: 
```
⛰i  lncli closedchannels -h
NAME:
   lncli closedchannels - List all closed channels.

USAGE:
   lncli closedchannels [command options] [arguments...]

CATEGORY:
   Channels

OPTIONS:
   --cooperative       list channels that were closed cooperatively
   --local_force       list channels that were force-closed by the local node
   --remote_force      list channels that were force-closed by the remote node
   --breach            list channels for which the remote node attempted to broadcast a prior revoked channel state
   --funding_canceled  list channels that were never fully opened
```

### On-Chain Fee Management 

On-chain fee management within `lnd` has been [revamped in order to fix a number of errors related to fees being too low, and rounding errors that can occur when converting between vsize and weight](https://github.com/lightningnetwork/lnd/pull/1644). With these changes, we now use the `kilo-weight` unit everywhere internally, and now also ensure that we never dip below the widely used min relay fee on the network. In the past there were many issues related to funds not being swept from contracts due to sweeping transaction not propagating during times when fees on mainnet and testnet where very low. 


## Changelog 

The full list of changes since `0.4.2-beta` can be found here: 
  * https://github.com/lightningnetwork/lnd/compare/v0.4.2-beta...v0.5-beta

# Contributors (Alphabetical Order)
* 34ro 
* Ben Woosley 
* Brenden Matthews 
* Conner Fromknecht 
* Dan Bolser
* Johan T. Halseth 
* John Griffith 
* jonny1000
* Joost Jager 
* Lightning Koala 
* hackerrdave
* Matthew Lilley 
* maurycy
* Offer Markovich 
* Olaoluwa Osuntokun 
* Oliver Gugger 
* parth 
* Phil Opaola 
* rawtxapp
* Rudy Godoy 
* Rui Gomes 
* Sebastian Delgado 
* shtirlic
* Stefan Menzel
* Suriyaa ✌️️
* t4sk 
* Vadym Popov 
* Valentine Wallace 
* Vegard Engen 
* Wilmer Paulino 
* Xinxi Wang 
* Yaacov Akiba Slama 
* Yohei Okada 
",49765480
84,False,True,2018-08-27T21:24:24Z,2018-08-27T21:50:52Z,,49765480
85,False,False,2018-05-29T23:30:19Z,2018-05-30T01:22:50Z,"This release marks the second patch release to the recently released `v0.4-beta`! No new major features have been added in this release. Instead, this release packages a series of bug fixes, modifications to ensure better cross-implementation compatibility, the ability to perform on-chain seed rescans w/ full look ahead, and a series of important fixes related to the switch and state machine. No _database level_ breaking changes have been made in this release, as a result users should be able to perform a clean update. 

# Verifying the Release 
In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import `roasbeef`'s key if you haven't done so already:
```
curl https://keybase.io/roasbeef/pgp_keys.asc | gpg --import
```

The [keybase page of `roasbeef`](https://keybase.io/roasbeef) includes several attestations across distinct platforms in order to provide a degree of confidence that this release was really signed by ""roasbeef"". 

Once you have his PGP key you can verify the release (assuming `manifest-v0.4.2-beta.txt` and `manifest-v0.4.2-beta.txt.sig` are in the current directory) with: 
```
gpg --verify manifest-v0.4.2-beta.txt.sig
```

That will verify the signature on the main manifest page which ensures integrity and authenticity of the binaries you've downloaded locally. Next, depending on your operating system you should then re-calculate the `sha256` sum of the binary, and compare that with the following hashes (which are included in the manifest file): 
```
62c6d6df01d3adab63af0e25987e8567a9e1dec3b0d42c2df9a10e6cde6675d8  lnd-darwin-386-v0.4.2-beta.tar.gz
b0636c39fec61e9a4e9d19c026393b3f080d93c0c674edaf4156df2ed2b1c244  lnd-darwin-amd64-v0.4.2-beta.tar.gz
b3e8ad43ebaaa357c930020996cb7f8d0db175d8187d893a4dc02b6ab1f1bf43  lnd-dragonfly-amd64-v0.4.2-beta.tar.gz
199fe9adea0c91c1ba93eac17781234bf98e05d83780b394592b30d60c80b88d  lnd-freebsd-386-v0.4.2-beta.tar.gz
db63789a8a94b13cf8dce041e81c0a403c9cda375efbd9a02dadb9670c791114  lnd-freebsd-amd64-v0.4.2-beta.tar.gz
a38a5c8930c12988cf241028c760f50d73e900b0fc578fd7b5d291779a186989  lnd-freebsd-arm-v0.4.2-beta.tar.gz
06aab3858f141d92e602097e64725292677b68f818914c026dfebde2676a38d8  lnd-linux-386-v0.4.2-beta.tar.gz
2b6b617d804bfee5352aefcabaae9e27e58013084f9c5654d3f1185222f604c8  lnd-linux-amd64-v0.4.2-beta.tar.gz
583afca9f4ebb53bc9a9ce2b643d686c28868c05e225b64c0694140e628f928b  lnd-linux-arm-v0.4.2-beta.tar.gz
ba206e02ed589f3779500e6ab48089b8af6dba3a19526afb2263c298afc9f137  lnd-linux-arm64-v0.4.2-beta.tar.gz
2cacf4bb0e252ebea2a47cf873c198aaabe0172bd09e7ffccbc1024a4474ff34  lnd-linux-mips64-v0.4.2-beta.tar.gz
016d6e7a3482e7ca52bd6ccc76f3cb3577a8b0aaf11e62f81a8d701203ba5d9c  lnd-linux-mips64le-v0.4.2-beta.tar.gz
e2788aa696ebb6dadf8d1ee9b3636ab27f6ca235c7132f9c00805b6b06fc9070  lnd-linux-ppc64-v0.4.2-beta.tar.gz
c3e4d58cf5f1f11b1e5e594d10c53399dc31e3c0f3b585cc12dbb2ef9a5a90c4  lnd-netbsd-386-v0.4.2-beta.tar.gz
5c582a393e4bd1eacff2490c90a81da7d70e6ade80d1ce83183df37cc813d516  lnd-netbsd-amd64-v0.4.2-beta.tar.gz
26f4d6be6bc73062034333e084d546ea524506200c92ca0168f9653c90225737  lnd-openbsd-386-v0.4.2-beta.tar.gz
7ab8e802029b878b849ec2d726834097211d54faecbd61f00610df90f70a75ef  lnd-openbsd-amd64-v0.4.2-beta.tar.gz
b7ea54308ada52ab599009577f375e8ff561fda3683d62f990a0cda38a1209a3  lnd-windows-386-v0.4.2-beta.zip
807fe7edc02741e1f433110af748219158e1f47181e0aa0f9de1ce175594a520  lnd-windows-amd64-v0.4.2-beta.zip
```

One can use the `shasum -a 256 <file name here>` tool in order to re-compute the `sha256` hash of the target binary for your operating system. The produced hash should be compared with the hashes listed above and they should match *exactly*. 

Finally, you can also verify the _tag_ itself with the following command: 
```
git verify-tag v0.4.2-beta
```

You should see the following if the verification was successful:  
```
gpg: Signature made Tue May 29 16:31:39 2018 PDT
gpg:                using RSA key 964EA263DD637C21
gpg: Good signature from ""Olaoluwa Osuntokun <laolu32@gmail.com>"" [ultimate]
```

This release can also be [found in `roasbeef`'s public keybase folder](https://keybase.pub/roasbeef/lnd-v0.4.2-beta/). 

# Notable Changes

### Litecoin

[The max payment size and channel size for Litecoin has been increased by ~60x](https://github.com/lightningnetwork/lnd/commit/e3637663942ef37053e43b0b9ae11bcdb00678a2). This is a stop gap measure before a feature bit is added to the protocol to enable arbitrarily sized payments and channel sizes. 

### `lnwallet`

[Full on-chain seed recovery with configurable look aheads is now fully implemented!](https://github.com/lightningnetwork/lnd/pull/1005). As a result, users will now be able to use their `aezeed` with `lncli create` or `lncli unlock` to trigger a full rescan to recover any on-chain funds. The implementation is generic, so it works with: `btcd`, `bitcoind`, and `neutrino`. The look ahead value is configurable in order to give users more control over the thoroughness of the on-chain key search. 

We'll now ensure that that any transaction broadcast have fee rates above the min relay fee of the node `lnd` is connected to. 

### Bitcoind and btcd Chain Backends

[A bug in the `bitcoind `chain backend has been fixed](https://github.com/lightningnetwork/lnd/commit/89e2ba41c9cbd552f1acb69c995d3a9e7e407d22) that would cause `lnd` to stall on start up at times due to an internal bug when attempting to rescan to see if an output has been spent or not. As a result, startup using the `bitcoind `backend should be generally much snappier. Future versions of `lnd` will continue to increase the performance of the `bitcoind` backend. Particularly, once the BIP 158 implementation is merged and exposed over RPC, we'll be able to use those filters for rescans internally as we do for `btcd`. 

[The `txindex` is now no longer required for either `btcd` or `bitcoind`!](https://github.com/lightningnetwork/lnd/commit/ead9555d40782b8d60846ac5bf86b591ba594db2). However, users will find that `lnd` is generally more performant if the index is enabled, as it saves us from performing manual rescans. `v0.5-beta` will contain an overhaul to the way we perform historical notifications dispatches which will eliminate manual rescanning all together. 

[It's now possible to shutdown `lnd` with the `lncli stop` command while `lnd` is still syncing with the chain backend](https://github.com/lightningnetwork/lnd/pull/1276). 

### Configuration and Documentation 

[Users can now configure log rotation to optional](https://github.com/lightningnetwork/lnd/commit/5eed171187310e822380045e24632c50c8e784d5). By default `lnd` will maintain 3 compressed log files on disk, rotating them over each time we fill up a new log file. When running with the `trace` or `debug` logging levels, the logging can be quite verbose, which warrants disabling log rotation all together or tweaking parms concerning the max log size and also the total number of log files to maintain. 

[`lnd` will now properly recognize the BIP 173 hrp prefix for regtest](https://github.com/lightningnetwork/lnd/commit/8649181e95105c2b103ad9300bcb05802b07d9ae). 

[The Javascript docs for `lnd`'s gRPC interface have been updated to show proper usage of macaroons and TLS cipher suites](https://github.com/lightningnetwork/lnd/commit/3c73329912df36324614073ac3097649c6b2b023). 

### `contractcourt`

A number of bugs have been fixed in the contract court ensuring that we don't play duplicate commitments, properly lay the remote party's full set of commitments, and [also ensure that all related goroutines exit properly on shutdown](https://github.com/lightningnetwork/lnd/commit/218293db4a19548baa43a7f829d984f1e78b3bba) (https://github.com/lightningnetwork/lnd/commit/c5169a79f597526486755af19e6220ae162a3b77). 

[The `ChannelArbitrator` sub-system has been modified to _only_ act on confirmed commitments](https://github.com/lightningnetwork/lnd/pull/1017). This fixes a number of bugs encountered and ensures that we'll only attempt resolve contracts which are properly buried in the chain. As a result, new state has been added to the `pendingchannels` RPC: commitment broadcast. Channels will be in this state once we broadcast a commitment, but before a transaction spending the funding output has been confirmed. We do this as although we broadcasted a commitment, it's possible that another distinct transaction is confirmed instead. In either case, we'll play which ever spending transaction is confirmed, and proceed to resolve any active contracts. 

The `ChainWatcher` has been modified to ensure [it _always_ plays _all possible_ active commitments](https://github.com/lightningnetwork/lnd/commit/a3227ba147107f663faaca8a6384a26ce7be49f7). 

[For cooperative channel closes, we'll now ensure that we play the transaction which _ultimately_ enters the chain](https://github.com/lightningnetwork/lnd/pull/1248), rather than assuming the final signed closing transaction would be the one that wins over. 

### Channel Funding 

[A bug has been fixed that would at times cause a state desynchronization](https://github.com/lightningnetwork/lnd/commit/cbfba79f46087bb0be1f40bb729adc0f8ced7bcc) if both sides were `lnd` nodes and had selected custom values for the CSV delay. 

### `BreachArbiter` 

The `BreachArbiter` (the sub-system tasked with enforcing justice against cheating channel peers) [has been _significantly_ simplified](https://github.com/lightningnetwork/lnd/commit/b9970aec47b02043a2fcb485669b9d1a3028c9de). Along the way, [hand off between the breach arb and the `contractcourt` has been improved to ensure the hand off is atomic](https://github.com/lightningnetwork/lnd/commit/e9eab3f79f336e3263057686dac67cf395b408fc), even in the phase of a breach at the point of a daemon shutdown. 

### Docker 

[The docker image for `lnd` is now around 10% the size of the prior image!](https://github.com/lightningnetwork/lnd/pull/1137) Additionally, it'll now pull in local changes rather than fetch the source from git. As a result, developers can now use the `docker-compose` set up for local simnet cluster management when doing development, or testing new pending PRs. 

[A ""production"" docker image has also now been added. With this, we'll start to post images for new `lnd` release on Docker Hub](https://github.com/lightningnetwork/lnd/commit/fbc722147f10f69f6c3a51b00e8cf5f24a324a07). 

### `lncli` and `lnrpc` 

Several errors that result from incorrect usage of the rpc interface, or invalid arguments have now been made clearer. 

[The `macaroon` package now contains a set of unit tests, as well as integration tests on the `lnd` level](https://github.com/lightningnetwork/lnd/pull/1137). This paves the way to the more flexible ""Macaroon Bakery"", which will allow callers to generate a set of custom macaroons. 

[The `GetInfo` command now contains the version that `lnd` is running](https://github.com/lightningnetwork/lnd/commit/bd398540c15ff8e27dbf71683e3e6331403ca079), and if compiled properly, will also display the commit hash that `lnd` was built off of. 

[A cosmetic bug wherein the payment hash for all active HTLCs on a channel was duplicated on the RPC level](https://github.com/lightningnetwork/lnd/commit/daeeca0bc357ae729d4631d2e88fc61fcb39c4ea). 

[It's now possible to turn off logging all together for all or a set of targeted sub-systems](https://github.com/lightningnetwork/lnd/commit/7f039980c120ab180ff6997499509ae45a168353). 

`lncli unlock` [will now display a more helpful error message when a user attempts to unlock an already unlocked wallet](https://github.com/lightningnetwork/lnd/commit/8ce73b3f744a2867da7955c0d0986fe50209c366). 

[Commands in `lncli` will now be grouped by category](https://github.com/lightningnetwork/lnd/pull/1165): 
```text
NAME:
   lncli - control plane for your Lightning Network Daemon (lnd)

USAGE:
   lncli [global options] command [command options] [arguments...]
   
VERSION:
   0.4.1 commit=80852601dbd2b84c257a1b52a7f13518ed8a6091
   
COMMANDS:
     getinfo     Returns basic information related to the active daemon.
     debuglevel  Set the debug level.
     stop        Stop and shutdown the daemon.
     help, h     Shows a list of commands or help for one command

   Channels:
     openchannel       Open a channel to a node or an existing peer.
     closechannel      Close an existing channel.
     closeallchannels  Close all existing channels.
     channelbalance    Returns the sum of the total available channel balance across all open channels.
     pendingchannels   Display information pertaining to pending channels.
     listchannels      List all open channels.
     getchaninfo       Get the state of a channel.
     getnetworkinfo    Get statistical information about the current state of the network.
     feereport         Display the current fee policies of all active channels.
     updatechanpolicy  Update the channel policy for all channels, or a single channel.

   On-chain:
     sendmany       Send bitcoin on-chain to multiple addresses.
     sendcoins      Send bitcoin on-chain to an address.
     listchaintxns  List transactions from the wallet.

   Payments:
     sendpayment    Send a payment over lightning.
     payinvoice     Pay an invoice over lightning.
     addinvoice     Add a new invoice.
     lookupinvoice  Lookup an existing invoice by its payment hash.
     listinvoices   List all invoices currently stored.
     listpayments   List all outgoing payments.
     queryroutes    Query a route to a destination.
     decodepayreq   Decode a payment request.
     fwdinghistory  Query the history of all forwarded HTLCs.

   Peers:
     connect        Connect to a remote lnd peer.
     disconnect     Disconnect a remote lnd peer identified by public key.
     listpeers      List all active, currently connected peers.
     describegraph  Describe the network graph.
     getnodeinfo    Get information on a specific node.

   Startup:
     create  Initialize a wallet when starting lnd for the first time.
     unlock  Unlock an encrypted wallet at startup.

   Wallet:
     newaddress     Generates a new address.
     walletbalance  Compute and display the wallet's current balance.
     signmessage    Sign a message with the node's private key.
     verifymessage  Verify a message signed with the signature.

GLOBAL OPTIONS:
   --rpcserver value        host:port of ln daemon (default: ""localhost:10009"")
   --lnddir value           path to lnd's base directory (default: ""/home/guggero/.lnd"")
   --tlscertpath value      path to TLS certificate (default: ""/home/guggero/.lnd/tls.cert"")
   --no-macaroons           disable macaroon authentication
   --macaroonpath value     path to macaroon file (default: ""/home/guggero/.lnd/admin.macaroon"")
   --macaroontimeout value  anti-replay macaroon validity time in seconds (default: 60)
   --macaroonip value       if set, lock macaroon to specific IP address
   --help, -h               show help
   --version, -v            print the version
   
```


### Channel State Machine

A bug has been fixed [wherein we'd attempt to sweep breached _dust_ outputs](https://github.com/lightningnetwork/lnd/commit/7da8cb29101627991f385fb15668474ad7977ace). Additionally, we now ensure that we can [sweep breaches that contain both incoming _and_ outgoing HTLCs](https://github.com/lightningnetwork/lnd/commit/e91dff44e675efd751118521921dac700bd90344). 

[A bug that prevented fees from being negotiated _down_ has been fixed](https://github.com/lightningnetwork/lnd/commit/d7a254328e1c04e8187f651cf9252975451f4775). 

[A bug has been fixed that would previously cause `lnd` to initiate a new state transition without any committed updates](https://github.com/lightningnetwork/lnd/commit/71228a6b06d95020682f21c47be70e6ea3cc16b9). This was a spec violation and would cause a compliant implementation to abandon the channel. 

[A bug has been fixed that would result in `lnd` restoring the _incorrect_ log state after a restart with a pending commitment dangling](https://github.com/lightningnetwork/lnd/pull/1255). This bug would cause `lnd` to crash on start up with a nil pointer panic. 

### HTLC Routing 

A number of improvements have been made within the `ChannelRouter` w.r.t how we respond to received onion htlc errors. As a result, users should generally find the routing hiccups that existed in prior versions of `lnd` have been resolved. Version `0.5-beta` for `lnd` will contain a large overhaul in the `MissionControl` sub-system to address several drawbacks in the current naive implementation.

[We've modified the way we handle FeeInsufficientErrors](https://github.com/lightningnetwork/lnd/commit/a6ffe999c6cd76156a8a8a59d1b40e3ce747be6e) to more aggressively route around nodes that repeatedly return the same error to us. This will ensure we skip older nodes on the network which are running a buggier older version of lnd.

[We'll now no longer prune vertexes in response to receiving an `UnknownNextPeer` error](https://github.com/lightningnetwork/lnd/commit/bd9f1b597ef5f74be85c489fc50a7c75487b6ccd). Instead, we'll now prune the edges as otherwise faulty or malicious nodes could cause us to backlist a target node, rather than routing around the failure. 

[We'll now skip local channels unable to satisfies a potential payment flow during path finding](https://github.com/lightningnetwork/lnd/commit/f494433cbf60322c1bbe531ee827123533beaaf6). This should reduce payment latency a bit, and also result in less internal routing failures. 

### Private Channel Invoicing 

When a user creates a invoice w/ active private channels, [we'll now encode _routing hints_ for each of these channels](https://github.com/lightningnetwork/lnd/commit/1e5659e5f41680d2efafe24df422b924094d60d8). These routing hints enable non-advertised channels to still receive incoming payments, and will be an important component of the network as it continues to grow. [Additionally, our path finding logic has been updated to utilize any routing hints if populated](https://github.com/lightningnetwork/lnd/pull/846/commits/4598df054ede0a8f236a043ead4c04b7a5f62535). 

### HTLC Switch 

When disconnecting peer due to an invalid commitment, [we'll now ensure that the error to the remote peer is sent _before_ we kill the socket](https://github.com/lightningnetwork/lnd/commit/0dbd325fd03c314b521f3e2fa2de79a528471510). This ensures that our [new log message with useful debugging information](https://github.com/lightningnetwork/lnd/commit/1c5d62a804b539639e8f0a7869afe44b585d7a77) reaches the peer before we shut down the link. 

[A very old bug in the forwarding logic of the switch has been fixed](https://github.com/lightningnetwork/lnd/commit/7037d55f65813a46df51119b758b3edffd5a1ca4).  When accepting an HTLC we are meant to validate the fee against the constraints of the *outgoing* link. This is due to the fact that we're offering a payment transit service on our outgoing link. Before this commit, we would use the policies of the *incoming* link. This would at times lead to odd routing errors as we would go to route, get an error update and then route again, repeating the process.

We'll now properly use the incoming link for timelock related constraints, and the outgoing link for fee related constraints. We do this by introducing a new `HtlcSatisfiesPolicy` method in the link. This method should return a non-nil error if the link can carry the HTLC as it satisfies its current forwarding policy. We'll use this method now at *forwarding* time to ensure that we only forward to links that actually accept the policy. This fixes a number of bugs that existed before that could result in a link accepting an HTLC that actually violated its policy. In the case that the policy is violated for *all* links, we take care to return the error returned by the *target* link so the caller can update their sending accordingly.

The `DecayedLog` implementation to protect against Sphinx replays [has been moved to the `htlcswitch` package](https://github.com/lightningnetwork/lnd/commit/5d0d7a8511f653d12c44b5866702efc01643131c). 

A number of bugs [surrounding forwarding to channels which haven't yet been confirmed](https://github.com/lightningnetwork/lnd/commit/c290398b4b8b558118f0a7c0d1d49836854be2c8), [as well as premature HTLC trimming have been fixed](https://github.com/lightningnetwork/lnd/pull/1149). 

[A deadlock/panic bug in the switch has been fixed that would be triggered when we were trying to add metrics for a non-settle event](https://github.com/lightningnetwork/lnd/commit/5e3b239ebccdabe6c6a270362cc246fbd64ef347). 

[We'll now automatically force close channels that have de-sync'd due to an invalid commitment or settle](https://github.com/lightningnetwork/lnd/commit/fbec83699ce77796673705dbf812c3960ebb8698). 

A bug has been fixed that would cause a state machine that accepted a duplicate fail or settle to crash upon restarts. [We now ensure that we'll reject any duplicate fails or settles](https://github.com/lightningnetwork/lnd/commit/376d332dbd626a6675dbb3a0b352c50dcb714891).

[A bug has been fixed that would cause us to forward a fail/settle _too early_ internally](https://github.com/lightningnetwork/lnd/pull/1293), leading to inconsistencies within the switch, and the mailbox of each of the links. 

[A bug has been fixed that would cause us to add an HTLC to the log, but not fully evaluate it](https://github.com/lightningnetwork/lnd/pull/1294). We'll now ensure that we properly set the add/remove heights of internal `PaymentDescriptors` properly when restoring the update logs after a restart. 

### Peer to Peer and Server 

[An optimization has been made within the `peer` struct to no longer allocate a new buffer each time we to to write a message](https://github.com/lightningnetwork/lnd/commit/7cbe78eeee434491598b65a169eb066e29f74327). Instead, we'll use a static write buf sized for the largest possible protocol message within each peer instance. As a result, our memory usage is much less bursty, and generally much lower. 

[We'll now on a best effort basis attempt to locate the advertised port of peers that have connected to us via inbound connections](https://github.com/lightningnetwork/lnd/commit/9d29c4f43daa3d64bffdc9026c87c5bff2c758c4). Before this addition, `lnd` would at times be unable to automatically connect a certain class of peers which we first discovered via an inbound connection. 

### `discovery`

A bug has been fixed in the `AuthenticatedGossiper` that [could at times cause a deadlock when a user attempted to update the set of channel policies](https://github.com/lightningnetwork/lnd/commit/9d4cea93f0333a93b798cb46f45ebf009c516538). 

[A bug has been fixed that would cause partial goroutine leaks](https://github.com/lightningnetwork/lnd/pull/1198) when the `AuthenticatedGossiper` is shutting down. The changes ensure faster and cleaner shutdowns of the `ChannelRouter` as well.

### `ChainNotifier` 

[The `ChainNotifier` has been modified to primarily only dispatch spend notifications once the spending transaction has been confirmed within a block](https://github.com/lightningnetwork/lnd/commit/fa29adf9a3e397a21ce89dce141a7c8bbcbf655a). Switching to this behavior fixes a bug wherein if both sides attempted to force close simultaneously, or a closing transaction we weren't expecting hits the chain, then we would fail to realize the contract has been resolved on chain. 

### `aezeed`

[A set of test vectors has been added](https://github.com/lightningnetwork/lnd/commit/0c7451c97c82a0ef83c06cb2c03034f783eea6b8) , and also the [README now has additional details](https://github.com/lightningnetwork/lnd/commit/16ad6aed09cf86155a0db156321659cc97c8957c) concerning the underlying cipher seed scheme. 

###

###


## Changelog 

The full list of changes since `0.4.1-beta` can be found here: 
  * https://github.com/lightningnetwork/lnd/compare/v0.4.1-beta...v0.4.2-beta

# Contributors (Alphabetical Order):
* Adam Soltys 
* Alex Akselrod
* Andrew Fuller 
* Antonin Hildebrand 
* Bretton Vine
* Conner Fromknecht
* Danny Paz
* Dimitris Tsapakidis 
* Everton Melo
* Francisco Calderon 
* Jack McCallum 
* Jasper Raedisch
* Jim Posen 
* Jimmy Song 
* Johan T. Halseth
* Jens Heimbuerge
* Karlson Lee 
* Kazato Sugimoto 
* Kenneth Perry 
* Max Vernon 
* mecampbellsoup
* Olaoluwa Osuntokun 
* Oliver Gugger 
* practicalswift
* Richard Bondi 
* Ron Gross 
* Sean Erle Johnson 
* Steven Roose 
* t4sk
* Vadym Popov
* Valentine Wallace
* Vegard Engen 
* Wilmer Paulino
* whythat
* Yohei Okada 


",49765480
86,False,False,2018-04-03T00:10:19Z,2018-04-03T01:04:49Z,"This release marks a minor patch release to the recently released `v0.4-beta`! No new major features have been added in this release. Instead, this release packages a series of bug fixes in addition to modifications to ensure better cross-implementation compatibility. No _database level_ breaking changes have been made in this release, as a result users should be able to perform a clean update. 

# Verifying the Release 
In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import `roasbeef`'s key if you haven't done so already:
```
curl https://keybase.io/roasbeef/pgp_keys.asc | gpg --import
```

The [keybase page of `roasbeef`](https://keybase.io/roasbeef) includes several attestations across distinct platforms in order to provide a degree of confidence that this release was really signed by ""roasbeef"". 

Once you have his PGP key you can verify the release (assuming `manifest-v0.4-beta.txt` and `manifest-v0.4.1-beta.txt.sig` are in the current directory) with: 
```
gpg --verify manifest-v0.4.1-beta.txt.sig
```

That will verify the signature on the main manifest page which ensures integrity and authenticity of the binaries you've downloaded locally. Next, depending on your operating system you should then re-calculate the `sha256` sum of the binary, and compare that with the following hashes (which are included in the manifest file): 
```
dd4ca874416f3a261b0e4a88c758585061d1b936d93158f6e7c0a8b0dbca6c05  lnd-darwin-386-v0.4.1-beta.tar.gz
6c46bd9a6ebd27f99eea8324c32c026983359c1d117323d9e42fa3c8ac7e49f5  lnd-darwin-amd64-v0.4.1-beta.tar.gz
0887700ffe7822fed404d6912dcb590b205629b49557edf94c8b9b6fb595b877  lnd-dragonfly-amd64-v0.4.1-beta.tar.gz
390a439efe6cd4c62e58c99415856590ec0ed7cbca6f79f89d9067a73c53017c  lnd-freebsd-386-v0.4.1-beta.tar.gz
8e9c23f71b52a0ebd219445a7d8102072c202042e18605bd95bf905bf90dc226  lnd-freebsd-amd64-v0.4.1-beta.tar.gz
8ef165cf3be3ec9a1f2e03cc305ba2d6a379449552a98d9af3b83fdfeca7f6e5  lnd-freebsd-arm-v0.4.1-beta.tar.gz
5aa9c77506a0fee1060bc88e4cd18f46fd05147ffb14d264b788b0fcd92da724  lnd-linux-386-v0.4.1-beta.tar.gz
f4582cd3ae99488165dee46f2afa7d43842413e1bdd59baba63aafd34a1e3246  lnd-linux-amd64-v0.4.1-beta.tar.gz
4ee088593b611672e51f9c131177d3c50084312ed8c4a78a04c717ed83045bc9  lnd-linux-arm-v0.4.1-beta.tar.gz
03c0b90e71067a86e14555f92071cffc641aa3cb8a11d480816e3448ea690993  lnd-linux-arm64-v0.4.1-beta.tar.gz
ab9d50e3ee784dae2ee5d65bfc0b7c5016dff760222dcc3cf10975b39fe13750  lnd-linux-mips64-v0.4.1-beta.tar.gz
eb2ec3fcaae1fee29c1872e20b8d5cad208902b55dc50e539eb6fe92bfaae9b1  lnd-linux-mips64le-v0.4.1-beta.tar.gz
9659a6713f5c9f7042fead29d046189fd7e16a2381fbbb92f8386fe35e55ea76  lnd-linux-ppc64-v0.4.1-beta.tar.gz
0ea45ca68a76ddd06b71c9897fcb31937f41a553a6276ffbd5fda0405dd30d99  lnd-netbsd-386-v0.4.1-beta.tar.gz
218adf117f4a2f4597f43f5065c67870c90fcfd91d635674d2e30bf310d1d66a  lnd-netbsd-amd64-v0.4.1-beta.tar.gz
3510bcda313017837eb47d9b0345e7a6c5157f19fe4a503649e02be4117b311b  lnd-openbsd-386-v0.4.1-beta.tar.gz
de86c0a401bfc95cb7432758d092fed01ee9af0652407d77736d7dad2d5949f1  lnd-openbsd-amd64-v0.4.1-beta.tar.gz
6c81cfa8fb6459b18a2c86843b47acb49e0325829cfd109d71dcf4b029ec5948  lnd-windows-386-v0.4.1-beta.zip
de22da756a51a298bfe7db83e3d7d5e9b21173f0c74dcaaadfe4a349ec16a786  lnd-windows-amd64-v0.4.1-beta.zip
```

One can use the `shasum -a 256 <file name here>` tool in order to re-compute the `sha256` hash of the target binary for your operating system. The produced hash should be compared with the hashes listed above and they should match *exactly*. 

Finally, you can also verify the _tag_ itself with the following command: 
```
git verify-tag v0.4.1-beta
```

You should see the following if the verification was successful:  
```
gpg: Signature made Mon Apr  2 17:10:37 2018 PDT
gpg:                using RSA key 964EA263DD637C21
gpg: Good signature from ""Olaoluwa Osuntokun <laolu32@gmail.com>"" [ultimate]
```

This release can also be [found in `roasbeef`'s public keybase folder](https://keybase.pub/roasbeef/lnd-v0.4.1-beta/). 

# Notable Changes

### DNS Bootstrapping 

Reported issues concerning the initial automatic peer bootrapping via DNS have been resolved. In the case that `lnd` had to fallback to direct TCP resolution, a bug prevented the DNS name from being fully qualified. This new release [ensures we craft a valid DNS query](https://github.com/lightningnetwork/lnd/commit/ce856323906e4c7eafd55de8500e75f42fa93ca0). 

### Channel Funding 

The min channel size that we'll create outbound [has been raised to 20k satoshis](https://github.com/lightningnetwork/lnd/commit/8127685462a3438377813970562aebff801d39ac).  

When using the current version of `autopilot` users can now set the _min_ and _max_ channel sizes. Before this change, as this mode was primarily used on testnet, the default pilot would at times create a single channel using all available funds, which in many cases is undesirable. 

Users are now able to set a _custom_ value for the CSV parameter imposed on the remote node using the new `--remote_csv_delay` argument of the `openchannel` command. This is useful as peers that have existing business relationships may wish to relax the time-based security parameter in order to allow swift channel force closures. 

A rounding error (#943) has been fixed. This would at times be an issue when converting from BTC to satoshis as returned by the various RPC interfaces. With this fix we ensure that we can no longer at times leaks a few satoshis when creating channels. On-chain sends were unaffected. 

### RPC

The `ListChannels` command now has the ability to filter out active, public, private, and inactive channels (#834).  The `lncli listchannels` command has also gained the ability to filter out these channels with the following new arguments: 
  * `--active_only`
  * `--inactive_only`
  * `--public_only`
  * `--private_only`

A _new_ macaroon type has been added! In this release, `lnd` will now generate an `invoice.macaroon` invoice. The capabilities that this macaroon can unlock are restricted only to: listing invoices, generating invoices, subscribing for invoice notifications, and also generating new addresses (#904).

One thing to note is that we'll only generate the invoice macaroon if none of the macaroons are found. This mirrors the existing behavior to allow an instance to be spun up, only having a particular macaroon in its data directory. In order for this new macaroon to be generated, **users need to delete their old set of macaroons on disk**. 

### Payment routing 

Several cross-implementation payment routing issues have been resolved. Users should find they have an easier time routing directly to another implementation, or taking a route that traverses other implementations. Additionally, we'll now more aggressively route around any faulty channels.nodes based on prior routing failures encountered. 


### Configuration 

A new `--tlsdomain` config line option has been added (#864). This allows users to generate RPC certs that themselves bind to a particular domain. With this command, users are now able to expose an `lnd` RPC service that's accessed directly via a domain over TLS.

A new `--minchansize` config option has been added. This option allows users to configure the _smallest_ channel size they'll accept as an incoming payment. Using this command, users can start to filter out the set of incoming channel requests in order to ensure their node has a healthy set of usable channels. The default value for this is 20k satoshis. 

### Channel State Machine 

A bug that would at times cause channel desynchronization when channels peers use asymmetric dust values has been resolved (#920). 

We'll now ensure that we'll only [_accept_ sane commitments](https://github.com/lightningnetwork/lnd/commit/6103ccb081caa39e1e30b57c41836c20f1991289). This entails performing a series of quick checks for standardness and context-free consensus rules when we create or accept new commitments. Uncompliant commitments will be _rejected_. 

We'll now _accept_ incoming payments that pay _more_ than the amount stated on the invoice. 

Attempted cooperative channel closures while a commitment still has lingering HTLCs are now _disallowed_. 

### Litecoin 

Several minor bugs have been fixed within `lnd`'s Litecoin mode. The most notable fix is properly using a sane dust value to ensure we only produce easily mineable commitments. 

### `bitcoind` Chain Backend

The `bitcoind` chain backend will now properly _reconnect_ to `bitcoind`'s interface for `zmq` in the case of a connection drop, or restart by `bitcoind` (https://github.com/lightningnetwork/lnd/commit/c653b62832fec23ed240b94c467672b2b87b399e). 

### Peer to Peer Networking 

We'll no longer disconnect peers that send address types within `NodeAnnouncement` messages that we don't know of. This caused unnecessary connection flapping in the prior release as there are several nodes on mainnet which forward such messages (which is spec compliant). 

A series of bugs have been fixed concerning automatic peer reconnection (#982), exponential backoff when retrying connections to peers. Additionally, we'll now properly perform the `brontide` handshake asynchronously (#1001).  As a result of these fixes, users should see overall lower memory usage and less pending connection manager requests. Subsequent releases will start to introduce dynamic ban/DoS protection to further harden `lnd`s P2P interface. 

### Build System 

This new release of `lnd` packages an easier to use build system for those that are unfamiliar with go. `lnd` now has a primary [`Makefile`](https://github.com/lightningnetwork/lnd/blob/master/Makefile). A new set of documentation has been added to detail the various commands and arguments of each make directive:
  * https://github.com/lightningnetwork/lnd/blob/master/docs/MAKEFILE.md

When using the `make build` command, `lnd` will compile in the _commit hash_ that it was built against. This is helpful when debugging as it makes it easier to bisect git commits. Additionally, users will be able to easy discern which commit (in addition to latest released version) that they're running:
```
⛰./lnd --version
lnd version 0.4.1-beta commit=f6faf2c268240789be02a463d31bcb801229e51a
```

## Changelog 

The full list of changes since `0.4-beta` can be found here: 
  * https://github.com/lightningnetwork/lnd/compare/b866806...6fa93a78c 

# Contributors (Alphabetical Order):

* Adrien Emery 
* Alex Bosworth
* Alex Gessner 
* Andreas M. Antonopoulos 
* Brenden Matthews 
* bretton 
* Chakib Benziane 
* Conner Fromknecht
* Corné Plooy 
* François ""mably"" Masurel
* ftufek 
* Johan T. Halseth 
* Jonathan Underwood 
* João Mesquita 
* Laurent Raufaste 
* Matt Campbell 
* Matt Drollette
* Nalin Bhardwaj 
* Olaoluwa Osuntokun 
* Patrick Walters 
* Perdouille 
* Steven Roose 
* Wilmer Paulino
* yohei okada ",49765480
87,False,False,2018-03-15T13:38:46Z,2018-03-15T14:59:39Z,"This release marks the 4th major release of `lnd`!  All planned breaking changes have been implemented, and any breaking database changes in the future will utilize the built-in migration system. With this release, `lnd` has gained a considerable feature set, deeper cross implementation compatibility, a new specialize wallet seed, comprehensive fault-tolerance logic, has had a multitude of bugs fixed, and much more!

This is the first release that comes enabled with a flag to run on Bitcoin's mainnet, and also Litecoin's mainnet. For now, the `neutrino` backend mode has been disabled on both main chains as the developers of `lnd` feel that the required testing infrastructure to ensure correct operation in the face of all edge cases has not yet been implemented. However, with this release `lnd` now supports using `bitcoind`, and `bcoin` in addition to `btcd` as full-node backends! 

The maintainers of `lnd` would like to thank all the dedicated testers, and **60+** contributors which have helped to make this release possible! 


**NOTE**: **It is important to note that this release of `lnd` contains _several breaking changes_.** As a result, users will either need to upgrade using a completely fresh installation, or remove their existing `channel.db` database file before upgrading.  As a courtesy, we recommend that users close out their prior channels (either cooperatively if the peer is online, or unilaterally (force close) otherwise) before upgrading. A new utility command on the cil, `lncli closeallchannels` has been added to streamline this process. 

# Verifying the Release 
In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import `roasbeef`'s key if you haven't done so already:
```
curl https://keybase.io/roasbeef/pgp_keys.asc | gpg --import
```

The [keybase page of `roasbeef`](https://keybase.io/roasbeef) includes several attestations across distinct platforms in order to provoide a degree of confidence that this release was really signed by ""roasbeef"". 

Once you have his PGP key you can verify the release (assuming `manifest-v0.4-beta.txt` and `manifest-v0.4-beta.txt.sig` are in the current directory) with: 
```
gpg --verify manifest-v0.4-beta.txt.sig
```

That will verify the signature on the main manifest page which ensures integrity and authenticity of the binaries you've downloaded locally. Next, depending on your operating system you should then re-calculate the `sha256` sum of the binary, and compare that with the following hashes (which are included in the manifest file): 
```
db811b2c94288d50f1709508c72a35d1893b31fdfb54b2e19a4a65c92f32c581  lnd-darwin-386-v0.4-beta.tar.gz
bcf7813522d9461f27e47ee7879d00ebf45002ad497a1907c7a4312ee3800f0b  lnd-darwin-amd64-v0.4-beta.tar.gz
d75a52a695fabee8c18fd8880120b86e891a1689c51fabd5a947584824223284  lnd-freebsd-386-v0.4-beta.tar.gz
86db36bf033e1237ea778f2ba6dbf82b750a2524796e3240803855db941ed8eb  lnd-freebsd-amd64-v0.4-beta.tar.gz
43df7ec2eda8e754374b9065259afac360a57bf6c6698b5103aa137061616bbc  lnd-freebsd-arm-v0.4-beta.tar.gz
fbda15e493fcf4e187a15852b3ae686cc0df2abdf91c846fcaef3e74df2d5c64  lnd-linux-386-v0.4-beta.tar.gz
dd781604c1f946414c0b053e6ae71b323556dbe4ff87f59408b6b13993e8d688  lnd-linux-amd64-v0.4-beta.tar.gz
be5d855d0ddb4db6db9861e86abd01c227ac892dd0cab8dd3610ff12287035a4  lnd-linux-arm-v0.4-beta.tar.gz
8e04d769c903805a20bafb79ae38ef50b0b98261b79e31ccc99edf5e41306446  lnd-linux-arm64-v0.4-beta.tar.gz
6e0d73c5f63a7500109945787121a479197b6c6af6593a9fabd4286f27d980af  lnd-linux-mips64-v0.4-beta.tar.gz
f5e0eb6489346a649dbc85cf69872d6c1fe3c3e3c957d8487529734144b8f0bb  lnd-linux-mips64le-v0.4-beta.tar.gz
ca6a99fce87afb9d542d299bd50d957846679840ddf00e1be137ce9bc281622a  lnd-linux-ppc64-v0.4-beta.tar.gz
021814819002fb004cfe302c17fded9597567feaf38ee92ad8d7c07bebd8eb25  lnd-netbsd-386-v0.4-beta.tar.gz
e94aeb38b7d7124b29bb6628b28b752d650baa68e3247392294dc4700d208059  lnd-netbsd-amd64-v0.4-beta.tar.gz
a985e6ece98e6eb4d5170ca232517374625e29146946d36bc6f168f30f39c556  lnd-openbsd-386-v0.4-beta.tar.gz
3c7889892a205f7734be9b1c5fa832e0e9c14c29eec30019a026c1907e0a6112  lnd-openbsd-amd64-v0.4-beta.tar.gz
d039c371d01bf788d26cb2876ceafcb21f40f705c98bb0b0b9cf6558cac4ca23  lnd-windows-386-v0.4-beta.zip
1245abe9adeb2fab74fe57d62b6d8c09d30b9ada002cd95868a33406e5a14796  lnd-windows-amd64-v0.4-beta.zip
```

One can use the `shasum -a 256 <file name here>` tool in order to re-compute the `sha256` hash of the target binary for your operating system. The produced hash should be compared with the hashes listed above and they should match *exactly*. 

This release can also be [found in `roasbeef`'s public keybase folder](https://keybase.pub/roasbeef/lnd-v0.04-beta/). 


⚡️⚡️⚡️ OK, now to the rest of the release notes! ⚡️⚡️⚡️


# Notable Changes

### Switch to `dep` for dependency management 

In this release, we've switched to [`dep`](https://github.com/golang/dep) to handle all dependency management within `lnd`. In prior release we used a tool called [`glide`](https://github.com/Masterminds/glide). However, `glide` is no longer being actively developed, and `dep` provides a much more stream lined UX compared to `glide`. Most operations can be completed with a simple `dep ensure`. All installation guides have been updated to account for the new way of syncing the set of dependancies that `lnd` requires. We're also keeping an eye on [`vgo`](https://research.swtch.com/vgo-repro) as it aligns well with our short-term goal of producing fully verifiable builds for future release. 

### New Directory Structure 

The default directory structure of `lnd` has been _fully revamped_, and shouldn't change for the foreseeable feature. After we added dual-chain support, the directory structure was sitting in a bit of an awkward position, as it was only half way to supporting for multi-chain (simultaneous active chains) within `lnd`. The new structure is now future proof as it maintains a shared `channel.db` (where all the channel specific state lives), and segmented `chain` directories that will store the wallet specific information for each chain. 

Example of new data directory structure
----------------------------------------
```
data/
├── admin.macaroon                                                  
├── chain                                                           
│   ├── bitcoin                                                     
│   │   └── testnet                                                 
│   │       ├── block_headers.bin                                   
│   │       ├── ext_filter_headers.bin                              
│   │       ├── neutrino.db                                         
│   │       ├── reg_filter_headers.bin                              
│   │       └── wallet.db                                           
│   └── litecoin                                                    
│       └── testnet4                                                
│           └── wallet.db                                           
├── graph                                                           
│   └── testnet                                                     
│       └── channel.db                                              
├── macaroons.db                                                    
└── readonly.macaroon 
```
Example of new log directory structure
--------------------------------------
```
log/
└── bitcoin
    └── testnet
        └── lnd.log
```

Additionally, we'll no longer have a hard coded, unchangeable directory location for lnd's home directory. Instead, users can now use the `--lnddir=X` argument to set the home directory of `lnd` to an arbitrary location. 

### Automatic Peer Bootstrapping 

With this release, `lnd` will now automatically seek out peers to connect with upon initial startup. In order to implement this functionality, we've added a new interface the to discovery package:
[`NetworkPeerBootstrapper`](https://github.com/lightningnetwork/lnd/blob/30019538c403369b0478d8afbe34f77ea8aa8471/discovery/bootstrapper.go#L20). The `NetworkPeerBootstrapper` interface is meant to be used to bootstrap a new peer joining the network to the set of existing active peers within the network. Callers are encouraged to utilize several boostrappers in series as redundant sources of information. The [`MultiSourceBootstrap`](https://github.com/lightningnetwork/lnd/blob/30019538c403369b0478d8afbe34f77ea8aa8471/discovery/bootstrapper.go#L39) function will takes a set of boostrappers, and compose their outputs into a single unified set of addresses.

Two concrete implementations of the `NetworkPeerBootstrapper` interface have been added as a part of this release: the [`ChannelGraphBootstrapper`](https://github.com/lightningnetwork/lnd/blob/30019538c403369b0478d8afbe34f77ea8aa8471/discovery/bootstrapper.go#L80) and the [`DNSSeedBootstrapper`](https://github.com/lightningnetwork/lnd/blob/30019538c403369b0478d8afbe34f77ea8aa8471/discovery/bootstrapper.go#L236). The former will utilize the authenticated node advertisements within the calling nodes view to boostrap new connections. The latter will use a set of BOLT-0010 compliant DNS seeds to query. This DNS seeding more will likely be used by nodes initial joining the network, as they may not yet have the channel graph as they haven’t connected to any peers. We've also extended our DNS seeder with support for queries over TCP. It was observed that users behind certain name resolvers would filter out the results of our `SRV` queries. As a result, if we detect this, we'll connect directly over TCP in order to complete the initial bootstrap. 

As of this release, there are 3 active DNS seeders queryable:
```
node.lightning.directory (BTC mainnet)
ltc.nodes.lightning.directory (LTC mainnet)
test.node.lightning.directory (BTC testnet)
```

### New Forwarding Log Timeseries and Query Interface

In this release, we add a much requested feature: the ability to track the fees successfully payment circuits have carried, and also examine the history of HTLCs successfully forwarded by the `htlcswitch`.

We've added a new storage namespace to channeldb: the ForwardingLog. This log will be used by higher level sub-systems to log each successfully completed HTLC. Each payment circuit will be
summarized as a ForwardingEvent. A series of events can then be queried via a time slice query. In a time slice query, the caller specifies a time range, a number of events to skip, and the max number of events to return. Each query will return the index of the final item. As we have a max number of events we’ll return in a response, callers may need to use this last offset index to seek further by skipping that number of entries. Combining these fields, callers are able to query the time series, skipping an arbitrary amount of events, and capping the max number of returned events.

We store the timestamp in nanoseconds since the unix epoch. Using this level of granularity, we assume that we'll never have a repeated time stamp (due to the monotonicity of recorded time in the Go runtime).

The FeeReport command has been extended to include the recorded fee revenue over the past day, week, and month. We've also added a ForwardingHistory command that lets callers query the entire time series, skip events in the time series, and specify a max number of events to return. A new lncli command fwdinghistory has been added to expose this query information on the command line.

Sample output from the testnet faucet: 
```
$ lncli feereport
<snip> 
   ],
    ""day_fee_sum"": ""2"",
    ""week_fee_sum"": ""2"",
    ""month_fee_sum"": ""2""
}

$ lncli fwdinghistory 
{
    ""forwarding_events"": [
        {
            ""timestamp"": ""1519857535"",
            ""chan_id_in"": ""1414915334303449089"",
            ""chan_id_out"": ""1414950518670229504"",
            ""amt_in"": ""1001"",
            ""amt_out"": ""1000"",
            ""fee"": ""1""
        },
        {
            ""timestamp"": ""1519857771"",
            ""chan_id_in"": ""1414994499134226433"",
            ""chan_id_out"": ""1414305105343741953"",
            ""amt_in"": ""1211"",
            ""amt_out"": ""1210"",
            ""fee"": ""1""
        }
    ],
    ""last_offset_index"": 2
}
```

### Improved `connmgr` Connection Reliability

Internally, in order ot handle automatically connecting out to any peers we have a channel with (and also one-off connections), `lnd` uses the `connmgr` package inherited from `btcsuite`. Our requirements for the behavior of the `connmgr` were a bit more involved that the functionality in inherited when initially drafted for usage within `btcd`. Since then we've added a number of useful features such as: the ability to cancel any pending persistent connection requests, and ability to cancel requests that hadn't yet been successful. 

While we were at it, the server's peer handling code has been _significantly_ simplified, and now only utilizes a central mutex for all synchronization. Additionally, we'll no longer attempt to tightly connect to our persistent peers in a tight loop in the case of a forced disconnect. Instead, we'll enter an exponential backoff phase in order to mitigate unnecessary flapping. 


### Deterministic Key Derivation and Cipher Seeds (`aezeed`)

We've revamped the internal key derivation of the wallet to be fully deterministic. Prior to this release, due to the way that we generated keys for use within channels, and for regular addresses, recovery would have been very difficult to implement in practice. 

In this release, we modify the wallet's key derivation for channels and the like to be fully deterministic. We do so by adding a new package: keychain. Additionally, after this PR, the p2pkh addr type is no longer supported. We do this as the mix of segwit and non-segwit addresses has caused widespread confusion with new users in the last. A related change is that we no longer have a --witness_only option for the walletbalance RPC. Since the wallet will only produce segwit addresses.
 
#### new [`keychain`](https://github.com/lightningnetwork/lnd/blob/master/keychain/derivation.go)  package
The role of this package is to house all the interfaces that lnd will use to generate the various keys it needs to create contracts and operate within the network. Additionally, we also use this package to define a deterministic key derivation scheme, that can be implemented by any software/hardware that partially understands BIP43-like derivation.

The first version (v0) of the keychain schema is very simple. We re-use BIP43, with a slight twist. Re-using BIP43 lets us leverage all the existing libraries out there as far as compatibility. The purpose used is 1017, and the coin type, the particular coin type of the chain where the keys are meant to be used. Within our schema, we define multiple “key families”. Each key family is actually just manifested as a new “account” within the BIP44/43 family. With this schema, if we have static description of the keys used within a channel, given the seed, and the “KeyLocator”, we can re derive all keys necessary be able to re-sign for the channel.

#### New Seed Format for Backup+Recovery 

In this release, we add a new package implementing the [`aezeed`](https://github.com/lightningnetwork/lnd/blob/master/aezeed/cipherseed.go) cipher seed scheme. This is a new scheme developed that aims to overcome the two major short comings of BIP39: a lack of a version, and a lack of a wallet birthday. A lack a version means that wallets may not necessarily know *how* to re-derive addresses during the recovery process. A lack of a birthday means that wallets don’t know how far back to look in the chain to ensure that they derive *all* the proper user addresses.

The `aezeed` cipher seed scheme has a few cool properties, notably:
   * The mnemonic itself is a cipher text, meaning leaving it in plaintext is advisable if the user also set a passphrase. This is in contrast to BIP 39 where the mnemonic alone (without a passphrase) may be sufficient to steal funds.
   * A cipherseed can be modified to *change* the passphrase. This means that if the users wants a stronger passphrase, they can decipher (with the old passphrase), then encipher (with a new passphrase). Compared to BIP 39, where if the users used a passphrase, since the mapping is one way, they can’t change the passphrase of their existing HD key chain.
  * A cipher seed can be *upgraded*. Since we have an external version, offline tools can be provided to decipher using the old params, and encipher using the new params. In the future if we change ciphers, change scrypt, or just the parameters of scrypt, then users can easily upgrade their seed with an offline tool.
  * We're able to verify that a user has input the incorrect passphrase, and that the user has input the incorrect mnemonic independently.

With the combination of the `cipherseed` and new key derivation, a user simply needs to back up their seed: 
```
---------------BEGIN LND CIPHER SEED---------------
 1. able      2. sound     3. almost    4. master
 5. process   6. anxiety   7. organ     8. again
 9. lesson   10. grid     11. write    12. rifle
13. lizard   14. kid      15. opinion  16. crop
17. crack    18. pottery  19. need     20. patrol
21. virus    22. wrestle  23. gallery  24. month
---------------END LND CIPHER SEED-----------------
```

And they'll be able to generate _all_ keys and secrets generated by `lnd` for use in contracts. This is one component of our strategy for on-chain and off-chain state backup. Future release will implement full lookahead key scanning on chain for on-chain recovery, dynamic backups to private outsourcers for safety, and finally a static backup system for off-chain recovery in the case of partial data loss. 

First time users should use the `lncli create` command in order to create an initial cipher seed mnemonic, add an optional passphrase to it, and finally set a wallet encryption passphrase that's used when unlocking the daemon with `lncli unlock`. 

### Bitcoin Core Support!

With this release of `lnd`, we've added a new backend interface implementation: `bitcoind`. Users of the Bitcoin Core full-node software can now utilize their node to provide `lnd` with a valid view of the Bitcoin chain. The implementation utilizes `zeromq` in order to get real-time notification of Bitcoin blocks. Additionally, if the rpcuser+rpcpass parameters aren't specified, then `lnd` will attempt to either parse our the parameters from the `bitcoin.conf`, or utilize the authentication cookie. 

### New `lnd` arguments 

The set of arguments has been modified, and also expanded since the last release. Namely, users are now able to specify which _precise_ network interface to listen on for p2p connections via the `--listen` flag. Users are now also able to specify a target interface for both the gRPC server (`--rpclisten`) and also the REST TLS proxy (`--restlisten`). Finally, it's also now possible to start up `lnd` in a mode that doesn't listen for any peer to peer connections at all with `--nolisten`.

Due to the addition of new chain backend within `lnd` (`bitcoind`, `litecoind`), we've split up the way that each chain and node backend is specified on the command line. First, users will need to specify _which_ chain(and network) is active: 
```
      --bitcoin.active                       If the chain should be active or not.
      --litecoin.active                      If the chain should be active or not.

      --bitcoin.mainnet                    Use the main Bitcoin network
      --bitcoin.testnet                     Use the test network
      --bitcoin.simnet                      Use the simulation test network
```

Once the chain is specified, users need to specify their target node backend via:
```
      --bitcoin.node=[btcd|bitcoind|neutrino]  The blockchain interface to use. (default: btcd)
```

Finally, depending on the selected node backend, users will need to specify their selection of the (some optional) arguments: 
```
neutrino:
  -a, --neutrino.addpeer=                      Add a peer to connect with at startup
      --neutrino.connect=                      Connect only to the specified peers at startup
      --neutrino.maxpeers=                     Max number of inbound and outbound peers
      --neutrino.banduration=                  How long to ban misbehaving peers.  Valid time units are {s, m, h}.  Minimum 1 second
      --neutrino.banthreshold=                 Maximum allowed ban score before disconnecting and banning misbehaving peers.

btcd:
      --btcd.dir=                              The base directory that contains the node's data, logs, configuration file, etc. (default: /Users/roasbeef/Library/Application Support/Btcd)
      --btcd.rpchost=                          The daemon's rpc listening address. If a port is omitted, then the default port for the selected chain parameters will be used. (default: localhost)
      --btcd.rpcuser=                          Username for RPC connections
      --btcd.rpcpass=                          Password for RPC connections
      --btcd.rpccert=                          File containing the daemon's certificate file (default: /Users/roasbeef/Library/Application Support/Btcd/rpc.cert)
      --btcd.rawrpccert=                       The raw bytes of the daemon's PEM-encoded certificate chain which will be used to authenticate the RPC connection.

bitcoind:
      --bitcoind.dir=                          The base directory that contains the node's data, logs, configuration file, etc. (default: /Users/roasbeef/Library/Application Support/Bitcoin)
      --bitcoind.rpchost=                      The daemon's rpc listening address. If a port is omitted, then the default port for the selected chain parameters will be used. (default: localhost)
      --bitcoind.rpcuser=                      Username for RPC connections
      --bitcoind.rpcpass=                      Password for RPC connections
      --bitcoind.zmqpath=                      The path to the ZMQ socket providing at least raw blocks. Raw transactions can be handled as well.
```

Finally, with this release of `lnd`, a flag for **Bitcoin's mainnet** `--bitcoin.mainnet` and Litecoin's mainnet has been added! At this point, we still only recommend users to experiment with **small amounts** as `lnd` is still young. 

For further details, see [`INSTALL.MD`](https://github.com/lightningnetwork/lnd/blob/master/docs/INSTALL.md). 

All arguments to `lnd` are now also documented within [`sample-lnd.conf`](https://github.com/lightningnetwork/lnd/blob/master/sample-lnd.conf). 

### Dynamic Fee Estimation 

In prior releases of `lnd`, we utilized a hard-coded fee in all locations as a stop gap until interfaces for dynamic fee estimation were erected. In this release, we'll now utilize dynamic fee estimation with the `btcd`, `bitcoind`, and `litecoind` node backends. This means that we'll query for a fee estimate whenever we want to: open a new channel, send coins on-chain, sweep any funds that were encumbered in a contract, and also close channel cooperatively. We'll now also [dynamically sample the fee rate each block in order to propose a new fee rate for the commitment transaction](https://github.com/lightningnetwork/lnd/blob/30019538c403369b0478d8afbe34f77ea8aa8471/htlcswitch/link.go#L793) (via the [`UpdateFee`](https://github.com/lightningnetwork/lnd/blob/master/lnwire/update_fee.go#L6) message) to ensure a timely confirmation in the case of a channel force closure. 

If users wish to bypass this dynamic fee estimation, and specify their own fees, then the `openchannel`, `closechannel`, and `sendcoins` commands for `lncli` now have two optional parameters for fee control:
```
   --conf_target value    (optional) the number of blocks that the transaction *should* confirm in, will be used for fee estimation (default: 0)
   --sat_per_byte value   (optional) a manual fee expressed in sat/byte that should be used when crafting the transaction (default: 0)
```

During cooperative channel closures, we'll now properly negotiate fees with the remote node, rather than proposing our fee and never compromising. We use a conservative step-wise algorithm to ensure termination, and eventual satisficing for the fee of the cooperative closure transaction. 

### Increased [`ChainNotifier`](https://github.com/lightningnetwork/lnd/blob/master/chainntnfs/interface.go#L11) Robustness

Internally within `lnd`, we use an interface called the `ChainNotifier` in order to request notifications once a particular `txid` has reached a sufficient number of confirmations. This interface is used widely when: waiting for a channel to open, waiting for a channel to close, waiting for a transaction sweeping a time-locked output to confirm, etc. Before this release, the `ChainNotifier` wasn't able to properly handle re-orgs, and would return incorrect information in the face of excessive re-orgs. With this release, that's been remedied as the `ChainNotifier` [is now fully aware of disconnected blocks](https://github.com/lightningnetwork/lnd/commit/0cac7e80d435209f9ee3e56584e01439b85227d7#diff-3272aefcedf824c386cea41ea64a28b8), [will send negative confirmations for transactions that have been re-org'd out](https://github.com/lightningnetwork/lnd/commit/2639b58e4b8ac32d740c19fc442389106f03e57a#diff-3272aefcedf824c386cea41ea64a28b8), and [has been significantly refactored in order to remove code duplication](https://github.com/lightningnetwork/lnd/commit/d2a9dcf855179039237d883b1b344cc34d225092#diff-3272aefcedf824c386cea41ea64a28b8). 


### New [`contractcourt`](https://github.com/lightningnetwork/lnd/tree/master/contractcourt) package. 

In this release, of `lnd`, we've added a new fully-featured `contractcourt` package. This package houses all the logic to ensure that in the event of an on-chain event, we're able to effectively go to chain in order to redeem any outputs encumbered by a contract. This includes all incoming and outgoing HTLC's, time-locked second-level HTLC transactions, and all forms of commitment outputs. The role of this package is to examine the chain, and the internal state of each channel, then decide if it needs to go to chain (court) in order to ensure the ultimate resolution of user funds. 
 
The package is split up into distinct sub-systems with isolated responsibilities, the first of which being the [`ChannelArbitrator`](https://github.com/lightningnetwork/lnd/blob/master/contractcourt/channel_arbitrator.go#L144). The duty of the `ChannelArbitrator` is to watch the set of active contracts on a comment transaction and act accordingly if any of their redemption criteria have been met. Potential criteria include: an HTLC about to time out, and HTLC about to time out that we know the preimage to, or the remote party going to chain (forcing us to resolve all pending contracts on chain).

The primary goroutine of this struct implements a persistent state machine in order to ensure that mid contract resolution, we’re able to properly survive restarts without losing our place, or forgetting about a pending contract.

A `ChannelArbitrator` will stay alive until all contracts have been fully resolved. This means that outside sub-systems no longer need to worry about remembering to mark a channel as fully resolved, as it’s the job of the `ChannelArbitrator` to do this task. 

In the event that the `ChannelArbitrator` deems it needs to go to chain in order to preserve funds, it launches a series of [`ContractResolvers](https://github.com/lightningnetwork/lnd/blob/master/contractcourt/contract_resolvers.go#L23). In this release, we introduce a new interface, the `ContractResolver`. The duty of a `ContractResolver` is to watch a contract on-chain, for all possible transitions, and exit finally when the contract has been fully resolved. Resolvers themselves can be recursive: meaning producing another resolver to hand off the duties require to fully resolve a contract.

Each resolver also has a ResolverKit which contains all the function closures and interfaces that the resolver need to properly do its job.

The 5 types of resolvers are:
  * outgoing HTLC timeout
  * outgoing HTLC contested
  * incoming HTLC know presage
  * incoming HTLC contested (don’t yet know)
  * commitment sweep

Wrapping it up, the The [`ChainArbitrator`](https://github.com/lightningnetwork/lnd/blob/master/contractcourt/chain_arbitrator.go#L120) is a special sub-system that will oversee the on-chain resolution of all active channels, and also channels that are in the pending close state. The ChainArbitrator maintains a set of ChannelArbitrators, one for each channel that hasn’t yet been fully resolved.

Outside sub-systems should send new channels to the arbitrator once they’ve opened. Additionally, they can also trigger manual interventions to close out a channel on chain forcibly, or just to signal that a channel has been closed cooperatively.The ChainArbitrator should be notified once a fresh set of signals for a channel becomes available. The ChannelArbitrator for the channel will use these set of signals to be notified when an on-chain event happens.

Finally, this package also houses the [`chainWatcher`](https://github.com/lightningnetwork/lnd/blob/master/contractcourt/chain_watcher.go#L59). The duty of this struct is to replace the functionality that was previously implemented by the closeObserver of each channel. Rather than the source of notification being tied to the lifetime of a particular object, it’s now delegated to a persistent object that will be around for the entire lifetime of the channel (until it’s closed). This will serve to greatly simplify the code, and eliminate a large class of bugs.


### `UtxoNursery` Persistence +  Hardened `BreachArbiter`


The `UtxoNursery` (which handles overseeing the maturity of time-locked outputs) has been revamped in order to be fully fault tolerant. Before this release, if the nursery watch watching over an immature output, and restart occurred, then the nursery would forget about the output, leaving user funds on the chain. With this release, the nursery has been modified to be fully fault tolerant via staged check points throughout the various stages of output maturity. 

Additionally, the `BreachArbiter` has also gone through a similar persistence hardening. It'll now remember in-progress breaches, in order to finish bringing the counter-party to justice. Within this release, we'll now properly handle attempted contract breaches that take HTLCs to the second level. We do this by detecting if any of the HTLC outputs has been spent on the commitment transaction, and modifying our spend of those outputs to target the second level with updated witnesses. 

### Full Validation of Commitment Constraints 

In this release, we'll now adhere to _all_ the current commitment constraints during the channel update procedure. This includes the: channel reserve, min HTLC, max value in flight, and max number of active HLTCs for both side. If either of these constraints are violated, then the channel will be failed accordingly. 


### `HtlcSwitch` Fault Tolerance

In this release, we've upgraded the `htlcswitch` (the forwarding fabric for HTLCs, you know, that whole ""payments as packets"", thing?) to be fully fault tolerant. This means that in all cases of partial HTLC adds/fails/settles, upon restart, the switch will ensure that the payment circuit creation or completion is satisfied properly. For further details, refer to the bodies of the primary PR's that implemented this new functionality:
  *  https://github.com/lightningnetwork/lnd/pull/777
  * https://github.com/lightningnetwork/lnd/pull/791

As set of detailed integration tests have been added to excercise new added persistence of the switch. 

Additionally, `lnd` is now safe against _Sphinx packet replays_. We'll maintain a decaying log of all the shared secrets we've derived, and reject any HTLC's that attempt to re-use the same shared secret. This defends against a class of attacks against payment privacy launched by attempting to inject stale HTLCs into the network observing their propagation path. With each block we'll then garbage collect any shared secrets for HTLCs that have been expired, freeing up space on the log. As the onion blob commits to the HTLCs, they can't be decoupled to replay an expired HTLC. 


### Linear Speedup in Sphinx Shared-Secret Construction

A long lived TODO was resolved in this release as we modified the algorithm used to derive the shared secrets and ephemeral public keys during sphinx packet construction to achieve complexity that is linear in the number of hops. The current version uses a quadratic number of scalar multiplications during the derivation, which is potentially noticeable when sending payments, particularly on resource-constrained devices.

The primary optimization offered by this release is to cache the intermediate product of the blinding factors, such that the i-th blinded pubkey can be generated via a single scalar multiplication, instead of iteratively applying the previous i-1 blinding factors to a given field element. This alone reduces the number of scalar multiplications to be linear in the number of hops. Note that the product is taken modulo the curve order `|F(G)|`, not the prime `P`.

We also include a second optimization, that exploits the similarities in deriving both the ephermeral and blinded pubkeys.

From Section 3.2 of the [Sphinx paper](http://www0.cs.ucl.ac.uk/staff/G.Danezis/papers/sphinx-eprint.pdf), the equations for deriving the i-th ephemeral pubkey is given:
```
    a_0 = g^x
    a_i = g^(x * b_0 * ... * b_{i-1})
```
and the i-th blinded pubkey as:
```
    s_0 = Y_0^x
    s_i = Y_i^(x * b_0 * ... * b_{i-1}),
```
where `x` is the session private key.

Now, instead of only memoizing the product of the blinding factors, we modify the value to also include a multiplicative factor of `x` which can be shared across both exponentiations. This does not result in any improvement asymptotically. However, it allows us to replace the usage of scalar multiplication with more-efficient scalar base multiplication when computing the ephemeral pubkeys (the `a_i`'s), in addition to shaving `(N-1)` scalar multiplications in raising each `Y_i` to `x` before applying the blinding factors separately.

### Macaroon Authentication Changes

In this release, we've switch to a new macaroon format which is much more compact as it uses a protobuf like encoding. Additionally, we'll now encrypt the root macaroon key on disk, using the daemon's encryption passphrase. Docs have been updated to detail how to pass macaroons over the REST interface: 
```
GET https://localhost:8080/v1/getinfo
Grpc-Metadata-macaroon: <macaroon>
```
### Outbound Tor Support 

In this release, we've added _outbound_ Tor support. This means that if specified, `lnd` will attempt to tunnel all outbound connection traffic over Tor, and disallow incoming connections. Care has been taken to ensure that no DNS leaks occur during normal operation in conjunction with our Tor usage. A new section of documentation has been added to document usage of Tor with lnd`:
  * https://github.com/Roasbeef/lnd/blob/7f61d8cf3d14d11f686b372ba9312f158b775246/docs/configuring_tor.md

### Revamping HTLC Routing 

In this release, we've introduced a sub-system called `missionControl. `missionControl` contains state which summarizes the past attempts of HTLC routing by external callers when sending payments throughout the network. missionControl remembers the outcome of these past routing attempts (success and failure), and is able to provide hints/guidance to future HTLC routing attempts.  missionControl maintains a decaying network view of the edges/vertexes that should be marked as ""pruned"" during path finding. This graph view acts as a shared memory during HTLC payment routing attempts. With each execution, if an error is encountered, based on the type of error and the location of the error within the route, an edge or vertex is added  to the view. Later sending attempts will then query the view for all the vertexes/edges that should be ignored. Items in the view decay after a set period of time, allowing the view to be dynamic w.r.t network changes.

Additionally, we'll now take an iterative approach to path finding in order to reduce payment latency, and also reactively modify our available channel graph in response to routing failures. 

### Memory Optimization 

This new release of `lnd` should now be _much_ slimmer. A number of GC related optimizations have landed to reduce the memory usage of `lnd` at peak capacity. Further work will be done in future release in the form of adding reusable buffer pools to reduce the working set of the daemon.

## Changelog 

The full list of changes since `0.3-alpha` can be found here: 
  * https://github.com/lightningnetwork/lnd/compare/4871252...9aac0c41a2dbb7 

# Contributors (Alphabetical Order):
* 34ro 
* Adam Gibson 
* Alessio 
* Alex Akselrod
* Alex Bosworth
* Alex Gessner 
* Alexandre Viau
* Andreas Tasch
* Andrew Naoum 
* Andrey Samokhvalov
* Benjamin Congdon 
* Brandon Lico
* Braydon Fuller 
* Brenden Matthews 
* Brian KimJohnson 
* Chris Moore (dooglus) 
* Conner Fromknecht
* Cristobal Griffero 
* Daniel Coonce 
* Daniel McNally
* Dave Collins 
* Dave Kerr 
* Deelight-fr 
* Dimitris Tsapakidis 
* Dustin Dettmer 
* Eugene Lziege
* funyug 
* gshub77 
* hackerrdave
* Hector Jusforgues 
* Jason Dufair
* Jim Posen
* Johan T. Halseth 
* John Griffith 
* Juan Ignacio Donoso 
* Justus Kandzi 
* Laura Cressman
* Liu-Cheng Xu 
* Maarten Tutak 
* Matt Drollette 
* Micah Lerner
* Mrmaxmeier 
* Nabil Boag 
* Nalin Bhardwaj 
* Naveen 
* Olaoluwa Osuntokun 
* Oliver Gugger 
* PaddyQuinn 
* Pat White 
* Philip Hayes 
* Philipp Gillé 
* practicalswift 
* rajeshnair2k 
* Ronald Vandermeer
* Salman Ansari 
* Sam Lewis 
* Samuel Dobson
* Simon Horlick
* Steven Roose 
* Thijs Triemstra 
* Timo Schmid 
* Tomas Susanka 
* Tasuku Nakamura
* Valentine Wallace
* vegardengen 
* Walt Seymour 
* Wilmer Paulino 
* Yancy Ribbens
* Yuri Zhykin",49765480
88,False,True,2017-08-23T18:57:01Z,2017-08-23T19:20:20Z,"This release marks the 3rd major release for `lnd`! With this release, `lnd` is now has gained a considerable feature set, a new automatic channel management operating mode, RPC authentication, additional persistence logic, and further major strides towards complete spec compliance.


This release lands on the eve of the activation of segwit on Bitcoin's mainnet 🎉! As the developers of `lnd`, we're _extremely_  excited to see Lightning integrated into the ecosystem, and to see all the novel applications that developers will buildout! However, we recommend that users of `lnd` **do not** yet attempt to use the software on the live network with real funds. We're getting very close to enabling a mainnet mode usage, but at this point necessary safety and fault tolerance measures aren't yet in place. With our next release: `lnd v0.4-beta`, we'll be targeting full spec compliance, cross-implementation interoperability, and the additional assurance and safety measures we deem necessary before adding a mainnet mode to the software. 

**NOTE**: It is important to note that this release of `lnd` contains _several breaking changes_. As a result, users will either need to upgrade using a completely fresh installation, or remove their existing `channel.db` database file before upgrading.  As a courtesy, we recommend that users close out their prior channels (either cooperatively if the peer is online, or unilaterally (force close) otherwise) before upgrading. 


⚡️⚡️⚡️ OK, now to the rest of the release notes! ⚡️⚡️⚡️


# Notable Changes


### TLS Integration and Macaroon Based RPC Authentication 

In this release of `lnd`, we now enforce the usage of TLS by default when communicating with the RPC server either via gRPC or the HTTP interface. In addition the the server authentication, we now also expose per-call RPC authentication. This mode is on by default, and can be disabled with the `--no-macaroons`flag on the command line, or the corresponding line within ones `lnd.conf` configuration file. 

For per-call RPC authentication, `lnd` currently uses [macaroons](https://research.google.com/pubs/pub41892.html). Macaroons are bearer credentials that are based on a construction of nested HMAC calls with a single root IV key. The root key is kept secret by the server and allows it to mint (or bake) new macaroons and also authenticate the validity of presented macaroons. Macaroons are bearer credentials meaning presenting or holding the macaroon entitles the holder to a specific set of capabilities. Macaroons are very flexible and allow the holder of a particular macaroon to add additional _caveats_ which contextually confine the set of capabilities unlocked by the macaroon. Currently we only expose two flavors of macaroons: an admin macaroon which allows unrestricted access to all RPC calls, and a read-only macaroon which is created by adding caveats to the admin macaroon dictating _which_ calls the holder of the macaroon can access. 

In the future, we'll be adding additional granularity of the usage of macaroons within `lnd`. We believe tha macaroons are very exciting as they enable a very flexible mechanism of authentication which can be used to build applications upon `lnd` which have the most _minimal_ set of capabilities possible. For example, imagine an application built on top of `lnd` which only needs access to a _particular_ channel, and will only be sending payments below `N satoshis` over said channel. The flexibility of the macaroon scheme makes it easy for `lnd` to bake such a macaroon and present it to the application in question. 

### Litecoin Operating Mode

In this release, we've added support for a _toggle-able_ Litecoin chain and wallet backend. This means that `lnd` is now capable for easily switching back and forth between the Bitcoin and Litecoin chains. This is very exciting as the code scaffolding put in place to make this switch seamless also lays some important ground work for the multi-chain `lnd` operating mode that is under development. With multi-chain, `lnd` will be able to manage channels on both Bitcoin and Litecoin _simultaneously_. In the near future, this means that `lnd` nodes with channels on both chains will be able to acts as a border node between the two networks, facilitating instant swaps and transfers between the two chains.  

The daemon backend configuration options have been split, into two mirroring option classes for both Bitcoin and Litecoin: 
```
Litecoin:
      --litecoin.active        If the chain should be active or not.
      --litecoin.chaindir=     The directory to store the chains's data within.
      --litecoin.rpchost=      The daemon's rpc listening address. If a port is omitted, then the default port for the selected chain parameters will be used. (localhost)
      --litecoin.rpcuser=      Username for RPC connections
      --litecoin.rpcpass=      Password for RPC connections
      --litecoin.rpccert=      File containing the daemon's certificate file (/Users/roasbeef/Library/Application Support/Ltcd/rpc.cert)
      --litecoin.rawrpccert=   The raw bytes of the daemon's PEM-encoded certificate chain which will be used to authenticate the RPC connection.
      --litecoin.testnet       Use the test network
      --litecoin.simnet        Use the simulation test network
      --litecoin.regtest       Use the regression test network

Bitcoin:
      --bitcoin.active         If the chain should be active or not.
      --bitcoin.chaindir=      The directory to store the chains's data within.
      --bitcoin.rpchost=       The daemon's rpc listening address. If a port is omitted, then the default port for the selected chain parameters will be used. (localhost)
      --bitcoin.rpcuser=       Username for RPC connections
      --bitcoin.rpcpass=       Password for RPC connections
      --bitcoin.rpccert=       File containing the daemon's certificate file (/Users/roasbeef/Library/Application Support/Btcd/rpc.cert)
      --bitcoin.rawrpccert=    The raw bytes of the daemon's PEM-encoded certificate chain which will be used to authenticate the RPC connection.
      --bitcoin.testnet        Use the test network
      --bitcoin.simnet         Use the simulation test network
      --bitcoin.regtest        Use the regression test network
```

Our [docker](https://github.com/lightningnetwork/lnd/tree/master/docker) configuration has been updated to allow users to spin up a cluster of lnd nodes on simnet or testnet of either Bitcoin or Litecoin. 


### [`autopilot`](https://github.com/lightningnetwork/lnd/blob/master/autopilot): Self-Driving Lightning 

This release also [includes the first of many planned flavors of automatic channel management](https://github.com/lightningnetwork/lnd/commit/306c4aef8e3af44fb3f2d8f52fc887f2c48e9c04). We call this new operating node `autopilot` as if set, will automatically manage the opening of channels within the network. This operating mode is attractive is it enables a new level of plug-and-play interaction with the daemon, and can also be used in aggregate to tend the ultimate topology of the channel graph to one of a set of heuristically determined characteristics. 

The `autopilot` operating mode is essentially a closed-loop control system: it takes in outside input such as the number of channels opened, when channels are closed, changes in the wallet balance and applies that to its internal state. Once outside signals are received, it then consults it's registered heuristic to decide: if it needs more channels, and if so to _whom_ those channels should be opened to. The Agent then carries out the recommendations by the registered heuristic, ultimately going back to the top of it's loop to await further outside signals. 

The `autopilot` package has been signed to be as abstract as possible in order to allow users, developers, and researchers to plug in various heuristics in order to experiment with the possibilities, or attempt to optimize the channel sub-graph for their targeted nodes. The current default heuristic is a mode called 
[`ConstrainedPrefAttachment`](https://github.com/lightningnetwork/lnd/blob/master/autopilot/prefattach.go#L12). This heuristic takes a set of inputs parameters, namely: the smallest allows channel size, the max channel size, the max number of active channels, and a target balance of funds within channels vs regular on-chain utxo's. Given this set of constraints (eg: 4 channels, 40% of available funds), given the known channel graph, the heuristic will employ an channel attachment recommendation driven by the [Barabási–Albert](https://en.wikipedia.org/wiki/Barab%C3%A1si%E2%80%93Albert_model) model in order to attempt to drive the global graph towards a scale free topology. This is only one example of the possible heuristics which could be hooked into an active `autopilot.Agent` instance. We look forward to the additional heuristics that developers/researchers will implement! The package has been crafted such that, it facilitates easily generating a simulated graph with several agents each following the same heuristic, or a heterogenous set. 

The current default heuristic can be activated, and configured with the following new command line flags:
```
autopilot:
      --autopilot.active       If the autopilot agent should be active or not.
      --autopilot.maxchannels= The maximum number of channels that should be created (5)
      --autopilot.allocation=  The percentage of total funds that should be committed to automatic channel establishment (0.6)
```

### [`neutrino`](https://github.com/lightninglabs/neutrino): a new Bitcoin Light Client Operating Mode

In prior release of `lnd`, the only configurable chain-backend was communicating directly with `btcd` over its websockets RPC interface. In this release, we've added a new configurable chain-backend: `neutrino`. With this option, it's now possible to run `lnd` standalone, as `neutrino` is a Bitcoin light client, which will connect directly to the p2p network in order to receive new information concerning Bitcoin blocks. We're very excited about this new operating mode, as it will allow a wider array of users to use Lightning as it doesn't require one to necessarily have an active full node locally. Additionally, it has allowed us to start experimenting with `lnd` on mobile operating systems. 

In order to run `lnd` in its light client mode, you'll need to locate a full-node which is capable of serving this new light client mode. A [BIP draft](https://github.com/Roasbeef/bips/blob/master/gcs_light_client.mediawiki) exists, and will be finalized in the near future, but for now you'll need to be running `roasbeef`'s fork of btcd. A public instance of such a node can be found at `faucet.lightning.community`.

The new command line options allowing users to configure `neutrino` are: 
```
neutrino:
      --neutrino.active        If SPV mode should be active or not.
  -a, --neutrino.addpeer=      Add a peer to connect with at startup
      --neutrino.connect=      Connect only to the specified peers at startup
      --neutrino.maxpeers=     Max number of inbound and outbound peers
      --neutrino.banduration=  How long to ban misbehaving peers.  Valid time units are {s, m, h}.  Minimum 1 second
      --neutrino.banthreshold= Maximum allowed ban score before disconnecting and banning misbehaving peers.
```

The next release of `lnd` will also feature an _additional_ chain-backend option. 

### Milli-Satoshi Accounting and Configurable Fees 

In this release of `lnd`, we've switched over all internal accounting to use [mill-satoshis](https://github.com/lightningnetwork/lnd/blob/master/lnwire/msat.go#L13), rather then regular satoshis as dictated within the specification. 

Milli-Satoshi are the native unit of the Lightning Network. A milli-satoshi is simply 1/1000th of a satoshi. There are 1000 milli-satoshis in a single satoshi. Within the network, all HTLC payments are denominated in milli-satoshis. As milli-satoshis aren't deliverable on the native blockchain, before settling to broadcasting, the values are rounded down to the nearest satoshi.

Additionally, we've also introduced two new RPC's that let users examine and modify the advertised fee schedules of their channels within the network. Fee accounting within Lightning is currently very simple, each node advertises two values: their base fee in milli-satoshis, and their fee rate per million mSAT transferred. The `feereport` RPC calls allows users to query for their currently advertised fee scheduled for each of their active channels:
```
⛰ lncli feereport
{
    ""channel_fees"": [
        {
            ""channel_point"": ""18ae89fab0f7fca3365c45651aaa9d2a17380bb02d194d217c6a0bb24e76e4ce:0"",
            ""base_fee_msat"": ""1000"",
            ""fee_per_mil"": ""100"",
            ""fee_rate"": 0.0001
        },
        {
            ""channel_point"": ""1559a538d4270c1fe4a3e5690eeac7620ece3ed2a36cd581528d57d09b7cbd53:0"",
            ""base_fee_msat"": ""1000"",
            ""fee_per_mil"": ""100"",
            ""fee_rate"": 0.0001
        }
    ]
}
```
The second newly introduced RPC, `updatefees` allows users to update the fee schedule of all their active channels: 
```
⛰ lncli updatefees --base_fee_msat=1000 --fee_rate=0.005
```
Or even to a single particular channel:
```
⛰ lncli updatefees --fee_rate=0.01 --base_fee_msat=100 --chan_point=b3d6386eed491e15fa17be5b0a68155cadd15b1944f91a4b1b43000da468f6b3:0
```

### Spec Compliant Commitment Design, Key Derivation, and Scripts

In this release of `lnd`, we've modified our commitment design to utilize the version outlined within the specification. This includes the new key derivation, scripts, and two-layer HTLC design. All sub-systems have been modified to be aware of the new possible on-chain workflows in the occasion of a direct commitment channel broadcast. 

With this change, we can now begin to test opening channels and forwarding HTLC's with the various other Lightning Network node implementations. 

### `verifymessage` and `signmessage`

This release adds to new RPC methods: `verifymessage` and `signmessage`. The latter allows users to sign an arbitrary message with the advertised identity public key of their node. The signature generated includes the recovery byte of the signature, meaning that users can then use `verifymessage` to verify the validity of the signature and also return the public key of the node that signed the message. 

These RPC calls are interesting, as they now allow a new type of extra-network authentication. For example: a forum website may require a signature of a nonce by a node on the network that has at least `200,000,000 SAT` aggregate within active channels. This sign up workflow allows users to join the website without creating an account, or utilizing a password, and also achieves a degree of sybil resistance as the authorization logic of the website can verify the authenticity of the registered channels of the target node. 

### Additions to the `pendingchannels` RPC 

In this release, we've added additional detail to the `pendingchannels` RPC call. Now, the command will display _all_ pending channels in the various possible states. For example it now shows which channels have been forced closed, the number of time-locked funds, and the ultimate maturity height of each of the time-locked outputs: 
```
lncli pendingchannels
{
    ""total_limbo_balance"": ""16768528"",
    ""pending_open_channels"": [
        {
            ""channel"": {
                ""remote_node_pub"": ""02ae91a4c8c25bd480d31811e962cb4f2ad5db728d9a114728ffe3c14a07510f21"",
                ""channel_point"": ""c13f806327ee8d19a109967d1a76dbdcd3ad1d968781ab1c87e0a3036df9bba8:1"",
                ""capacity"": ""16777216"",
                ""local_balance"": ""16768528"",
                ""remote_balance"": ""0""
            },
            ""commit_fee"": ""8688"",
            ""commit_weight"": ""600"",
            ""fee_per_kw"": ""12000""
        },
        {
            ""channel"": {
                ""remote_node_pub"": ""033a2aff9acf9158d3f7b7df9248e3863a4703cbd80d929e69c0a4765e71c37949"",
                ""channel_point"": ""cf0d1a1de534896d3f7a3df44e79637732fcaa0a9af667d1e266b837fc927f7c:0"",
                ""capacity"": ""16777216"",
                ""local_balance"": ""16768528"",
                ""remote_balance"": ""0""
            },
            ""commit_fee"": ""8688"",
            ""commit_weight"": ""600"",
            ""fee_per_kw"": ""12000""
        }
    ],
    ""pending_force_closing_channels"": [
        {
            ""channel"": {
                ""remote_node_pub"": ""03c0b01e019067ddbd79bd268add5def5181122ec862bf7ebb866d06f442d3cc92"",
                ""channel_point"": ""11e8a02c098e48250abdd60b763fb513cae0e710b76ec450927ae4b45a9adbf0:0"",
                ""capacity"": ""16777216"",
                ""local_balance"": ""16768528"",
                ""remote_balance"": ""0""
            },
            ""closing_txid"": ""b251c1d162390bafd3d400cf209c9b18921502f1728bc4ba6410f37de2222314"",
            ""limbo_balance"": ""16768528"",
            ""maturity_height"": 1179875,
            ""blocks_til_maturity"": 3
        }
    ]
}
```

### Max Payment and Channel Limits

In this release, we've start to enforce limits on the maximum payment size and also max channel size as specified within `BOLT-0002`. These limits are an initial precautionary measure for the initial mainnet usage of Lightning. The largest channel size is `2^24` satoshis, and the largest payment size is `2^32 mSAT`. 


### Proper Dynamic Fee Accounting 

In prior versions of `lnd`, we utilized hard coded fees through the daemon. With this new release, we've added a `FeeEstimator` interface which is now consulted when crafting funding transactions, commitment transactions, and regular payments sent within `lnd`'s internal wallet. The current default implementation of this interface returns a static fee, but in future release we'll be hooking it up into a proper dynamic fee estimator. 

### Onion Encapsulated HTLC Error Messages

In prior release, we used a custom error format to signal HTLC related errors within the network. With this release, we've switch to using the onion encrypted HTLC error messages as defined within [`BOLT-0004`](https://github.com/lightningnetwork/lightning-rfc/blob/master/04-onion-routing.md). The usage of this particular format of errors aims to ensure that participants within a route (ignoring timing), don't know at exactly _which_ position in the route an error occurred. 

### Full Onion HTLC Payload Verification 

Within the `HtlcSwitch`, we now properly validate included per-hop payloads for each now. With this validation place, we now ensure that the prior hop didn't tamper with the advertised HTLC parameters as we validate the HTLC parameters as dictated by the source of the payment. Additionally, we now enforce that the sending node adheres to our advertised fee and time lock policies.

### Spec Message and Port Compliance 

All messages within the [`lnwire`](https://godoc.org/github.com/lightningnetwork/lnd/lnwire) package are now full complaint with the BOLT specification messages. As a result, we've now switched over to using port `9735` as the default listening port in order to signal our level of compliance with the specification. 

### `update_fee` and Channel Closing Fee Negotiation 

With this release, `lnd` is now able to properly parse and apply the `update_fee` message to target channels. This means that `lnd` can now dynamically update the prescribed fee on the latest commitment transaction. Additionally, we've added a new state machine during channel closure that is able to negotiate a final fee rate for the cooperative closure transaction. 

## Change Log 

For the specific change log, see the commits referenced within this tag since the prior release. 

# Contributors (Alphabetical Order): 
* afederigo  
* Alex Akselrod  
* Alex Bosworth  
* Andrey Samokhvalov  
* Bryan Vu  
* Christian Decker  
* Conner Fromknecht  
* Johan T. Halseth  
* Max Fang  
* Olaoluwa Osuntokun  
* Mykola Sakhno
* Philip Hayes   
* Slava Zhigulin
* Steven Roose  
* thesamesam
",49765480
89,False,True,2017-04-13T22:11:24Z,2017-04-13T23:01:58Z,"`lnd-v0.2.1-alpha` marks the first minor patch release after our latest release (`lnd-v0.2-alpha`). This release includes a number of bugs reported by our testers and encountered during normal usage after the latest release. No major features or RPC command have been altered with this release, therefore users should be able to upgrade to this new version without preforming any precautionary steps. 

## 0.2.1-alpha Change Log

### Routing
   * 41a54145a764e583abc6a0d5808b51c56da43c02 -- routing: capitalize first letter of new error messages
  * f7c8938e7d44a9560ba3ecd4d5fe426b3c84916b -- discovery: use debug logging level for rejected announcements
  * 2d10d83f07e4d284ffce74a37ec388d8a6cf1899 -- routing: assert that paths have same length in isSamePath
  * a4e26eaa4a70f7d2eb768d122f20650ff9d71ecb -- routing: fix bug in path finding when len(rootPath) > len(shortestPath)
  * 5442e42cc1b0eb08d9599f9cd0fa13bffbd9f9a3 -- routing: fix slice mutation bug that could result in an infinite loop

### RPC Server
   * 9ff4a7adc91bc4c2df38a09b0fe7cbf423bc5ef4 -- rpcserver: use semaphore to limit # of goroutines in SendPayment

### Wallet 
   * 0858d8a17d17a013c0c63e8a7ffaa3bdef0cd03a -- lnwallet: fix constant overflow build issue on 32-bit systems
   * eca3a100646c2e56aea67cd9ae9ec1b6426feeab -- lnwallet: reorder PaymentDescriptor attributes to reduce padding
   * a3fd738491be1d669ebb448715887bd5e9b9303d -- lnwallet: fix HTLC mutation bug in commitment chain
   * 4cd277c8dac689ccf2407b7468fe3e68b399f4db -- lnwallet: eliminate usage of LightningChannel.theirPrevPkScript
  * 31acace69266a4ad2edb38aacbdda313830a2f93 -- lnwallet: convert PendingUpdates to FullySynced
  * 17d6835861d3dc9f19919a13b38ee68d507eff61 -- lnwallet: removed unused sync.RWMutex in PaymentDescriptor

### Peer
   * 3393f3a8db90ef3539cf5831ffad83b8715094d6 -- peer: simplify channel state update handling by using
  * 178f26b8d5ef14b437b9d8d1755bd238212b4dec -- peer: restore the htlcManager's logCommitTimer to a persistent ticker
  * 54c63f4aa1aabdf036d9854d836b087cb3c26730 -- peer: remove unused lastNMessages map
  * b51a0eb09413111592cffac65652793e310bddc8 -- peer: increase initial handshake timeout to 15 seconds

### Docs
   * 35c9a12a73e285edb6995aedf8b9c1ff69f908b7 -- docs: fix port in sample lnd.conf

### Server
   * a22ba926301c33a1932db86a7d11057ec335ca86 -- server: eliminate possibly deadlock, peerConnected now async
   * d93e3e6fbe44a12bfa3f66d9e62d8b487df17051 -- server: assume default port if one not present for --externalip


### Database
   * fe3c3642e296db13a2abc35bffdfcfeca7166cdf -- channeldb: use the Batch method when writing payment details

### Command Line Utility
   * 2cb6878568f1d3c61be07347317be648aac8b811 -- cmd/lncli: make getnodeinfo accept positional arguments

### UTXO Nursery
   * e43d1dd7ca6dcd2f66ab60075c1750047f7956b1 -- utxonursery: log process of catch up graduation on restart

### Test Framework
   * 07437f6ec41fcb8a1fcb06e5f7e8873685212d15 -- test: update the ConnectPeer framework method to block until connect


# Contributors (Alphabetical Order):
   * Alex Akselrod
   * Olaoluwa Osuntokun",49765480
90,False,True,2017-04-04T12:32:57Z,2017-04-07T09:36:38Z,"[`lnd-v0.2-alpha`](https://github.com/lightningnetwork/lnd/releases/tag/v0.2-alpha) marks the latest minor (but in a sense major) release of `lnd`! This release represents a substantial step forward in the stability, feature set, BOLT specification compliance, performance, reliability and maturity of `lnd` and also Lightning as a whole. 

As the lead maintainer of the `lnd` software, I would like to express my gratitude to the extremely dedicated community of software testers and application developers that have started to emerge around `lnd`. Your swift bug reports, constant experimentation, and passion for the system you're helping to create have significantly accelerated the development progress of `lnd`, and for that I deeply thank you. In no particular order, I would like to recognize the efforts of (also bare in mind this isn't an exhaustive list):

   * `moli`
   * `juscamarena`
   * `takinbo`
   * `mably` 
   * `weedcoder`
   * `dts`

**NOTE**: It is important to note that this release of `lnd` contains _several breaking changes_. As a result, users will either need to upgrade using a completely fresh installation, or remove their existing `channel.db` database file before upgrading.  As a courtesy, we recommend that users close out their prior channels (either cooperatively if the peer is online, or unilaterally (force close) otherwise) before upgrading. 


⚡️⚡️⚡️ OK, now to the rest of the release notes! ⚡️⚡️⚡️


# Notable Changes


### Sphinx Packet Shared Secret Derivation Change

The method we use to generate the shared secret which is used to derive several keys used in the generation and processing of our Sphinx packets used in multi-hop routing has been modified. Previously we directly used the [btcec.GenerateSharedSecret](https://godoc.org/github.com/btcsuite/btcd/btcec#GenerateSharedSecret) method which returned the raw bytes of the `x-coordinate` of the derived shared point. After our last release the [`BOLT#4`](https://github.com/lightningnetwork/lightning-rfc/blob/master/04-onion-routing.md) specification was modified to instead utilize the `SHA-256` of the _entire_ coordinate serialized in compressed format. Within the specification this derivation method was modified in order to align ourselves with the `ECDH` method used by [libsecp256k1](https://github.com/bitcoin-core/secp256k1), a widely used and extremely well tested library within the Bitcoin ecosystem. 

### `lncli` Support for Positional Arguments

The `lncli` command line tool has now gained support for positional arguments, keyword arguments, and mixing the two within most command line commands. This change was made in order to minimize the required typing for users on the command lone. For example, commands like: 
```
lncli openchannel --node_key=7a379c554dd680083432648e4416255deaf113d655d002baea62652cd9e5b95f --local_amt=100000000 --push_amt=50000 --num_confs=5
```

Can now optionally be entered as: 
```
lncli openchannel 7a379c554dd680083432648e4416255deaf113d655d002baea62652cd9e5b95f 100000000 50000 5
```


### Multi-Path Payment Path Finding 

In this release of `lnd`, when attempting to select a candidate path for a payment requests we now utilize a modified version of [Yen's algorithm](https://en.wikipedia.org/wiki/Yen%27s_algorithm) to select a set of candidate paths which themselves each have the necessary capacity to carry a target payment. Within our modified version of Yen's algorithm, rather than _removing_ conflicting edges in the current root path and non-spur node edges from the root path, we instead utilize a black-list of edges and vertexes which are to be ignored within the `K_i`th iteration. This allows us to avoid loading the entire graph into memory during our repeated graph traversals.  

Once we obtain a set of candidate payments paths, we then rank the set of candidate paths according to the cumulative fee-rate, and then cumulative absolute time-lock value. As a result, the dispatch of payments within the daemon is now much more reliable as we're able to serially fall-back to lower ranked paths in the case that a payment attempt to the highest ranked path fails. 

Additionally, the version of Dijkstra's algorithm we employ (which is used as a subroutine within Yen's) has been modified to: include the capacity of a target edge within the relaxation condition, utilize a binary heap when selecting the next edge to greedily explore and gains white-box knowledge of its role in Yen's algorithm. Finally, we've added an additional layer of caching/memoization of the map: `{paymentAmt, targetVertex} -> [path_1, path_2, ....path_n]`. Such caching serves as a significant optimization as we are able to skip any dis access when querying repeated payment tuple if no new edges have been added to the graph or modified since the last invocation. 

Due to the changes above, the `queryroute` within the `lncli` tool and the `QueryRoute` RPC command of the gRPC `Lightning` service is no more. Instead they've been replaced with `queryroutes` and `QueryRoutes` which are identical to their predecessor commands aside from the fact that they now return a _list_ of _all_ eligible candidate paths rather than simply returning the first available path and exiting. 

### Complete Authenticated Channel Graph Verification 

In the prior release(s) of `lnd`, the daemon didn't fully verify the authenticity of all vertex and edge announcements within the graph. This meant that `lnd` would gladly accept an invalid or false channel to it's channel graph, or a forged node announcement as a vertex within the graph. With this release, we now both _fully_ validate all edge+vertex announcements seen within the network, and also generate valid channel authentication and node announcement proofs. 

These changes eliminate a class of error encountered by our alpha testers wherein an invalid or non-existent channel would be accepted to the channel graph leading to egregious payment routing failures. Furthermore, with this change, `lnd` is now fully compliant with [BOLT#7](https://github.com/lightningnetwork/lightning-rfc/blob/master/07-routing-gossip.md). Due to this change, the prior channel graph generate and accepted by prior version of `lnd` has now been _invalidated_. 

### BOLT Commitment State Machine Compliance 

In the prior releases of `lnd` we utilized a channel commitment update state machine which pre-dated the one currently specified within the current BOLT drafts. This statement used an ""initial revocation window"" which was then dynamically adjusted using a TCP sliding window like commitment update procedure with explicit log indexes used in state transitions. In this new release of `lnd`, we've now restricted the functionality of `lnd`'s state machine in order to comply with the current BOLT drafts. One minor deviation still exists: we use an initial revocation window of 1, as our current funding state machine still requires such as construct. 

Independent of the modification of `lnd`'s state machine a number of minor bugs within the state machine itself have been fixed which include: an incorrect reporting of the number of HTLC/s within the `htlcSwitch` logs, a fix for a HTLC commitment transaction overflow bug which could results in state desynchronization, and an omitted HTLC cancellation error back propagation within the state machine. 

### Graph Topology Notification Client 

With this release of `lnd` we've added a new serving streaming RPC command. This RPC command, tilted: `SubscribeChannelGraph` allows callers to receive streaming asynchronous notification whenever the channel graph has been updated from the PoV of the serving `lnd` node. Within our integration tests usage of this new streaming RPC has allowed us tighten the running time of our integration test and eliminate several lingering flakes. Outside of our integration tests the addition of this new streaming RPC call opens up the door for client side applications to _dynamically_ render the known channel graph in real-time.

The added gRPC stub service and new proto definitions follow: 

```proto
rpc SubscribeChannelGraph(GraphTopologySubscription) returns (stream GraphTopologyUpdate);
message GraphTopologySubscription {}
message GraphTopologyUpdate {
    repeated NodeUpdate node_updates = 1; 
    repeated ChannelEdgeUpdate channel_updates = 2;
    repeated ClosedChannelUpdate closed_chans = 3;
}
message NodeUpdate {
    repeated string addresses = 1;
    string identity_key = 2;
    bytes global_features = 3;
    string alias = 4;
}
message ChannelEdgeUpdate {
    uint64 chan_id = 1;
    ChannelPoint chan_point = 2;
    int64 capacity = 3;
    RoutingPolicy routing_policy  = 4;
    string advertising_node  = 5;
    string connecting_node = 6;
}
message ClosedChannelUpdate {
    uint64 chan_id = 1;
    int64 capacity = 2;
    uint32 closed_height = 3;
    ChannelPoint chan_point = 4;
}
```

### `--externalip` observance by `NodeAnnouncement` 

In the prior releases of `lnd`, the `externalip` command-line/configuration parameter was present, yet unobserved and unused. With this new release of `lnd`, users that wish to advertise their willingness to accept inbound connection to establish channels from participants on the network should set their `--externalip` parameter to their publicly reachable IP address. Along with a set of global features, if set, this value will now be advertised to the network. 

A future minor release of `lnd` will utilize this new reachability information to optionally automatically bootstrap a persistent channel balance by automatically maintaining a set of channels with peers selected via various heuristics. 


### Near Uniform Usage of Satoshis within the RPC Interface 

In prior releases of `lnd`, we mixed the usage of BTC and Satoshis within he RPC interface, both when accepting input and displaying results to the user. In order to be more consistent _all_ RPC's that deal with monetary amounts now use `satoshis` directly, other than the `WalletBalance` RPC> 


### Switch to Golang Standard Library For Cryptographic Operations 

Within `lnd` our two most commonly used cryptographic operations were invocations of `sha256` several areas of the codebase, and also `chacha20` and `poly1305` within both [`brontide`](https://github.com/lightningnetwork/lnd/tree/master/brontide) and [`lightning-onion`](https://github.com/lightningnetwork/lightning-onion). Previously we ere using two non-stdlib libraries [`fastsha256`](https://github.com/btcsuite/fastsha256) and [`aead/chacha20]`(https://github.com/aead/chacha20). The latter was used as at the time of our prior releases, the stdlib hadn't yet merged in an implementation of `chacha20` so we were forced to select an alternative library temporarily until the stdlib gained support. 

In this latest release, we've switched to using [`crypto/sha256`](https://godoc.org/crypto/sha256)  and [`x/crypto/chachapoly1305`](https://godoc.org/golang.org/x/crypto/chacha20poly1305
) within the codebase. With this change we gain a bit of a performance increase as both of these libraries use highly optimized assembly operations which utilization extensions such as `SSE2` and `AVX2`. 

### Basic RPC Documentation for Python+Node.JS

Thanks to some new contributors, we've now gained two brief tutorials on driving `lnd` natively from both [Python](https://github.com/lightningnetwork/lnd/blob/master/docs/grpc/python.md) and [Node.js](https://github.com/lightningnetwork/lnd/blob/master/docs/grpc/javascript.md). In future releases these brief tutorials will be expanded to cover all other languages supported by `gRPC`,  include complete example scripts and also partially complete applications. 


### Switch from Elkrem to Shachain

In prior releases of `lnd`, for deriving the hashes used in the revocation process for commitment transactions we used a method constructed by Tadge Dryja called `elkrem` for allow the receiver of the revocation hashes to collapse `N` hashes into a tree of size `log N`. When drafting the current BOLT specification, we opted to instead go with `shachain` (invented by Rusty Russell) instead, as it more efficient when deriving child hashes. In this new release of `lnd`, we now use `shachain` throughout the codebase for handling commitment revocation generation, and storage. 

### 48-bit Commitment State Hints

`lnd` now uses 48-bit total bits from the `sequence` of the input spending the funding output, and the `locktime` on the commitment transaction to encode an obsfucated version of the commitment number. In prior release of `lnd`, we only encoded `24-bits` of the current state number using the lower `24-bits` of the commitment transaction's sole input. By switching to using `48-bits`, we can now encode 281,474,976,710,656 state updates within the commitment transaction. We call this encoding ""obsfucated state hints"" and it is defined within `BOLT#3` of the Lightning Network protocol specifications. 


### Local+Global Feature Signaling 

`lnd` now implements the initial versioning handshake detailed in [`BOLT#1`](https://github.com/lightningnetwork/lightning-rfc/blob/master/01-messaging.md#the-init-message). Upon initial connect, the _first_ message send is the `init` message which allows peers to exchange their local and global features. This exchange allows peers to negotiate the features than are to be used within the session which may for example govern: the type of channels used, the format of the HTLC outputs, and the visibility of transactions created. 


### Graph Rendering Capability 

The `lncli describegraph` command has been extended to support generating an `svg` rendering of the known channel graph from the PoV of the generating `lnd` node. This addition was inspirited by an early tweet by [Andreas Antonopoulos](https://twitter.com/aantonop/status/822356218349953024) shortly after the initial release of `lnd`, and can be activated by taking on the `--render` flag to the end of the command. 

## Change Log 

For the specific change log, see the commits referenced within this tag since the prior release. 

# Contributors (Alphabetical Order): 

* Alex Akselrod
* Andreas M. Antonopoulos
* Andrey Samokhvalov
* Bryan Vu
* Christopher Jämthagen
* Cris Perez
* Faris Amali Alis
* François ""mably"" Masurel
* Justin Camarena
* Marty Jones
* Michael Lynch
* Michiel de Jong
* Olaoluwa Osuntokun
* Thomas Preindl
* Tim Akinbo
* Travis Cline",49765480
91,False,True,2017-01-18T01:02:56Z,2017-01-18T02:27:24Z,"This release marks the first minor point release after the initial release of [`lnd v0.1-alpha`](https://github.com/lightningnetwork/lnd/releases/tag/v0.1-alpha). 

This release contains a number of bug fixes reported by testers exercising the prior release on testnet which were reported on IRC (`#lnd` on freenode), and also encountered via various interactions with the current proto Lightning Network developing on test. Some RPC's have had their responses augmented with additional data, but no new breaking change have been introduced in this release. Thanks to everyone that has been experimenting with `lnd` so far! Your feedback has been very valuable. 

# Notable Changes

### Partial Channel Advertisement

Before this release, there was an implicit assumption in the daemon that _both_ directed edges of a channel would always be advertised within the network. This assumption is false as whether or not to advertise the directed edge of the channel they control is a matter of node policy. This assumption led to a series of bugs when only one half of a [`ChannelUpdateAnnouncement`](https://github.com/lightningnetwork/lnd/blob/master/lnwire/channel_update_announcement.go#L11) was propagated through the network. 

This release now properly supports partial channel advertisement by properly handling the non-existence of a directed of a channel with the `ChannelGraph`, `ChannelRouter`, and `rpcSever`. 

### Minimum Channel Size

Currently within the daemon, due to hardcoded fees in certain areas, the minimum channel size is `6000 SAT`. Before this release creation of a channel funded with less than `6000 SAT` would be allowed, but then the node would find that they were unable to close the channel due to the attempted creation of a negative valued output. 

Full dynamic fee calculation and usage is planned for `lnd`, but until then, we now enforce a soft-limit on the minimum channel size that the daemon will created. To reiterate, this a temporary change and will be lifted in a future release. 

### Full Docker Configuration for Testnet

With this release, we now include a full `docker` configuration set up that will make it _much_ easier to set up `lnd`. Within the new [README](https://github.com/lightningnetwork/lnd/tree/master/docker) for the `docker` package, we now outline two workflows for using the new configuration.

[The first workflow walks the user through setting up a test Lightning Network cluster](https://github.com/lightningnetwork/lnd/tree/master/docker#create-lightning-network-cluster) on their local machine using `simnet`. This set up can be useful to debug new features one is attempting to add to `lnd` or just to experiment with the capabilities of the daemon on a private network constrained to your local machine. Think of it sort of as a `lightning-network-in-a-box`. 

The second workflow targets Bitcoin's current `testnet` and cleanly packages up both `lnd` and `btcd` allowing users to deploy both and join the network with just a few docker related commands. This container set up has been fashioned such that one doesn't even need `Go` or any other dependancies installed on their local machine before booting up `lnd`. The docker configuration will handle all the ncessary set up within the created containers. 

### RPC Interface Modifications:

Two new RPC commands have been added to `lnd`. 

The first is the `debuglevel` command. This command lets uses modify the verbosity level of `lnd`'s logs via the command line interface, or directly using gRPC. The RPC can either target a caorse grained, daemon wide logging level: 

```
lncli debuglevel --level=debug
```

Or instead target a set of specific sub-systems with a more fine-grained level-spec target: 

```
lncli debuglevel --level=PEER=trace
```

The second new RPC packaged as a part of this release is the `decodepayreq` command. This command allows users to decode an encoded payment request in order to obtain the exact conditions of the encoded payment request. 

Example usage:

```
▶ lncli decodepayreq --pay_req=yep3c3bqqe43f5ombfca89t4r5rmenhjr4me5n5ind1t3fbj4tmn3jpyi4peh53jaoy7em4xoaxfcg7o7ircwcfb3dwz9najwfuhe5mbyyyyyyyyyyb6tg9yuk1y
{
    ""destination"": ""021b96642e723592ee0b095983fe3a26c8b40b8926968d8b7510e51c9429d4562c"",
    ""payment_hash"": ""a5a0ae9a8e6f29c401d42f4f861e561bb0ed48ca30a1c8e97f8b09a167c46d61"",
    ""num_satoshis"": 1000
}%
```

The final RPC interface modification concerts the `sendpayment` RPC command. The RPC command now returns the full route the payment took within the network to arrive at the target destination. This slight change gives users a greater degree of visibility into the network, detailing the fees and total time-lock required for the route. 

Example usage:

```
github.com/lightningnetwork/lnd  master ✗                                                                                                                                                                      4d ◒
▶ lncli sendpayment --pay_req=yep3c3bqqe43f5ombfca89t4r5rmenhjr4me5n5ind1t3fbj4tmn3jpyi4peh53jaoy7em4xoaxfcg7o7ircwcfb3dwz9najwfuhe5mbyyyyyyyyyyb6tg9yuk1y
{
    ""payment_route"": {
        ""total_time_lock"": 2,
        ""total_amt"": 1000,
        ""hops"": [
            {
                ""chan_id"": 1191986053231738880,
                ""chan_capacity"": 100000000,
                ""amt_to_forward"": 1000
            },
            {
                ""chan_id"": 1190997592276926465,
                ""chan_capacity"": 100000000,
                ""amt_to_forward"": 1000
            }
        ]
    }
}%
```

# 0.1.1-alpha Change Log

### Docs
- 1e8a80170f1214ea36ab2c73d611a93187256d01 -- docs: update INSTALL.md with new btcd commit hash, correct instructions

### Database
- 5c41167858891b20512750414a217bce03d62f23 -- channeldb: return correct error when unable to find node
- 7a36fb4562b72c0b886f38b32f7ccb072c9b4319 -- channeldb: fix assumption that both channel edges will always be advertised
- 0c7fcb1755d4a93d0e7206e454bf5848864da36a -- routing: fix nil pointer panic when node has no outgoing channels
- 7312565644e1c0ecd80b7bf5296bbe4224720e25 -- routing: allow full syncing graph state with partially advertised edges
- e7631c9720033650b1ee0d2ac7f2f852f5e11cfa -- rpcserver: ensure graph RPC's work with partially advertised channels

### Wire Protocol
- d884efea29d4fcc9bfb01c0b153e31c6c46a98ae -- lnwire+lnd: Make Logging Messages Great Again
- f82d957c9080a80caf8e58e28c195085b2ef1815 -- lnwire+peer: introduce new error for unknown message type for forward compat

### RPC
- 6a67d4848a632003bdff99031d7998a78ac059a4 -- lnrpc: add CloseChannel to README description of RPC calls
- d79530e25d1bfc8dccc552113819f4a078ab181b -- lnrpc: add encoded payment requests to the ListInvoices response
- 0bfdcde96959754952e756340250f454350921e5 -- rpcserver: include encoded payment requesting ListInvoices response
- 9b4ac77d400b1162b472aac334219cf459dd59f5 -- rpcserver: allow channels to be opened using --node_id
- 6beaa7fff5ca9655851502ee407583ab2e254730 -- lnrpc: add DebugLevel command
- 012480be98f966b71b80f4c8072eec1b669d5716 -- rpcsever: implement DebugLevel command
- ee96052e448a0802ef066ffa21b1c6278f82179e -- cmd/lncli: add parsing+dispatch for the `debuglevel` command
- 765d9fd5e92bdf779de38fd6efd998973b991bf1 -- lnrpc: return route taken in SendPayment response
- 7d6d8187fb56cb53742fc861a50e581d02fcf2ea -- rpcserver: return full path payments go over in SendPayment
- fb523ff5ac856454f393a43084186510a1d4f642 -- rpcserver: add a min channel size for funding requests
- 440cf6f9569294d26d9fcedef2cd46eb7564f751 -- rpcserver: properly limit min channel size
- faae0b3bf262f4d82e9c2816173c6c116df7d803 -- lnrpc: add new RPC to decode payment requests
- 9662887d2f32b0f995a9bbff6ee878729ba87399 -- rpcserver+cmd/lncli: implement DecodePayReq

### Lightning Payments
- 99c1ef6210c1485398f478ac5444a25099b5b065 -- lnd: add additional logging statement on payment recv

### Typos
- 95888613d02a7201ee9160272f8a20bd45bb4da5 -- multi: minor fixes for README's
- #99 51d53eab325980d2a2d09c2e8b96c494daba8ed3 -- test: fix typos
- #101 40c7bac3aa280fade7e5a1d4746002cd5077e42b -- multi: fix a variety of typos throughout the repo

### `ChainNotifier`
- cc4617ca2370c34419290624e5e9afae1949d943 -- chainntnfs: break out of loop once txIndex is found

### On-Chain Channel Events
- 8990de4d99e4bbf64d8fe5ccb321859b9d5ba20e -- breacharbiter: ensure failure to retrieve channels triggers start-up error
- 1cbdf6473f968da61c8fed199d6d14eebf969929 -- utxonursery: ensure we don't attempt to create negative value'd outputs

### Configuration
- d7a050b353eae4f5fcf7b98867486a43b4b8c836 -- config: remove deprecated configuration parameters

### README
- #100 a13ac90d46d49c51ea0cf97f849ae3b67b9e448f -- multi: add link to LICENSE in README license badges
- #99 299217aecb62c590b8265722b53547576a07473d -- README: reformat and add IRC badge

### Docker
- #99 a421069dd8bd9022169dfa839c1b80c6fb490190 -- docker: add send payment alice->bob workflow for newcomers
- a070d4131fc08b9e4e1c15bcea8f17f622aec0d7 -- docker: add example output to commands in workflow
- be66e039f14b08301379b98329ae5d2178fffc3e -- docker: general improvements
- 67b300fdc4e28b24c402a808af97ca2dcacbd60b -- docker: make blockchain persistant
- 0948bc35795ac8ce246eb51b81e668152255956d -- docker: add BITCOIN_NETWORK param
- 0325b0c77a7eadd583cde6bd62dd638e148504fe -- docker: add 'Connect to faucet lightning node' section in readme
- 49df1b073754560b35c3c6fc400824876a4555dc -- docker: make 'lnd' dockerfile download project from github rather than mount it localy

### Build
- e057684c8e6306a8742ad5a716229828f174941b -- travis: update build to go1.7.4
- ff74d83277c92562a1fc2cd4a47de51a079787e0 -- build: add release script
- c40cb496e1fe5f54d3f2c89d3708c9436a5dfdd9 -- build: update glide.lock to latest commit hashes
- 6405b1c8b3ccea1ba077d6dc928e5e4160a1e11b -- glide: pin sphinx package dependency at the commit level

### Integration Tests
- dc280521dd6817c085f073ca4157d7262bb8689a -- test: fix logging messages for funding push test
- 5c6d196ff8590c9d1f219561c4235f45b13c14bc -- test: reject non-standard transactions in integration tests

### Wallet
- c451258fd2f105c31f9b5a93d484defb6d218576 -- lnwallet: properly detect initiator cooperative close in closeObserver
- ae724756122e4e71957f2488c007198d2bf33818 -- lnwallet: create channel close summary when commitment broadcast detected
- 55f89be10f0a3a29240a78b2c2db33b250e6636e -- lnwallet+lnd: ensure curve parameters are set to avoid panics
- e60f40b8459f1f3697340713b9323c62a133b132 -- lnwallet: fix bug with funding channels with 50/50 balances

### Channel Funding
- eb1509a1cf7404ac456c236d3fc61208a1635140 -- funding: properly display channel funding point in handleFundingOpen

# Contributors (alphabetical order):

Thanks to everyone who contributed towards this release! 
- AndrewSamokhvalov
- Christopher Jämthagen
- Olaoluwa Osuntokun
- Trevin Hofmann
",49765480
92,False,True,2017-01-10T23:02:37Z,2017-01-11T17:50:01Z,"# lnd - Lightning Network Daemon v0.1-alpha

This release marks the first pre-release for `lnd`, the Lightning Network Daemon. With this release, `lnd` implements a complete Lightning node capable of: opening channels with peers, closing channels, completely handling all cooperative and non-cooperative channel states, maintaining a fully authenticated+validated channel graph, performing path finding within the network, passively forwarding incoming payments, and sending outgoing onion-encrypted payments through the network. 

## Lightning Network Specification Compliance

Witth this release, `lnd` doesn't yet _fully_ conform to the [Lightning Network specification
(BOLT's)](https://github.com/lightningnetwork/lightning-rfc). BOLT stands for:
Basic of Lightning Technologies. The specifications are currently being drafted
by several groups of implementers based around the world including the
developers of `lnd`. The set of specification documents as well as our
implementation of the specification are still a work-in-progress. With that
said, `lnd` the current status of `lnd`'s BOLT compliance is:
- [ ] BOLT 1: Base Protocol
  - `lnd` currently utilizes a distinct wire format which was created before
    the emgergence of the current draft of BOLT specifications. We don't
    have an `init` message, but we do have analogues to all the other
    defined message types.
- [ ] BOLT 2: Peer Protocol for Channel Management
  - `lnd` implements all the functionality defined within the document,
    however we currently use a different set of wire messages. Additionally,
    `lnd` uses a distinct commitment update state-machine and doesn't yet
    support dynamically updating commitment fees.
- [ ] BOLT 3: Bitcoin Transaction and Script Formats
  - `lnd` currently uses a commitment design from a prior iteration of the
    protocol. Revocation secret generation is handled by `elkrem` and our
    scripts are slightly different.
- [X] BOLT 4: Onion Routing Protocol
- [X] BOLT 5: Recommendations for On-chain Transaction Handling
- [X] BOLT 7: P2P Node and Channel Discovery
- [X] BOLT 8: Encrypted and Authenticated Transport

## Contributors (alphabetical order):
- Alex Akselrod
- Aleksei Ostrovskiy
- Andrew Samokhvalov
- Bryan Bishop (kanzure)
- Bryan Vu
- Christopher Jämthagen
- Evgeniy Scherbina
- John Newbery
- Joseph Poon
- Mykola Sakhno
- Olaoluwa Osuntokun (roasbeef)
- Riccardo Casatta
- PaulCapestany
- Slava Zhigulin
- Tadge Dryja
",49765480
93,False,False,2020-03-09T17:32:19Z,2020-03-09T17:52:54Z,"## [0.64.0] - 2020-03-09

### API
  * [new feature] added new `txo_list` command with filtering for `--claim_id`, claim `--name` and `--is_received`/`--is_not_received`, also commands `claim_list`/`stream_list`/`channel_list`/`support_list` are based on `txo_list` and thus support most of the new filters (https://github.com/lbryio/lbry-sdk/pull/2848) by eukreign
  * [new feature] added `is_spent` attribute to transaction outputs (https://github.com/lbryio/lbry-sdk/pull/2846) by eukreign
",41103286
94,False,False,2020-03-06T20:58:34Z,2020-03-06T21:25:36Z,"## [0.63.0] - 2020-03-06

### Asyncio
  * [bug] fix DHT setup and disable ffmpeg on windows temporarily (https://github.com/lbryio/lbry-sdk/pull/2845) by jackrobison

### Files
  * [bug] use `os.path.join()` instead of string addition when searching for file analysis binaries (https://github.com/lbryio/lbry-sdk/pull/2839) by eukreign
  * [improvement] don't validate and repair files that aren't videos; add maximum video bit rate setting (https://github.com/lbryio/lbry-sdk/pull/2793) by BrannonKing

### Packaging
  * [bug] revert LD_LIBRARY_PATH before calling ffmpeg (https://github.com/lbryio/lbry-sdk/pull/2842) by BrannonKing

### Wallet server
  * [new feature] `status` command returns features available of currently connected wallet server, including trending algorithm (https://github.com/lbryio/lbry-sdk/pull/2840) by eukreign
",41103286
95,False,False,2020-03-02T01:29:32Z,2020-03-02T01:49:34Z,"## [0.62.0] - 2020-03-01

### API
  * [improvement] when using `--resolve` with local claim `*_list` commands, update resolved result with local metadata (such as `is_mine`) (https://github.com/lbryio/lbry-sdk/pull/2834) by eukreign

### Commenting
  * [improvement] Require a `channel_name` / `channel_id` parameter for `comment_create` instead both being optional (https://github.com/lbryio/lbry-sdk/pull/2816) by osilkin98

### Wallet server
  * [improvement] Add LRU caches for blocks and block hashes in the wallet server (https://github.com/lbryio/lbry-sdk/pull/2836) by jackrobison
  * [improvement] Improve wallet server performance with separate thread pools for leveldb, the block processor, and mempool (https://github.com/lbryio/lbry-sdk/pull/2835) by jackrobison
  * [improvement] update `claim_type_*` db indexes to be more performant (https://github.com/lbryio/lbry-sdk/pull/2831) by eukreign
",41103286
96,False,False,2020-02-24T15:01:03Z,2020-02-24T18:02:55Z,"## [0.61.0] - 2020-02-24

### Discovery
  * [improvement] reposts inherit the tags of the original claim, filtered/blocked claims cause their reposts to also be filtered/blocked (https://github.com/lbryio/lbry-sdk/pull/2827) by eukreign
  * [bug] `claim_search --not_channel_ids` excludes the channel itself and not just claims in the channel (https://github.com/lbryio/lbry-sdk/pull/2826) by eukreign

### Tests
  * [improvement] update lbrycrd in tests to v0.17.4.3 (https://github.com/lbryio/lbry-sdk/pull/2828) by eukreign
",41103286
97,False,False,2020-02-21T21:13:30Z,2020-02-21T21:33:38Z,"## [0.60.1] - 2020-02-21

### API
  * [new feature] add `ffmpeg_find` api to check ffmpeg installation status, don't recheck for ffmpeg in `status` (https://github.com/lbryio/lbry-sdk/pull/2821) by jackrobison
  * [improvement] apply `share_usage_data` as it's set, without restarting (https://github.com/lbryio/lbry-sdk/pull/2815) by shyba

### Config
  * [improvement] max wallet server payment fee defaults to 0 and component doesnt start when its not a positive value (https://github.com/lbryio/lbry-sdk/pull/2824) by shyba

### Files
  * [new feature] Add `is_fully_reflected` to `file_list` response (https://github.com/lbryio/lbry-sdk/pull/2772) by jackrobison

### Wallet
  * [refactor] use stream controller and documented errors for wallet server payments (https://github.com/lbryio/lbry-sdk/pull/2822) by shyba

### Wallet server
  * [bug] disconnect from client sending message larger than `MAX_RECEIVE` (https://github.com/lbryio/lbry-sdk/pull/2820) by jackrobison
  * [new feature] add `MAX_RECEIVE` setting to wallet server (https://github.com/lbryio/lbry-sdk/pull/2819) by jackrobison
  * [new feature] wallet servers requesting a daily fee will automatically get paid by client (https://github.com/lbryio/lbry-sdk/pull/2707) by shyba
",41103286
98,False,False,2020-02-17T22:52:11Z,2020-02-17T23:11:21Z,"## [0.60.0] - 2020-02-17

### Config
  * [improvement] change default privacy setting (https://github.com/lbryio/lbry-sdk/pull/2806) by jessopb

### Wallet server
  * [improvement] wallet server indexes (https://github.com/lbryio/lbry-sdk/pull/2811) by eukreign
  * [improvement] removed default `order_by` for `claim_search` (https://github.com/lbryio/lbry-sdk/pull/2810) by eukreign
",41103286
99,False,False,2020-02-13T22:22:21Z,2020-02-13T22:39:13Z,"## [0.59.2] - 2020-02-13

### Packaging
  * [improvement] linux build of LBRY SDK for Ubuntu 16.04 Xenial (https://github.com/lbryio/lbry-sdk/pull/2796) by eukreign

### Wallet
  * [bug] fix claim apis failing with --resolve if no claims are present (https://github.com/lbryio/lbry-sdk/pull/2803) by jackrobison

### Wallet server
  * [bug] Fix race condition setting/clearing the claim_search and resolve cache (https://github.com/lbryio/lbry-sdk/pull/2800) by jackrobison
  * [improvement] Add sqlite index for reposted claims (https://github.com/lbryio/lbry-sdk/pull/2798) by jackrobison
  * [bug] SQL generation fix to handle IN operation for one value lists (https://github.com/lbryio/lbry-sdk/pull/2790) by eukreign
",41103286
100,False,False,2020-02-11T21:56:37Z,2020-02-11T22:14:37Z,"## [0.59.1] - 2020-02-11

### Config
  * [improvement] update default wallet servers (https://github.com/lbryio/lbry-sdk/pull/2789) by jackrobison
",41103286
101,False,False,2020-02-10T17:08:24Z,2020-02-10T17:25:19Z,"## [0.59.0] - 2020-02-10

### API
  * [improvement] `claim_list` argument `--claim_type` can now be repeated to pass a list of claim_types (https://github.com/lbryio/lbry-sdk/pull/2777) by eukreign
  * [improvement] `resolve` results which are censored now include full details of channel which did the censoring (https://github.com/lbryio/lbry-sdk/pull/2776) by eukreign

### Blobs/files
  * [improvement] fix video analysis error (https://github.com/lbryio/lbry-sdk/pull/2773) by BrannonKing

### Claims
  * [bug] update url regex to include missing cases (https://github.com/lbryio/lbry-sdk/pull/2771) by shyba

### Discovery
  * [improvement] fixed some issues with AR trending (https://github.com/lbryio/lbry-sdk/pull/2765) by eggplantbren

### Packaging
  * [improvement] update cffi to v1.13.2 (https://github.com/lbryio/lbry-sdk/pull/2768) by mkroman

### Tests
  * [improvement] build community PRs using GitHub Actions (https://github.com/lbryio/lbry-sdk/pull/2779) by eukreign
",41103286
102,False,False,2020-02-06T16:37:09Z,2020-02-06T17:04:10Z,"## [0.58.2] - 2020-02-06

### Config
  * [new feature] Add `save_resolved_claims` config setting for better performance when not using file_x commands (https://github.com/lbryio/lbry-sdk/pull/2770) by jackrobison
",41103286
103,False,False,2020-02-04T20:12:55Z,2020-02-04T20:30:45Z,"## [0.58.1] - 2020-02-04

### Files
  * [bug] Cancel reflector uploads upon file delete (https://github.com/lbryio/lbry-sdk/pull/2762) by jackrobison

### Wallet server
  * [improvement] Add version tracking to prometheus metrics (https://github.com/lbryio/lbry-sdk/pull/2764) by jackrobison
",41103286
104,False,False,2020-02-04T03:33:03Z,2020-02-04T03:57:22Z,"## [0.58.0] - 2020-02-03

### Files
  * [new feature] added video file validation and optimization when publishing streams (using `--validate_file` and `--optimize_file` arguments) (https://github.com/lbryio/lbry-sdk/pull/2726) by BrannonKing

### Wallet server
  * [bug] catch TimeoutError when attempting to send notifications (https://github.com/lbryio/lbry-sdk/pull/2761) by jackrobison
  * [improvement] added database index for several `channel_hash` based queries (https://github.com/lbryio/lbry-sdk/pull/2760) by eukreign
",41103286
105,False,False,2020-02-03T18:41:33Z,2020-02-03T18:58:13Z,"## [0.57.0] - 2020-02-03

### API
  * [new feature] added `--resolve` to local `claim_list`/`stream_list`/`channel_list` commands which returns more metadata for local claims (https://github.com/lbryio/lbry-sdk/pull/2757) by eukreign

### Claims
  * [improvement] resolve errors make distinction between truly not found claims and claims which were censored by wallet server (https://github.com/lbryio/lbry-sdk/pull/2756) by eukreign
  * [new feature] add duration to claim search params (https://github.com/lbryio/lbry-sdk/pull/2754) by jessopb

### Packaging
  * [improvement] update copyright year in license (https://github.com/lbryio/lbry-sdk/pull/2758) by ykris45

### Wallet server
  * [bug] fixed initialization problem with ar trending algorithm (https://github.com/lbryio/lbry-sdk/pull/2755) by eggplantbren
",41103286
106,False,False,2020-01-29T00:58:28Z,2020-01-29T01:14:33Z,"## [0.56.0] - 2020-01-28

### Wallet
  * [improvement] faster wallet.id attribute, improves speed of selecting wallets during api calls (https://github.com/lbryio/lbry-sdk/pull/2748) by jackrobison

### Wallet server
  * [refactor] configurable trending algorithms (https://github.com/lbryio/lbry-sdk/pull/2750) by eukreign
  * [improvement] add metrics to wallet server prometheus (https://github.com/lbryio/lbry-sdk/pull/2749) by jackrobison
  * [new feature] new trending algorithm contributed by Brendon Brewer, to enable on wallet server set `TRENDING_ALGORITHMS` environment variable on wallet server to `ar` (https://github.com/lbryio/lbry-sdk/pull/2747) by eggplantbren
",41103286
107,False,False,2020-01-27T17:20:41Z,2020-01-27T17:36:59Z,"## [0.55.0] - 2020-01-27

### Devops
  * [new feature] Add prometheus metrics collection to client and server (take two) (https://github.com/lbryio/lbry-sdk/pull/2734) by lyoshenka

### Wallet server
  * [bug] fix bug where repost claims were not being fully resolved (https://github.com/lbryio/lbry-sdk/pull/2737) by eukreign
  * [improvement] rename `BLOCKING_CHANNELS_IDS`/`FILTERING_CHANNELS_IDS` wallet server environment variables to remove double S (https://github.com/lbryio/lbry-sdk/pull/2736) by eukreign
",41103286
108,False,False,2020-01-22T13:40:35Z,2020-01-22T14:02:59Z,"## [0.54.1] - 2020-01-22

### Wallet server
  * [improvement] added support to server side claim blocking to differentiate between claims blocked from resolve and search (`BLOCKING_CHANNELS_IDS`) and claims that are blocked from search only but can still be resolved (`FILTERING_CHANNELS_IDS`) (https://github.com/lbryio/lbry-sdk/pull/2735) by eukreign
",41103286
109,False,False,2020-01-21T21:17:12Z,2020-01-21T21:36:16Z,"## [0.54.0] - 2020-01-21

### Backwards Incompatible Changes
  * [wallet server] `--blocklist_channel_ids` argument to `claim_search` is no longer supported, channels containing re-posted claims to be blocked from search results must be defined on the server side (https://github.com/lbryio/lbry-sdk/pull/2717)
  * [wallet server] `JSON` returned by `claim_search` command now includes a `blocked` value with metadata on claims blocked from the current search results. (https://github.com/lbryio/lbry-sdk/pull/2717)

### Wallet server
  * [new feature] Add metadata on what was filtered out of `claim_search`/`resolve` results (https://github.com/lbryio/lbry-sdk/pull/2717) by eukreign
",41103286
110,False,False,2020-01-16T21:43:26Z,2020-01-16T21:59:13Z,"## [0.53.3] - 2020-01-16

### Packaging
  * [improvement] update aioupnp requirement to 0.0.17 (https://github.com/lbryio/lbry-sdk/pull/2730) by jackrobison

### Wallet
  * [bug] disconnect from server that returns rpc error for server.version (https://github.com/lbryio/lbry-sdk/pull/2729) by jackrobison
  * [bug] check minimum server version from wallet client (https://github.com/lbryio/lbry-sdk/pull/2728) by jackrobison
",41103286
111,False,False,2020-01-14T21:47:56Z,2020-01-14T22:03:59Z,"## [0.53.2] - 2020-01-14

### Database
  * [improvement] faster stream manager startup (https://github.com/lbryio/lbry-sdk/pull/2725) by jackrobison

### Wallet
  * [bug] fixes for intermittent errors with address history subscriptions and with encryption (https://github.com/lbryio/lbry-sdk/pull/2721) by shyba
",41103286
112,False,False,2020-01-13T19:12:30Z,2020-01-13T19:29:47Z,"## [0.53.1] - 2020-01-13

### Commenting
  * [new feature] added `comment_update` command and simplified `comment_create` usage when replying to existing comment (https://github.com/lbryio/lbry-sdk/pull/2706) by osilkin98

### Database
  * [bug] fix database error caused by logging tracebacks from within the sqlite transaction runner (https://github.com/lbryio/lbry-sdk/pull/2720) by jackrobison

### Packaging
  * [bug] pinned pyinstaller to 3.5 as newer version fails to build on windows and mac (https://github.com/lbryio/lbry-sdk/pull/2724) by eukreign

### Wallet
  * [bug] refactor header progress calculation, making it simpler to understand and not prone to division by zero (https://github.com/lbryio/lbry-sdk/pull/2719) by shyba
  * [new feature] add `connected` server to wallet status (https://github.com/lbryio/lbry-sdk/pull/2718) by jackrobison
  * [improvement] speed up wallet sync and startup by batching address history subscriptions (https://github.com/lbryio/lbry-sdk/pull/2716) by jackrobison

### Wallet server
  * [improvement] remove bandwidth limit from server (https://github.com/lbryio/lbry-sdk/pull/2696) by shyba
",41103286
113,False,False,2020-01-06T17:21:49Z,2020-01-06T18:24:14Z,"## [0.52.0] - 2020-01-06

This release includes a substantial refactor of the code base to drop `bitcoin` support in `torba` and merge it into `lbry` with the goal to significantly reduce code complexity. This release will require thorough testing and perhaps waiting until a follow up release with any bug fixes before releasing to production. (https://github.com/lbryio/lbry-sdk/pull/2701)


### Backwards Incompatible Changes
  * [packaging] As part of the `torba` and `lbry` merge the wallet client and server now share the same version number. This will create a version check incompatibility where ""older"" wallet servers have versions in the `1.0` range and this new wallet server will be `0.52.0`. (https://github.com/lbryio/lbry-sdk/pull/2701)

### Other
  * [improvement] disable cryptonator feed (https://github.com/lbryio/lbry-sdk/pull/2704) by jackrobison

### Packaging
  * [refactor] merge `torba` into `lbry` (https://github.com/lbryio/lbry-sdk/pull/2701) by eukreign

### Wallet
  * [refactor] refactoring code post torba->lbry merge (https://github.com/lbryio/lbry-sdk/pull/2702) by eukreign
",41103286
114,False,False,2019-12-30T21:34:52Z,2019-12-30T22:20:30Z,"## [0.51.2] - 2019-12-30

### Cli
  * [improvement] support `JSON` in `settings_set` (https://github.com/lbryio/lbry-sdk/pull/2698) by eukreign

### Wallet
  * [improvement] don't log account details on startup if there are more than 10 (https://github.com/lbryio/lbry-sdk/pull/2699) by jackrobison
",41103286
115,False,False,2019-12-30T20:11:29Z,2019-12-30T20:30:42Z,"## [0.51.1] - 2019-12-30

### Database
  * [bug] Fix 12 to 13 migrator (https://github.com/lbryio/lbry-sdk/pull/2695) by jackrobison
",41103286
116,False,False,2019-12-23T17:39:48Z,2019-12-23T18:49:42Z,"## [0.51.0] - 2019-12-23

### Backwards Incompatible Changes
  * [jsonrpc] This release changes the error return data structure to be compliant with JSONRPC standard. The fields `name` and `traceback` where moved into the `data` dictionary. (https://github.com/lbryio/lbry-sdk/pull/2689)

### Jsonrpc
  * [refactor] change returned error data structure to be JSONRPC standard compliant (https://github.com/lbryio/lbry-sdk/pull/2689) by eukreign

### Wallet server
  * [improvement] enable WAL on wallet server (https://github.com/lbryio/lbry-sdk/pull/2690) by shyba
",41103286
117,False,False,2019-12-20T03:09:19Z,2019-12-20T04:03:48Z,"## [0.50.1] - 2019-12-19

### Wallet
  * [improvement] Update balance after a broadcast transaction is accepted to mempool without a delay, fix bug in `status` header progress (https://github.com/lbryio/lbry-sdk/pull/2685) by shyba

### Wallet server
  * [bug] fixed wallet server sync bug related to multiple updates on the same claim in the same block (https://github.com/lbryio/lbry-sdk/pull/2681) by eukreign
",41103286
118,False,False,2019-12-16T16:33:13Z,2019-12-16T17:31:37Z,"## [0.50.0] - 2019-12-16

### Backwards Incompatible Changes
  * [api] Errors returned from RPC calls now include a ""name"" which is the exception class name and a cleaner ""message"" which just has the user friendly error message and the command info (command called, arguments passed) is now in a separate field called ""data"". See examples in the pull request. (https://github.com/lbryio/lbry-sdk/pull/2673)

### API
  * [improvement] improved the data structure returned from RPC by adding an error name and other metadata (https://github.com/lbryio/lbry-sdk/pull/2673) by eukreign
  * [improvement] improved error handling when sending `None`/`null` values to various claim create/update commands (https://github.com/lbryio/lbry-sdk/pull/2543) by gpjacobs

### Wallet
  * [improvement] use buffer write return as written (https://github.com/lbryio/lbry-sdk/pull/2676) by eukreign
  * [improvement] add `--blocklist_channel_ids` to `claim_search` command to specify channels with reposted claims you want blocked from results (https://github.com/lbryio/lbry-sdk/pull/2675) by eukreign
  * [new feature] client side segwit support (receive only, no create support yet) (https://github.com/lbryio/lbry-sdk/pull/2668) by eukreign
  * [bug] fix infinite wait on `TaskGroup.done.wait()` when `TaskGroup.cancel()` is called without tasks (https://github.com/lbryio/lbry-sdk/pull/2667) by shyba
  * [improvement] added `--initial-headers` argument to `lbrynet start` command to support bundled header file (https://github.com/lbryio/lbry-sdk/pull/2664) by eukreign
  * [bug] `utxo list` includes purchases of your claims (https://github.com/lbryio/lbry-sdk/pull/2660) by eukreign
  * [new feature] added `wallet_reconnect` command to trigger lbrynet to reconnect to wallet servers (useful if you changed the wallet servers configuration) (https://github.com/lbryio/lbry-sdk/pull/2653) by shyba
  * [refactor] re-enabled cryptonator market feed and refactored the exchange rate manager  (https://github.com/lbryio/lbry-sdk/pull/2536) by mirgee
  * [improvement] adds command call logging for all create/update/abandon commands (https://github.com/lbryio/lbry-sdk/pull/2415) by osilkin98

### Wallet server
  * [bug] fixes for various edge cases where claim (and support) creation, updating and abandoning is occuring in the same block (https://github.com/lbryio/lbry-sdk/pull/2674) by eukreign
",41103286
119,False,False,2019-12-09T18:05:08Z,2019-12-09T19:04:49Z,"## [0.49.0] - 2019-12-09

### API
  * [improvement] added InvalidPasswordError code when password is invalid (https://github.com/lbryio/lbry-sdk/pull/2654) by eukreign
  * [refactor] refactored error code generator and added support for multiple inheritance in generated exceptions (https://github.com/lbryio/lbry-sdk/pull/2651) by eukreign

### Wallet
  * [improvement] improved header sync and timeouts on wallet client (https://github.com/lbryio/lbry-sdk/pull/2656) by shyba

### Wallet server
  * [refactor] switched wallet server to use `apsw` (https://github.com/lbryio/lbry-sdk/pull/2655) by eukreign
",41103286
120,False,False,2019-12-06T01:56:57Z,2019-12-06T04:04:59Z,"## [0.48.2] - 2019-12-04


This release changes the behavior of downloads that fail to complete. Upon startup file downloads that were running at the previous shutdown are resumed - this remains the same. However, if these or later user initiated attempts to download files (`get`, `file_set_status`, `file_save` or via partial content requests) time out when downloading a blob (due to there not being any peers or the only peers who are found indicating that they do not have it) then the file will go into a `stopped` state. To re-attempt completing the download they must be resumed with `file_set_status`, `get`, `file_save`, or by reading via partial content requests. (https://github.com/lbryio/lbry-sdk/pull/2650)


### DHT
  * [new feature] Persist and restore the routing table (https://github.com/lbryio/lbry-sdk/pull/2601) by mirgee
",41103286
121,False,False,2019-12-02T17:39:41Z,2019-12-02T19:35:34Z,"## [0.48.1] - 2019-12-02

### DHT
  * [improvement] Request all pages of peers for a blob (https://github.com/lbryio/lbry-sdk/pull/2647) by jackrobison

### API
  * [improvement] add wallet server information to `status` command (https://github.com/lbryio/lbry-sdk/pull/2635) by jessopb

### Packaging
  * [new feature] Enable builds on GitLab CI in anticipation of moving away from Travis (https://github.com/lbryio/lbry-sdk/pull/2630) by lyoshenka

### Wallet server
  * [improvement] upgrade SDK to use lbrycrd v0.17.3.2 (https://github.com/lbryio/lbry-sdk/pull/2642) by eukreign
",41103286
122,False,False,2019-11-26T01:39:36Z,2019-11-26T03:19:41Z,"## [0.48.0] - 2019-11-25

### Backwards Incompatible Changes
  * [wallet server] This release includes backwards incompatible APIs and will automatically disconnect clients with an older version when they try to connect. (https://github.com/lbryio/lbry-sdk/pull/2640)

### API
  * [new feature] added `settings_clear` command to reset a setting to its default value (https://github.com/lbryio/lbry-sdk/pull/2633) by jessopb
  * [refactor] hierarchical and markdown managed exceptions to help with more granular error reporting (https://github.com/lbryio/lbry-sdk/pull/2611) by eukreign

### Discovery
  * [new feature] support for reposting claims via `stream_repost` command and ability to block claims reposted to a channel (https://github.com/lbryio/lbry-sdk/pull/2535) by shyba

### Wallet server
  * [improvement] bump protocol version (https://github.com/lbryio/lbry-sdk/pull/2640) by shyba
  * [bug] fixes for wallet server sync stall issues (https://github.com/lbryio/lbry-sdk/pull/2638) by shyba
  * [improvement] more segwit fixes on wallet server (https://github.com/lbryio/lbry-sdk/pull/2636) by eukreign
",41103286
123,False,False,2019-11-18T15:57:58Z,2019-11-18T16:54:42Z,"## [0.47.0] - 2019-11-18

Wallet server now supports full text searching by using `claim_search` command and passing `--text` argument (note that `--order_by` is ignored when `--text` is passed because it will sort results based on text match ranking). (https://github.com/lbryio/lbry-sdk/pull/2622)

A major new feature in this release is the `collection` claim type which allows creating (`collection_create`/`collection_update`) playlists and other collections of claims and then resolving the items in the collection (`collection_resolve`). (https://github.com/lbryio/lbry-sdk/pull/2621)


### Claims
  * [new feature] added a new `collection` claim type; managed via commands `collection_create`, `collection_update`, `collection_abandon`, `collection_list` and `collection_resolve` (https://github.com/lbryio/lbry-sdk/pull/2621) by jessopb

### Discovery
  * [new feature] full text search in wallet server using `claim_search` via argument `--text` (https://github.com/lbryio/lbry-sdk/pull/2622) by eukreign

### Network
  * [improvement] bump aioupnp to 0.0.16, fixes UPnP support for TP-Link routers (https://github.com/lbryio/lbry-sdk/pull/2623) by jackrobison

### Wallet
  * [bug] fix bug where wallet client errors would trap and get the SDK stuck (https://github.com/lbryio/lbry-sdk/pull/2625) by shyba
  * [improvement] stop signing support TXs too many times (https://github.com/lbryio/lbry-sdk/pull/2624) by eukreign
  * [improvement] Download headers exclusively from wallet servers (https://github.com/lbryio/lbry-sdk/pull/2488) by shyba
",41103286
124,False,False,2019-11-12T16:26:24Z,2019-11-12T17:09:17Z,"## [0.46.1] - 2019-11-12

### Wallet server
  * [improvement] added support for witness transactions (https://github.com/lbryio/lbry-sdk/pull/2613) by eukreign
",41103286
125,False,False,2019-11-11T15:49:44Z,2019-11-11T16:46:39Z,"## [0.46.0] - 2019-11-11

### Backwards Incompatible Changes
  * [api] `wallet_balance` and `account_balance` no longer take a `--reserved_subtotals` argument and instead always return the subtotals. (https://github.com/lbryio/lbry-sdk/pull/2608)

### API
  * [improvement] added caching for `wallet balance` command and dropped `--reserved_subtotals` argument instead always returning the subtotals (for `account balance` and `wallet balance`) (https://github.com/lbryio/lbry-sdk/pull/2608) by eukreign

### Wallet server
  * [improvement] wallet server: send correct server version (sdk version now) (https://github.com/lbryio/lbry-sdk/pull/2612) by shyba
",41103286
126,False,False,2019-11-04T15:30:57Z,2019-11-04T18:07:51Z,"## [0.45.0] - 2019-11-04

### DHT
  * [new feature] Add optional extensions to DHT datagram format (https://github.com/lbryio/lbry-sdk/pull/2552) by jackrobison

### API
  * [bug] subscribe accounts on wallet_add (https://github.com/lbryio/lbry-sdk/pull/2599) by eukreign

### Wallet
  * [bug] daemon transaction sync bug fix, check `txo.has_address` before calling `txo.get_address()` (https://github.com/lbryio/lbry-sdk/pull/2593) by eukreign
  * [new feature] synchronization of content purchase receipts via blockchain (https://github.com/lbryio/lbry-sdk/pull/2584) by eukreign

### Wallet server
  * [improvement] update trending period (https://github.com/lbryio/lbry-sdk/pull/2603) by tzarebczan
  * [improvement] remove bandwidth and subscriptions limits from wallet server (https://github.com/lbryio/lbry-sdk/pull/2594) by shyba
",41103286
127,False,False,2019-10-28T20:00:17Z,2019-10-28T21:10:05Z,"## [0.44.1] - 2019-10-28

### Database
  * [bug] fix 11to12 migration typo (https://github.com/lbryio/lbry-sdk/pull/2589) by jackrobison

### Network
  * [improvement] fix setting the external ip in `status` if upnp fails (https://github.com/lbryio/lbry-sdk/pull/2590) by jackrobison
",41103286
128,False,False,2019-10-28T15:35:51Z,2019-10-28T16:20:06Z,"## [0.44.0] - 2019-10-28

### Backwards Incompatible Changes
  * [api] All list commands now always return paginated results, with `page` argument defaulting to 1 and `page_size` defaulting to 20, commands affected are: `address_list`, `claim_list`, `channel_list`, `stream_list`, `support_list`, `transaction_list`, `utxo_list`, `wallet_list`, `account_list`, `peer_list`, `blob_list`, `file_list` and `claim_search`. (https://github.com/lbryio/lbry-sdk/pull/2563)
  * [api] `account_list` now returns a paginated list of accounts without having accounts in a dictionary keyed by the ledger name, instead the ledger name is now inside the account dictionary metadata. (https://github.com/lbryio/lbry-sdk/pull/2563)

### API
  * [refactor] updated all list commands to always return paginated results (https://github.com/lbryio/lbry-sdk/pull/2563) by f1x3d
  * [improvement] normalize tag names (remove duplicates, blank spaces and illegal chars) (https://github.com/lbryio/lbry-sdk/pull/2482) by mirgee
  * [improvement] added pagination to `file_list` (https://github.com/lbryio/lbry-sdk/pull/2427) by osilkin98

### Blobs/files
  * [new feature] adds `added_on` field to files (https://github.com/lbryio/lbry-sdk/pull/2428) by osilkin98

### Claims
  * [bug] clear metadata when file type changes (https://github.com/lbryio/lbry-sdk/pull/2501) by mirgee

### Config
  * [refactor] refactored logging configuration and added more tests (https://github.com/lbryio/lbry-sdk/pull/2555) by lyoshenka

### Network
  * [improvement] faster startup, bump aioupnp -> 0.0.15 (https://github.com/lbryio/lbry-sdk/pull/2588) by jackrobison

### Other
  * [improvement] Convert some format() strings in lbry and torba to fstrings (https://github.com/lbryio/lbry-sdk/pull/2522) by ju-sh
  * [refactor] code reformatting and update unit tests to use more specific asserts (https://github.com/lbryio/lbry-sdk/pull/2498) by hugovk

### Tests
  * [improvement] fix for stream type change integration test (https://github.com/lbryio/lbry-sdk/pull/2582) by eukreign
  * [improvement] added unit test for keyboard interrupt occurring on startup (https://github.com/lbryio/lbry-sdk/pull/2548) by cbaumler

### Wallet
  * [improvement] don't error if blank password was set previously (https://github.com/lbryio/lbry-sdk/pull/2577) by eukreign

### Wallet server
  * [bug] fix for wallet server bug related to changing the channel of a stream (https://github.com/lbryio/lbry-sdk/pull/2580) by eukreign
  * [bug] fix bug with resolve and conflicting `claim_id` segments (https://github.com/lbryio/lbry-sdk/pull/2578) by eukreign
",41103286
129,False,False,2019-10-21T17:09:36Z,2019-10-21T18:00:57Z,"## [0.43.4] - 2019-10-21

### Blobs/files
  * [improvement] Sanitize file names before saving (https://github.com/lbryio/lbry-sdk/pull/2476) by mirgee

### Packaging
  * [improvement] bump ecdsa version (https://github.com/lbryio/lbry-sdk/pull/2523) by shyba
",41103286
130,False,False,2019-10-18T22:10:01Z,2019-10-18T22:48:33Z,"## [0.43.3] - 2019-10-18

### Backwards Incompatible Changes
  * [network] removed unused `time` field from connection `status` (https://github.com/lbryio/lbry-sdk/pull/2567)

### Network
  * [bug] Fix `total_sent` and `total_received` in connection `status` (https://github.com/lbryio/lbry-sdk/pull/2567) by jackrobison

### Tests
  * [improvement] fix logging tests (https://github.com/lbryio/lbry-sdk/pull/2559) by mirgee

### Wallet
  * [improvement] support unlocking with blank password but throw an error when encrypting with blank password (https://github.com/lbryio/lbry-sdk/pull/2568) by eukreign
  * [bug] fix for encrypted wallet with import read-only channel accounts (https://github.com/lbryio/lbry-sdk/pull/2566) by eukreign
",41103286
131,False,False,2019-10-17T17:38:52Z,2019-10-17T19:26:04Z,"## [0.43.2] - 2019-10-17

### API
  * [bug] `publish` checks all accounts for claim before forwarding to `stream_create`/`stream_update` (https://github.com/lbryio/lbry-sdk/pull/2562) by eukreign
",41103286
132,False,False,2019-10-16T19:50:10Z,2019-10-16T20:33:40Z,"## [0.43.1] - 2019-10-16

### Packaging
  * [bug] pin choco py to 37 on win build (https://github.com/lbryio/lbry-sdk/pull/2553) by shyba

### Wallet
  * [improvement] incorporate password in the wallet hash (https://github.com/lbryio/lbry-sdk/pull/2556) by eukreign
  * [improvement] `encrypt-on-disk` preference, propagated between devices and specifies wallet saving encryption; bug fix with loading/saving preferences (https://github.com/lbryio/lbry-sdk/pull/2549) by eukreign
",41103286
133,False,False,2019-10-14T17:07:15Z,2019-10-14T18:19:29Z,"## [0.43.0] - 2019-10-14

### Backwards Incompatible Changes
  * [wallet] commands `account` `lock`/`unlock`/`encrypt`/`decrypt` have been replaced by `wallet` `lock`/`unlock`/`encrypt`/`decrypt`. (https://github.com/lbryio/lbry-sdk/pull/2524)

### DHT
  * [refactor] small clarifying changes (https://github.com/lbryio/lbry-sdk/pull/2502) by lyoshenka

### API
  * [new feature] added `wallet send` command (https://github.com/lbryio/lbry-sdk/pull/2538) by eukreign
  * [improvement] `utxo release` applies to all accounts in wallet (https://github.com/lbryio/lbry-sdk/pull/2534) by eukreign
  * [new feature] added `wallet balance` command (https://github.com/lbryio/lbry-sdk/pull/2533) by eukreign

### Blobs/files
  * [new feature] add oga and ogv mime types (https://github.com/lbryio/lbry-sdk/pull/2526) by tzarebczan

### Cli
  * [improvement] Make `--verbose` param behave as per documentation (https://github.com/lbryio/lbry-sdk/pull/2478) by mirgee

### Downloads
  * [bug] fix resolving fixed peers from an ipv6 connection (https://github.com/lbryio/lbry-sdk/pull/2521) by jackrobison

### Other
  * [improvement] use more specific asserts in torba tests (https://github.com/lbryio/lbry-sdk/pull/2508) by StrikerRUS

### Wallet
  * [improvement] time stamped top-level wallet preferences (https://github.com/lbryio/lbry-sdk/pull/2531) by eukreign
  * [new feature] added `wallet` `lock`/`unlock`/`encrypt`/`decrypt` and `status` APIs (https://github.com/lbryio/lbry-sdk/pull/2524) by eukreign

### Wallet server
  * [improvement] only do trending calculations near the tip of the chain (https://github.com/lbryio/lbry-sdk/pull/2527) by lyoshenka
",41103286
134,False,False,2019-10-07T17:03:51Z,2019-10-07T17:47:08Z,"## [0.42.2] - 2019-10-07

### DHT
  * [bug] DHT object cache refactored, fixing a bug that could prevent adding peers (https://github.com/lbryio/lbry-sdk/pull/2489) by shyba

### Docs
  * [bug] Grammar correction (https://github.com/lbryio/lbry-sdk/pull/2515) by rishav142k
  * [bug] Punctuation (https://github.com/lbryio/lbry-sdk/pull/2512) by OrginalS
  * [improvement] Fix spelling (https://github.com/lbryio/lbry-sdk/pull/2499) by hugovk

### Network
  * [bug] Fix incorrect counting of total bytes sent / received (https://github.com/lbryio/lbry-sdk/pull/2505) by mirgee

### Other
  * [improvement] Reuse loggly connection (https://github.com/lbryio/lbry-sdk/pull/2503) by jackrobison

### Wallet
  * [bug] bug fixes related to cross-account / wallet operations (https://github.com/lbryio/lbry-sdk/pull/2497) by eukreign
",41103286
135,False,False,2019-09-30T16:59:45Z,2019-09-30T17:27:21Z,"## [0.42.1] - 2019-09-30

### API
  * [bug] fix for wallet_remove command (https://github.com/lbryio/lbry-sdk/pull/2493) by eukreign

### Network
  * [improvement] retriable resolve (https://github.com/lbryio/lbry-sdk/pull/2460) by shyba

### Wallet
  * [bug] handle intermediate state on wallet client sessions (https://github.com/lbryio/lbry-sdk/pull/2479) by shyba

### Wallet server
  * [improvement] change trending window to 6 hours (https://github.com/lbryio/lbry-sdk/pull/2484) by lyoshenka
",41103286
136,False,False,2019-09-23T17:50:21Z,2019-09-23T18:06:43Z,"## [0.42.0] - 2019-09-23

### Backwards Incompatible Changes
  * [api] `address_list` no longer returns a list of strings, instead it returns a list of dictionaries with several fields, including an `address` field which is the value that used to be the sole response in the previous API; a new argument `--address` has been added to show details for only a single specific address; the list of addresses is now generated across all accounts in the wallet unless a specific account is passed with `--account_id=`. (https://github.com/lbryio/lbry-sdk/pull/2464)

### API
  * [new feature] wallet_id based API (https://github.com/lbryio/lbry-sdk/pull/2472) by eukreign
  * [improvement] fix is_valid_address so it checks address checksum (https://github.com/lbryio/lbry-sdk/pull/2468) by shyba
  * [improvement] refactored `address_list` API to return a richer data type (https://github.com/lbryio/lbry-sdk/pull/2464) by eukreign

### Claims
  * [improvement] Check invalid names against updated regex so it matches the app (https://github.com/lbryio/lbry-sdk/pull/2473) by shyba

### Cli
  * [bug] Handle claim_name as a string (https://github.com/lbryio/lbry-sdk/pull/2474) by mirgee
  * [improvement] Fix docopt for `claim_search` (https://github.com/lbryio/lbry-sdk/pull/2455) by mirgee
  * [improvement] Enable to set max_key_fee to null via cli (https://github.com/lbryio/lbry-sdk/pull/2450) by mirgee

### Database
  * [bug] Test sqlite error handling (https://github.com/lbryio/lbry-sdk/pull/2459) by jackrobison

### Downloads
  * [improvement] Fix failing key payment for null max key fee (https://github.com/lbryio/lbry-sdk/pull/2467) by mirgee

### Files
  * [improvement] add Flac mime type (https://github.com/lbryio/lbry-sdk/pull/2466) by tzarebczan

### Wallet server
  * [new feature] wallet server: add options to set server description, payment address and daily fee (https://github.com/lbryio/lbry-sdk/pull/2463) by shyba
",41103286
137,False,False,2019-09-16T17:24:11Z,2019-09-16T17:56:28Z,"## [0.41.0] - 2019-09-16

This is a low confidence release and is intended for testing the included fixes and improvements. Please consider the next release for production deployment instead of this one.

This release includes changes to the client wallet database structure and will require a full re-sync of your transactions; this will happen automatically on startup. (https://github.com/lbryio/lbry-sdk/pull/2456)


### API
  * [improvement] use json_file_encoder for managed streams (file list) (https://github.com/lbryio/lbry-sdk/pull/2447) by shyba

### Claims
  * [improvement] Channel claims and certificates no longer need to be in the same account to sign stream claims. (https://github.com/lbryio/lbry-sdk/pull/2456) by eukreign

### Database
  * [improvement] Fix SQLITE_MISUSE (https://github.com/lbryio/lbry-sdk/pull/2452) by jackrobison

### Wallet server
  * [improvement] download wallet snapshot on first run (https://github.com/lbryio/lbry-sdk/pull/2461) by lyoshenka
  * [improvement] default wallet server to LBC coin (https://github.com/lbryio/lbry-sdk/pull/2458) by lyoshenka
",41103286
138,False,False,2019-09-09T17:00:12Z,2019-09-09T17:43:57Z,"## [0.40.1] - 2019-09-09

### Wallet
  * [improvement] bugfixes for wallet client network rare edge case where it switches to a server about to go down (https://github.com/lbryio/lbry-sdk/pull/2451) by shyba
",41103286
139,False,False,2019-09-03T16:36:00Z,2019-09-03T17:11:22Z,"## [0.40.0] - 2019-09-03

### API
  * [new feature] Added preferences storage API (https://github.com/lbryio/lbry-sdk/pull/2440) by eukreign
  * [bug] fix intermittent bug where claim metadata was cleared out (https://github.com/lbryio/lbry-sdk/pull/2434) by eukreign

### Wallet server
  * [improvement] sync and connection issues (https://github.com/lbryio/lbry-sdk/pull/2418) by shyba
",41103286
140,False,False,2019-08-26T17:06:26Z,2019-08-26T18:00:53Z,"## [0.39.3] - 2019-08-26

### Commenting
  * [new feature] Adds Hide Comment Functionality (https://github.com/lbryio/lbry-sdk/pull/2370) by osilkin98

### Network
  * [improvement] Fix misc errors when going offline/online (https://github.com/lbryio/lbry-sdk/pull/2411) by jackrobison

### Wallet
  * [improvement] Switch to the fastest wallet server and fix connection errors (https://github.com/lbryio/lbry-sdk/pull/2414) by jackrobison
  * [bug] fix unpack error known leftovers (https://github.com/lbryio/lbry-sdk/pull/2397) by shyba

### Wallet server
  * [bug] metrics reporting fix for wallet servers (https://github.com/lbryio/lbry-sdk/pull/2413) by eukreign
",41103286
141,False,False,2019-08-21T00:37:20Z,2019-08-21T02:58:44Z,"## [0.39.2] - 2019-08-20

### Wallet
  * [improvement] Improve wallet server selection (https://github.com/lbryio/lbry-sdk/pull/2398) by shyba
",41103286
142,False,False,2019-08-19T17:02:16Z,2019-08-19T17:31:31Z,"## [0.39.1] - 2019-08-19

### Downloads
  * [improvement] UDP ping blob peers to prioritize those who can be connected to (https://github.com/lbryio/lbry-sdk/pull/2401) by jackrobison

### Network
  * [improvement] bump `aioupnp` requirement to 0.0.14, fixes upnp errors blocking startup (https://github.com/lbryio/lbry-sdk/pull/2402) by jackrobison

### Wallet
  * [improvement] refactor basenetwork so each session takes care of itself (https://github.com/lbryio/lbry-sdk/pull/2371) by shyba

### Wallet server
  * [new feature] monitor wallet server block transitions and report if new block is excessively delayed (https://github.com/lbryio/lbry-sdk/pull/2400) by eukreign
  * [improvement] add support for lbrycrd 17 (https://github.com/lbryio/lbry-sdk/pull/2395) by shyba
",41103286
143,False,False,2019-08-12T17:01:16Z,2019-08-12T17:37:25Z,"## [0.39.0] - 2019-08-12

### Backwards Incompatible Changes
  * [api] `channel_create`, `channel_update`, `publish`, `stream_create`, `stream_update` and `support_create` have a new `--funding_account_ids` argument with a new default behavior that all accounts are used to fund those transactions and you must explicitly limit accounts by using the `--funding_account_ids` argument. (https://github.com/lbryio/lbry-sdk/pull/2386)
  * [api] `claim_list`, `channel_list`, `stream_list`, `support_list`, `transaction_list` and `utxo_list` now list results across all accounts, you must pass `account_id` argument to limit results to a specific account. (https://github.com/lbryio/lbry-sdk/pull/2386)

### API
  * [improvement] most commands now work across all accounts by default (https://github.com/lbryio/lbry-sdk/pull/2386) by eukreign

### Blob exchange
  * [improvement] Server side blob exchange timeouts (https://github.com/lbryio/lbry-sdk/pull/2385) by jackrobison

### Blobs/files
  * [improvement] Speed up file_list by more efficiently counting completed_blob_hashes (https://github.com/lbryio/lbry-sdk/pull/2384) by shyba

### Wallet
  * [improvement] Add `connected_servers` field to wallet status and improve analytics for wallet related download errors (https://github.com/lbryio/lbry-sdk/pull/2379) by jackrobison
",41103286
144,False,False,2019-08-05T17:40:49Z,2019-08-05T18:13:45Z,"## [0.38.7] - 2019-08-05

### Backwards Incompatible Changes
  * [api] `account balance` no longer returns an integer. It now returns a dictionary with granular balances. The integer it used to return is now under `available` key on that new dictionary format. (https://github.com/lbryio/lbry-sdk/pull/2350)

### API
  * [new feature] add granular balances (https://github.com/lbryio/lbry-sdk/pull/2350) by shyba

### Blob exchange
  * [improvement] Connection failure analytics (https://github.com/lbryio/lbry-sdk/pull/2373) by jackrobison
  * [improvement] Fix dust transaction error on zero amount content fee (https://github.com/lbryio/lbry-sdk/pull/2359) by jackrobison

### Commenting
  * [improvement] Fixes comment docs & adds wallet component requirement on comment funcs (https://github.com/lbryio/lbry-sdk/pull/2358) by osilkin98
",41103286
145,False,False,2019-07-29T19:11:18Z,2019-07-29T19:54:59Z,"## [0.38.6] - 2019-07-29

### Blob exchange
  * [refactor] refactor and fix ttfb for new api (https://github.com/lbryio/lbry-sdk/pull/2323) by shyba

### Commenting
  * [new feature] Adds `comment abandon` command (https://github.com/lbryio/lbry-sdk/pull/2332) by osilkin98

### Wallet server
  * [improvement] added index for claim_type searches (https://github.com/lbryio/lbry-sdk/pull/2355) by eukreign
",41103286
146,False,False,2019-07-25T17:22:54Z,2019-07-25T18:12:28Z,"## [0.38.5] - 2019-07-25

### Downloads
  * [improvement] Probe if peers can be connected to during blob downloads to more quickly skip bad peers (https://github.com/lbryio/lbry-sdk/pull/2348) by jackrobison
",41103286
147,False,False,2019-07-24T22:02:03Z,2019-07-24T22:59:57Z,"## [0.38.4] - 2019-07-24

### Claims
  * [improvement] save channel keys into wallet before broadcasting (https://github.com/lbryio/lbry-sdk/pull/2347) by eukreign
",41103286
148,False,False,2019-07-23T21:44:38Z,2019-07-23T22:11:13Z,"## [0.38.3] - 2019-07-23

### Wallet
  * [improvement] dont fail when s3 is out of reach (https://github.com/lbryio/lbry-sdk/pull/2339) by shyba
",41103286
149,False,False,2019-07-22T21:45:43Z,2019-07-23T14:48:49Z,"## [0.38.2] - 2019-07-22

### API
  * [improvement] str > list for a few fields (https://github.com/lbryio/lbry-sdk/pull/2312) by tzarebczan
  * [bug] set file status to completed only when all bytes were written (https://github.com/lbryio/lbry-sdk/pull/2310) by shyba

### Packaging
  * [improvement] remove RCs from release tool (https://github.com/lbryio/lbry-sdk/pull/2321) by lyoshenka

### Wallet
  * [bug] torba client networking: improve network timeout handling and fix spurious logs on shutdown (https://github.com/lbryio/lbry-sdk/pull/2317) by shyba

### Wallet server
  * [improvement] popular tags are indexed and use different search strategy than less popular tags (https://github.com/lbryio/lbry-sdk/pull/2331) by eukreign
  * [new feature] percentile metrics and refactoring (https://github.com/lbryio/lbry-sdk/pull/2327) by eukreign
  * [improvement] Interrupt and log slow wallet server queries (https://github.com/lbryio/lbry-sdk/pull/2320) by jackrobison
  * [new feature] Websocket admin server (https://github.com/lbryio/lbry-sdk/pull/2308) by eukreign
",41103286
150,False,False,2019-07-15T16:02:18Z,2019-07-15T19:10:58Z,"## [0.38.1] - 2019-07-15

### API
  * [improvement] added `--no-totals` argument to `claim search` (https://github.com/lbryio/lbry-sdk/pull/2298) by eukreign

### Config
  * [improvement] add `track_bandwidth` config setting to disable bandwidth usage in `status`, add `total_sent` and `total_received` fields to connection status (https://github.com/lbryio/lbry-sdk/pull/2275) by jackrobison

### Database
  * [bug] fixed issue where sqlite threw ""too many sql variables"" error (https://github.com/lbryio/lbry-sdk/pull/2294) by shyba

### Packaging
  * [bug] fix for travis windows build (https://github.com/lbryio/lbry-sdk/pull/2306) by eukreign

### Wallet
  * [improvement] tx parsing speedup and faster wallet sync (https://github.com/lbryio/lbry-sdk/pull/2304) by eukreign

### Wallet server
  * [improvement] multi-process wallet server query executor and bonus stuff (https://github.com/lbryio/lbry-sdk/pull/2307) by eukreign
  * [improvement] `claim search` uses different tag filtering approaches depending on query type (https://github.com/lbryio/lbry-sdk/pull/2303) by eukreign
  * [improvement] Fix wallet server session bloat from unhandled socket errors (https://github.com/lbryio/lbry-sdk/pull/2273) by jackrobison
",41103286
151,False,False,2019-06-25T20:27:01Z,2019-06-25T21:00:27Z,"## [0.38.0] - 2019-06-25

Please review the Backwards Incompatible Changes section for important information regarding storage of channel certificates. (https://github.com/lbryio/lbry-sdk/pull/2151)

SQL based wallet server is the flagship feature of this release providing for significantly faster `resolve`s and a new advanced claim search feature. Please review the `claim_search` API command for details on its capabilities. This release also includes many enhancements to the DHT and blob exchange protocol. (https://github.com/lbryio/lbry-sdk/pull/2008)

A preview release of commenting API is also included but is expected to change in future releases. (https://github.com/lbryio/lbry-sdk/pull/2008)


### Backwards Incompatible Changes
  * [wallet] Storage format of channel certificates changed in this release and is not backwards compatible with the older format. When you start the 0.38.0 client for the first time it will migrated all channel certificates to the new format and you will no longer be able to use older clients. (https://github.com/lbryio/lbry-sdk/pull/2151)

### DHT
  * [improvement] paginated deterministically shuffled find_value (https://github.com/lbryio/lbry-sdk/pull/2247) by jackrobison

### API
  * [improvement] update `version` docstring, add `torba_version` (https://github.com/lbryio/lbry-sdk/pull/2212) by jackrobison

### Blob exchange
  * [new feature] add `connections` to `blob_manager` field of `status` to show current bandwidth usage totals in mb/s and by connection in bytes/s (https://github.com/lbryio/lbry-sdk/pull/2196) by jackrobison

### Blobs/files
  * [improvement] start returning bytes for a range request at the requested starting position (https://github.com/lbryio/lbry-sdk/pull/2179) by jackrobison
  * [improvement] add a lru cache for decrypted blobs to minimize redownloading them, add `blob_lru_cache_size` to the config to set the cache size (https://github.com/lbryio/lbry-sdk/pull/2178) by jackrobison

### Claims
  * [improvement] better handle claims which fail to decode (https://github.com/lbryio/lbry-sdk/pull/2214) by eukreign

### Cli
  * [improvement] `Strings` based settings (eg, `--components_to_skip`) works like the `Servers` setting from CLI (https://github.com/lbryio/lbry-sdk/pull/2207) by eukreign
  * [improvement] `start` command accepts server lists arguments by passing `--server-argument=` multiple times. (https://github.com/lbryio/lbry-sdk/pull/2202) by eukreign

### Commenting
  * [improvement] Implements Comment Signing & Validating in the SDK (https://github.com/lbryio/lbry-sdk/pull/2204) by osilkin98
  * [improvement] comment client api (https://github.com/lbryio/lbry-sdk/pull/2194) by eukreign

### Discovery
  * [new feature] added `--not_channel_ids` and `--has_channel_signature` and renamed `--valid_channel_signatures`/`--invalid_channel_signatures` to be singular (no `s` at end) (https://github.com/lbryio/lbry-sdk/pull/2256) by eukreign

### Docs
  * [improvement] enforce min python version (https://github.com/lbryio/lbry-sdk/pull/2161) by lyoshenka

### Files
  * [new feature] add MKV to mime types (https://github.com/lbryio/lbry-sdk/pull/2201) by tzarebczan

### Jsonrpc
  * [improvement] added `--blocking` to `stream_*`/`channel_*`/`support_*` commands (https://github.com/lbryio/lbry-sdk/pull/2219) by eukreign

### Media server
  * [improvement] separate try/except for media server (https://github.com/lbryio/lbry-sdk/pull/2241) by lyoshenka

### Packaging
  * [refactor] building windows binaries using travis windows container (https://github.com/lbryio/lbry-sdk/pull/2258) by eukreign
  * [refactor] incorporate torba into lbry repo (https://github.com/lbryio/lbry-sdk/pull/2251) by eukreign
  * [improvement] pin aioupnp requirement to 0.0.12 (https://github.com/lbryio/lbry-sdk/pull/2211) by jackrobison
  * [improvement] fix torba version on travis (https://github.com/lbryio/lbry-sdk/pull/2210) by jackrobison
  * [improvement] improve set_build.py, pin torba version (https://github.com/lbryio/lbry-sdk/pull/2181) by jackrobison

### Wallet
  * [improvement] channel migration better handles missing or invalid certificates (https://github.com/lbryio/lbry-sdk/pull/2255) by eukreign
  * [new feature] add coin selection strategy config (https://github.com/lbryio/lbry-sdk/pull/2249) by lyoshenka
  * [bug] fix startup error when single key account present in wallet (https://github.com/lbryio/lbry-sdk/pull/2167) by eukreign
  * [new feature] channel import/export implementation (https://github.com/lbryio/lbry-sdk/pull/2163) by hackrush01
  * [improvement] private channel keys are now looked up by a hash of their public key (https://github.com/lbryio/lbry-sdk/pull/2151) by hackrush01

### Wallet server
  * [new feature] `canonical_url` calculated in wallet server (https://github.com/lbryio/lbry-sdk/pull/2173) by eukreign
  * [task] new script to verify wallet server database consistency against lbrycrd (https://github.com/lbryio/lbry-sdk/pull/2157) by shyba
  * [new feature] added zscore trending in wallet server (https://github.com/lbryio/lbry-sdk/pull/2150) by eukreign
  * [refactor] sqlite based wallet server for improved claim searching and overall performance (https://github.com/lbryio/lbry-sdk/pull/2008) by eukreign
",41103286
152,False,False,2019-06-19T13:27:13Z,2019-06-19T14:02:50Z,"## [0.37.5] - 2019-06-19

### DHT
  * [fixup] fix find_node and find_value responses that are too large to serialize (https://github.com/lbryio/lbry/pull/2247) by jackrobison
  * [improvement] paginated deterministically shuffled find_value (https://github.com/lbryio/lbry/pull/2247) by jackrobison
",41103286
153,False,False,2019-06-11T19:21:01Z,2019-06-11T20:21:32Z,"## [0.37.4] - 2019-06-11

### Wallet
  * [improvement] select the fastest wallet server on startup (https://github.com/lbryio/torba/pull/86) by shyba

### Blob Exchange
  * [fixup] fix attribute error if availability_response field is missing from response to a blob request (https://github.com/lbryio/lbry/pull/2224) by jackrobison

### Reflector
  * [fixup] fix handling chunked reflector server responses (https://github.com/lbryio/lbry/pull/2217) by jackrobison

### API
  * [improvement] added `--blocking` to `stream_*`/`channel_*`/`support_*` commands (https://github.com/lbryio/lbry/pull/2219) by eukreign 
  * [fixup] fix connections status raising an error during startup (https://github.com/lbryio/lbry/pull/2216) by jackrobison

### Config
  * [fixup] change a few instances of lbry.io to lbry.com (https://github.com/lbryio/lbry/commit/bae2939943c4589904acd767b358dd44e16b595f) by lyoshenka
",41103286
154,False,False,2019-06-06T01:01:23Z,2019-06-06T01:54:53Z,"## [0.37.3] - 2019-06-05

### Files
  * [improvement] add MKV to mime types  (https://github.com/lbryio/lbry/pull/2201) by tzarebczan

### Blob Exchange
  * [new feature] add `connections` to `blob_manager` field of `status` to show current bandwidth usage totals in mb/s and by connection in bytes/s (https://github.com/lbryio/lbry/pull/2196) by jackrobison

### Packaging
  * [improvement] update torba to 0.5.4a0, which now selects the fastest wallet server
",41103286
155,False,False,2019-05-24T22:59:06Z,2019-05-24T23:28:23Z,"## [0.37.2] - 2019-05-24

### Downloads
  * [improvement] add a lru cache for decrypted blobs to minimize redownloading them when responding to range requests (https://github.com/lbryio/lbry/pull/2178)
  * [improvement] start returning bytes for a range request at the requested starting position - fixes streaming to VLC and on android (https://github.com/lbryio/lbry/pull/2179)

### Config
  * [improvement] add `blob_lru_cache_size` config setting (default value of 32, ie 32 blobs)
",41103286
156,False,False,2019-05-18T03:01:47Z,2019-05-18T03:54:53Z,"## [0.37.1] - 2019-05-17

### DHT
  * [bug] fix updating refreshed announcements in the datastore (https://github.com/lbryio/lbry/pull/2130) by jackrobison

### Claims
  * [improvement] Fix resolve internals caching and persisting errors (https://github.com/lbryio/lbry/pull/2148) by jackrobison

### Config
  * [improvement] fix system name on android (https://github.com/lbryio/lbry/pull/2139) by jackrobison

### Docs
  * [bug] fix `save_file` doc (https://github.com/lbryio/lbry/pull/2138) by jackrobison

### Wallet
  * [improvement] add lbryumx4.lbry.com EU wallet server (https://github.com/lbryio/lbry/pull/2133) by nikooo777

### Wallet server
  * [improvement] remove supports from resolve (https://github.com/lbryio/lbry/pull/2131) by shyba
",41103286
157,False,False,2019-05-14T03:39:22Z,2019-05-14T03:59:07Z,"## [0.37.0] - 2019-05-13

### Seekable downloads and range request support
  * This release adds seekable streaming downloads and playback via HTTP range requests at `http://<streaming_server>/stream/<sd_hash>`, as well as new configuration settings `streaming_server` (default: `localhost:5280`) and `streaming_get` (default: `True`). For convenience, `File` type api response objects have a new `streaming_url` string at which the partial content stream can be requested. Only files already in the file manager can be streamed via range requests, if given an sd hash of an unknown stream the server will respond with a 404 error.
  * Provided the`streaming_get` setting is not disabled, new streams can be requested from a claim name and optional claim id at `http://<streaming_server>/get/<name>` or `http://<streaming_server>/get/<name>/<claim_id>`. These will internally call the api method `get` and return an http redirect to the `/stream` endpoint.
  * Writing downloads to the file system can now be disabled or enabled by default using the new `save_files` setting. The existing `get` command will follow this setting but can be overridden with the new `save_file` argument.
  * The added `file_save` command will explicitly save a file to disk.

### Memory only blobs
  * This release adds a `save_blobs` setting (default: `True`) to toggle whether blobs should be saved into memory only (for immediate one-time usage) or to disk (for hosting and replay).
  * The default mode - `save_files=true` and `save_blobs=true` - replicates past behavior of `get` with the addition of seekable access via range requests.
  * The default mode will change in a future release to `save_files=false` and `save_blobs=true`, since the files can be reconstructed from the blobs on the fly and only the blobs are needed for hosting.
  * Users with limited space can run in streaming only mode, using the settings `save_blobs=false` and `save_files=false`. This will require redownloading blobs as they are needed by the browser/range request client - no files will be written unless arguments are provided to do so.

Significant changes have been made to `publish` command bringing its behavior in-line with pre-0.34.0 versions, see section on backwards incompatible changes for more. (https://github.com/lbryio/lbry/pull/2058)


### Backwards Incompatible Changes
  * [database] migrated database from revision 10 to 11. Once migrated, databases version 11 and up can not be run with older versions of lbrynet. (https://github.com/lbryio/lbry/pull/2095)
  * [api] `block_show` command is no longer available in the API, users should run a full node if they need access to blocks (https://github.com/lbryio/lbry/pull/2063)
  * [api] `publish` now behaves like the pre-0.34.0 versions of the command (when updating a stream claim), where all values are required to be passed in (use `stream_update` without `--replace` flag if you only want to update specific values without having to pass all values again) (https://github.com/lbryio/lbry/pull/2058)
  * [api] removed `--clear_tags`, `--clear_languages` and `--clear_locations` from `publish` command, this command now uses `--replace` mode on by default (this is the pre-0.34.0 behavior of `publish` command). (https://github.com/lbryio/lbry/pull/2058)

### DHT
  * [improvement] improve iterative find (https://github.com/lbryio/lbry/pull/2125) by shyba
  * [bug] fix deadlock in routing table when adding a peer (https://github.com/lbryio/lbry/pull/2124) by shyba
  * [bug] fixed cases where the peer search junction can lock up (https://github.com/lbryio/lbry/pull/2100) by shyba
  * [refactor] refactor and fix blob announcer (https://github.com/lbryio/lbry/pull/2093) by shyba

### API
  * [improvement] added logging to `publish` command (https://github.com/lbryio/lbry/pull/2106) by eukreign
  * [improvement] correctly format lat/long and fee amounts in JSON RPC response (https://github.com/lbryio/lbry/pull/2104) by eukreign
  * [bug] fixed hanging API requests blocking shutdown (https://github.com/lbryio/lbry/pull/2102) by shyba
  * [improvement] `stream_update --replace` also clears the channel if one was set previously (https://github.com/lbryio/lbry/pull/2101) by eukreign
  * [improvement] `account_list` defaults to 0 confirmations for balance (https://github.com/lbryio/lbry/pull/2081) by eukreign
  * [improvement] add `timestamp` and rename `depth` to `confirmations` for output of commands `resolve` and `file list` (https://github.com/lbryio/lbry/pull/2067) by shyba
  * [refactor] removed `block_show` command from API (https://github.com/lbryio/lbry/pull/2063) by eukreign
  * [improvement] added `timestamp` field to transaction output results from JSON RPC calls (https://github.com/lbryio/lbry/pull/2062) by eukreign
  * [bug] fixed `--preview` mode on `stream_create`/`stream_update` (https://github.com/lbryio/lbry/pull/2061) by eukreign
  * [bug] fixed signing streams using `--channel_name` argument (https://github.com/lbryio/lbry/pull/2060) by eukreign
  * [new feature] added `--replace` option to `stream_update` and `channel_update`, `publish` defaults to `--replace` (https://github.com/lbryio/lbry/pull/2058) by eukreign
  * [new feature] added `--clear_fee` ability to `stream update` command (https://github.com/lbryio/lbry/pull/2056) by eukreign
  * [new feature] added listing claims in channel via `--channel_name` argument to `claim search` command (https://github.com/lbryio/lbry/pull/2055) by shyba
  * [new feature] support HTTP 206 partial content requests for streaming downloads (https://github.com/lbryio/lbry/pull/2020) by jackrobison

### Blob exchange
  * [improvement] fix blob writer race condition and stuck downloads (https://github.com/lbryio/lbry/pull/2076) by shyba

### Claims
  * [refactor] switched from SHA-256 for unencrypted file hash to SHA-384 (https://github.com/lbryio/lbry/pull/2069) by eukreign

### Config
  * [improvement] add `streaming_server` and `streaming_get` settings to configure the interface/port of the media server and if it supports the `/get` endpoint (https://github.com/lbryio/lbry/pull/2128) by jackrobison
  * [improvement] changed the default `peer_connect_timeout` to 3 and the default for `max_connections_per_download` to 4 (https://github.com/lbryio/lbry/pull/2048) by tzarebczan

### Database
  * [improvement] add saved_file and content_fee columns to file table (https://github.com/lbryio/lbry/pull/2095) by jackrobison
  * [bug] Set should_announce=1 to head and descriptor blobs when saving a stream to database (https://github.com/lbryio/lbry/pull/2092) by shyba

### Devops
  * [bug] time-to-first-byte script fixes (https://github.com/lbryio/lbry/pull/2045) by shyba

### Files
  * [improvement] add `streaming_url` field to `File` api response type (https://github.com/lbryio/lbry/pull/2127) by jackrobison
  * [improvement] stop running streams after ten times the `blob_download_timeout` seconds of no read activity (not being saved or streamed) (https://github.com/lbryio/lbry/pull/2123) by jackrobison
  * [bug] fix incorrect media-type of .cbr archives (https://github.com/lbryio/lbry/pull/2082) by btzr-io
  * [bug] fix `file list` synchronization bug causing saved claims not to update after a subsequent `resolve` (https://github.com/lbryio/lbry/pull/2066) by shyba
  * [bug] updating stream claim with new file now correctly updates file list by removing old file (https://github.com/lbryio/lbry/pull/2059) by eukreign
  * [new feature] support HTTP 206 partial content requests for streaming downloads (https://github.com/lbryio/lbry/pull/2020) by jackrobison

### Wallet
  * [bug] fixed bug where lbrynet failed to start with single-key accounts in the wallet (https://github.com/lbryio/lbry/pull/2080) by eukreign

### Wallet server
  * [improvement] install uvloop on wallet server docker image and default to it (https://github.com/lbryio/lbry/pull/2054) by shyba
",41103286
158,False,False,2019-04-22T22:47:58Z,2019-04-22T23:09:16Z,"## [0.36.0] - 2019-04-22

### Backwards Incompatible Changes
  * [api] RPC output for txos/claims added a few new fields: `claim_op`, `value_type`, `protobuf` and changed a few were renamed: `signing_channel` and `is_channel_signature_valid`, see docs for explanation of these fields. (https://github.com/lbryio/lbry/pull/2038)
  * [api] Due to substantial protobuf changes, the `value` field in JSON responses has changed: `value['thumbnail_url']` is now a dictionary with `url` key: `value['thumbnail']['url']`, `sd_hash` is now in `value['source']['sd_hash']`. (https://github.com/lbryio/lbry/pull/2038)
  * [api] For stream claims only, when the media_type was determined to be a video/audio/image and the SDK was able to extract metadata from the file during publish there will be a `stream_type` value set inside of the root `value` field. (https://github.com/lbryio/lbry/pull/2038)

### API
  * [improvement] add lbry:// to permanent_url response field (https://github.com/lbryio/lbry/pull/2043) by eukreign
  * [improvement] ability to override the file name, hash and size when updating a stream (https://github.com/lbryio/lbry/pull/2042) by eukreign
  * [improvement] add new encoder fields on resolve so app can use them (https://github.com/lbryio/lbry/pull/2039) by shyba
  * [improvement] renamed txo sub_type to value_type in txo json encoder output (https://github.com/lbryio/lbry/pull/2038) by eukreign
  * [improvement] added --include_protobuf to add hexlified protobuf to RPC responses (https://github.com/lbryio/lbry/pull/2037) by eukreign
  * [improvement] exposed new protobuf fields in APIs and updated tests (https://github.com/lbryio/lbry/pull/2036) by eukreign
  * [refactor] `resolve` implementation refactoring (https://github.com/lbryio/lbry/pull/2010) by shyba
  * [refactor] split claim_abandon into stream_abandon and channel_abandon (https://github.com/lbryio/lbry/pull/2006) by eukreign
  * [improvement] Update to new protobuf schema (https://github.com/lbryio/lbry/pull/1984) by shyba
  * [new feature] adds lbrynet commands `comment_list` and `comment_create` which talk to a comment server (https://github.com/lbryio/lbry/pull/1747) by osilkin98

### Claims
  * [improvement] latest protobuf updates (https://github.com/lbryio/lbry/pull/2032) by eukreign
  * [improvement] round USD fees to nearest penny (https://github.com/lbryio/lbry/pull/2009) by eukreign

### Docs
  * [improvement] adds api examples to docs (https://github.com/lbryio/lbry/pull/2026) by jessopb
  * [improvement] put generated commands in groups (https://github.com/lbryio/lbry/pull/2024) by eukreign
  * [task] update email and links to use the new domains (https://github.com/lbryio/lbry/pull/2013) by ykris45
  * [improvement] update install for windows (https://github.com/lbryio/lbry/pull/1895) by tzarebczan
  * [new feature] created infrastructure to automatically generate api examples (https://github.com/lbryio/lbry/pull/1790) by eukreign

### Files
  * [improvement] added mapping of stream type to media file extensions (https://github.com/lbryio/lbry/pull/2012) by tzarebczan

### Other
  * [improvement] Typo fixes and updated gitignore (https://github.com/lbryio/lbry/pull/2025) by NetOperatorWibby

### Packaging
  * [improvement] Fixes issue causing packages incompatible with torba getting installed [attrs==18.2.0] (https://github.com/lbryio/lbry/pull/2022) by osilkin98
  * [bug] fix set_build.py type on mac by running it with python3 explicitely (https://github.com/lbryio/lbry/pull/2015) by eukreign

### Tests
  * [bug] time to first byte script (https://github.com/lbryio/lbry/pull/2014) by tzarebczan

### Wallet
  * [improvement] cache and share txs fetches while validating concurrently on batches (https://github.com/lbryio/lbry/pull/2035) by shyba
  * [improvement] resolve fixes (https://github.com/lbryio/lbry/pull/2019) by shyba

### Wallet server
  * [bug] update wallet server public/private hash config (https://github.com/lbryio/lbry/pull/1996) by tzarebczan
  * [refactor] updated wallet server to use torba transaction parser (https://github.com/lbryio/lbry/pull/1993) by shyba
",41103286
159,False,False,2019-03-30T01:51:05Z,2019-03-30T02:14:03Z,"## [0.35.0] - 2019-03-29

Welcome to lbrynet 0.35.0! This major release includes support for channel claim metadata, new metadata fields for stream claims and a revamped API. (https://github.com/lbryio/lbry/pull/1984)


### Backwards Incompatible Changes
  * [api] `report_bug` command removed. (https://github.com/lbryio/lbry/pull/1984)
  * [api] `wallet_balance` command was deprecated, now removed. (https://github.com/lbryio/lbry/pull/1984)
  * [api] `wallet_send` command removed, use `account_send` instead. (https://github.com/lbryio/lbry/pull/1984)
  * [api] `account_send` argument changed from `--broadcast` to `--preview` (https://github.com/lbryio/lbry/pull/1984)
  * [api] `claim_show` command removed, use `claim_search` instead. (https://github.com/lbryio/lbry/pull/1984)
  * [api] `claim_list` shows your local claims only, use `claim_search` for blockchain claims. (https://github.com/lbryio/lbry/pull/1984)
  * [api] `claim_list_by_channel` is replaced by `claim_search --channel_id=`. (https://github.com/lbryio/lbry/pull/1984)
  * [api] `claim_search` command added to replace several previous commands for anything to do with looking up claims by various means, paginating large claim results and listing claims within a channel. (https://github.com/lbryio/lbry/pull/1984)
  * [api] `claim_abandon` has been split into `stream_abandon` and `channel_abandon`. (https://github.com/lbryio/lbry/pull/1984)
  * [api] `channel_new` deprecated, use `channel_create` instead. (https://github.com/lbryio/lbry/pull/1984)
  * [api] `publish` command API changed to support new metada, also it now just delegates to `stream create` and `stream update`, use those commands instead for more control over the process. (https://github.com/lbryio/lbry/pull/1984)
  * [api] `claim_new_support` is replaced by `support_create` with changed API. (https://github.com/lbryio/lbry/pull/1984)
  * [api] `claim_tip` is replaced by `support_create` with `--tip` flag. (https://github.com/lbryio/lbry/pull/1984)
  * [api] `claim_send_to_address` is replaced by `stream_update` or `channel_update` and passing a new `--claim_address=`. basically, to ""send"" a claim you just change the `claim_address` to recipient. (https://github.com/lbryio/lbry/pull/1984)
  * [api] `claim_list_mine` is replaced by `claim_list`. (https://github.com/lbryio/lbry/pull/1984)
  * [api] new commands added `claim_search`, `channel_create`, `channel_update`, `channel_abandon`, `channel_list`, `stream_create`, `stream_update`, `stream_abandon`, `stream_list`, `support_create`, `support_list`, `support_abandon`. (https://github.com/lbryio/lbry/pull/1984)

### API
  * [refactor] split claim_abandon into stream_abandon and channel_abandon (https://github.com/lbryio/lbry/pull/2006) by eukreign
  * [improvement] Update to new protobuf schema (https://github.com/lbryio/lbry/pull/1984) by shyba

### Wallet server
  * [bug] update wallet server public/private hash config (https://github.com/lbryio/lbry/pull/1996) by tzarebczan
  * [refactor] updated wallet server to use torba transaction parser (https://github.com/lbryio/lbry/pull/1993) by shyba
",41103286
160,False,False,2019-03-15T20:21:29Z,2019-03-15T20:42:37Z,"## [0.34.0] - 2019-03-15

### DHT
  * [improvement] improve dht unit tests (https://github.com/lbryio/lbry/pull/1987) by jackrobison

### Blob exchange
  * [new feature] time to first bytes analytics (https://github.com/lbryio/lbry/pull/1977) by jackrobison

### Blobs/files
  * [improvement] use _batched_select to populate channel names when initializing files (https://github.com/lbryio/lbry/pull/1980) by jackrobison

### Cli
  * [improvement] properly handle interrupt signal received by lbrynet (https://github.com/lbryio/lbry/pull/1978) by shyba

### Config
  * [new feature] two new commands `sync hash` and `sync apply` to enable wallet synchronization workflow (https://github.com/lbryio/lbry/pull/1896) by eukreign
",41103286
161,False,False,2019-03-09T01:00:45Z,2019-03-09T01:22:23Z,"## [0.33.0] - 2019-03-08

### Claims
  * [improvement] added support for claim name case insensitivity (https://github.com/lbryio/lbry/pull/1872) by BrannonKing
",41103286
162,False,False,2019-03-01T22:24:55Z,2019-03-01T22:42:21Z,"## [0.32.4] - 2019-03-01

### DHT
  * [bug] Fix high memory usage by adding LRU cache to KademliaPeer creation (https://github.com/lbryio/lbry/pull/1957) by shyba

### Asyncio rewrite
  * [bug] Fix bugs caused by trapping CancelledError (https://github.com/lbryio/lbry/pull/1952) by shyba

### Files
  * [bug] Lowercase/stripped comparison for known content types (https://github.com/lbryio/lbry/pull/1946) by tzarebczan

### Packaging
  * [bug] Fix ssl errors, use `certifi` to make ssl contexts (https://github.com/lbryio/lbry/pull/1965) by jackrobison
  * [improvement] Pin requirements (https://github.com/lbryio/lbry/pull/1961) by jackrobison
  * [improvement] `torba` now only installs `plyvel` if platform is linux (https://github.com/lbryio/lbry/pull/1954) by eukreign
",41103286
163,False,False,2019-02-22T00:38:14Z,2019-02-22T01:01:07Z,"## [0.32.3] - 2019-02-21

### DHT
  * [bug] Fix slow ping queue shutdown (https://github.com/lbryio/lbry/pull/1950) by jackrobison

### Blobs/files
  * [bug] Fix invalid blob decode error on startup (https://github.com/lbryio/lbry/pull/1951) by shyba
",41103286
164,False,False,2019-02-21T19:46:36Z,2019-02-21T20:33:42Z,"## [0.32.2] - 2019-02-21

### DHT
  * [bug] Fix cases where a bucket could be empty and need to be joined after removing a peer (https://github.com/lbryio/lbry/pull/1949) by jackrobison
  * [bug] Test and fix edge cases for adding peers to routing (https://github.com/lbryio/lbry/pull/1948) by jackrobison
  * [bug] Fix seed node startup (https://github.com/lbryio/lbry/pull/1944) by jackrobison
  * [bug] Fix KBucket.key_in_range (https://github.com/lbryio/lbry/pull/1938) by jackrobison

### Config
  * [new feature] Add `split_buckets_under_index` config setting for seed nodes (https://github.com/lbryio/lbry/pull/1942) by jackrobison

### Files
  * [bug] Fix delete log (https://github.com/lbryio/lbry/pull/1945) by shyba
  * [bug] Fix errors if `file_name` and `full_path` are None, fix missing await (https://github.com/lbryio/lbry/pull/1939) by shyba
",41103286
165,False,False,2019-02-19T03:56:35Z,2019-02-19T04:14:24Z,"## [0.32.1] - 2019-02-18

### API
  * [bug] downloading header from S3 correctly tracks progress (https://github.com/lbryio/lbry/pull/1935) by eukreign
  * [bug] Fix blob_list for sd_hash including stream terminator (https://github.com/lbryio/lbry/pull/1932) by jackrobison

### Downloads
  * [improvement] test paid downloads (https://github.com/lbryio/lbry/pull/1936) by shyba
  * [improvement] Unban peers if no more peers to try and 10 seconds passed (https://github.com/lbryio/lbry/pull/1934) by shyba
",41103286
166,False,False,2019-02-17T01:17:41Z,2019-02-17T02:24:15Z,"## [0.32.0] - 2019-02-16

### Backwards Incompatible Changes
  * [blobs/files] `resolve` command has dropped `--force` as it was not actually used and changed the `uri`/`uris` parameter to just `urls` (that's with L instead of i), it accepts a single string or a list. (https://github.com/lbryio/lbry/pull/1900)

### API
  * [bug] actually stop the daemon on calling `lbrynet stop` (https://github.com/lbryio/lbry/pull/1907) by hackrush01

### Blobs/files
  * [bug] Sync blobs on startup (https://github.com/lbryio/lbry/pull/1919) by jackrobison
  * [refactor] integration tests refactor and additional tests for `file list`, `file delete` and `get` commands (https://github.com/lbryio/lbry/pull/1900) by eukreign
  * [fixup] fix application/x-ext mime types (https://github.com/lbryio/lbry/pull/1925) by tzarebczan

### Config
  * [bug] listen on internal port instead of upnp redirect (https://github.com/lbryio/lbry/pull/1928) by tzarebczan

### Database
  * [bug] database migration bug related to passing conf argument (https://github.com/lbryio/lbry/pull/1906) by eukreign
  * [improvement] Faster file delete (https://github.com/lbryio/lbry/pull/1905) by jackrobison
  * [improvement] Improve startup time (https://github.com/lbryio/lbry/pull/1892) by jackrobison

### Downloads
  * [improvement] Fix p2p ignoring good peers (https://github.com/lbryio/lbry/pull/1926) by shyba
  * [bug] Stop on data blobs timeout, allowing get to retry (https://github.com/lbryio/lbry/pull/1914) by shyba
  * [bug] Fix resuming downloads bugs on startup (https://github.com/lbryio/lbry/pull/1912) by shyba
  * [bug] respect download timeout setting (https://github.com/lbryio/lbry/pull/1908) by shyba
  * [bug] Fix chunked response parsing (https://github.com/lbryio/lbry/pull/1903) by shyba
  * [improvement] Refactor peer scoring and maintain connections to fix stuck downloads, remove locking from ping queue (https://github.com/lbryio/lbry/pull/1889) by shyba
",41103286
167,False,False,2019-02-06T19:28:40Z,2019-02-06T20:18:36Z,"## [0.31.0] - 2019-02-06

This release includes significant improvements to the speed and reliability of downloads by overhauling the processes for finding peers ([lbrynet.dht](https://github.com/lbryio/lbry/tree/master/lbrynet/dht)) and downloading streams from them ([lbrynet.stream](https://github.com/lbryio/lbry/tree/master/lbrynet/stream) and [lbrynet.blob_exchange](https://github.com/lbryio/lbry/tree/master/lbrynet/blob_exchange)). These changes are part of a larger upgrade that drops the `twisted` framework entirely in favor of `asyncio`, resulting in substantially better performance and sanity. (https://github.com/lbryio/lbry/pull/1769)


### Backwards Incompatible Changes
  * [files] remove `sources` argument from `publish` (https://github.com/lbryio/lbry/pull/1838)
  * [api] `settings set` API has changed to `settings set <key> <value>` (https://github.com/lbryio/lbry/pull/1816)
  * [config] setting max key fee via command line now uses the following format (via yaml config is unchanged): `--max-key-fee 40.0 USD` (https://github.com/lbryio/lbry/pull/1815)
  * [config] `--disable-max-key-fee` is now replaced by `--no-max-key-fee` on command line and in yaml file just `max_key_fee: null` (https://github.com/lbryio/lbry/pull/1815)
  * [api] `help` jsonrpc command has been dropped, use `lbrynet --help` instead. (https://github.com/lbryio/lbry/pull/1814)
  * [api] `resolve_name` command has been dropped, use `resolve` instead. (https://github.com/lbryio/lbry/pull/1814)
  * [api] `commands` jsonrpc command has been dropped, a better version could be added in the future, feedback and use cases greatly appreciated. (https://github.com/lbryio/lbry/pull/1814)
  * [config] configuration settings `api_port` and `api_host` have been merged into `api`, this affects configuration files and usage via command line interface `--api` (https://github.com/lbryio/lbry/pull/1788)
  * [config] `download_directory` setting is now `download_dir` to be consistent with `data_dir` and `wallet_dir`. (https://github.com/lbryio/lbry/pull/1788)
  * [config] all command line switches now use `-` instead of `_` to delineate words, eg. you must now use `--data-dir` instead of the old `--data_dir`, this is more consistent with almost every other command line interface known to man (https://github.com/lbryio/lbry/pull/1788)
  * [config] commands within groups, eg. `account_balance`, require splitting the group and subcommand into separate command arguments (basically no `_`), eg. to get the balance you would do: `lbrynet account balance` to get a list of all commands in the `account` group you would run `lbrynet account`. (https://github.com/lbryio/lbry/pull/1788)
  * [config] previously deprecated commands have been permanently removed. (https://github.com/lbryio/lbry/pull/1788)
  * [network] removes `twisted`, rewrite to use `asyncio` (https://github.com/lbryio/lbry/pull/1769)
  * [network] removes `twisted.trial` based testing, replaced with `unittest` (https://github.com/lbryio/lbry/pull/1769)

### DHT
  * [improvement] Always return close peers from findValue (https://github.com/lbryio/lbry/pull/1855) by jackrobison
  * [refactor] Remove peer manager lock (https://github.com/lbryio/lbry/pull/1835) by jackrobison

### API
  * [improvement] More flexible `settings set <key> <value>` command (https://github.com/lbryio/lbry/pull/1816) by eukreign
  * [refactor] dropped help, commands and resolve_name commands (https://github.com/lbryio/lbry/pull/1814) by eukreign
  * [refactor] Refactor exchange rate manager to use asyncio (https://github.com/lbryio/lbry/pull/1794) by jackrobison
  * [refactor] Refactor loggly handler to use asyncio (https://github.com/lbryio/lbry/pull/1793) by jackrobison

### Blob exchange
  * [refactor] Remove blob request lock (https://github.com/lbryio/lbry/pull/1834) by jackrobison

### Claims
  * [bug] Fix claim list  (https://github.com/lbryio/lbry/pull/1795) by shyba

### Config
  * [improvement] Add re-reflect task to stream manager, add `concurrent_reflector_uploads` to config (https://github.com/lbryio/lbry/pull/1847) by jackrobison
  * [improvement] Refactored --max-key-fee to be more ergonomic (https://github.com/lbryio/lbry/pull/1815) by eukreign
  * [refactor] refactored configuration handling code and `lbrynet` cli (https://github.com/lbryio/lbry/pull/1788) by eukreign

### Downloads
  * [improvement] Download and publish fixes (https://github.com/lbryio/lbry/pull/1831) by jackrobison

### Network
  * [improvement] async blob exchange, dht, stream, and blob rewrite/refactor (https://github.com/lbryio/lbry/pull/1769) by jackrobison

### Reflector
  * [refactor] Add reflector protocol using asyncio (https://github.com/lbryio/lbry/pull/1810) by jackrobison

### Wallet
  * [bug] Fix resolve for invalid claims (not decode-able) (https://github.com/lbryio/lbry/pull/1800) by shyba
",41103286
168,False,False,2019-01-18T21:14:48Z,2019-01-18T21:42:37Z,"## [0.30.5] - 2019-01-18

### Backwards Incompatible Changes
  * [api] SSL and token auth have been dropped and will be replaced with IPC (https://github.com/lbryio/lbry/pull/1713)

### API
  * [refactor] enforce deprecated `--http-auth` command line option by exiting with error (https://github.com/lbryio/lbry/pull/1786) by eukreign
  * [refactor] removed previously deprecated commands `wallet_prefill_addresses`, `wallet_unused_address`, `wallet_new_address`, `wallet_list`, `wallet_public_key`, `wallet_is_address_mine`, `wallet_encrypt`, `wallet_decrypt`, `wallet_unlock`, `daemon_stop` and `claim_renew` (https://github.com/lbryio/lbry/pull/1784) by eukreign
  * [improvement] added note that wallet needs to be unlocked to decrypt (https://github.com/lbryio/lbry/pull/1767) by tzarebczan
  * [refactor] daemon API ported to `asyncio` (https://github.com/lbryio/lbry/pull/1713) by eukreign

### Blobs/files
  * [new feature] add `.m4v` video format type (https://github.com/lbryio/lbry/pull/1764) by tzarebczan
  * [bug] fix unavailable download directory (https://github.com/lbryio/lbry/pull/1760) by tzarebczan
  * [bug] fix download directory creation (https://github.com/lbryio/lbry/pull/1759) by tzarebczan
  * [improvement] include file extension in media-type metadata for unknown media types (https://github.com/lbryio/lbry/pull/1748) by lyoshenka

### Database
  * [bug] fixed bytes vs str error in migrate5to6 script (https://github.com/lbryio/lbry/pull/1777, https://github.com/lbryio/lbry/pull/1751) by eukreign
  * [bug] fixed saving claims with certificate id (https://github.com/lbryio/lbry/pull/1750) by hackrush01

### Network
  * [new feature] blob download performance monitoring script (https://github.com/lbryio/lbry/pull/1710) by hackrush01

### Other
  * [refactor] ported `lbrynet.extras.daemon.analytics` to `asyncio` (https://github.com/lbryio/lbry/pull/1745) by osilkin98

### Packaging
  * [new feature] orchstr8 docker for lbry (https://github.com/lbryio/lbry/pull/1763) by eukreign

### Wallet
  * [refactor] added additional fields to uri parser to return consistent results (https://github.com/lbryio/lbry/pull/1749) by hackrush01
",41103286
169,False,False,2019-01-05T03:03:39Z,2019-01-05T03:24:14Z,"## [0.30.4] - 2019-01-04

### API
  * [new feature] added `utxo_release` command (https://github.com/lbryio/lbry/pull/1741)

### Config
  * [improvement] added `lbrynet4.lbry.io` to list of default DHT nodes (https://github.com/lbryio/lbry/pull/1734)
  * [bug] fix `--data_dir` command line argument parsing (https://github.com/lbryio/lbry/pull/1726)

### Wallet server
  * [new feature] add LBRY `testnet` support to wallet SPV server (https://github.com/lbryio/lbry/pull/1730)
",41103286
170,False,False,2018-12-21T23:45:34Z,2018-12-22T01:41:18Z,"## [0.30.3] - 2018-12-21

### Wallet
  * [bug] Instantiate resolver before the request to hold the selected height (https://github.com/lbryio/lbry/pull/1718)
",41103286
171,False,False,2018-12-15T02:50:48Z,2018-12-15T03:08:36Z,"## [0.30.2] - 2018-12-14

### API
  * [improvement] `claim_list_by_channel` better handles errors coming from SPV server (https://github.com/lbryio/lbry/pull/1707)

### Config
  * [refactor] remove `lbrynet.androidhelpers` module (https://github.com/lbryio/lbry/pull/1671)

### Packaging
  * [bug] fix setting release type for windows builds (https://github.com/lbryio/lbry/pull/1708)
  * [refactor] drop `faker` dependency (https://github.com/lbryio/lbry/pull/1687)
",41103286
172,False,True,2018-12-12T04:44:02Z,2018-12-12T05:16:19Z,"## [0.30.2rc1] - 2018-12-11

### API
  * [improvement] `claim_list_by_channel` better handles errors coming from SPV server (https://github.com/lbryio/lbry/pull/1707)

### Packaging
  * [bug] fix setting release type for windows builds (https://github.com/lbryio/lbry/pull/1708)
  * [refactor] drop `faker` dependency (https://github.com/lbryio/lbry/pull/1687)
",41103286
173,False,False,2018-12-10T04:30:09Z,2018-12-10T05:05:18Z,"## [0.30.1] - 2018-12-09

### API
  * add `aioupnp_version` to `upnp` field in the response to `status`
  * fixed uncaught claim signature errors
  * `--blocking` support for `abandon` command (https://github.com/lbryio/lbry/pull/1618)
  * don't create SSL keys if SSL is disabled (https://github.com/lbryio/lbry/pull/1644)
  * added `account_send` command (https://github.com/lbryio/lbry/pull/1654)
  * fixes for claim send to address (https://github.com/lbryio/lbry/pull/1651)
  * better handle errors on resolve (https://github.com/lbryio/lbry/pull/1662)
  * fix `transaction_show` (https://github.com/lbryio/lbry/pull/1689)

### Schema
  * merged `lbryschema` repository into `lbrynet` (https://github.com/lbryio/lbry/pull/1444)
  * updated `protobuf` to `3.2.0` (https://github.com/lbryio/lbry/issues/1602)
  * use `types` repo for generating python protobufs (https://github.com/lbryio/lbry/pull/1605)

### Wallet
  * fixed resolving names with invalid channel signatures
  * fixed wallet sync issues
  * fixed wallet locking/encryption issues

### DHT
  * fixed retrying kademlia rpc calls (https://github.com/lbryio/lbry/pull/1495)
  * fixed `KeyError` in `iterativeFindValue`, this is used by `peer_list` and when finding peers to download blobs from (https://github.com/lbryio/lbry/issues/1638)
  * settings external ip address and ability to disable more DHT components (https://github.com/lbryio/lbry/pull/1604)
  * improved routing table bucket initialization (https://github.com/lbryio/lbry/pull/1633)

### Database
  * resolved too many variables in sqlite issue (https://github.com/lbryio/lbry/pull/1612)

### Misc
  * switch to Python 3.7
  * brought back icon for windows binary
  * using custom list of mime types with more types (https://github.com/lbryio/lbry/pull/1700)
  * add balance to startup report (https://github.com/lbryio/lbry/pull/1613)
  * drop `six` dependency (https://github.com/lbryio/lbry/pull/1660)
  * drop `mock` dependency (https://github.com/lbryio/lbry/pull/1661)",41103286
174,False,True,2018-12-06T05:51:07Z,2018-12-06T12:38:43Z,"## [v0.30.1rc9] - 2018-12-06

### API
  * add `aioupnp_version` to `upnp` field in the response to `status`
  * fixed uncaught claim signature errors

### Schema
  * updated `protobuf` to `3.2.0` (https://github.com/lbryio/lbry/issues/1602)

### Wallet
  * fixed resolving names with invalid channel signatures
  * fixed wallet sync issues
  * fixed wallet locking/encryption issues

### DHT
  * fixed retrying kademlia rpc calls (https://github.com/lbryio/lbry/pull/1495)
  * fixed `KeyError` in `iterativeFindValue`, this is used by `peer_list` and when finding peers to download blobs from (https://github.com/lbryio/lbry/issues/1638)

### Misc
  * brought back icon for windows binary",41103286
175,False,True,2018-12-05T17:14:43Z,2018-12-05T18:29:57Z,"## [v0.30.1rc8] - 2018-12-05

### API
  * add `aioupnp_version` to `upnp` field in the response to `status`
  * fixed uncaught claim signature errors

### Schema
  * updated `protobuf` to `3.2.0` (https://github.com/lbryio/lbry/issues/1602)

### Wallet
  * fixed resolving names with invalid channel signatures
  * fixed wallet sync issues
  * fixed wallet locking/encryption issues

### DHT
  * fixed retrying kademlia rpc calls (https://github.com/lbryio/lbry/pull/1495)
  * fixed `KeyError` in `iterativeFindValue`, this is used by `peer_list` and when finding peers to download blobs from (https://github.com/lbryio/lbry/issues/1638)

### Misc
  * brought back icon for windows binary",41103286
176,False,True,2018-11-29T22:23:32Z,2018-11-29T23:03:30Z,"## [v0.30.1rc7] - 2018-11-29

### API
  * add `aioupnp_version` to `upnp` field in the response to `status`
  * fixed uncaught claim signature errors

### Schema
  * updated `protobuf` to `3.2.0` (https://github.com/lbryio/lbry/issues/1602)

### Wallet
  * fixed resolving names with invalid channel signatures
  * fixed wallet sync issues
  * fixed wallet locking/encryption issues

### DHT
  * fixed retrying kademlia rpc calls (https://github.com/lbryio/lbry/pull/1495)
  * fixed `KeyError` in `iterativeFindValue`, this is used by `peer_list` and when finding peers to download blobs from (https://github.com/lbryio/lbry/issues/1638)

### Misc
  * brought back icon for windows binary",41103286
177,False,True,2018-11-27T21:28:55Z,2018-11-27T22:24:26Z,"## [0.30.1rc6] - 2018-11-27

### API
  * add `aioupnp_version` to `upnp` field in the response to `status`
  * fixed uncaught claim signature errors

### Schema
  * updated `protobuf` to `3.2.0` (https://github.com/lbryio/lbry/issues/1602)

### Wallet
  * fixed resolving names with invalid channel signatures
  * fixed wallet sync issues

### DHT
  * fixed retrying kademlia rpc calls (https://github.com/lbryio/lbry/pull/1495)
  * fixed `KeyError` in `iterativeFindValue`, this is used by `peer_list` and when finding peers to download blobs from (https://github.com/lbryio/lbry/issues/1638)
",41103286
178,False,True,2018-11-20T02:12:39Z,2018-11-20T03:45:14Z,"## [0.30.1rc3] - 2018-11-19

### API
  * add `aioupnp_version` to `upnp` field in the response to `status`
  * fix uncaught claim signature errors

### Wallet
  * update torba to `0.1.6`, fixes address history synchronization issues.",41103286
179,False,True,2018-10-26T20:51:23Z,2018-10-26T22:22:36Z,"## [0.30.1rc1] - 2018-10-26

### API
  * add `aioupnp_version` to `upnp` field in the response to `status`
  * fix uncaught claim signature errors

### Wallet
  * update torba to `0.1.6`, fixes address history synchronization issues.",41103286
180,False,False,2018-10-23T02:27:57Z,2018-10-23T03:39:27Z,"## [0.30.0] - 2018-10-22
This release is the most ambitious upgrade to lbrynet yet; including a brand
new wallet implementation, switch to Python 3 of the entire code base and
many changes to the API such as pagination and a more consistent output from
most commands.


### Security
  * upgraded `cryptography` package.
  * switch to `coincurve` for private / public key generation (addresses)
  * support for connecting to daemon via SSL
  * improved workflow for encrypt/decrypt of wallet

### API
  * unified all command line executables into a single `lbrynet` executable.
  * added `use_https` configuration setting (off by default), if true the api
    server will generate a self signed ssl certificate when started and only
    handle api requests on the https address (default of `https://localhost:5279/lbryapi`)
  * deprecated `daemon_stop` command, use `stop` instead.
  * deprecated `wallet_balance` command, use `account_balance` instead.
  * deprecated `wallet_unlock` command, use `account_unlock` instead.
  * deprecated `wallet_decrypt` command, use `account_decrypt` instead.
  * deprecated `wallet_encrypt` command, use `account_encrypt` instead.
  * deprecated `wallet_prefill_addresses` command, use `account_fund` instead.
  * deprecated `wallet_list` command, use `address_list` instead.
  * deprecated `wallet_is_address_mine` command, use `address_is_mine` instead.
  * deprecated `wallet_public_key` command.
  * deprecated `wallet_new_address` command.
  * deprecated `wallet_unused_address` command, use `address_unused` instead.
  * deprecated `claim_renew` command.
  * added `account_list` command to list accounts including their balance.
  * added `account_add` command to add a previously created account from seed or private key.
  * added `account_create` command to generate a new account.
  * added `account_remove` command to remove an account from wallet.
  * added `account_set` command to change a setting on an account.
  * added `account_balance` command to get just the account balance.
  * added `account_unlock` command to unlock an encrypted account.
  * added `account_lock` command to lock an encrypted account.
  * added `account_encrypt` command to encrypt an account.
  * added `account_decrypt` command to decrypt an account.
  * added `account_fund` command to move funds between or within an account in various ways.
  * added `account_max_address_gap` command to find large gaps of unused addresses.
  * added `address_list` command to list addresses.
  * added `address_is_mine` command to check if an address is one of your addresses.
  * added `address_unused` command to get existing or generate a new unused address.
  * added pagination support for `address_list`, `channel_list`, `claim_list_mine`,
    `transaction_list` and `utxo_list`.
  * added `upnp` field to `status` response
  * removed `send_amount_to_address` command previously marked as deprecated
  * removed `channel_list_mine` command previously marked as deprecated
  * removed `get_availability` command previously marked as deprecated
  * updated `txupnp` dependency to `aioupnp` (UPnP for asyncio)

### Wallet
  * changed to a new wallet implementation: [torba](https://github.com/lbryio/torba).
  * changed wallet file format to support multiple accounts in one wallet.
  * moved transaction data from wallet file into an sqlite database.
  * changed channel certificates to be keyed by txid:nout instead of claim_id which
    makes it possible to recover old certificates.

### File Manager
  * Extensive internal changes as a result of porting to Python 3.

### DHT
  * Extensive internal changes as a result of porting to Python 3.

### P2P
  * Extensive internal changes as a result of porting to Python 3.

### Reflector
  * No major changes to reflector.

### Database
  * No changes to existing storage module.

### Known Issues
  * Channel certificate import/export is currently not working.
",41103286
181,False,True,2018-10-19T16:28:08Z,2018-10-19T16:56:17Z,"## [0.30.0] - 2018-10-17
This release is the most ambitious upgrade to lbrynet yet; including a brand
new wallet implementation, switch to Python 3 of the entire code base and
many changes to the API such as pagination and a more consistent output from
most commands.


### Security
  * upgraded `cryptography` package.
  * switch to `coincurve` for private / public key generation (addresses)
  * support for connecting to daemon via SSL
  * improved workflow for encrypt/decrypt of wallet

### API
  * unified all command line executables into a single `lbrynet` executable.
  * added `use_https` configuration setting (off by default), if true the api
    server will generate a self signed ssl certificate when started and only
    handle api requests on the https address (default of `https://localhost:5279/lbryapi`)
  * deprecated `daemon_stop` command, use `stop` instead.
  * deprecated `wallet_balance` command, use `account_balance` instead.
  * deprecated `wallet_unlock` command, use `account_unlock` instead.
  * deprecated `wallet_decrypt` command, use `account_decrypt` instead.
  * deprecated `wallet_encrypt` command, use `account_encrypt` instead.
  * deprecated `wallet_prefill_addresses` command, use `account_fund` instead.
  * deprecated `wallet_list` command, use `address_list` instead.
  * deprecated `wallet_is_address_mine` command, use `address_is_mine` instead.
  * deprecated `wallet_public_key` command.
  * deprecated `wallet_new_address` command.
  * deprecated `wallet_unused_address` command, use `address_unused` instead.
  * deprecated `claim_renew` command.
  * added `account_list` command to list accounts including their balance.
  * added `account_add` command to add a previously created account from seed or private key.
  * added `account_create` command to generate a new account.
  * added `account_remove` command to remove an account from wallet.
  * added `account_set` command to change a setting on an account.
  * added `account_balance` command to get just the account balance.
  * added `account_unlock` command to unlock an encrypted account.
  * added `account_lock` command to lock an encrypted account.
  * added `account_encrypt` command to encrypt an account.
  * added `account_decrypt` command to decrypt an account.
  * added `account_fund` command to move funds between or within an account in various ways.
  * added `account_max_address_gap` command to find large gaps of unused addresses.
  * added `address_list` command to list addresses.
  * added `address_is_mine` command to check if an address is one of your addresses.
  * added `address_unused` command to get existing or generate a new unused address.
  * added pagination support for `address_list`, `channel_list`, `claim_list_mine`,
    `transaction_list` and `utxo_list`.
  * added `upnp` field to `status` response
  * removed `send_amount_to_address` command previously marked as deprecated
  * removed `channel_list_mine` command previously marked as deprecated
  * removed `get_availability` command previously marked as deprecated

### Wallet
  * changed to a new wallet implementation: [torba](https://github.com/lbryio/torba).
  * changed wallet file format to support multiple accounts in one wallet.
  * moved transaction data from wallet file into an sqlite database.
  * changed channel certificates to be keyed by txid:nout instead of claim_id which
    makes it possible to recover old certificates.

### File Manager
  * Extensive internal changes as a result of porting to Python 3.

### DHT
  * Extensive internal changes as a result of porting to Python 3.

### P2P
  * Extensive internal changes as a result of porting to Python 3.

### Reflector
  * No major changes to reflector.

### Database
  * No changes to existing storage module.

### Known Issues
  * Channel certificate import/export is currently not working.
",41103286
182,False,False,2018-08-24T03:43:35Z,2018-08-24T04:01:04Z,"## [0.21.2] - 2018-08-23
### Fixed
 * issue in dht ping queue where enqueued pings that aren't yet due wouldn't be rescheduled
 * blob mirror downloader not finishing streams that were partially uploaded at the time of the download attempt (https://github.com/lbryio/lbry/issues/1376)
",41103286
183,False,False,2018-08-13T20:20:16Z,2018-08-13T21:33:53Z,"## [0.21.1] - 2018-08-13
### Fixed
 * `download_progress` field in `blockchain_headers` section of `status` not initializing correctly when resuming a download (https://github.com/lbryio/lbry/issues/1355)
 * `wallet_send` not accepting decimal amounts (https://github.com/lbryio/lbry/issues/1356 commit https://github.com/lbryio/lbry/commit/1098ca0494ece420c70fc57f69d6d388715a99b8)

### Added
 * `is_locked` to `wallet` in `status` response (https://github.com/lbryio/lbry/issues/1354, commit https://github.com/lbryio/lbry/commit/153022a1a7122ab6d31d3db433dccbe469bbcb3c)

### Changed
 * Bumped `lbryum` requirement to 3.2.4 [see changelog](https://github.com/lbryio/lbryum/blob/master/CHANGELOG.md#324---2018-08-13)",41103286
184,False,False,2018-08-09T17:44:28Z,2018-08-09T17:56:05Z,"## [0.21.0] - 2018-08-09
### Fixed
 * check `claim_address` and `change_address` earlier on publishing, to avoid hard to understand errors later in the process (pr https://github.com/lbryio/lbry/pull/1347)
 * loggly error reporting not following `share_usage_data` (pr https://github.com/lbryio/lbry/pull/1328)
 * improper error handling when data is not valid JSON (pr https://github.com/lbryio/lbry/pull/1326)
 * blob mirroring being set in unrelated tests, making them fail (pr https://github.com/lbryio/lbry/pull/1348)
 * http blob mirroring edge cases (pr https://github.com/lbryio/lbry/pull/1315)
 * external ports in log messages not showing the correct external port from the upnp redirects (https://github.com/lbryio/lbry/issues/1338) (pr https://github.com/lbryio/lbry/pull/1349)
 * miniupnpc fallback issues in txupnp (https://github.com/lbryio/lbry/issues/1341) (pr https://github.com/lbryio/lbry/pull/1349)
 * upnp error when disabled on router and a non-gateway is found, such as chromecast (https://github.com/lbryio/lbry/issues/1352) (https://github.com/lbryio/lbry/commit/dca4af942fbe95547794213775f0a62cd04a393f)

### Deprecated
 * automatic claim renew, this is no longer needed

### Changed
 * api server class to use components, and for all JSONRPC API commands to be callable so long as the required components are available. (pr https://github.com/lbryio/lbry/pull/1294)
 * return error messages when required conditions on components are not met for API calls (pr https://github.com/lbryio/lbry/pull/1328)
 * `status` to no longer return a base58 encoded `lbry_id`, instead return this as the hex encoded `node_id` in a new `dht` field. (pr https://github.com/lbryio/lbry/pull/1328)
 * `startup_status` field in the response to `status` to be a dict of component names to status booleans (pr https://github.com/lbryio/lbry/pull/1328)
 * renamed the `blockchain_status` field in the response to `status` to `wallet` (pr https://github.com/lbryio/lbry/pull/1328)
 * moved and renamed `wallet_is_encrypted` to `is_encrypted` in the `wallet` field in the response to `status` (pr https://github.com/lbryio/lbry/pull/1328)
 * moved wallet, upnp and dht startup code from `Session` to `Components` (pr https://github.com/lbryio/lbry/pull/1328)
 * attempt blob downloads from http mirror sources (by default) concurrently to p2p sources (pr https://github.com/lbryio/lbry/pull/1233)
 * replace miniupnpc with [txupnp](https://github.com/lbryio/txupnp). Since txupnp is still under development, it will internally fall back to miniupnpc. (pr https://github.com/lbryio/lbry/pull/1328)
 * simplified test_misc.py in the functional tests (pr https://github.com/lbryio/lbry/pull/1328)
 * update `cryptography` requirement to 2.3 (pr https://github.com/lbryio/lbry/pull/1333)

### Added
 * `skipped_components` list to the response from `status` (pr https://github.com/lbryio/lbry/pull/1328)
 * component statuses (`blockchain_headers`, `dht`, `wallet`, `blob_manager` `hash_announcer`, and `file_manager`) to the response to `status` (pr https://github.com/lbryio/lbry/pull/1328)
 * `skipped_components` config setting, accepts a list of names of components to not run (pr https://github.com/lbryio/lbry/pull/1294)
 * `ComponentManager` for managing the life-cycles of dependencies (pr https://github.com/lbryio/lbry/pull/1294)
 * `requires` decorator to register the components required by a `jsonrpc_` command, to facilitate commands registering asynchronously (pr https://github.com/lbryio/lbry/pull/1294)
 * unit tests for `ComponentManager` (pr https://github.com/lbryio/lbry/pull/1294)
 * script to generate docs/api.json file (https://github.com/lbryio/lbry.tech/issues/42)
 * additional information to the balance error message when editing a claim (pr https://github.com/lbryio/lbry/pull/1309)
 * `address` and `port` arguments to `peer_ping` (https://github.com/lbryio/lbry/issues/1313) (pr https://github.com/lbryio/lbry/pull/1299)
 * ability to download from HTTP mirrors by setting `download_mirrors` (prs https://github.com/lbryio/lbry/pull/1233 and https://github.com/lbryio/lbry/pull/1315)
 * ability to filter peers from an iterative find value operation (finding peers for a blob). This is used to filter peers we've already found for a blob when accumulating the list of peers. (pr https://github.com/lbryio/lbry/pull/1287)

### Removed
 * `session_status` argument and response field from `status` (pr https://github.com/lbryio/lbry/pull/1328)
 * most of the internal attributes from `Daemon` (pr https://github.com/lbryio/lbry/pull/1294)
",41103286
185,False,False,2018-07-18T19:36:21Z,2018-07-18T19:44:19Z,"## [0.20.4] - 2018-07-18
### Fixed
 * spelling errors in messages printed by `lbrynet-cli`
 * high CPU usage when a stream is incomplete and the peers we're requesting from have no more blobs to send us (https://github.com/lbryio/lbry/pull/1301)

### Changed
 * keep track of failures for DHT peers for up to ten minutes instead of indefinitely (https://github.com/lbryio/lbry/pull/1300)
 * skip ignored peers from iterative lookups instead of blocking the peer who returned them to us too (https://github.com/lbryio/lbry/pull/1300)
 * if a node becomes ignored during an iterative find cycle remove it from the shortlist so that we can't return it as a result nor try to probe it anyway (https://github.com/lbryio/lbry/pull/1303)
",41103286
186,False,False,2018-07-03T18:32:38Z,2018-07-03T18:37:48Z,"## [0.20.3] - 2018-07-03
### Fixed
 * `blob_list` raising an error when blobs in a stream haven't yet been created (8a0d0b44ddf9cbeb2a9074eed39d6064ce21df64)
 * stopping a download potentially raising an attribute error (https://github.com/lbryio/lbry/pull/1269)
 * file manager startup locking up when there are many files for some channels (https://github.com/lbryio/lbry/pull/1281)
 * improper sorting when getting the closest peers to a hash (https://github.com/lbryio/lbry/pull/1282)

### Changed
 * raised the default `peer_search_timeout` setting from 3 to 30 and added logging for when it happens (https://github.com/lbryio/lbry/pull/1283)
 * change iterative find stop condition on find value to allow it to continue until a value is found or it times out (https://github.com/lbryio/lbry/pull/1283)
 * include all of our own blobs in the local dht datastore (as if we had announced them to ourselves) (https://github.com/lbryio/lbry/pull/1280)
 * ignore dht `store` token validation errors for the first expiration-time after startup (fixes failed `store` requests after a restart) (https://github.com/lbryio/lbry/pull/1280)

### Removed
 * `jsonrpclib` as a requirement for the project (https://github.com/lbryio/lbry/pull/1274)
",41103286
187,False,False,2018-06-23T15:53:24Z,2018-06-23T15:56:41Z,"## [0.20.2] - 2018-06-23
### Changed
 * Bumped `lbryschema` requirement to 0.0.16 [see changelog](https://github.com/lbryio/lbryschema/blob/master/CHANGELOG.md#0016---2018-06-23)
 * Bumped `lbryum` requirement to 3.2.3 [see changelog](https://github.com/lbryio/lbryum/blob/master/CHANGELOG.md#323---2018-06-23)
 * save claims to sqlite in batches to speed up `resolve` queries for many uris
",41103286
188,False,False,2018-06-19T18:05:16Z,2018-06-19T18:09:55Z,"## [0.20.1] - 2018-06-19
### Fixed
 * fixed token validation error when the dht node has just been started (https://github.com/lbryio/lbry/issues/1248)
 * fixed a race condition when inserting a blob into the database (https://github.com/lbryio/lbry/issues/1129)
 * reflector server incorrectly responding as if it has all the blobs for a stream that was only partially uploaded to it
 * `publish` raising a database error when updating a claim that we don't have a file for (https://github.com/lbryio/lbry/issues/1165)
 * blob client protocol not tearing itself down properly after a failure (https://github.com/lbryio/lbry/issues/950)
 * lockup in wallet startup when one or more lbryumx servers are unavailable (https://github.com/lbryio/lbry/issues/1245)
 * download being stopped if the sd blob downloaded and data did not start within the timeout (https://github.com/lbryio/lbry/issues/1172)

### Changed
 * Bumped `lbryum` requirement to 3.2.2 [see changelog](https://github.com/lbryio/lbryum/blob/master/CHANGELOG.md#322---2018-06-19)
 * `publish` to accept bid as a decimal string
",41103286
189,False,False,2018-06-13T19:36:49Z,2018-06-13T19:49:38Z,"## [0.20.0] - 2018-06-13
### TL;DR
  This milestone release includes a large number of bug fixes, changes and additions covering all aspects of the daemon. Notable improvements include:
  * Faster and more reliable downloading and uploading of content resulting from substantial work done on the Distributed Hash Table algorithms and protocol.
  * Faster blockchain synchronization (headers) by downloading them from Amazon S3 under certain conditions.
  * Faster overall app startup due to better optimized SQL queries.
  * Power users of the `lbrynet-cli` will benefit from many bug fixes to commonly used commands and improvements in sorting of output.
  * Please review the full change log for more details on specific fixes, changes and additions.

### Fixed
 * fix payment rate manager typo ([1236](https://github.com/lbryio/lbry/pull/1236))
 * handling error from dht clients with old `ping` method
 * blobs not being re-announced if no peers successfully stored, now failed announcements are re-queued
 * issue where an `AuthAPIClient` (used by `lbrynet-cli`) would fail to update its session secret and keep making new auth sessions, with every other request failing
 * `use_auth_http` in a config file being overridden by the default command line argument to `lbrynet-daemon`, now the command line value will only override the config file value if it is provided
 * `lbrynet-cli` not automatically switching to the authenticated client if the server is detected to be using authentication. This resulted in `lbrynet-cli` failing to run when `lbrynet-daemon` was run with the `--http-auth` flag
 * fixed error when using `claim_show` with `txid` and `nout` arguments
 * fixed error when saving server list to conf file ([1209](https://github.com/lbryio/lbry/pull/1209))

### Changed
 * if the `use_authentication` setting is configured, use authentication for all api methods instead of only those with the `auth_required` decorator
 * regenerate api keys on startup if the using authentication
 * support both positional and keyword args for api calls
 * `blob_announce` to queue the blob announcement but not block on it
 * `peer_list` to return a list of dictionaries instead of a list of lists, added peer node ids to the results
 * predictable result sorting for `claim_list` and `claim_list_mine` ([1216](https://github.com/lbryio/lbry/pull/1216) and [1208](https://github.com/lbryio/lbry/pull/1208))
 * increase the default `auto_re_reflect_interval` setting to a day and the default `concurrent_announcers` setting to 10
 * download blockchain headers from s3 before starting the wallet when the local height is more than `s3_headers_depth` (a config setting) blocks behind ([1177](https://github.com/lbryio/lbry/pull/1177))
 * check headers file integrity on startup, removing/truncating the file to force re-download when necessary
 * support partial headers file download from S3 ([1189](https://github.com/lbryio/lbry/pull/1189))
 * refactor `add_completed_blobs` on storage.py, simplifying into less queries ([1226](https://github.com/lbryio/lbry/pull/1226))
 * full verification of streams only during database migration instead of every startup ([1195](https://github.com/lbryio/lbry/pull/1195))
 * database batching functions for starting up the file manager
 * added `single_announce` and `last_announced_time` columns to the `blob` table in sqlite
 * track successful reflector uploads in sqlite to minimize how many streams are attempted by auto re-reflect ([1194](https://github.com/lbryio/lbry/pull/1194))
 * pass the sd hash to reflector ClientFactory instead of looking it up from the database
 * dht logging to be more verbose with errors and warnings
 * `store` kademlia rpc method to block on the call finishing and to return storing peer information
 * kademlia protocol to minimally delay writes to the UDP socket
 * several internal dht functions to use inlineCallbacks
 * `DHTHashAnnouncer` and `Node` manage functions to use `LoopingCall`s instead of scheduling with `callLater`.
 * refactored `DHTHashAnnouncer` to no longer use locks, use a `DeferredSemaphore` to limit concurrent announcers
 * decoupled `DiskBlobManager` from `DHTHashAnnouncer`, get blob hashes to announce from `SQLiteStorage`. The blob manager no longer announces blobs after they are completed, the hash announcer takes care of this now.
 * changed the bucket splitting condition in the dht routing table to be more aggressive
 * ping dht nodes who have stored to us periodically to determine whether we should include them as an active peer for the hash when we are queried. Nodes that are known to be not reachable by the node storing the record are no longer returned as peers by the storing node.
 * changed dht bootstrap join process to better populate the routing table initially
 * cache dht node tokens used during announcement to minimize the number of requests that are needed
 * implement BEP0005 dht rules to classify nodes as good, bad, or unknown and for when to add them to the routing table (http://www.bittorrent.org/beps/bep_0005.html)
 * refactored internal dht contact class to track failure counts/times, the time the contact last replied to us, and the time the node last requested something fom us ([1211](https://github.com/lbryio/lbry/pull/1211))
 * refactored dht iterativeFind
 * sort dht contacts returned by `findCloseNodes` in the routing table
 * `reactor` and `callLater`, `listenUDP`, and `resolve` functions to be configurable (to allow easier testing)
 * calls to get the current time to use `reactor.seconds` (to control callLater and LoopingCall timing in tests)
 * temporarily disabled data price negotiation, treat all data as free
 * disabled Cryptonator price feed
 * use `treq` instead of `txrequests` ([1191](https://github.com/lbryio/lbry/pull/1191))
 * updated `cryptography` version to 2.2.2
 * removed `pycrypto` dependency, replacing all calls to `cryptography`

### Added
 * `peer_ping` command
 * `--sort` option in `file_list` ([1174](https://github.com/lbryio/lbry/pull/1174))
 * `port` field to contacts returned by `routing_table_get`
 * configurable `concurrent_announcers` and `s3_headers_depth` settings
 * virtual kademlia network and mock udp transport for dht integration tests
 * functional tests for bootstrapping the dht, announcing and expiring hashes, finding and pinging nodes, protocol version 0/1 backwards/forwards compatibility, and rejoining the network
 * linux distro and desktop name added to analytics ([1218](https://github.com/lbryio/lbry/pull/1218))
 * certifi module for Twisted SSL verification on Windows ([1213](https://github.com/lbryio/lbry/pull/1213))
 * protocol version to dht requests and to the response from `findValue`

### Removed
 * `announce_all` argument from `blob_announce`
 * old `blob_announce_all` command
 * unused `--wallet` argument to `lbrynet-daemon`, which used to be to support `PTCWallet`.
 * `AuthJSONRPCServer.auth_required` decorator ([1161](https://github.com/lbryio/lbry/pull/1161))
 * `OptimizedTreeRoutingTable` class used by the dht node for the time being
",41103286
190,False,False,2018-05-04T15:16:44Z,2018-05-04T16:08:23Z,"## [0.19.3] - 2018-05-04
### Changed
 * download blockchain headers from s3 before starting the wallet when the local height is more than s3_headers_depth (a config setting) blocks behind (https://github.com/lbryio/lbry/pull/1177)
 * un-deprecated report_bug command (https://github.com/lbryio/lbry/commit/f8e418fb4448a3ed1531657f8b3c608fb568af85)
",41103286
191,False,True,2018-04-19T15:05:42Z,2018-04-19T15:09:01Z,"## [0.20.0rc7] - 2018-04-19
### Fixed
 * handling error from dht clients with old `ping` method
 * blobs not being re-announced if no peers successfully stored, now failed announcements are re-queued
 * issue where an `AuthAPIClient` (used by `lbrynet-cli`) would fail to update its session secret and keep making new auth sessions, with every other request failing
 * `use_auth_http` in a config file being overridden by the default command line argument to `lbrynet-daemon`, now the command line value will only override the config file value if it is provided
 * `lbrynet-cli` not automatically switching to the authenticated client if the server is detected to be using authentication. This resulted in `lbrynet-cli` failing to run when `lbrynet-daemon` was run with the `--http-auth` flag

### Changed
 * several internal dht functions to use inlineCallbacks
 * `DHTHashAnnouncer` and `Node` manage functions to use `LoopingCall`s instead of scheduling with `callLater`.
 * `store` kademlia rpc method to block on the call finishing and to return storing peer information
 * refactored `DHTHashAnnouncer` to longer use locks, use a `DeferredSemaphore` to limit concurrent announcers
 * decoupled `DiskBlobManager` from `DHTHashAnnouncer`
 * blob hashes to announce to be controlled by`SQLiteStorage`
 * kademlia protocol to not delay writes to the UDP socket
 * `reactor` and `callLater`, `listenUDP`, and `resolve` functions to be configurable (to allow easier testing)
 * calls to get the current time to use `reactor.seconds` (to control callLater and LoopingCall timing in tests)
 * `blob_announce` to queue the blob announcement but not block on it
 * blob completion to not `callLater` an immediate announce, let `SQLiteStorage` and the `DHTHashAnnouncer` handle it
 * raise the default number of concurrent blob announcers to 100
 * dht logging to be more verbose with errors and warnings
 * added `single_announce` and `last_announced_time` columns to the `blob` table in sqlite
 * pass the sd hash to reflector ClientFactory instead of looking it up
 * if the `use_authentication` setting is configured, use authentication for all api methods instead of only those with the `auth_required` decorator
 * regenerate api keys on startup if the using authentication
 * support both positional and keyword args for api calls
 * `peer_list` to return a list of dictionaries instead of a list of lists, added peer node ids to the results

### Added
 * virtual kademlia network and mock udp transport for dht integration tests
 * integration tests for bootstrapping the dht
 * configurable `concurrent_announcers` setting
 * `peer_ping` command

### Removed
 * `announce_all` argument from `blob_announce`
 * old `blob_announce_all` command
 * `AuthJSONRPCServer.auth_required` decorator
 * unused `--wallet` argument to `lbrynet-daemon`, which used to be to support `PTCWallet`.
",41103286
192,False,True,2018-04-03T17:21:17Z,2018-04-03T17:24:35Z,"## [0.20.0rc6] - 2018-04-03
### Fixed
 * handling error from dht clients with old `ping` method
 * blobs not being re-announced if no peers successfully stored, now failed announcements are re-queued
 * issue where an `AuthAPIClient` (used by `lbrynet-cli`) would fail to update its session secret and keep making new auth sessions, with every other request failing
 * `use_auth_http` in a config file being overridden by the default command line argument to `lbrynet-daemon`, now the command line value will only override the config file value if it is provided
 * `lbrynet-cli` not automatically switching to the authenticated client if the server is detected to be using authentication. This resulted in `lbrynet-cli` failing to run when `lbrynet-daemon` was run with the `--http-auth` flag

### Changed
 * several internal dht functions to use inlineCallbacks
 * `DHTHashAnnouncer` and `Node` manage functions to use `LoopingCall`s instead of scheduling with `callLater`.
 * `store` kademlia rpc method to block on the call finishing and to return storing peer information
 * refactored `DHTHashAnnouncer` to longer use locks, use a `DeferredSemaphore` to limit concurrent announcers
 * decoupled `DiskBlobManager` from `DHTHashAnnouncer`
 * blob hashes to announce to be controlled by`SQLiteStorage`
 * kademlia protocol to not delay writes to the UDP socket
 * `reactor` and `callLater`, `listenUDP`, and `resolve` functions to be configurable (to allow easier testing)
 * calls to get the current time to use `reactor.seconds` (to control callLater and LoopingCall timing in tests)
 * `blob_announce` to queue the blob announcement but not block on it
 * blob completion to not `callLater` an immediate announce, let `SQLiteStorage` and the `DHTHashAnnouncer` handle it
 * raise the default number of concurrent blob announcers to 100
 * dht logging to be more verbose with errors and warnings
 * added `single_announce` and `last_announced_time` columns to the `blob` table in sqlite
 * pass the sd hash to reflector ClientFactory instead of looking it up
 * if the `use_authentication` setting is configured, use authentication for all api methods instead of only those with the `auth_required` decorator
 * regenerate api keys on startup if the using authentication
 * support both positional and keyword args for api calls
 * `peer_list` to return a list of dictionaries instead of a list of lists, added peer node ids to the results

### Added
 * virtual kademlia network and mock udp transport for dht integration tests
 * integration tests for bootstrapping the dht
 * configurable `concurrent_announcers` setting
 * `peer_ping` command

### Removed
 * `announce_all` argument from `blob_announce`
 * old `blob_announce_all` command
 * `AuthJSONRPCServer.auth_required` decorator
 * unused `--wallet` argument to `lbrynet-daemon`, which used to be to support `PTCWallet`.
",41103286
193,False,False,2018-03-28T19:35:47Z,2018-03-28T19:44:25Z,"## [0.19.2] - 2018-03-28
### Fixed
 * incorrectly raised download cancelled error for already verified blob files
 * infinite loop where reflector client keeps trying to send failing blobs, which may be failing because they are invalid and thus will never be successfully received
 * docstring bugs for `stream_availability`, `channel_import`, and `blob_announce`

### Added
 * `blob_reflect` command to send specific blobs to a reflector server
 * unit test for docopt

### Removed
 * `flags` decorator from server.py as short flags are no longer used when using api/cli methods

### Changed
 * Bumped `lbryum` requirement to 3.2.1 [see changelog](https://github.com/lbryio/lbryum/blob/master/CHANGELOG.md#321---2018-03-28)",41103286
194,False,False,2018-03-20T14:15:50Z,2018-03-20T14:53:06Z,"## [0.19.1] - 2018-03-20
### Fixed
 * Fixed the inconsistencies in API and CLI docstrings
 * `blob_announce` error when announcing a single blob
 * `blob_list` error when looking up blobs by stream or sd hash ([1126](https://github.com/lbryio/lbry/pull/1126))
 * Claiming a channel with the exact amount present in wallet would return a confusing error ([1107](https://github.com/lbryio/lbry/issues/1107))
 * Channel creation to use same bid logic as for claims ([1148](https://github.com/lbryio/lbry/pull/1148))

### Deprecated
 * `report_bug` jsonrpc command

### Changed
 * Bumped `lbryschema` requirement to 0.0.15 [see changelog](https://github.com/lbryio/lbryschema/blob/master/CHANGELOG.md#0015---2018-03-20)
 * Bumped `lbryum` requirement to 3.2.0 [see changelog](https://github.com/lbryio/lbryum/blob/master/CHANGELOG.md#320---2018-03-20)
 * Reflector server to periodically check and set `should_announce` for sd and head blobs instead of during each request
 * Reflector server to use `SQLiteStorage` to find needed blob hashes for a stream

### Added
 * Scripts to auto-generate documentation ([1128](https://github.com/lbryio/lbry/pull/1128))
 * Now updating new channel also takes into consideration the original bid amount, so now channel could be updated for wallet balance + the original bid amount ([1137](https://github.com/lbryio/lbry/pull/1137))
 * Forward-compatibility for upcoming DHT encoding changes

### Removed
 * Short(single dashed) arguments for `lbrynet-cli`
",41103286
195,False,False,2018-03-03T04:01:23Z,2018-03-03T04:02:16Z,"## [0.19.0] - 2018-03-02
### Fixed
 * improper parsing of arguments to CLI settings_set (https://github.com/lbryio/lbry/issues/930)
 * unnecessarily verbose exchange rate error (https://github.com/lbryio/lbry/issues/984)
 * value error due to a race condition when saving to the claim cache (https://github.com/lbryio/lbry/issues/1013)
 * being unable to re-download updated content (https://github.com/lbryio/lbry/issues/951)
 * sending error messages for failed api requests
 * file manager startup being slow when handling thousands of files
 * handling decryption error for blobs encrypted with an invalid key
 * handling stream with no data blob (https://github.com/lbryio/lbry/issues/905)
 * fetching the external ip
 * `blob_list` returning an error with --uri parameter and incorrectly returning `[]` for streams where blobs are known (https://github.com/lbryio/lbry/issues/895)
 * `get` failing with a non-useful error message when given a uri for a channel claim
 * exception checking in several wallet unit tests
 * daemon not erring properly for non-numeric values being passed to the `bid` parameter for the `publish` method
 * `publish` command to allow updating claims with a `bid` amount higher than the wallet balance, so long as the amount is less than the wallet balance plus the bid amount of the claim being updated (https://github.com/lbryio/lbry/issues/748)
 * incorrect `blob_num` for the stream terminator blob, which would result in creating invalid streams. Such invalid streams are detected on startup and are automatically removed (https://github.com/lbryio/lbry/issues/1124)

### Deprecated
 * `channel_list_mine`, replaced with `channel_list`
 * `get_availability`, replaced with `stream_availability`

### Changed
 * dht tests to only be in one folder
 * config file format of `known_dht_nodes`, `lbryum_servers`, and `reflector_servers` to lists of `hostname:port` strings
 * startup of `lbrynet-daemon` to block on the wallet being unlocked if it is encrypted
 * `publish` to verify the claim schema before trying to make the claim and to return better error messages
 * `channel_list_mine` to be instead named `channel_list`
 * `channel_list` to include channels where the certificate info has been imported but the claim is not in the wallet
 * file objects returned by `file_list` and `get` to contain `claim_name` field instead of `name`
 * `name` filter parameter for `file_list`, `file_set_status`, `file_reflect`,  and `file_delete` to be named `claim_name`
 * `metadata` field in file objects returned by `file_list` and `get` to be a [Metadata object](https://github.com/lbryio/lbryschema/blob/master/lbryschema/proto/metadata.proto#L5)
 * assumption for time it takes to announce single hash from 1 second to 5 seconds
 * HTTP error codes for failed api requests, conform to http://www.jsonrpc.org/specification#error_object (previously http errors were set for jsonrpc errors)
 * api requests resulting in errors to return less verbose tracebacks
 * logging about streams to not include file names (only include sd hashes)
 * wallet info exchange to re-use addresses, this was a significant source of address bloat in the wallet
 * lbrynet to not manually save the wallet file and to let lbryum handle it
 * internals to use reworked lbryum `payto` command
 * dht `Node` class to re-attempt joining the network every 60 secs if no peers are known
 * lbrynet database and file manager to separate the creation of lbry files (from downloading or publishing) from the handling of a stream. All files have a stream, but not all streams may have a file. (https://github.com/lbryio/lbry/issues/1020)
 * manager classes to use new `SQLiteStorage` for database interaction. This class uses a single `lbrynet.sqlite` database file.

### Added
 * link to instructions on how to change the default peer port
 * `lbrynet-console`, a tool to run or connect to lbrynet-daemon and launch an interactive python console with the api functions built in.
 * `--conf` CLI flag to specify an alternate config file
 * `peer_port`, `disable_max_key_fee`, `auto_renew_claim_height_delta`, `blockchain_name`, and `lbryum_servers` to configurable settings
 * `wallet_unlock` command (available during startup to unlock an encrypted wallet)
 * support for wallet encryption via new commands `wallet_decrypt` and `wallet_encrypt`
 * `channel_import`, `channel_export`, and `claim_renew` commands
 * `blob_availability` and `stream_availability` commands for debugging download issues
 * a new startup stage to indicate if the daemon is waiting for the `wallet_unlock` command.
 * `abandon_info` dictionary (containing `claim_name`, `claim_id`, `address`, `amount`, `balance_delta` and `nout`) for claims, supports, and updates returned by `transaction_list`
 * `permanent_url` string to `channel_list_mine`, `claim_list`, `claim_show`, `resolve` and `resolve_name` (see lbryio/lbryum#203)
 * `is_mine` boolean to `channel_list` results
 * `txid`, `nout`, `channel_claim_id`, `channel_claim_name`, `status`, `blobs_completed`, and `blobs_in_stream` fields to file objects returned by `file_list` and `get`
 * `txid`, `nout`, `channel_claim_id`, and `channel_claim_name` filters for `file` commands (`file_list`, `file_set_status`, `file_reflect`,  and `file_delete`)
 * unit tests for `SQLiteStorage` and updated old tests for relevant changes (https://github.com/lbryio/lbry/issues/1088)

### Removed
 * `seccure` and `gmpy` dependencies
 * support for positional arguments in cli `settings_set`. Now only accepts settings changes in the form `--setting_key=value`
 * `auto_re_reflect` setting from the conf file, use the `reflect_uploads` setting instead
 * `name` argument for `claim_show` command
 * `message` response field in file objects returned by `file_list` and `get`
 * `include_tip_info` argument from `transaction_list`, which will now always include tip information.
 * old and unused UI related code
 * unnecessary `TempBlobManager` class
 * old storage classes used by the file manager, wallet, and blob manager
 * old `.db` database files from the data directory
",41103286
196,False,False,2018-01-24T20:05:01Z,2018-01-24T20:13:34Z,"## [0.18.2] - 2018-01-24
### Fixed
 * Fixed import error in Wallet.py
 * Fixed fetching the external ip in v0.18.1
",41103286
197,False,False,2018-01-22T20:57:49Z,2018-01-22T21:01:42Z,"## [0.18.1] - 2018-01-22
### Fixed
 * Fixed fetching the external ip
",41103286
198,False,False,2017-11-08T16:05:18Z,2017-11-08T18:10:18Z,"## [0.18.0] - 2017-11-08
### Fixed
 * Fixed amount of close nodes to add to list in case of extension to neighbouring k-buckets
 * Fixed external IP detection via jsonip.com (avoid detecting IPv6)
 * Fixed failing ConnectionManager unit test for parallel connections
 * Fixed race condition between `publish` and `channel_new`
 * Fixed incorrect response on attempting to delete blob twice
 * Fixed local node ID reporting in peer list

### Changed
 * Bumped `lbryschema` requirement to 0.0.14 [see changelog](https://github.com/lbryio/lbryschema/blob/master/CHANGELOG.md#0014---2017-11-08)
 * Bumped `lbryum` requirement to 3.1.11 [see changelog](https://github.com/lbryio/lbryum/blob/master/CHANGELOG.md#3111---2017-11-08)
 * Moved BLOB_SIZE from conf.py to MAX_BLOB_SIZE in blob/blob_file.py

### Added
 * Added `utxo_list` command to list unspent transaction outputs
 * Added redundant API server for currency conversion

### Removed
 * Removed some alternate methods of reading from blob files
 * Removed `@AuthJSONRPCServer.queued` decorator
",41103286
199,False,False,2017-10-25T21:33:55Z,2017-10-25T21:40:16Z,"## [0.17.1] - 2017-10-25
### Fixed
 * Fixed slow startup for nodes with many lbry files
 * Fixed setting the external ip on startup
 * Fixed session startup not blocking on joining the dht
 * Fixed several parsing bugs that prevented replacing dead dht contacts
 * Fixed lbryid length validation
 * Fixed an old print statement that polluted logs
 * Fixed rpc id length for dht requests

### Changed
 * Bumped `lbryschema` requirement to 0.0.13 [see changelog](https://github.com/lbryio/lbryschema/blob/master/CHANGELOG.md#0013---2017-10-25)
 * Bumped `lbryum` requirement to 3.1.10 [see changelog](https://github.com/lbryio/lbryum/blob/master/CHANGELOG.md#3110---2017-10-25)
 * Use the first port available for the peer and dht ports, starting with the provided values (defaults of 3333 and 4444). This allows multiple lbrynet instances in a LAN with UPnP.
 * Detect a UPnP redirect that didn't get cleaned up on a previous run and use it
 * Bumped jsonschema requirement to 2.6.0
 * Refactor some assert statements to accommodate the PYTHONOPTIMIZE flag set for Android.

### Added
 * Added `wallet_prefill_addresses` command, which distributes credits to multiple addresses
",41103286
200,False,True,2017-10-23T05:44:19Z,2017-10-23T13:45:21Z,"## [0.17.1rc1] - 2017-10-23
### Fixed
 * Fixed slow startup for nodes with many lbry files
 * Fixed setting the external ip on startup
 * Fixed session startup not blocking on joining the dht
 * Fixed a bug that prevented replacing dht contacts
 * Fixed lbryid length validation
 * Fixed an old print statement that polluted logs
",41103286
201,False,False,2017-10-12T16:39:09Z,2017-10-12T16:45:10Z,"## [0.17.0] - 2017-10-12
### Fixed
 * Fixed handling cancelled blob and availability requests
 * Fixed redundant blob requests to a peer
 * Fixed https://github.com/lbryio/lbry/issues/923
 * Fixed concurrent reflects opening too many files
 * Fixed cases when reflecting would fail on error conditions
 * Fixed deadlocks from occuring during blob writes
 * Fixed and updated`lbrynet.tests.dht`
 * Fixed redundant dht id
 * Fixed dht `ping` method
 * Fixed raising remote exceptions in dht
 * Fixed hanging delayedCall in dht node class
 * Fixed logging error in dht when calling or receiving methods with no arguments
 * Fixed IndexError in routingTable.findCloseNodes which would cause an empty list to be returned
 * Fixed bug where last blob in a stream was not saved to blob manager

### Deprecated
 * Deprecated `blob_announce_all` JSONRPC command. Use `blob_announce` instead.

### Changed
 * Bumped `lbryschema` requirement to 0.0.12 [see changelog](https://github.com/lbryio/lbryschema/blob/master/CHANGELOG.md#0012---2017-10-12)
 * Bumped `lbryum` requirement to 3.1.9 [see changelog](https://github.com/lbryio/lbryum/blob/master/CHANGELOG.md#319---2017-10-12)
 * Announcing by head blob is turned on by default
 * Updated reflector server dns
 * Moved tests into the lbrynet package.

### Added
 * Added WAL pragma to sqlite3
 * Added unit tests for `BlobFile`
 * Updated exchange rate tests for the lbry.io api
 * Use `hashlib` for sha384 instead of `pycrypto`
 * Use `cryptography` instead of `pycrypto` for blob encryption and decryption
 * Use `cryptography` for PKCS7 instead of doing it manually
 * Use `BytesIO` buffers instead of temp files when processing blobs
 * Refactored and pruned blob related classes into `lbrynet.blobs`
 * Changed several `assert`s to raise more useful errors
 * Added ability for reflector to store stream information for head blob announce
 * Added blob announcement information to API call status with session flag

### Removed
 * Removed `TempBlobFile`
 * Removed unused `EncryptedFileOpener`
",41103286
202,False,True,2017-10-11T18:49:55Z,2017-10-11T19:08:22Z,"## [0.17.0rc16] - 2017-10-11
### Fixed
 * Fixed handling cancelled blob and availability requests
 * Fixed redundant blob requests to a peer
 * Fixed https://github.com/lbryio/lbry/issues/923
 * Fixed concurrent reflects opening too many files
 * Fixed cases when reflecting would fail on error conditions
 * Fixed deadlocks from occuring during blob writes
 * Fixed and updated`lbrynet.tests.dht`
 * Fixed redundant dht id
 * Fixed dht `ping` method
 * Fixed raising remote exceptions in dht
 * Fixed hanging delayedCall in dht node class
 * Fixed logging error in dht when calling or receiving methods with no arguments
 * Fixed IndexError in routingTable.findCloseNodes which would cause an empty list to be returned

### Deprecated
 * Deprecated `blob_announce_all` JSONRPC command. Use `blob_announce` instead.

### Changed
 * Announcing by head blob is turned on by default
 * Updated reflector server dns
 * Moved tests into the lbrynet package.

### Added
 * Added WAL pragma to sqlite3
 * Added unit tests for `BlobFile`
 * Updated exchange rate tests for the lbry.io api
 * Use `hashlib` for sha384 instead of `pycrypto`
 * Use `cryptography` instead of `pycrypto` for blob encryption and decryption
 * Use `cryptography` for PKCS7 instead of doing it manually
 * Use `BytesIO` buffers instead of temp files when processing blobs
 * Refactored and pruned blob related classes into `lbrynet.blobs`
 * Changed several `assert`s to raise more useful errors
 * Added ability for reflector to store stream information for head blob announce
 * Added blob announcement information to API call status with session flag

### Removed
 * Removed `TempBlobFile`
 * Removed unused `EncryptedFileOpener`
",41103286
203,False,True,2017-10-11T18:06:34Z,2017-10-11T18:07:40Z,"## [0.17.0rc15] - 2017-10-11
### Fixed
 * Fixed handling cancelled blob and availability requests
 * Fixed redundant blob requests to a peer
 * Fixed https://github.com/lbryio/lbry/issues/923
 * Fixed concurrent reflects opening too many files
 * Fixed cases when reflecting would fail on error conditions
 * Fixed deadlocks from occuring during blob writes
 * Fixed and updated`lbrynet.tests.dht`
 * Fixed redundant dht id
 * Fixed dht `ping` method
 * Fixed raising remote exceptions in dht
 * Fixed hanging delayedCall in dht node class
 * Fixed logging error in dht when calling or receiving methods with no arguments
 * Fixed IndexError in routingTable.findCloseNodes which would cause an empty list to be returned

### Deprecated
 * Deprecated `blob_announce_all` JSONRPC command. Use `blob_announce` instead.

### Changed
 * Announcing by head blob is turned on by default
 * Updated reflector server dns
 * Moved tests into the lbrynet package.

### Added
 * Added WAL pragma to sqlite3
 * Added unit tests for `BlobFile`
 * Updated exchange rate tests for the lbry.io api
 * Use `hashlib` for sha384 instead of `pycrypto`
 * Use `cryptography` instead of `pycrypto` for blob encryption and decryption
 * Use `cryptography` for PKCS7 instead of doing it manually
 * Use `BytesIO` buffers instead of temp files when processing blobs
 * Refactored and pruned blob related classes into `lbrynet.blobs`
 * Changed several `assert`s to raise more useful errors
 * Added ability for reflector to store stream information for head blob announce
 * Added blob announcement information to API call status with session flag

### Removed
 * Removed `TempBlobFile`
 * Removed unused `EncryptedFileOpener`
",41103286
204,False,True,2017-10-11T17:07:49Z,2017-10-11T17:12:11Z,"## [0.17.0rc14] - 2017-10-11
### Fixed
 * Fixed handling cancelled blob and availability requests
 * Fixed redundant blob requests to a peer
 * Fixed https://github.com/lbryio/lbry/issues/923
 * Fixed concurrent reflects opening too many files
 * Fixed cases when reflecting would fail on error conditions
 * Fixed deadlocks from occuring during blob writes
 * Fixed and updated`lbrynet.tests.dht`
 * Fixed redundant dht id
 * Fixed dht `ping` method
 * Fixed raising remote exceptions in dht
 * Fixed hanging delayedCall in dht node class
 * Fixed logging error in dht when calling or receiving methods with no arguments
 * Fixed IndexError in routingTable.findCloseNodes which would cause an empty list to be returned

### Deprecated
 * Deprecated `blob_announce_all` JSONRPC command. Use `blob_announce` instead.

### Changed
 * Announcing by head blob is turned on by default
 * Updated reflector server dns
 * Moved tests into the lbrynet package.

### Added
 * Added WAL pragma to sqlite3
 * Added unit tests for `BlobFile`
 * Updated exchange rate tests for the lbry.io api
 * Use `hashlib` for sha384 instead of `pycrypto`
 * Use `cryptography` instead of `pycrypto` for blob encryption and decryption
 * Use `cryptography` for PKCS7 instead of doing it manually
 * Use `BytesIO` buffers instead of temp files when processing blobs
 * Refactored and pruned blob related classes into `lbrynet.blobs`
 * Changed several `assert`s to raise more useful errors
 * Added ability for reflector to store stream information for head blob announce
 * Added blob announcement information to API call status with session flag

### Removed
 * Removed `TempBlobFile`
 * Removed unused `EncryptedFileOpener`
",41103286
205,False,True,2017-10-09T14:40:23Z,2017-10-10T13:32:03Z,"## [0.17.0rc13] - 2017-10-09
### Fixed
 * Fixed handling cancelled blob and availability requests
 * Fixed redundant blob requests to a peer
 * Fixed https://github.com/lbryio/lbry/issues/923
 * Fixed concurrent reflects opening too many files
 * Fixed cases when reflecting would fail on error conditions
 * Fixed deadlocks from occuring during blob writes

### Deprecated
 * Deprecated `blob_announce_all` JSONRPC command. Use `blob_announce` instead.

### Changed
 * Announcing by head blob is turned on by default
 * Updated reflector server dns
 * Moved tests into the lbrynet package.

### Added
 * Added WAL pragma to sqlite3
 * Added unit tests for `BlobFile`
 * Updated exchange rate tests for the lbry.io api
 * Use `hashlib` for sha384 instead of `pycrypto`
 * Use `cryptography` instead of `pycrypto` for blob encryption and decryption
 * Use `cryptography` for PKCS7 instead of doing it manually
 * Use `BytesIO` buffers instead of temp files when processing blobs
 * Refactored and pruned blob related classes into `lbrynet.blobs`
 * Changed several `assert`s to raise more useful errors
 * Added ability for reflector to store stream information for head blob announce
 * Added blob announcement information to API call status with session flag

### Removed
 * Removed `TempBlobFile`
 * Removed unused `EncryptedFileOpener`
",41103286
206,False,False,2017-10-02T16:59:21Z,2017-10-02T17:02:15Z,"## [0.16.4] - 2017-10-02
### Changed
 * Temporarily disable blob analytics report
",41103286
207,False,True,2017-09-29T16:37:57Z,2017-09-29T16:44:29Z,"## [0.17.0rc8] - 2017-09-29
### Fixed
 * Fixed handling cancelled blob and availability requests
 * Fixed redundant blob requests to a peer
 * Fixed https://github.com/lbryio/lbry/issues/923

### Deprecated
 * Deprecated `blob_announce_all` JSONRPC command. Use `blob_announce` instead.

### Changed
 * Bumped `lbryschema` requirement to 0.0.12rc1 [see changelog](https://github.com/lbryio/lbryschema/blob/master/CHANGELOG.md#unreleased)
 * Bumped `lbryum` requirement to 3.1.9rc1 [see changelog](https://github.com/lbryio/lbryum/blob/master/CHANGELOG.md#unreleased)
 * Announcing by head blob is turned on by default
 * Updated reflector server dns

### Added
 * Added WAL pragma to sqlite3
 * Added unit tests for `BlobFile`
 * Updated exchange rate tests for the lbry.io api
 * Use `hashlib` for sha384 instead of `pycrypto`
 * Use `cryptography` instead of `pycrypto` for blob encryption and decryption
 * Use `cryptography` for PKCS7 instead of doing it manually
 * Use `BytesIO` buffers instead of temp files when processing blobs
 * Refactored and pruned blob related classes into `lbrynet.blobs`
 * Changed several `assert`s to raise more useful errors

### Removed
 * Removed `TempBlobFile`
 * Removed unused `EncryptedFileOpener`
",41103286
208,False,True,2017-09-28T21:46:48Z,2017-09-28T21:49:45Z,"## [0.17.0rc7] - 2017-09-28
### Fixed
 * Fixed handling cancelled blob and availability requests
 * Fixed redundant blob requests to a peer
 * Fixed blob download history

### Deprecated
 * Deprecated `blob_announce_all` JSONRPC command. Use `blob_announce` instead.

### Changed
 * Bumped `lbryschema` requirement to 0.0.12rc1 [see changelog](https://github.com/lbryio/lbryschema/blob/master/CHANGELOG.md#unreleased)
 * Bumped `lbryum` requirement to 3.1.9rc1 [see changelog](https://github.com/lbryio/lbryum/blob/master/CHANGELOG.md#unreleased)
 * Announcing by head blob is turned on by default
 * Updated reflector server dns
 * Improved download analytics
 * Improved download errors by distinguishing a data timeout from a sd timeout

### Added
 * Added WAL pragma to sqlite3
 * Added unit tests for `BlobFile`
 * Updated exchange rate tests for the lbry.io api
 * Use `hashlib` for sha384 instead of `pycrypto`
 * Use `cryptography` instead of `pycrypto` for blob encryption and decryption
 * Use `cryptography` for PKCS7 instead of doing it manually
 * Use `BytesIO` buffers instead of temp files when processing blobs
 * Refactored and pruned blob related classes into `lbrynet.blobs`
 * Changed several `assert`s to raise more useful errors

### Removed
 * Removed `TempBlobFile`
 * Removed unused `EncryptedFileOpener`
",41103286
209,False,False,2017-09-28T21:46:04Z,2017-09-28T21:48:01Z,"## [0.16.3] - 2017-09-28
### Fixed
 * Fixed blob download history

### Changed
 * Improved download analytics
 * Improved download errors by distinguishing a data timeout from a sd timeout
",41103286
210,False,False,2017-09-26T21:32:37Z,2017-09-26T21:35:47Z,"## [0.16.2] - 2017-09-26
### Fixed
 * Fixed https://github.com/lbryio/lbry/issues/771 (handle when a certificate is missing for a signed claim in `claim_list_mine`)
",41103286
211,False,False,2017-09-20T14:24:44Z,2017-09-20T14:32:09Z,"## [0.16.1] - 2017-09-20
### Fixed
 * Fixed `transaction_list` doc string
 * Fixed ([in lbryum](https://github.com/lbryio/lbryum/pull/156)) batched queries responsible for making transaction and tip histories slow

### Changed
 * Bumped `lbryum` requirement to 3.1.8 [see changelog](https://github.com/lbryio/lbryum/blob/master/CHANGELOG.md#318---2017-09-20)",41103286
212,False,False,2017-09-18T14:14:41Z,2017-09-18T16:13:20Z,"## [0.16.0] - 2017-09-18

### Added
 * Added new options related to seeking and announcing by head blob. This is expected to significantly increase network performance once enough nodes have updated. Options to seek by head blob are on by default in this version.
 * Added `include_tip_info` param to `transaction_list` API call

### Changed
 * Bumped `lbryschema` requirement to 0.0.11 [see changelog](https://github.com/lbryio/lbryschema/blob/master/CHANGELOG.md#0011---2017-09-18).
 * Bumped `lbryum` requirement to 3.1.7 [see changelog](https://github.com/lbryio/lbryum/blob/master/CHANGELOG.md#317---2017-09-18).
 * Updated exchange rate logic and exchange rate tests.

### Fixed
 * Fixed uncaught error when shutting down after a failed daemon startup.
 * Fixed spelling error in documentation.
",41103286
213,False,True,2017-09-11T16:09:40Z,2017-09-11T16:10:25Z,"## [0.16.0rc8] - 2017-09-11
### Fixed
 * Fixed uncaught error when shutting down after a failed daemon startup

### Changed
 * Updated exchange rate tests for the lbry.io api
 * Bumped `lbryschema` requirement to 0.0.11rc1 [see changelog](https://github.com/lbryio/lbryschema/blob/master/CHANGELOG.md#unreleased)
 * Bumped `lbryum` requirement to 3.1.7rc5 [see changelog](https://github.com/lbryio/lbryum/blob/master/CHANGELOG.md#unreleased)

### Added
 * Added option to announce head blob only if seeding
 * Added option to download by seeking head blob first
 * By default, option to download seeking head blob first is turned on
 * Added `include_tip_info` param to `transaction_list` API call
",41103286
214,False,True,2017-09-07T18:13:04Z,2017-09-07T18:17:44Z,"## [0.16.0rc7] - 2017-09-07
### Fixed
 * Fixed uncaught error when shutting down after a failed daemon startup

### Changed
 * Updated exchange rate tests for the lbry.io api
 * Bumped `lbryschema` requirement to 0.0.11rc1 [see changelog](https://github.com/lbryio/lbryschema/blob/master/CHANGELOG.md#unreleased)
 * Bumped `lbryum` requirement to 3.1.7rc5 [see changelog](https://github.com/lbryio/lbryum/blob/master/CHANGELOG.md#unreleased)

### Added
 * Added option to announce head blob only if seeding
 * Added option to download by seeking head blob first
 * Added `include_tip_info` param to `transaction_list` API call
",41103286
215,False,False,2017-09-07T17:19:16Z,2017-09-07T17:39:41Z,"## [0.15.2] - 2017-09-07
### Changed
 * Use lbry.io exchange rate API instead of google finance
",41103286
216,False,False,2017-08-22T22:31:09Z,2017-08-22T22:35:27Z,"## [0.15.1] - 2017-08-22
### Changed
 * Bumped `lbryschema` requirement to 0.0.10 [see changelog](https://github.com/lbryio/lbryschema/blob/master/CHANGELOG.md#0010---2017-08-22)
 * Bumped `lbryum` requirement to 3.1.6 [see changelog](https://github.com/lbryio/lbryum/blob/master/CHANGELOG.md#316---2017-08-22)
 * Persist DHT node id

### Added
 * Android platform detection in lbrynet/conf.py
 * androidhelpers module for determining base file paths
",41103286
217,False,False,2017-08-15T16:07:18Z,2017-08-15T16:18:39Z,"## [0.15.0] - 2017-08-15
### Fixed
 * Fixed reflector server blocking the `received_blob` reply on the server announcing the blob to the dht
 * Fixed incorrect formatting of ""amount"" fields
 * Fixed handling of SIGINT, SIGTERM.
 * Fixed shutdown sequence
 * Fix error when resolving an integer

### Deprecated
 * The API will no longer be served at the /lbryapi path. It will now be at the root.
 * Deprecated `send_amount_to_address` in favor of `wallet_send`

### Changed
 * Renamed `reflect` command to `file_reflect`
 * Allow IP addresses to be configured as reflector servers, not just host names.
 * Return list of blobs that were reflected from `file_reflect`

### Added
 * Added `wallet_send`, a command to send credits and tips
 * Added `reflector` keyword parameter to `file_reflect` command
 * Added configuration options for auto re-reflect
 * Added option to abandon by txid/nout
",41103286
218,False,False,2017-08-04T14:12:55Z,2017-08-04T14:29:32Z,"## [0.14.3] - 2017-08-04
### Fixed
 * Fixed incorrect formatting of ""amount"" fields

### Added
 * Added validation of currencies.
 * Added blob_announce API command

### Removed
 * Removed TempBlobManager
",41103286
219,False,True,2017-08-02T21:09:41Z,2017-08-02T21:36:17Z,"## [0.14.3rc6] - 2017-08-02
### Fixed
 * Fixed incorrect formatting of ""amount"" fields

### Added
 * Added validation of currencies.
 * Added blob_announce API command
",41103286
220,False,False,2017-07-24T18:03:25Z,2017-07-24T19:12:37Z,"## [0.14.2] - 2017-07-24
### Fixed
 * Fix for https://github.com/lbryio/lbry/issues/750
 * Fixed inconsistencies in claim_show output
 * Fixed daemon process hanging when started without an internet connection
 * Fixed https://github.com/lbryio/lbry/issues/774
 * Fix XDG compliance on Linux (https://github.com/lbryio/lbry/issues/574)
 * Fixed https://github.com/lbryio/lbry/issues/760
 * Fixed default directories bug

### Changed
 * claim_show API command no longer takes name as argument
 * Linux default downloads folder changed from `~/Downloads` to `XDG_DOWNLOAD_DIR`
 * Linux folders moved from the home directory to `~/.local/share/lbry`
 * Windows folders moved from `%AppData%/Roaming` to `%AppData%/Local/lbry`

### Added
 * Add link to instructions on how to change the default peer port
 * Add `peer_port` to settings configurable using `settings_set`
 * Added an option to disable max key fee check.
",41103286
221,False,True,2017-07-17T18:18:08Z,2017-07-17T18:24:46Z,"## [0.14.2rc5] - 2017-07-17
### Fixed
 * Fix for https://github.com/lbryio/lbry/issues/750
 * Fixed inconsistencies in claim_show output
 * Fixed daemon process hanging when started without an internet connection
 * Fixed https://github.com/lbryio/lbry/issues/774

### Changed
 * claim_show API command no longer takes name as argument

### Added
 * Add link to instructions on how to change the default peer port
 * Add `peer_port` to settings configurable using `settings_set`
 * Added an option to disable max key fee check.
",41103286
222,False,True,2017-07-14T18:44:03Z,2017-07-14T18:51:33Z,"## [0.14.2rc4] - 2017-07-14
### Fixed
 * Fix for https://github.com/lbryio/lbry/issues/750
 * Fixed daemon process hanging when started without an internet connection
 * Fixed https://github.com/lbryio/lbry/issues/774

### Added
 * Add link to instructions on how to change the default peer port
 * Add `peer_port` to settings configurable using `settings_set`
 * Added an option to disable max key fee check.
",41103286
223,False,False,2017-07-07T21:51:37Z,2017-07-07T23:28:48Z,"### Fixed
 * Fixed timeout behaviour when calling API command get
 * Fixed https://github.com/lbryio/lbry/issues/765

",41103286
224,False,False,2017-07-05T19:58:59Z,2017-07-05T20:12:18Z,"### Added
 * Missing docstring for `blob_list`
 * Added convenient import for setting up a daemon client, `from lbrynet.daemon import get_client`
 * Added unit tests for CryptBlob.py


### Changed
 * Change `max_key_fee` setting to be a dictionary with values for `currency` and `amount`
 * Renamed `lbrynet.lbryfile` to `lbrynet.lbry_file`
 * Renamed `lbrynet.lbryfilemanager` to `lbrynet.file_manager`
 * Renamed `lbrynet.lbrynet_daemon` to `lbrynet.daemon`
 * Initialize lbrynet settings when configuring an api client if they are not set yet
 * Updated lbryum imports
 * Improve error message when resolving a claim fails using the ""get"" command


### Removed
 * Removed unused settings from conf.py and `settings_set`
 * Removed download_directory argument from API command get


### Fixed
 * Fixed some log messages throwing exceptions
 * Fix shutdown of the blob tracker by Session
 * Fixed claim_new_support docstrings
 * Fixed BlobManager causing functional tests to fail, removed its unneeded manage() loop
 * Increased max_key_fee
 * Fixed unit tests on appveyor Windows build
 * Fixed [#692](https://github.com/lbryio/lbry/issues/692)

",41103286
225,False,False,2017-06-16T00:25:07Z,2017-06-16T00:42:00Z,"### Added
 * Add `claim_send_to_address`
 * Add `change_address` argument to `publish`
 * Add `unique_contacts` count to `status` response


### Changed
 * Support resolution of multiple uris with `resolve`, all results are keyed by uri
 * Add `error` responses for failed resolves
 * Add `claim_list_by_channel`, supports multiple channel resolution
 * Rename delete_target_file argument of delete API command to delete_from_download_dir
 * Rename delete_all CLI flag -a to --delete_all


### Removed
 * Remove `claims_in_channel` from `resolve` response


### Fixed
 * Race condition from improper initialization and shutdown of the blob manager database
 * Various fixes for GetStream class used in API command get
 * Download analytics error
 * Fixed flag options in file_delete API command

",41103286
226,False,True,2017-06-15T22:29:43Z,2017-06-16T00:02:21Z,,41103286
227,False,True,2017-06-14T19:55:57Z,2017-06-14T21:28:41Z,"### Added
  * Add `claim_send_to_address`
  * Add `change_address` argument to `publish`
  * Add `error` responses for failed resolves
  * Add `claim_list_by_channel`, supports multiple channel resolution
  * Add `unique_contacts` count to `status` response

### Changed
  * Support resolution of multiple uris with `resolve`, all results are keyed by uri
  * Rename `delete_target_file` argument of `file_delete` to `delete_from_download_dir`
  * Rename `file_delete` CLI flag `-a` to `--delete_all`

### Fixed
  * Race condition from improper initialization and shutdown of the blob manager database
  * Various fixes for GetStream class used in API command get
  * Download analytics error
  * Fixed flag options in file_delete API command


### Removed
  * Remove `claims_in_channel` from `resolve` response
  *",41103286
228,False,True,2017-06-12T18:14:56Z,2017-06-12T19:03:27Z,,41103286
229,False,True,2017-06-12T17:52:34Z,2017-06-12T17:56:57Z,"Note: these changes are incompatible with lbry-app v0.12.0

### Added
  * Add error responses for failed resolves
  * Add claim_list_by_channel, supports multiple channel resolution
  * Add `claim_send_to_address`
  * Add `change_address` argument to `publish`

### Changed
  * Support resolution of multiple uris with resolve, all results are keyed by uri

### Removed
  * Remove claims_in_channel from resolve response

",41103286
230,False,True,2017-06-12T15:18:38Z,2017-06-12T15:25:20Z,"### Added
  * Add error responses for failed resolves
  * Add claim_list_by_channel, supports multiple channel resolution
  * Add claim_send_to_address

### Changed
  * Support resolution of multiple uris with resolve, all results are keyed by uri

### Removed
  * Remove claims_in_channel from resolve response",41103286
231,False,True,2017-06-09T20:03:13Z,2017-06-09T20:15:43Z,"Note: these changes are incompatible with lbry-app v0.12.0

### Changed
  * Support resolution of multiple uris with `resolve`, all results are keyed by uri
  * Add `error` responses for failed resolves
  * Add `claim_list_by_channel`, supports multiple channel resolution

### Removed
  * Remove `claims_in_channel` from `resolve` response
  *
",41103286
232,False,True,2017-06-09T18:45:06Z,2017-06-09T19:53:17Z,,41103286
233,False,False,2017-06-09T17:01:56Z,2017-06-09T17:10:42Z,"### Added
 * Added claim_address option to publish API command
 * Added message for InsufficientFundsError exception
 * Add CLI docs
 * Add `dht_status` parameter to `status` to include bandwidth and peer info
 * Positional and flag arguments in lbrynet-cli

### Changed
 * Prevent publish of files with size 0
 * Do not catch base exception in API command resolve
 * Get version information locally instead of via api for cli
 * Changed keyword arguments in lbrynet-cli to use a -- prefix
 * Using the help function in lbrynet-cli no longer requires lbrynet-daemon to be running
 * Update `publish` to use {'currency': ..., 'address': ..., 'amount'} format for fee parameter, previously used old {currency: {'address': ..., 'amount': ...}} format
 * Allow claim_show to be used without specifying name


### Deprecated
 * Old fee metadata format in publish API command is deprecated, throw relevant exception
 * Remove deprecated `lbrynet.metadata` and update what used it to instead use `lbryschema`
 * Removed deprecated `get_best_blockhash`
 * Removed deprecated `is_running`
 * Removed deprecated `daemon_status`
 * Removed deprecated `is_first_run`
 * Removed deprecated `get_lbry_session_info`
 * Removed deprecated `get_time_behind_blockchain`
 * Removed deprecated `get_settings`
 * Removed deprecated `set_settings`
 * Removed deprecated `get_balance`
 * Removed deprecated `stop`
 * Removed deprecated `get_claim_info`
 * Removed deprecated `stop_lbry_file`
 * Removed deprecated `start_lbry_file`
 * Removed deprecated `get_est_cost`
 * Removed deprecated `abandon_claim`
 * Removed deprecated `support_claim`
 * Removed deprecated `get_my_claim`
 * Removed deprecated `get_name_claims`
 * Removed deprecated `get_claims_for_tx`
 * Removed deprecated `get_transaction_history`
 * Removed deprecated `get_transaction`
 * Removed deprecated `address_is_mine`
 * Removed deprecated `get_public_key_from_wallet`
 * Removed deprecated `get_new_address`
 * Removed deprecated `get_block`
 * Removed deprecated `descriptor_get`
 * Removed deprecated `download_descriptor`
 * Removed deprecated `get_peers_for_hash`
 * Removed deprecated `announce_all_blobs_to_dht`
 * Removed deprecated `get_blob_hashes`
 * Removed deprecated `reflect_all_blobs`
 * Removed deprecated `get_start_notice`


### Fixed
 * Download analytics error
 * Fix licenseUrl field in `publish`
",41103286
234,False,True,2017-06-08T23:26:34Z,2017-06-08T23:43:57Z,,41103286
235,False,True,2017-06-08T22:45:57Z,2017-06-08T22:50:30Z,,41103286
236,False,True,2017-06-05T15:39:56Z,2017-06-05T15:58:17Z,,41103286
237,False,True,2017-06-01T20:37:55Z,2017-06-01T20:43:57Z,,41103286
238,False,False,2017-05-23T20:19:57Z,2017-05-24T00:44:19Z,"### Added
 * Add decorator to support queueing api calls
 * Added force option to API command resolve


### Changed
 * Added optional `address` and `include_unconfirmed` params to `jsonrpc_wallet_balance` method
 * Wait for subscriptions before announcing wallet has finished starting
 * Cache claims in wallet storage for use looking claims up by id or outpoint
 * Try to use cached claim info for `file_list`
 * Convert wallet storage to inlinecallbacks
 * Improve internal name_metadata sqlite table


### Fixed
 * Fix race condition in publish that resulted in claims being rejected when making many publishes concurrently

",41103286
239,False,True,2017-05-20T15:53:44Z,2017-05-20T16:05:52Z,,41103286
240,False,True,2017-05-16T23:49:10Z,2017-05-16T23:58:33Z,,41103286
241,False,True,2017-05-04T15:40:37Z,2017-05-04T15:51:32Z,,41103286
242,False,False,2017-05-03T17:17:46Z,2017-05-03T17:31:14Z,"### Fixed

- Minor fix of build detection",41103286
243,False,False,2017-05-03T15:37:00Z,2017-05-03T16:01:37Z,"### Changed
* Stop checking for lbry-app updates
* Add missing metrics

### Fixed
 * Fix multiple reactor.stop() calls
 * Properly shut down lbryum wallet from lbrynet
 * Set LBRYumWallet.config upon initialization, fixes attribute error

",41103286
244,False,True,2017-05-02T01:34:54Z,2017-05-02T14:05:40Z,,41103286
245,False,True,2017-04-27T12:38:35Z,2017-04-27T12:46:56Z,"- Stop checking for lbry-app updates
- Added missing metrics",41103286
246,False,False,2017-04-25T20:22:53Z,2017-04-25T20:28:31Z,"## URIs and Publisher Identity (aka Channels)

This release has the finished (for now) version of publisher identity commands (aka channels). Use `channel_new` to create a new channel, `channel_list_mine` to see your channels, and the `channel_name` field in `publish` to publish content into a channel you've created. 

This also includes the [LBRY URI schema](https://github.com/lbryio/lbryschema) spec for resolving names within the LBRY protocol. See [the uri description](https://github.com/lbryio/lbryschema/blob/master/docs/uri.md) for more info

Full changelog:

### Added
 * Add `claim_id` parameter to `claim_show`
 * Add `hex` field to claim responses for the raw claim value
 * Add an `error` field to to file responses if an error occurs
 * Use `claim_id` instead of outpoint for `claim_abandon`
 * Add `channel_name` parameter to `publish`
 * Add `delete_all` parameter to `file_delete` to allow deleting multiple files
 * Add `channel_list_mine` command, which lists a user's channels
 * Add `channel_new` command, which creates new channels
 * Add `resolve` command, which resolves lbry uris
 * Add `channel_name` to claim and file responses where applicable
 * Add `lbryschema_version` to response from `version`
 * Added call to `get_address_balance` when `address` conditional returns true
 * Added `address` conditional to `jsonrpc_wallet_balance`
 * Added `get_address_balance` method to the `Wallet` class
### Changed
 * Return None (instead of errors) if a uri cannot be resolved
 * Use `uri` instead of `name` for `get_availability` and `stream_cost_estimate`, update cost estimate for lbryschema
 * Use lbryschema library for metadata
 * Use `uri` instead of `name` for `get`, remove explicit `claim_id` parameter
 * Increase default download timeout
 * Use lbry.io api for exchange rate data
 * Added optional `address` and `include_unconfirmed` params to `jsonrpc_wallet_balance` method
 * Wait for subscriptions before announcing wallet has finished starting
### Fixed
 * Removed update_metadata function that could cause update problems
 * Fix DHT contact bug 
 * fix `file_list` for files with bad signatures
 * return None from resolve commands when nothing is found
 * return lbry files with claims that are abandoned
 * fix unhelpful error messages in `publish` and `channel_new`
 * fix stream_cost_estimate throwing exception on non decodeable claims
 * fixed signing of Windows binaries
 * fixed a few pylint warnings",41103286
247,False,True,2017-04-12T22:51:06Z,2017-04-12T23:06:30Z,"## Channels Prerelease

This prerelease has the first public version of publisher identity commands (aka channels). Use `channel_new` to create a new channel, `channel_list_mine` to see your channels, and the `channel_name` field in `publish` to publish content into a channel you've created. 

This also includes the [LBRY URI schema](https://github.com/lbryio/lbryschema) spec for resolving names within the LBRY protocol.

If you notice any bugs or weird behavior, please file an [issue](https://github.com/lbryio/lbry/issues) or message us on [Slack](https://slack.lbry.io).

Full changelog:

### Added
 * Add `claim_id` parameter to `claim_show`
 * Add `hex` field to claim responses for the raw claim value
 * Add an `error` field to to file responses if an error occurs
 * Use `claim_id` instead of outpoint for `claim_abandon`
 * Add `channel_name` parameter to `publish`
 * Add `delete_all` parameter to `file_delete` to allow deleting multiple files
 * Add `channel_list_mine` command, which lists a user's channels
 * Add `channel_new` command, which creates new channels
 * Add `resolve` command, which resolves lbry uris
 * Add `channel_name` to claim and file responses where applicable
### Changed
 * Return None (instead of errors) if a uri cannot be resolved
 * Use `uri` instead of `name` for `get_availability` and `stream_cost_estimate`, update cost estimate for lbryschema
 * Use lbryschema library for metadata
 * Use `uri` instead of `name` for `get`, remove explicit `claim_id` parameter
 * Increase default download timeout
 * Use lbry.io api for exchange rate data
### Fixed
 * Removed update_metadata function that could cause update problems
 * Fix DHT contact bug 
 * fix `file_list` for files with bad signatures
 * return None from resolve commands when nothing is found
 * return lbry files with claims that are abandoned
 * fix unhelpful error messages in `publish` and `channel_new`


",41103286
248,False,False,2017-03-29T15:10:57Z,2017-03-29T20:59:06Z,"### Added
 * Create wallet_unused_address API command
 * Add `claim_id` parameter to `get`, used to specify non-default claim for `name`
### Changed
 * wallet_new_address API command always returns new address
 * Improved ConnectionManager speed
 * Remove unused `stream_info` parameter in `get`",41103286
249,False,True,2017-03-25T14:29:07Z,2017-03-26T13:46:54Z,"### Added
 * Add `wallet_list` command
 * Add checks for missing/extraneous params when calling jsonrpc commands
 * Added colors to cli error messages
### Changed
 * Removed check_pending logic from Daemon
 * Switched to txrequests so requests can use twisted event loop
 * Renamed API command file_seed to file_set_status
### Fixed
 * Fix restart procedure in DaemonControl
 * Create download directory if it doesn't exist
 * Fixed descriptor_get
 * Fixed jsonrpc_reflect()
 * Fixed api help return
 * Fixed API command descriptor_get
 * Fixed API command transaction_show
 * Fixed error handling for jsonrpc commands",41103286
250,False,True,2017-03-21T21:10:51Z,2017-03-29T21:00:19Z,"### Added
 * Add `wallet_list` command
### Changed
 * Dont add expected payment to wallet when payment rate is 0
### Fixed
 * Fixed descriptor_get
 * Fixed jsonrpc_reflect()
 * Fixed api help return
 * Fixed API command descriptor_get
 * Fixed API command transaction_show
 * Handle failure to decode claim cache file",41103286
251,False,False,2017-03-17T22:24:20Z,2017-03-17T23:19:58Z,"### Added
 * Added `--version` flag
 * Added `lbrynet-cli` executable to control daemon from command line
 * publish API command can take metadata fields as arguments
 * Added `reflect_uploads` config to disable reflecting on upload

### Changed
 * Removed `simplejson` dependency in favor of bulitin `json`

### Fixed
 * Fixed jsonrpc_reflect()
 * Fixed api help return
 * Fix wallet_public_key API command
",41103286
252,False,False,2017-03-14T03:16:01Z,2017-03-14T03:36:32Z,"### Added
 * Add file filters: `claim_id`, `outpoint`, and `rowid`
 * Make loggly logs less verbose
### Changed
 * Remove unused upload_allowed option
 * Remove code related to packaging as that step is now done in the electron client
 * Remove lbryum version check; use lbry-electron as version source
 * Include download url in version check
 * Add blockchain status to jsonrpc_status
 * Change file filter `uri` to `name` and return field `lbry_uri` to `name`
 * Refactor file_list, add `full_status` argument to populate resource intensive fields
 * Remove deprecated file commands: `get_lbry_files`, `get_lbry_file`, and `file_get`
 * Remove deprecated `delete_lbry_file` command
 * Return standard file json from `get`
### Fixed
 * Added timeout to ClientProtocol
 * Add check for when local height of wallet is less than zero
 * Fixed ExchangeRateManager freezing the app
 * Fixed download not timing out properly when downloading sd blob
 * Added string comparison to ClaimOutpoint (needed to look things up by outpoint)
 * Remove unused API commands from daemon
 * Fix file filter `outpoint`
 * Made dictionary key names in API commmand outputs to be more consistent",41103286
253,False,False,2017-03-10T21:30:28Z,2017-03-13T14:16:52Z,"### Fixed
 * Added string comparison to ClaimOutpoint (needed to look things up by outpoint)
 * Remove unused API commands from daemon
 * Fix file filter `outpoint`
 * Made dictionary key names in API commmand outputs to be more consistent",41103286
254,False,False,2017-03-09T15:37:44Z,2017-03-09T16:00:53Z,"### Added
 * Add file filters: `claim_id`, `outpoint`, and `rowid`
 * Make loggly logs less verbose
### Changed
 * Change file filter `uri` to `name` and return field `lbry_uri` to `name`
 * Refactor file_list, add `full_status` argument to populate resource intensive fields
 * Remove deprecated file commands: `get_lbry_files`, `get_lbry_file`, and `file_get`
 * Remove deprecated `delete_lbry_file` command
 * Return standard file json from `get`
### Fixed
 * Added string comparison to ClaimOutpoint (needed to look things up by outpoint)
 * Remove unused API commands from daemon
 * Fix file filter `outpoint`",41103286
255,False,True,2017-02-27T22:49:07Z,2017-03-06T22:05:52Z,"### Fixed
- Added timeout to ClientProtocol
- Add check for when local height of wallet is less than zero
",41103286
256,False,False,2017-02-21T17:36:44Z,2017-02-21T17:43:33Z,,41103286
257,False,True,2017-02-20T00:50:41Z,2017-02-20T01:01:19Z,,41103286
258,False,True,2017-02-18T19:50:39Z,2017-02-18T19:55:12Z,"Release
",41103286
259,False,True,2017-02-17T20:39:37Z,2017-02-17T20:46:36Z,,41103286
260,False,False,2017-02-15T22:29:40Z,2017-02-15T22:34:43Z,"### Fixed
- Add better logging to help track down [#478](https://github.com/lbryio/lbry/issues/478)
- Catch UnknownNameErrors when resolving a name. [#479](https://github.com/lbryio/lbry/issues/479)
",41103286
261,False,True,2017-02-14T13:55:54Z,2017-02-14T14:02:25Z,"### Changed
- make connection manager unit testeable 

### Fixed
- Change EWOULDBLOCK error in DHT to warning. #481
- mark peers as down if it fails download protocol
- Made hash reannounce time to be adjustable to fix #432
",41103286
262,False,False,2017-02-02T15:43:28Z,2017-02-02T15:52:27Z,,41103286
263,False,True,2017-02-01T23:57:05Z,2017-02-02T00:08:30Z,"### Changed
- reflect all the blobs in a stream
- change command line flags so that the more common usage is the default
- change daemon function signatures to include names arguments

### Fixed
- disable verbose twisted logs
- improved wallet balance calculations
- fix block too deep error
",41103286
264,False,False,2017-01-24T16:56:36Z,2017-01-24T17:13:06Z,"# Daemon

### Maintenance
- renamed api endpoints
- improved command line user experience
- integrate twisted logging with python logging
- Updated READMEs

### Bug Fixes
- Fixed bug where ConnectionManager wasn't being stopped
- Fixed: https://github.com/lbryio/lbry/issues/343
- Stop hanging if github is down
- paths for debian package have been updated to be correct
- improved output of the publish command
",41103286
265,False,False,2017-01-04T03:09:25Z,2017-01-04T22:40:16Z,"# Daemon

### Maintenance
- the DHT was causing high cpu usage; profiled and reduced usage
- improved DHT shutdown process
- Improved linting
- start migrating to using twisted's inlineCallbacks
- improved startup sequence; UI now launches almost instantly
- replace settings code, removing unqlite dependency
- improved blob announcement
- improved wallet initialization
- more wallet unit tests
- upgrade jsonrpc server to support v2; CLI now gives good error messages

### Bug Fixes
- report a bug now works
-  fixed get_value_for_name bug
- fix in auth.server
- fixed bug where broadcast_transaction function would not return a deferred

# UI
- added sorting to My Files page
- added developer settings page, including the ability to choose custom Lighthouse servers
- My Files and Discover pages now work reliably even if Lighthouse servers aren't available
- fixed missing imports on watch and report bug pages
- fixed several pages that weren't loading on IE because it doesn't support the ES6 Symbol type
- the published tab of the My Files page now consistently shows your own claims rather than the winning claim for that name
- use much more accurate new Lighthouse servers
- made search box work on pages other than Discover
- restored the dewey decimals message while search results are loading (the ""no results"" message was showing instead)
",41103286
266,False,False,2016-12-17T03:18:20Z,2016-12-17T03:24:57Z,"Accidentally deleted release 0.7.10
so doing a quick release with an
updated build to fix ssl errors on OSX
",41103286
267,False,False,2016-12-09T20:13:27Z,2016-12-09T20:19:28Z,"Fixes a critical bug preventing downloading and viewing of content.

See https://github.com/lbryio/lbry/pull/322 for more details
",41103286
268,False,False,2016-12-03T02:04:39Z,2016-12-03T02:10:27Z,"### Maintenance
- Surface the LBRY ID to the UI
- Better identify claims with nOut and txid
- Downgrade log statements in wallet to debug

### Bug fixes
- better handling when a user has no files
- handle `rc` properly when deciding to alert for upgrading
- fix `auto-connect` for lbryum
- require nameclaims to be non-empty
- require nameclaim big to be non-zero
- stop using keep-alive for analytics events
- broke and then fixed the settings page

There was an issue in the build process with macOS on v0.7.7 so we fixed that and bumped the version number.
",41103286
269,False,False,2016-11-16T17:06:53Z,2016-11-16T17:14:50Z,"### Maintenance
- Bleeding edge builds are now public and contain a snapshot of the UI
- Improved startup and shutdown logging, and related error reporting
- Alert and confirmation boxes have been switched to React modal boxes
- unhandled errors from JSONRPC are now surfaced to the user

### Bug fixes
- re-allow lbrycrd wallet to be specified as a command line argument
- fix double shutdown message on osx
- fallback to old json config if yaml one is not present
- better error handling when looking up an unclaimed name
- filenames with unicode characters can now be published
- on publish page, claim and bid amounts are displayed exactly
",41103286
270,False,False,2016-11-02T15:50:42Z,2016-11-02T16:01:14Z,"### Maintenance
- Rewrote configuration; application can now be configured using environment variables in addition to a config file and the hard-coded defaults. This will allow us to better test the application using testnet and regtest.
- Made the logging consistent across platforms; will allow better visibility into errors
- Truncate text using clampjs

### Bug fixes
- Improved startup sequence, eliminating some bugs there.
- Catch and report on startup errors instead of silently failing
- My Files tab sometimes continually displayed a loading screen even when there weren't any files.
- Bug fix related to name-claim takeovers / updates
- Don't fail when checking for updates and github is down
- Buttons now submit when the user hits enter
",41103286
271,False,False,2016-10-28T15:55:48Z,2016-10-28T16:02:09Z,"### Patch Release

Fixes a bug in lbryum where recently name claims were failing to resolve.

See https://github.com/lbryio/lbryum/commit/ad80e249a8b4d2d44150fffb4182d6ea5afb044c
",41103286
272,False,False,2016-10-20T16:41:49Z,2016-10-20T16:47:54Z,"### Features
- Added data pricing negotiation between clients and hosts, rather than fixed fees.
- Default hosting rates have been reduced.

### Maintenance
- Reworked metadata validation to use jsonschema. This will allow much faster iterations of the LBRY metadata definitions.
- Improved metadata migration

### Bug fixes
- Fix import error in Mac / Windows applications
- Include jsonschema files for Windows
- Other Windows fixes
- Other smaller bug fixes
- Fix is_generous and negotiation related bugs
",41103286
273,False,False,2016-10-02T07:33:12Z,2016-10-02T07:33:36Z,"### Features
- Add better streaming support for partially downloaded files. Previously, seeking had been broken for some files.
- Add API call to get the name claims that you own

### Maintenance
- Improvements to testing and continuous integration
- Remove LBRY prefix on class names
",41103286
274,False,False,2016-09-16T08:12:55Z,2016-09-16T08:13:46Z,"This release contains security updates and bug fixes, updating is strongly recommended.

### Security Fixes
- sandbox loaded html pages to prevent access to the lbrynet jsonrpc api.
- block api calls from bad origins

### Features
- signed msi for windows
- lbrynet-daemon command line for windows
- exclude credits in name claims from displayed balance
",41103286
275,False,False,2016-08-29T20:41:48Z,2016-08-29T20:43:59Z,,41103286
276,False,False,2016-08-29T18:33:56Z,2016-08-29T18:35:35Z,,41103286
277,False,False,2016-08-28T09:01:49Z,2016-08-28T09:09:28Z,"-reflector hosting of all publications
-metadata versioning
-windows support
",41103286
278,False,False,2016-08-26T04:56:06Z,2016-08-26T05:00:04Z,"fix access-control-allow-origin to not allow downloaded files to run api commands
",41103286
279,False,False,2016-08-23T06:25:32Z,2016-08-23T06:31:10Z,"https://github.com/lbryio/lbry/pull/135
https://github.com/lbryio/lbry/pull/136
",41103286
280,False,False,2016-08-21T08:04:11Z,2016-08-21T08:08:01Z,"https://github.com/lbryio/lbry/pull/127
https://github.com/lbryio/lbry/pull/132
https://github.com/lbryio/lbry/pull/133
",41103286
281,False,False,2016-06-23T21:35:13Z,2016-08-18T19:32:27Z,,41103286
282,False,False,2016-07-05T18:30:35Z,2016-08-18T19:25:44Z,,41103286
283,False,False,2016-07-05T19:20:35Z,2016-08-18T19:24:15Z,,41103286
284,False,False,2016-08-18T10:41:17Z,2016-08-18T10:42:16Z,"fix browser caching issue
",41103286
285,False,False,2016-08-17T06:39:48Z,2016-08-17T06:40:22Z,,41103286
286,False,True,2016-08-16T20:16:55Z,2016-08-16T20:41:31Z,"A LBRY-branded install process.
",41103286
287,False,False,2016-08-09T18:40:18Z,2016-08-09T18:40:56Z,,41103286
288,False,False,2016-08-09T16:41:11Z,2016-08-09T16:41:29Z,,41103286
289,False,False,2016-08-09T07:29:51Z,2016-08-09T07:32:44Z,,41103286
290,False,False,2016-08-07T00:07:28Z,2016-08-07T00:08:17Z,,41103286
291,False,False,2016-08-03T22:01:18Z,2016-08-03T22:02:46Z,,41103286
292,False,False,2016-07-30T03:44:04Z,2016-07-30T03:47:48Z,"Metadata versioning, multiple currency support, get_claim_info, and fuzzy search
",41103286
293,False,False,2016-07-27T07:58:25Z,2016-07-27T07:59:02Z,,41103286
294,False,False,2016-07-21T02:40:55Z,2016-07-21T02:46:44Z,,41103286
295,False,False,2016-07-21T00:34:41Z,2016-07-21T00:35:58Z,"Temporary (hot) fix for stream downloads
",41103286
296,False,True,2016-07-20T15:46:57Z,2016-07-20T15:51:56Z,,41103286
297,False,False,2016-07-18T21:28:35Z,2016-07-18T21:34:06Z,"This release changes the default wallet back to lbryum.

If your LBC balance is in your lbrycrd wallet - you can either run LBRY using the lbrycrd wallet or you can transfer your balance to the lbryum wallet.

Talk to us on https://lbry.slack.com/ if you need some help.
",41103286
298,False,False,2016-07-17T19:10:11Z,2016-07-17T19:16:55Z,"# Don't install this release!

The lbryum servers are functioning again and a new release will be cut soon
that sets lbryum as the default wallet.

This release reverts the default wallet back to lbrycrd
",41103286
299,False,False,2016-07-12T21:30:58Z,2016-07-12T21:31:40Z,"Now with lbryum!
",41103286
300,False,False,2016-07-07T02:48:38Z,2016-07-07T02:49:09Z,,41103286
301,False,False,2016-07-06T19:57:00Z,2016-07-06T22:27:10Z,,41103286
302,False,False,2016-07-05T00:47:43Z,2016-07-05T00:49:31Z,"make lbrycrddpath.conf if it doesnt exist, point to binary in app
make download directory if it doesn't exist, if the directory can't be made default to home
",41103286
303,False,False,2016-07-04T21:51:29Z,2016-07-04T22:01:15Z,,41103286
304,False,False,2016-07-04T20:46:27Z,2016-07-04T20:58:16Z,,41103286
305,False,False,2016-07-04T12:41:44Z,2016-07-04T12:44:45Z,"supports real blockchain via lbrycrd wallet, lbryum soon to come!
",41103286
306,False,False,2016-06-07T08:55:23Z,2016-06-07T09:01:07Z,,41103286
307,False,False,2016-05-06T22:06:46Z,2016-05-17T00:31:42Z,"-include lbry uri, claim txid, and current claim value in lbry_file

-lbryum 2.6.0.4 returns what’s needed to write claim data to sqlite, fix lbrynet to make sure it doesnt store duplicates

-add waiting_for_credits to loading screen to force user to not try to download something before credits show up, a common source of timeout errors

-get --wallet=lbrycrd working, lbrycrdd should be run separately, it is not bundled in the app. added set_miner and get_miner_status commands
",41103286
308,False,False,2016-05-06T22:06:46Z,2016-05-06T22:17:21Z,"Now with video streaming :video_camera: 
",41103286
309,False,False,2016-04-18T03:05:55Z,2016-04-22T00:55:09Z,"v0.2.2
",41103286
310,False,False,2015-12-31T04:56:26Z,2015-12-31T16:17:41Z,"Contains lbrycrdd and lbrycrd-cli binaries, as well as one for lbrynet-gui. This app (in the Applications folder) is where lbrynet looks for the binaries on OS X.
",41103286
311,False,False,2015-08-20T15:27:15Z,2015-08-23T18:31:47Z,"A proof-of-concept version of LBRY designed to show what is possible via the LBRY protocol.
",41103286
312,False,False,2019-11-13T02:28:54Z,2019-11-13T03:29:45Z,"This is a minor release of `btcd` that fixes some bugs in the p2p sub-system, and also updates relevant parts of `btcjson` to be compatible with `bitciond 0.19`. 

# Verifying the Release

In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import the keys that have signed this release if you haven't done so already: 

```
curl https://keybase.io/roasbeef/pgp_keys.asc | gpg --import
```

Once you have the required PGP keys, you can verify the release (assuming `manifest-v0.20.1-beta.txt` and `manifest-v0.20.1-beta.txt.sig` are in the current directory) with:

```
gpg --verify manifest-v0.20.1-beta.txt.sig
```

You should see the following if the verification was successful:

```
gpg: assuming signed data in 'manifest-v0.20.1-beta.txt'
gpg: Signature made Tue Nov 12 19:08:07 2019 PST
gpg:                using RSA key 4AB7F8DA6FAEBB3B70B1F903BC13F65E2DC84465
gpg: Good signature from ""Olaoluwa Osuntokun <laolu32@gmail.com>"" [ultimate]
```

That will verify the signature of the manifest file, which ensures integrity and authenticity of the archive you've downloaded locally containing the binaries. Next, depending on your operating system, you should then re-compute the `sha256` hash of the archive with `shasum -a 256 <filename>`, compare it with the corresponding one in the manifest file, and ensure they match *exactly*.

## Verifying the Release Binaries

As of this release, our release binaries are **fully reproducible** thanks to `go1.13`! Third parties are now able to verify that the release binaries were produced properly without having to trust the release manager(s). See our [reproducible builds guide](https://github.com/btcsuite/btcd/tree/master/release) for how this can be achieved. The release binaries are compiled with `go1.13.1`, which is required by verifiers to arrive at the same ones. 

Finally, you can also verify the _tag_ itself with the following command:
```
git verify-tag v0.20.1-beta
```

You should see something along the lines of this in the case of a valid tag:
```
gpg: Signature made Tue Nov 12 18:29:03 2019 PST
gpg:                using RSA key 4AB7F8DA6FAEBB3B70B1F903BC13F65E2DC84465
gpg: Good signature from ""Olaoluwa Osuntokun <laolu32@gmail.com>"" [ultimate]
```

# Building the Contained Release 

Users are able to rebuild the target release themselves without having to fetch any of the dependencies. In order to do so, assuming that `vendor.tar.gz` and `btcd-source-v0.20.1-beta.tar.gz` are in the current directory, follow these steps:

```
tar -xvzf vendor.tar.gz
tar -xvzf btcd-source-v0.20.1.tar.gz
GO111MODULE=on go install -v -mod=vendor 
GO111MODULE=on go install -v -mod=vendor ./cmd/btcctl
```

The `-mod=vendor` flag tells the `go build` command that it doesn't need to fetch the dependencies, and instead, they're all enclosed in the local vendor directory. 

Additionally, it's also possible to use the enclosed `release.sh` script to bundle a release for a _specific_ system like so: 

```
BTCBUILDSYS=""linux-arm64 darwin-amd64"" ./build/release/release.sh
```


# Release Notes 

The `btcjson` package as been [updated to be compatible with `bitcoind v0.19.0` as required by the `lnd` project](https://github.com/btcsuite/btcd/pull/1484). 

A [race condition in the server related to the set of known addresses for a peer has been eliminated](https://github.com/btcsuite/btcd/pull/1488). 

[We've cleaned up some logic that previously caused log spam due to the stricter version handshake we now enforce](https://github.com/btcsuite/btcd/pull/1485). 

## Changelog

The full list of changes since `v0.20.0-beta` can be found here:

* https://github.com/btcsuite/btcd/compare/v0.20.0-beta..v0.20.1-beta

# Contributors (Alphabetical Order)

Olaoluwa Osuntokun
Wilmer Paulino
Eugene Zeigel

",11931032
313,False,False,2019-10-15T08:13:42Z,2019-10-15T08:24:45Z,"This marks btcd's first release in nearly 5 years! Long live `btcd` ✊!!! One major change with this release, and all releases going forward for the foreseeable future is that Olaoluwa Osuntokun (roasbeef) is now the primary maintainer of `btcd`. As a result, rather than the existing conformal keys, [roasbeef's key](https://keys.openpgp.org/search?q=laolu32%40gmail.com) will be used in place for signing all git tags and releases. Going forward, our goal is to adopt a regular 3-month (or so) release cycle as needed. 

# Verifying the Release

In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import the keys that have signed this release if you haven't done so already: 

```
curl https://keybase.io/roasbeef/pgp_keys.asc | gpg --import
```

Once you have the required PGP keys, you can verify the release (assuming `manifest-v0.20.0-beta.txt` and `manifest-v0.20.0-beta.txt.sig` are in the current directory) with:

```
gpg --verify manifest-v0.20.0-beta.txt.sig
```

You should see the following if the verification was successful:

```
gpg: assuming signed data in 'manifest-v0.20.0-beta.txt'
gpg: Signature made Tue Oct 22 15:51:12 2019 PDT
gpg:                using RSA key 4AB7F8DA6FAEBB3B70B1F903BC13F65E2DC84465
gpg: Good signature from ""Olaoluwa Osuntokun <laolu32@gmail.com>"" [ultimate]
```

That will verify the signature of the manifest file, which ensures integrity and authenticity of the archive you've downloaded locally containing the binaries. Next, depending on your operating system, you should then re-compute the `sha256` hash of the archive with `shasum -a 256 <filename>`, compare it with the corresponding one in the manifest file, and ensure they match *exactly*.

## Verifying the Release Binaries

As of this release, our release binaries are **fully reproducible** thanks to `go1.13`! Third parties are now able to verify that the release binaries were produced properly without having to trust the release manager(s). See our [reproducible builds guide](https://github.com/btcsuite/btcd/tree/master/release) for how this can be achieved. The release binaries are compiled with `go1.13.1`, which is required by verifiers to arrive at the same ones. 

Finally, you can also verify the _tag_ itself with the following command:
```
git verify-tag v0.20.0-beta
```

You should see something along the lines of this in the case of a valid tag:
```
gpg: Signature made Tue 15 Oct 2019 08:13:46 AM UTC using RSA key ID 2DC84465
gpg: Good signature from ""Olaoluwa Osuntokun <laolu32@gmail.com>""
Primary key fingerprint: 9769 140D 255C 759B 1EB7  7B46 A963 87A5 7CAA E94D
     Subkey fingerprint: 4AB7 F8DA 6FAE BB3B 70B1  F903 BC13 F65E 2DC8 4465
```

# Building the Contained Release 

Users are able to rebuild the target release themselves without having to fetch any of the dependencies. In order to do so, assuming that `vendor.tar.gz` and `btcd-source-v0.20.0-beta.tar.gz` are in the current directory, follow these steps:

```
tar -xvzf vendor.tar.gz
tar -xvzf btcd-source-v0.20.0.tar.gz
GO111MODULE=on go install -v -mod=vendor 
GO111MODULE=on go install -v -mod=vendor ./cmd/btcctl
```

The `-mod=vendor` flag tells the `go build` command that it doesn't need to fetch the dependencies, and instead, they're all enclosed in the local vendor directory. 

Additionally, it's also possible to use the enclosed `release.sh` script to bundle a release for a _specific_ system like so: 

```
BTCBUILDSYS=""linux-arm64 darwin-amd64"" ./build/release/release.sh
```


# Release Notes 

Rather than summarize 5 years of development in the release notes below, we've opted to mention only the most major features. Future releases will return to our prior method of enumerating each change in relevant areas of the codebase/system. 

## Changelog

The full list of changes since `v0.12.0-beta` can be found here:

* https://github.com/btcsuite/btcd/compare/BTCD_0_12_0_BETA...v0.20.0-beta

# Contributors (Alphabetical Order)

Albert Puigsech Galicia 
Alex Akselrod 
Alex Bosworth
Alex Manuskin 
Alok Menghrajani
Anatoli Babenia 
Andy Weidenbaum 
Calvin McAnarney
Chris Martin 
Chris Pacia 
Chris Shepherd
Conner Fromknecht 
Craig Sturdy 
Cédric Félizard 
Daniel Krawisz 
Daniel Martí 
Daniel McNally 
Dario Nieuwenhuis 
Dave Collins 
David Hill 
David de Kloet 
GeertJohan 
Grace Noah 
Gregory Trubetskoy 
Hector Jusforgues 
Iskander (Alex) Sharipov 
Janus Troelsen
Jasper
Javed Khan 
Jeremiah Goyette 
Jim Posen
Jimmy Song 
Johan T. Halseth
John C. Vernaleo 
Jonathan Gillham
Josh Rickmar 
Jon Underwood
Jonathan Zeppettini 
Jouke Hofman
Julian Meyer 
Kai 
Kamil Slowikowski 
Kefkius
Leonardo Lazzaro
Marco Peereboom 
Marko Bencun 
Mawueli Kofi Adzoe 
Michail Kargakis 
Mitchell Paull 
Nathan Bass 
Nicola 'tekNico' Larosa
Olaoluwa Osuntokun 
Pedro Martelletto 
Ricardo Velhote 
Roei Erez 
Ruben de Vries
Rune T. Aune
Sad Pencil 
Shuai Qi 
Steven Roose 
Tadge Dryja
Tibor Bősze 
Tomás Senart 
Tzu-Jung Lee
Vadym Popov 
Waldir Pimenta 
Wilmer Paulino
benma 
danda
dskloet 
esemplastic 
jadeblaquiere
nakagawa 
preminem 
qshuai
",11931032
314,False,True,2015-11-21T01:35:09Z,2015-11-21T17:33:25Z,"**Protocol and network related changes:**
- Add a new checkpoint at block height 382320 (#555)
- Implement [BIP0065](https://github.com/bitcoin/bips/blob/master/bip-0065.mediawiki) which includes support for version 4 blocks, a new consensus opcode (`OP_CHECKLOCKTIMEVERIFY`) that enforces transaction lock times, and a double-threshold switchover mechanism (#535, #459, #455)
- Implement [BIP0111](https://github.com/bitcoin/bips/blob/master/bip-0111.mediawiki) which provides a new bloom filter service flag and hence provides support for protocol version 70011 (#499)
- Add a new parameter `--nopeerbloomfilters` to allow disabling bloom filter support (#499)
- Reject non-canonically encoded variable length integers (#507)
- Add mainnet peer discovery DNS seed (`seed.bitcoin.jonasschnelli.ch`) (#496)
- Correct reconnect handling for persistent peers (#463, #464)
- Ignore requests for block headers if not fully synced (#444)
- Add CLI support for specifying the zone id on IPv6 addresses (#538)
- Fix a couple of issue where the initial block sync could stall (#518, #229, #486)
- Fix an issue which prevented the `--onion` option from working as intended (#446)

**Transaction relay (memory pool) changes:**
- Require transactions to only include signatures encoded with the canonical 'low-s' encoding (#512)
- Add a new parameter `--minrelaytxfee` to allow the minimum transaction fee in `BTC/kB` to be overridden (#520)
- Retain memory pool transactions when they redeem another one that is removed when a block is accepted (#539)
- Do not send reject messages for a transaction if it is valid but causes an orphan transaction which depends on it to be determined as invalid (#546)
- Refrain from attempting to add orphans to the memory pool multiple times when the transaction they redeem is added (#551)
- Modify minimum transaction fee calculations to scale based on bytes instead of full kilobyte boundaries (#521, #537)

**Implement signature cache:**
- Provides a limited memory cache of validated signatures which is a huge optimization when verifying blocks for transactions that are already in the memory pool (#506)
- Add a new parameter `--sigcachemaxsize` which allows the size of the new cache to be manually changed if desired (#506)

**Mining support changes:**
- Notify `getblocktemplate` long polling clients when a block is pushed via `submitblock` (#488)
- Speed up `getblocktemplate` by making use of the new signature cache (#506)

**RPC changes:**
- Implement `getmempoolinfo` command (#453)
- Implement `getblockheader` command (#461)
- Modify `createrawtransaction` command to accept a new optional parameter `locktime` (#529)
- Modify `listunspent` result to include the `spendable` field (#440)
- Modify `getinfo` command to include `errors` field (#511)
- Add timestamps to `blockconnected` and `blockdisconnected` notifications (#450)
- Several modifications to `searchrawtranscations`:
  - Accept a new optional parameter `vinextra` which causes the results to include information about the outputs referenced by a transaction inputs (#485, #487)
  - Skip entries in the mempool too (#495)
  - Accept a new optional parameter `reverse` to return the results in reverse order (most recent to oldest) (#497)
  - Accept a new optional parameter `filteraddrs` which causes the results to only include inputs and outputs which involve the provided addresses (#516)
- Change the notification order to notify clients about mined transactions (`recvtx`, `redeemingtx`) before the `blockconnected` notification (#449)
- Update `verifymessage` RPC to use the standard algorithm so it is compatible with other implementations (#515)
- Improve `ping` statistics by pinging on an interval (#517)

**Websocket changes:**
- Implement `session` command which returns a per-session unique id (#500, #503)

**btcctl utility changes:**
- Add `getmempoolinfo` command (#453)
- Add `getblockheader` command (#461)
- Add `getwalletinfo` command (#471)

**Notable developer-related package changes:**
- Introduce a new `peer` package which acts a common base for creating and concurrently managing bitcoin network peers (#445)
  - Various cleanup of the new `peer` package (#528, #531, #524, #534, #549)
- Blocks heights now consistently use `int32` everywhere (#481)
- The `BlockHeader` type in the `wire` package now provides the `BtcDecode` and `BtcEncode` methods (#467)
- Update `wire` package to recognize [BIP0064](https://github.com/bitcoin/bips/blob/master/bip-0064.mediawiki) (`getutxo`) service bit (#489)
- Export `LockTimeThreshold` constant from `txscript` package (#454)
- Export `MaxDataCarrierSize` constant from `txscript` package (#466)
- Provide new `IsUnspendable` function from the `txscript` package (#478)
- Export variable length string functions from the `wire` package (#514)
- Export DNS Seeds for each network from the chaincfg package (#544)
- Preliminary work towards separating the memory pool into a separate package (#525, #548)

**Misc changes:**
- Various documentation updates (#442, #462, #465, #460, #470, #473, #505, #530, #545)
- Add installation instructions for gentoo (#542)
- Ensure an error is shown if OS limits can't be set at startup (#498)
- Tighten the standardness checks for multisig scripts (#526)
- Test coverage improvement (#468, #494, #527, #543, #550)
- Several optimizations (#457, #474, #475, #476, #508, #509)
- Minor code cleanup and refactoring (#472, #479, #482, #519, #540)

**Contributors (alphabetical order):**
- Ben Echols
- Bruno Clermont
- danda
- Daniel Krawisz
- Dario Nieuwenhuis
- Dave Collins
- David Hill
- Javed Khan
- Jonathan Gillham
- Joseph Becher
- Josh Rickmar
- Justus Ranvier
- Mawuli Adzoe
- Olaoluwa Osuntokun
- Rune T. Aune

**MSI Checksums:**

``` bash
SHA256(btcd_standalone_0.12.0-beta_x64.msi)= 024274804600e0a37ba5e7ac5abc9fdfe91b071e92c9251f38f01bec6785fb77
SHA256(btcd_standalone_0.12.0-beta_x86.msi)= b122bb7cd29e0e5e32ada279a12eeef3d44d58f3bb377ea7ce8b1f42ca0bdba3
SHA512(btcd_standalone_0.12.0-beta_x64.msi)= 725266286cb5ba62d435b992353b83aef4a3586e5ee9aeecfcc90b8026225f12c081471d56fb0f02d92ca5d92965eb99429209125b108c47599c8b1b619fb852
SHA512(btcd_standalone_0.12.0-beta_x86.msi)= d2849eef7cce9ec88a9538940c3ebfb08c2ecbf4be88f4029552bac5db2cdc203e31e8a401cf54dab694d4f49dd640bc8bb962cb5d70227bde91d785364823cb
```
",11931032
315,False,True,2015-05-27T16:07:42Z,2015-05-27T17:20:07Z,"**Protocol and network related changes:**
- Use correct sub-command in reject message for rejected transactions (#436, #437)
- Add a new parameter `--torisolation` which forces new circuits for each connection when using tor (#430)

**Transaction relay (memory pool) changes:**
- Reduce the default number max number of allowed orphan transactions to 1000 (#419)
- Add a new parameter `--maxorphantx` which allows the maximum number of orphan transactions stored in the mempool to be specified (#419)

**RPC changes:**
- Modify `listtransactions` result to include the `involveswatchonly` and `vout` fields (#427)
- Update `getrawtransaction` result to omit the `confirmations` field when it is 0 (#420, #422)
- Update `signrawtransaction` result to include errors (#423)

**btcctl utility changes:**
- Add `gettxoutproof` command (#428)
- Add `verifytxoutproof` command (#428)

**Notable developer-related package changes:**
- The `btcec` package now provides the ability to perform ECDH encryption and decryption (#375)
- The block and header validation in the `blockchain` package has been split to help pave the way toward concurrent downloads (#386)

**Misc changes:**
- Minor peer optimization (#433)

**Contributors (alphabetical order):**
- Dave Collins
- David Hill
- Federico Bond
- Ishbir Singh
- Josh Rickmar

**MSI Checksums:**

``` bash
SHA256(btcd_standalone_0.11.1-beta_x64.msi)= 14d5a2aaa3cbbcd37a706c9cd8918093d93f9cc826f0eed3af213c673089f126
SHA256(btcd_standalone_0.11.1-beta_x86.msi)= eb6e558a81e406d4497de1ad5ca94b12d57be62745fdcc1669b254716f5aa1c0
SHA512(btcd_standalone_0.11.1-beta_x64.msi)= 2519b2c8e2990e9cdc4ae36f236ed7544848890fd4f8b0ff4e1a7596099806feb39aa47c4e10c231c51f115daf12e4484a6a85958877589e792bb95dd2519781
SHA512(btcd_standalone_0.11.1-beta_x86.msi)= 74d52f60feef618055556a779b38f0773df8e997e1c691db6559dea28f5e0784f8f362cf3f37dc7cd91f22cc7ae9e17940955da8b81d903910e06d3f9ae8523c
```
",11931032
316,False,True,2015-05-06T14:59:18Z,2015-05-06T15:09:55Z,"**Protocol and network related changes:**
- **IMPORTANT: Update is required due to the following point**
- Correct a few corner cases in script handling which could result in forking from the network on non-standard transactions (#425)
- Add a new checkpoint at block height 352940 (#418)
- Optimized script execution (#395, #400, #404, #409)
- Fix a case that could lead stalled syncs (#138, #296)

**Network address manager changes:**
- Implement eclipse attack countermeasures as proposed in http://cs-people.bu.edu/heilman/eclipse (#370, #373)

**Optional address indexing changes:**
- Fix an issue where a reorg could cause an orderly shutdown when the address index is active (#340, #357)

**Transaction relay (memory pool) changes:**
- Increase maximum allowed space for nulldata transactions to 80 bytes (#331)
- Implement support for the following rules specified by [BIP0062](https://github.com/bitcoin/bips/blob/master/bip-0062.mediawiki):
  - The S value in ECDSA signature must be at most half the curve order (rule 5) (#349)
  - Script execution must result in a single non-zero value on the stack (rule 6) (#347)
  - NOTE: All 7 rules of [BIP0062](https://github.com/bitcoin/bips/blob/master/bip-0062.mediawiki) are now implemented
- Use network adjusted time in finalized transaction checks to improve consistency across nodes (#332)
- Process orphan transactions on acceptance of new transactions (#345)

**RPC changes:**
- Add support for a limited RPC user which is not allowed admin level operations on the server (#363)
- Implement `node` command for more unified control over connected peers (#79, #341)
- Implement `generate` command for regtest/simnet to support deterministically mining a specified number of blocks
  (#362, #407)
- Update `searchrawtransactions` to return the matching transactions in order (#354)
- Correct an issue with `searchrawtransactions` where it could return duplicates (#346, #354)
- Increase precision of `difficulty` field in `getblock` result to 8 (#414, #415)
- Omit `nextblockhash` field from `getblock` result when it is empty (#416, #417)
- Add `id` and `timeoffset` fields to `getpeerinfo` result (#335)

**Websocket changes:**
- Implement new commands `stopnotifyspent`, `stopnotifyreceived`, `stopnotifyblocks`, and `stopnotifynewtransactions` to allow clients to cancel notification registrations (#122, #342)

**btcctl utility changes:**
- A single dash can now be used as an argument to cause that argument to be read from stdin (#348)
- Add `generate` command

**Notable developer-related package changes:**
- The new version 2 `btcjson` package has now replaced the deprecated version 1 package (#368)
- The `btcec` package now performs all signing using RFC6979 deterministic signatures (#358, #360)
- The `txscript` package has been significantly cleaned up and had a few API changes (#387, #388, #389, #390, #391, #392, #393, #395, #396, #400, #403, #404, #405, #406, #408, #409, #410, #412)
- A new `PkScriptLocs` function has been added to the `wire` package `MsgTx` type which provides callers that deal with scripts optimization opportunities (#343)

**Misc changes:**
- Minor `wire` hashing optimizations (#366, #367)
- Other minor internal optimizations

**Contributors (alphabetical order):**
- Alex Akselrod
- Arne Brutschy
- Chris Jepson
- Daniel Krawisz
- Dave Collins
- David Hill
- Jimmy Song
- Jonas Nick
- Josh Rickmar
- Olaoluwa Osuntokun
- Oleg Andreev

**MSI Checksums:**

``` bash
SHA256(btcd_standalone_0.11.0-beta_x64.msi)= d2023ce1243b52afc12a6c84f8d176a7b5d699ef551aafcdd248abd31b3c635d
SHA256(btcd_standalone_0.11.0-beta_x86.msi)= 22e63783cb44e909190ff91cef05c7aa4267c0d9d758aaf459bd77ef3053b810
SHA512(btcd_standalone_0.11.0-beta_x64.msi)= 8ed8e7cf65c70b5981ef58f6ff3b63beab611c9cd3b6dac70e6cb940b3788b44dcd530251de2be4410371adab224e17386aefe38bd4b031dce28ecbe2b26ea78
SHA512(btcd_standalone_0.11.0-beta_x86.msi)= 878aa38fb29ea809ab341a554ad9ab646cc7b4e260e7d09fa7eb1c10af2bb60ed23eca8d6ae9ff0f61f8ea0a54ed143523069a0b9786268482284b9537ef0307
```
",11931032
317,False,True,2015-03-02T02:18:34Z,2015-03-02T14:08:32Z,"**Protocol and network related changes:**
- Add a new checkpoint at block height 343185
- Implement BIP066 which includes support for version 3 blocks, a new consensus rule which prevents non-DER encoded signatures, and a double-threshold switchover mechanism
- Rather than announcing all known addresses on getaddr requests which can possibly result in multiple messages, randomize the results and limit them to the max allowed by a single message (1000 addresses)
- Add more reserved IP spaces to the address manager

**Transaction relay (memory pool) changes:**
- Make transactions which contain reserved opcodes nonstandard
- No longer accept or relay free and low-fee transactions that have insufficient priority to be mined in the next block
- Implement support for the following rules specified by BIP0062:
  - ECDSA signature must use strict DER encoding (rule 1)
  - The signature script must only contain push operations (rule 2)
  - All push operations must use the smallest possible encoding (rule 3)
  - All stack values interpreted as a number must be encoding using the shortest possible form (rule 4)
  - NOTE: Rule 1 was already enforced, however the entire script now evaluates to false rather than only the signature verification as required by BIP0062
- Allow transactions with nulldata transaction outputs to be treated as standard

**Mining support changes:**
- Modify the getblocktemplate RPC to generate and return block templates for version 3 blocks which are compatible with BIP0066
- Allow getblocktemplate to serve blocks when the current time is less than the minimum allowed time for a generated block template (https://github.com/btcsuite/btcd/issues/209)

**Crypto changes:**
- Optimize scalar multiplication by the base point by using a pre-computed table which results in approximately a 35% speedup (https://github.com/btcsuite/btcec/issues/2)
- Optimize general scalar multiplication by using the secp256k1 endomorphism which results in approximately a 17-20% speedup (https://github.com/btcsuite/btcec/issues/1)
- Optimize general scalar multiplication by using non-adjacent form which results in approximately an additional 8% speedup (https://github.com/btcsuite/btcec/issues/3)

**Implement optional address indexing:**
- Add a new parameter `--addrindex` which will enable the creation of an address index which can be queried to determine all transactions which involve a given address (https://github.com/btcsuite/btcd/issues/190)
- Add a new logging subsystem for address index related operations
- Support new searchrawtransactions RPC (https://github.com/btcsuite/btcd/issues/185)

**RPC changes:**
- Require TLS version 1.2 as the minimum version for all TLS connections
- Provide support for disabling TLS when only listening on localhost (https://github.com/btcsuite/btcd/pull/192)
- Modify help output for all commands to provide much more consistent and detailed information
- Correct case in getrawtransaction which would refuse to serve certain transactions with invalid scripts (https://github.com/btcsuite/btcd/issues/210)
- Correct error handling in the getrawtransaction RPC which could lead to a crash in rare cases (https://github.com/btcsuite/btcd/issues/196)
- Update getinfo RPC to include the appropriate 'timeoffset' calculated from the median network time
- Modify listreceivedbyaddress result type to include txids field so it is compatible
- Add 'iswatchonly' field to validateaddress result
- Add 'startingpriority' and 'currentpriority' fields to getrawmempool (https://github.com/btcsuite/btcd/issues/178)
- Don't omit the 'confirmations' field from getrawtransaction when it is zero

**Websocket changes:**
- Modify the behavior of the rescan command to automatically register for notifications about transactions paying to rescanned addresses or spending outputs from the final rescan utxo set when the rescan is through the best block in the chain

**btcctl utility changes:**
- Make the list of commands available via the -l option rather than dumping the entire list on usage errors
- Alphabetize and categorize the list of commands by chain and wallet
- Make the help option only show the help options instead of also dumping all of the commands
- Make the usage syntax much more consistent and correct a few cases of misnamed fields    (https://github.com/btcsuite/btcd/issues/305)
- Improve usage errors to show the specific parameter number, reason, and error code
- Only show the usage for specific command is shown when a valid command is provided with invalid parameters
- Add support for a SOCK5 proxy
- Modify output for integer fields (such as timestamps) to display normally instead in scientific notation
- Add invalidateblock command
- Add reconsiderblock command
- Add createnewaccount command
- Add renameaccount command
- Add searchrawtransactions command
- Add importaddress command
- Add importpubkey command

**showblock utility changes:**
- Remove utility in favor of the RPC getblock method

**Notable developer-related package changes:**
- Many of the core packages have been relocated into the btcd repository
  (https://github.com/btcsuite/btcd/issues/214)
- A new version of the btcjson package that has been completely redesigned from the ground up based based upon how the project has evolved and lessons learned while using it since it was first written is now available in the btcjson/v2/btcjson directory
  - This will ultimately replace the current version so anyone making use of this package will need to update their code accordingly
- The btcec package now provides better facilities for working directly with its public and private keys without having to mix elements from the ecdsa package
- Update the script builder to ensure all rules specified by BIP0062 are adhered to when creating scripts
- The blockchain package now provides a MedianTimeSource interface and concrete implementation for providing time samples from remote peers and using that data to calculate an offset against the local time

**Misc changes:**
- Fix a slow memory leak due to tickers not being stopped (https://github.com/btcsuite/btcd/issues/189)
- Fix an issue where a mix of orphans and SPV clients could trigger a condition where peers would no longer be served (https://github.com/btcsuite/btcd/issues/231)
- The RPC username and password can now contain symbols which previously conflicted with special symbols used in URLs
- Improve handling of obtaining random nonces to prevent cases where it could error when not enough entropy was available
- Improve handling of home directory creation errors such as in the case of unmounted symlinks (https://github.com/btcsuite/btcd/issues/193)
- Improve the error reporting for rejected transactions to include the inputs which are missing and/or being double spent
- Update sample config file with new options and correct a comment regarding the fact the RPC server only listens on localhost by default (https://github.com/btcsuite/btcd/issues/218)
- Update the continuous integration builds to run several tools which help keep code quality high
- Significant amount of internal code cleanup and improvements
- Other minor internal optimizations

**Code Contributors (alphabetical order):**
Beldur
Ben Holden-Crowther
Dave Collins
David Evans
David Hill
Guilherme Salgado
Javed Khan
Jimmy Song
John C. Vernaleo
Jonathan Gillham
Josh Rickmar
Michael Ford
Michail Kargakis
kac
Olaoluwa Osuntokun
",11931032
318,False,True,2014-09-20T18:02:08Z,2014-09-20T18:20:04Z,"**Protocol and network related changes:**
- Add a new checkpoint at block height 319400
- Add support for BIP0037 bloom filters (https://github.com/conformal/btcd/issues/132)
- Implement BIP0061 reject handling and hence support for protocol version 70002 (https://github.com/conformal/btcd/issues/133)
- Add testnet DNS seeds for peer discovery (testnet-seed.alexykot.me and testnet-seed.bitcoin.schildbach.de)
- Add mainnet DNS seed for peer discovery (seeds.bitcoin.open-nodes.org)
- Make multisig transactions with non-null dummy data nonstandard (https://github.com/conformal/btcd/issues/131)
- Make transactions with an excessive number of signature operations nonstandard
- Perform initial DNS lookups concurrently which allows connections more quickly
- Improve the address manager to significantly reduce memory usage and add tests
- Remove orphan transactions when they appear in a mined block (https://github.com/conformal/btcd/issues/166)
- Apply incremental back off on connection retries for persistent peers that give invalid replies to mirror the logic used for failed connections (https://github.com/conformal/btcd/issues/103)
- Correct rate-limiting of free and low-fee transactions

**Mining support changes:**
- Implement getblocktemplate RPC with the following support: (https://github.com/conformal/btcd/issues/124)
  - BIP0022 Non-Optional Sections
  - BIP0022 Long Polling
  - BIP0023 Basic Pool Extensions
  - BIP0023 Mutation coinbase/append
  - BIP0023 Mutations time, time/increment, and time/decrement
  - BIP0023 Mutation transactions/add
  - BIP0023 Mutations prevblock, coinbase, and generation
  - BIP0023 Block Proposals
- Implement built-in concurrent CPU miner (https://github.com/conformal/btcd/issues/137)
  - **NOTE: CPU mining on mainnet is pointless as the difficulty is far too high.  This has been provided for testing purposes such as for the new simulation test network**
  - Add --generate flag to enable CPU mining
  - Deprecate the --getworkkey flag in favor of --miningaddr which specifies which addresses generated blocks will choose from to pay the subsidy to

**RPC changes:**
- Implement gettxout command (https://github.com/conformal/btcd/issues/141)
- Implement validateaddress command
- Implement verifymessage command
- Mark getunconfirmedbalance RPC as wallet-only
- Mark getwalletinfo RPC as wallet-only
- Update getgenerate, setgenerate, gethashespersec, and getmininginfo to return the appropriate information about new CPU mining status
- Modify getpeerinfo pingtime and pingwait field types to float64 so they are compatible
- Improve disconnect handling for normal HTTP clients
- Make error code returns for invalid hex more consistent

**Websocket changes:**
- Switch to a new more efficient websocket package (https://github.com/conformal/btcd/issues/134)
- Add rescanfinished notification
- Modify the rescanprogress notification to include block hash as well as height (https://github.com/conformal/btcd/issues/151)

**btcctl utility changes:**
- Accept --simnet flag which automatically selects the appropriate port and TLS certificates needed to communicate with btcd and btcwallet on the simulation test network
- Fix createrawtransaction command to send amounts denominated in BTC
- Add estimatefee command
- Add estimatepriority command
- Add getmininginfo command
- Add getnetworkinfo command
- Add gettxout command
- Add lockunspent command
- Add signrawtransaction command

**addblock utility changes:**
- Accept --simnet flag which automatically selects the appropriate port and TLS certificates needed to communicate with btcd and btcwallet on the simulation test network

**Notable developer-related package changes:**
- Provide a new bloom package in btcutil which allows creating and working with BIP0037 bloom filters
- Provide a new hdkeychain package in btcutil which allows working with BIP0032 hierarchical deterministic key chains
- Introduce a new btcnet package which houses network parameters
- Provide new simnet network (--simnet) which is useful for private simulation testing
- Enforce low S values in serialized signatures as detailed in BIP0062
- Return errors from all methods on the btcdb.Db interface (https://github.com/conformal/btcdb/issues/5)
- Allow behavior flags to alter btcchain.ProcessBlock (https://github.com/conformal/btcchain/issues/5)
- Provide a new SerializeSize API for blocks (https://github.com/conformal/btcwire/issues/19)
- Several of the core packages now work with Google App Engine

**Misc changes:**
- Correct an issue where the database could corrupt under certain  circumstances which would require a new chain download
- Slightly optimize deserialization
- Use the correct IP block for he.net
- Fix an issue where it was possible the block manager could hang on shutdown
- Update sample config file so the comments are on a separate line rather than the end of a line so they are not interpreted as settings (https://github.com/conformal/btcd/issues/135)
- Correct an issue where getdata requests were not being properly throttled which could lead to larger than necessary memory usage
- Always show help when given the help flag even when the config file contains invalid entries
- General code cleanup and minor optimizations

**Code Contributors (alphabetical order):**

Dale Rahn
Dave Collins
David Hill
Geert Johan
Glenn Lewis
Guilherme Salgado
Javed Khan
John C. Vernaleo
Jonathan Gillham
Josh Rickmar
Marcell Ortutay
Marco Peereboom
Michalis Kargakis
Nicola Larosa
Olaoluwa Osuntokun
Owain G. Ainsworth
Tomás Senart
Yurii Rashkovskii
",11931032
319,False,True,2014-05-25T20:53:30Z,2014-05-25T21:49:21Z,"- Btcd is now Beta (https://github.com/conformal/btcd/issues/130)
- Add a new checkpoint at block height 300255

**Protocol and network related changes:**
- Lower the minimum transaction relay fee to 1000 satoshi to match recent reference client changes (https://github.com/conformal/btcd/issues/100)
- Raise the maximum signature script size to support standard 15-of-15 multi-signature pay-to-sript-hash transactions with compressed pubkeys to remain compatible with the reference client (https://github.com/conformal/btcd/issues/128)
- Reduce max bytes allowed for a standard nulldata transaction to 40 for compatibility with the reference client
- Introduce a new btcnet package which houses all of the network params for each network (mainnet, testnet3, regtest) to ultimately enable easier addition and tweaking of networks without needing to change several packages
- Fix several script discrepancies found by reference client test data
- Add new DNS seed for peer discovery (seed.bitnodes.io)
- Reduce the max known inventory cache from 20000 items to 1000 items
- Fix an issue where unknown inventory types could lead to a hung peer
- Implement inventory rebroadcast handler for sendrawtransaction (https://github.com/conformal/btcd/issues/99)
- Update user agent to fully support BIP0014 (https://github.com/conformal/btcwire/issues/10)

**Implement initial mining support:**
- Add a new logging subsystem for mining related operations
- Implement infrastructure for creating block templates
- Provide options to control block template creation settings
- Support the getwork RPC
- Allow address identifiers to apply to more than one network since both testnet3 and the regression test network unfortunately use the same identifier

**RPC changes:**
- Set the content type for HTTP POST RPC connections to application/json (https://github.com/conformal/btcd/issues/121)
- Modified the RPC server startup so it only requires at least one valid listen interface
- Correct an error path where it was possible certain errors would not be returned
- Implement getwork command (https://github.com/conformal/btcd/issues/125)
- Update sendrawtransaction command to reject orphans
- Update sendrawtransaction command to include the reason a transaction was rejected
- Update getinfo command to populate connection count field
- Update getinfo command to include relay fee field (https://github.com/conformal/btcd/issues/107)
- Allow transactions submitted with sendrawtransaction to bypass the rate limiter
- Allow the getcurrentnet and getbestblock extensions to be accessed via HTTP POST in addition to Websockets (https://github.com/conformal/btcd/issues/127)

**Websocket changes:**
- Rework notifications to ensure they are delivered in the order they occur
- Rename notifynewtxs command to notifyreceived (funds received)
- Rename notifyallnewtxs command to notifynewtransactions
- Rename alltx notification to txaccepted
- Rename allverbosetx notification to txacceptedverbose (https://github.com/conformal/btcd/issues/98)
- Add rescan progress notification
- Add recvtx notification
- Add redeemingtx notification
- Modify notifyspent command to accept an array of outpoints (https://github.com/conformal/btcd/issues/123)
- Significantly optimize the rescan command to yield up to a 60x speed increase

**btcctl utility changes:**
- Add createencryptedwallet command
- Add getblockchaininfo command
- Add importwallet commmand
- Add addmultisigaddress commmand
- Add setgenerate command
- Accept --testnet and --wallet flags which automatically select the appropriate port and TLS certificates needed to communicate with btcd and btcwallet (https://github.com/conformal/btcd/issues/112)
- Allow path expansion from config file entries (https://github.com/conformal/btcd/issues/113)
- Minor refactor to simplify handling of options

**addblock utility changes:**
- Improve logging by making it consistent with the logging provided by btcd (https://github.com/conformal/btcd/issues/90)

**Improve several package APIs for developers:**
- Add new amount type for consistently handling monetary values
- Add new coin selector API
- Add new WIF (Wallet Import Format) API
- Add new crypto types for private keys and signatures
- Add new API to sign transactions including script merging and hash types
- Expose function to extract all pushed data from a script (https://github.com/conformal/btcscript/issues/8)

**Misc changes:**
- Optimize address manager shuffling to do 67% less work on average
- Resolve a couple of benign data races found by the race detector (https://github.com/conformal/btcd/issues/101)
- Add IP address to all peer related errors to clarify which peer is the cause (https://github.com/conformal/btcd/issues/102)
- Fix a UPNP case issue that prevented the --upnp option from working with some UPNP servers
- Update documentation in the sample config file regarding debug levels
- Adjust some logging levels to improve debug messages
- Improve the throughput of query messages to the block manager
- Several minor optimizations to reduce GC churn and enhance speed
- Other minor refactoring
- General code cleanup

**Code Contributors (alphabetical order)**
- Chris Jepson
- Dale Rahn
- Dave Collins
- David Hill
- Francis Lam
- Geert Johan
- Javed Khan
- Jimmy Song
- John C. Vernaleo
- Jolan Luff
- Marco Peereboom
- Owain G. Ainsworth
",11931032
320,False,True,2014-02-20T21:52:35Z,2014-02-20T22:01:15Z,"- Fix an issue when parsing scripts which contain a multi-signature script
  which require zero signatures such as testnet block
  000000001881dccfeda317393c261f76d09e399e15e27d280e5368420f442632
  (https://github.com/conformal/btcscript/issues/7)
- Add check to ensure all transactions accepted to mempool only contain
  canonical data pushes (https://github.com/conformal/btcscript/issues/6)
- Fix an issue causing excessive memory consumption
- Significantly rework and improve the websocket notification system:
  - Each client is now independent so slow clients no longer limit the
    speed of other connected clients
  - Potentially long-running operations such as rescans are now run in
    their own handler and rate-limited to one operation at a time without
    preventing simultaneous requests from the same client for the faster
    requests or notifications
  - A couple of scenarios which could cause shutdown to hang have been
    resolved
  - Update notifynewtx notifications to support all address types instead
    of only pay-to-pubkey-hash
  - Provide a --rpcmaxwebsockets option to allow limiting the number of
    concurrent websocket clients
  - Add a new websocket command notifyallnewtxs to request notifications
    (https://github.com/conformal/btcd/issues/86) (thanks @flammit)
- Improve btcctl utility in the following ways:
  - Add getnetworkhashps command
  - Add gettransaction command (wallet-specific)
  - Add signmessage command (wallet-specific)
  - Update getwork command to accept the correct arguments
- Continue cleanup and work on implementing the RPC API:
  - Implement getnettotals command
    (https://github.com/conformal/btcd/issues/84)
  - Implement networkhashps command
    (https://github.com/conformal/btcd/issues/87)
  - Update getpeerinfo to always include syncnode field even when false
  - Remove help addenda for getpeerinfo now that it supports all fields
- Close standard RPC connections on auth failure
- Provide a --rpcmaxclients option to allow limiting the number of
  concurrent RPC clients (https://github.com/conformal/btcd/issues/68)
- Include IP address in RPC auth failure log messages
- Resolve a rather harmless data race found by the race detector
  (https://github.com/conformal/btcd/issues/94)
- Increase block priority size and max standard transaction size to 50k
  and 100k, respectively (https://github.com/conformal/btcd/issues/71)
- Add rate limiting of free transactions to the memory pool to prevent
  penny flooding (https://github.com/conformal/btcd/issues/40)
- Provide a --logdir option (https://github.com/conformal/btcd/issues/95)
- Change the default log file path to include the network
- Add a new ScriptBuilder interface to btcscript to support creation of
  custom scripts (https://github.com/conformal/btcscript/issues/5)
- General code cleanup
",11931032
321,False,True,2014-02-04T23:38:59Z,2014-02-04T23:50:53Z,"- Fix an issue when parsing scripts which contain invalid signatures that
  caused a chain fork on block
  0000000000000001e4241fd0b3469a713f41c5682605451c05d3033288fb2244
- Correct an issue which could lead to an error in removeBlockNode
  (https://github.com/conformal/btcchain/issues/4)
- Improve addblock utility as follows:
  - Check imported blocks against all chain rules and checkpoints
  - Skip blocks which are already known so you can stop and restart the
    import or start the import after you have already downloaded a portion
    of the chain
  - Correct an issue where the utility did not shutdown cleanly after
    processing all blocks
  - Add error on attempt to import orphan blocks
  - Improve error handling and reporting
  - Display statistics after input file has been fully processed
- Rework, optimize, and improve headers-first mode:
  - Resuming the chain sync from any point before the final checkpoint
    will now use headers-first mode
    (https://github.com/conformal/btcd/issues/69)
  - Verify all checkpoints as opposed to only the final one
  - Reduce and bound memory usage
  - Rollback to the last known good point when a header does not match a
    checkpoint
  - Log information about what is happening with headers
- Improve btcctl utility in the following ways:
  - Add getaddednodeinfo command
  - Add getnettotals command
  - Add getblocktemplate command (wallet-specific)
  - Add getwork command (wallet-specific)
  - Add getnewaddress command (wallet-specific)
  - Add walletpassphrasechange command (wallet-specific)
  - Add walletlock command (wallet-specific)
  - Add sendfrom command (wallet-specific)
  - Add sendmany command (wallet-specific)
  - Add settxfee command (wallet-specific)
  - Add listsinceblock command (wallet-specific)
  - Add listaccounts command (wallet-specific)
  - Add keypoolrefill command (wallet-specific)
  - Add getreceivedbyaccount command (wallet-specific)
  - Add getrawchangeaddress command (wallet-specific)
  - Add gettxoutsetinfo command (wallet-specific)
  - Add listaddressgroupings command (wallet-specific)
  - Add listlockunspent command (wallet-specific)
  - Add listlock command (wallet-specific)
  - Add listreceivedbyaccount command (wallet-specific)
  - Add validateaddress command (wallet-specific)
  - Add verifymessage command (wallet-specific)
  - Add sendtoaddress command (wallet-specific)
- Continue cleanup and work on implementing the RPC API:
  - Implement submitblock command
    (https://github.com/conformal/btcd/issues/61)
  - Implement help command
  - Implement ping command
  - Implement getaddednodeinfo command
    (https://github.com/conformal/btcd/issues/78)
  - Implement getinfo command
  - Update getpeerinfo to support bytesrecv and bytessent
    (https://github.com/conformal/btcd/issues/83)
- Improve and correct several RPC server and websocket areas:
  - Change the connection endpoint for websockets from /wallet to /ws
    (https://github.com/conformal/btcd/issues/80)
  - Implement an alternative authentication for websockets so clients
    such as javascript from browsers that don't support setting HTTP
    headers can authenticate (https://github.com/conformal/btcd/issues/77)
  - Add an authentication deadline for RPC connections
    (https://github.com/conformal/btcd/issues/68)
  - Use standard authentication failure responses for RPC connections
  - Make automatically generated certificate more standard so it works
    from clients such as node.js and Firefox
  - Correct some minor issues which could prevent the RPC server from
    shutting down in an orderly fashion
  - Make all websocket notifications require registration
  - Change the data sent over websockets to text since it is JSON-RPC
  - Allow connections that do not have an Origin header set
- Expose and track the number of bytes read and written per peer
  (https://github.com/conformal/btcwire/issues/6)
- Correct an issue with sendrawtransaction when invoked via websockets
  which prevented a minedtx notification from being added
- Rescan operations issued from remote wallets are no stopped when
  the wallet disconnects mid-operation
  (https://github.com/conformal/btcd/issues/66)
- Several optimizations related to fetching block information from the
  database
- General code cleanup
",11931032
322,False,True,2014-01-13T23:50:43Z,2014-01-13T23:53:54Z,"- Optimize initial block download by introducing a new mode which
  downloads the block headers first (up to the final checkpoint)
- Improve peer handling to remove the potential for slow peers to cause
  sluggishness amongst all peers
  (https://github.com/conformal/btcd/issues/63)
- Fix an issue where the initial block sync could stall when the sync peer
  disconnects (https://github.com/conformal/btcd/issues/62)
- Correct an issue where --externalip was doing a DNS lookup on the full
  host:port instead of just the host portion
  (https://github.com/conformal/btcd/issues/38)
- Fix an issue which could lead to a panic on chain switches
  (https://github.com/conformal/btcd/issues/70)
- Improve btcctl utility in the following ways:
  - Show getdifficulty output as floating point to 6 digits of precision
  - Show all JSON object replies formatted as standard JSON
  - Allow btcctl getblock to accept optional params
  - Add getaccount command (wallet-specific)
  - Add getaccountaddress command (wallet-specific)
  - Add sendrawtransaction command
- Continue cleanup and work on implementing RPC API calls
  - Update getrawmempool to support new optional verbose flag
  - Update getrawtransaction to match the reference client
  - Update getblock to support new optional verbose flag
  - Update raw transactions to fully match the reference client including
    support for all transaction types and address types
  - Correct getrawmempool fee field to return BTC instead of Satoshi
  - Correct getpeerinfo service flag to return 8 digit string so it
    matches the reference client
  - Correct verifychain to return a boolean
  - Implement decoderawtransaction command
  - Implement createrawtransaction command
  - Implement decodescript command
  - Implement gethashespersec command
  - Allow RPC handler overrides when invoked via a websocket versus
    legacy connection
- Add new DNS seed for peer discovery
- Display user agent on new valid peer log message
  (https://github.com/conformal/btcd/issues/64)
- Notify wallet when new transactions that pay to registered addresses
  show up in the mempool before being mined into a block
- Support a tor-specific proxy in addition to a normal proxy
  (https://github.com/conformal/btcd/issues/47)
- Remove deprecated sqlite3 imports from utilities
- Remove leftover profile write from addblock utility
- Quite a bit of code cleanup and refactoring to improve maintainability
",11931032
323,False,True,2013-12-12T19:27:33Z,2013-12-12T19:45:54Z,"- Allow listen interfaces to be specified via --listen instead of only the
  port (https://github.com/conformal/btcd/issues/33)
- Allow listen interfaces for the RPC server to be specified via
  --rpclisten instead of only the port
  (https://github.com/conformal/btcd/issues/34)
- Only disable listening when --connect or --proxy are used when no
  --listen interface are specified
  (https://github.com/conformal/btcd/issues/10)
- Add several new standard transaction checks to transaction memory pool:
  - Support nulldata scripts as standard
  - Only allow a max of one nulldata output per transaction
  - Enforce a maximum of 3 public keys in multi-signature transactions
  - The number of signatures in multi-signature transactions must not
    exceed the number of public keys
  - The number of inputs to a signature script must match the expected
    number of inputs for the script type
  - The number of inputs pushed onto the stack by a redeeming signature
    script must match the number of inputs consumed by the referenced
    public key script
- When a block is connected, remove any transactions from the memory pool
  which are now double spends as a result of the newly connected
  transactions
- Don't relay transactions resurrected during a chain switch since
  other peers will also be switching chains and therefore already know
  about them
- Cleanup a few cases where rejected transactions showed as an error
  rather than as a rejected transaction
- Ignore the default configuration file when --regtest (regression test
  mode) is specified
- Implement TLS support for RPC including automatic certificate generation
- Support HTTP authentication headers for web sockets
- Update address manager to recognize and properly work with Tor
  addresses (https://github.com/conformal/btcd/issues/36) and
  (https://github.com/conformal/btcd/issues/37)
- Improve btcctl utility in the following ways:
  - Add the ability to specify a configuration file
  - Add a default entry for the RPC cert to point to the location
    it will likely be in the btcd home directory
  - Implement --version flag
  - Provide a --notls option to support non-TLS configurations
- Fix a couple of minor races found by the Go race detector
- Improve logging
  - Allow logging level to be specified on a per subsystem basis
    (https://github.com/conformal/btcd/issues/48)
  - Allow logging levels to be dynamically changed via RPC
    (https://github.com/conformal/btcd/issues/15)
  - Implement a rolling log file with a max of 10MB per file and a
    rotation size of 3 which results in a max logging size of 30 MB
- Correct a minor issue with the rescanning websocket call
  (https://github.com/conformal/btcd/issues/54)
- Fix a race with pushing address messages that could lead to a panic
  (https://github.com/conformal/btcd/issues/58)
- Improve which external IP address is reported to peers based on which
  interface they are connected through
  (https://github.com/conformal/btcd/issues/35)
- Add --externalip option to allow an external IP address to be specified
  for cases such as tor hidden services or advanced network configurations
  (https://github.com/conformal/btcd/issues/38)
- Add --upnp option to support automatic port mapping via UPnP
  (https://github.com/conformal/btcd/issues/51)
- Update Ctrl+C interrupt handler to properly sync address manager and
  remove the UPnP port mapping (if needed)
- Continue cleanup and work on implementing RPC API calls
  - Add importprivkey (import private key) command to btcctl
  - Update getrawtransaction to provide addresses properly, support
    new verbose param, and match the reference implementation with the
    exception of MULTISIG (thanks @flammit)
  - Update getblock with new verbose flag (thanks @flammit)
  - Add listtransactions command to btcctl
  - Add getbalance command to btcctl
- Add basic support for btcd to run as a native Windows service
  (https://github.com/conformal/btcd/issues/42)
- Package addblock utility with Windows MSIs
- Add support for TravisCI (continuous build integration)
- Cleanup some documentation and usage
- Several other minor bug fixes and general code cleanup
",11931032
324,False,True,2013-11-13T16:53:57Z,2013-11-13T17:05:58Z,"- Significantly improve initial block chain download speed
  (https://github.com/conformal/btcd/issues/20)
- Add a new checkpoint at block height 267300
- Optimize most recently used inventory handling
  (https://github.com/conformal/btcd/issues/21)
- Optimize duplicate transaction input check
  (https://github.com/conformal/btcchain/issues/2)
- Optimize transaction hashing
  (https://github.com/conformal/btcd/issues/25)
- Rework and optimize wallet listener notifications
  (https://github.com/conformal/btcd/issues/22)
- Optimize serialization and deserialization
  (https://github.com/conformal/btcd/issues/27)
- Add support for minimum transaction fee to memory pool acceptance
  (https://github.com/conformal/btcd/issues/29)
- Improve leveldb database performance by removing explicit GC call
- Fix an issue where Ctrl+C was not always finishing orderly database
  shutdown
- Fix an issue in the script handling for OP_CHECKSIG
- Impose max limits on all variable length protocol entries to prevent
  abuse from malicious peers
- Enforce DER signatures for transactions allowed into the memory pool
- Separate the debug profile http server from the RPC server
- Rework of the RPC code to improve performance and make the code cleaner
- The getrawtransaction RPC call now properly checks the memory pool
  before consulting the db (https://github.com/conformal/btcd/issues/26)
- Add support for the following RPC calls: getpeerinfo, getconnectedcount,
  addnode, verifychain
  (https://github.com/conformal/btcd/issues/13)
  (https://github.com/conformal/btcd/issues/17)
- Implement rescan websocket extension to allow wallet rescans
- Use correct paths for application data storage for all supported
  operating systems (https://github.com/conformal/btcd/issues/30)
- Add a default redirect to the http profiling page when accessing the
  http profile server
- Add a new --cpuprofile option which can be used to generate CPU
  profiling data on platforms that support it
- Several other minor performance optimizations
- Other minor bug fixes and general code cleanup
",11931032
325,False,True,2013-10-22T21:46:48Z,2013-10-22T21:54:21Z,"- Add a 32-bit MSI for Windows
- Fix an issue that could cause the download of the block chain to stall (https://github.com/conformal/btcd/issues/12)
- Remove deprecated sqlite as an available database backend
- Close sqlite compile issue as sqlite has now been removed  (https://github.com/conformal/btcd/issues/11)
- Change default RPC ports to 8334 (mainnet) and 18334 (testnet)
- Continue cleanup and work on implementing RPC API calls
- Add support for the following RPC calls: getrawmempool, getbestblockhash, decoderawtransaction, getdifficulty, getconnectioncount, getpeerinfo, and addnode
- Improve the btcctl utility that is used to issue JSON-RPC commands
- Fix an issue preventing btcd from cleanly shutting down with the RPC stop command
- Add a number of database interface tests to ensure backends implement the expected interface
- Expose some additional information from btcscript to be used for identifying ""standard"" transactions
- Add support for plan9 - thanks @mischief (https://github.com/conformal/btcd/pull/19)
- Other minor bug fixes and general code cleanup
",11931032
326,False,True,2013-10-15T21:59:54Z,2013-10-15T22:06:55Z,"- Change default database to leveldb<br />**NOTE:** This does mean you will have to redownload the block chain.  Since we are still in alpha, we didn't feel writing a converter was worth the time as it would take away from more important issues at this stage<br /><br />
- Add a warning if there are multiple block chain databases of different types
- Fix issue with unexpected EOF in leveldb -- https://github.com/conformal/btcd/issues/18
- Fix issue preventing block 21066 on testnet -- https://github.com/conformal/btcchain/issues/1
- Fix issue preventing block 96464 on testnet -- https://github.com/conformal/btcscript/issues/1
- Optimize transaction lookups
- Correct a few cases of list removal that could result in improper cleanup of no longer needed orphans
- Add functionality to increase ulimits on non-Windows platforms
- Add support for mempool command which allows remote peers to query the transaction memory pool via the bitcoin protocol
- Clean up logging a bit
- Add a flag to disable checkpoints for developers
- Add a lot of useful debug logging such as message summaries
- Other minor bug fixes and general code cleanup
",11931032
327,False,True,2013-10-05T07:29:07Z,2013-10-05T07:33:46Z,"- Initial Public Preview
",11931032
328,False,False,2020-03-19T22:50:27Z,2020-03-20T10:19:54Z,,15259244
329,False,False,2019-09-17T19:29:26Z,2019-09-17T19:30:27Z,,15259244
330,False,False,2019-04-13T14:51:25Z,2019-04-13T14:51:54Z,,15259244
331,False,False,2019-02-27T16:58:38Z,2019-02-27T16:59:47Z,"All notable changes to this project will be documented in this file.
See [Conventional Commits](https://conventionalcommits.org) for commit guidelines.

# [8.1.0](https://github.com/nitsujlangston/bitcore/compare/v5.0.0-beta.44...v8.1.0) (2019-02-27)


### Bug Fixes

* do not remove scripts from outputs ([0d9dc85](https://github.com/nitsujlangston/bitcore/commit/0d9dc85))
* failed verification if customData is object ([1848cd5](https://github.com/nitsujlangston/bitcore/commit/1848cd5))
* Fix callback name ([44a45de](https://github.com/nitsujlangston/bitcore/commit/44a45de))
* fix variable typo for paypro. ([6db7923](https://github.com/nitsujlangston/bitcore/commit/6db7923))
* handle outgoing TXs foreign crafted ([869840e](https://github.com/nitsujlangston/bitcore/commit/869840e))
* show message unconfirmed transactions if there is not transaction confirmed yet ([aea2af5](https://github.com/nitsujlangston/bitcore/commit/aea2af5))
* **node:** fix test ([06dee24](https://github.com/nitsujlangston/bitcore/commit/06dee24))
* show tx without input addres. Show type of address for tx out ([fb00366](https://github.com/nitsujlangston/bitcore/commit/fb00366))
* **bitcore-node:** set all indexes to build in the background ([107fe0b](https://github.com/nitsujlangston/bitcore/commit/107fe0b))
* **lib-cash:** match bitcore-lib estimateFee fix ([8650345](https://github.com/nitsujlangston/bitcore/commit/8650345))
* **node:** config and rate limit ([d352b20](https://github.com/nitsujlangston/bitcore/commit/d352b20))
* **node:** config properties could be undefined ([6fd40d0](https://github.com/nitsujlangston/bitcore/commit/6fd40d0))
* **node:** config should use merge, findOneAndUpdate should return new ([8ecd8d6](https://github.com/nitsujlangston/bitcore/commit/8ecd8d6))
* **node:** fix some logging ([da5ede5](https://github.com/nitsujlangston/bitcore/commit/da5ede5))
* **node:** fixing the repair script so we can repair while a node is syncing ([b1b1e17](https://github.com/nitsujlangston/bitcore/commit/b1b1e17))
* **node:** race condition rejects ([d47ffb3](https://github.com/nitsujlangston/bitcore/commit/d47ffb3))
* **node:** remove wallet from websockets ([b1a2d63](https://github.com/nitsujlangston/bitcore/commit/b1a2d63))
* **node:** removing confirmations ([51ccf3f](https://github.com/nitsujlangston/bitcore/commit/51ccf3f))
* **node:** removing limits on wallet address endpoint ([8b1515b](https://github.com/nitsujlangston/bitcore/commit/8b1515b))
* typo - s/Payment/PaymentACK/ ([7b408c3](https://github.com/nitsujlangston/bitcore/commit/7b408c3))
* wrong output value calculation in _buildTx ([2e1cc88](https://github.com/nitsujlangston/bitcore/commit/2e1cc88))
* **node:** removing unneeded properties ([7f2ad9f](https://github.com/nitsujlangston/bitcore/commit/7f2ad9f))
* **node:** resync uses connect ([74df9b8](https://github.com/nitsujlangston/bitcore/commit/74df9b8))
* **node:** stream has a memory leak, use event emitter instead ([d256e5c](https://github.com/nitsujlangston/bitcore/commit/d256e5c))
* **server:** Fix unconfirmed utxo results ([72bf2bb](https://github.com/nitsujlangston/bitcore/commit/72bf2bb))
* **sync:** handle sync node going awol ([372b273](https://github.com/nitsujlangston/bitcore/commit/372b273))


### Features

* **api:** Adds check wallet endpoint ([a606095](https://github.com/nitsujlangston/bitcore/commit/a606095))
* **api:** break balance response into confirmed and unconfirmed components ([894cec5](https://github.com/nitsujlangston/bitcore/commit/894cec5))
* **api:** cache fee estimates that hit rpc ([d752027](https://github.com/nitsujlangston/bitcore/commit/d752027))
* **api:** Rate Limits ([cee765f](https://github.com/nitsujlangston/bitcore/commit/cee765f))
* **config:** expand '~' for BITCORE_CONFIG_PATH ([db5a17e](https://github.com/nitsujlangston/bitcore/commit/db5a17e))
* **gitignore:** untracked vim/mac files ([8f5fb27](https://github.com/nitsujlangston/bitcore/commit/8f5fb27))
* **insight:** begin building out blocks view, related components ([92f0259](https://github.com/nitsujlangston/bitcore/commit/92f0259))
* **insight:** block detail view ([3d50203](https://github.com/nitsujlangston/bitcore/commit/3d50203))
* **insight:** scaffold routing, continue building out blocks view ([afdc409](https://github.com/nitsujlangston/bitcore/commit/afdc409))
* **node:** dependency injection / config ([640310c](https://github.com/nitsujlangston/bitcore/commit/640310c))
* **node:** scaffold search ([0d19ada](https://github.com/nitsujlangston/bitcore/commit/0d19ada))
* **service:** support multiple sync nodes ([66385ce](https://github.com/nitsujlangston/bitcore/commit/66385ce))
* **sync:** prune mempool transactions and coins when conflicting ones come in ([18ffda1](https://github.com/nitsujlangston/bitcore/commit/18ffda1))
* **tests:** Add v8 history testing template ([904cbd4](https://github.com/nitsujlangston/bitcore/commit/904cbd4))


### Performance Improvements

* **api:** stream wallet address import process ([e0333f8](https://github.com/nitsujlangston/bitcore/commit/e0333f8))
* **api:** transaction list performance enhancements ([f2d6ec9](https://github.com/nitsujlangston/bitcore/commit/f2d6ec9))
* **db:** wallet partial indexes ([65e72d4](https://github.com/nitsujlangston/bitcore/commit/65e72d4))
* **sync:** add utxo cache behavior to coin spend ([3dd7521](https://github.com/nitsujlangston/bitcore/commit/3dd7521))
* **sync:** lra cache address encoding of output scripts ([6892f43](https://github.com/nitsujlangston/bitcore/commit/6892f43))
* **wallet api:** improve wallet transaction list performance ([7491e6f](https://github.com/nitsujlangston/bitcore/commit/7491e6f))


### BREAKING CHANGES

* **api:** balance response has changed from `{balance: number}` to `{confirmed: number,
unconfirmed: number}`
* **wallet api:** no longer page based on _id





# [8.0.0](https://github.com/nitsujlangston/bitcore/compare/v5.0.0-beta.44...v8.0.0) (2019-02-27)


### Bug Fixes

* **bitcore-node:** set all indexes to build in the background ([107fe0b](https://github.com/nitsujlangston/bitcore/commit/107fe0b))
* **lib-cash:** match bitcore-lib estimateFee fix ([8650345](https://github.com/nitsujlangston/bitcore/commit/8650345))
* **node:** config and rate limit ([d352b20](https://github.com/nitsujlangston/bitcore/commit/d352b20))
* **node:** config properties could be undefined ([6fd40d0](https://github.com/nitsujlangston/bitcore/commit/6fd40d0))
* **node:** config should use merge, findOneAndUpdate should return new ([8ecd8d6](https://github.com/nitsujlangston/bitcore/commit/8ecd8d6))
* **node:** fix some logging ([da5ede5](https://github.com/nitsujlangston/bitcore/commit/da5ede5))
* **node:** fix test ([06dee24](https://github.com/nitsujlangston/bitcore/commit/06dee24))
* **node:** fixing the repair script so we can repair while a node is syncing ([b1b1e17](https://github.com/nitsujlangston/bitcore/commit/b1b1e17))
* Fix callback name ([44a45de](https://github.com/nitsujlangston/bitcore/commit/44a45de))
* **node:** race condition rejects ([d47ffb3](https://github.com/nitsujlangston/bitcore/commit/d47ffb3))
* **node:** remove wallet from websockets ([b1a2d63](https://github.com/nitsujlangston/bitcore/commit/b1a2d63))
* **node:** removing confirmations ([51ccf3f](https://github.com/nitsujlangston/bitcore/commit/51ccf3f))
* **node:** removing limits on wallet address endpoint ([8b1515b](https://github.com/nitsujlangston/bitcore/commit/8b1515b))
* **node:** removing unneeded properties ([7f2ad9f](https://github.com/nitsujlangston/bitcore/commit/7f2ad9f))
* **node:** resync uses connect ([74df9b8](https://github.com/nitsujlangston/bitcore/commit/74df9b8))
* **node:** stream has a memory leak, use event emitter instead ([d256e5c](https://github.com/nitsujlangston/bitcore/commit/d256e5c))
* **server:** Fix unconfirmed utxo results ([72bf2bb](https://github.com/nitsujlangston/bitcore/commit/72bf2bb))
* **sync:** handle sync node going awol ([372b273](https://github.com/nitsujlangston/bitcore/commit/372b273))


### Features

* **api:** Adds check wallet endpoint ([a606095](https://github.com/nitsujlangston/bitcore/commit/a606095))
* **api:** break balance response into confirmed and unconfirmed components ([894cec5](https://github.com/nitsujlangston/bitcore/commit/894cec5))
* **api:** cache fee estimates that hit rpc ([d752027](https://github.com/nitsujlangston/bitcore/commit/d752027))
* **api:** Rate Limits ([cee765f](https://github.com/nitsujlangston/bitcore/commit/cee765f))
* **config:** expand '~' for BITCORE_CONFIG_PATH ([db5a17e](https://github.com/nitsujlangston/bitcore/commit/db5a17e))
* **gitignore:** untracked vim/mac files ([8f5fb27](https://github.com/nitsujlangston/bitcore/commit/8f5fb27))
* **insight:** begin building out blocks view, related components ([92f0259](https://github.com/nitsujlangston/bitcore/commit/92f0259))
* **insight:** block detail view ([3d50203](https://github.com/nitsujlangston/bitcore/commit/3d50203))
* **insight:** scaffold routing, continue building out blocks view ([afdc409](https://github.com/nitsujlangston/bitcore/commit/afdc409))
* **node:** dependency injection / config ([640310c](https://github.com/nitsujlangston/bitcore/commit/640310c))
* **node:** scaffold search ([0d19ada](https://github.com/nitsujlangston/bitcore/commit/0d19ada))
* **service:** support multiple sync nodes ([66385ce](https://github.com/nitsujlangston/bitcore/commit/66385ce))
* **sync:** prune mempool transactions and coins when conflicting ones come in ([18ffda1](https://github.com/nitsujlangston/bitcore/commit/18ffda1))
* **tests:** Add v8 history testing template ([904cbd4](https://github.com/nitsujlangston/bitcore/commit/904cbd4))


### Performance Improvements

* **api:** stream wallet address import process ([e0333f8](https://github.com/nitsujlangston/bitcore/commit/e0333f8))
* **api:** transaction list performance enhancements ([f2d6ec9](https://github.com/nitsujlangston/bitcore/commit/f2d6ec9))
* **db:** wallet partial indexes ([65e72d4](https://github.com/nitsujlangston/bitcore/commit/65e72d4))
* **sync:** add utxo cache behavior to coin spend ([3dd7521](https://github.com/nitsujlangston/bitcore/commit/3dd7521))
* **sync:** lra cache address encoding of output scripts ([6892f43](https://github.com/nitsujlangston/bitcore/commit/6892f43))
* **wallet api:** improve wallet transaction list performance ([7491e6f](https://github.com/nitsujlangston/bitcore/commit/7491e6f))


### BREAKING CHANGES

* **api:** balance response has changed from `{balance: number}` to `{confirmed: number,
unconfirmed: number}`
* **wallet api:** no longer page based on _id

",15259244
332,False,False,2017-05-17T19:26:14Z,2017-05-17T19:27:16Z,,15259244
333,False,False,2016-06-27T18:23:53Z,2016-06-27T18:31:34Z,"This is a minor release without API changes and if upgrading from 4.0.0 does NOT require a database reindex. It includes an update to bitcoin consensus rules for BIP68, BIP112 and BIP113 with the [bitcoin-0.12.1-bitcore](https://github.com/bitpay/bitcoin/tree/0.12.1-bitcore) release (see https://github.com/bitpay/bitcore-node/pull/457), and fixes for two mempool index related bugs (see https://github.com/bitpay/bitcoin/pull/18).
",15259244
334,False,False,2016-05-27T19:18:22Z,2016-06-20T14:52:19Z,"This is a major release with several API changes and an update to use Bitcoin v0.12.0 and requires a database reindex. Bitcore now starts bitcoind as a child process and communicates via ZMQ/RPC, address indexes are now built and queried from Bitcoin directly using a branch with additional indexing options added, more information is at: https://bitcore.io/bitcoin

Please see https://github.com/bitpay/bitcore-node/blob/f72fe82c6037011220bd7936bf3baa263ce59a00/docs/upgrade.md for more details on upgrading.
",15259244
335,False,False,2016-01-28T20:40:37Z,2016-01-28T20:56:48Z,"This is a major release with only a few breaking API changes in the address service of bitcore-node. This update requires a database reindex, please see https://github.com/bitpay/bitcore-node/blob/master/docs/services/db.md#how-to-reindex for recreating the database if upgrading from a previous version.

Bitcore Node
- Memory optimizations for large queries as well as configurable limits (https://github.com/bitpay/bitcore-node/pull/392)
- Resolves a database bug for intentionally created unspendable p2sh and p2pkh address hash collisions in database indexes (https://github.com/bitpay/bitcore-node/pull/379). 
- Various bug fixes and updates

Insight API
- Block height is included in transaction responses (https://github.com/bitpay/insight-api/pull/434)
- Fixed bug with urlencoded data (https://github.com/bitpay/insight-api/pull/422)
- Various miner info updates

Bitcore Library
- `transaction.fromObject` support for pay-to-public-key previous outputs (https://github.com/bitpay/bitcore-lib/pull/37)
- Bug fix for `signature.isLowS` (https://github.com/bitpay/bitcore-lib/pull/17)
- Support for signing non-p2sh multisig added (https://github.com/bitpay/bitcore-lib/pull/12)
",15259244
336,False,False,2015-11-04T18:03:42Z,2015-11-04T20:26:49Z,"This is a major release with a few breaking API changes to `bitcore-node`, here is a full list:
- Node.js v4.2 LTS is now supported: https://github.com/bitpay/bitcore-node/pull/348
- Significant memory optimizations have been made: https://github.com/bitpay/bitcore-node/pull/352
- Syncing percentages are more accurate: https://github.com/bitpay/insight-api/pull/410
- Insight API now has configurable caching for endpoints: https://github.com/bitpay/insight-api/pull/412
- Bitcore services now have access to an express subapp: https://github.com/bitpay/bitcore-node/pull/355

Breaking API Changes:
- address service `resetMempoolIndex` method has been removed: https://github.com/bitpay/bitcore-node/pull/352
- db service `runAllMempoolIndexes` has been removed: https://github.com/bitpay/bitcore-node/pull/352
",15259244
337,False,False,2015-10-22T15:02:02Z,2015-11-04T20:15:55Z,"This is a major release without any breaking API changes, however there are significant changes to the organization of modules. All of the core library functionality has been moved to [bitcore-lib](https://github.com/bitpay/bitcore-lib), and `bitcore` is now a metapackage that includes `bitcore-lib`, `bitcore-node`, `insight-api` and `insight-ui`. Two new executables, `bitcore` and `bitcored`, can now be installed in your path globally to run a full node and block explorer in two commands:

```
npm install -g bitcore
bitcored
```

For more information please see:
- https://blog.bitpay.com/bitcore-v1
- https://bitcore.io/guides/full-node
",15259244
338,False,False,2015-08-19T15:05:56Z,2015-08-19T15:20:49Z,"This is a minor release and includes a significant API change relating to the standard methods `toJSON/fromJSON`. When updating it's important to note that `toJSON` is now compatible with `JSON.stringify` and will work as expected and calling `JSON.stringify` on any Bitcore object, and `toJSON` called directly will not return a string. The method `fromJSON` has be replaced with `fromObject` and JSON is expected to be parsed prior to instantiating a Bitcore object, see #1312 for the full details.

There have been a number of bug fixes and performance improvements since the v0.12.0 release. Block parsing should be around 30 times faster, including other performance improvements related to recognizing script types in support of [bitcore-node](https://github.com/bitpay/bitcore-node).

Here is a summary of the changes:
- Keys
  - #1317 Restore error when trying to derive a hardened path with HDPublicKey
  - #1268 PrivateKey alternative networks bug fix 
  - #1262 PrivateKey instantiation bug fixes 
  - #1218 PublicKey `toObject` bug with invalid buffer 
- General
  - #1312 `toJSON` compatible with `JSON.stringify` 
  - #1311 `toObject` includes hash for block and transaction 
  - #1279 Optimizations for `BufferReader.readUInt64LEBN` 
  - #1278 Signature `nhashtype` bug fix
  - #1253 BN `fromString` base parameter 
  - #1250 Bug fix for public key compact signatures 
  - #1227 `versionGuard` improvements 
  - #1208 Bug fix with big numbers (BN) >= 2 ^ 52 
  - #1205 Block parsing bug fixes 
- Transaction
  - #1301 Signing for public-key-out utxos
  - #1271 Fee estimation fixes 
  - #1264 `sortOutputs` bug fix 
  - #1248 Fix bug with misleading `getSerializationError` 
  - #1235 `clearOutputs` for payment channel support
  - #1229 Fixes for `getSerializationError` tests 
  - #1226 `getSerializationError` refactoring
  - #1214 Transaction fee consistency check
  - #1213 Fix bug with Transaction `isFullySigned` 
- Script
  - #1298 Performance improvements for `isPublicKeyOut`
  - #1296 Performance improvements for `toAddress` and related
  - #1295 added `toASM` and `fromASM` 
  - #1287 `CHECKLOCKTIMEVERIFY` was added 
  - #1284 `hasDefinedHashtype` bug fix 
  - #1276 `getSignatureOperationsCount` was added 
  - #1239 `getData` bug fixes with empty OP_RETURN 
  - #1231 `toObject` includes hex for handling invalid scripts 
  - #1216 Invalid script buffer handling bug fix 
  - #1207 Bug fix with recognizing p2sh inputs 

Thanks to all of the contributors: @brandonrobertz, @braydonf, @carnesen, @dskloet, @eordano, @fanatid, @greggzigler, @isocolsky, @maraoz, @matiu, @mpolci, @mruddy and @pnagurny
",15259244
339,False,False,2015-04-29T15:17:51Z,2015-04-29T16:07:23Z,"Minor release with some API changes.
- Add `inputAmount` and `outputAmount` members to `Transaction`
- Increase coverage for Input and Output, and fix some bugs
- Add `shuffleOutputs` function to `Transaction` to randomize outputs for privacy.
- Refactor Address<->Script relation:
  - Adds `Address.payingTo(script)`, which returns a p2sh address paying to that script
  - `Address.fromScript` now works for p2sh in, p2sh out, p2pkh in, and p2pkh out, and returns the Address that can be found inside the script.
  - 100% coverage on Address
  - Fix bug in `Script.isScriptHashIn`
- Lazy loading for xpubkey in HDPrivateKey, increases performance.
- Network Fixes to better support alternative networks.
- Fix bug in `Script.isPublicKeyHashOut`
- Allow addresses to have surrounding whitespace in validation (easier UI handling of addresses)
- Increase `Script` test coverage.
- Sighash: remove dead code branch
- Fix Block#toObject API 

Thanks to @carnesen, @fanatid, @dcousens for your contributions!
",15259244
340,False,False,2015-02-25T15:44:54Z,2015-02-25T17:43:50Z,"Minor release.
- Added `MerkleBlock` model.
- Added team's pgp public keys to README for signed releases verification.
- Fix bug on hdprivate key generation.
- `Transaction`: Better granularity on `serialize()` checks, added `Transaction#getSerializationError`.
- `Transaction`: Add check for output amount > input amount.
- `Transaction`: Update dust amount from 5430 to 546 (See: https://github.com/bitcoin/bitcoin/commit/6a4c196dd64da2fd33dc7ae77a8cdd3e4cf0eff1).
- Documentation fixes.

Special thanks to @throughnothing, @dskloet, and @micro-machine 
",15259244
341,False,False,2015-02-18T18:14:33Z,2015-02-18T18:39:47Z,"Weekly maintenance release.
- New examples section on README: https://github.com/bitpay/bitcore#examples
- Various improvements to `bitcore-p2p`
- Transaction: Add check for small fees
- Transaction: Check that threshold is less than amount of signatures in multisig transactions
- Script: Update max length for standard opreturn to 80
- Minor code refactors
- Releases are now PGP signed by one of the main contributors (see bitcore.min.js.sig and bitcore.js.sig in https://github.com/bitpay/bitcore/commit/2670cd1ac5ec1742aae0599e1583c063415959ff)

Thanks @thofmann, @elichai, and @throughnothing for your contributions.
",15259244
342,False,False,2015-02-12T13:41:02Z,2015-02-13T12:32:21Z,"Minor fixes to v0.10.0 released early
",15259244
343,False,False,2015-02-12T17:41:33Z,2015-02-13T12:31:19Z,"Minor release with various bug fixes, code optimizations, and a new module
- New `bitcore-message` module for bitcoin message signing and verification. Check it out: https://github.com/bitpay/bitcore-message.
- `Transaction`: 
  - Add locktime handling methods like `getLockTime`, `lockUntilBlockHeight` and `lockUntilDate`.
  - Add `removeInput` method.
  - Several bug fixes on serialization/deserialization to JSON.
  - OP_RETURN is no longer considered dust.
  - Fix inspect method so it doesn't fail on incomplete TX.
  - Better error message on unsupported input types.
  - Fix bug in change and fee calculation.
- Significant performance improvement on bn.js usage.
- Expose `lodash` dependency to optimize submodule sizes for browser bundles.
- Add fromBuffer and toBuffer to PrivateKey, HDPrivateKey and HDPublicKey.
- Add Signature subclass for Transaction Signatures.
- Fix HD path parsing for some edge cases.
- Improve docs.
",15259244
344,False,False,2015-02-04T16:31:11Z,2015-02-04T17:25:53Z,"Weekly maintenance release. 
- Added `Script#toHex`
- Added `BufferReader#readVarLengthBuffer`
- Updated docs
",15259244
345,False,False,2015-02-12T17:41:33Z,2015-02-13T12:31:42Z,"Weekly maintenance release. Minor doc changes, polishing, and bug fixes.
",15259244
346,False,False,2015-01-21T19:04:13Z,2015-01-21T20:17:31Z,"This is a project restructuring and general polishing release.
The main changes are:
- Modularize bitcore and separate some functionality into other subprojects:
  - https://github.com/bitpay/bitcore-ecies (Elliptic Curve Integrated Encryption Scheme)
  - https://github.com/bitpay/bitcore-mnemonic (BIP39 Mnemonics)
  - https://github.com/bitpay/bitcore-payment-protocol (BIP70 Payment Protocol support)
  - https://github.com/bitpay/bitcore-p2p (Interface to the bitcoin P2P network)
  - https://github.com/bitpay/bitcore-channel (Payment channels smart contract support)
  - https://github.com/bitpay/bitcore-explorers (Blockchain APIs)
- Various Transaction and Block bugfixes
- Added `.toScriptHashOut()` to scripts
- Improved test coverage
- Added zuul for cloud testing in many browsers
",15259244
347,False,False,2015-01-07T16:19:11Z,2015-01-07T16:39:52Z,"- Improved README and CONTRIBUTING files
- Add fiat rate methods to `Unit` class
- Add getData functionality to `Script`
- Add `Insight` and `Transaction.UnspentOutput` classes for easier utxo data fetching
- Increased test coverage
- Add validations to derivation path
- Fixed all bugs in IE11
- Minor bugfixes
",15259244
348,False,False,2014-12-24T14:53:08Z,2014-12-24T15:36:30Z,"- Review and polish many classes (Unit, URI, Interpreter,PublicKey, PrivateKey, Network, Block, Blockheader, BN, ECDSA, random, hash)
- Test coverage increased
- Improved documentation
- Added release automation script (`gulp release`)
",15259244
349,False,False,2014-12-19T15:00:23Z,2014-12-19T15:25:59Z,"Minor fixes to the code base:
- Fix critical bugs when creating P2SH and Multisig scripts (commits https://github.com/bitpay/bitcore/commit/a35293756657f72ec4d96e1e6dbb5b4a9bf7408e, and https://github.com/bitpay/bitcore/commit/de4413745dfd3ead813c77f7efa548ae8ef5cc44)
- Updated the transaction creation interface, adding checks on serialization and a `uncheckedSerialize` in case no check is necessary https://github.com/bitpay/bitcore/commit/e5631b1a69c303efa40b94cf432616d5fb82653e
- Updated documentation
",15259244
350,False,False,2014-12-17T23:05:29Z,2014-12-17T22:54:55Z,"# v0.8.1 Major release

At BitPay we have been working on a major refactor for `bitcore`. With a focus on [design and code quality](https://github.com/bitpay/bitcore/blob/master/CONTRIBUTING.md#design-guidelines), security, documentation and usability, this release sets a new course for the library. We hope it will be a good influence for the development of cryptocurrency-related software in JavaScript.

## Overview

`bitcore v0.8.1` started as a rewrite of the codebase of the `0.1.x` version of `bitcore`. Although powerful, `0.1.x` had usability problems and design issues. A fresh approach, with the added experience of lessons learned, was definitely the best way to improve `bitcore`.

## Main features

### Addresses and Key management
- Address creation from public keys, both P2SH and “pay to public key hash”
- Hierarchically derived private and public keys

### Transactions & Scripting
- Full validation of transactions
- 100% of `bitcoind`’s test vectors ported and passing

### Core bitcoin protocol features
- Block parsing, validation and handling
- Bitcoin p2p low-level protocol format
- json-rpc support classes
- P2P connection pool management

### Payment Protocol
- Message signing and verification in Node.js and web browsers

## Migrating from 0.1.x to 0.8.x

The biggest changes in the API correspond to:

### Transaction

If you where using the `TransactionBuilder` class, you’ll notice that there’s no such class anymore. The `Transaction` class should be good enough now, and easy to understand. You’ll notice that there are some very good improvements, like simpler support for P2SH transactions. Head to [the developer guide](http://bitcore.io/guide/transaction.html) for a good introduction to it.

### BIP32 Hierarchically derived keys

Even though the signature has changed, the interface is pretty similar to the previous `BIP32` class. It has been splitted into two classes: `HDPublicKey` and `HDPrivateKey`, for more robustness.

### Unsupported Features

There is some functionality not present in `0.8.1` that was part of `0.1.x`. We decided to only keep core protocol standards and move everything else to submodules. Here are the missing features in `0.8.1`:
- BIP38 and BIP39 support (will be added as submodules in `0.9.0`)
- Electrum style key derivation (no plans for supporting it, can be a community submodule)
- Armory hd wallets (no plans for supporting it, can be a community submodule)
- Wallet support (we’re moving those efforts to https://github.com/bitpay/copay)

## Future work

Two major release updates are planned for the following months. The following is a mostly incomplete list of what we’re cooking:

### v0.9.x
- 100% test coverage
- Modularization of the code into separate subprojects
- Support for more [BIPs](https://github.com/bitcoin/bips)
- Full bitcoin node capabilities
- Payment channel support

### v1.0.x
- Optimize performance critical code with C++ bindings in NodeJS
- Security audits by third parties
- Stable API and long term support for the library
- Support for even more [BIPs](https://github.com/bitcoin/bips)
- Bloom filters
- Stealth Addresses
",15259244
351,False,False,2014-12-01T16:52:24Z,2014-12-01T17:01:54Z,"- Improved loggin for RPC interface
- Improved examples.md
- optimize `TransactionBuilder`
",15259244
352,False,False,2014-11-17T18:50:00Z,2014-11-17T18:50:38Z,,15259244
353,False,False,2014-10-27T16:33:47Z,2014-10-27T16:36:44Z,"- Add ECIES browser example
- Leaner package distribution
- Fixes unhandled exceptions in Transaction
",15259244
354,False,False,2014-10-20T18:31:44Z,2014-10-20T18:32:08Z,"Minor maintenance fixes.
",15259244
355,False,False,2014-10-06T18:29:10Z,2014-10-06T19:42:21Z,"- Improves browser bundle generation process
- Payment Protocol improvements
- Fixes some minor bugs and adds tests
",15259244
356,False,False,2014-05-13T14:03:47Z,2014-05-13T17:28:44Z,"- Adds `SecureRandom` to generate cryptographically secure random numbers in node and browsers.
- Adds Armory key derivation support
- Many fixes in `Script` and `ScriptInterpreter`. Bitcoin core test passing!
- new BIP32 Interface, name changed to HierarchicalKey
- removes unused code in `Block` & `Transaction`.

Documentation
- Adds CONTRIBUTING.md
- Adds `docco` grunt target, and documentation for `TransactionBuilder` and `Address`.
",15259244
357,False,False,2020-03-16T15:26:40Z,2020-03-16T16:14:28Z,"This is a hot fix release reverting the local Bitcoin Core node configuration check as it caused startup issues on very specific OS setups.

Here are the release notes from v1.2.8:

## Release notes
This release is, once again, packed with bug fixes and improvements. Most notably, it reduces the intervals in which users can trigger a trade process refresh.

### UI
- [Improve wording for local BTC node reminder in `Settings > Network info`](https://github.com/bisq-network/bisq/pull/4024)
- [Display 2 decimal places for fiat trading fees](https://github.com/bisq-network/bisq/pull/3973)
- [Fix checkbox handling in `My Open Offers`](https://github.com/bisq-network/bisq/pull/4008)

### Trading
- Reduce time until trade process refresh is possible: [1](https://github.com/bisq-network/bisq/pull/3980), [2](https://github.com/bisq-network/bisq/pull/4044)
- [Update owner address of offer to new hidden service files](https://github.com/bisq-network/bisq/pull/4021)
- [Add ARS as supported currency for MoneyGram](https://github.com/bisq-network/bisq/pull/4007)

### Performance
- [Speed up DAO state monitor view load](https://github.com/bisq-network/bisq/pull/4035)

### Privacy
- [Remove unused uid in fee provider service](https://github.com/bisq-network/bisq/pull/4015)
- [Fix incorrect deletion of hidden service directory when using --appDataDir](https://github.com/bisq-network/bisq/pull/4018)

### Configuration
- [Avoid startup failure when appDataDir is a symbolic link](https://github.com/bisq-network/bisq/pull/4002)
- [Accept empty config values](https://github.com/bisq-network/bisq/pull/3978)

### Network
- [Update URL for mempool.ninja blockchain explorer](https://github.com/bisq-network/bisq/pull/4033)
- [Fix nginx.conf for collectd so it only listens on 127.0.0.1](https://github.com/bisq-network/bisq/pull/4016)
- Fix CoinMarketCap API issues: [1](https://github.com/bisq-network/bisq/pull/4032), [2](https://github.com/bisq-network/bisq/pull/4037), [3](https://github.com/bisq-network/bisq/pull/4043)
- [Moved node2.emzy.de to a new host](https://github.com/bisq-network/bisq/pull/4010)

### Monitor
- [Added monitoring install scripts](https://github.com/bisq-network/bisq/pull/3985)

### Support
- [Log delayed payout transaction bytes as soon as it's signed during trade initialization](https://github.com/bisq-network/bisq/pull/4040)
- [Dump delayed payout transactions of both pending and failed trades if flag is set](https://github.com/bisq-network/bisq/pull/4029)

### Assets
No assets were added.

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: ""This key is not certified with a trusted signature!"" - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.2.9.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-1.2.9.jar`
The output need to match the value from the Bisq-1.2.9.jar.txt file.


## Known issues with installation 

### macOS Catalina:
> Bisq would like to receive keystrokes from any application.

Discussed in issue https://github.com/bisq-network/bisq/issues/3373, you will see a permission request in the latest macOS version that Bisq wants to receive keystrokes from any application. Unfortunately that is an issue for all Java applications that are run on Catalina right now. We are investigating already how to solve this issue and will fix in one of our next updates.

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\<username>\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\<username>\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.2.9.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. 

## Cleanup tool for saved trades that failed market price check

With this release we are also shipping a cleanup tool (Bisq-cleanup-trades*). It will remove corrupt trade entries added due to bug https://github.com/bisq-network/bisq/issues/2924. Install and run once, it will shut down automatically, then install version 1.2.9 or later. You can verify the binary the same way as you do with the Bisq application.
",17662022
358,False,True,2020-03-12T08:01:56Z,2020-03-12T09:35:21Z,"**This release is not stable, please revert to v1.2.7 if you are seeing issues during startup**
_Binaries have been removed until https://github.com/bisq-network/bisq/issues/4052 is fixed and released in a hotfix_

## Release notes
This release is, once again, packed with bug fixes and improvements. Most notably, it checks for errors in local Bitcoin Core node configuration and reduces the intervals in which users can trigger a trade process refresh.

### UI
- [Improve wording for local BTC node reminder in `Settings > Network info`](https://github.com/bisq-network/bisq/pull/4024)
- [Display 2 decimal places for fiat trading fees](https://github.com/bisq-network/bisq/pull/3973)
- [Fix checkbox handling in `My Open Offers`](https://github.com/bisq-network/bisq/pull/4008)

### Trading
- Reduce time until trade process refresh is possible: [1](https://github.com/bisq-network/bisq/pull/3980), [2](https://github.com/bisq-network/bisq/pull/4044)
- [Update owner address of offer to new hidden service files](https://github.com/bisq-network/bisq/pull/4021)
- [Add ARS as supported currency for MoneyGram](https://github.com/bisq-network/bisq/pull/4007)

### Wallet
- [Add local Bitcoin node configuration detection](https://github.com/bisq-network/bisq/pull/3982)

### Performance
- [Speed up DAO state monitor view load](https://github.com/bisq-network/bisq/pull/4035)

### Privacy
- [Remove unused uid in fee provider service](https://github.com/bisq-network/bisq/pull/4015)
- [Fix incorrect deletion of hidden service directory when using --appDataDir](https://github.com/bisq-network/bisq/pull/4018)

### Configuration
- [Avoid startup failure when appDataDir is a symbolic link](https://github.com/bisq-network/bisq/pull/4002)
- [Accept empty config values](https://github.com/bisq-network/bisq/pull/3978)

### Network
- [Update URL for mempool.ninja blockchain explorer](https://github.com/bisq-network/bisq/pull/4033)
- [Fix nginx.conf for collectd so it only listens on 127.0.0.1](https://github.com/bisq-network/bisq/pull/4016)
- Fix CoinMarketCap API issues: [1](https://github.com/bisq-network/bisq/pull/4032), [2](https://github.com/bisq-network/bisq/pull/4037), [3](https://github.com/bisq-network/bisq/pull/4043)
- [Moved node2.emzy.de to a new host](https://github.com/bisq-network/bisq/pull/4010)

### Monitor
- [Added monitoring install scripts](https://github.com/bisq-network/bisq/pull/3985)

### Support
- [Log delayed payout transaction bytes as soon as it's signed during trade initialization](https://github.com/bisq-network/bisq/pull/4040)
- [Dump delayed payout transactions of both pending and failed trades if flag is set](https://github.com/bisq-network/bisq/pull/4029)

### Assets
No assets were added.

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: ""This key is not certified with a trusted signature!"" - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.2.8.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-1.2.8.jar`
The output need to match the value from the Bisq-1.2.8.jar.txt file.


## Known issues with installation 

### macOS Catalina:
> Bisq would like to receive keystrokes from any application.

Discussed in issue https://github.com/bisq-network/bisq/issues/3373, you will see a permission request in the latest macOS version that Bisq wants to receive keystrokes from any application. Unfortunately that is an issue for all Java applications that are run on Catalina right now. We are investigating already how to solve this issue and will fix in one of our next updates.

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\<username>\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\<username>\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.2.8.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. 

## Cleanup tool for saved trades that failed market price check

With this release we are also shipping a cleanup tool (Bisq-cleanup-trades*). It will remove corrupt trade entries added due to bug https://github.com/bisq-network/bisq/issues/2924. Install and run once, it will shut down automatically, then install version 1.2.8 or later. You can verify the binary the same way as you do with the Bisq application.",17662022
359,False,False,2020-02-13T19:20:47Z,2020-02-13T19:22:38Z,"This is a hotfix release covering following issue:

- [App freezes with blurred background on startup when launched on macOS Mojave or older](https://github.com/bisq-network/bisq/issues/3969).

Here are the release notes from v1.2.6:

## Release notes
This release is packed with performance improvements and bug fixes. Most notably, this version introduces an option to refresh the trade process if it gets stuck during payment confirmation and adds Liquid Bitcoin (L-BTC) as a new asset.

### DAO
- [Add new BSQ issued v. burnt chart](https://github.com/bisq-network/bisq/pull/3910)
- [Improve readability of the daily burnt BSQ chart](https://github.com/bisq-network/bisq/pull/3890)

### UI
- Don't show decimals for rounded fiat amounts: [1](https://github.com/bisq-network/bisq/pull/3926), [2](https://github.com/bisq-network/bisq/pull/3953)
- [Fix account age format when ending in 1](https://github.com/bisq-network/bisq/pull/3857)
- [Fix incorrect display of delete button next to open proposals](https://github.com/bisq-network/bisq/pull/3920)
- [Fix popup message about trade limits](https://github.com/bisq-network/bisq/pull/3897)
- [Use macOS app Info.plist setting for automatic light/dark title bar](https://github.com/bisq-network/bisq/pull/3883)
- [Remove ""beta"" label from Dark Theme slider switch text](https://github.com/bisq-network/bisq/pull/3879)

### Trading
- [Trade process refresh option if trade is stuck](https://github.com/bisq-network/bisq/pull/3922)

### Performance
- [Prevent memory leak in CandleStickChart & VolumeChart](https://github.com/bisq-network/bisq/pull/3914)
- [Fix potential resource leak in AvoidStandbyModeService](https://github.com/bisq-network/bisq/pull/3909)

### Privacy
- [Remove unused uid in price feed service](https://github.com/bisq-network/bisq/pull/3937)

### Network
- [Temporarily deactivate public network option](https://github.com/bisq-network/bisq/pull/3938)
- [Remove Bitcoin Core nodes not operated by Bisq btcnode team members](https://github.com/bisq-network/bisq/pull/3904)

### Support
- [Add signing debug logs](https://github.com/bisq-network/bisq/pull/3948)
- [Dump delayed payout transaction hashes to local file](https://github.com/bisq-network/bisq/pull/3925)

### Assets
One new asset was added: Liquid Bitcoin (L-BTC)

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: ""This key is not certified with a trusted signature!"" - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.2.7.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-1.2.7.jar`
The output need to match the value from the Bisq-1.2.7.jar.txt file.


## Known issues with installation 

### macOS Catalina:
> Bisq would like to receive keystrokes from any application.

Discussed in issue https://github.com/bisq-network/bisq/issues/3373, you will see a permission request in the latest macOS version that Bisq wants to receive keystrokes from any application. Unfortunately that is an issue for all Java applications that are run on Catalina right now. We are investigating already how to solve this issue and will fix in one of our next updates.

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\<username>\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\<username>\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.2.7.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. 

## Cleanup tool for saved trades that failed market price check

With this release we are also shipping a cleanup tool (Bisq-cleanup-trades*). It will remove corrupt trade entries added due to bug https://github.com/bisq-network/bisq/issues/2924. Install and run once, it will shut down automatically, then install version 1.2.7 or later. You can verify the binary the same way as you do with the Bisq application.",17662022
360,False,False,2020-02-12T18:01:11Z,2020-02-13T08:41:23Z,"**A newer version is already available! Please don’t use this version anymore.**
_Binaries have been removed as this release is superseded by v1.2.7_

## Release notes
This release is packed with performance improvements and bug fixes. Most notably, this version introduces an option to refresh the trade process if it gets stuck during payment confirmation and adds Liquid Bitcoin (L-BTC) as a new asset.

### DAO
- [Add new BSQ issued v. burnt chart](https://github.com/bisq-network/bisq/pull/3910)
- [Improve readability of the daily burnt BSQ chart](https://github.com/bisq-network/bisq/pull/3890)

### UI
- Don't show decimals for rounded fiat amounts: [1](https://github.com/bisq-network/bisq/pull/3926), [2](https://github.com/bisq-network/bisq/pull/3953)
- [Fix account age format when ending in 1](https://github.com/bisq-network/bisq/pull/3857)
- [Fix incorrect display of delete button next to open proposals](https://github.com/bisq-network/bisq/pull/3920)
- [Fix popup message about trade limits](https://github.com/bisq-network/bisq/pull/3897)
- [Use macOS app Info.plist setting for automatic light/dark title bar](https://github.com/bisq-network/bisq/pull/3883)
- [Remove ""beta"" label from Dark Theme slider switch text](https://github.com/bisq-network/bisq/pull/3879)

### Trading
- [Trade process refresh option if trade is stuck](https://github.com/bisq-network/bisq/pull/3922)

### Performance
- [Prevent memory leak in CandleStickChart & VolumeChart](https://github.com/bisq-network/bisq/pull/3914)
- [Fix potential resource leak in AvoidStandbyModeService](https://github.com/bisq-network/bisq/pull/3909)

### Privacy
- [Remove unused uid in price feed service](https://github.com/bisq-network/bisq/pull/3937)

### Network
- [Temporarily deactivate public network option](https://github.com/bisq-network/bisq/pull/3938)
- [Remove Bitcoin Core nodes not operated by Bisq btcnode team members](https://github.com/bisq-network/bisq/pull/3904)

### Support
- [Add signing debug logs](https://github.com/bisq-network/bisq/pull/3948)
- [Dump delayed payout transaction hashes to local file](https://github.com/bisq-network/bisq/pull/3925)

### Assets
One new asset was added: Liquid Bitcoin (L-BTC)

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: ""This key is not certified with a trusted signature!"" - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.2.6.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-1.2.6.jar`
The output need to match the value from the Bisq-1.2.6.jar.txt file.


## Known issues with installation 

### macOS Catalina:
> Bisq would like to receive keystrokes from any application.

Discussed in issue https://github.com/bisq-network/bisq/issues/3373, you will see a permission request in the latest macOS version that Bisq wants to receive keystrokes from any application. Unfortunately that is an issue for all Java applications that are run on Catalina right now. We are investigating already how to solve this issue and will fix in one of our next updates.

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\<username>\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\<username>\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.2.6.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. 

## Cleanup tool for saved trades that failed market price check

With this release we are also shipping a cleanup tool (Bisq-cleanup-trades*). It will remove corrupt trade entries added due to bug https://github.com/bisq-network/bisq/issues/2924. Install and run once, it will shut down automatically, then install version 1.2.6 or later. You can verify the binary the same way as you do with the Bisq application.",17662022
361,False,False,2020-01-09T18:09:37Z,2020-01-09T18:29:13Z,"**A newer version is already available! Please don’t use this version anymore.**

## Release notes
This release is packed with performance improvements and bug fixes. To discourage future-style trades and minimize mediation cases, this update also increases minimum security deposits.

### DAO
- [Add two new columns to vote result](https://github.com/bisq-network/bisq/pull/3822)
- [Make all DAO screen tables resize to max. screen height](https://github.com/bisq-network/bisq/pull/3823)

### UI
- [Show the correct sign state icon for accounts that are able to sign](https://github.com/bisq-network/bisq/pull/3850)
- [Display minimum limit if used during trade](https://github.com/bisq-network/bisq/pull/3870)
- [Add report feature for disputes](https://github.com/bisq-network/bisq/pull/3790)
- [Fix bank account number label for Swedish language](https://github.com/bisq-network/bisq/pull/3847)
- [Improve trade limit error message](https://github.com/bisq-network/bisq/pull/3834)
- Fix dark mode issues: [1](https://github.com/bisq-network/bisq/pull/3803), [2](https://github.com/bisq-network/bisq/pull/3808), [3](https://github.com/bisq-network/bisq/pull/3771), [4](https://github.com/bisq-network/bisq/pull/3876)
- [Display language switch warning based on supported languages by mediators and refund agents](https://github.com/bisq-network/bisq/pull/3743)
- [Rename ""Spread"" tab to a more general ""Details""](https://github.com/bisq-network/bisq/pull/3745)
- [Fix double presence of the word ""days""](https://github.com/bisq-network/bisq/pull/3804)
- [Fix closed state handling for mediation cases](https://github.com/bisq-network/bisq/pull/3796)

### Trading
- [Increase security deposits](https://github.com/bisq-network/bisq/pull/3826)
- [Only move trades to failed trades if the reject message is critical](https://github.com/bisq-network/bisq/pull/3830)
- [Not allow bitcoinj to autoconnect to localhost when localhost was not detected by client](https://github.com/bisq-network/bisq/pull/3783)
- [Only accept phone number for new Revolut accounts](https://github.com/bisq-network/bisq/pull/3777)

### Performance
- [Speed up DAO vote and BSQ Transactions screen](https://github.com/bisq-network/bisq/pull/3773)
- [Speed up trades charts view load](https://github.com/bisq-network/bisq/pull/3828)
- [Fix temp file path memory leak](https://github.com/bisq-network/bisq/pull/3817)

### Wallet
- [Improve handling of spv resync edge case](https://github.com/bisq-network/bisq/pull/3821)
- [Validate wallet date when restoring from seed](https://github.com/bisq-network/bisq/pull/3749)

### Network
- Added four new BSQ explorers: [1](https://github.com/bisq-network/bisq/pull/3864), [2](https://github.com/bisq-network/bisq/pull/3872)
- Add random BSQ explorer selection: [1](https://github.com/bisq-network/bisq/pull/3792), [2](https://github.com/bisq-network/bisq/pull/3802)
- [Upgrade mempool.space to full block explorer](https://github.com/bisq-network/bisq/pull/3843)
- [Re-enable mbm6ffx6j5ygi2ck.onion btcnode operated by @KanoczTomas](https://github.com/bisq-network/bisq/pull/3813)
- [Temporarily disable z33nukt7ngik3cpe btcnode due to failing service checks](https://github.com/bisq-network/bisq/pull/3875)
- Update seed node install script: [1](https://github.com/bisq-network/bisq/pull/3815), [2](https://github.com/bisq-network/bisq/pull/3853), [3](https://github.com/bisq-network/bisq/pull/3819)

### Build
- [Add developer code signing for Windows binary](https://github.com/bisq-network/bisq/pull/3772)

### Assets
No new assets where added.

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: ""This key is not certified with a trusted signature!"" - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.2.5.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-1.2.5.jar`
The output need to match the value from the Bisq-1.2.5.jar.txt file.


## Known issues with installation 

### macOS Catalina:
> Bisq would like to receive keystrokes from any application.

Discussed in issue https://github.com/bisq-network/bisq/issues/3373, you will see a permission request in the latest macOS version that Bisq wants to receive keystrokes from any application. Unfortunately that is an issue for all Java applications that are run on Catalina right now. We are investigating already how to solve this issue and will fix in one of our next updates.

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\<username>\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\<username>\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.2.5.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. 

## Cleanup tool for saved trades that failed market price check

With this release we are also shipping a cleanup tool (Bisq-cleanup-trades*). It will remove corrupt trade entries added due to bug https://github.com/bisq-network/bisq/issues/2924. Install and run once, it will shut down automatically, then install version 1.2.5 or later. You can verify the binary the same way as you do with the Bisq application.",17662022
362,False,False,2019-12-05T09:55:36Z,2019-12-05T18:53:49Z,"**A newer version is already available! Please don’t use this version anymore.**

## Release notes
This release is packed with bug fixes and improvements. It improves mailbox handling when a trading peer or arbitrator/mediator is offline, shows account age for high-risk payment methods in the UI, and should improve the trade process robustness in general.

### DAO
- [Only show accepted bonded roles in bond view](https://github.com/bisq-network/bisq/pull/3676)

### UI
- Text improvements: [1](https://github.com/bisq-network/bisq/pull/3591), [2](https://github.com/bisq-network/bisq/pull/3624), [3](https://github.com/bisq-network/bisq/pull/3637), [4](https://github.com/bisq-network/bisq/pull/3643), [5](https://github.com/bisq-network/bisq/pull/3647), [6](https://github.com/bisq-network/bisq/pull/3696)
- [Fix malformed trade chat & dispute speech bubbles](https://github.com/bisq-network/bisq/pull/3680)
- [Replace arbitration link in terms and conditions](https://github.com/bisq-network/bisq/pull/3696)
- [Use correct language tags for script and regional language variants](https://github.com/bisq-network/bisq/pull/3716)
- [Add traditional Chinese](https://github.com/bisq-network/bisq/pull/3714)

### Trading
- [Re-introduce account age to payment methods with high chargeback risk](https://github.com/bisq-network/bisq/pull/3580)
- [Improve account signing security](https://github.com/bisq-network/bisq/pull/3682)
- [Fix possiblePaymentAccounts.isEmpty() bug when trying to take an offer with a MIN/MAX range](https://github.com/bisq-network/bisq/pull/3625)
- [Update trading instruction for XMR (Monero)](https://github.com/bisq-network/bisq/pull/3596)
- [Fix problem with MoneyGram account creation](https://github.com/bisq-network/bisq/pull/3600)
- [Fix bug that new payment accounts for specific payment methods couldn't be removed without restart](https://github.com/bisq-network/bisq/pull/3612)
- [Prevent taking of offers with unequal bank account types (excl. SEPA)](https://github.com/bisq-network/bisq/pull/3673)
- [Added check for empty fields for general bank accounts and MoneyBeam on creation](https://github.com/bisq-network/bisq/pull/3573)
- [Added check for empty fields in PopMoney, Uphold, Revolut and Zelle accounts on creation](https://github.com/bisq-network/bisq/pull/3575)
- [Use 2of2 multisig deposit transaction version for manual payout](https://github.com/bisq-network/bisq/pull/3694)
- [Not use 0 BTC outputs](https://github.com/bisq-network/bisq/pull/3725)
- [Fix problem of trades with mediated payout end up in failed trades](https://github.com/bisq-network/bisq/pull/3726)

### Performance
- [Fix resource leak caused by not cleaning up unused threads](https://github.com/bisq-network/bisq/pull/3734)

### Network
- Fix cases where removal of mailbox message wasn't possible: [1](https://github.com/bisq-network/bisq/pull/3584), [2](https://github.com/bisq-network/bisq/pull/3609)
- [Properly remove expire entries on disconnect](https://github.com/bisq-network/bisq/pull/3608)
- [Fix bug of unnecessary syncing of temporary proposal payloads](https://github.com/bisq-network/bisq/pull/3636)

### Installation
- [Check for special characters in installation path on Windows that prevented the app to start](https://github.com/bisq-network/bisq/pull/3642)

### Development
- [Fix failing test when there are spaces in the project path](https://github.com/bisq-network/bisq/pull/3578)
- [Upgrade Gradle wrapper to version 5.6.4](https://github.com/bisq-network/bisq/pull/3627)
- [Upgrade Gradle Shadow plugin from 4.0.2 to 5.2.0](https://github.com/bisq-network/bisq/pull/3635)
- [Upgrade JavaFX to 11.0.2](https://github.com/bisq-network/bisq/pull/3630)

### Build
- [Improve version parsing for Windows](https://github.com/bisq-network/bisq/pull/3631)

### Assets
No new assets where added.

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: ""This key is not certified with a trusted signature!"" - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.2.4.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-1.2.4.jar`
The output need to match the value from the Bisq-1.2.4.jar.txt file.


## Known issues with installation 

### macOS Catalina:
> Bisq would like to receive keystrokes from any application.

Discussed in issue https://github.com/bisq-network/bisq/issues/3373, you will see a permission request in the latest macOS version that Bisq wants to receive keystrokes from any application. Unfortunately that is an issue for all Java applications that are run on Catalina right now. We are investigating already how to solve this issue and will fix in one of our next updates.

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\<username>\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\<username>\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.2.4.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. 

## Cleanup tool for saved trades that failed market price check

With this release we are also shipping a cleanup tool (Bisq-cleanup-trades*). It will remove corrupt trade entries added due to bug https://github.com/bisq-network/bisq/issues/2924. Install and run once, it will shut down automatically, then install version 1.2.4 or later. You can verify the binary the same way as you do with the Bisq application.",17662022
363,False,False,2019-11-07T13:58:21Z,2019-11-07T14:39:34Z,"**A newer version is already available! Please don’t use this version anymore.**

## Release notes
This version improves the handling of failed trades and offers, loads the trade statistics on startup again and includes many more minor bug fixes and improvements.

### DAO
- [Fix proposal table hide when switching to another screen and back](https://github.com/bisq-network/bisq/pull/3356)

### UI
- [Remove donation link](https://github.com/bisq-network/bisq/pull/3511)
- [Fix invalid comparators](https://github.com/bisq-network/bisq/pull/3251)
- [Fix BTC valuation popups](https://github.com/bisq-network/bisq/pull/3539)
- [Remove duplicate word in user agreement](https://github.com/bisq-network/bisq/pull/3534)
- [Select default markets view when last navigation no longer exists](https://github.com/bisq-network/bisq/pull/3513)

### Trading
- [Fix initial trading statistics retrieval](https://github.com/bisq-network/bisq/pull/3551)
- [Improve handling of failed trades and offers](https://github.com/bisq-network/bisq/pull/3566)
- [Only show approval icon for signer accounts](https://github.com/bisq-network/bisq/pull/3552)
- [Fix account signing state for peer info window](https://github.com/bisq-network/bisq/pull/3549)

### Wallet
- [Check for dust after subtracting fee, not before](https://github.com/bisq-network/bisq/pull/3327)

### Network
- [Limit max. nr. of PersistableNetworkPayload and ProtectedStorageEntries](https://github.com/bisq-network/bisq/pull/3562)
- [Update seednode config to increase resource limits](https://github.com/bisq-network/bisq/pull/3545)

### Development
- [Use @Getter annotation for appDataDir](https://github.com/bisq-network/bisq/pull/3433/files)
- [Create getListProperty](https://github.com/bisq-network/bisq/pull/3432)
- [Change type of ignoreLocalBtcNode to boolean](https://github.com/bisq-network/bisq/pull/3434)

### Assets
Added one new asset: LBRY Credits (LBC) 

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: ""This key is not certified with a trusted signature!"" - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.2.3.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-1.2.3.jar`
The output need to match the value from the Bisq-1.2.3.jar.txt file.


## Known issues with installation 

### macOS Catalina:
> Bisq would like to receive keystrokes from any application.

Discussed in issue https://github.com/bisq-network/bisq/issues/3373, you will see a permission request in the latest macOS version that Bisq wants to receive keystrokes from any application. Unfortunately that is an issue for all Java applications that are run on Catalina right now. We are investigating already how to solve this issue and will fix in one of our next updates.

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\<username>\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\<username>\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.2.3.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. 

## Cleanup tool for saved trades that failed market price check

With this release we are also shipping a cleanup tool (Bisq-cleanup-trades*). It will remove corrupt trade entries added due to bug https://github.com/bisq-network/bisq/issues/2924. Install and run once, it will shut down automatically, then install version 1.2.3 or later. You can verify the binary the same way as you do with the Bisq application.",17662022
364,False,False,2019-11-01T08:03:30Z,2019-11-01T08:31:58Z,"**A newer version is already available! Please don’t use this version anymore.**

This is a hotfix release mainly covering following issue:

- [Add new trade statistics capability (network improvement)](https://github.com/bisq-network/bisq/pull/3529)

Here are the release notes from v1.2.1:

## Release notes
Bisq v1.2 ships several significant updates. A [new trade protocol](https://docs.bisq.network/trading-rules) moves to 2-of-2 multisig escrows for deposit funds, dispute resolution is overhauled to be more private and scalable, and [account signing](https://docs.bisq.network/payment-methods) removes 0.01 BTC buying limits for risky payment methods in major markets.

**If you are updating from a previous version of Bisq, please make sure to do the following before updating to v1.2:**

* complete all trades
* complete all disputes
* disable open offers (at ""Portfolio/My Open Offers"")

Updating to v1.2 with unfinished trades and disputes will require an arbitrator to intervene and manually make payouts. Downgrading back to v1.1.7 to rectify the situation will not be possible, so please double-check before updating.

### DAO
- [Apply rule to not allow BSQ outputs after BTC output for regular txs](https://github.com/bisq-network/bisq/pull/3413)
- [Fix bug with not updating vote result table at vote result block](https://github.com/bisq-network/bisq/pull/3442)
- [Fix vote results view](https://github.com/bisq-network/bisq/pull/3500)

### UI
- Translation improvements [1](https://github.com/bisq-network/bisq/pull/3386)
- [Translate name of Japan Bank Transfer for non-Japanese users](https://github.com/bisq-network/bisq/pull/3344)

### Trading
- Fix incorrect display of account signing status: [1](https://github.com/bisq-network/bisq/pull/3514), [2](https://github.com/bisq-network/bisq/pull/3512)
- [Remove unnecessary restriction for sell offers](https://github.com/bisq-network/bisq/pull/3518)
- New trade protocol: [1](https://github.com/bisq-network/bisq/pull/3333), [2](https://github.com/bisq-network/bisq/pull/3340), [2](https://github.com/bisq-network/bisq/pull/3410), [3](https://github.com/bisq-network/bisq/pull/3414), [4](https://github.com/bisq-network/bisq/pull/3420), [5](https://github.com/bisq-network/bisq/pull/3439), [6](https://github.com/bisq-network/bisq/pull/3453), [7](https://github.com/bisq-network/bisq/pull/3464), [8](https://github.com/bisq-network/bisq/pull/3471), [9](https://github.com/bisq-network/bisq/pull/3474), [10](https://github.com/bisq-network/bisq/pull/3475), 
- Account signing: [1](https://github.com/bisq-network/bisq/pull/3334), [2](https://github.com/bisq-network/bisq/pull/3342), [3](https://github.com/bisq-network/bisq/pull/3365), [4](https://github.com/bisq-network/bisq/pull/3370), [5](https://github.com/bisq-network/bisq/pull/3374), [6](https://github.com/bisq-network/bisq/pull/3388), [7](https://github.com/bisq-network/bisq/pull/3390), [8](https://github.com/bisq-network/bisq/pull/3392), [9](https://github.com/bisq-network/bisq/pull/3403), [10](https://github.com/bisq-network/bisq/pull/3404), [11](https://github.com/bisq-network/bisq/pull/3406), [12](https://github.com/bisq-network/bisq/pull/3409), [13](https://github.com/bisq-network/bisq/pull/3415), [14](https://github.com/bisq-network/bisq/pull/3421), [15](https://github.com/bisq-network/bisq/pull/3435), [16](https://github.com/bisq-network/bisq/pull/3436), [16](https://github.com/bisq-network/bisq/pull/3445), [17](https://github.com/bisq-network/bisq/pull/3448), [18](https://github.com/bisq-network/bisq/pull/3450), [19](https://github.com/bisq-network/bisq/pull/3465), [20](https://github.com/bisq-network/bisq/pull/3467), [21](https://github.com/bisq-network/bisq/pull/3481), [22](https://github.com/bisq-network/bisq/pull/3490), [23](https://github.com/bisq-network/bisq/pull/3495), [24](https://github.com/bisq-network/bisq/pull/3496), [25](https://github.com/bisq-network/bisq/pull/3497), [26](https://github.com/bisq-network/bisq/pull/3499)
- [Add mediator prefix to trade statistics](https://github.com/bisq-network/bisq/pull/3351)
- [Add combo block explorer for Blockstream.info + Mempool.space](https://github.com/bisq-network/bisq/pull/3377)
- [Increase minimum TX fee to 2 sats/vByte](https://github.com/bisq-network/bisq/pull/3387)
- [Not show payment account details for blocked offers](https://github.com/bisq-network/bisq/pull/3425)
- [Clean up trade statistics from duplicate entries](https://github.com/bisq-network/bisq/pull/3476)
- [Format maker fee for BTC and BSQ correctly](https://github.com/bisq-network/bisq/pull/3498)
- [Improve mediation result popup handling](https://github.com/bisq-network/bisq/pull/3503)

### Wallet
- [Show connected Bitcoin network peer info](https://github.com/bisq-network/bisq/pull/3423)

### Assets
Added 8 new assets: Animecoin (ANI), CTSCoin (CTSC), Donu (DONU), Faircoin (FAIR), Krypton (ZOD), ndau (XND), NoteBlockchain (NTBC), uPlexa (UPX)

Removed two assets: Byte (GBYTE), Neos (NEOS)

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: ""This key is not certified with a trusted signature!"" - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.2.2.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-1.2.2.jar`
The output need to match the value from the Bisq-1.2.2.jar.txt file.


## Known issues with installation 

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\<username>\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\<username>\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.2.2.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. 

## Cleanup tool for saved trades that failed market price check

With this release we are also shipping a cleanup tool (Bisq-cleanup-trades*). It will remove corrupt trade entries added due to bug https://github.com/bisq-network/bisq/issues/2924. Install and run once, it will shut down automatically, then install version 1.2.2 or later. You can verify the binary the same way as you do with the Bisq application.",17662022
365,False,False,2019-10-30T11:34:22Z,2019-10-30T11:56:14Z,"**A newer version is already available! Please don’t use this version anymore.**
_Binaries have been removed as this release is superseded by v1.2.2_

This is a hotfix release mainly covering following issues:

- Fix incorrect display of account signing status: [1](https://github.com/bisq-network/bisq/pull/3514), [2](https://github.com/bisq-network/bisq/pull/3512)
- [Remove unnecessary restriction for sell offers](https://github.com/bisq-network/bisq/pull/3518)

Here are the release notes from v1.2.0:

## Release notes
Bisq v1.2 ships several significant updates. A [new trade protocol](https://docs.bisq.network/trading-rules) moves to 2-of-2 multisig escrows for deposit funds, dispute resolution is overhauled to be more private and scalable, and [account signing](https://docs.bisq.network/payment-methods) removes 0.01 BTC buying limits for risky payment methods in major markets.

**If you are updating from a previous version of Bisq, please make sure to do the following before updating to v1.2:**

* complete all trades
* complete all disputes
* disable open offers (at ""Portfolio/My Open Offers"")

Updating to v1.2 with unfinished trades and disputes will require an arbitrator to intervene and manually make payouts. Downgrading back to v1.1.7 to rectify the situation will not be possible, so please double-check before updating.

### DAO
- [Apply rule to not allow BSQ outputs after BTC output for regular txs](https://github.com/bisq-network/bisq/pull/3413)
- [Fix bug with not updating vote result table at vote result block](https://github.com/bisq-network/bisq/pull/3442)
- [Fix vote results view](https://github.com/bisq-network/bisq/pull/3500)

### UI
- Translation improvements [1](https://github.com/bisq-network/bisq/pull/3386)
- [Translate name of Japan Bank Transfer for non-Japanese users](https://github.com/bisq-network/bisq/pull/3344)

### Trading
- New trade protocol: [1](https://github.com/bisq-network/bisq/pull/3333), [2](https://github.com/bisq-network/bisq/pull/3340), [2](https://github.com/bisq-network/bisq/pull/3410), [3](https://github.com/bisq-network/bisq/pull/3414), [4](https://github.com/bisq-network/bisq/pull/3420), [5](https://github.com/bisq-network/bisq/pull/3439), [6](https://github.com/bisq-network/bisq/pull/3453), [7](https://github.com/bisq-network/bisq/pull/3464), [8](https://github.com/bisq-network/bisq/pull/3471), [9](https://github.com/bisq-network/bisq/pull/3474), [10](https://github.com/bisq-network/bisq/pull/3475), 
- Account signing: [1](https://github.com/bisq-network/bisq/pull/3334), [2](https://github.com/bisq-network/bisq/pull/3342), [3](https://github.com/bisq-network/bisq/pull/3365), [4](https://github.com/bisq-network/bisq/pull/3370), [5](https://github.com/bisq-network/bisq/pull/3374), [6](https://github.com/bisq-network/bisq/pull/3388), [7](https://github.com/bisq-network/bisq/pull/3390), [8](https://github.com/bisq-network/bisq/pull/3392), [9](https://github.com/bisq-network/bisq/pull/3403), [10](https://github.com/bisq-network/bisq/pull/3404), [11](https://github.com/bisq-network/bisq/pull/3406), [12](https://github.com/bisq-network/bisq/pull/3409), [13](https://github.com/bisq-network/bisq/pull/3415), [14](https://github.com/bisq-network/bisq/pull/3421), [15](https://github.com/bisq-network/bisq/pull/3435), [16](https://github.com/bisq-network/bisq/pull/3436), [16](https://github.com/bisq-network/bisq/pull/3445), [17](https://github.com/bisq-network/bisq/pull/3448), [18](https://github.com/bisq-network/bisq/pull/3450), [19](https://github.com/bisq-network/bisq/pull/3465), [20](https://github.com/bisq-network/bisq/pull/3467), [21](https://github.com/bisq-network/bisq/pull/3481), [22](https://github.com/bisq-network/bisq/pull/3490), [23](https://github.com/bisq-network/bisq/pull/3495), [24](https://github.com/bisq-network/bisq/pull/3496), [25](https://github.com/bisq-network/bisq/pull/3497), [26](https://github.com/bisq-network/bisq/pull/3499)
- [Add mediator prefix to trade statistics](https://github.com/bisq-network/bisq/pull/3351)
- [Add combo block explorer for Blockstream.info + Mempool.space](https://github.com/bisq-network/bisq/pull/3377)
- [Increase minimum TX fee to 2 sats/vByte](https://github.com/bisq-network/bisq/pull/3387)
- [Not show payment account details for blocked offers](https://github.com/bisq-network/bisq/pull/3425)
- [Clean up trade statistics from duplicate entries](https://github.com/bisq-network/bisq/pull/3476)
- [Format maker fee for BTC and BSQ correctly](https://github.com/bisq-network/bisq/pull/3498)
- [Improve mediation result popup handling](https://github.com/bisq-network/bisq/pull/3503)

### Wallet
- [Show connected Bitcoin network peer info](https://github.com/bisq-network/bisq/pull/3423)

### Assets
Added 7 new assets: Animecoin (ANI), CTSCoin (CTSC), Donu (DONU), Faircoin (FAIR), ndau (XND), NoteBlockchain (NTBC), uPlexa (UPX)

Removed two assets: Byte (GBYTE), Neos (NEOS)

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: ""This key is not certified with a trusted signature!"" - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.2.1.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-1.2.1.jar`
The output need to match the value from the Bisq-1.2.1.jar.txt file.


## Known issues with installation 

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\<username>\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\<username>\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.2.1.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. 

## Cleanup tool for saved trades that failed market price check

With this release we are also shipping a cleanup tool (Bisq-cleanup-trades*). It will remove corrupt trade entries added due to bug https://github.com/bisq-network/bisq/issues/2924. Install and run once, it will shut down automatically, then install version 1.2.1 or later. You can verify the binary the same way as you do with the Bisq application.",17662022
366,False,False,2019-10-29T16:40:06Z,2019-10-29T17:23:05Z,"**A newer version is already available! Please don’t use this version anymore.**
_Binaries have been removed as this release is superseded by v1.2.1_

## Release notes
Bisq v1.2 ships several significant updates. A [new trade protocol](https://docs.bisq.network/trading-rules) moves to 2-of-2 multisig escrows for deposit funds, dispute resolution is overhauled to be more private and scalable, and [account signing](https://docs.bisq.network/payment-methods) removes 0.01 BTC buying limits for risky payment methods in major markets.

**If you are updating from a previous version of Bisq, please make sure to do the following before updating to v1.2:**

* complete all trades
* complete all disputes
* disable open offers (at ""Portfolio/My Open Offers"")

Updating to v1.2 with unfinished trades and disputes will require an arbitrator to intervene and manually make payouts. Downgrading back to v1.1.7 to rectify the situation will not be possible, so please double-check before updating.

### DAO
- [Apply rule to not allow BSQ outputs after BTC output for regular txs](https://github.com/bisq-network/bisq/pull/3413)
- [Fix bug with not updating vote result table at vote result block](https://github.com/bisq-network/bisq/pull/3442)
- [Fix vote results view](https://github.com/bisq-network/bisq/pull/3500)

### UI
- Translation improvements [1](https://github.com/bisq-network/bisq/pull/3386)
- [Translate name of Japan Bank Transfer for non-Japanese users](https://github.com/bisq-network/bisq/pull/3344)

### Trading
- New trade protocol: [1](https://github.com/bisq-network/bisq/pull/3333), [2](https://github.com/bisq-network/bisq/pull/3340), [2](https://github.com/bisq-network/bisq/pull/3410), [3](https://github.com/bisq-network/bisq/pull/3414), [4](https://github.com/bisq-network/bisq/pull/3420), [5](https://github.com/bisq-network/bisq/pull/3439), [6](https://github.com/bisq-network/bisq/pull/3453), [7](https://github.com/bisq-network/bisq/pull/3464), [8](https://github.com/bisq-network/bisq/pull/3471), [9](https://github.com/bisq-network/bisq/pull/3474), [10](https://github.com/bisq-network/bisq/pull/3475), 
- Account signing: [1](https://github.com/bisq-network/bisq/pull/3334), [2](https://github.com/bisq-network/bisq/pull/3342), [3](https://github.com/bisq-network/bisq/pull/3365), [4](https://github.com/bisq-network/bisq/pull/3370), [5](https://github.com/bisq-network/bisq/pull/3374), [6](https://github.com/bisq-network/bisq/pull/3388), [7](https://github.com/bisq-network/bisq/pull/3390), [8](https://github.com/bisq-network/bisq/pull/3392), [9](https://github.com/bisq-network/bisq/pull/3403), [10](https://github.com/bisq-network/bisq/pull/3404), [11](https://github.com/bisq-network/bisq/pull/3406), [12](https://github.com/bisq-network/bisq/pull/3409), [13](https://github.com/bisq-network/bisq/pull/3415), [14](https://github.com/bisq-network/bisq/pull/3421), [15](https://github.com/bisq-network/bisq/pull/3435), [16](https://github.com/bisq-network/bisq/pull/3436), [16](https://github.com/bisq-network/bisq/pull/3445), [17](https://github.com/bisq-network/bisq/pull/3448), [18](https://github.com/bisq-network/bisq/pull/3450), [19](https://github.com/bisq-network/bisq/pull/3465), [20](https://github.com/bisq-network/bisq/pull/3467), [21](https://github.com/bisq-network/bisq/pull/3481), [22](https://github.com/bisq-network/bisq/pull/3490), [23](https://github.com/bisq-network/bisq/pull/3495), [24](https://github.com/bisq-network/bisq/pull/3496), [25](https://github.com/bisq-network/bisq/pull/3497), [26](https://github.com/bisq-network/bisq/pull/3499)
- [Add mediator prefix to trade statistics](https://github.com/bisq-network/bisq/pull/3351)
- [Add combo block explorer for Blockstream.info + Mempool.space](https://github.com/bisq-network/bisq/pull/3377)
- [Increase minimum TX fee to 2 sats/vByte](https://github.com/bisq-network/bisq/pull/3387)
- [Not show payment account details for blocked offers](https://github.com/bisq-network/bisq/pull/3425)
- [Clean up trade statistics from duplicate entries](https://github.com/bisq-network/bisq/pull/3476)
- [Format maker fee for BTC and BSQ correctly](https://github.com/bisq-network/bisq/pull/3498)
- [Improve mediation result popup handling](https://github.com/bisq-network/bisq/pull/3503)

### Wallet
- [Show connected Bitcoin network peer info](https://github.com/bisq-network/bisq/pull/3423)

### Assets
Added 7 new assets: Animecoin (ANI), CTSCoin (CTSC), Donu (DONU), Faircoin (FAIR), ndau (XND), NoteBlockchain (NTBC), uPlexa (UPX)

Removed two assets: Byte (GBYTE), Neos (NEOS)

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: ""This key is not certified with a trusted signature!"" - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.2.0.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-1.2.0.jar`
The output need to match the value from the Bisq-1.2.0.jar.txt file.


## Known issues with installation 

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\<username>\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\<username>\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.2.0.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. 

## Cleanup tool for saved trades that failed market price check

With this release we are also shipping a cleanup tool (Bisq-cleanup-trades*). It will remove corrupt trade entries added due to bug https://github.com/bisq-network/bisq/issues/2924. Install and run once, it will shut down automatically, then install version 1.2.0 or later. You can verify the binary the same way as you do with the Bisq application.",17662022
367,False,False,2019-09-23T08:30:23Z,2019-09-23T08:36:52Z,"**A newer version is already available! Please don’t use this version anymore.**

This is a hotfix release mainly covering following issue:

- [Fix missing handler for mediator mailbox messages](https://github.com/bisq-network/bisq/pull/3310)

Here are the release notes from v1.1.6:

## Release notes
This version includes important improvements which require that all traders update for compatibility reasons.
Trader chat enables users to have direct encrypted communication during the trade to resolve minor problems.
Mediation is an additional dispute resolution layer before a trade goes to arbitration. Mediators do not have a key in the multisig escrow, so they can only evaluate a situation and make a suggestion. If this suggestion is accepted by both traders, the trade can be completed without involving an arbitrator. Otherwise, the trade goes to arbitration. See more information [here](https://docs.bisq.network/trading-rules.html#mediation).
For backward compatibility reasons, mediation will be activated in 2 steps. 
- **By September 19, all traders need to have updated to v1.1.6, or they will not be able to trade.**
- **On September 26, mediation will become available.**

Additionally this version features a dark mode, adds Japan Bank transfer and we've lifted the 0.01 BTC limit for all markets except USD, EUR, CAD, GBP, AUD and BRL.

### DAO
- [Avoid validating proposals during initial sync](https://github.com/bisq-network/bisq/pull/3003)
- [Check that proposal is in correct cycle for vote result](https://github.com/bisq-network/bisq/pull/3062)
- [Don't force close on checkpoint fail](https://github.com/bisq-network/bisq/pull/3064)
- [Prevent NullPointerException in proposals view](https://github.com/bisq-network/bisq/pull/3118)
- [Fix incorrect DAO full node check when loading preferences](https://github.com/bisq-network/bisq/pull/3127)
- [Improve processing of removed proposals](https://github.com/bisq-network/bisq/pull/3148)
- [Update data storage on expired data removal](https://github.com/bisq-network/bisq/pull/3150)
- [Do not send BSQ blocks to full nodes](https://github.com/bisq-network/bisq/pull/3151)
- [Group burned BSQ by day](https://github.com/bisq-network/bisq/pull/3157)
- [Add average BSQ price in Dashboard](https://github.com/bisq-network/bisq/pull/3212)
- [Add BSQ price trend indicator](https://github.com/bisq-network/bisq/pull/3226)

### UI
- [Add dark mode](https://github.com/bisq-network/bisq/pull/3152)
- [Translation improvements](https://github.com/bisq-network/bisq/pull/3008)
- [High/low values are swapped in trade statistics candle popup](https://github.com/bisq-network/bisq/pull/2976)
- [Show median value in trade statistics candle popup](https://github.com/bisq-network/bisq/pull/2976)
- [Confusing message after making a payment](https://github.com/bisq-network/bisq/pull/2976)
- [Update trading amount on Error to prevent popup loop](https://github.com/bisq-network/bisq/pull/3076)
- [Improve usage of available height for lists](https://github.com/bisq-network/bisq/pull/3077) 
- [Fix bugs in searchable dropdown](https://github.com/bisq-network/bisq/pull/3124)
- [Increase top navigation button text size for Japanese locale](https://github.com/bisq-network/bisq/pull/3133)

### Trading
- [Add mediation support](https://github.com/bisq-network/bisq/pull/3221)
- [Add chat for traders](https://github.com/bisq-network/bisq/pull/3165)
- [Add new payment method: Japan Bank Transfer](https://github.com/bisq-network/bisq/pull/3225)
- [Add Export to CSV in Portfolio History](https://github.com/bisq-network/bisq/pull/3040)
- [Render proper column headers and values for CSV exports](https://github.com/bisq-network/bisq/pull/3090)
- [Auto remove whitespace in the IBAN input field](https://github.com/bisq-network/bisq/pull/3103)

### Wallet
- [Make RPC host configurable](https://github.com/bisq-network/bisq/pull/2983)

### Security
- [Update Tor to 0.4.0.5](https://github.com/bisq-network/bisq/pull/3048)

### Monitoring
- [Lots of minor Monitor improvements](https://github.com/bisq-network/bisq/pull/3045)

### Development
- [Log stacktrace to logfile when a task fails](https://github.com/bisq-network/bisq/pull/2997)

### Assets
- [Namecoin (NMC) update AddressValidator](https://github.com/bisq-network/bisq/pull/2981)
- [Update KYD to KYDC listing to be conform ISO_4217](https://github.com/bisq-network/bisq/pull/2964)
- [Update legacy assets with proper AddressValidator](https://github.com/bisq-network/bisq/pull/3009)
- [Add support for Monero integrated addresses](https://github.com/bisq-network/bisq/pull/3248)

Added 14 new asset: DarkPay (D4RK), Emercoin (EMC), Ergo (ERG), Know Your Developer (KYDC), Kore (KORE), Masari (MSR), Particl (PART), PENG Coin (PENG), SixEleven (SIL), Solo (XSL), VARIUS Coin (VARIUS), Vertcoin (VTC), WORX Coin (WORX)

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: ""This key is not certified with a trusted signature!"" - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.1.7.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-1.1.7.jar`
The output need to match the value from the Bisq-1.1.7.jar.txt file.


## Known issues with installation 

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\<username>\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\<username>\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.1.7.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. 

## Cleanup tool for saved trades that failed market price check

With this release we are also shipping a cleanup tool (Bisq-cleanup-trades*). It will remove corrupt trade entries added due to bug https://github.com/bisq-network/bisq/issues/2924. Install and run once, it will shut down automatically, then install version 1.1.7 or later. You can verify the binary the same way as you do with the Bisq application.",17662022
368,False,False,2019-09-16T09:20:36Z,2019-09-16T09:47:48Z,"**A newer version is already available! Please don’t use this version anymore.**
_Binaries have been removed as this release is superseded by v1.1.7_

## Release notes
This version includes important improvements which require that all traders update for compatibility reasons.
Trader chat enables users to have direct encrypted communication during the trade to resolve minor problems.
Mediation is an additional dispute resolution layer before a trade goes to arbitration. Mediators do not have a key in the multisig escrow, so they can only evaluate a situation and make a suggestion. If this suggestion is accepted by both traders, the trade can be completed without involving an arbitrator. Otherwise, the trade goes to arbitration. See more information [here](https://docs.bisq.network/trading-rules.html#mediation).
For backward compatibility reasons, mediation will be activated in 2 steps. 
- **By September 19, all traders need to have updated to v1.1.6, or they will not be able to trade.**
- **On September 26, mediation will become available.**

Additionally this version features a dark mode, adds Japan Bank transfer and we've lifted the 0.01 BTC limit for all markets except USD, EUR, CAD, GBP, AUD and BRL.

### DAO
- [Avoid validating proposals during initial sync](https://github.com/bisq-network/bisq/pull/3003)
- [Check that proposal is in correct cycle for vote result](https://github.com/bisq-network/bisq/pull/3062)
- [Don't force close on checkpoint fail](https://github.com/bisq-network/bisq/pull/3064)
- [Prevent NullPointerException in proposals view](https://github.com/bisq-network/bisq/pull/3118)
- [Fix incorrect DAO full node check when loading preferences](https://github.com/bisq-network/bisq/pull/3127)
- [Improve processing of removed proposals](https://github.com/bisq-network/bisq/pull/3148)
- [Update data storage on expired data removal](https://github.com/bisq-network/bisq/pull/3150)
- [Do not send BSQ blocks to full nodes](https://github.com/bisq-network/bisq/pull/3151)
- [Group burned BSQ by day](https://github.com/bisq-network/bisq/pull/3157)
- [Add average BSQ price in Dashboard](https://github.com/bisq-network/bisq/pull/3212)
- [Add BSQ price trend indicator](https://github.com/bisq-network/bisq/pull/3226)

### UI
- [Add dark mode](https://github.com/bisq-network/bisq/pull/3152)
- [Translation improvements](https://github.com/bisq-network/bisq/pull/3008)
- [High/low values are swapped in trade statistics candle popup](https://github.com/bisq-network/bisq/pull/2976)
- [Show median value in trade statistics candle popup](https://github.com/bisq-network/bisq/pull/2976)
- [Confusing message after making a payment](https://github.com/bisq-network/bisq/pull/2976)
- [Update trading amount on Error to prevent popup loop](https://github.com/bisq-network/bisq/pull/3076)
- [Improve usage of available height for lists](https://github.com/bisq-network/bisq/pull/3077) 
- [Fix bugs in searchable dropdown](https://github.com/bisq-network/bisq/pull/3124)
- [Increase top navigation button text size for Japanese locale](https://github.com/bisq-network/bisq/pull/3133)

### Trading
- [Add mediation support](https://github.com/bisq-network/bisq/pull/3221)
- [Add chat for traders](https://github.com/bisq-network/bisq/pull/3165)
- [Add new payment method: Japan Bank Transfer](https://github.com/bisq-network/bisq/pull/3225)
- [Add Export to CSV in Portfolio History](https://github.com/bisq-network/bisq/pull/3040)
- [Render proper column headers and values for CSV exports](https://github.com/bisq-network/bisq/pull/3090)
- [Auto remove whitespace in the IBAN input field](https://github.com/bisq-network/bisq/pull/3103)

### Wallet
- [Make RPC host configurable](https://github.com/bisq-network/bisq/pull/2983)

### Security
- [Update Tor to 0.4.0.5](https://github.com/bisq-network/bisq/pull/3048)

### Monitoring
- [Lots of minor Monitor improvements](https://github.com/bisq-network/bisq/pull/3045)

### Development
- [Log stacktrace to logfile when a task fails](https://github.com/bisq-network/bisq/pull/2997)

### Assets
- [Namecoin (NMC) update AddressValidator](https://github.com/bisq-network/bisq/pull/2981)
- [Update KYD to KYDC listing to be conform ISO_4217](https://github.com/bisq-network/bisq/pull/2964)
- [Update legacy assets with proper AddressValidator](https://github.com/bisq-network/bisq/pull/3009)
- [Add support for Monero integrated addresses](https://github.com/bisq-network/bisq/pull/3248)

Added 14 new asset: DarkPay (D4RK), Emercoin (EMC), Ergo (ERG), Know Your Developer (KYDC), Kore (KORE), Masari (MSR), Particl (PART), PENG Coin (PENG), SixEleven (SIL), Solo (XSL), VARIUS Coin (VARIUS), Vertcoin (VTC), WORX Coin (WORX)

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: ""This key is not certified with a trusted signature!"" - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.1.6.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-1.1.6.jar`
The output need to match the value from the Bisq-1.1.6.jar.txt file.


## Known issues with installation 

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\<username>\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\<username>\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.1.6.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. 

## Cleanup tool for saved trades that failed market price check

With this release we are also shipping a cleanup tool (Bisq-cleanup-trades*). It will remove corrupt trade entries added due to bug https://github.com/bisq-network/bisq/issues/2924. Install and run once, it will shut down automatically, then install version 1.1.6 or later. You can verify the binary the same way as you do with the Bisq application.",17662022
369,False,False,2019-08-08T07:55:38Z,2019-08-08T09:08:28Z,"**A newer version is already available! Please don’t use this version anymore.**

This is a hotfix release mainly covering following issue:

DAO data store wasn't properly synchronized (again)

Here are the release notes from v1.1.3:

## Release notes
This is a bug fix and network improvement release. You'll see faster startup and synchronization times and it includes lots of smaller bug fixes and improvements as well.

### DAO
- [Handling of revealing of late votes](https://github.com/bisq-network/bisq/pull/2888)
- [Limit BSQ validator to 10M BSQ](https://github.com/bisq-network/bisq/pull/2889)
- [Display changed param value at proposal time](https://github.com/bisq-network/bisq/pull/2890)
- [Handle null tx for unconfirmed BSQ change output](https://github.com/bisq-network/bisq/pull/2903)
- [Don't dump blockchain data during initial parsing](https://github.com/bisq-network/bisq/pull/2951)
- [Limit number of blocks sent in GetBlocksResponse](https://github.com/bisq-network/bisq/pull/2953)
- [Fixes for initial block sync](https://github.com/bisq-network/bisq/pull/2963)

### UI
- [Hide extreme offers in chart](https://github.com/bisq-network/bisq/pull/2884)
- [Label offers correctly for removed assets](https://github.com/bisq-network/bisq/pull/2947)

### Trading
- [Fix acknowledgement message for available offers](https://github.com/bisq-network/bisq/pull/2917)
- [Use tempTradingPeerNodeAddress if the trade doesn't have a trading peer set yet](https://github.com/bisq-network/bisq/pull/2928)
- [Fix offer editing for low volume offers](https://github.com/bisq-network/bisq/pull/2929)
- [Fix missing payment info on SEPA Instant trades](https://github.com/bisq-network/bisq/pull/2934)
- [Exclude non executed BSQ trade](https://github.com/bisq-network/bisq/pull/2937)

### Wallet
- [Update BitcoinJ checkpoint files](https://github.com/bisq-network/bisq/pull/2909)
- [Wait for initialized wallet before processing dispute msgs](https://github.com/bisq-network/bisq/pull/2915)
- [Add option to ignore local bitcoin node](https://github.com/bisq-network/bisq/pull/2954)

### Network
- Bundling of envelopes: [1](https://github.com/bisq-network/bisq/pull/2939), [2](https://github.com/bisq-network/bisq/pull/2952)

### Monitoring
- [Monitor is aware of the DAO](https://github.com/bisq-network/bisq/pull/2870) ([monitor.bisq.network](https://monitor.bisq.network/d/iVpBgXXmk/dao-sync-status?refresh=5m&orgId=1))
- [Monitor reports BSQBlock head](https://github.com/bisq-network/bisq/pull/2943)

### Development
- [Improve setup instructions for Windows](https://github.com/bisq-network/bisq/pull/2905)
- [Resurrect testnet](https://github.com/bisq-network/bisq/pull/2920)
- [Update command to generate blocks](https://github.com/bisq-network/bisq/pull/2945)

### Assets
Added four new asset: Genesis (GENX), Know Your Developer (KYD), Myce (YCE), Starwels (USDH)

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: ""This key is not certified with a trusted signature!"" - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.1.5.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-1.1.5.jar`
The output need to match the value from the Bisq-1.1.5.jar.txt file.


## Known issues with installation 

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\<username>\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\<username>\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.1.5.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. 

## Cleanup tool for saved trades that failed market price check

With this release we are also shipping a cleanup tool (Bisq-cleanup-trades*). It will remove corrupt trade entries added due to bug https://github.com/bisq-network/bisq/issues/2924. Install and run once, it will shut down automatically, then install version 1.1.5 or later. You can verify the binary the same way as you do with the Bisq application.",17662022
370,False,False,2019-07-29T09:51:44Z,2019-08-08T09:11:03Z,"**A newer version is already available! Please don’t use this version anymore.**
_Binaries have been removed as this release is superseded by v1.1.5_

This is a hotfix release mainly covering following issue:
- DAO data store wasn't properly synchronized

It also introduces Japanese as a new language on Bisq (thanks @jmaurice)

_Here are the release notes from v1.1.3:_

## Release notes
This is a bug fix and network improvement release. You'll see faster startup and synchronization times and it includes lots of smaller bug fixes and improvements as well.

### DAO
- [Handling of revealing of late votes](https://github.com/bisq-network/bisq/pull/2888)
- [Limit BSQ validator to 10M BSQ](https://github.com/bisq-network/bisq/pull/2889)
- [Display changed param value at proposal time](https://github.com/bisq-network/bisq/pull/2890)
- [Handle null tx for unconfirmed BSQ change output](https://github.com/bisq-network/bisq/pull/2903)
- [Don't dump blockchain data during initial parsing](https://github.com/bisq-network/bisq/pull/2951)
- [Limit number of blocks sent in GetBlocksResponse](https://github.com/bisq-network/bisq/pull/2953)
- [Fixes for initial block sync](https://github.com/bisq-network/bisq/pull/2963)

### UI
- [Hide extreme offers in chart](https://github.com/bisq-network/bisq/pull/2884)
- [Label offers correctly for removed assets](https://github.com/bisq-network/bisq/pull/2947)

### Trading
- [Fix acknowledgement message for available offers](https://github.com/bisq-network/bisq/pull/2917)
- [Use tempTradingPeerNodeAddress if the trade doesn't have a trading peer set yet](https://github.com/bisq-network/bisq/pull/2928)
- [Fix offer editing for low volume offers](https://github.com/bisq-network/bisq/pull/2929)
- [Fix missing payment info on SEPA Instant trades](https://github.com/bisq-network/bisq/pull/2934)
- [Exclude non executed BSQ trade](https://github.com/bisq-network/bisq/pull/2937)

### Wallet
- [Update BitcoinJ checkpoint files](https://github.com/bisq-network/bisq/pull/2909)
- [Wait for initialized wallet before processing dispute msgs](https://github.com/bisq-network/bisq/pull/2915)
- [Add option to ignore local bitcoin node](https://github.com/bisq-network/bisq/pull/2954)

### Network
- Bundling of envelopes: [1](https://github.com/bisq-network/bisq/pull/2939), [2](https://github.com/bisq-network/bisq/pull/2952)

### Monitoring
- [Monitor is aware of the DAO](https://github.com/bisq-network/bisq/pull/2870) ([monitor.bisq.network](https://monitor.bisq.network/d/iVpBgXXmk/dao-sync-status?refresh=5m&orgId=1))
- [Monitor reports BSQBlock head](https://github.com/bisq-network/bisq/pull/2943)

### Development
- [Improve setup instructions for Windows](https://github.com/bisq-network/bisq/pull/2905)
- [Resurrect testnet](https://github.com/bisq-network/bisq/pull/2920)
- [Update command to generate blocks](https://github.com/bisq-network/bisq/pull/2945)

### Assets
Added four new asset: Genesis (GENX), Know Your Developer (KYD), Myce (YCE), Starwels (USDH)

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: ""This key is not certified with a trusted signature!"" - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.1.4.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-1.1.4.jar`
The output need to match the value from the Bisq-1.1.4.jar.txt file.


## Known issues with installation 

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\<username>\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\<username>\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.1.4.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. 

## Cleanup tool for saved trades that failed market price check

With this release we are also shipping a cleanup tool (Bisq-cleanup-trades*). It will remove corrupt trade entries added due to bug https://github.com/bisq-network/bisq/issues/2924. Install and run once, it will shut down automatically, then install version 1.1.4 or later. You can verify the binary the same way as you do with the Bisq application.",17662022
371,False,False,2019-07-15T14:34:49Z,2019-07-16T07:13:27Z,"**A newer version is already available! Please don’t use this version anymore.**
_Binaries have been removed as this release is superseded by v1.1.4_

## Release notes
This is a bug fix and network improvement release. You'll see faster startup and synchronization times and it includes lots of smaller bug fixes and improvements as well.

### DAO
- [Handling of revealing of late votes](https://github.com/bisq-network/bisq/pull/2888)
- [Limit BSQ validator to 10M BSQ](https://github.com/bisq-network/bisq/pull/2889)
- [Display changed param value at proposal time](https://github.com/bisq-network/bisq/pull/2890)
- [Handle null tx for unconfirmed BSQ change output](https://github.com/bisq-network/bisq/pull/2903)
- [Don't dump blockchain data during initial parsing](https://github.com/bisq-network/bisq/pull/2951)
- [Limit number of blocks sent in GetBlocksResponse](https://github.com/bisq-network/bisq/pull/2953)
- [Fixes for initial block sync](https://github.com/bisq-network/bisq/pull/2963)

### UI
- [Hide extreme offers in chart](https://github.com/bisq-network/bisq/pull/2884)
- [Label offers correctly for removed assets](https://github.com/bisq-network/bisq/pull/2947)

### Trading
- [Fix acknowledgement message for available offers](https://github.com/bisq-network/bisq/pull/2917)
- [Use tempTradingPeerNodeAddress if the trade doesn't have a trading peer set yet](https://github.com/bisq-network/bisq/pull/2928)
- [Fix offer editing for low volume offers](https://github.com/bisq-network/bisq/pull/2929)
- [Fix missing payment info on SEPA Instant trades](https://github.com/bisq-network/bisq/pull/2934)
- [Exclude non executed BSQ trade](https://github.com/bisq-network/bisq/pull/2937)

### Wallet
- [Update BitcoinJ checkpoint files](https://github.com/bisq-network/bisq/pull/2909)
- [Wait for initialized wallet before processing dispute msgs](https://github.com/bisq-network/bisq/pull/2915)
- [Add option to ignore local bitcoin node](https://github.com/bisq-network/bisq/pull/2954)

### Network
- Bundling of envelopes: [1](https://github.com/bisq-network/bisq/pull/2939), [2](https://github.com/bisq-network/bisq/pull/2952)

### Monitoring
- [Monitor is aware of the DAO](https://github.com/bisq-network/bisq/pull/2870) ([monitor.bisq.network](https://monitor.bisq.network/d/iVpBgXXmk/dao-sync-status?refresh=5m&orgId=1))
- [Monitor reports BSQBlock head](https://github.com/bisq-network/bisq/pull/2943)

### Development
- [Improve setup instructions for Windows](https://github.com/bisq-network/bisq/pull/2905)
- [Resurrect testnet](https://github.com/bisq-network/bisq/pull/2920)
- [Update command to generate blocks](https://github.com/bisq-network/bisq/pull/2945)

### Assets
Added four new asset: Genesis (GENX), Know Your Developer (KYD), Myce (YCE), Starwels (USDH)

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: ""This key is not certified with a trusted signature!"" - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.1.3.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-1.1.3.jar`
The output need to match the value from the Bisq-1.1.3.jar.txt file.


## Known issues with installation 

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\<username>\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\<username>\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.1.3.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. 

## Cleanup tool for saved trades that failed market price check

With this release we are also shipping a cleanup tool (Bisq-cleanup-trades*). It will remove corrupt trade entries added due to bug https://github.com/bisq-network/bisq/issues/2924. Install and run once, it will shut down automatically, then install version 1.1.3 or later. You can verify the binary the same way as you do with the Bisq application.",17662022
372,False,False,2019-06-04T08:49:20Z,2019-06-04T09:05:09Z,"**A newer version is already available! Please don’t use this version anymore.**

## Release notes
This version fixes DAO synchronization issues with seed nodes on startup and also includes additional bug fixes and improvements.

### DAO
- [Add missing dust check](https://github.com/bisq-network/bisq/pull/2827)
- [Fix synchronization issue with seed nodes on startup](https://github.com/bisq-network/bisq/pull/2821)
- [Fix DAO sync text after restore from seed](https://github.com/bisq-network/bisq/pull/2836)
- [Fix confirm lockup transaction prompt showing incorrect estimated time](https://github.com/bisq-network/bisq/pull/2844)
- [Fix peer handling for address display and signing](https://github.com/bisq-network/bisq/pull/2854)

### UI
- [Fix linguistic issues in the English version](https://github.com/bisq-network/bisq/pull/2858)
- [Fix issue with label width in contract window and add deposits in dispute summary](https://github.com/bisq-network/bisq/pull/2830)

### Trading
- [Use minTakerFee when calculating taker fee](https://github.com/bisq-network/bisq/pull/2846)

### Privacy
- [Fix useless use of IPv6 (Tails interop issue)](https://github.com/bisq-network/bisq/issues/2840)

### Assets
Added two new asset: Burnt BlackCoin (BLK-BURNT), ZeroClassic (ZERC)

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: ""This key is not certified with a trusted signature!"" - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.1.2.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-1.1.2.jar`
The output need to match the value from the Bisq-1.1.2.jar.txt file.


## Known issues with installation 

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\<username>\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\<username>\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.1.2.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. ",17662022
373,False,False,2019-05-06T08:47:12Z,2019-05-06T09:14:57Z,"**A newer version is already available! Please don’t use this version anymore.**

This is a hotfix release mainly covering following issue:
- [Allow seller to take any offers](https://github.com/bisq-network/bisq/pull/2813)

_Here are the release notes from v1.1.0:_

## Release notes
This release adds an impotant security meassurement to protect against the bank chargeback scammer. With this in place we can remove the banning of certain SEPA regions and Interac scheduled for the 5th of May. 

The new restrictions are as follows:
If a fiat payment account was created after March 1st 2019 it is considered risky and limited to 0.01 BTC trades if the account holder is the BTC buyer. For the seller there is no restriction. The restriction is applied to all payment methods based on bank transfers which carry some chargeback risk (Sepa, Sepa Instant, Interact, Zelle, Revolut, National bank transfers, Chase Quick Pay, Popmoney, Moneybeam, Uphold).

On May 5th we will block old accounts from trading to enable us to unblock the banned SEPA regions and Interac. So please **update as soon as possible**!

This solution is an intermediary step on the way to a more sophisticated protection solution (see [proposals](https://github.com/bisq-network/proposals/issues/78)) but those will require more time to get implemented.

Beside that there are some other important fixes:
- Fix account age display in peer avatar
- Decrease the security deposit amount for altcoins
- Improve BSQ block propagation
- Add search field to trade history

### DAO
- [Request blocks in case we have not received it](https://github.com/bisq-network/bisq/pull/2730)
- [Add node address and capabilities to prevent timeout](https://github.com/bisq-network/bisq/pull/2732)
- [Fix issues with DAO full mode in preferences](https://github.com/bisq-network/bisq/pull/2736)
- [Count cycles correctly](https://github.com/bisq-network/bisq/pull/2757)

### UI
- [Add UTF8 for getBytes calls](https://github.com/bisq-network/bisq/pull/2737)
- [Use existing styling for developer alert message](https://github.com/bisq-network/bisq/pull/2746)
- [Use same precision for all x-axis labels](https://github.com/bisq-network/bisq/pull/2763)

### Trading
- [Add check for account age to apply restrictions](https://github.com/bisq-network/bisq/pull/2801)
- [Improve ignore list](https://github.com/bisq-network/bisq/pull/2733)
- [Improve handling of editing of offers with invalid security deposit](https://github.com/bisq-network/bisq/pull/2740)
- [Use different security deposit for fiat-crypto and crypto-crypto trades](https://github.com/bisq-network/bisq/pull/2742)
- [Add filter to trade history](https://github.com/bisq-network/bisq/pull/2752)
- [Fix account age display of peer](https://github.com/bisq-network/bisq/pull/2753)
- [Don't disable confirm buttons](https://github.com/bisq-network/bisq/pull/2764)

### Wallet
- [Set p2shHeader to fix address validation issues](https://github.com/bisq-network/bisq/pull/2728)

### Development
- [Remove BSQ filter for crypto currencies](https://github.com/bisq-network/bisq/pull/2734)
- [Reflect pricenode operator change in ProvidersRepository](https://github.com/bisq-network/bisq/pull/2769)
- [Update mobile notification relay node DEV_URL IP address](https://github.com/bisq-network/bisq/pull/2770)

### Assets
Added two new asset: List Trust Eth reOrigin (TEO) and ParsiCoin (PARS)

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: ""This key is not certified with a trusted signature!"" - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.1.1.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-1.1.1.jar`
The output need to match the value from the Bisq-1.1.1.jar.txt file.


## Known issues with installation 

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\<username>\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\<username>\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.1.1.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. ",17662022
374,False,False,2019-05-03T10:34:21Z,2019-05-03T10:56:27Z,"**A newer version is already available! Please don’t use this version anymore.**
_Binaries have been removed as this release is superseded by v1.1.1_

## Release notes
This release adds an impotant security meassurement to protect against the bank chargeback scammer. With this in place we can remove the banning of certain SEPA regions and Interac scheduled for the 5th of May. 

The new restrictions are as follows:
If a fiat payment account was created after March 15th 2019 it is considered risky and limited to 0.01 BTC trades if the account holder is the BTC buyer. For the seller there is no restriction. The restriction is applied to all payment methods based on bank transfers which carry some chargeback risk (Sepa, Sepa Instant, Interact, Zelle, Revolut, National bank transfers, Chase Quick Pay, Popmoney, Moneybeam, Uphold).

On May 5th we will block old accounts from trading to enable us to unblock the banned SEPA regions and Interac. So please **update as soon as possible**!

This solution is an intermediary step on the way to a more sophisticated protection solution (see [proposals](https://github.com/bisq-network/proposals/issues/78)) but those will require more time to get implemented.

Beside that there are some other important fixes:
- Fix account age display in peer avatar
- Decrease the security deposit amount for altcoins
- Improve BSQ block propagation
- Add search field to trade history

### DAO
- [Request blocks in case we have not received it](https://github.com/bisq-network/bisq/pull/2730)
- [Add node address and capabilities to prevent timeout](https://github.com/bisq-network/bisq/pull/2732)
- [Fix issues with DAO full mode in preferences](https://github.com/bisq-network/bisq/pull/2736)
- [Count cycles correctly](https://github.com/bisq-network/bisq/pull/2757)

### UI
- [Add UTF8 for getBytes calls](https://github.com/bisq-network/bisq/pull/2737)
- [Use existing styling for developer alert message](https://github.com/bisq-network/bisq/pull/2746)
- [Use same precision for all x-axis labels](https://github.com/bisq-network/bisq/pull/2763)

### Trading
- [Add check for account age to apply restrictions](https://github.com/bisq-network/bisq/pull/2801)
- [Improve ignore list](https://github.com/bisq-network/bisq/pull/2733)
- [Improve handling of editing of offers with invalid security deposit](https://github.com/bisq-network/bisq/pull/2740)
- [Use different security deposit for fiat-crypto and crypto-crypto trades](https://github.com/bisq-network/bisq/pull/2742)
- [Add filter to trade history](https://github.com/bisq-network/bisq/pull/2752)
- [Fix account age display of peer](https://github.com/bisq-network/bisq/pull/2753)
- [Don't disable confirm buttons](https://github.com/bisq-network/bisq/pull/2764)

### Wallet
- [Set p2shHeader to fix address validation issues](https://github.com/bisq-network/bisq/pull/2728)

### Development
- [Remove BSQ filter for crypto currencies](https://github.com/bisq-network/bisq/pull/2734)
- [Reflect pricenode operator change in ProvidersRepository](https://github.com/bisq-network/bisq/pull/2769)
- [Update mobile notification relay node DEV_URL IP address](https://github.com/bisq-network/bisq/pull/2770)

### Assets
Added two new asset: List Trust Eth reOrigin (TEO) and ParsiCoin (PARS)

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: ""This key is not certified with a trusted signature!"" - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.1.0.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-1.1.0.jar`
The output need to match the value from the Bisq-1.1.0.jar.txt file.


## Known issues with installation 

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\<username>\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\<username>\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.1.0.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. ",17662022
375,False,False,2019-04-16T14:11:56Z,2019-04-16T15:11:08Z,"**A newer version is already available! Please don’t use this version anymore.**

This is a hotfix release mainly covering following two issues:
- [Rebroadcast new blocks at lite nodes to improve DAO synchronization](https://github.com/bisq-network/bisq/pull/2719)
- [Fix wrong calculation of percentage based security deposit in edit offer screen](https://github.com/bisq-network/bisq/pull/2723)

_Here are the release notes from v1.0.0:_

## Release notes
We are proud to announce the release of version 1.0 - the most important milestone since Bisq has been launched!

- Bisq’s trading network was already decentralized. With the Bisq DAO, Bisq’s leadership is now decentralized too, making Bisq exceptionally resistant to censorship.
- Get a 90% discount on trading fees when you use BSQ. Save money and support the project at the same time!
- Trade BSQ (colored bitcoin) to participate in Bisq governance. You can buy and sell BSQ just like any other asset on Bisq.

### Bisq DAO
- [Add genesis transaction and changes required for v1.0.0](https://github.com/bisq-network/bisq/pull/2648)
- [Improve handling of DAO state conflicts](https://github.com/bisq-network/bisq/pull/2674)
- Add DAO launch popup [1](https://github.com/bisq-network/bisq/pull/2688), [2](https://github.com/bisq-network/bisq/pull/2689), [3](https://github.com/bisq-network/bisq/pull/2696), [3](https://github.com/bisq-network/bisq/pull/2701), [4](https://github.com/bisq-network/bisq/pull/2703)
- [Add missing check to prevent re-selection of proposal](https://github.com/bisq-network/bisq/pull/2700)

### UI
- [Update list of removed assets](https://github.com/bisq-network/bisq/pull/2680)
- [Left align hyperlinks](https://github.com/bisq-network/bisq/pull/2690)
- [Remove non-core languages (ro, hu, sr)](https://github.com/bisq-network/bisq/pull/2697)
- [Prevent text overlapping in popups](https://github.com/bisq-network/bisq/pull/2699)

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: ""This key is not certified with a trusted signature!"" - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.0.1.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-1.0.1.jar`
The output need to match the value from the Bisq-1.0.1.jar.txt file.


## Known issues with installation 

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\<username>\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\<username>\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.0.1.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. ",17662022
376,False,False,2019-04-15T15:23:16Z,2019-04-15T15:55:25Z,"**A newer version is already available! Please don’t use this version anymore.**
_Binaries have been removed as this release is superseded by v1.0.1_

## Release notes
We are proud to announce the release of version 1.0.0 - the most important milestone since Bisq has been launched!

- Bisq’s trading network was already decentralized. With the Bisq DAO, Bisq’s leadership is now decentralized too, making Bisq exceptionally resistant to censorship.
- Get a 90% discount on trading fees when you use BSQ. Save money and support the project at the same time!
- Trade BSQ (colored bitcoin) to participate in Bisq governance. You can buy and sell BSQ just like any other asset on Bisq.

### Bisq DAO
- [Add genesis transaction and changes required for v1.0.0](https://github.com/bisq-network/bisq/pull/2648)
- [Improve handling of DAO state conflicts](https://github.com/bisq-network/bisq/pull/2674)
- Add DAO launch popup [1](https://github.com/bisq-network/bisq/pull/2688), [2](https://github.com/bisq-network/bisq/pull/2689), [3](https://github.com/bisq-network/bisq/pull/2696), [3](https://github.com/bisq-network/bisq/pull/2701), [4](https://github.com/bisq-network/bisq/pull/2703)
- [Add missing check to prevent re-selection of proposal](https://github.com/bisq-network/bisq/pull/2700)

### UI
- [Update list of removed assets](https://github.com/bisq-network/bisq/pull/2680)
- [Left align hyperlinks](https://github.com/bisq-network/bisq/pull/2690)
- [Remove non-core languages (ro, hu, sr)](https://github.com/bisq-network/bisq/pull/2697)
- [Prevent text overlapping in popups](https://github.com/bisq-network/bisq/pull/2699)

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: ""This key is not certified with a trusted signature!"" - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.0.0.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-1.0.0.jar`
The output need to match the value from the Bisq-1.0.0.jar.txt file.


## Known issues with installation 

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\<username>\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\<username>\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.0.0.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. ",17662022
377,False,False,2019-04-08T10:11:28Z,2019-04-08T13:50:48Z,"**A newer version is already available! Please don’t use this version anymore.**

## Release notes
This is a release focused on issues within the Bisq DAO on our DAO Testnet. Everyone who participates in testing please update to this release to continue with testing!

### Bisq DAO (on our DAO Testnet)
- [Protect against late blind vote publishing](https://github.com/bisq-network/bisq/pull/2667)
- [Use cryptographic hash from protobuffer serialized data instead of hashCode](https://github.com/bisq-network/bisq/pull/2665)
- [Add information of Satoshis needed for coloring](https://github.com/bisq-network/bisq/pull/2638)
- [Improve transaction display for BTC withdrawal from BSQ wallet](https://github.com/bisq-network/bisq/pull/2655)
- [Add filter for min required version for DAO](https://github.com/bisq-network/bisq/pull/2670)
- [Handle selected proposal popup state when new block is parsed](https://github.com/bisq-network/bisq/pull/2636)
- [Update insufficient BTC warning for issuance proposals](https://github.com/bisq-network/bisq/pull/2643)
- [Close printWriter before renaming temp file](https://github.com/bisq-network/bisq/pull/2669)
- [Reword text in proposal fee pop-up](https://github.com/bisq-network/bisq/pull/2656)
- [Reduce transaction broadcast timeout](https://github.com/bisq-network/bisq/pull/2657)
- [Fix max available stake for voting showing negative](https://github.com/bisq-network/bisq/pull/2622)
- [Fix incorrect required BSQ amount in warning text](https://github.com/bisq-network/bisq/pull/2630)
- [Fix incorrect transaction size shown for bonding](https://github.com/bisq-network/bisq/pull/2652)
- [Fix typo](https://github.com/bisq-network/bisq/pull/2647)

### Trading
- [Change wrong name for Siacoin in removed crypto list](https://github.com/bisq-network/bisq/pull/2635)

### Development
- [Add handling for bitcoinRegtestHost=none](https://github.com/bisq-network/bisq/pull/2646)

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: ""This key is not certified with a trusted signature!"" - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-0.9.8.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-0.9.8.jar`
The output need to match the value from the Bisq-0.9.8.jar.txt file.


## Known issues with installation 

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\<username>\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\<username>\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-0.9.8.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. ",17662022
378,False,False,2019-04-02T15:13:42Z,2019-04-02T15:28:03Z,"**A newer version is already available! Please don’t use this version anymore.**
This is a hotfix release to fix a rounding issue for market based price offers introduced in v0.9.6.

_Here are the release notes from v0.9.6:_

## Release notes
This will be the last feature release before the Bisq DAO goes live on Mainnet! It is not only packed with updates around the Bisq DAO, but also includes bug fixes for Tor startup, improvements in message handling and many more minor bug fixes.

### Bisq DAO (on our DAO Testnet)
- Lots of UI improvements [1](https://github.com/bisq-network/bisq/pull/2566), [2](https://github.com/bisq-network/bisq/pull/2595)
- [Show the correct BSQ or BTC trading fee if it is maker or taker](https://github.com/bisq-network/bisq/pull/2512)
- [Add Facts & Figures section](https://github.com/bisq-network/bisq/pull/2513)
- [Make vote result JSON deterministic](https://github.com/bisq-network/bisq/pull/2515)
- [Add transaction id to proposal display](https://github.com/bisq-network/bisq/pull/2519)
- [Add feedback popup for DAO test users](https://github.com/bisq-network/bisq/pull/2521)
- [Add hash of DAO state](https://github.com/bisq-network/bisq/pull/2532)
- [Don't show locally rejected proposals as accepted in UI](https://github.com/bisq-network/bisq/pull/2528)
- [Improve data structure, validation and performance](https://github.com/bisq-network/bisq/pull/2556)
- [Add mining fee to un/lock bond popup](https://github.com/bisq-network/bisq/pull/2577)
- [Add ISSUANCE_LIMIT param and check for max issuance per cycle](https://github.com/bisq-network/bisq/pull/2584)
- [Prevent BSQ offers below dust limit](https://github.com/bisq-network/bisq/pull/2592)
- [Add irregular txType, add check for total balance, prevent proposal withhold attack](https://github.com/bisq-network/bisq/pull/2587)
- [Add missing check for mandatory BSQ output](https://github.com/bisq-network/bisq/pull/2614)
- [Fix get all bonds not returning not active bonds](https://github.com/bisq-network/bisq/pull/2576)

### Trading
- [Add removed deprecated payment methods again as it would break trade history](https://github.com/bisq-network/bisq/pull/2505)
- [Set max buyer's security deposit to 20% instead of 10%](https://github.com/bisq-network/bisq/pull/2575)
- [Improve broadcasting of transactions](https://github.com/bisq-network/bisq/pull/2536)
- [Suppress popup at shutdown when open offers are disabled](https://github.com/bisq-network/bisq/pull/2569)
- [Increase request timeouts](https://github.com/bisq-network/bisq/pull/2583)

### Wallet
- [Improve restore wallet from seed process](https://github.com/bisq-network/bisq/pull/2524)
- [Fix missing balance at restore from seed words](https://github.com/bisq-network/bisq/pull/2517)

### UI
- Lots of typos and grammar mistakes fixed [1](https://github.com/bisq-network/bisq/pull/2582), [2](https://github.com/bisq-network/bisq/pull/2531), [3](https://github.com/bisq-network/bisq/pull/2565)
- [Show close button when creating offer without required account](https://github.com/bisq-network/bisq/pull/2590)
- [Show fiat rounding info popup also when switching between payment accounts](https://github.com/bisq-network/bisq/pull/2598)
- [Fix error and improve wording for security deposit](https://github.com/bisq-network/bisq/pull/2511)
- [Fix BTC status incorrectly hidden on splash screen](https://github.com/bisq-network/bisq/pull/2567)
- [Make create offer label cases easier to translate](https://github.com/bisq-network/bisq/pull/2606)

### Development
- [Use the latest bitcoinj version](https://github.com/bisq-network/bisq/pull/2602)
- [Move clear blockstore feature to bitcoinj](https://github.com/bisq-network/bisq/pull/2563)

### Privacy
- [Fix exception handling during Tor setup](https://github.com/bisq-network/bisq/pull/2538)
- [Update Netlayer to 0.6.5](https://github.com/bisq-network/bisq/pull/2581)

### Monitoring
- [Added market metric](https://github.com/bisq-network/bisq/pull/2507)

### Assets
- Added 4 new assets: Amitycoin (AMIT), Navcoin (NAV), Qwertycoin (QWC), XDR (XDR0)

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: ""This key is not certified with a trusted signature!"" - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-0.9.7.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-0.9.7.jar`
The output need to match the value from the Bisq-0.9.7.jar.txt file.


## Known issues with installation 

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\<username>\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\<username>\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-0.9.7.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. ",17662022
379,False,False,2019-04-02T09:20:23Z,2019-04-02T09:26:48Z,"**A newer version is already available! Please don’t use this version anymore.**
_Binaries have been removed as this release is superseded by v0.9.7._

## Release notes
This will be the last feature release before the Bisq DAO goes live on Mainnet! It is not only packed with updates around the Bisq DAO, but also includes bug fixes for Tor startup, improvements in message handling and many more minor bug fixes.

### Bisq DAO (on our DAO Testnet)
- Lots of UI improvements [1](https://github.com/bisq-network/bisq/pull/2566), [2](https://github.com/bisq-network/bisq/pull/2595)
- [Show the correct BSQ or BTC trading fee if it is maker or taker](https://github.com/bisq-network/bisq/pull/2512)
- [Add Facts & Figures section](https://github.com/bisq-network/bisq/pull/2513)
- [Make vote result JSON deterministic](https://github.com/bisq-network/bisq/pull/2515)
- [Add transaction id to proposal display](https://github.com/bisq-network/bisq/pull/2519)
- [Add feedback popup for DAO test users](https://github.com/bisq-network/bisq/pull/2521)
- [Add hash of DAO state](https://github.com/bisq-network/bisq/pull/2532)
- [Don't show locally rejected proposals as accepted in UI](https://github.com/bisq-network/bisq/pull/2528)
- [Improve data structure, validation and performance](https://github.com/bisq-network/bisq/pull/2556)
- [Add mining fee to un/lock bond popup](https://github.com/bisq-network/bisq/pull/2577)
- [Add ISSUANCE_LIMIT param and check for max issuance per cycle](https://github.com/bisq-network/bisq/pull/2584)
- [Prevent BSQ offers below dust limit](https://github.com/bisq-network/bisq/pull/2592)
- [Add irregular txType, add check for total balance, prevent proposal withhold attack](https://github.com/bisq-network/bisq/pull/2587)
- [Add missing check for mandatory BSQ output](https://github.com/bisq-network/bisq/pull/2614)
- [Fix get all bonds not returning not active bonds](https://github.com/bisq-network/bisq/pull/2576)

### Trading
- [Add removed deprecated payment methods again as it would break trade history](https://github.com/bisq-network/bisq/pull/2505)
- [Set max buyer's security deposit to 20% instead of 10%](https://github.com/bisq-network/bisq/pull/2575)
- [Improve broadcasting of transactions](https://github.com/bisq-network/bisq/pull/2536)
- [Suppress popup at shutdown when open offers are disabled](https://github.com/bisq-network/bisq/pull/2569)
- [Increase request timeouts](https://github.com/bisq-network/bisq/pull/2583)

### Wallet
- [Improve restore wallet from seed process](https://github.com/bisq-network/bisq/pull/2524)
- [Fix missing balance at restore from seed words](https://github.com/bisq-network/bisq/pull/2517)

### UI
- Lots of typos and grammar mistakes fixed [1](https://github.com/bisq-network/bisq/pull/2582), [2](https://github.com/bisq-network/bisq/pull/2531), [3](https://github.com/bisq-network/bisq/pull/2565)
- [Show close button when creating offer without required account](https://github.com/bisq-network/bisq/pull/2590)
- [Show fiat rounding info popup also when switching between payment accounts](https://github.com/bisq-network/bisq/pull/2598)
- [Fix error and improve wording for security deposit](https://github.com/bisq-network/bisq/pull/2511)
- [Fix BTC status incorrectly hidden on splash screen](https://github.com/bisq-network/bisq/pull/2567)
- [Make create offer label cases easier to translate](https://github.com/bisq-network/bisq/pull/2606)

### Development
- [Use the latest bitcoinj version](https://github.com/bisq-network/bisq/pull/2602)
- [Move clear blockstore feature to bitcoinj](https://github.com/bisq-network/bisq/pull/2563)

### Privacy
- [Fix exception handling during Tor setup](https://github.com/bisq-network/bisq/pull/2538)
- [Update Netlayer to 0.6.5](https://github.com/bisq-network/bisq/pull/2581)

### Monitoring
- [Added market metric](https://github.com/bisq-network/bisq/pull/2507)

### Assets
- Added 4 new assets: Amitycoin (AMIT), Navcoin (NAV), Qwertycoin (QWC), XDR (XDR0)

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: ""This key is not certified with a trusted signature!"" - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-0.9.6.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-0.9.6.jar`
The output need to match the value from the Bisq-0.9.6.jar.txt file.


## Known issues with installation 

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\<username>\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\<username>\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-0.9.6.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. ",17662022
380,False,False,2019-03-06T09:05:17Z,2019-03-06T14:43:29Z,"**A newer version is already available! Please don’t use this version anymore.**

## Release notes
This release introduces  **instant trading** for altcoins (trade duration < 1 hour), **percentage based security deposits** to better match the traded amount and other bug fixes across the board. Especially the problem with lost trading fees should be a thing of the past from now on.

One important feature for the Bisq DAO is now also included in this version: Spending of unconfirmed BSQ change outputs.

So there are many reasons to update to this version including 13 new assets.

### Bisq DAO (on our DAO Testnet)
- [Allow spending of unconfirmed BSQ change outputs](https://github.com/bisq-network/bisq/pull/2482)
- [Show valuation in BTC balance tooltips](https://github.com/bisq-network/bisq/pull/2481)
- [Update bond lockup prompt](https://github.com/bisq-network/bisq/pull/2487)
- [Fix incorrect available balance for voting](https://github.com/bisq-network/bisq/pull/2462)

### Trading
- [Add altcoin payment method for live trading](https://github.com/bisq-network/bisq/pull/2490)
- [Use percentage based value for security deposit](https://github.com/bisq-network/bisq/pull/2498)
- [Fix lost taker fee problem by delaying broadcasting of taker fee tx](https://github.com/bisq-network/bisq/pull/2488)
- [Fix memory leak in message throttle mechanism](https://github.com/bisq-network/bisq/pull/2475)

### UI
- [Fix system tray visibility for macOS in dark mode](https://github.com/bisq-network/bisq/pull/2492)
- [Fix issue in multi-screen environment on Linux](https://github.com/bisq-network/bisq/pull/2460)
- [Fix Windows system tray icon resolution](https://github.com/bisq-network/bisq/pull/2467)

### Development
- [Seed node repo refactoring](https://github.com/bisq-network/bisq/pull/2464)
- [Add program arguments for p2p network config](https://github.com/bisq-network/bisq/pull/2494)
- [Remove Log.traceCall methods to improve performance](https://github.com/bisq-network/bisq/pull/2500)

### Build
- [Add MacOS support in install_java.sh script](https://github.com/bisq-network/bisq/pull/2483)

### Installation
- [Update installer background for macOS](https://github.com/bisq-network/bisq/pull/2471)

### Assets
- Added 13 new assets: Arqma (ARQ), Bitzec (BZC), CloakCoin (CLOAK), Doichain (DOI), DSTRA (DST), Galilel (GALI), Hatch (HATCH), Helium (HLM), LitecoinPlus (LCP), MirQuiX (MQX), Plenteum (PLE), Veil (VEIL), XDR (XDR)

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: ""This key is not certified with a trusted signature!"" - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-0.9.5.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-0.9.5.jar`
The output need to match the value from the Bisq-0.9.5.jar.txt file.


## Known issues with installation 

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\<username>\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\<username>\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-0.9.5.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. ",17662022
381,False,False,2019-02-21T22:25:27Z,2019-02-21T22:27:26Z,"**A newer version is already available! Please don’t use this version anymore.**

## Release notes

This release is featuring a 2x increase of the current trade limits for fiat and altcoins, lots of improvements for the Bisq DAO on our DAO Testnet and includes bug fixes across the app. You should update to this release especially if you had problems restoring your wallet or tor related startup issues.

### Bisq DAO (on our DAO Testnet)
- [Enable DAO menu item for Mainnet](https://github.com/bisq-network/bisq/pull/2342)
- [Show DAO news badge](https://github.com/bisq-network/bisq/pull/2394)
- [Add additional information on DAO](https://github.com/bisq-network/bisq/pull/2421)
- [Show warning for bonded role if user has insufficient funds](https://github.com/bisq-network/bisq/pull/2386)
- [Show information while DAO is synchronized](https://github.com/bisq-network/bisq/pull/2388)
- [Show information if no proposal can be created right now](https://github.com/bisq-network/bisq/pull/2372)
- [Adjust length of DAO phases depending on network](https://github.com/bisq-network/bisq/pull/2277)
- [Show BSQ trading fee more explicitly when funding your offer](https://github.com/bisq-network/bisq/pull/2379)
- [Wait until proposal is published before resetting the form](https://github.com/bisq-network/bisq/pull/2384)
- [Add link from confiscation proposal to bond view](https://github.com/bisq-network/bisq/pull/2366)
- [Filter out blind votes not included in majority hash](https://github.com/bisq-network/bisq/pull/2371)
- [Handle republishing of all DAO governance data](https://github.com/bisq-network/bisq/pull/2363)
- [Handle properly burn cases](https://github.com/bisq-network/bisq/pull/2365)
- [Avoid BSQ burn by mistake](https://github.com/bisq-network/bisq/pull/2242)
- [Fix issues with majority hash](https://github.com/bisq-network/bisq/pull/2360)
- [Fix incorrect time shown in phase duration](https://github.com/bisq-network/bisq/pull/2313)
- [Fix snapshot issue](https://github.com/bisq-network/bisq/pull/2329)
- [Fix incorrect phase display](https://github.com/bisq-network/bisq/pull/2333)
- [Fix missing removal of old or invalid proposals](https://github.com/bisq-network/bisq/pull/2377)
- [Fix roll over behaviour of highlighted table titles](https://github.com/bisq-network/bisq/pull/2370)

### Trading
- [Increase trade limit. Make trade limit a DAO parameter](https://github.com/bisq-network/bisq/pull/2413)
- [Show all offers in offer book dashboard](https://github.com/bisq-network/bisq/pull/2318)
- [Improve Monero and Cryptonote address validator](https://github.com/bisq-network/bisq/pull/2422)
- [Add info popup for BEAM accounts. Improve GRIN info popup text.](https://github.com/bisq-network/bisq/pull/2423)
- [Remove email for Revolut account](https://github.com/bisq-network/bisq/pull/2426)
- [Add more instructions at dispute system message](https://github.com/bisq-network/bisq/pull/2428)
- [Improve handling of removed assets](https://github.com/bisq-network/bisq/pull/2306)
- [Allow payment account selection in fund offer screen](https://github.com/bisq-network/bisq/pull/2315)
- [Fix trade currency handling for multiple currency payment accounts](https://github.com/bisq-network/bisq/pull/2310)

### UI
- [Improve resizing of buy and sell tables](https://github.com/bisq-network/bisq/pull/2317)
- [Not show warning popup for imported payment accounts](https://github.com/bisq-network/bisq/pull/2316)
- [Add Altcoin disclaimer](https://github.com/bisq-network/bisq/pull/2233)
- [Fix grammatical mistakes and errors in display strings](https://github.com/bisq-network/bisq/pull/2314)
- [Fix offer book chart is not updated](https://github.com/bisq-network/bisq/pull/2237)

### Privacy/Security/Network
- [Delete tor files at startup](https://github.com/bisq-network/bisq/pull/2344)
- [Improve handling when unable to connect to tor](https://github.com/bisq-network/bisq/pull/2399)

### Wallet
- [Fix wallet restore issue on Windows](https://github.com/bisq-network/bisq/pull/2403)

### Development
- [Allow host as bitcoinRegtestHost parameter](https://github.com/bisq-network/bisq/pull/2312)
- [Allow tor to be used with regtest](https://github.com/bisq-network/bisq/pull/2346)
- [Remove libdohj dependency](https://github.com/bisq-network/bisq/pull/2368)
- [Add scripts to autosetup dao on regtest](https://github.com/bisq-network/bisq/pull/2405)
- [Add application launchers for UI test files](https://github.com/bisq-network/bisq/pull/2389)

### Build
- [Improve JAVA_HOME override](https://github.com/bisq-network/bisq/pull/2248)
- [Add execute permission for shell scripts](https://github.com/bisq-network/bisq/pull/2350)

### Installation
- [Fix windows install custom translations](https://github.com/bisq-network/bisq/pull/2247)
- [Update macOS installer background image](https://github.com/bisq-network/bisq/pull/2265)

### Infrastructure
- [First milestone of new monitoring](https://github.com/bisq-network/bisq/pull/2348)
Check it out at https://monitor.bisq.network

### Assets
- Added 19 new assets: Adeptio (ADE),  Askcoin (ASK), Augmint Euro (AEUR), AustraliaCash (AUS), BitDaric (DARX), Cash2 (CASH2), Credits (CRDS), CRowdCLassic (CRCL), DAI Stablecoin (DAI), DeepOnion (ONION), Fujicoin (FJC), LitecoinZ (LTZ), Lytix (LYTX), Mile (MILE), Persona (PRSN), TrueUSD (TUSD), USD Coin (USDC), VectorspaceAI (VXV), ZelCash (ZEL)

- Removed assets: Gridcoin (GRC) and ZeroOneCoin (ZOC)

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: ""This key is not certified with a trusted signature!"" - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-0.9.4.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-0.9.4.jar`
The output need to match the value from the Bisq-0.9.4.jar.txt file.


## Known issues with installation 

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\<username>\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\<username>\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-0.9.4.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. ",17662022
382,False,False,2019-01-08T18:54:48Z,2019-02-21T22:27:31Z,"## Release notes
**A newer version is already available! Please don’t use this version anymore.**

_Here are the release notes from v0.9.2:_

With this release the fee model of Bisq was simplified and the maker fee reduced. The Bisq trading fee for the offer maker is now a fixed percentage of 0.1% and for the taker it was increased from 0.2% to 0.3%. This should reflect the higher burden on the maker side and incentivize market makers.
Besides that we squashed some bugs in the Bisq DAO and improved the UI on multiple places. This release adds 19 new assets including the 2 Mimblewimble implementations Beam and Grin (Grin will be enabled as soon as it goes live on Mainnet).

### Bisq DAO (on Testnet)
- [Fix icon handling in vote result table](https://github.com/bisq-network/bisq/pull/2172)
- [Fix late proposals processing](https://github.com/bisq-network/bisq/pull/2191)
- [Fix vote reveal transaction publishing](https://github.com/bisq-network/bisq/pull/2195)
- [Fix performance issue at parsing](https://github.com/bisq-network/bisq/pull/2199)

### Trading
- [Simplify fee model by using fixed percentage](https://github.com/bisq-network/bisq/pull/2212)
- [Reduce maker fee to 0.1%](https://github.com/bisq-network/bisq/pull/2213)

### UI
- Updated existing translations and added Persian as new supported language
- Fix multiple typos and minor grammatical mistakes: [1](https://github.com/bisq-network/bisq/pull/2138), [2](https://github.com/bisq-network/bisq/pull/2148), [3](https://github.com/bisq-network/bisq/pull/2162), [4](https://github.com/bisq-network/bisq/pull/2185)
- [Reduce line height in certain tables](https://github.com/bisq-network/bisq/pull/2215)
- [Show more verbose label when taking an existing offer](https://github.com/bisq-network/bisq/pull/2215)
- [Show warning popup if multiple valid payment accounts are available for offer](https://github.com/bisq-network/bisq/pull/2215)
- [Improve padding of password input window](https://github.com/bisq-network/bisq/pull/2215)
- [Disable payment accounts combobox in pay funds screen when taking an offer](https://github.com/bisq-network/bisq/pull/2215)
- [Improve button hover effect, so it is not mistaken as disabled](https://github.com/bisq-network/bisq/pull/2187)
- [Update ""Next""-button on account change, when creating an offer](https://github.com/bisq-network/bisq/pull/2205)

### Privacy/Security
- Update to netlayer 0.6.3: [1](https://github.com/bisq-network/bisq/pull/2192), [2](https://github.com/bisq-network/bisq/pull/2194)

### Development
- [Improve Windows packaging process](https://github.com/bisq-network/bisq/pull/2163)
- [Improve Linux packaging process](https://github.com/bisq-network/bisq/pull/2190)
- Improve install_java.bat for Windows: [1](https://github.com/bisq-network/bisq/pull/2131), [2](https://github.com/bisq-network/bisq/pull/2165)
- [Configure default system JDK for Linux](https://github.com/bisq-network/bisq/pull/2211)
- [Remove pricenode direct dependency on assets](https://github.com/bisq-network/bisq/pull/2197)
- [Be able to upgrade bitcoinj without upgrading libdohj](https://github.com/bisq-network/bisq/pull/2198)
- [Preparations for http api](https://github.com/bisq-network/bisq/pull/2207)

### Installation
- [Improve Windows install experience](https://github.com/bisq-network/bisq/pull/2164)

### Infrastructure
- [Don't show filtered currencies](https://github.com/bisq-network/bisq/pull/2220)
- [Bisq Network Monitor: Milestone Babysteps](https://github.com/bisq-network/bisq/pull/2181)

### Assets
- Added 19 new assets:
Aeon (AEON), Beam (BEAM), Bitmark (BTM), Dextro (DXO), FourtyTwo (FRTY), GambleCoin (GMCN), Grin (GRIN) (will be enabled on Mainnet release), Horizen (ZEN), IdaPay (IDA), Iridium (IRD), Noir (NOR), Pinkcoin (PINK), Qbase (QBS), Remix (RMX), SiaPrimeCoin (SCP), SpaceCash (SPACE), UnitedCommunityCoin (UCC), Webchain (WEB), WrkzCoin (WRKZ)
- Removed not traded assets.

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: ""This key is not certified with a trusted signature!"" - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-0.9.3.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-0.9.3.jar`
The output need to match the value from the Bisq-0.9.3.jar.txt file.


## Known issues with installation 

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\<username>\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\<username>\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-0.9.3.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. ",17662022
383,False,False,2019-01-08T15:45:16Z,2019-01-08T15:54:17Z,"**A newer version is already available! Please don’t use this version anymore.**
_Binaries have been removed as this release is superseded by v0.9.3._

## Release notes
With this release the fee model of Bisq was simplified and the maker fee reduced. The Bisq trading fee for the offer maker is now a fixed percentage of 0.1% and for the taker it was increased from 0.2% to 0.3%. This should reflect the higher burden on the maker side and incentivize market makers.
Besides that we squashed some bugs in the Bisq DAO and improved the UI on multiple places. This release adds 19 new assets including the 2 Mimblewimble implementations Beam and Grin (Grin will be enabled as soon as it goes live on Mainnet).

### Bisq DAO (on Testnet)
- [Fix icon handling in vote result table](https://github.com/bisq-network/bisq/pull/2172)
- [Fix late proposals processing](https://github.com/bisq-network/bisq/pull/2191)
- [Fix vote reveal transaction publishing](https://github.com/bisq-network/bisq/pull/2195)
- [Fix performance issue at parsing](https://github.com/bisq-network/bisq/pull/2199)

### Trading
- [Simplify fee model by using fixed percentage](https://github.com/bisq-network/bisq/pull/2212)
- [Reduce maker fee to 0.1%](https://github.com/bisq-network/bisq/pull/2213)

### UI
- Updated existing translations and added Persian as new supported language
- Fix multiple typos and minor grammatical mistakes: [1](https://github.com/bisq-network/bisq/pull/2138), [2](https://github.com/bisq-network/bisq/pull/2148), [3](https://github.com/bisq-network/bisq/pull/2162), [4](https://github.com/bisq-network/bisq/pull/2185)
- [Reduce line height in certain tables](https://github.com/bisq-network/bisq/pull/2215)
- [Show more verbose label when taking an existing offer](https://github.com/bisq-network/bisq/pull/2215)
- [Show warning popup if multiple valid payment accounts are available for offer](https://github.com/bisq-network/bisq/pull/2215)
- [Improve padding of password input window](https://github.com/bisq-network/bisq/pull/2215)
- [Disable payment accounts combobox in pay funds screen when taking an offer](https://github.com/bisq-network/bisq/pull/2215)
- [Improve button hover effect, so it is not mistaken as disabled](https://github.com/bisq-network/bisq/pull/2187)
- [Update ""Next""-button on account change, when creating an offer](https://github.com/bisq-network/bisq/pull/2205)

### Privacy/Security
- Update to netlayer 0.6.3: [1](https://github.com/bisq-network/bisq/pull/2192), [2](https://github.com/bisq-network/bisq/pull/2194)

### Development
- [Improve Windows packaging process](https://github.com/bisq-network/bisq/pull/2163)
- [Improve Linux packaging process](https://github.com/bisq-network/bisq/pull/2190)
- Improve install_java.bat for Windows: [1](https://github.com/bisq-network/bisq/pull/2131), [2](https://github.com/bisq-network/bisq/pull/2165)
- [Configure default system JDK for Linux](https://github.com/bisq-network/bisq/pull/2211)
- [Remove pricenode direct dependency on assets](https://github.com/bisq-network/bisq/pull/2197)
- [Be able to upgrade bitcoinj without upgrading libdohj](https://github.com/bisq-network/bisq/pull/2198)
- [Preparations for http api](https://github.com/bisq-network/bisq/pull/2207)

### Installation
- [Improve Windows install experience](https://github.com/bisq-network/bisq/pull/2164)

### Infrastructure
- [Don't show filtered currencies](https://github.com/bisq-network/bisq/pull/2220)
- [Bisq Network Monitor: Milestone Babysteps](https://github.com/bisq-network/bisq/pull/2181)

### Assets
- Added 19 new assets:
Aeon (AEON), Beam (BEAM), Bitmark (BTM), Dextro (DXO), FourtyTwo (FRTY), GambleCoin (GMCN), Grin (GRIN) (will be enabled on Mainnet release), Horizen (ZEN), IdaPay (IDA), Iridium (IRD), Noir (NOR), Pinkcoin (PINK), Qbase (QBS), Remix (RMX), SiaPrimeCoin (SCP), SpaceCash (SPACE), UnitedCommunityCoin (UCC), Webchain (WEB), WrkzCoin (WRKZ)
- Removed not traded assets.

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: ""This key is not certified with a trusted signature!"" - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-0.9.2.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-0.9.2.jar`
The output need to match the value from the Bisq-0.9.2.jar.txt file.


## Known issues with installation 

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\<username>\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\<username>\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-0.9.2.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. ",17662022
384,False,False,2018-12-13T13:31:38Z,2018-12-13T13:34:58Z,"**A newer version is already available! Please don’t use this version anymore.**

## Release notes
This release is not only a bug fix release following v0.9.0 (Windows installation issues, switching between BTC networks not working,...), but contains also lots of improvements as well. Thanks to everyone who started testing of the Bisq DAO on Testnet already!

As we have updated to Java 10 and Oracle has dropped support for 32 bit Operating systems we cannot provide 32 bit binaries anymore.

### Bisq DAO (on Testnet)
- [Fix selection of BTC testnet in Settings](https://github.com/bisq-network/bisq/pull/2063)
- [Fix reorg issues](https://github.com/bisq-network/bisq/pull/2056)
- [Improve handling of reorgs](https://github.com/bisq-network/bisq/pull/2067)
- [Handle RPC errors](https://github.com/bisq-network/bisq/pull/2098)
- [UI improvements in Voting screen](https://github.com/bisq-network/bisq/pull/2094)
- [Fix validatation of display fields in proposal display](https://github.com/bisq-network/bisq/pull/2074)
- [Use animation for vote button](https://github.com/bisq-network/bisq/pull/2099)
- [Use uppercase in submenu items](https://github.com/bisq-network/bisq/pull/2109)

### Trading
- [Decrease the price tolerance window in offers](https://github.com/bisq-network/bisq/pull/2079)
- [Remove testnet and regtest for DASH and LTC](https://github.com/bisq-network/bisq/pull/2095)
- [Remove BCH](https://github.com/bisq-network/bisq/pull/2096)
- [Show rounded trade volume in contracts](https://github.com/bisq-network/bisq/pull/2111)

### Payment methods
- [Fix wrong positioning of requirements field in CashDeposit](https://github.com/bisq-network/bisq/pull/2060)

### UI
- [Improve startup time by updating checkpoint files](https://github.com/bisq-network/bisq/pull/2070)
- [Left align table columns to improve readability](https://github.com/bisq-network/bisq/pull/2062)
- [Refine various UI strings](https://github.com/bisq-network/bisq/pull/2104)
- [Bug fix: Close window without triggering action on ESC](https://github.com/bisq-network/bisq/pull/2077)
- [Bug fix: Views are sometimes not updated when switching quickly between sub sections](https://github.com/bisq-network/bisq/pull/2108)
- [Bug fix: Prevent duplicate popup windows](https://github.com/bisq-network/bisq/pull/2111)
- [Bug fix: Update validation of volume when percentage price is set](https://github.com/bisq-network/bisq/pull/2111)

### Privacy/Security
- [Stream isolation for Tor](https://github.com/bisq-network/bisq/pull/2081)

### Development
- [Consolidate install_java.sh scripts](https://github.com/bisq-network/bisq/pull/2055)
- [Update install_java.bat](https://github.com/bisq-network/bisq/pull/2085)
- [Bug fix: Surgical fix to default command line parameters](https://github.com/bisq-network/bisq/pull/2090)

### Installation
- [Bug fix: Windows installer issues](https://github.com/bisq-network/bisq/pull/2103)

### Assets
- Removed Bitcoin Cash (BCH) based on [stakeholder voting](https://github.com/bisq-network/proposals/issues/61)

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: ""This key is not certified with a trusted signature!"" - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-0.9.1.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-0.9.1.jar`
The output need to match the value from the Bisq-0.9.1.jar.txt file.


## Known issues with installation 

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\<username>\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\<username>\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-0.9.1.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. ",17662022
385,False,False,2018-12-03T20:52:49Z,2018-12-03T21:46:19Z,"**A newer version is already available! Please don’t use this version anymore.**

## Release notes
This release is one of our biggest in Bisq's history. Not only is the Bisq DAO code included for Testnet, but we've also redesigned the client from the ground up. Thanks to @pedromvpg for initiating and leading this Bisq redesign! Of course this release is packed as always with lots of bug fixes and UI improvements in general. 

As we have updated to Java 10 and Oracle has dropped support for 32 bit Operating systems we cannot provide 32 bit binaries anymore.


## Release notes:

### Bisq DAO (on Testnet)
- BSQ wallet (Send/Receive BSQ)
- Governance (Make and vote on proposals, create compensation requests, change DAO parameters, issue BSQ)
- Bonding (Create bonded roles/bonded reputation)
- Pay asset listing fee with BSQ
- Proof of burn with BSQ
- Pay trading fees with BSQ

### Trading
- [Warn users when closing the app with open offers](https://github.com/bisq-network/bisq/pull/1716)
- [Wait for offer availability check before allowing funding of wallet](https://github.com/bisq-network/bisq/pull/1775)
- [Add buyers payment account name to trade screen (if multiple payment accounts of the same type exist)](https://github.com/bisq-network/bisq/pull/1735)
- [Fix last request timestamp in price feed service](https://github.com/bisq-network/bisq/pull/1730)
- [Fix transaction broadcaster issue](https://github.com/bisq-network/bisq/pull/1763)

### Payment methods
- [Add Monero address validation](https://github.com/bisq-network/bisq/pull/1683)
- [Improve Monero trade info popup](https://github.com/bisq-network/bisq/pull/1720/files)
- [Update instructions for Monero transaction proof](https://github.com/bisq-network/bisq/pull/1902)
- [Add Citibank to Zelle](https://github.com/bisq-network/bisq/pull/1688)
- [Add info for Faster Payment that the receivers name is not required](https://github.com/bisq-network/bisq/pull/1694)
- [Add Contact info for F2F](https://github.com/bisq-network/bisq/pull/1713)
- [Add warning popup for Cash Deposit](https://github.com/bisq-network/bisq/pull/1822)
- [Add PromptPay (Thailand)](https://github.com/bisq-network/bisq/pull/1831)
- [Add Interac E-transfer question/answer validation](https://github.com/bisq-network/bisq/pull/1845)
- [Remove account age from limitations of altcoin accounts](https://github.com/bisq-network/bisq/pull/1747)

### UI
- Redesign: Bisq in a fresh new green look including lots of minor UI improvements and bug fixes
- Improved text in various places (by @arunasurya)
- New locales (Thai and Vietnamese) by @initCCG  
- [Avoid standby mode](https://github.com/bisq-network/bisq/pull/1712)
- [Optimize initial data load](https://github.com/bisq-network/bisq/pull/1905)
- [Increase display time of notifications](https://github.com/bisq-network/bisq/pull/1711)
- [Convert long dash to short dash for minus values](https://github.com/bisq-network/bisq/pull/1936)
- [Add blockstream.info as default explorer](https://github.com/bisq-network/bisq/pull/1919)
- [Limit initial window size on application launch](https://github.com/bisq-network/bisq/pull/1945)
- [Save ""Show all"" state in currency selector (Trade Charts) ](https://github.com/bisq-network/bisq/pull/1727)
- [Add arrow key support for preferences currency selection](https://github.com/bisq-network/bisq/pull/1774)
- [Add arrow key support for arbitrator language selection](https://github.com/bisq-network/bisq/pull/1774)
- [Fix truncation issue when using display scaling levels](https://github.com/bisq-network/bisq/pull/1767)
- [Fix issues with wrong base currency](https://github.com/bisq-network/bisq/pull/1913)

### Privacy/Security
- [Make torrc ""editable"" via system properties](https://github.com/bisq-network/bisq/pull/1893)
- [Use tor binaries from TorBrowser 8.0.3](https://github.com/bisq-network/bisq/pull/1928)

### Development
- [Move all repositories into one mono repository](https://github.com/bisq-network/bisq/pull/1650)
- [Add Java 10 support](https://github.com/bisq-network/bisq/pull/1660)

### Assets
- Add 25 new assets: 
Actinium (ACM), Bitcoin 2 (BTC2), Bitcoin Rhodium (XRC), Blur (BLUR), Chaucha (CHA), Croat (CROAT), Dragonglass (DRGL), EtherStone (ETHS), Kekcoin (KEK), Mask (MASK), MoX (MOX), MobitGlobal (MBGL), MonetaryUnit (MUE), Neos (NEOS), PZDC (PZDC), QMCoin (QMCoin), Radium (RADS), Ryo (RYO), SUB1X (SUB1X), Starwels (MAI), TurtleCoin (TRTL), Zero (ZER)
- Remove not traded assets.


## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: ""This key is not certified with a trusted signature!"" - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-0.9.0.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-0.9.0.jar`
The output need to match the value from the Bisq-0.9.0.jar.txt file.


## Known issues with installation 

### Windows:
There are some known issues (not introduced in that release) with installing Bisq on Windows.
The Windows installer does not cleanup or overwrite always correctly the old installation files. If you cannot start Bisq after installation please delete the application directory [1] (not the data directory! [2]). You could also try to uninstall Bisq from the operating system but then the data directory (including your wallet and account data) will be deleted as well. If you want to use the uninstall option be sure to have made a backup first and move the backup afterwards to the data directory location.

Another issue can be Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory or app directory) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\<username>\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\<username>\AppData\Roaming\Bisq


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-0.9.0.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. ",17662022
386,False,False,2018-11-12T21:13:34Z,2018-11-12T21:36:03Z,"**A newer version is already available! Please don’t use this version anymore.**

## Release notes
In this release only trade statistics and account age witness db was updated to improve startup time for a fresh install.

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: ""This key is not certified with a trusted signature!"" - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-0.8.1.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-0.8.1.jar`
The output need to match the value from the Bisq-0.8.1.jar.txt file.

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-0.8.1.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. ",17662022
387,False,False,2018-08-22T11:09:27Z,2018-08-22T11:29:21Z,"**A newer version is already available! Please don’t use this version anymore.**

## Release notes
This release adds two long requested payment methods (Face to Face payment and HalCash) improves everyone's privacy by rounding fiat values and finally adds support for mobile notifications for your trades, market activity and price alerts. Although currently hidden the DAO code is also part of this release.

### Trading
- [Rounding of fiat values to improve privacy](https://github.com/bisq-network/bisq-desktop/pull/1623)
- [Add mobile notifications](https://github.com/bisq-network/bisq-desktop/pull/1624)
- [Fix transaction broadcast issue](https://github.com/bisq-network/bisq-desktop/pull/1639)

### Payment methods
- [Add HalCash](https://github.com/bisq-network/bisq-desktop/pull/1619)
- [Add Face to Face payment](https://github.com/bisq-network/bisq-desktop/pull/1607)

### Assets
No new assets are listed until the [Listing fee policy proposal](https://github.com/bisq-network/proposals/issues/35) reaches consensus.

### UI
- [Add warning popup for languages not natively supported by arbitration](https://github.com/bisq-network/bisq-desktop/pull/1621)
- [Reflect new repository structure in issue links](https://github.com/bisq-network/bisq-desktop/pull/1605)
- [Fix reseting of amount column in trade statistics](https://github.com/bisq-network/bisq-desktop/pull/1620)

### Development
- [Added DAO code](https://github.com/bisq-network/bisq-desktop/pull/1627)
- [Refactoring of generics](https://github.com/bisq-network/bisq-desktop/pull/1610)

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: ""This key is not certified with a trusted signature!"" - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-0.8.0.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-0.8.0.jar`
The output need to match the value from the Bisq-0.8.0.jar.txt file.

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-0.8.0.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. ",17662022
388,False,False,2018-07-04T11:44:56Z,2018-07-04T14:01:48Z,"**A newer version is already available! Please don’t use this version anymore.**

## Release notes
This release adds acknowledgment status for trade, offer and dispute messages. This gives the user more information on each message status (message arrived, arrival confirmed, sent to mailbox) during its trade/dispute experience. Besides lots of bug fixes, MoneyGram was added as a new payment method and the account field for Argentinian banks support now non-standard account identifiers. 

### Trading
- [Ack messages for all trade, offer- and dispute messages](https://github.com/bisq-network/bisq-desktop/issues/1585)
- [Add referrer Id for external Bisq market makers](https://github.com/bisq-network/proposals/issues/28)
- [Fix bug in edit offer screen](https://github.com/bisq-network/bisq-desktop/pull/1583) 
- [Remove validation for Argentinian account numbers and allow manual edit](https://github.com/bisq-network/bisq-desktop/pull/1553)
- [Fix bug with Sepa offers and Sepa instant taker](https://github.com/bisq-network/bisq-core/issues/117)
- [Lower minimum withdrawal fee to 1 satoshi per byte](https://github.com/bisq-network/bisq-core/pull/111)
- [Fix reuse of change addresses](https://github.com/bisq-network/bisq-core/pull/113)
- [Don’t treat RBF transactions as risky](https://github.com/bisq-network/bisq-core/pull/124)
- [Fix wrong dust limit values in Bitcoinj](https://github.com/bisq-network/bitcoinj/commit/bbcb39b1c33c61f146265ace94ae54e21e1b8e47)
- [Deactivate Venmo and CashApp](https://github.com/bisq-network/bisq-core/pull/115)

### Payment methods
- Add new payment method: [MoneyGram](https://github.com/bisq-network/bisq-desktop/pull/1522)

### Assets
- Add 28 new assets: 01coin, Aquachain, BitCloud, Bitcoin Core, Bitcoin Instant, Credits, Cryptonodes, CryptoTari, DACash, Diamon, DRIP, FuturoCoin, Graft, LikeCoin, Lobstex, MaxCoin, MegaCoin, MicroCoin, Motion, Myriadcoin, Nano, NewPowerCoin, Nimiq, Pix, PixelPropertyToken, PRiVCY, Triton, Wavi
### UI
- [Add popup for feedback after trade completion](https://github.com/bisq-network/bisq-desktop/issues/1584)
- [Show popup if local Bitcoin core is running](https://github.com/bisq-network/bisq-desktop/issues/1566)
- [Fix wrong duration translation in double digit numbers](https://github.com/bisq-network/bisq-desktop/pull/1552)
- [Fix wrong singular word translation in double digit numbers](https://github.com/bisq-network/bisq-desktop/issues/1549)
- [Fix sorting of currencies in market/trades view](https://github.com/bisq-network/bisq-desktop/pull/1591)

### Development
- [Don’t include assets with diff. network type](https://github.com/bisq-network/bisq-core/pull/129)
- [Ignore “Alert key compromised” message from old nodes in Bitcoinj](https://github.com/bisq-network/bitcoinj/commit/6728ef8bfd685547fe38586302514f2eca6d426c)

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-0.7.1.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-0.7.1.jar`
The output need to match the value from the Bisq-0.7.1.jar.txt file.

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`",17662022
389,False,False,2018-05-11T17:40:27Z,2018-05-11T18:09:34Z,"**A newer version is already available! Please don’t use this version anymore.**

This release enables editing of offers, a long requested feature as well as a lot of UI improvements and WeChat Pay as a new payment method.

Release notes:
Trading:
- Add feature for editing offers

Payment methods:
- Add new payment method: WeChat Pay
- Add additional nationalAccountId field to enable national bank transfers in Argentina
- Show Bank ID (BIC/SWIFT) for cash deposit in offer detaisl window and show popup when taking the offer to make sure the taker has a local bank branch in his area
- Do not allow Sepa account for Revolut SEPA BICs (many banks did nto accept that BIC) 

Assets:
- Add new altcoins: Pied Piper Coin, 10grans, Angelcoin, Arto, BitZeny, Bitcore, DSTRA, Dinero, Exceed, GeoCoin, Instacash, Koto, Kumacoin, LitecoinExtreme, MFCoin, Madbyte, Mazacoin, NEETCOIN, Phore, Qwark, ROIcoin, Ringo, Semux, Strayacoin, Tamadcoin, Ubiq, WorldMobileCoin, Xuez

UI:
- Improve UI at create offer screen
- Improve UI at offerbook screen
- Improve UI at markets screen
- Add trader icon to offer book
- Adds information/warning icon for market based price input field
- Add monospace font support and optimize alignment for number columns
- Add number of open offers to currency filter popups
- Improve info during trade process
- Use auto focus on the first input field on all screens
- Support quick access to top nav items with Alt 1–9 keyboard shortcuts
- Make arbitration chat messages selectable
- Fix bug with sorting in spread view

Development:
- Migrate build from Maven to Gradle
- Break up project in several sub projects 
- Extract asset (altcoins) handling to own project

Url of the signing key (Manfred Karrer): https://bisq.network/pubkey/F379A1C6.asc
Full fingerprint: `1DC3 C8C4 316A 698A C494  039C F5B8 4436 F379 A1C6`

How to verify signatures?
    `gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-0.7.0.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
    `shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-0.7.0.jar`
The output need to match the value from the Bisq-0.7.0.jar.txt file.

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`",17662022
390,False,False,2018-02-27T01:23:07Z,2018-02-27T02:30:08Z,"A newer version is already available! Please don't use this version anymore.


This release fixes a bug when using national bank transfer for the US.

Release notes:
- Fix bug: Cannot select US national bank transfer in ""create offer view"" #1404 
- Fix bug: Cannot remove deactivated offer #1403

Url of the signing key (Manfred Karrer): https://bisq.network/pubkey/F379A1C6.asc
Full fingerprint: 1DC3 C8C4 316A 698A C494  039C F5B8 4436 F379 A1C6

How to verify signatures?
    $ gpg --digest-algo SHA256 --verify BINARY{.asc*,}
Replace BINARY with the file you downloaded (e.g. Bisq-0.5.1.dmg)


Hint for Debian users:
If you have problems starting Bisq on Debian use: /opt/Bisq/Bisq",17662022
391,False,False,2018-02-24T00:12:05Z,2018-02-24T01:54:10Z,"A newer version is already available! Please don't use this version anymore.


This release add a lot of new payment methods as well reduces the min. trade fee so that small trades become much cheaper! We also enable now to set a open offer inactive to give better control over offers in time of high volatility.
Don't miss that update!

Release notes:
- Reduce min. trade fee from 0.0002 BTC to 0.00005 BTC 
- Add option to set an open offer inactive 
- Add new payment methods: Venmo, Cash App (Square), Popmoney, Revolut, Uphold, MoneyBeam (N26)
- Re-enable national bank transfer (ACH, WIRE) for US
- Add TD Bank as Zelle memberbank
- Add popup for explaining the trade limits at account creation
- Add new altcoins: Stellite, Dai Stablecoin, Obsidian, BitDaric, Yenten, Cassubian Detk, DigiMoney, SpeedCash, SOS Coin, AchieveCoin, vDinar
- Change max. deviation of market price to 30% (in settings it can be extended to 50%)
- Fix wrong fee estimation (#1325)
- Fix bug with deactivated Cash deposit offers
- Fix bug with currency selection in create offer screen when a mulit-currency account is used

Url of the signing key (Manfred Karrer): https://bisq.network/pubkey/F379A1C6.asc
Full fingerprint: 1DC3 C8C4 316A 698A C494  039C F5B8 4436 F379 A1C6

How to verify signatures?
    $ gpg --digest-algo SHA256 --verify BINARY{.asc*,}
Replace BINARY with the file you downloaded (e.g. Bisq-0.5.1.dmg)


Hint for Debian users:
If you have problems starting Bisq on Debian use: /opt/Bisq/Bisq",17662022
392,False,False,2018-02-01T03:18:51Z,2018-02-01T03:26:01Z,"A newer version is already available! Please don't use this version anymore.


This release fixes issues with not broadcasted transactions when a Bitcoin node is running locally as well as a number of other issues.
Please update as soon as possible!

Release notes:
- Start counting remaining trade period after first blockchain confirmation
- Fix missing balance in UI after wallet restore from seed words 
- Change recovery handling if price provider node connection fails
- Add button to Tor settings popup for deleting outdated Tor files in case of connection problems
- Fix issue with not being able to delete spv chain file on Windows
- Change failing provider node and bitcoin node with new onion addresses

Url of the signing key (Manfred Karrer): https://bisq.network/pubkey/F379A1C6.asc
Full fingerprint: 1DC3 C8C4 316A 698A C494  039C F5B8 4436 F379 A1C6

How to verify signatures?
    $ gpg --digest-algo SHA256 --verify BINARY{.asc*,}
Replace BINARY with the file you downloaded (e.g. Bisq-0.5.1.dmg)


Hint for Debian users:
If you have problems starting Bisq on Debian use: /opt/Bisq/Bisq",17662022
393,False,False,2018-01-21T17:06:38Z,2018-01-21T19:12:38Z,"A newer version is already available! Please don't use this version anymore.


This release fixes issues with not broadcasted transactions when a Bitcoin node is running locally.
Please update as soon as possible!

Release notes:
- Only allow transaction broadcast if blockchain download is completed and connection to min required bitcoin nodes is done. 
- If connected to localhost Bitcoin node and connection get lost prevent that Bisq connects to public network.
- Show info in footer and splash screen if localhost Bitcoin node is available 
- Fix issues with price feed requests
- Fix issue with incorrect display of nr. of offers in spread view
- Add new altcoins: Creativecoin, Infinity Economics
- Add onion address to Bitcoin node btc.jochen-hoenicke.de

Url of the signing key (Manfred Karrer): https://bisq.network/pubkey/F379A1C6.asc
Full fingerprint: 1DC3 C8C4 316A 698A C494  039C F5B8 4436 F379 A1C6

How to verify signatures?
    $ gpg --digest-algo SHA256 --verify BINARY{.asc*,}
Replace BINARY with the file you downloaded (e.g. Bisq-0.5.1.dmg)


Hint for Debian users:
If you have problems starting Bisq on Debian use: /opt/Bisq/Bisq",17662022
394,False,False,2018-01-10T21:21:32Z,2018-01-11T00:09:41Z,"A newer version is already available! Please don't use this version anymore.


This release fixes with timeouts at tx broadcast and improves P2P network data redundancy.
Please update as soon as possible!

Release notes:
- Add timeout handler for tx broadcaster
- Change broadcast policy parameters: Min required connections: 4; broadcast to all connected nodes; wait to hear back from 2 nodes to complete broadcast call (or timeout triggers complete handler). 
- Revert change in 0.6.2 for disconnecting from seed node after reaching 6 connections
- Request initial data from several seed nodes instead of only one for more redundancy
- Optimize fee estimation policy for taker
- Add new altcoins: DeepOnion, WILD Token
- Deactivate stream isolation (hidden service are stream isolated by default)
- Fix wrong year at backup file name
- Fix NullPointer exception at seed word restore if data is not set
- Suppurt cmd+Enter shortcut for sending a dispute message
- Fix UI bugs (duplicate currency entries, not filtering edited currency list)
- Improve logs
- Improve seed node monitor
- Use different popup for Zcoin with instruction to only use transparent addresses


Url of the signing key (Manfred Karrer): https://bisq.network/pubkey/F379A1C6.asc
Full fingerprint: 1DC3 C8C4 316A 698A C494  039C F5B8 4436 F379 A1C6

How to verify signatures?
    $ gpg --digest-algo SHA256 --verify BINARY{.asc*,}
Replace BINARY with the file you downloaded (e.g. Bisq-0.5.1.dmg)


Hint for Debian users:
If you have problems starting Bisq on Debian use: /opt/Bisq/Bisq",17662022
395,False,False,2017-12-20T19:57:50Z,2017-12-20T20:43:27Z,"A newer version is already available! Please don't use this version anymore.


This release comes with important bug fixes and network stability improvements.
Please update as soon as possible!

Release notes:
- Improve withdrawal screen: Choose sending or receiving amount. Choose all available inputs or manual input selection.
- Add ""Update later"" button to download update window. Make version label clickable and show if new version is available.
- Only use hidden service btc nodes if Tor is enabled for BitcoinJ and provided nodes are used.
- Optimize P2P network startup behavior
- Separate fees in trade complete screen. 
- Show withdrawal btc address only after button click in trade complete screen. 
- Added new altcoins: Cagecoin, Spectrecoin, Verify
- Add more provided Bitcoin nodes
- Add more seed nodes
- Add more provider nodes (market price, miner fee estimation)
- Add second seed node for DASH and LTC
- Add filter for btc nodes
- Use domainname instead of IP if both are known for btc nodes
- Increase connection timeouts 
- Increase timeout for offer availability check
- Increase time for showing Tor settings at startup to 30 sec.
- Increase offer refresh and republish intervals and offer TTL.
- Decrease maxConnections for btc network from 10 to 9
- Remove unneeded broadcast trade fee tx tasks
- Remove checks for min. trade fee to enable change in upcoming versions
- Fix missing resort after price feed actualization
- Fix incorrect ordering of available offers
- Fix wrong sorting of markets column
- Fix for handling of modal window closing (some Linux windows managers)
- Only hide prompt text after user starts typing  
- Use currency name instead of code for compareTo
- Update docs 


Url of the signing key (Manfred Karrer): https://bisq.network/pubkey/F379A1C6.asc
Full fingerprint: 1DC3 C8C4 316A 698A C494  039C F5B8 4436 F379 A1C6

How to verify signatures?
    $ gpg --digest-algo SHA256 --verify BINARY{.asc*,}
Replace BINARY with the file you downloaded (e.g. Bisq-0.5.1.dmg)


Hint for Debian users:
If you have problems starting Bisq on Debian use: /opt/Bisq/Bisq",17662022
396,False,False,2017-11-27T01:06:11Z,2017-11-27T02:41:18Z,"A newer version is already available! Please don't use this version anymore.


This release adds SEPA Instant Payments as new payment method.

Release notes:
- Add SEPA Instant Payments as new payment method
- Add Madcoin, Bitcoin Cash, Bitcoin Clashic, Bitcoin Gold
- UI Improvements
- Reduce default nr. of connections to Bitcoin network from 12 to 10
- Add new Bitcoin nodes
- Fix price sorting bug at buy screen when an altcoin was selected
- Fix layout bug  
- Improve logging


Url of the signing key (Manfred Karrer): https://bisq.network/pubkey/F379A1C6.asc
Full fingerprint: 1DC3 C8C4 316A 698A C494  039C F5B8 4436 F379 A1C6

How to verify signatures?
    $ gpg --digest-algo SHA256 --verify BINARY{.asc*,}
Replace BINARY with the file you downloaded (e.g. Bisq-0.5.1.dmg)


Hint for Debian users:
If you have problems starting Bisq on Debian use: /opt/Bisq/Bisq",17662022
397,False,False,2017-11-16T15:40:39Z,2017-11-16T17:52:31Z,"A newer version is already available! Please don't use this version anymore.


The release comes with a lot of new features and improvements. Please update as soon as possible!

Release notes:
Big features:
* Add support for Tor bridges and pluggable transports (https://github.com/bisq-network/exchange/issues/998)
* Provide Bitcoin full nodes from Bisq developers (https://github.com/bisq-network/roles/issues/39) to protect against BitcoinJ vulnerabilities (BitcoinJ is blindly following longest PoW chain and not checking consensus rule violations). That also avoids the privacy issues with bloom filters. (https://github.com/bisq-network/exchange/issues/999)
* Add account age verification scheme (https://github.com/bisq-network/proposals/blob/master/payment-account-age-witness.adoc, https://github.com/bisq-network/exchange/issues/1000)

Changed fees, limits, security deposit:
* Reduce DEFAULT_TAKER_FEE_IN_BASE_CUR from 0.003 BTC to 0.002 BTC (that is the base for a 1 BTC trade)
* Lower miner fees by fee estimation adjustments (using maxDelay 20 instead of 10 and taking average of 12 last fee results)
* Lower miner fee by transaction size calculation. Instead of using 600 bytes as estimation of trade fee tx we create a dummy tx to get the exact size id funds are on the wallet, otherwise we use 260 bytes for maker and 320 bytes for taker (deposit and payout tx are larger).
* Reduce security deposit: DEFAULT_BUYER_SECURITY_DEPOSIT from 0.03 BTC to 0.01 BTC; MAX_BUYER_SECURITY_DEPOSIT from 0.2 BTC 0.05 BTC, MIN_BUYER_SECURITY_DEPOSIT from 0.001 BTC to 0.0005 BTC; SELLER_SECURITY_DEPOSIT from 0.01 BTC to 0.003 BTC
* Use new trade limits to reflect higher BTC price
    Bank transfers: 0.25 BTC
    Swish, OKPay, PerfectMoney, AliPay: 0.5 BTC
    Altcoins 1 BTC (exception SiaFund as their price is about 3 BCT and it is not dividable, so we allow 4 BTC there)

Other features:
* Add Western Union as payment method
* Show latest trade price in case no price from external market price providers is available. To be used only for informational purpose not for % based offers due price manipulation risks.
* Enable Bisq DAO phase 1 on Bitcoin Testnet: BSQ genesis distribution, BSQ trading, BSQ used for paying trade fee, BSQ wallet with send, receive and tx list screens, dashboard
* Add new languages: Chinese, Hungarian, Romanian, Russian, French, Turkish
* Added new Altcoins: DECENT, Pranacoin, WACoins, ZenCash, Ellaism, Cryptonite, Terracoin, Internext, Particl
* Add all missing countries (all global countries taken from https://restcountries.eu/rest/v2/all?fields=name;region;subregion;alpha2Code;languages)
* Add OXT as BTC blockexplorer
* Use new seed nodes and price relay nodes operated by different Bisq developers and bonded by BSQ
* Use new more efficient data structure for tradeStatistcs objects
* Add filter for arbitrators, seed nodes and price relay nodes
* Change pw length restriction
* Change name of IOP to ""Internet Of People""
* Remove DOGE as base currency (zero trade activity)
* Reduce number of seed nodes for LTC and DASH (very low trade activity)
* Removed never-traded altcoins: Advanced Internet Blocks (AIB), Anoncoin (ANC), Anti (ANTI), AquariusCoin (ARCO), Argentum (ARG), Augur (REP), Battlestars (BATL), BigUp (BIGUP), BitAUD (BITAUD), BitCHF (BITCHF), BitCNY (BITCNY), BitEUR (BITEUR), BitGBP (BITGBP), BitHKD (BITHKD), BitNZD (BITNZD), BitSEK (BITSEK), BitSGD (BITSGD), BitSYNQ (SYNQ), BitShares (BTS), BitUSD (BITUSD), Blackcoin (BLK), Clams (CLAM), CloakCoin (CLOAK), Comet (CMT), Creditbit (CRBIT), Crown (CRW), Crypto Bullion (CBX), DIBCOIN (DIBC), Digibyte (DGB), Digital Rupees (DRS), DigixDAO Tokens (DGD), EOS (EOS), EUR Tether (EURT), Emercoin (EMC), Eternity (ENT), Europecoin (ERC), EverGreenCoin (EGC), Factom (FCT), FairCoin (FAIR), FlorinCoin (FLO), GameCredits (GAME), Gemz (GEMZ), Groestlcoin (GRS), Gulden (NLG), HOdlcoin (HODL), HunCoin (HNC), I/O Coin (IOC), JPY Tether (JPYT), Janus (JNS), Jumbucks (JBS), LTBcoin (LTBC), Maker (MKR), MarteXcoin (MXT), Moin (MOIN), Myriadcoin (XMY), NEM (XEM), Nevacoin (NEVA), NuShares (NSR), OKCash (OK), Omni (OMNI), Opal (OPAL), Peercoin (PPC), Pinkcoin (PINK), PlatinumBar (XPTX), Plutons (PLU), PotCoin (POT), Primecoin (XPM), Radium (RADS), RealEst. Coin (REALEST), Ripple (XRP), Shift (SHIFT), Smileycoin (SMLY), SolarCoin (SLR), Steem Dollars (STEEMUSD), Stellar Lumens (XLM), StorjcoinX (SJCX), Stratis (STRAT), Swarm City Token (SWT), Syndicate (SYNX), Synereo (AMP), Triangles (TRI), USD Tether (USDT), VCoin (VCN), VPNCoin (VPN), Verge (XVG), VeriCoin (VRC), Waves (WAVES), Worldcoin (WDC), Xaurum (XAUR), YACCoin (YACC), YbCoin (YBC)
* Many smaller improvements in the UI

Bug fixes, code improvements:
* Fix wrong date handling in trade statistics charts
* Listen to bitcoin network for deposit and payout transaction in case the P2P message did not arrive
* Support different keys for code signing in download-tool
* Fix bug with missing MultiSigKey (findKeyFromPubKeyHash call was used instead of findKeyFromPubKey)
* Fix missing persistence for trade statistic object in seed nodes
* Fix but with offer sorting
* Use smaller font and width for TAC window on very small screens 
* Use netlayer Tor library (https://github.com/JesusMcCloud/netlayer/)
* Improved build system 


Url of the signing key (Manfred Karrer): https://bisq.io/pubkey/F379A1C6.asc
Full fingerprint: 1DC3 C8C4 316A 698A C494  039C F5B8 4436 F379 A1C6

How to verify signatures?
    $ gpg --digest-algo SHA256 --verify BINARY{.asc*,}
Replace BINARY with the file you downloaded (e.g. Bisq-0.5.1.dmg)


Hint for Debian users:
If you have problems starting Bisq on Debian use: /opt/Bisq/Bisq",17662022
398,False,False,2017-07-17T08:05:08Z,2017-07-17T09:13:16Z,"A newer version is already available! Please don't use this version anymore.

Hotfix release for fixing problems with the application directory on Linux.

Release notes:
* The change of the application name from ""bisq"" to ""Bisq"" caused a change of the application directory as well. That caused on Linux that users wallet and data have been in the ""bisq"" and the app creates a new ""Bisq"" folder.  To fix that we rename the application directory from ""bisq"" to ""Bisq"" if ""Bisq"" did not exist. If both already existed (if user has run 0.5.2.) we rename ""Bisq"" to ""Bisq_backup"" and ""bisq"" to ""Bisq"" assuming that the app dir with the current wallet and data was""bisq"" from version 0.5.1. If case the user used the wallet and data now in ""Bisq_backup"" he has to move the folders content manually to the ""Bisq"" folder.


Url of the signing key (Manfred Karrer): https://bisq.io/pubkey/F379A1C6.asc
Full fingerprint: 1DC3 C8C4 316A 698A C494  039C F5B8 4436 F379 A1C6

How to verify signatures?
    $ gpg --digest-algo SHA256 --verify BINARY{.asc*,}
Replace BINARY with the file you downloaded (e.g. Bisq-0.5.1.dmg)


Hint for Debian users:
If you have problems starting Bisq on Debian use: /opt/Bisq/Bisq",17662022
399,False,False,2017-07-16T23:27:47Z,2017-07-16T23:29:44Z,"A newer version is already available! Please don't use this version anymore.

This release removes the requirement for exchanging the email address and to do an ID check with the trading peer when using payment methods with bank transfer. 
See the discussion at [that forum post](https://forum.bisq.io/t/new-requirement-for-payment-accounts-with-charge-back-risk/2376/) for more background.

Beside that we added an in-app downloader and signature check, so the next release you can download from the application and you can be sure that the signature matches.

Release notes:
* Remove requirement for exchanging the email address and to do an ID check with the trading peer when using payment methods with bank transfer
* Add in-app downloader for installer of a new release with integrated signature check
* Increase trade limits to 2 BTC for OK_PAY and Altcoins
* Add Dash as additional basecurrency to Bitcoin, Litecoin and Doge.
* Fix issue with non-english OS
* Add a reminder to write down the wallet seed and make a backup before setting the wallet password
* Rename ClearXChange to Zelle
* Improve build setup (auto install protoc)
* Fix date format
* Only request restart at base currency selection if it has changed from default.
* Remove popup at startup for selecting base currency

Url of the signing key (Manfred Karrer): https://bisq.io/pubkey/F379A1C6.asc

How to verify signatures?
    $ gpg --digest-algo SHA256 --verify BINARY{.asc*,}
Replace BINARY with the file you downloaded (e.g. Bisq-0.5.1.dmg)


Hint for Debian users:
If you have problems starting Bisq on Debian use: /opt/Bisq/Bisq


EDIT: Removed binaries as there have been issues in the aversion, use v0.5.3!",17662022
400,False,False,2017-06-30T23:48:28Z,2017-06-30T23:59:49Z,"A newer version is already available! Please don't use this version anymore.


This release fixes a few minor issues with version 0.5.0. 

Release notes:
* Add callback for tradeFee tx once seen in the network to avoid errors at take offer.
* Separate resource files for PersistedEntryMap by base currency (separate trade statistics)
* Move base currency/network selection from network settings to preferences
* Add btc address validator to last trade step for withdrawal.
* Remove dont show again option for tx summary popup at withdrawal.
* Add support for different REFERENCE_DEFAULT_MIN_TX_FEE by base currency 
* Fix issue with German as default language if OS is Windows/German
* Add warning for CXC regrading daily or monthly transfer limits

Url of the signing key (Manfred Karrer): https://bisq.io/pubkey/F379A1C6.asc

How to verify signatures?
    $ gpg --digest-algo SHA256 --verify BINARY{.asc*,}
Replace BINARY with the file you downloaded (e.g. Bisq-0.5.1.dmg)


Hint for Debian users:
If you have problems starting Bisq on Debian use: /opt/Bisq/Bisq",17662022
401,False,False,2017-06-28T12:48:47Z,2017-06-28T12:55:12Z,"A newer version is already available! Please don't use this version anymore.


This release comes with tons of changes and improvements.
Most relevant changes are:

- Support for other base currencies (next to Bitcoin we support now Litecoin and Doge. Dash will come soon as well)
- Using a fee estimation service for setting the optimal transaction fees to avoid stuck transactions in times of high blockchain congestion
- Support for custom security deposit
- Multi language support. Currently: English (default), German, Spanish, Greek, Portuguese and Serbian
- Dynamic trading fees (depends on trade amount and distance to market price)
- Many technical improvements like more compact trade protocol, usage of Protobuffer, BIP 44 wallet,...

Please see the full release notes below.   

As that release has very profound changes it is not backward compatible to the earlier versions.
It uses a new network which is separated from the current trade network. So your offers from the current application will not be visible for users who are using the new version.
If you want to migrate to the new version you need to close your offers and withdraw your funds to the new application. You can run both applications in parallel as they are using a different data directory.

Please double check with cmd+e in the old application if no funds are left over (some bugs might have caused that the balance displayed in the UI is not correct).  

Please use small amounts when starting trading in the new application as with so many changes there are some risks for bugs (though it is thoroughly tested).

Release notes:
* Support multiple base currencies. Beside BTC the user can choose to use LTC or DOGE as base market. More will come in future releases.
* Use fee estimation service form https://bitcoinfees.21.co to use dynamic mining fees.
* Use dynamic trading fees. Trading fees are based on trade amount and distance to market price. 
	Min. fee (MF) = 0.0002 BTC, default fee (DF) = 0.002 BTC, amount factor (AF) = 1/BTC, market price factor (MF) = square root of percent value (e.g. 1% -> 1, 9% 0 -> 3, 0.01% -> 0.1).
	Tradeing fee = max(MF, DF * amount * AF * MF). E.g. 0.002 BTC for 1 BTC trade at 1% market price distance.
* Make security deposit for buyer customizable at offer creation (allowed range: 0.001 BTC - 0.2 BTC)
* Use fixed security deposit for seller (0.01 BTC) 
* Simplify trade process by removing locktime support (removed finalize payout step)
* Use protobuffer instead of Java serialization in P2P network and local persistence
* Use BIP 44 wallet for BTC and BSQ
* Update to BitcoinJ 0.14.1 release
* Updated tor binaries from TorBrowser 6.5
* Re-brand to Bisq
* Use new max. trade limits to reduce risks with possible bugs in new version as well as to reflect higher BTC price
	Bank transfers: 0.5 BTC
	Swish, OKPay, PerfectMoney, AliPay: 1 BTC
	Altcoins 1 BTC (exception SiaFund as their price is about 3 BCT and it is not dividable)
* Add email field to bank payment methods for enabling traders to verify identity (to protect against charge back risk)	
* Change max trade period for SEPA to 6 days. In exceptional situations like at long bank holidays exceeding the period will be tolerated.
* Auto select also non-EURO SEPA countries by default at SEPA account setup
* Added new altcoins: Janus, OctoCoin, PEPECASH
* Use percentage based price as default. Swap input text controls when toggle between fixed price and percentage based price. 
  Hide percentage based inputs if no market price is available.
* Support for translations of all application display strings
* User can select preferred language (of those which are already translated) and default country.
* Supported new languages: German, Spanish, Greek, Portuguese and Serbian (still require UI layout adjustments)
* Remove ask and bid market price and use always last price.
* Add button in settings to resync SPV chain (delete SPV chain file)
* Add button for opening log file
* Remove arbitrator as potential receiver at dispute payout
* Improve arbitration payout screen 
* Use TTL of 30 min. for market prices on the provider side.
* Check for market price age on client. Allow max. 30 min old market prices
* Show provider node at tooltip over price feed provider icon
* Persist last used payment account for create offer screen
* Use same seed words for both BTC and BSQ wallet
* Added BSQ as coin_type 142 0x8000008E to https://github.com/satoshilabs/slips/blob/master/slip-0044.md
* Update Bitcoin checkpoint file
* Fix bug with backup path when path had become inaccessible
* Fixed bug with not displaying correct MultiSig address in LockedFunds view.
* Add checks for locked up funds of failed trades.
* Add shortcut to remove failed trade from pending trades view.
* Use for Windows build no version nr at jar files to avoid collecting multiple jars at updates.
* Prepare the split role of arbitrator in mediator (has no MultiSig key) and arbitrator (3rd key holder of MultiSig). 
  Not implemented yet in the UI, so mediator is at the moment identical with arbitrator.
* Add email and pgp pubkey to data structure (no support yet implemented in UI)
* Add support for passing counter currency tx ID to BTC seller (not impl. in UI yet)
* Change key combination for open dispute from cmd+o to alt+o and for opening emergency wallet from cmd+e to alt+e
* Update TAC 
* Don't provide market price for Venezuelan currency (VEF) as official exchange rate is not reflecting reality
* Add -BjvmOptions=-Xss1280k for Linux builds to avoid SegFault problem with latest Ubuntu update

Url of the signing key (Manfred Karrer): https://bisq.io/pubkey/F379A1C6.asc

Hint for Debian users:
If you have problems starting Bisq on Debian use: /opt/Bisq/Bisq",17662022
402,False,False,2017-05-18T14:10:47Z,2017-05-18T15:08:17Z,"A newer version is already available! Please don't use this version anymore.


This is a hotfix release for fixing an issue in the previous release. 

Release notes 0.4.9.9.3:
* Adopt trading fee value to match new tx fee

Url of the signing key (Manfred Karrer): https://bitsquare.io/pubkey/F379A1C6.asc

Hint for Debian users:
If you have problems starting Bitsquare on Debian use: /opt/Bitsquare/Bitsquare
https://github.com/bitsquare/bitsquare/releases",17662022
403,False,False,2017-05-17T22:44:43Z,2017-05-17T23:27:56Z,"A newer version is already available! Please don't use this version anymore.

Due to the high blockchain congestion we are forced to push out another release with a tx fee increase.

Release notes 0.4.9.9.2:
* Increase tx fee for trades to 0.0015 BTC
* Increase default tx fee for non-trade txs to 0.0015 BTC
* Add Janus and OctoCoin

Url of the signing key (Manfred Karrer): https://bitsquare.io/pubkey/F379A1C6.asc

Hint for Debian users:
If you have problems starting Bitsquare on Debian use: /opt/Bitsquare/Bitsquare
https://github.com/bitsquare/bitsquare/releases",17662022
404,False,False,2017-03-22T21:24:52Z,2017-03-22T23:19:45Z,"A newer version is already available! Please don't use this version anymore.

This is a hot-fix release for fixing a problem with an UnreadableWalletException in combination with Bitcoin Core 14 transactions (See: https://groups.google.com/forum/#!topic/bitcoinj/mhV9BvoSYMo for more background). 
Please update as soon as possible.

Release notes 0.4.9.9.1:
* Fix protobuffer serialization issue with transaction version used in transaction hash at Bitcoin Core 14, causing UnreadableWalletException. For more details see: https://groups.google.com/forum/#!topic/bitcoinj/mhV9BvoSYMo
* Add info popups for requirements for ClearXchange
* Add scroll pane support to all screens.
* Fix wrong percentage calculation in spreads view for altcoins  
* Fix missing tx fee at emergency wallet payout.
* Add address validation for ETH
* Don't use peers from AddressMessage calls if we use a custom Bitcoin node list or localhost.
* Ability to re-open a dispute (e.g. if no answer from arbitrator in case of network problems)
* Update MIN_NONDUST_OUTPUT from 546 to 2730 satoshis
* Fix missing persistence calls when internal wallet structure has changed, possibly causing bugs with internal wallet structure getting inconsistent (reserved funds for an offer might be used for another trade, so causing failed trades,...). 

Url of the signing key (Manfred Karrer): https://bitsquare.io/pubkey/F379A1C6.asc

Hint for Debian users:
If you have problems starting Bitsquare on Debian use: /opt/Bitsquare/Bitsquare
https://github.com/bitsquare/bitsquare/releases",17662022
405,False,False,2017-02-12T03:33:08Z,2017-02-12T05:02:23Z,"A newer version is already available! Please don't use this version anymore.


With this update we increase the transaction (mining) fee and the security deposit. 
This will avoid problems that transactions needs longer to get confirmed in periods when the backlog of unconfirmed transactions on the blockchain is very high.
Offers from this version and offers from older versions are not compatible. 
You cannot take an offer which was created with version 0.4.9.8 or earlier, as well a user with an old version cannot take an offer which was created with version 0.4.9.9.
It is highly recommended to remove your offers before you update to that version. 
When you update you get forced to remove your old offers (or shut down the app).
You can update even if you have a trade open (if the offer was created with an older version we use the old tx fee and security deposit for that trade). 

Beside that important change we improved the Tor handling for BitcoinJ (supports now DNS lookup over Tor and connection to Bitcoin full nodes running as hidden service).

Release notes 0.4.9.9:
- Changed trade transaction fee from 0.0002 BTC to 0.0005 BTC
- Change protocol version for offers to support higher transaction fee
- Change Create-Offer-Fee from 0.0005 BTC to 0.0008 BTC (includes the 0.0005 tx fee, so the net fee to the arbitrator is same as before -> 0.0003 BTC)
- Increase security deposit from 0.01 BTC to 0.03 BTC
- Add LTBcoin, Fermat (IOP), Swarm City Token (SWT), AquariusCoin, Byte, Nevacoin, PIVX, Xaurum, Safe FileSystem Coin (SFSC)
- Support for Bitcoin nodes running as hidden services
- DNS lookup over Tor
- Connect to local Bitcoin Core node if it is running (ignore use Tor flag)
- Add program argument: socks5DiscoverMode
- Export Wallet data (keys) feature
- Show percentage in spreads table
- Add input validation for Norwegian bank account 
- Fix bank account from for Chile and Norwegian
- Add Georgia, Botswana
- Add new blockexplores: SoChain, Bitaps
- Added check for ZEC addresses (only t addresses are permitted) and info popup for ZEC and ZXC
- Added input validation for altocin addresses: IOP, PIVX, GBYTE
- Added input validation for IBAN, BIC, email
- Rename Cash/ATM deposit to Cash deposit
- Increase max. allowed deviation from market price to 30%
- Don't show error popup for exception on Linux after screen resolution change or return from monitor standby
- Use more randomized prefix for short offer ID, add version as postfix
- Show arbitrators support tab if arbitrator has revoked but has open disputes
- Increase offer availability and trade timeouts
- Update to JDK 8u121
- Enable again the Apple developer certificate for code signing on OSX

Url of the signing key (Manfred Karrer): https://bitsquare.io/pubkey/F379A1C6.asc

Hint for Debian users:
If you have problems starting Bitsquare on Debian use: /opt/Bitsquare/Bitsquare
",17662022
406,False,False,2016-11-19T15:54:54Z,2016-11-19T17:33:58Z,"A newer version is already available! Please don't use this version anymore.

This update fixes a critical bug in the Bitcoin wallet. It also uses the new BitcoinAverage API as the old API will not be supported anymore soon.
Please update as soon as possible!

Release notes 0.4.9.8:
- Added Crown, Pascal Coin, Smileycoin, RealEst. Coin
- Now all traffic is going over Tor (price requests from Poloniex could not be routed over Tor because they use Cloudflare)
- Added request to CoinMarketCap to get more prices for altcoins not listed at Poloniex
- Use 2 proxy price feed providers as hidden service for requesting accumulated BitcoinAverage (new API), Poloniex and CoinMarketCap price data
- Add program argument to add custom price feed providers
- Add module for running a own proxy price feed provider (requires BitcoinAverage API keys). Supports both clearnet and hidden service
- Display time of latest price update at tooltip over provider icon in market price widget
- Remove http proxy option because it is not needed anymore (Cloudflare issue with Poloniex solved by the proxy)
- Remove tor bridge support (was not solving GFW issues and caused only problems when connections to Tor failed at startup)
- Add option for setting custom bitcoin nodes in network settings (additional possible via program argument)
- Add new block explorers to settings
- Increase max. trade period for US postal money order to 8 days
- Use default btc format (allow more then 4 decimal places)
- Add tool for exporting wallet data
- Fix critical bug with BitcoinJ Bloomfilter handling
- Ignore TTL for persisted data objects (trade statistics) in local data map

Url of the signing key (Manfred Karrer): https://bitsquare.io/pubkey/F379A1C6.asc

Hint for Debian users:
If you have problems starting Bitsquare on Debian use: /opt/Bitsquare/Bitsquare
",17662022
407,False,False,2016-10-20T11:03:22Z,2016-10-20T16:09:34Z,"A newer version is already available! Please don't use this version anymore.

This release adds new payment methods for USD (Chase QuickPay) and CAD (Interac e-Transfer).
Further we added 29 new Altcoins and we updated to the latest Java JDK with important security updates. 

Release notes 0.4.9.7:
- Added new payment methods: Chase QuickPay, Interac e-Transfer
- Increase trade limits for Altcoins to 3 BTC, OKPay, Swish and AliPay to 2 BTC, ClearXChange, Cash deposit and US postal money order to 1 BTC
- Added now altcoins: Zcash, Zcoin, Augur, Siafund, Gulden, Stellar Lumens, Emercoin, Plutons, GameCredits, PotCoin, Omni, Stratis, ReddCoin, VeriCoin, Radium 
  Digital Rupees, Vcash, Waves, HOdlcoin, Burstcoin, Triangles, Argentum, DIBCOIN, Eternity, Battlestars, Nav Coin, DynamicCoin, Anoncoin, DarkNet
- Change behavior of currency list to display user defined currencies instead of all currencies for which offers are available (same behavior like it was before v0.4.9.6)
- Add Kazakhstan and Kenya to country list
- Add Nr. of trades to trade statistics tooltip
- Display time span in trade statistics tool tip
- Show tx size in withdraw popup
- Remove 1 min interval in trade statistics, add year interval
- Added support for custom payout at disputes, define who is the publisher and re-opening a closed dispute
- Use single gpg signatures of binaries instead of signature of bundled hashes.
- Improved wording
- Improved layout for small screens
- Fix bug with withdrawal if tx size exceeds 100kb
- Fix and improve build doc and scripts
- Update to latest jdk version with bugfix for SortedList (remove our jdkfix module)

Url of the signing key (Manfred Karrer): https://bitsquare.io/pubkey/F379A1C6.asc

Hint for Debian users:
If you have problems starting Bitsquare on Debian use: /opt/Bitsquare/Bitsquare
",17662022
408,False,False,2016-09-04T19:57:03Z,2016-09-04T22:56:54Z,"A newer version is already available! Please don't use this version anymore.

This release adds Faster Payments, a new payment method for the UK as well as improvements with existing payment methods. It comes also with an important bugfix, so please update as soon as possible.

Release notes 0.4.9.6:
- Added new altcoins: Opal, Synereo
- Fixed bug with invalid offer ID causing wrong balance display and duplicate trade statistic items
- Added new payment method: Faster payments
- Add support for other currencies than countries default currency at bank accounts and cash deposit
- Add support for EUR for PerfectMoney
- Add ""Extra requirements"" field to Cash deposit form
- Add copy icons to data fields in Cash Deposit, ClearXchange and US Postal Money Order 
- Add Nr. of disputes and onion address display to dispute table and details popup
- Add dispute result reasons: ""No response"" and ""Protocol violation""
- Change warning popup if create offer button pressed with no account for selected currency in offer book views
- Revert decrease of Nr. of peers to send message at broadcast
- Decrease interval for sending keep alive messages
- Delay result handler for mailbox message storage

Url of the signing key (Manfred Karrer): https://bitsquare.io/pubkey/F379A1C6.asc

Hint for Debian users:
If you have problems starting Bitsquare on Debian use: /opt/Bitsquare/Bitsquare
",17662022
409,False,False,2016-08-29T14:48:15Z,2016-08-29T15:27:26Z,"A newer version is already available! Please don't use this version anymore.

This release comes with 3 new payment mehtods and applies the industry standard for altcoin price notation and currency pair notation.

Release notes 0.4.9.5:
- Add new payment methods: Cash deposit, US Postal money order, ClearXchange
- Remove support for bank transfers in US (ACH has high chargeback risk and WIRE is too expensive)
- Added new altcoins: LBRY Credits, Syndicate, HunCoin, Unobtanium, Digibyte, VCoin, Decred, Crypto Bullion, 1CRedit, YACCoin, Advanced Internet Blocks
- Apply industry standard with altcoin price notation and currency pair notation
- Show all offers in market screen
- Click on offers in market scree row triggers navigation to Buy or Sell screen and selects currency
- Rearrange columns so sell and buy prices are in the middle to see spread better 
- Rename columns headers and table header
- Add currency pair, primary market based values and display strings for price, amount and volume for offer and trade json files
- Fixed bug with missing persistence of preferences changes
- Use defuat vlaue true for ""Use Tor for BitcoinJ""
- Sort currencies in lists alphabetically
- Add checkbox in settings to display nr. of trades or offers for currency list in market screens. Sort by nr. trade/offer if selected.
- Ignore offers in market offer book view which are further than 30% from best price if there are more then 3 offers on one side
- Show only currencies in market view which are used in offers or trades
- Replace payment method column with accumulated BTC amount in market offer book 
- Add payment method column to trades statistics table
- Store arbitrator pubKey in trade object to avoid null pointer when the arbitrator is not available in the trade process
- Set flag to connection at initial data request so the peer does not get disconnected from seed node if max connections are reached at seed node.

Url of the signing key (Manfred Karrer): https://bitsquare.io/pubkey/F379A1C6.asc

Hint for Debian users:
If you have problems starting Bitsquare on Debian use: /opt/Bitsquare/Bitsquare
",17662022
410,False,False,2016-08-26T13:14:33Z,2016-08-26T14:23:47Z,"A newer version is already available! Please don't use this version anymore.

This release is a preparation release for the next bigger upcoming release.

New payment methods will be added in the next release but that will break compatibility with versions prior to 0.4.9.4, so please update to that version first to not experience exceptions when offers with new payment methods are published.

Release notes 0.4.9.4:
- Add fix for unsupported payment methods.

Url of the signing key (Manfred Karrer): https://bitsquare.io/pubkey/F379A1C6.asc

Hint for Debian users:
If you have problems starting Bitsquare on Debian use: /opt/Bitsquare/Bitsquare
",17662022
411,False,False,2016-08-08T02:18:45Z,2016-08-08T02:36:09Z,"A newer version is already available! Please don't use this version anymore.

This release comes with several performance improvements and higher trading limits, as well as many new altcoins.

Release notes 0.4.9.3:
- Increase trade limits (Altcoins: 2 BTC, Banks: 1 BTC, Others: 1.5 BTC)
- Added new coins: Mycelium Token, BitUSD, Steem Dollars, STEEMUSD, BitCNY, BitEUR, BitCHF, BitGBP, BitNZD, BitAUD, BitSGD, BitHKD, BitSEK, Comet, BitSYNQ
- Removed deprecated ETHC (was replaced by ETC)
- Reduce performance peak when loading statistics data at startup by delayed processing
- Exclude statistics data from getting loaded what the user has already
- Add statistics data dump to binary, so new users don't need to load all the data at first startup
- Add RPM Linux binaries
- Add reminder popup for setting up a password, backing up seed word and doing a data dir backup
- Increase nr. of rolling backups for wallet and keys to 20.
- Fix JSON dump to be stored as plain text instead of Java serialized object
- Add option to dump offers as json
- Add maxMemory prog. arg for seed nodes and statists app
- Add precision to currency json file
- Improve wording

Url of the signing key (Manfred Karrer): https://bitsquare.io/pubkey/F379A1C6.asc

This version is backward compatible back to version 0.4.2.

If you have problems starting Bitsquare on Debian use: /opt/Bitsquare/Bitsquare

Arch Linux: https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=bitsquare-git

For windows users:
If you know that your computer supports 64bit use this installer: Bitsquare-64bit-0.4.9.3.exe
If you don't know it but if the computer is a newer model it is likely 64 bit. Otherwise use Bitsquare-32bit-0.4.9.3.exe
",17662022
412,False,False,2016-07-29T23:58:28Z,2016-07-30T00:03:02Z,"A newer version is already available! Please don't use this version anymore.

Release notes 0.4.9.2:
- Bugfix with repeated publication of trade statistics data
- Add ""Show all currencies"" to trade statistics view to see total volume of all currencies
- Add warning popup if Tor is enabled for http requests and user clicks a button to open a web page
- Show offerers bank name also for SEPA in offer details window
- Fix bug with missing market price updates 
- Save Fiat and Altcoin currency list as JSON if --dumpStatistics is enabled
- Use info as default log level, improve logging
- Other minor bug fixes

Url of the signing key (Manfred Karrer): https://bitsquare.io/pubkey/F379A1C6.asc

This version is backward compatible back to version 0.4.2.

If you have problems starting Bitsquare on Debian use: /opt/Bitsquare/Bitsquare

Arch Linux: https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=bitsquare-git

For windows users:
If you know that your computer supports 64bit use this installer: Bitsquare-64bit-0.4.9.2.exe
If you don't know it but if the computer is a newer model it is likely 64 bit. Otherwise use Bitsquare-32bit-0.4.9.2.exe
",17662022
413,False,False,2016-07-27T12:56:53Z,2016-07-27T13:17:26Z,"A newer version is already available! Please don't use this version anymore.

Due heavy requests from the community we added price and volume statistics.
Because of the nature of a P2P application the statistics will need a bit of time until they are fully distributed in the network.
Please read at our forum for more details:
https://forum.bitsquare.io/t/new-vesion-0-4-9-1-with-trade-statistics-and-extended-tor-support-is-published

Release notes 0.4.9.1:
- Add trade statistics. Price chart, volume chart and table for trades. 
- Add tor support for http request (excluding Poloniex because of problems with Couldflare captcha)
- Add tor support for BitcoinJ (experimental)
- Add support for passing sock 5 proxy address via program argument to be used for BitcoinJ and/or http requests (I2P VPN, ...)
- Change EtherClassic ticker from ETHC to ETC (as they requested, ETHC still supported by deprecated)
- Support list of seed nodes for Bitcoin network
- Add program arguments: useTorForBtc, useTorForHttp, dumpStatistics (store statistics as json), socks5ProxyBtcAddress, socks5ProxyHttpAddress, useTorForHttp, btcSeedNodes
- Update BitcoinJ with actual seed addresses
- Added capability support to have more fine grained control at updates.
- Bugfix with missing bank name field when payment method same bank account was used
- Display offerers bank name or bank ID in offer details

Url of the signing key (Manfred Karrer): https://bitsquare.io/pubkey/F379A1C6.asc

This version is backward compatible back to version 0.4.2.

If you have problems starting Bitsquare on Debian use: /opt/Bitsquare/Bitsquare

Arch Linux: https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=bitsquare-git

For windows users:
If you know that your computer supports 64bit use this installer: Bitsquare-64bit-0.4.9.1.exe
If you don't know it but if the computer is a newer model it is likely 64 bit. Otherwise use Bitsquare-32bit-0.4.9.1.exe
",17662022
414,False,False,2016-07-17T14:33:31Z,2016-07-17T14:34:57Z,"A newer version is already available! Please don't use this version anymore.

Release notes 0.4.9:
- Added EtherClassic, USD Tether, EUR Tether, JPY Tether, Lisk, DigixDAO Tokens, Worldcoin, FlorinCoin
- Support for Tor bridges
- Use embedded font to have same layout in all OS versions
- Add number of offers info to offer book view
- Add logos for market price providers
- Limit nr. of Bitcoin network peers at re-connect after connection loss
- Increase default tx fee for withdrawal to 0.0002 BTC
- Persist selected currency in market screen and offer book screens
- Add export to csv feature for trade and tx history 
- Add export and import payment accounts feature
- Add holder name at confirmation popups for trades using bank account 
- Show Nr. of trades at peer icon
- Show peer info on mouse click on icon
- Add editable tag to peer
- Add Insight block explorer
- Use different busy indicator with much lower cpu load than JavaFX ProgressIndicator
- Add check for arm cpu architecture
- Add 80 byte support for OP_RETURN in BitcoinJ fork
- Add program arguments for maxConnection, log level, custom seed nodes and ignore developers messages/alerts
- Increase check offer availability and trade protocol timeout
- Add check for arbitrator and trade price tolerance at offer availability check
- Add display of fiat or altcoin amount in contract window
- Add copy icon for onion addresses textfields in offer/trade/contract windows
- Add nr. of bid and ask offer to statistics table
- Restrict max market price deviation to 20%
- Display 2 decimal places for percentage price
- Show nr. of offers and total btc amount in spreads view
- Add busy indicator when entering wallet password
- Fix bug with missing available balance update
- Fixed JavaFX bug with SortedList (offer book)
- Fixed bug with dangling trades and disputes
- Fixed bug with cases of missing complete state at trades when users are offline

Url of the signing key (Manfred Karrer): https://bitsquare.io/pubkey/F379A1C6.asc

This version is backward compatible back to version 0.4.2.

If you have problems starting Bitsquare on Debian use: /opt/Bitsquare/Bitsquare

Arch Linux: https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=bitsquare-git
",17662022
415,False,False,2016-07-05T14:39:31Z,2016-07-05T14:44:18Z,"A newer version is already available! Please don't use this version anymore.

Release notes 0.4.8.1:
- Fix bug with support for multiple arbitrators

Url of the signing key (Manfred Karrer): https://bitsquare.io/pubkey/F379A1C6.asc

This version is backward compatible back to version 0.4.2.

If you have problems starting Bitsquare on Debian use: /opt/Bitsquare/Bitsquare

Arch Linux: https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=bitsquare-git
",17662022
416,False,False,2016-05-25T19:46:09Z,2016-05-25T20:24:26Z,"A newer version is already available! Please don't use this version anymore.

Release notes 0.4.8:
- Removed Payment ID from trade contract for Monero
- Fix NullPointer at Bank account setup

Release notes 0.4.7:
- Added Monero, Maker, DAO, STEEM, BigUp, PlatinumBar, Jumbucks, Pinkcoin, OKCash, GridCoin, Moin, SolarCoin, Shift, Europecoin, PostCoin
- Increase trade limits (Altcoins: 2 BTC, OKPay: 1.5 BTC, Banks: 0.75 BTC, Others: 1 BTC)
- Support EUR option for SEPA countries which have a non-EUR currency
- Customize bank account forms for countries: BR, UK, US, AU, CA, MX, SE, HK, NZ, 
- Add search field to Combobox for altcoins
- Added Moldova
- Add input validations for fiat payment method forms (only for customized countries)
- Add info popup for mining fee when depositing funds
- Show % price in open offers table
- Increase max msg size for GetDataResponse
- Change TTL and refresh/republish time
- Fix incorrect handling of TTL
- Fixed wrong sorting in tables
- Fix validation bug for inputs at create offer screen 
- Add network stress tests

Url of the signing key (Manfred Karrer): https://bitsquare.io/pubkey/F379A1C6.asc

This version is backward compatible back to version 0.4.2.

If you have problems starting Bitsquare on Debian use: /opt/Bitsquare/Bitsquare

Arch Linux: https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=bitsquare-git
",17662022
417,False,False,2016-05-25T16:33:26Z,2016-05-25T17:16:55Z,"A newer version is already available! Please don't use this version anymore.

Please update as soon as possible to that new release as there is an issue with the P2P network in the current version.
Additionally to that P2P network fix we added many new features as well as a long list of new Altcoins: Monero, DAO, Maker, STEEM and many more....
Trade limits have been increased as well.

**Release notes:**
- Added Monero, Maker, DAO, STEEM, BigUp, PlatinumBar, Jumbucks, Pinkcoin, OKCash, GridCoin, Moin, SolarCoin, Shift, Europecoin, PostCoin
- Increase trade limits (Altcoins: 2 BTC, OKPay: 1.5 BTC, Banks: 0.75 BTC, Others: 1 BTC)
- Support EUR option for SEPA countries which have a non-EUR currency
- Customize bank account forms for countries: BR, UK, US, AU, CA, MX, SE, HK, NZ, 
- Add search field to Combobox for altcoins
- Added Moldova
- Add input validations for fiat payment method forms (only for customized countries)
- Add info popup for mining fee when depositing funds
- Show % price in open offers table
- Increase max msg size for GetDataResponse
- Change TTL and refresh/republish time
- Fix incorrect handling of TTL
- Fixed wrong sorting in tables
- Fix validation bug for inputs at create offer screen 
- Add network stress tests

Url of the signing key (Manfred Karrer): https://bitsquare.io/pubkey/F379A1C6.asc

This version is backward compatible back to version 0.4.2.
",17662022
418,False,False,2016-04-29T09:22:58Z,2016-04-29T10:01:08Z,"A newer version is already available! Please don't use this version anymore.

**Release notes:**
- Bugfix for fee calculation when using password protection
- Added Sibcoin, Creditbit

Url of the signing key (Manfred Karrer): https://bitsquare.io/pubkey/F379A1C6.asc

This version is backward compatible back to version 0.4.2.
",17662022
419,False,False,2016-04-28T20:24:51Z,2016-04-28T23:04:29Z,"A newer version is already available! Please don't use this version anymore.

**Release notes:**
- Bugfix with rounding amount which caused issues at withdrawal
- Display exact bitcoin amount (without rounding)
- Change Myriadcoin ticker symbol as it conflicts with Malaysian ringgit
- Change wording for bank form
- Added I/O Coin, Groestlcoin, MarteXcoin
- Change name of Anti.cash to Anti (on their request)

Url of the signing key (Manfred Karrer): https://bitsquare.io/pubkey/F379A1C6.asc

This version is backward compatible to version 0.4.4, 0.4.3 and 0.4.2.
",17662022
420,False,False,2016-04-26T22:33:22Z,2016-04-26T22:34:18Z,"A newer version is already available! Please don't use this version anymore.

We are proud to present you our official Beta version.  

**Release notes:**
- GPG signed SHA256 hashes of all binaries (never run binaries which are not signed by Bitsquare!)
- Add new seed node
- Added new coins: Myriadcoin, Verge
- Improve wording
- Fix wrong fee calculation
- Fix update popup handling

Url of the signing key (Manfred Karrer): https://bitsquare.io/pubkey/F379A1C6.asc
Hash algo used: SHA256

This version is backward compatible to version 0.4.3 and version 0.4.2.
",17662022
421,False,False,2016-04-23T01:36:55Z,2016-04-23T11:50:42Z,"A newer version is already available! Please don't use this version anymore.

This is a preview of the upcoming Beta version.  

**Release notes:**
- Check if BC provider is defined
- Ignore stupid Oracle limited security permissing by reflection
- Add check if correct architecture version is installed (32/64 bit)
- Fixed issues with ""could not generate key"" error
- Increased take offer availability check timeout
- Reduce FP rate for bloomfilter to reduce bandwidth consumption
- Added new altcoins: NEM, Anti.cash, VPNCoin, MaidSafeCoin, YbCoin, VeriCoin, EverGreenCoin, CloakCoin, Espers 
- Add altcoin name to button in market overview
- Use home dir for directory chooser at backup screen
- Remove string abbreviation at copy altcoin address
- Update to latest java version
- Fix bug at exit from system tray

This version is backward compatible to version 0.4.2.

If you have installed an earlier version than 0.4.2 please read the following instructions:
Before installing the new version please close your open offers, wait until your trades are completed and transfer your Bitcoin funds to an external wallet.
Backup your current application data directory and afterwards delete the data directory.
You can find the application data directory under those locations:
Mac OSX: /Users/username/Library/Application Support/Bitsquare
Linux: /home/username/.local/share/Bitsquare
Windows 7,8: C:\Documents and Settings\username\AppData\Roaming\Bitsquare
Windows XP: C:\Documents and Settings\username\Application Data\Bitsquare
Once the data directory is removed you can install the new version of Bitsquare.
",17662022
422,False,False,2016-04-17T20:10:42Z,2016-04-17T21:58:38Z,"A newer version is already available! Please don't use this version anymore.

This is a preview of the upcoming Beta version.  

**Release notes:**
- Add percentage based price for offers (distance from market price).
- Fix bloom filter privacy vulnerabilities in BitcoinJ
- UI improvements
- Bug fixes

**This version is NOT backward compatible to version 0.4.1 or earlier.** 
If you had already Bitsquare installed please read the following instructions:
Before installing the new version please close your open offers, wait until your trades are completed and transfer your Bitcoin funds to an external wallet.
Backup your current application data directory and afterwards delete the data directory. 
You can find the application data directory under those locations or open it at the ""Account/Backup"" screen: 
Mac OSX: /Users/username/Library/Application Support/Bitsquare
Linux: /home/username/.local/share/Bitsquare
Windows 7,8: C:\Documents and Settings\username\AppData\Roaming\Bitsquare
Windows XP: C:\Documents and Settings\username\Application Data\Bitsquare
Once the data directory is removed you can install the new version of Bitsquare.
",17662022
423,False,False,2016-04-14T09:06:48Z,2016-04-14T09:41:10Z,"This is a preview of the upcoming Beta version.  

**Release notes:**
- Fix bug when trader is offline and use password protection signing payout tx fails
- Add wallet restore from seed words option at enter password popup at startup
- Fix bug with pressing enter closing wallet password popup at startup
- Fix bug with timeout warning popup at startup
- Set default font size to avoid systemwide font scaling in Windows 
- Remove option for BitcoinJ over Tor (Tor in BitcoinJ is considered experimental; Bitcoin over Tor will be supported later over our native Tor instance)
- Add sticky market price checkbox to settings: If sticky market price is selected market price does not change with currency selection, otherwise it is context sensitive. 
- Fix bug with not pruning rolling backup files
- Show by default all currencies in offer book
- Add fiat/altcoin amount and spend or receive flag to offer and trade details windows
- Allow create offer when ""show all"" is selected in offer book and default currency is not matching payment account currency
- Add informational popups 
- Improve wordings

This version is backward compatible to version 0.4.0.

If you had installed an earlier version than 0.4.0 please read the following instructions:
Before installing the new version please close your open offers, wait until your trades are completed and transfer your Bitcoin funds to an external wallet.
Backup your current application data directory and afterwards delete the data directory.
You can find the application data directory under those locations:
Mac OSX: /Users/username/Library/Application Support/Bitsquare
Linux: /home/username/.local/share/Bitsquare
Windows 7,8: C:\Documents and Settings\username\AppData\Roaming\Bitsquare
Windows XP: C:\Documents and Settings\username\Application Data\Bitsquare
Once the data directory is removed you can install the new version of Bitsquare.
",17662022
424,False,False,2016-04-08T22:02:31Z,2016-04-09T00:55:12Z,"This is a preview of the upcoming Beta version.  

**Release notes:**
- Support usage of a global Bitsquare wallet for funding multiple offers/trades 
- Alternatively support of trading wallets for separating trades and getting higher privacy protection
- Add screens for deposit funds and locked funds
- Use combo box for exchange rates
- Add Windows 32 bit binaries
- Add Linux 32 bit binaries
- Increased trade limits: 
  - Bank transfers: 0.5 BTC
  - Other payment processors: 0.75 BTC
  - OKPay, Altcoins: 1 BTC
- Reduce trade tx fee to 0.0002 BTC
- Reduce default withdrawal tx fee to 0.0001 BTC
- Make withdrawal tx fee adjustable in settings
- Add check for too wide deviation from market price at create offer
- Make deviation from market price adjustable in settings
- Rolling backup for all files (wallet, db, tor hidden service private key)
- Improve UI for restoring wallet from seed words
- Add button for opening data directory
- Use clearnet instead of Tor for BitcoinJ as default
- Remove check for mining fee at deposit tx 
- Support sorting for all table columns
- Show contract in new window
- Fix Font render issue on Linux
- Use altcoin name when setting up the address for the cryptocurrency account
- Use system time instead of blocks for remaining trade time
- Add ""About Bitsquare"" screen

**This version is NOT backward compatible to version 0.3.6 or earlier.** 
If you had already Bitsquare installed please read the following instructions:
Before installing the new version please close your open offers, wait until your trades are completed and transfer your Bitcoin funds to an external wallet.
Backup your current application data directory and afterwards delete the data directory. 
You can find the application data directory under those locations:
Mac OSX: /Users/username/Library/Application Support/Bitsquare
Linux: /home/username/.local/share/Bitsquare
Windows 7,8: C:\Documents and Settings\username\AppData\Roaming\Bitsquare
Windows XP: C:\Documents and Settings\username\Application Data\Bitsquare
Once the data directory is removed you can install the new version of Bitsquare.
",17662022
425,False,True,2016-03-20T14:38:45Z,2016-03-20T16:17:08Z,"This is a **pre-release candidate** for the official Beta version.  
This version is backward compatible to version 0.3.5, so you DON'T need to clean your data directory.

**Release notes:**
- Increase trade limits (Banks: 0.3 BTC, Payment processors: 0.4 BTC, Altcoins: 0.5 BTC)
- Reduce min. required mining fee for funding tx to 0.0001 BTC 
- Reduce create offer fee to 0.0005 BTC 
- Added FairCoin
- Added ShadowCash
- Display onion address of offerer and trading peer in details windows 
- Show Identicon for offerers or trading peers onion address and indicate repeated trades
- Show QR Code at funding screens, Remove QR Code Icon from AddressTextField, Add CopyIcon to Create Offer funding screen
- Don't show own offers in offer book, make it adjustable in settings
- Display additional info for Altcoins at buy/sell buttons 
- Show payment in market overview offer book tables
- Show update notification if client version is older than new version
- Increase timeout for trade process forn 30 sec to 60 sec.
- Add build instructions for OpenJDK/OpenJFX
- Resend confirmation at startup if peer has not continued trade process
- Add check if unlimited Strength for cryptographic keys is enabled in case the user has compiled the binary on his own

If you have used a version of Bitsquare older than 0.3.5 you need to remove the old application data directory to avoid conflicts due non compatible changes. If you have funds in your wallet be sure to withdraw first your funds before installing the new version.
Location of the data directory:
**Mac OSX**: /Users/username/Library/Application Support/Bitsquare
**Linux**: /home/username/.local/share/Bitsquare
**Windows XP**: C:\Documents and Settings\username\Application Data\Bitsquare
**Windows Vista or 7**: %appdata%/Bitsquare

If you use a not supported OS (e.g. 32bit Windows) please use the Bitsquare.jar file. You need to have Java v1.8.0_40 or better installed on your system to run the Bitsquare jar file.
",17662022
426,False,True,2016-03-11T16:20:58Z,2016-03-11T17:44:10Z,"This is a **pre-release candidate** for the official Beta version.  
It is probably the last ""feature release"" before launching Beta.  
Please help us testing and report issues if you find any!

**Release notes:**
- New payment methods: National bank transfer, Transfer with same bank, Transfer with specific bank
- Support 75 global currencies and 18 alternative crypto currencies
- Price feed for all major currencies and all alternative crypto currencies
- Make list of displayed currencies customizable
- Separate crypto currencies accounts
- Increase trade limits to 0.1-0.3 BTC
- Make trade limit depend on payment method
- Check transaction fee for funding transactions
- Use specific colors for buy and sell
- P2P network optimizations (refresh offers)
- Reconnect and republish offers after inactivity (detect standby/sleep mode)
- Display detailed info for P2P connections
- Display inboud and outbound traffic
- Measure round trip time
- Throttle max. traffic
- Add “Show all currencies” option to the offer book
- Make market price invertable
- Notifications and advanced popup handling

For more information regarding testing and setup please check out our [wiki pages](https://github.com/bitsquare/bitsquare/wiki).

Mainnet is already used as the default Bitcoin network.
Please be aware that using Mainnet comes with the risk to lose funds in case of software bugs. 
To limit the possible losses the maximum allowed trading amount has been reduced to **0.1-0.3 BTC** (depending on payment method) and the security deposit to 0.01 BTC.

If you have used an older version of Bitsquare you need to remove the old application data directory to avoid conflicts due non compatible changes. If you have funds in your wallet be sure to withdraw first your funds before installing the new version.
Location of the data directory:
**Mac OSX**: /Users/username/Library/Application Support/Bitsquare
**Linux**: /home/username/.local/share/Bitsquare
**Windows 7,8**: C:\Documents and Settings\username\AppData\Roaming\Bitsquare
**Windows XP**: C:\Documents and Settings\username\Application Data\Bitsquare

If you use a not supported OS (e.g. 32bit Windows) please use the Bitsquare.jar file. You need to have Java v1.8.0_40 or better installed on your system to run the Bitsquare jar file.
",17662022
427,False,True,2016-02-08T23:36:59Z,2016-02-09T00:19:02Z,"This is a **pre-release candidate** for the official Beta version.

**Release notes:**
- Improvements P2P network
- Use Tor for BitcoinJ
- UI improvements 
- Bugfixes

For more information regarding testing and setup please check out our [wiki pages](https://github.com/bitsquare/bitsquare/wiki).

Mainnet is now used as the default Bitcoin network.
Please be aware that using Mainnet comes with the risk to lose funds in case of software bugs. 
To limit the possible losses the maximum allowed trading amount and the security deposit have been reduced to **0.01 BTC** while the software is still in alpha version when using Mainnet.

If you have used an older version of Bitsquare you need to remove the old application data directory to avoid conflicts due non compatible changes. If you have funds in your testnet wallet be sure to withdraw first your funds before installing the new version.
Location of the data directory:
**Mac OSX**: /Users/username/Library/Application Support/Bitsquare
**Linux**: /home/username/.local/share/Bitsquare
**Windows XP**: C:\Documents and Settings\username\Application Data\Bitsquare
**Windows Vista or 7**: %appdata%/Bitsquare

If you use a not supported OS (e.g. 32bit Windows) please use the Bitsquare.jar file. You need to have Java v1.8.0_40 or better installed on your system to run the Bitsquare jar file.

For Arch Linux there is an [AUR](https://aur.archlinux.org/packages/bitsquare-git) available.
",17662022
428,False,True,2016-01-27T21:48:19Z,2016-01-27T22:04:07Z,"This is a **pre-release candidate** for the official Beta version.

**Release notes:**
- Remove initial confirmation handshake in P2P network
- Add spread overview to markets screen
- Make mainnet default network
- UI improvements 
- Bugfixes

For more information regarding testing and setup please check out our [wiki pages](https://github.com/bitsquare/bitsquare/wiki).

Mainnet is now used as the default Bitcoin network.
Please be aware that using Mainnet comes with the risk to lose funds in case of software bugs. 
To limit the possible losses the maximum allowed trading amount and the security deposit have been reduced to **0.01 BTC** while the software is still in alpha version when using Mainnet.

If you have used an older version of Bitsquare you need to remove the old application data directory to avoid conflicts due non compatible changes. If you have funds in your testnet wallet be sure to withdraw first your funds before installing the new version.
Location of the data directory:
**Mac OSX**: /Users/username/Library/Application Support/Bitsquare
**Linux**: /home/username/.local/share/Bitsquare
**Windows XP**: C:\Documents and Settings\username\Application Data\Bitsquare
**Windows Vista or 7**: %appdata%/Bitsquare

If you use a not supported OS (e.g. 32bit Windows) please use the Bitsquare.jar file. You need to have Java v1.8.0_40 or better installed on your system to run the Bitsquare jar file.

For Arch Linux there is an [AUR](https://aur.archlinux.org/packages/bitsquare-git) available.
",17662022
429,False,True,2016-01-18T22:08:38Z,2016-01-19T01:37:05Z,"This is a **pre-release candidate** for the official Beta version.
Please note that this release is intended mainly for developers and testers.

**Release notes:**
- P2P network improvements 
- UI improvements 
- Bugfixes
- Enable mainnet

For more information regarding testing and setup please check out our [wiki pages](https://github.com/bitsquare/bitsquare/wiki).

Please DON'T use it in Bitcoin mainnet yet as it needs much more testing and there are several know inssues to be fixed before it can be considered ""mainnet safe"".  

If you have used an older version of Bitsquare you should remove the old application data directory to avoid conflicts due non compatible changes. If you have funds in your testnet wallet be sure to withdraw first your funds before installing the new version.
Location of the data directory:
**Mac OSX**: /Users/username/Library/Application Support/Bitsquare
**Linux**: /home/username/.local/share/Bitsquare
**Windows XP**: C:\Documents and Settings\username\Application Data\Bitsquare
**Windows Vista or 7**: %appdata%/Bitsquare

If you use a not supported OS (e.g. 32bit Windows) please use the Bitsquare.jar file. You need to have Java v1.8.0_40 or better installed on your system to run the Bitsquare jar file.

For Arch Linux there is an [AUR](https://aur.archlinux.org/packages/bitsquare-git) available.
",17662022
430,False,True,2015-12-28T12:56:43Z,2015-12-28T13:53:41Z,"This is a **pre-release candidate** for the official Beta version, which is planned to be released early 2016.
Please note that this release is intended mainly for developers and testers.

**Release notes:**
- Make P2P network more stable

For more information regarding testing and setup please check out our [wiki pages](https://github.com/bitsquare/bitsquare/wiki).

Please DON'T use it in Bitcoin mainnet yet as it needs much more testing and there are several know inssues to be fixed before it can be considered ""mainnet safe"".  

If you have used an older version of Bitsquare you should remove the old application data directory to avoid conflicts due non compatible changes. If you have funds in your testnet wallet be sure to withdraw first your funds before installing the new version.
Location of the data directory:
**Mac OSX**: /Users/username/Library/Application Support/Bitsquare
**Linux**: /home/username/.local/share/Bitsquare
**Windows XP**: C:\Documents and Settings\username\Application Data\Bitsquare
**Windows Vista or 7**: %appdata%/Bitsquare

If you use a not supported OS (e.g. 32bit Windows) please use the Bitsquare.jar file. You need to have Java v1.8.0_40 or better installed on your system to run the Bitsquare jar file.

For Arch Linux there is an [AUR](https://aur.archlinux.org/packages/bitsquare-git) available.
",17662022
431,False,True,2015-12-19T17:11:31Z,2015-12-20T14:08:29Z,"This is a **pre-release candidate** for the official Beta version, which is planned to be released early 2016.
Please note that this release is intended mainly for developers and testers.

**Features:**
- Changed network layer to a flooding network over Tor and hidden services
- Support for several payment methods (Sepa, OkPay, PerfectMoney,…)
- Support for Altcoins
- Arbitrator registration
- Support for arbitration and support tickets
- Arbitrator chat and messaging tool
- Trade contract
- Data backup
- Recover from seedwords
- Password protection
- Optional lock-time by payment method
- Market overview (buy/sell offers chart and tables)
- UI/Usability improvements
- Charts for market data

For more information regarding testing and setup please check out our [wiki pages](https://github.com/bitsquare/bitsquare/wiki).

Please DON'T use it in Bitcoin mainnet yet as it needs much more testing and there are several know inssues to be fixed before it can be considered ""mainnet safe"".  

If you have used an older version of Bitsquare you should remove the old application data directory to avoid conflicts due non compatible changes. If you have funds in your testnet wallet be sure to withdraw first your funds before installing the new version.
Location of the data directory:
**Mac OSX**: /Users/username/Library/Application Support/Bitsquare
**Linux**: /home/username/.Bitsquare
**Windows XP**: C:\Documents and Settings\username\Application Data\Bitsquare
**Windows Vista or 7**: %appdata%/Bitsquare

If you use a not supported OS (e.g. 32bit Windows) please use the Bitsquare.jar file. You need to have Java v1.8.0_20 or better installed on your system to run the Bitsquare jar file.

For Arch Linux there is an [AUR](https://aur.archlinux.org/packages/bitsquare-git) available.
",17662022
432,False,True,2015-05-21T23:29:26Z,2015-05-22T14:15:43Z,"That minor version update with new binaries was necessary because I screwed something up with UpdateFX :-(.

To separate bitcoin networks the data are stored now in separate directories when switching the network.
Please delete the data directory to get a clean install.

There is a known issue with Linux and some IPv6 configurations causing testnet seed nodes connection problems (mainnet is ok). 
That happens only if you don't run a local Bitcoin core in testnet mode. 

**UPDATE:**
Mike Hearn suggested a quick solution for getting around the Bitcoin testnet connectivity problem:
Run the app from the console:
`java -Djava.net.preferIPv4Stack=true -jar PATH_TO_JAR_FILE/1.jar`
The jar file is located in the .deb file (it is an archive) under /opt/Bitsquare/app/1.jar
See the discussion for more info at: https://groups.google.com/forum/?hl=de#!topic/bitcoinj/1dRPpvH0VsQ

Warning: The application is still under heavy develoment and using mainnet with real Bitcoin is not recommended!

Release notes:
- Bootstrap to all bootstrap nodes
- Separeate btc network by directories in data dir
- Add support for new release download
- Only use mailbox for certain P2P messages 
- Bootstrap node update
- Fix bug with empty log file
- Add warning popup when using mainnet

[AUR for Arch Linux](https://aur.archlinux.org/packages/bitsquare-git)
",17662022
433,False,True,2015-05-17T13:17:17Z,2015-05-17T14:34:31Z,"That release is not handled by UpdateFX. Please download and install the new binaries. You need to delete the data directory if you have used a previous version. The bootstrap nodes for previous versions are not supported anymore.

UPDATE: There is an issue with the Linux version that it cannot connect to the Bitcoin testnetwork. Mainnet is working (as well as the OSX and Windows versions). I am investigating and will release a new version as soon that is fixed. (See: https://github.com/bitsquare/bitsquare/issues/340)

UPDATE 2:
The problem also happens when using BitcoinJ wallet template. 
I reported an issue on the mailinglist:
https://groups.google.com/forum/#!topic/bitcoinj/1dRPpvH0VsQ
If you start a local Bitcoin core client in testnet mode you can connect to the testnet network (via that localhost node).

You can find the data directory here:
Linux: $HOME/.local/share/Bitsquare
Mac OSX: $HOME/Library/Application Support/Bitsquare
Windows: $HOME\AppData\Roaming\Bitsquare

Release notes:
- Support second trade variant (Offerer is Bitcoin seller) 
- Change UI for trade process to wizard style
- Encrypt all messages sent over wire
- Use Fiat payment method specific lock time for payout transaction to reduce bank charge back risk
- Support changed IP address after reconnect
- Add reserved tab in Funds screens
- Remove open trades from withdrawal list
- Separate DHT networks by Bitcoin networks
- Separate GUI code to a module
- Code signing for MAC (Apple developer certificate)
- Interconnect bootstrap nodes on 3 servers
- Improve network settings pane
- Synchronizing bitcoin network not blocking startup anymore
- Connection loss not terminating app
",17662022
434,False,True,2015-03-28T22:31:33Z,2015-03-28T23:00:14Z,"That version does not need a new binary installation as it comes via UpdateFX. 

Added features:
- Traders can quit application during the trade process and continue later
- Encryption for DHT mailbox
- Use P2SH for MultiSig
- Add data protection for DHT storage
- When trader goes offline his offers get removed from the offer book and will get added again when he goes online again (app should run in background when window gets closed, but that is deactivaed at the moment)
- Update to TomP2P Beta 6
- Update to tag of latest BitcoinJ master (0.13.d13665c-SNAPSHOT)
",17662022
435,False,True,2015-03-06T23:06:29Z,2015-03-06T23:36:01Z,"- Support for UpdateFX
- Update to TomP2P beta3
- Relay mode for P2P network
- Use maven instead of Gradle
",17662022
436,False,True,2014-12-11T17:50:35Z,2014-12-11T18:06:47Z,"**Hey early adopter!** Thanks for taking a look at Bitsquare's very first milestone release. See the [announcement blog post](https://bitsquare.io/blog/bitsquare-now-in-alpha) and list of [features implemented](https://github.com/bitsquare/bitsquare/issues?q=label%3A%22a%3A+feature%22+milestone%3Av0.1+is%3Aclosed) for complete details. Check the [roadmap](https://bitsquare.io/roadmap/) to see where we're headed from here.

At bottom you'll find installers and executables. Just download, double-click and follow the instructions for the one matching your operating system:
- Windows (.exe)
- Mac OS X (.dmg)
- Linux (.deb)

If you have Java 8u20 or better installed and prefer to work directly with an executable jar, download `bitsquare-0.1.0-app.jar` and run it with the following command:

```
$ java -jar bitsquare-0.1.0-app.jar
```

Most users can disregard the `bitsquare-0.1.0-bootstrapNode.jar` file, but if you wish to [test Bitsquare locally in regtest mode](https://github.com/bitsquare/bitsquare/wiki/How-to-use-Bitsquare-with-regtest) you'll need to download and run this file as an executable jar as well (same instructions as above).

As mentioned in the announcement blog post, **Bitsquare is alpha-quality software**. It runs on the bitcoin testnet by default, and you should under no circumstances think it's safe to run on mainnet with real bitcoins. You've been warned.  

For getting started you can find help in our [user guide](https://github.com/bitsquare/bitsquare/wiki/User-Guide).
If you have trouble connecting to the Bitsquare network, you may need to [configure manual port forwarding](https://github.com/bitsquare/bitsquare/wiki/How-to-setup-port-forwarding). If you run into other issues please let us know by creating a [GitHub Issue](https://github.com/bitsquare/bitsquare/issues). Thanks!  

To experience trading with Bitsquare we facilitate regular [Bitsquare WAN parties](https://github.com/bitsquare/bitsquare/wiki/Bitsquare-WAN-Parties). These are a chance to find trading peers, get support, give feedback to the developers and exchange ideas with other contributors.

For general information about Bitsquare, see https://bitsquare.io
",17662022
437,False,False,2020-03-09T19:58:00Z,2020-03-10T18:47:05Z,"### Changelog

* Adds option to buy PAX through Simplex
* Bug fixes

### Download

<table>
<tbody>
<tr>
<td>App</td>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://bitpay.com/wallet"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48089088-68afa480-e1e2-11e8-83a8-361d0440528c.png"" alt=""BitPay""></a>
</td>
<td>
<a href=""https://itunes.apple.com/us/app/bitpay/id1440200291?ls=1&mt=12"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac"" width=""120""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9NBR15SK4ZJV"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows"" width=""120""></a>
</td>
<td>
<a href=""https://snapcraft.io/bitpay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux"" width=""120""></a>
</td>
</tr>
<tr>
<td>
<a href=""https://copay.io"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48089097-6cdbc200-e1e2-11e8-9e54-363d54ae8fc6.png"" alt=""Copay""></a>
</td>
<td>
<a href=""https://itunes.apple.com/us/app/copay/id1440201813"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac"" width=""120""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9MZGT30HL9DF"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows"" width=""120""></a>
</td>
<td>
<a href=""https://snapcraft.io/copay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux"" width=""120""></a>
</td>
</tr>
</tbody>
</table>",18141084
438,False,False,2020-02-25T18:58:28Z,2020-02-27T14:04:26Z,"### Changelog

*A New Look and Feel*

The home tab is where you can check your total wallet value, exchange rates, buy crypto, and see current offers at a glance.

*Introducing Tabs*

Core features have now been re-organized into four accessible tabs allowing you to manage and spend your crypto seamlessly and quickly.

### Screenshots

![bitpay-01](https://user-images.githubusercontent.com/237435/75451538-7ba63500-594f-11ea-8bbb-e4f2d0437575.png)
![bitpay-03](https://user-images.githubusercontent.com/237435/75451589-91b3f580-594f-11ea-9164-25f1b775d2ee.png)
![bitpay-08](https://user-images.githubusercontent.com/237435/75451618-9f697b00-594f-11ea-8d21-8cc5ccfc2739.png)
![bitpay-04](https://user-images.githubusercontent.com/237435/75451637-a6908900-594f-11ea-8d98-5ea5c10d461e.png)
![bitpay-02](https://user-images.githubusercontent.com/237435/75451546-81037f80-594f-11ea-8619-a4580c3ee76e.png)

### Download

<table>
<tbody>
<tr>
<td>App</td>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://bitpay.com/wallet"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48089088-68afa480-e1e2-11e8-83a8-361d0440528c.png"" alt=""BitPay""></a>
</td>
<td>
<a href=""https://itunes.apple.com/us/app/bitpay/id1440200291?ls=1&mt=12"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac"" width=""120""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9NBR15SK4ZJV"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows"" width=""120""></a>
</td>
<td>
<a href=""https://snapcraft.io/bitpay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux"" width=""120""></a>
</td>
</tr>
<tr>
<td>
<a href=""https://copay.io"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48089097-6cdbc200-e1e2-11e8-9e54-363d54ae8fc6.png"" alt=""Copay""></a>
</td>
<td>
<a href=""https://itunes.apple.com/us/app/copay/id1440201813"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac"" width=""120""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9MZGT30HL9DF"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows"" width=""120""></a>
</td>
<td>
<a href=""https://snapcraft.io/copay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux"" width=""120""></a>
</td>
</tr>
</tbody>
</table>",18141084
439,False,False,2020-01-16T14:42:15Z,2020-01-17T19:30:19Z,"### Changelog

This release adds support for XRP, the decentralized native cryptocurrency of the Ripple. Also new is the  integration with Simplex©, which simplifies purchasing of supported cryptocurrencies. This release also includes improvements in performance and user experience for BitPay's app and integrated services.

NEW

* XRP support
* New Simplex integration

IMPROVEMENTS 

* Performance improvements upon gift card purchase
* Update Spanish and French translations

BUG FIXES

* Fixed scanner permission issue when not authorized (only mobile)
* Fixed language and email preferences for all wallets
* Fixed filter of crypto currencies into the list of alternative currencies

### Download

<table>
<tbody>
<tr>
<td>App</td>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://bitpay.com/wallet"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48089088-68afa480-e1e2-11e8-83a8-361d0440528c.png"" alt=""BitPay""></a>
</td>
<td>
<a href=""https://itunes.apple.com/us/app/bitpay/id1440200291?ls=1&mt=12"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac"" width=""120""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9NBR15SK4ZJV"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows"" width=""120""></a>
</td>
<td>
<a href=""https://snapcraft.io/bitpay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux"" width=""120""></a>
</td>
</tr>
<tr>
<td>
<a href=""https://copay.io"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48089097-6cdbc200-e1e2-11e8-9e54-363d54ae8fc6.png"" alt=""Copay""></a>
</td>
<td>
<a href=""https://itunes.apple.com/us/app/copay/id1440201813"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac"" width=""120""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9MZGT30HL9DF"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows"" width=""120""></a>
</td>
<td>
<a href=""https://snapcraft.io/copay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux"" width=""120""></a>
</td>
</tr>
</tbody>
</table>",18141084
440,False,False,2019-12-26T15:20:43Z,2020-01-02T12:53:34Z,"### Changelog

* Bug fixes

### Download

<table>
<tbody>
<tr>
<td>App</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://bitpay.com/wallet"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48089088-68afa480-e1e2-11e8-83a8-361d0440528c.png"" alt=""BitPay""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9NBR15SK4ZJV"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows"" width=""120""></a>
</td>
<td>
<a href=""https://snapcraft.io/bitpay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux"" width=""120""></a>
</td>
</tr>
<tr>
<td>
<a href=""https://copay.io"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48089097-6cdbc200-e1e2-11e8-9e54-363d54ae8fc6.png"" alt=""Copay""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9MZGT30HL9DF"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows"" width=""120""></a>
</td>
<td>
<a href=""https://snapcraft.io/copay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux"" width=""120""></a>
</td>
</tr>
</tbody>
</table>",18141084
441,False,False,2019-12-11T20:18:34Z,2019-12-16T13:16:52Z,"### Changelog

* Bug fixes

### Download

<table>
<tbody>
<tr>
<td>App</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://bitpay.com/wallet"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48089088-68afa480-e1e2-11e8-83a8-361d0440528c.png"" alt=""BitPay""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9NBR15SK4ZJV"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows"" width=""120""></a>
</td>
<td>
<a href=""https://snapcraft.io/bitpay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux"" width=""120""></a>
</td>
</tr>
<tr>
<td>
<a href=""https://copay.io"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48089097-6cdbc200-e1e2-11e8-9e54-363d54ae8fc6.png"" alt=""Copay""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9MZGT30HL9DF"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows"" width=""120""></a>
</td>
<td>
<a href=""https://snapcraft.io/copay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux"" width=""120""></a>
</td>
</tr>
</tbody>
</table>",18141084
442,False,False,2019-12-03T13:31:50Z,2019-12-04T17:26:05Z,"This major release adds support for ERC-20 stablecoin tokens, including USD Coin (USDC), Paxos Standard (PAX) and Gemini Dollar (GUSD). It also includes improvements in performance and user experience for BitPay's app and integrated services.

### Changelog

* ERC-20 support
* Support PHP and INR currency symbols for Gift Cards
* Export key to another wallet as QR code
* UI improvements on BitPay Card, ShapeShift and Coinbase.
* Fixes bug to allow wallet launch from ETH URI link

### Download

<table>
<tbody>
<tr>
<td>App</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://bitpay.com/wallet"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48089088-68afa480-e1e2-11e8-83a8-361d0440528c.png"" alt=""BitPay""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9NBR15SK4ZJV"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows"" width=""120""></a>
</td>
<td>
<a href=""https://snapcraft.io/bitpay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux"" width=""120""></a>
</td>
</tr>
<tr>
<td>
<a href=""https://copay.io"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48089097-6cdbc200-e1e2-11e8-9e54-363d54ae8fc6.png"" alt=""Copay""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9MZGT30HL9DF"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows"" width=""120""></a>
</td>
<td>
<a href=""https://snapcraft.io/copay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux"" width=""120""></a>
</td>
</tr>
</tbody>
</table>",18141084
443,False,False,2019-10-29T14:09:01Z,2019-11-01T19:50:37Z,"### Changelog

NEW

* ETH Testnet support
* EUR Gift Cards
* Export Key to another wallet as QR code

BUG FIXES

* Open app from ETH link (only Desktop)
* Clear badge of pending notification (iOS)
* UI issues on Settings Page
* Send-max for top up cards

### Download

<table>
<tbody>
<tr>
<td>App</td>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://bitpay.com/wallet"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48089088-68afa480-e1e2-11e8-83a8-361d0440528c.png"" alt=""BitPay""></a>
</td>
<td>
<a href=""https://itunes.apple.com/us/app/bitpay/id1440200291?ls=1&mt=12"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac"" width=""120""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9NBR15SK4ZJV"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows"" width=""120""></a>
</td>
<td>
<a href=""https://snapcraft.io/bitpay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux"" width=""120""></a>
</td>
</tr>
<tr>
<td>
<a href=""https://copay.io"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48089097-6cdbc200-e1e2-11e8-9e54-363d54ae8fc6.png"" alt=""Copay""></a>
</td>
<td>
<a href=""https://itunes.apple.com/us/app/copay/id1440201813"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac"" width=""120""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9MZGT30HL9DF"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows"" width=""120""></a>
</td>
<td>
<a href=""https://snapcraft.io/copay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux"" width=""120""></a>
</td>
</tr>
</tbody>
</table>",18141084
444,False,False,2019-10-21T19:49:28Z,2019-10-22T14:39:23Z,"### Changelog

* Merchant directory integration
* Enhanced wallet creation flow
* Minor UI bug fixes

### Download

<table>
<tbody>
<tr>
<td>App</td>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://bitpay.com/wallet"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48089088-68afa480-e1e2-11e8-83a8-361d0440528c.png"" alt=""BitPay""></a>
</td>
<td>
<a href=""https://itunes.apple.com/us/app/bitpay/id1440200291?ls=1&mt=12"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac"" width=""120""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9NBR15SK4ZJV"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows"" width=""120""></a>
</td>
<td>
<a href=""https://snapcraft.io/bitpay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux"" width=""120""></a>
</td>
</tr>
<tr>
<td>
<a href=""https://copay.io"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48089097-6cdbc200-e1e2-11e8-9e54-363d54ae8fc6.png"" alt=""Copay""></a>
</td>
<td>
<a href=""https://itunes.apple.com/us/app/copay/id1440201813"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac"" width=""120""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9MZGT30HL9DF"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows"" width=""120""></a>
</td>
<td>
<a href=""https://snapcraft.io/copay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux"" width=""120""></a>
</td>
</tr>
</tbody>
</table>",18141084
445,False,False,2019-10-15T13:52:18Z,2019-10-16T15:06:18Z,"## Changelog

Ethereum support is now live in the BitPay app! 

Create Ethereum wallets, save Ether,  or spend Ether. You can use your BitPay app's Ether wallet to pay friends, shop with BitPay merchants online, or buy gift cards.

### ![BitPay](https://user-images.githubusercontent.com/237435/48089088-68afa480-e1e2-11e8-83a8-361d0440528c.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/bitpay/id1440200291?ls=1&mt=12"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9NBR15SK4ZJV"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/bitpay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>

### ![Copay](https://user-images.githubusercontent.com/237435/48089097-6cdbc200-e1e2-11e8-9e54-363d54ae8fc6.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/copay/id1440201813"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9MZGT30HL9DF"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/copay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>",18141084
446,False,False,2019-10-09T18:44:56Z,2019-10-10T12:58:11Z,"## Changelog

* Bug fixes

### ![BitPay](https://user-images.githubusercontent.com/237435/48089088-68afa480-e1e2-11e8-83a8-361d0440528c.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/bitpay/id1440200291?ls=1&mt=12"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9NBR15SK4ZJV"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/bitpay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>

### ![Copay](https://user-images.githubusercontent.com/237435/48089097-6cdbc200-e1e2-11e8-9e54-363d54ae8fc6.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/copay/id1440201813"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9MZGT30HL9DF"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/copay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>",18141084
447,False,False,2019-10-01T16:29:17Z,2019-10-02T19:58:45Z,"## Changelog

* Bug fixes

### ![BitPay](https://user-images.githubusercontent.com/237435/48089088-68afa480-e1e2-11e8-83a8-361d0440528c.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/bitpay/id1440200291?ls=1&mt=12"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9NBR15SK4ZJV"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/bitpay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>

### ![Copay](https://user-images.githubusercontent.com/237435/48089097-6cdbc200-e1e2-11e8-9e54-363d54ae8fc6.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/copay/id1440201813"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9MZGT30HL9DF"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/copay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>",18141084
448,False,False,2019-09-18T16:03:04Z,2019-09-24T14:56:12Z,"## Changelog

* Bug fixes

### ![BitPay](https://user-images.githubusercontent.com/237435/48089088-68afa480-e1e2-11e8-83a8-361d0440528c.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/bitpay/id1440200291?ls=1&mt=12"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9NBR15SK4ZJV"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/bitpay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>

### ![Copay](https://user-images.githubusercontent.com/237435/48089097-6cdbc200-e1e2-11e8-9e54-363d54ae8fc6.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/copay/id1440201813"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9MZGT30HL9DF"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/copay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>",18141084
449,False,False,2019-09-17T02:46:08Z,2019-09-18T17:38:44Z,"## Changelog

* Enhanced wallet creation flow
* Minor bug fixes

### ![BitPay](https://user-images.githubusercontent.com/237435/48089088-68afa480-e1e2-11e8-83a8-361d0440528c.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/bitpay/id1440200291?ls=1&mt=12"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9NBR15SK4ZJV"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/bitpay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>

### ![Copay](https://user-images.githubusercontent.com/237435/48089097-6cdbc200-e1e2-11e8-9e54-363d54ae8fc6.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/copay/id1440201813"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9MZGT30HL9DF"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/copay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>",18141084
450,False,False,2019-09-04T15:43:56Z,2019-09-05T13:38:44Z,"## Changelog

* Bug fixes

### ![BitPay](https://user-images.githubusercontent.com/237435/48089088-68afa480-e1e2-11e8-83a8-361d0440528c.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/bitpay/id1440200291?ls=1&mt=12"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9NBR15SK4ZJV"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/bitpay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>

### ![Copay](https://user-images.githubusercontent.com/237435/48089097-6cdbc200-e1e2-11e8-9e54-363d54ae8fc6.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/copay/id1440201813"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9MZGT30HL9DF"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/copay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>",18141084
451,False,False,2019-08-23T18:16:59Z,2019-08-26T14:17:13Z,"## Changelog

* Fixes UI issues in home page
* Fixes ShapeShift expiration time at confirming a transaction
* Minor bug fixes
* Updated translations

### ![BitPay](https://user-images.githubusercontent.com/237435/48089088-68afa480-e1e2-11e8-83a8-361d0440528c.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/bitpay/id1440200291?ls=1&mt=12"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9NBR15SK4ZJV"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/bitpay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>

### ![Copay](https://user-images.githubusercontent.com/237435/48089097-6cdbc200-e1e2-11e8-9e54-363d54ae8fc6.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/copay/id1440201813"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9MZGT30HL9DF"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/copay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>",18141084
452,False,False,2019-08-08T15:17:49Z,2019-08-09T19:30:59Z,"## Changelog

IMPROVES

* Send funds to Native Segwit Addresses (Bech32)
* Updated Translations

BUG FIXES

* Order contacts by name
* Join wallet using accounts
* Redirect correctly when scanning a shared wallet invitation

### ![BitPay](https://user-images.githubusercontent.com/237435/48089088-68afa480-e1e2-11e8-83a8-361d0440528c.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/bitpay/id1440200291?ls=1&mt=12"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9NBR15SK4ZJV"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/bitpay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>

### ![Copay](https://user-images.githubusercontent.com/237435/48089097-6cdbc200-e1e2-11e8-9e54-363d54ae8fc6.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/copay/id1440201813"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9MZGT30HL9DF"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/copay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>",18141084
453,False,False,2019-07-30T18:33:12Z,2019-07-31T19:18:15Z,"## Changelog

- Bug fixes

### ![BitPay](https://user-images.githubusercontent.com/237435/48089088-68afa480-e1e2-11e8-83a8-361d0440528c.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/bitpay/id1440200291?ls=1&mt=12"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9NBR15SK4ZJV"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/bitpay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>

### ![Copay](https://user-images.githubusercontent.com/237435/48089097-6cdbc200-e1e2-11e8-9e54-363d54ae8fc6.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/copay/id1440201813"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9MZGT30HL9DF"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/copay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>",18141084
454,False,False,2019-07-25T17:58:23Z,2019-07-29T17:19:11Z,"## Changelog

NEW

This major release includes improvements on performance and user experience. Also adds support for multiple wallets using the same ""key"".

IMPROVED

- Gift Cards enhancements (and activation fees)
- Update Translations
- Increases security with CSP
- Joining page improved
- BitPay Card main view improved

BUG FIXES

- Seed list for small devices
- Fix transaction history refresh when sending & receiving

### ![BitPay](https://user-images.githubusercontent.com/237435/48089088-68afa480-e1e2-11e8-83a8-361d0440528c.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/bitpay/id1440200291?ls=1&mt=12"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9NBR15SK4ZJV"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/bitpay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>

### ![Copay](https://user-images.githubusercontent.com/237435/48089097-6cdbc200-e1e2-11e8-9e54-363d54ae8fc6.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/copay/id1440201813"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9MZGT30HL9DF"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/copay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>",18141084
455,False,False,2019-07-17T17:39:40Z,2019-07-18T11:40:43Z,"## Changelog

* Fix transaction history refresh with sending & receiving
* Small bug fixes

### ![BitPay](https://user-images.githubusercontent.com/237435/48089088-68afa480-e1e2-11e8-83a8-361d0440528c.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/bitpay/id1440200291?ls=1&mt=12"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9NBR15SK4ZJV"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/bitpay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>

### ![Copay](https://user-images.githubusercontent.com/237435/48089097-6cdbc200-e1e2-11e8-9e54-363d54ae8fc6.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/copay/id1440201813"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9MZGT30HL9DF"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/copay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>",18141084
456,False,False,2019-07-01T13:49:49Z,2019-07-03T09:45:27Z,"## Changelog

*  Gift card enhancements
* Bug fixes

### ![BitPay](https://user-images.githubusercontent.com/237435/48089088-68afa480-e1e2-11e8-83a8-361d0440528c.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/bitpay/id1440200291?ls=1&mt=12"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9NBR15SK4ZJV"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/bitpay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>

### ![Copay](https://user-images.githubusercontent.com/237435/48089097-6cdbc200-e1e2-11e8-9e54-363d54ae8fc6.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/copay/id1440201813"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9MZGT30HL9DF"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/copay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>",18141084
457,False,False,2019-06-13T15:37:30Z,2019-06-14T13:49:45Z,"## Changelog

*  Enhanced user interface for external services and wallet list
*  PIN lock timer fixes
*  BIP45 wallet import fixes
*  Other minor fixes

### ![BitPay](https://user-images.githubusercontent.com/237435/48089088-68afa480-e1e2-11e8-83a8-361d0440528c.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/bitpay/id1440200291?ls=1&mt=12"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9NBR15SK4ZJV"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/bitpay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>

### ![Copay](https://user-images.githubusercontent.com/237435/48089097-6cdbc200-e1e2-11e8-9e54-363d54ae8fc6.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/copay/id1440201813"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9MZGT30HL9DF"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/copay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>",18141084
458,False,False,2019-06-03T12:32:18Z,2019-06-04T13:46:18Z,"## Changelog

* Enhanced User Interface
* Added fiat value to transaction history
* Bug fixes

### ![BitPay](https://user-images.githubusercontent.com/237435/48089088-68afa480-e1e2-11e8-83a8-361d0440528c.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/bitpay/id1440200291?ls=1&mt=12"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9NBR15SK4ZJV"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/bitpay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>

### ![Copay](https://user-images.githubusercontent.com/237435/48089097-6cdbc200-e1e2-11e8-9e54-363d54ae8fc6.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/copay/id1440201813"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9MZGT30HL9DF"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/copay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>",18141084
459,False,False,2019-05-10T18:01:47Z,2019-05-14T14:48:28Z,"## Changelog

IMPROVES

* UX for sending funds to multiple recipients
* Error messaging

BUG FIXES

* Converting BTC to BCH (or vice versa) via Shapeshift now works properly for small amounts.
* QR codes for payment requests now render correctly on all devices.
* When importing a wallet via the QR code scanner, the correct coin (BTC or BCH) is now pre-selected on the import screen.

### ![BitPay](https://user-images.githubusercontent.com/237435/48089088-68afa480-e1e2-11e8-83a8-361d0440528c.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/bitpay/id1440200291?ls=1&mt=12"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9NBR15SK4ZJV"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/bitpay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>

### ![Copay](https://user-images.githubusercontent.com/237435/48089097-6cdbc200-e1e2-11e8-9e54-363d54ae8fc6.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/copay/id1440201813"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9MZGT30HL9DF"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/copay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>",18141084
460,False,False,2019-05-03T18:31:47Z,2019-05-03T20:02:05Z,"## Changelog

* Bug fixes in Multi-Send (multiple recipients)

### ![BitPay](https://user-images.githubusercontent.com/237435/48089088-68afa480-e1e2-11e8-83a8-361d0440528c.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/bitpay/id1440200291?ls=1&mt=12"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9NBR15SK4ZJV"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/bitpay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>

### ![Copay](https://user-images.githubusercontent.com/237435/48089097-6cdbc200-e1e2-11e8-9e54-363d54ae8fc6.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/copay/id1440201813"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9MZGT30HL9DF"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/copay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>",18141084
461,False,False,2019-04-29T18:40:14Z,2019-05-02T13:57:53Z,"## Changelog

* Better TX history syncing
* Use 145' coin type for BCH address derivation
* Bug fixes

### ![BitPay](https://user-images.githubusercontent.com/237435/48089088-68afa480-e1e2-11e8-83a8-361d0440528c.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/bitpay/id1440200291?ls=1&mt=12"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9NBR15SK4ZJV"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/bitpay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>

### ![Copay](https://user-images.githubusercontent.com/237435/48089097-6cdbc200-e1e2-11e8-9e54-363d54ae8fc6.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/copay/id1440201813"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9MZGT30HL9DF"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/copay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>",18141084
462,False,False,2019-04-12T19:18:23Z,2019-04-15T12:41:16Z,"## Changelog

### NEW
* Print your Gift Cards
* Simplify onboarding for new users
### IMPROVES
* Faster balance and transaction history updates
* Receive screen is cleanest and easiest to scan the address
* Opening you Wallet is faster with this new version
### BUG FIXES
* Minor bug fixes for buy/sell through Coinbase integration inside the app
* Synced time for BitPay invoices paying with BIP-70 standard
* Better handler of errors in the “Receive” view
* Linking Shapeshift account with the app has been fixed for iOS

### ![BitPay](https://user-images.githubusercontent.com/237435/48089088-68afa480-e1e2-11e8-83a8-361d0440528c.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/bitpay/id1440200291?ls=1&mt=12"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9NBR15SK4ZJV"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/bitpay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>

### ![Copay](https://user-images.githubusercontent.com/237435/48089097-6cdbc200-e1e2-11e8-9e54-363d54ae8fc6.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/copay/id1440201813"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9MZGT30HL9DF"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/copay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>",18141084
463,False,False,2019-03-26T13:43:11Z,2019-03-27T13:01:47Z,"## Changelog

* JSON Payment Protocol support
* Transaction's fee handling improvements
* Performance enhancements in Gift Cards views
* New design for Receive and Specific Amount views 
* UI improvements for wallet creation and backup views
* Improves PIN feature performance
* Fixes in QR scanning
* Minor UI bug fixes

### ![BitPay](https://user-images.githubusercontent.com/237435/48089088-68afa480-e1e2-11e8-83a8-361d0440528c.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/bitpay/id1440200291?ls=1&mt=12"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9NBR15SK4ZJV"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/bitpay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>

### ![Copay](https://user-images.githubusercontent.com/237435/48089097-6cdbc200-e1e2-11e8-9e54-363d54ae8fc6.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/copay/id1440201813"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9MZGT30HL9DF"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/copay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>",18141084
464,False,False,2019-02-22T19:59:05Z,2019-02-25T12:41:54Z,"## Changelog

* Multi-signature wallets: sets coin automatically from invitation code
* Improved events handler when receiving notifications
* Fixed fee rate units on transaction details
* Server-side gift card catalog management

### ![BitPay](https://user-images.githubusercontent.com/237435/48089088-68afa480-e1e2-11e8-83a8-361d0440528c.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/bitpay/id1440200291?ls=1&mt=12"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9NBR15SK4ZJV"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/bitpay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>

### ![Copay](https://user-images.githubusercontent.com/237435/48089097-6cdbc200-e1e2-11e8-9e54-363d54ae8fc6.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/copay/id1440201813"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9MZGT30HL9DF"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/copay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>",18141084
465,False,False,2019-02-08T15:20:48Z,2019-02-11T12:50:53Z,"## Changelog

* UI improvements in Home view
* In-App notifications (only desktop versions)
* More Gift Cards available to buy: Xbox, Guitar Center, and Cabela's
* Updated Translations (Spanish, French and Italian)
* Fixed warning when deleting wallet data

### ![BitPay](https://user-images.githubusercontent.com/237435/48089088-68afa480-e1e2-11e8-83a8-361d0440528c.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/bitpay/id1440200291?ls=1&mt=12"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9NBR15SK4ZJV"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/bitpay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>

### ![Copay](https://user-images.githubusercontent.com/237435/48089097-6cdbc200-e1e2-11e8-9e54-363d54ae8fc6.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/copay/id1440201813"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9MZGT30HL9DF"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/copay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>",18141084
466,False,False,2019-02-07T13:04:16Z,2019-02-07T19:01:50Z,"## Changelog

* UI improvements
* More Gift Cards available to buy: Xbox, Guitar Center, and Cabela’s
* Updated Translations (Spanish, French and Italian)

### ![BitPay](https://user-images.githubusercontent.com/237435/48089088-68afa480-e1e2-11e8-83a8-361d0440528c.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/bitpay/id1440200291?ls=1&mt=12"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9NBR15SK4ZJV"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/bitpay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>

### ![Copay](https://user-images.githubusercontent.com/237435/48089097-6cdbc200-e1e2-11e8-9e54-363d54ae8fc6.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/copay/id1440201813"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9MZGT30HL9DF"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/copay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>",18141084
467,False,False,2019-01-24T19:49:13Z,2019-01-29T19:13:45Z,"## Changelog

* Fixes on the Transaction History
* (Only BitPay) New Gift Cards available to buy: BURGER KING, GameStop, Papa John’s, Pottery Barn, Sony PlayStation, Spotify, AMC Theatres, Nike, P.F. Chang's

### ![BitPay](https://user-images.githubusercontent.com/237435/48089088-68afa480-e1e2-11e8-83a8-361d0440528c.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/bitpay/id1440200291?ls=1&mt=12"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9NBR15SK4ZJV"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/bitpay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>

### ![Copay](https://user-images.githubusercontent.com/237435/48089097-6cdbc200-e1e2-11e8-9e54-363d54ae8fc6.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/copay/id1440201813"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9MZGT30HL9DF"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/copay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>",18141084
468,False,False,2019-01-09T15:12:17Z,2019-01-10T12:52:48Z,"## Changelog

* Fixes on the Transaction History for big wallets
* Fixed iOS translations that didn't work on some devices
* Updated UI icons
* Fixed BCH information on Transaction Details
* Fixed available balance shown while refreshing

### ![BitPay](https://user-images.githubusercontent.com/237435/48089088-68afa480-e1e2-11e8-83a8-361d0440528c.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/bitpay/id1440200291?ls=1&mt=12"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9NBR15SK4ZJV"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/bitpay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>

### ![Copay](https://user-images.githubusercontent.com/237435/48089097-6cdbc200-e1e2-11e8-9e54-363d54ae8fc6.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/copay/id1440201813"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9MZGT30HL9DF"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/copay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>",18141084
469,False,False,2018-12-19T13:24:01Z,2018-12-21T13:53:51Z,"## Changelog

NEW
* Adds more gift cards: Home Depot, Royal Caribbean and Carnival Cruise Line!
* Adds support to ""multisend"": Send a single transaction to multiple recipients

IMPROVES
* Gift card integration
* Update translations
* Security improvements

BUG FIXES
* UI issue on iPhone X (S, S Max and R)

### ![BitPay](https://user-images.githubusercontent.com/237435/48089088-68afa480-e1e2-11e8-83a8-361d0440528c.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/bitpay/id1440200291?ls=1&mt=12"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9NBR15SK4ZJV"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/bitpay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>

### ![Copay](https://user-images.githubusercontent.com/237435/48089097-6cdbc200-e1e2-11e8-9e54-363d54ae8fc6.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/copay/id1440201813"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9MZGT30HL9DF"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/copay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>",18141084
470,False,False,2018-12-02T21:31:41Z,2018-12-05T18:36:51Z,"### ![BitPay](https://user-images.githubusercontent.com/237435/48089088-68afa480-e1e2-11e8-83a8-361d0440528c.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/bitpay/id1440200291?ls=1&mt=12"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9NBR15SK4ZJV"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/bitpay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>

### ![Copay](https://user-images.githubusercontent.com/237435/48089097-6cdbc200-e1e2-11e8-9e54-363d54ae8fc6.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/copay/id1440201813"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9MZGT30HL9DF"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/copay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>",18141084
471,False,False,2018-11-13T14:38:42Z,2018-11-14T13:42:52Z,"**Copay/BitPay app have been migrated to a new desktop platform for improved performance and better user experience**. (Only available in the App Store)

Learn more about [migrate your data to the new version](https://github.com/bitpay/copay/issues/8532).

### ![BitPay](https://user-images.githubusercontent.com/237435/48089088-68afa480-e1e2-11e8-83a8-361d0440528c.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/bitpay/id1440200291?ls=1&mt=12"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9NBR15SK4ZJV"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/bitpay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>

### ![Copay](https://user-images.githubusercontent.com/237435/48089097-6cdbc200-e1e2-11e8-9e54-363d54ae8fc6.png)

<table style=""width:700px;"">
<tbody>
<tr>
<td>for Mac OS</td>
<td>for Windows</td>
<td>for Linux</td>
</tr>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/copay/id1440201813"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092454-7ddd0100-e1eb-11e8-9e13-3fe80bba7f00.png"" alt=""mac""></a>
</td>
<td>
<a href=""https://www.microsoft.com/store/apps/9MZGT30HL9DF"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092465-82091e80-e1eb-11e8-9e06-36b36cd44021.png"" alt=""windows""></a>
</td>
<td>
<a href=""https://snapcraft.io/copay"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/48092664-09ef2880-e1ec-11e8-94a2-184446cb7183.png"" alt=""linux""></a>
</td>
</tr>
</tbody>
</table>

<hr>

### Download Legacy Version (DEPRECATED)

**WARNING: This version is no longer maintained.**

You will need to migrate your wallets manually, by importing your backups on the new version.

* [BitPay Legacy for Mac OS](https://github.com/bitpay/copay/releases/download/v4.8.1/BitPay.dmg)
* [BitPay Legacy for Windows](https://github.com/bitpay/copay/releases/download/v4.8.1/BitPay.exe)
* [BitPay Legacy for Linux](https://github.com/bitpay/copay/releases/download/v4.8.1/BitPay-linux.zip)

* [Copay Legacy for Mac OS](https://github.com/bitpay/copay/releases/download/v4.8.1/Copay.dmg)
* [Copay Legacy for Windows](https://github.com/bitpay/copay/releases/download/v4.8.1/Copay.exe)
* [Copay Legacy for Linux](https://github.com/bitpay/copay/releases/download/v4.8.1/Copay-linux.zip)",18141084
472,False,False,2018-10-23T16:01:33Z,2018-10-24T17:56:14Z,"## Downloads

### BitPay Wallet

<table>
<tbody>
<tr>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.8.0/BitPay.dmg"" target=""_blank""><img src=""https://cloud.githubusercontent.com/assets/904007/19670415/0e601eb6-9a35-11e6-8b43-8c259e6bec22.png"" alt=""macos"" style=""max-width:100%;""></a>
</td>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.8.0/BitPay.exe"" target=""_blank""><img src=""https://cloud.githubusercontent.com/assets/904007/19670411/0e5c619a-9a35-11e6-808f-ed15a32fe6d1.png"" alt=""windows"" style=""max-width:100%;""></a>
</td>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.8.0/BitPay-linux.zip"" target=""_blank""><img src=""https://cloud.githubusercontent.com/assets/904007/19670414/0e5f1782-9a35-11e6-8a80-8213ba451c35.png"" alt=""linux"" style=""max-width:100%;""></a>
</td>
</tr>
</tbody>
</table>

### Copay Bitcoin Wallet

<table>
<tbody>
<tr>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.8.0/Copay.dmg"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/41365188-24a234d8-6f0f-11e8-82d7-070555237f31.png"" alt=""macos"" style=""max-width:100%;""></a>
</td>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.8.0/Copay.exe"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/41365207-3279d91c-6f0f-11e8-93df-204fc69214da.png"" alt=""windows"" style=""max-width:100%;""></a>
</td>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.8.0/Copay-linux.zip"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/41365230-3fb81b02-6f0f-11e8-8b7f-61c97b8a7e5e.png"" alt=""linux"" style=""max-width:100%;""></a>
</td>
</tr>
</tbody>
</table>

## Changelog

* Support for ShapeShift Membership (verified account required)
* Minor bug fixes

## Screenshots

### BitPay Wallet

<table>
<tbody>
<tr>
<td>
<img src=""https://user-images.githubusercontent.com/237435/44586259-79c14b80-a785-11e8-96df-3978125caec1.jpg"" alt=""bitpay1"" width=""300"">
</td>
<td>
<img src=""https://user-images.githubusercontent.com/237435/44586266-847be080-a785-11e8-8f42-386194fca9df.jpg"" alt=""bitpay1"" width=""300"">
</td>
<td>
<img src=""https://user-images.githubusercontent.com/237435/44586273-8d6cb200-a785-11e8-9436-1d6709212f92.jpg"" alt=""bitpay1"" width=""300"">
</td>
</tr>
</tbody>
</table>

### Copay Bitcoin Wallet

<table>
<tbody>
<tr>
<td>
<img src=""https://user-images.githubusercontent.com/237435/44586405-fc4a0b00-a785-11e8-8b59-161589ce8080.jpg"" alt=""copay1"" width=""300"">
</td>
<td>
<img src=""https://user-images.githubusercontent.com/237435/44586415-01a75580-a786-11e8-9f2f-4d10e6ad39d8.jpg"" alt=""copay1"" width=""300"">
</td>
<td>
<img src=""https://user-images.githubusercontent.com/237435/44586424-0966fa00-a786-11e8-9ce1-165ea89d657c.jpg"" alt=""copay1"" width=""300"">
</td>
</tr>
</tbody>
</table>",18141084
473,False,False,2018-10-03T16:06:47Z,2018-10-03T17:15:33Z,"## Downloads

### BitPay Wallet

<table>
<tbody>
<tr>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.7.1/BitPay.dmg"" target=""_blank""><img src=""https://cloud.githubusercontent.com/assets/904007/19670415/0e601eb6-9a35-11e6-8b43-8c259e6bec22.png"" alt=""macos"" style=""max-width:100%;""></a>
</td>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.7.1/BitPay.exe"" target=""_blank""><img src=""https://cloud.githubusercontent.com/assets/904007/19670411/0e5c619a-9a35-11e6-808f-ed15a32fe6d1.png"" alt=""windows"" style=""max-width:100%;""></a>
</td>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.7.1/BitPay-linux.zip"" target=""_blank""><img src=""https://cloud.githubusercontent.com/assets/904007/19670414/0e5f1782-9a35-11e6-8a80-8213ba451c35.png"" alt=""linux"" style=""max-width:100%;""></a>
</td>
</tr>
</tbody>
</table>

### Copay Bitcoin Wallet

<table>
<tbody>
<tr>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.7.1/Copay.dmg"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/41365188-24a234d8-6f0f-11e8-82d7-070555237f31.png"" alt=""macos"" style=""max-width:100%;""></a>
</td>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.7.1/Copay.exe"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/41365207-3279d91c-6f0f-11e8-93df-204fc69214da.png"" alt=""windows"" style=""max-width:100%;""></a>
</td>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.7.1/Copay-linux.zip"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/41365230-3fb81b02-6f0f-11e8-8b7f-61c97b8a7e5e.png"" alt=""linux"" style=""max-width:100%;""></a>
</td>
</tr>
</tbody>
</table>

## Changelog

* ShapeShift integration: bug fixes

## Screenshots

### BitPay Wallet

<table>
<tbody>
<tr>
<td>
<img src=""https://user-images.githubusercontent.com/237435/44586259-79c14b80-a785-11e8-96df-3978125caec1.jpg"" alt=""bitpay1"" width=""300"">
</td>
<td>
<img src=""https://user-images.githubusercontent.com/237435/44586266-847be080-a785-11e8-8f42-386194fca9df.jpg"" alt=""bitpay1"" width=""300"">
</td>
<td>
<img src=""https://user-images.githubusercontent.com/237435/44586273-8d6cb200-a785-11e8-9436-1d6709212f92.jpg"" alt=""bitpay1"" width=""300"">
</td>
</tr>
</tbody>
</table>

### Copay Bitcoin Wallet

<table>
<tbody>
<tr>
<td>
<img src=""https://user-images.githubusercontent.com/237435/44586405-fc4a0b00-a785-11e8-8b59-161589ce8080.jpg"" alt=""copay1"" width=""300"">
</td>
<td>
<img src=""https://user-images.githubusercontent.com/237435/44586415-01a75580-a786-11e8-9f2f-4d10e6ad39d8.jpg"" alt=""copay1"" width=""300"">
</td>
<td>
<img src=""https://user-images.githubusercontent.com/237435/44586424-0966fa00-a786-11e8-9ce1-165ea89d657c.jpg"" alt=""copay1"" width=""300"">
</td>
</tr>
</tbody>
</table>",18141084
474,False,False,2018-09-28T13:12:19Z,2018-10-01T20:42:55Z,"## Downloads

### BitPay Wallet

<table>
<tbody>
<tr>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.7.0/BitPay.dmg"" target=""_blank""><img src=""https://cloud.githubusercontent.com/assets/904007/19670415/0e601eb6-9a35-11e6-8b43-8c259e6bec22.png"" alt=""macos"" style=""max-width:100%;""></a>
</td>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.7.0/BitPay.exe"" target=""_blank""><img src=""https://cloud.githubusercontent.com/assets/904007/19670411/0e5c619a-9a35-11e6-808f-ed15a32fe6d1.png"" alt=""windows"" style=""max-width:100%;""></a>
</td>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.7.0/BitPay-linux.zip"" target=""_blank""><img src=""https://cloud.githubusercontent.com/assets/904007/19670414/0e5f1782-9a35-11e6-8a80-8213ba451c35.png"" alt=""linux"" style=""max-width:100%;""></a>
</td>
</tr>
</tbody>
</table>

### Copay Bitcoin Wallet

<table>
<tbody>
<tr>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.7.0/Copay.dmg"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/41365188-24a234d8-6f0f-11e8-82d7-070555237f31.png"" alt=""macos"" style=""max-width:100%;""></a>
</td>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.7.0/Copay.exe"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/41365207-3279d91c-6f0f-11e8-93df-204fc69214da.png"" alt=""windows"" style=""max-width:100%;""></a>
</td>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.7.0/Copay-linux.zip"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/41365230-3fb81b02-6f0f-11e8-8b7f-61c97b8a7e5e.png"" alt=""linux"" style=""max-width:100%;""></a>
</td>
</tr>
</tbody>
</table>

## Changelog

### NEW

* Persistent logs: this could help us solve possible errors in your wallet and improve our support.
* Updates balance and history when app gets focus (desktop) or resume (mobile)
* For desktop only: download updates directly from the app
* Supports iOS 12

### IMPROVED

* Spanish and French translations
* More readable messages on confirm view
* Gift Cards: improved UX for Amazon.com and Mercado Libre integrations.

### BUG FIXES

* Fixed UI for wallet in foreign languages
* Fixed wallet import when BWS returns an error
* Coinbase integration: allows only US bank accounts. Also fixes on the sell process
* Address book support for BCH testnet legacy addresses
* Desktop version: fixed encrypted wallet export
* Fixed address book import/export

## Screenshots

### BitPay Wallet

<table>
<tbody>
<tr>
<td>
<img src=""https://user-images.githubusercontent.com/237435/44586259-79c14b80-a785-11e8-96df-3978125caec1.jpg"" alt=""bitpay1"" width=""300"">
</td>
<td>
<img src=""https://user-images.githubusercontent.com/237435/44586266-847be080-a785-11e8-8f42-386194fca9df.jpg"" alt=""bitpay1"" width=""300"">
</td>
<td>
<img src=""https://user-images.githubusercontent.com/237435/44586273-8d6cb200-a785-11e8-9436-1d6709212f92.jpg"" alt=""bitpay1"" width=""300"">
</td>
</tr>
</tbody>
</table>

### Copay Bitcoin Wallet

<table>
<tbody>
<tr>
<td>
<img src=""https://user-images.githubusercontent.com/237435/44586405-fc4a0b00-a785-11e8-8b59-161589ce8080.jpg"" alt=""copay1"" width=""300"">
</td>
<td>
<img src=""https://user-images.githubusercontent.com/237435/44586415-01a75580-a786-11e8-9f2f-4d10e6ad39d8.jpg"" alt=""copay1"" width=""300"">
</td>
<td>
<img src=""https://user-images.githubusercontent.com/237435/44586424-0966fa00-a786-11e8-9ce1-165ea89d657c.jpg"" alt=""copay1"" width=""300"">
</td>
</tr>
</tbody>
</table>",18141084
475,False,False,2018-08-31T20:24:53Z,2018-09-04T13:50:43Z,"## Downloads

### BitPay Wallet

<table>
<tbody>
<tr>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.6.2/BitPay.dmg"" target=""_blank""><img src=""https://cloud.githubusercontent.com/assets/904007/19670415/0e601eb6-9a35-11e6-8b43-8c259e6bec22.png"" alt=""macos"" style=""max-width:100%;""></a>
</td>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.6.2/BitPay.exe"" target=""_blank""><img src=""https://cloud.githubusercontent.com/assets/904007/19670411/0e5c619a-9a35-11e6-808f-ed15a32fe6d1.png"" alt=""windows"" style=""max-width:100%;""></a>
</td>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.6.2/BitPay-linux.zip"" target=""_blank""><img src=""https://cloud.githubusercontent.com/assets/904007/19670414/0e5f1782-9a35-11e6-8a80-8213ba451c35.png"" alt=""linux"" style=""max-width:100%;""></a>
</td>
</tr>
</tbody>
</table>

### Copay Bitcoin Wallet

<table>
<tbody>
<tr>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.6.2/Copay.dmg"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/41365188-24a234d8-6f0f-11e8-82d7-070555237f31.png"" alt=""macos"" style=""max-width:100%;""></a>
</td>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.6.2/Copay.exe"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/41365207-3279d91c-6f0f-11e8-93df-204fc69214da.png"" alt=""windows"" style=""max-width:100%;""></a>
</td>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.6.2/Copay-linux.zip"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/41365230-3fb81b02-6f0f-11e8-8b7f-61c97b8a7e5e.png"" alt=""linux"" style=""max-width:100%;""></a>
</td>
</tr>
</tbody>
</table>

## Changelog

* Update translations
* Manual refresh on scrolling down at Wallet Details Page
* Bug fixes when updating wallet status for desktop and mobile when the app get on focus or resume
* Fix UI for long strings when use different languages
* Bug fixes on Amazon Japan integration

## Screenshots

### BitPay Wallet

<table>
<tbody>
<tr>
<td>
<img src=""https://user-images.githubusercontent.com/237435/44586259-79c14b80-a785-11e8-96df-3978125caec1.jpg"" alt=""bitpay1"" width=""300"">
</td>
<td>
<img src=""https://user-images.githubusercontent.com/237435/44586266-847be080-a785-11e8-8f42-386194fca9df.jpg"" alt=""bitpay1"" width=""300"">
</td>
<td>
<img src=""https://user-images.githubusercontent.com/237435/44586273-8d6cb200-a785-11e8-9436-1d6709212f92.jpg"" alt=""bitpay1"" width=""300"">
</td>
</tr>
</tbody>
</table>

### Copay Bitcoin Wallet

<table>
<tbody>
<tr>
<td>
<img src=""https://user-images.githubusercontent.com/237435/44586405-fc4a0b00-a785-11e8-8b59-161589ce8080.jpg"" alt=""copay1"" width=""300"">
</td>
<td>
<img src=""https://user-images.githubusercontent.com/237435/44586415-01a75580-a786-11e8-9f2f-4d10e6ad39d8.jpg"" alt=""copay1"" width=""300"">
</td>
<td>
<img src=""https://user-images.githubusercontent.com/237435/44586424-0966fa00-a786-11e8-9ce1-165ea89d657c.jpg"" alt=""copay1"" width=""300"">
</td>
</tr>
</tbody>
</table>",18141084
476,False,False,2018-08-23T19:31:09Z,2018-08-24T13:12:31Z,"## Downloads

### BitPay Wallet

<table>
<tbody>
<tr>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.6.1/BitPay.dmg"" target=""_blank""><img src=""https://cloud.githubusercontent.com/assets/904007/19670415/0e601eb6-9a35-11e6-8b43-8c259e6bec22.png"" alt=""macos"" style=""max-width:100%;""></a>
</td>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.6.1/BitPay.exe"" target=""_blank""><img src=""https://cloud.githubusercontent.com/assets/904007/19670411/0e5c619a-9a35-11e6-808f-ed15a32fe6d1.png"" alt=""windows"" style=""max-width:100%;""></a>
</td>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.6.1/BitPay-linux.zip"" target=""_blank""><img src=""https://cloud.githubusercontent.com/assets/904007/19670414/0e5f1782-9a35-11e6-8a80-8213ba451c35.png"" alt=""linux"" style=""max-width:100%;""></a>
</td>
</tr>
</tbody>
</table>

### Copay Bitcoin Wallet

<table>
<tbody>
<tr>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.6.1/Copay.dmg"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/41365188-24a234d8-6f0f-11e8-82d7-070555237f31.png"" alt=""macos"" style=""max-width:100%;""></a>
</td>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.6.1/Copay.exe"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/41365207-3279d91c-6f0f-11e8-93df-204fc69214da.png"" alt=""windows"" style=""max-width:100%;""></a>
</td>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.6.1/Copay-linux.zip"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/41365230-3fb81b02-6f0f-11e8-8b7f-61c97b8a7e5e.png"" alt=""linux"" style=""max-width:100%;""></a>
</td>
</tr>
</tbody>
</table>

## Changelog

* New Tab navigations for Wallets
* New Feedback flow: send us your rating, comments or opinions regarding your experience with the app
* General UI improvements in the way to receive and send BTC or BCH
* Email receipts for Amazon Gift Card purchases (new email requirement)
* Detect a valid Bitcoin(Cash) URI or Payment Protocol Requests from clipboard
* Bug fixes on Coinbase and Amazon integrations
* Translation update

## Screenshots

### BitPay Wallet

<table>
<tbody>
<tr>
<td>
<img src=""https://user-images.githubusercontent.com/237435/44586259-79c14b80-a785-11e8-96df-3978125caec1.jpg"" alt=""bitpay1"" width=""300"">
</td>
<td>
<img src=""https://user-images.githubusercontent.com/237435/44586266-847be080-a785-11e8-8f42-386194fca9df.jpg"" alt=""bitpay1"" width=""300"">
</td>
<td>
<img src=""https://user-images.githubusercontent.com/237435/44586273-8d6cb200-a785-11e8-9436-1d6709212f92.jpg"" alt=""bitpay1"" width=""300"">
</td>
</tr>
</tbody>
</table>

### Copay Bitcoin Wallet

<table>
<tbody>
<tr>
<td>
<img src=""https://user-images.githubusercontent.com/237435/44586405-fc4a0b00-a785-11e8-8b59-161589ce8080.jpg"" alt=""copay1"" width=""300"">
</td>
<td>
<img src=""https://user-images.githubusercontent.com/237435/44586415-01a75580-a786-11e8-9f2f-4d10e6ad39d8.jpg"" alt=""copay1"" width=""300"">
</td>
<td>
<img src=""https://user-images.githubusercontent.com/237435/44586424-0966fa00-a786-11e8-9ce1-165ea89d657c.jpg"" alt=""copay1"" width=""300"">
</td>
</tr>
</tbody>
</table>",18141084
477,False,False,2018-07-05T13:31:56Z,2018-07-10T13:49:26Z,"## Downloads

### BitPay Wallet

<table>
<tbody>
<tr>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.5.0/BitPay.dmg"" target=""_blank""><img src=""https://cloud.githubusercontent.com/assets/904007/19670415/0e601eb6-9a35-11e6-8b43-8c259e6bec22.png"" alt=""macos"" style=""max-width:100%;""></a>
</td>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.5.0/BitPay.exe"" target=""_blank""><img src=""https://cloud.githubusercontent.com/assets/904007/19670411/0e5c619a-9a35-11e6-808f-ed15a32fe6d1.png"" alt=""windows"" style=""max-width:100%;""></a>
</td>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.5.0/BitPay-linux.zip"" target=""_blank""><img src=""https://cloud.githubusercontent.com/assets/904007/19670414/0e5f1782-9a35-11e6-8a80-8213ba451c35.png"" alt=""linux"" style=""max-width:100%;""></a>
</td>
</tr>
</tbody>
</table>

### Copay Bitcoin Wallet

<table>
<tbody>
<tr>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.5.0/Copay.dmg"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/41365188-24a234d8-6f0f-11e8-82d7-070555237f31.png"" alt=""macos"" style=""max-width:100%;""></a>
</td>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.5.0/Copay.exe"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/41365207-3279d91c-6f0f-11e8-93df-204fc69214da.png"" alt=""windows"" style=""max-width:100%;""></a>
</td>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.5.0/Copay-linux.zip"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/41365230-3fb81b02-6f0f-11e8-8b7f-61c97b8a7e5e.png"" alt=""linux"" style=""max-width:100%;""></a>
</td>
</tr>
</tbody>
</table>

## Changelog

- Fixes wallet import from onboarding screen
- Bug fixes on receive tab
- Translation updates
- Preserves window position between sessions (only desktop)
- Camera fixes on desktop version if no permission
- Now runs on Android 5.1 (Lollipop)
- Improved performance (lower battery usage in background mode)
- General UI bug fixes
- New Amazon.co.jp Gift Cards are now available (only Japan)

## Screenshots

### BitPay Wallet

![bitpay-github-changelog](https://user-images.githubusercontent.com/237435/41364245-83fc7a5e-6f0c-11e8-9ba9-5f9c88dabce6.png)

### Copay Bitcoin Wallet

![copay-github-changelog](https://user-images.githubusercontent.com/237435/41364526-5e3e67c2-6f0d-11e8-85b4-5c364f473502.png)",18141084
478,False,False,2018-06-13T14:49:21Z,2018-06-16T20:08:08Z,"## Downloads

### BitPay Wallet

<table>
<tbody>
<tr>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.4.0/BitPay.dmg"" target=""_blank""><img src=""https://cloud.githubusercontent.com/assets/904007/19670415/0e601eb6-9a35-11e6-8b43-8c259e6bec22.png"" alt=""macos"" style=""max-width:100%;""></a>
</td>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.4.0/BitPay.exe"" target=""_blank""><img src=""https://cloud.githubusercontent.com/assets/904007/19670411/0e5c619a-9a35-11e6-808f-ed15a32fe6d1.png"" alt=""windows"" style=""max-width:100%;""></a>
</td>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.4.0/BitPay-linux.zip"" target=""_blank""><img src=""https://cloud.githubusercontent.com/assets/904007/19670414/0e5f1782-9a35-11e6-8a80-8213ba451c35.png"" alt=""linux"" style=""max-width:100%;""></a>
</td>
</tr>
</tbody>
</table>

### Copay Bitcoin Wallet

<table>
<tbody>
<tr>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.4.0/Copay.dmg"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/41365188-24a234d8-6f0f-11e8-82d7-070555237f31.png"" alt=""macos"" style=""max-width:100%;""></a>
</td>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.4.0/Copay.exe"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/41365207-3279d91c-6f0f-11e8-93df-204fc69214da.png"" alt=""windows"" style=""max-width:100%;""></a>
</td>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.4.0/Copay-linux.zip"" target=""_blank""><img src=""https://user-images.githubusercontent.com/237435/41365230-3fb81b02-6f0f-11e8-8b7f-61c97b8a7e5e.png"" alt=""linux"" style=""max-width:100%;""></a>
</td>
</tr>
</tbody>
</table>

## Changelog

- UI improvements on home, receive and settings screens
- Added an option to unlink the BitPay Account (and all cards associated). (Only BitPay Wallet)
- Added the possibility to archive your Mercado Livre Brazil gift cards
- BCH paper wallet sweeping
- Improvements in the transactions list
- Improved Fingerprint and PIN modals
- Added warning messages for Testnet wallet
- Minor bug fixes due to bitcoin URI with incomplete params and support ""bchtest"" prefix
- Fixes in Coinbase integration
- Fixes on the wallet import functionality from the on-boarding screen

## Screenshots

### BitPay Wallet

![bitpay-github-changelog](https://user-images.githubusercontent.com/237435/41364245-83fc7a5e-6f0c-11e8-9ba9-5f9c88dabce6.png)

### Copay Bitcoin Wallet

![copay-github-changelog](https://user-images.githubusercontent.com/237435/41364526-5e3e67c2-6f0d-11e8-85b4-5c364f473502.png)
",18141084
479,False,False,2018-05-22T13:57:31Z,2018-05-22T17:25:11Z,"- UI bug fixes for small screen devices
- Updated translations 
- Privacy Policy and email opt-in updates for compliance with the General Data Protection Regulation (GDPR) of the European Union (EU)",18141084
480,False,False,2018-05-13T01:01:17Z,2018-05-13T03:52:53Z,- Bug fixes,18141084
481,False,False,2018-05-11T18:26:24Z,2018-05-11T20:18:47Z,- Bug fixes,18141084
482,False,False,2018-05-09T18:53:37Z,2018-05-09T20:32:26Z,"* Update translations
* Bug fixes",18141084
483,False,False,2018-05-07T20:23:48Z,2018-05-07T20:57:25Z,Bug fixes,18141084
484,False,False,2018-05-07T12:29:34Z,2018-05-07T13:59:55Z,"* Fixes custom wallet order
* Bug fixes on Coinbase integration",18141084
485,False,False,2018-05-03T16:25:11Z,2018-05-03T18:01:54Z,"* Improves flow to add a BitPay Card
* Updates French translation
* Adds release notification on desktop for patch releases

Bug fixes:

* Updates home view after you sign/broadcast/remove a proposal
* Avoids handling deep links if the app is already started
* Shows cached history and balance if the app gets a connection error
* Disables password saving in Chrome",18141084
486,False,False,2018-04-27T21:08:00Z,2018-04-30T18:16:05Z,"This release has big changes in background's technology. We migrated all the code to new version of Ionic v3, Angular 5 with TypeScript and also we updated all plugins and components. The result is a lighter and faster application.

* General improvements in performance and smoother animations
* Background task optimizations
* Turn on/off integration services individually
* Order your wallets in Home
* Update translations
* Bug fixes",18141084
487,False,False,2018-03-02T14:00:27Z,2018-03-02T14:33:08Z,Bug fixes,18141084
488,False,False,2018-03-01T17:51:13Z,2018-03-01T18:56:54Z,* Payment Protocol Bug Fixes,18141084
489,False,False,2018-02-28T18:39:27Z,2018-03-01T15:54:17Z,"* Bitcoin Cash Debit and Gift Card top-ups
* Improvements on Payment Protocol for multi signature transaction proposals
* Fixes SendMax for BCH
* Fix app startup on some old Android devices",18141084
490,False,False,2018-02-22T18:46:52Z,2018-02-22T18:55:53Z,- Payment Protocol Implementation fixes,18141084
491,False,False,2018-02-13T15:35:13Z,2018-02-13T17:45:58Z,Bug fixes,18141084
492,False,False,2018-01-24T12:55:48Z,2018-01-24T14:24:31Z,Bug fixes,18141084
493,False,False,2018-01-19T15:23:32Z,2018-01-19T17:55:45Z,- Bug fixes,18141084
494,False,False,2018-01-17T17:41:00Z,2018-01-18T17:22:48Z,- Exchange between Bitcoin and Bitcoin Cash in your wallet with our new in-app ShapeShift integration,18141084
495,False,False,2018-01-16T13:12:16Z,2018-01-16T13:58:33Z,- QR Codes fixes in receive,18141084
496,False,False,2018-01-15T12:23:54Z,2018-01-15T14:11:09Z,"* Bitcoin Cash new address format support (cashaddr)
* Bug fixes (Coinbase integration)
* Minor UI improvements",18141084
497,False,False,2017-12-29T12:59:55Z,2018-01-09T20:50:42Z,"- New gift card integration: Mercado Libre (redeemable for Mercado Libre users in Brazil only)
- Bug fixes",18141084
498,False,False,2017-11-29T13:24:07Z,2017-12-01T19:36:41Z,"Bug fixes in Payment Protococol URI Handling
Enhanced translations",18141084
499,False,False,2017-11-20T19:12:10Z,2017-11-21T02:49:22Z,"* Adds iPhone X support
* Better separation of Bitcoin and Bitcoin Cash wallets in home, send and receive views, to prevent confusion. 
* Many fixes in balance and transaction history updates
* It is now possible to access the  xPriv key from settings (only for advanced users)
* Improves Coinbase integration.  Uses updated Coinbase API version.
* Updates translations

--


",18141084
500,False,False,2017-09-21T15:51:05Z,2017-09-26T14:08:30Z,"* Bitcoin Cash support
* Support for ISO 4217 when selecting currency codes
* Fix issue with bitcoin purchase through Coinbase account with 2FA enabled
* Bug fixes and minor UI updates",18141084
501,False,False,2017-08-17T13:01:28Z,2017-08-17T15:18:57Z,"* Fix certain buy issues in Coinbase integration
* Fix Amazon GC integration for international customers
* Updates translations",18141084
502,False,False,2017-07-26T12:32:57Z,2017-07-26T19:32:04Z,- Fixes Bitpay Card Topups and Amazon GC for certain transaction amounts,18141084
503,False,False,2017-07-18T18:59:59Z,2017-07-19T19:57:02Z,"* Custom fee for new transactions
* Receive confirmation notification for outgoing transactions
* Bug fixes on BitPay Card pairing, transaction notes and Glidera Buy/Sell with 2FA activated
* UI improvements on BitPay Card history
* Enhanced details before to buying an Amazon gift card",18141084
504,False,False,2017-06-29T18:12:24Z,2017-06-30T14:08:24Z,"




- Adds warnings related to low fees
- Adds balance UTXOs analysis section
- Fixes Coinbase buy process in certain scenarios
- Multiple fixes in Bitpay Card integration",18141084
505,False,False,2017-06-06T18:41:53Z,2017-06-07T17:48:23Z,"v3.4.0
 - Fixes in International Card User interface
 - Fixes in spending password setting


v3.3.0
- Receive push notifications and/or email notifications when your transactions confirm
- Customize the miner fee level for each transaction you send
- Improved listing and descriptions of transactions for BitPay Cards users (BitPay Wallet users only)
- Minor bug fixes",18141084
506,False,False,2017-05-09T23:42:16Z,2017-05-10T15:24:32Z,"* Enhanced receive tab.
* Bug fixes",18141084
507,False,False,2017-04-26T12:27:35Z,2017-04-26T18:18:02Z,"This new version of the BitPay wallet adds PIN and fingerprint authentication, a much-requested feature for securing wallets on devices. We've also added new options for sending bitcoin to bitcoin wallets and the BitPay Card. 

* Lock app by PIN/Fingerprint
* Show warning for low fee in transactions
* Paste BTC amount (only desktop version)
* Enable Send Max to top up debit cards
* New languages: Portuguese, Brazilian
* UI improvements
* Bug fixes",18141084
508,False,False,2017-03-22T15:06:23Z,2017-03-22T14:22:39Z,"BitPay – Secure Bitcoin Wallet Version – v3.0.0

This major BitPay wallet release re-unifies the codebases of the BitPay Secure Bitcoin Wallet and Copay. Both apps are now design-for-design compatible and feature-for-feature compatible, with the exception of our BitPay Card integration for the BitPay app only. 

This release also adds some nice new features our users have been asking for:

Uses a new push notification system using Google's Firebase (see bitpay/bitcore-wallet-service#627).
Fixes BIP32 compliance issue when deriving certain private keys (see bitpay/bitcore-lib#116)
Adds Urgent fee policy (nBlocks=2 * 1.5)
Copay Codebase and Design Update.
",18141084
509,False,False,2017-03-22T15:05:55Z,2016-10-25T13:31:26Z,"# Download

<h3>This is the latest release of the BitPay app – a BitPay-supported distribution of Copay, including built-in integration with the BitPay Card.</h3>


Choose your platform to get started.

<table>
<tbody>
<tr>
<td>
<a href=""https://itunes.apple.com/us/app/bitpay-secure-bitcoin-wallet/id1149581638"" target=""_blank""><img src=""https://cloud.githubusercontent.com/assets/904007/19670412/0e5d4498-9a35-11e6-876a-98b49e721e05.png"" alt=""ios"" style=""max-width:100%;text-align:center""></a>
</td>
<td>
<a href=""https://play.google.com/store/apps/details?id=com.bitpay.wallet"" target=""_blank""><img src=""https://cloud.githubusercontent.com/assets/904007/19670413/0e5e1bac-9a35-11e6-8952-ac78bc8ae7c4.png"" alt=""android"" style=""max-width:100%;""></a>
</td>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.8.1/BitPay-linux.zip"" target=""_blank""><img src=""https://cloud.githubusercontent.com/assets/904007/19670414/0e5f1782-9a35-11e6-8a80-8213ba451c35.png"" alt=""linux"" style=""max-width:100%;""></a>
</td>
</tr>
<tr>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.8.1/BitPay.exe"" target=""_blank""><img src=""https://cloud.githubusercontent.com/assets/904007/19670411/0e5c619a-9a35-11e6-808f-ed15a32fe6d1.png"" alt=""windows"" style=""max-width:100%;""></a>
</td>
<td>
<a href=""https://github.com/bitpay/copay/releases/download/v4.8.1/BitPay.dmg"" target=""_blank""><img src=""https://cloud.githubusercontent.com/assets/904007/19670415/0e601eb6-9a35-11e6-8b43-8c259e6bec22.png"" alt=""macos"" style=""max-width:100%;""></a>
</td>
</tr>
</tbody>
</table>
",18141084
510,False,False,2016-09-07T12:28:56Z,2016-09-07T13:10:22Z,"Fix localstorage to chrome storage migration issue, when migrating from already depleted localstorage.
",18141084
511,False,False,2016-08-22T01:29:49Z,2016-08-22T11:56:42Z,"### Security Update

Fixes bug that could leave unencrypted keys in memory after entering the spending password when signing transactions  in multisignature wallets.
- **Who is affected**:
  
  Users that have the `spending password` set, in multisignature wallets m-of-n in which m>1.  
- **How are affected**:
  
  After entering the password and signing a transaction in multisignature wallets, and only after adding the 2nd or later signatures, the wallet keys can stay unencrypted. If a new TX need to be signed, the password will not be asked. The unencrypted keys will stay on memory as long as the app is open.
",18141084
512,False,False,2016-08-12T12:26:37Z,2016-08-16T12:21:40Z,"- New amount input widget
- Adds Amazon Gift card integration
- Bug fixes
",18141084
513,False,False,2016-07-28T20:42:51Z,2016-07-28T21:26:23Z,"- Fix storage capacity  (desktop versions)
- Add Windows Protocol handler (desktop version)
- Allow window resizing (desktop versions)
- Minor bug fixes
",18141084
514,False,False,2016-07-15T16:46:13Z,2016-07-15T18:36:53Z,"- Set spend unconfirmed funds to off by default (only new users)
- Enables copy to clipboard for wallet information on mobile
- Various small UX fixes
",18141084
515,False,False,2016-07-01T13:25:54Z,2016-07-01T15:26:49Z,"New features:
- Migrate to another device with a simple QR code
- Supports wide screens and landscape format for tablets.

Bug fixes:
- Improves performance (removes unused js library)
- Removes cache history from export wallet
- Check from swipe paper wallet if backup has been completed.
- Fix UI sidebar menu
- Full amount precision on tx details modals
- Fix backup scrolling for small devices
- Fix spinner while create/import/join a wallet
- Fix preferences UI for some Android versions
",18141084
516,False,False,2016-06-21T16:16:11Z,2016-06-21T16:43:54Z,"Bug fixes release:
- Fix bug accessing the storage, when using multiple wallets.
- Fix amount validation for large numbers.
",18141084
517,False,False,2016-06-17T15:11:18Z,2016-06-17T16:49:52Z,"Bug fixes release:
- Fixes Validation Wallet cache (to prevent a wallet to be validated multiple times) on certain scenarios
- Fixes side bar scroll on some devices
- Fixes backup/export when touch id is set
- Enhanced UI when deleting a wallet
",18141084
518,False,False,2016-06-15T19:12:43Z,2016-06-15T19:52:20Z,"- Interface enhancements: faster transitions, better modals, pull to refresh, hide balance, infinite scroll, etc.
- Notes to activity items (both incoming and outgoing TXs), synced by the server and between copayers
- Single address wallets (for easier audit)
- Adds Chinese mnemonics
- Enhanced error messages
",18141084
519,False,False,2016-04-29T18:33:09Z,2016-05-02T13:24:37Z,"- Fixes bug in send-max
",18141084
520,False,False,2016-04-21T20:21:03Z,2016-04-21T21:12:11Z,"- Bug fixes
",18141084
521,False,False,2016-04-18T13:43:26Z,2016-04-20T18:01:08Z,"- Coinbase integration 
- Better Send All funds (for wallets with multiple or small inputs)
- Contextual links in push notifications
- Bug fixes

OSX Note:  The external signature is not provided because the DMG file was signed using Apple's `codesign` utility. The signature will be checked by the OS on install. The signature can be manually verified using `codesign -dv  Copay.dmg`
",18141084
522,False,False,2016-04-05T18:22:46Z,2016-04-05T19:54:02Z,"- Bug fixes
",18141084
523,False,False,2016-03-09T19:37:55Z,2016-03-09T20:30:15Z,"- Bug fixes
",18141084
524,False,False,2016-03-04T22:07:10Z,2016-03-04T22:46:17Z,"- Bug fixes
",18141084
525,False,False,2016-02-29T19:40:22Z,2016-03-03T12:12:11Z,"- Search transactions from the Activity screen
- Paste from clipboard (only mobile)
- Responsiveness and UX improvements
- Confirmation popup with the `fee` information before send a transaction
- Bug fixes
",18141084
526,False,False,2016-01-29T14:56:23Z,2016-01-29T16:16:09Z,"- Fixes transaction views with multiple outputs.
",18141084
527,False,False,2016-01-22T18:51:30Z,2016-01-22T20:35:24Z,"- Fixes an error when signing a transaction with an encrypted wallet (only on mobile devices)
",18141084
528,False,False,2016-01-22T15:49:00Z,2016-01-22T16:35:36Z,"- Push notifications
- Fix errors when using Touch Id with Glidera and Touch Id with key encryption
- Display historic exchange rate in tx history
- Faster balance refresh
",18141084
529,False,False,2016-01-22T13:59:51Z,2016-01-22T14:53:44Z,"- Push notifications
- Fix errors when using Touch Id with Glidera and Touch Id with key encryption
- Display historic exchange rate in tx history
- Faster balance refresh
",18141084
530,False,False,2016-01-15T21:25:42Z,2016-01-15T22:03:10Z,"- Bug fixes
",18141084
531,False,False,2016-01-08T20:26:18Z,2016-01-08T21:21:23Z,"- Improves some icons
- Minor UX changes on receive
- Update translations
- Bug fixes
",18141084
532,False,False,2015-12-16T20:03:13Z,2015-12-16T20:53:11Z,,18141084
533,False,False,2015-12-16T04:50:35Z,2015-12-16T05:28:29Z,"- Fix initial startup on Android 4.1 and 4.2
",18141084
534,False,False,2015-12-15T14:36:16Z,2015-12-15T15:26:19Z,"- Enhanced user interface and design
- New backup verification quiz
- Faster bootstrapping
- Tons of bug fixes
",18141084
535,False,True,2015-12-07T16:12:21Z,2015-12-07T17:51:51Z,,18141084
536,False,False,2015-11-20T14:50:33Z,2015-11-24T12:35:17Z,"- TREZOR support (only in Chrome App version)
- New notification system. Reduced bandwidth usage and better handling of network disconnections
- Addressbook
- Transaction history cache and better ordering
- Better BIP44 Support: prevent gaps in indexes when scanning wallets and generating addresses
- Per Wallet BWS Setting
- Fixes resume event on mobile
- Bug fixes
",18141084
537,False,True,2015-11-03T20:03:23Z,2015-11-03T20:08:21Z,,18141084
538,False,False,2015-10-28T20:44:39Z,2015-10-28T20:46:29Z,"- Fixes the application startup error (after accept the disclaimer)
- Handle error when the device ID mismatch (Android devices)
",18141084
539,False,False,2015-10-26T04:21:43Z,2015-10-26T05:57:49Z,"- Fixes refresh when importing a wallet
",18141084
540,False,False,2015-10-21T16:27:02Z,2015-10-21T16:34:48Z,"- Adds option to set a different Wallet Service per wallet
- Enhances  CSV generator (only desktop version)
- Updates Cordova to version 5.3.3
- Fixes minor bugs
",18141084
541,False,False,2015-10-09T13:41:32Z,2015-10-17T13:08:01Z,"# Major updates
- Support for iOS 9
- Support Touch ID (only iOS) 
- Paper wallet support

# Minor updates
- New splash to install Copay in OSX
- Fix animations
- Handle back-button on Android devices if a modal is opened
- Fix beep sound after barcodescanner on Android devices
- Fix derivation path on Advanced Information
- Add non-backward compatibility URI for payment protocol
- Hide menu bottom if wallet is not authorized
- Fix wording on the backup page
- Fix translation strings
- Updates the packages dependencies with bower
- Fix mnemonic with private key encrypted
- Fix time in proposal transactions
- Fix autofocus to password input in Request Password for Spending Funds modal
",18141084
542,False,True,2015-10-02T23:06:40Z,2015-10-02T23:08:04Z,"# Major updates
- Support for iOS 9
- Trezor hardware wallet support
- Paper wallet support

# Minor updates
- New splash to install Copay in OSX
- Fix animations
- Handle back-button on Android devices if a modal is opened
- Fix beep sound after barcodescanner on Android devices
- Fix derivation path on Advanced Information
- Add non-backward compatibility URI for payment protocol
- Hide menu bottom if wallet is not authorized
- Fix wording on the backup page
- Fix translation strings
- Updates the packages dependencies with bower
- Support for iOS 9
- Fix mnemonic with private key encrypted
- Fix time in proposal transactions
- Fix autofocus to password input in Request Password for Spending Funds modal
",18141084
543,False,False,2015-09-21T13:27:33Z,2015-09-21T14:07:52Z,"- Support for backup phrases (BIP39)
- Support for BIP44
- Support for non-multisig addresses for personal wallets (1-of-1)
- Advanced wallet details
- Ledger support for multisig wallets (ChromeApp only)
- Minor bug fixes
",18141084
544,False,True,2015-09-09T19:30:15Z,2015-09-09T19:37:08Z,,18141084
545,False,False,2015-08-18T19:42:39Z,2015-08-19T19:29:27Z,"- Adaptive fee levels based on bitcoin network load
- Option to prevent creating transactions with unconfirmed inputs
- Added advanced sending options
- Added Italian, Russian, and Greek language options
- Minor bug fixes
",18141084
546,False,False,2015-07-17T14:28:36Z,2015-07-17T15:38:53Z,"- Now is possible to make backups without signing capabilities (more info https://github.com/bitpay/copay/pull/2998)
- Better refresh and sorting rules in transaction history
- Better handling of `invalid` transactions in history
- Better handling of wallets with 1K+ transactions in history
- Exports .csv files with transaction ID
- Better UTXOs selection polices
- Minor bug fixes
",18141084
547,False,False,2015-07-10T19:40:29Z,2015-07-10T22:19:50Z,"- Bug fixes
- Export the history in .csv format (Libra Tax compatible). Only available on desktop versions.
",18141084
548,False,False,2015-07-02T14:39:09Z,2015-07-10T13:13:22Z,"- QR Codes with specified amount for Receiving Payments
- Fund Transfer Between Wallets
- HTML Email Notifications
- Custom Transaction Fee Settings
- Send Maximum Amount of Funds
- New Spending Proposal Deletion Rules
- Bugs Fixes for Offline Functionality

Have more requests for Copay features or feedback on the app? Let us know on [Copay's GitHub page](https://github.com/bitpay/copay/issues) or on our dedicated product forum at [BitPay Labs](https://labs.bitpay.com/c/copay/features). Visit [copay.io](https://copay.io/) to download or learn more about our secure, shared wallet.
",18141084
549,False,False,2015-06-01T13:21:43Z,2015-06-01T13:23:26Z,"- Better handling of network interruption errors
- Better refresh logic after accepting/rejecting payments
- Updates ES, JP and FR translations
- Fix scroll with in certain popups
- Desktop version for Windows, OSX and Linux (see Readme for details about how to compile them)

Binaries are signed with ""Copay (visit copay.io) copay@bitpay.com""
[See how to check binary signatures here](https://gist.github.com/matiu/61c9f529efeeba66c0e2)
",18141084
550,False,True,2015-05-28T18:14:08Z,2015-05-28T18:15:12Z,"- Bug fixes
",18141084
551,False,True,2015-05-23T01:32:36Z,2015-05-23T01:47:03Z,"- Wallet notifications by email
- Completes Payment Protocol Implementation by sending `payment` message along the payment transaction
- Updates the builder to work with cordova v4.3.x
- Fixes UX and mobile issues
",18141084
552,False,True,2015-05-13T17:21:35Z,2015-05-13T17:24:53Z,"- Import a wallet directly from the start screen (for new Copay installation).
- Updates translation.
- Minor bug fixes.
",18141084
553,False,True,2015-05-12T18:18:25Z,2015-05-12T18:19:27Z,"- Improves animations for page states and modals
- Updates translations
- General bug fixes
",18141084
554,False,True,2015-04-29T17:45:49Z,2015-04-29T17:52:39Z,"- Improvement in touch responsiveness
- Pre-load some functions in background to speed up the transitions between pages
- Replaces localStorage with fileStorage on iOS and Android
- Minor UX bug fixes
",18141084
555,False,True,2015-04-24T21:03:40Z,2015-04-24T21:05:02Z,"- Mobile performance improvements
- New notifications system for ChromeApp and mobile devices
- Fixes legacy import on local profiles on ChromeApp
- Tons of UI bug fixes
",18141084
556,False,True,2015-04-17T21:10:54Z,2015-04-17T21:46:58Z,"- Public release of 0.10 (https://github.com/bitpay/copay/releases/tag/v0.10.0)
",18141084
557,False,True,2015-04-11T16:29:48Z,2015-04-11T16:30:16Z,,18141084
558,False,True,2015-04-11T16:01:02Z,2015-04-11T16:09:38Z,"- Hardware acceleration for animation on mobile devices
",18141084
559,False,True,2015-04-11T15:31:22Z,2015-04-11T15:33:02Z,"Major rewrite of COPAY to use Bitcore-Wallet-Service (https://github.com/bitpay/bitcore-wallet-service) for copayer's coordination.

## Wallet Migration from 0.9 Beta

Wallet format and storage have changed significantly in v0.10 Beta. In v0.10 Beta wallets credentials _are only stored on the device_. Private keys never leave the device. Cloud storage is not longer supported.

It is possible to migrate v0.9 wallets stored ""on the device"" or ""on the cloud"" using the feature provided at ""Menu > Add new Wallet > Import v0.9"". You need to enter your username or email and password, and Copay will import and migrate your old profile to v0.10 format. You can import from profile more that once on different devices.   v0.10 supports accessing your wallet concurrently.

Since wallet's credentials are not longer replicated on any cloud storage it is _CRITICAL_ that you backup your wallet and store it safely. This can be done at ""Wallet Home > Settings > Backup"". Only one backup per wallet is needed: It is possible to totally recover funds from a wallet having an old backup. You will be asked for a password to protect your backup. When you import it, you will need that password.

In case you have an old Copay backup to recover, you can use the hosted 'legacy' web version at https://copay.io/in/0.9. If you backup is older than 0.9 and it is not compatible with 0.9 (0.7 or older) you need to checkout the corresponding version (https://github.com/bitpay/copay/releases) and hosted locally to recover it.
",18141084
560,False,True,2015-03-19T15:18:39Z,2015-03-19T15:20:00Z,"- New PIN screen.
- AutoUpdate of transaction details if it was signed/rejected or broadcasted.
- Show unsent transactions on Home screen.
- Improves UX responses when pressing a button.
- Minor bug fixes
- Detect device language automatically (only Spanish)
",18141084
561,False,True,2015-02-09T15:43:27Z,2015-02-09T15:46:32Z,"- Bug fixes
",18141084
562,False,True,2015-02-04T20:16:11Z,2015-02-04T22:08:28Z,"- Improves rendering, response time and UX issues for mobile devices.
- Enables to copy to clipboard and to share your addresses.
- Send by email the backups of profile and wallets.
- New interface to enter the PIN.
- Fixes rounding amounts.
",18141084
563,False,True,2015-01-20T13:51:40Z,2015-01-20T14:12:42Z,"- fix wallet sync problem using IE on Windows Phone
- many UX enhancements: desktop sidebar, top bar, etc.
- remove manage wallet section, in favor of wallet's settings.
- Window Phone rendering optimisations
",18141084
564,False,True,2015-01-08T03:06:00Z,2015-01-08T03:14:33Z,"v0.9.4
- Fix small UX issues on WP (sidebar)
- Fix race condition when using a profile on the cloud from multiple devices at the same time.
- Add disclaimer to mobile apps.
",18141084
565,False,True,2015-01-05T18:20:59Z,2015-01-05T20:24:45Z,"- Windows Phone version
- Better synchronisation schema for join / create wallet (still needs the creator to be online while the others join)

## \- Fix storing the wallets after certain events. Timing issues
",18141084
566,False,True,2014-12-19T22:20:07Z,2014-12-19T22:27:00Z,"- Fixes sporadic bug when storing wallets
- Better Insight server integration (Storage / email confirmation / resend confirmation)
- New left sidebar in mobile
- Better send form
- Increase test coverage to 82%
- Fixes import in certain devices
",18141084
567,False,True,2014-12-12T22:43:21Z,2014-12-12T23:14:10Z,"# v0.9.0 Major Changes
- New Cordova based mobile apps:  Builds available for:
         \* iOS 
         \* Android
- New Chrome App (the safer way to use Copay on a desktop!)
- Major UX changes:
  - new wallet selection and profile actions on mobile
  - new signup funnel
  - new transaction proposals and transaction history layouts 
  - new tabs on mobile devices
  - enhanced forms error notifications and validation
  - PIN for mobile devices easier access 
  - Copayer gravatar's profile images
- Major performance improvements related to BIP32 address derivation. Especially noticeable on mobile devices.
- Better Payment Protocol Handling (it now appears on proposed transaction and history. Each copayer download the request from the server by their own).
- Better network usage:
  - optimisation of some network messages
  - reconnects & network changes
- Transaction History download (in CSV format)
- Add quotas and limits to Insight Profile storage
",18141084
568,False,True,2014-12-05T21:37:06Z,2014-12-05T21:39:41Z,"# Release Candidate
- New Cordova based mobile apps:  Builds available for:
         \* iOS (lets us know you if want a iOS invite)
         \* Android
         \* WP coming soon (~10 days)
- New Chrome App (the safer way to use Copay on a desktop!)
- Major UX changes:
  - new wallet selection and profile actions on mobile
  - new signup funnel  (ping @gabegattis)
  - new transaction proposals and transaction history layouts 
  - new tabs on mobile devices
  - enhanced forms error notifications and validation
  - PIN for mobile devices easier access 
  - Copayer gravatar's profile images
- Major performance improvements related to BIP32 address derivation. Especially noticeable on mobile devices.
- Better Payment Protocol Handling (it now appears on proposed transaction and history. Each copayer download the request from the server by their own).
- Better network usage:
  - optimisation of some network messages
  - reconnects & network changes
- Transaction History download (in CSV format, ping @bryan and @pierre)
- Add quotas and limits to Insight Profile storage
",18141084
569,False,True,2014-11-13T18:31:12Z,2014-11-13T18:33:10Z,"- Fix error when creating a multisig wallet, on first copayer.
",18141084
570,False,True,2014-11-13T15:14:07Z,2014-11-13T15:16:44Z,"- Fix transaction notifications in existent wallets
- Add pagination to history
- Add CSV export to history
- Add gravatars to profiles
- Small UX and stability fixes.
",18141084
571,False,True,2014-11-11T20:24:29Z,2014-11-11T20:32:28Z,"- Fix issues with the encoding of certain passwords.
- Add backwards compatibility to old wallet and profile backups
- Changes in UX and menu layouts.
",18141084
572,False,True,2014-11-02T01:01:36Z,2014-11-02T01:04:33Z,"- Fix layout on some mobile devices
- Force refresh after submitting create / sign in forms
- Many small fixes on create / sign in forms errors and messages.
",18141084
573,False,True,2014-10-31T23:10:36Z,2014-10-31T23:26:55Z,"This is a mayor update on Copay:
- Implements the one identity - multiple wallets feature
- Allows to optionally store encrypted  profiles  remotely on the given Insight server
- New mobile apps using Iconic/Cordova (on a new github repo)
- Major changes on UX, new wallet homepage, new transaction history change, new navigation bars
- Optimised network communications
",18141084
574,False,True,2014-10-17T12:08:12Z,2014-10-17T12:12:47Z,"This is a bug fix and optimisation release. 

We plan to release Copay 0.7 with the ongoing Identity Feature next week. https://github.com/bitpay/copay/pull/1498
- workaround for iOS backups
- replace Crypto-JS with SCJS
- simplify localStorage schema
- Fix networking and UX bugs
",18141084
575,False,True,2014-10-02T14:24:34Z,2014-10-02T14:31:25Z,"- Updates bitcore version to handle scientific notation parameters from Insight (which prevented transactions been generated using small ouputs)
",18141084
576,False,True,2014-09-29T15:12:38Z,2014-09-29T15:37:51Z,"- Bug & Stability fixes
- Fix payment protocol in same cases.
- Better storage handling (one key per wallet)
",18141084
577,False,True,2014-09-22T17:54:18Z,2014-09-22T17:59:22Z,"- Many UX (mobile and desktop) and stability fixes.
- New plugin system
- Async storage, Google Drive example.
- Payment protocol handling fixes.
",18141084
578,False,True,2014-09-10T15:14:45Z,2014-09-10T02:35:21Z,"- Enables Asynchronous Wallet operation, using the open source (Insight Server as temporary storage).
- Copay now works on iOS browsers, Safari/OSX, IE, etc. Replaces webRTC. Networking is now implemented using Insight (https://github.com/bitpay/insight) to broke messages between the peers.
- Fixes the Payment protocol implementation. Validates X509 Cert using pure javascript, as implemented in Bitcore (https://github.com/bitpay/bitcore)
- Multi language support 
- Alternative currency (fiat) support
- New mobile versions, based only on Apache Cordova. Android version ready.
- Many fixes related to security, edge transaction cases and UX on mobile versions.

As always, deployed at https://copay.io
",18141084
579,False,True,2014-08-18T22:31:45Z,2014-08-18T22:42:08Z,"- Fix error importing  backup, described on #1078 
",18141084
580,False,True,2014-08-16T04:44:19Z,2014-08-16T04:55:51Z,"- Implements payment protocol BIP70 (!!)
- Implements bitcoin uri handling BIP21
- Many fixes and enhancement related to the Android version
- Complete refactor of the transaction proposal communication protocol, to reduce trust on peers
- Fixes and enhancements related to the new design and wording in menus.
",18141084
581,False,True,2014-08-01T18:40:13Z,2014-08-01T18:46:18Z,"- New design (!!)
- Several UI improvements
- Shared secret with QR code
- Many enhances in Android
",18141084
582,False,True,2014-07-25T21:36:12Z,2014-07-25T21:37:33Z,"- Fixes SIGHASH security issue 
- Many UX related fixes
- Android version update, QR scanning
- Remove seed backup (before wallet completion)
",18141084
583,False,True,2014-06-27T21:35:06Z,2014-06-27T21:36:22Z,"## v0.2.1

## New features
- Smart backup restore procedure: now it is possible to restore all wallet's fund with an old backup  (thanks Ian for the feedback).
- Transaction proposals can now have a short note attached for reference (thanks Gentry for the feedback).
- New wallet settings: Bitcoin Unit, defaults to _bits_ (thanks Eric for the suggestion)
- Backup is now autogenerated on wallet completion (thanks Eric for the suggestion)
- A wallet now can be removed from a particular system from the UX.
- New address book shared between copayers.

## Security
- Asymetric encryption and signing using ECIES. Details at https://gist.github.com/ryanxcharles/c29fc94d31de7c8c89dc
- Default SSL connection to Insight and PeerJs servers 

## Code quality
- Test coverage from  60.9% to 74% (1) (thanks Ryan for insisting on this)
- Mayor refactoring of Angular servicies (backupService, controllerUtils, wallet's Indexes handling, txProposal merge related functions, 
- Add +30 karma tests for Angular controllers and services
- Unified js-beautifier format throw all the code

## Other
- Backup to email have been removed
- Performance improvements when signing transactions
- Review of Copay 1-of-1 UX
- Minor UX and wording fixes (address list on receiving funds, notifications fixes, error handling on bad passwords, network timeouts, feedback at importing process, etc).

## Next steps
- Make Copay available in other platforms (update Gordon's Atom shell packages, Android bundle, Firefox / Chrome extensions).
- Implement Copay 2.0 design: http://invis.io/FWZGJWUS  (please take a look at leave comments)

Please check https://github.com/bitpay/copay/wiki/Copay-Known-issues before using Copay.

(1) not including Karma tests, not included on Coveralls yet.
",18141084
584,False,True,2014-06-10T00:29:46Z,2014-06-05T22:53:25Z,"## Installation

Download the pre-built package for your platform below and follow your platform specific instructions.

### Mac OSX
- Download _Copay-darwin-x64.zip_
- Double click to extract archive
- Move _Copay.app_ to you Applications directory
- Launch as usual

### GNU/Linux
- Download _Copay-linux-x64.tar.gz_
- Extract to desired location
- Run the `copay` executable

Alternatively, you can run the following command to download Copay and setup a `.desktop` entry.

```
curl https://raw.githubusercontent.com/bitpay/copay/master/shell/assets/linux/install.sh | sudo sh
```

### Windows
- Download _Copay-win32-x86.zip_
- Extract the archive and run the installer

## Screenshots

![menubar_and_copay_-_multisignature_wallet](https://cloud.githubusercontent.com/assets/1188875/3192238/c6db3270-ece3-11e3-8202-19926f58c859.png)

![selection_162](https://cloud.githubusercontent.com/assets/1188875/3192084/e8785d56-ece1-11e3-92d1-f6fd2a2ff36c.png)

![screenshot_060514_010135_pm](https://cloud.githubusercontent.com/assets/1188875/3192947/53c4e188-ecec-11e3-8363-ddc589fb72ba.jpg)
",18141084
585,False,False,2020-02-29T18:33:12Z,2020-02-29T18:56:35Z,"## Highlighted changes

- New `new-config` subcommand. This is the official method for populating new config files out of the config templates built into freqtrade and replaces creating the configuration via `setup.sh`.
  Usage sample: `freqtrade new-config --config config.json`
- New storage subsystem, allowing storage of backtesting data in json or jsongz. [More details](https://www.freqtrade.io/en/latest/data-download/#data-format).
- `SharpeHyperOptLossDaily` added, which calculates Sharpe Ratio on daily trade returns.
- Stoploss on exchange support for [Kraken](https://www.freqtrade.io/en/latest/exchanges/#kraken). Note that this stoploss is a stoploss-market, compared to stoploss-limit supported by binance. 
- New `list-hyperopts` subcommand added (complementary to `list-strategies`), which enumerates hyperopt classes available in your user_dir and helps find duplicated classes (classes with same name in different files).
- `list-hyperopts` and `list-strategies` now color-code the status of each Strategy/Hyperopt class (LOAD FAILED in red, DUPLICATE NAME -- in yellow).
- New options for `hyperopt-list` subcommand added to easier find epochs of interest.
Available options are: `--min-trades`, `--max-trades`, `--max-avg-profit`, `--max-total-profit`, `--min-avg-time`, `--max-avg-time`, `--min-avg-profit` and `--min-total-profit`.
Check out the [`hyperopt-list` subcommand documentation](https://www.freqtrade.io/en/latest/utils/#list-hyperopt-results) for full details.
Huge thanks to @Fredrik81 for implementing these new options!

### Advanced usages

- Strategies and custom hyperopt classes can now be derived. 
  - For strategies, you can use it to override small parts of your main strategy, leaving the rest untouched. [more details and examples](https://www.freqtrade.io/en/latest/strategy-customization/#derived-strategies)
  - For hyperopt, you are now able to override how dimensions are defined in your optimization hyperspace and quickly select which variant of hyperopt dimension is used, running optimization process with hyperopt class you need in each particular case. [more details and examples](https://www.freqtrade.io/en/latest/advanced-hyperopt/#derived-hyperopt-classes)

### How to update

As always, you can update your bot using one of the following commands:

#### docker-compose

```bash
docker pull freqtradeorg/freqtrade:master
docker-compose up -d
```

#### Installation via setup script

```
# Deactivate venv and run 
./setup.sh --update
```

#### Plain native installation

```
git pull
pip install -U -r requirements.txt
```


<details>
<summary>Expand full changelog</summary>
8ae0f99a Remove duplicate section
a29653b5 Wording changes to install docs
2f349e05 Improve install documentation by streamlining the process
23b47b66 Update install-script documentation and reorder installation steps
d63aaf3b Bump ccxt from 1.22.61 to 1.22.95
ff69b511 Bump scikit-optimize from 0.7.2 to 0.7.4
4054dec7 Bump plotly from 4.5.0 to 4.5.1
353f722d Bump requests from 2.22.0 to 2.23.0
e545ef56 Wording adjusted in helpstring
0eeafcd1 matched commenting on previous sample_strategy.py
f25d6224 modified sample_strategy
e04c2dda fixed typo
d2181bdd Adjust tests
5ac62444 added keltner channel and uo
29577562 final touches plus
b49b9b51 final touches
259dc75a some order and added weighted BB indicator to list
ca8e52dc Show heartbeat message earlier after changing the state
e2e6b940 copy=False does not make the changes inline anyway, so not needed
c651e0ac Fix #2948
3186add8 Use explicit column list for float parsing
7ecc56fa Load ohlcv data as float
2fe7b683 Add tests for cached rates
77ef3240 Implement log messages
97e6e5e9 Implement caching in the correct place
f5b4a6d3 Remove fetch_ticker caching
d9ecf3e4 Add version and state to heartbeat message
d2e20d86 Align heartbeat to throttling logging
269a669a Move heartbeat to worker
881f602f Adjust methods params
e0800b7c Make throttle start time an worker object attribute
04aa74e5 Better throttling
945ff09e Use correct strategy path for docker testing
78ee36a8 Use _throttle() in stopped state instead of sleep()
10668bb2 Update tests/strategy/test_strategy.py
56a06cbd Update strings to f-strings
bca5f804 Move divider log message
5adbe3c2 initial search path is optional ...
a7342bd9 Fix non-existing strategy loading
d22384c7 Full support for kraken stoploss
29b369c6 Rename cli argument
882d0a59 implement documentation feedback after review
09d89fbf Fix last test
d91b9d12 Fix some tests, don't default to freqtrade/strategy for imports
16342976 Move strategies to test subfolder
e6dd463c Revert versioning
1172c958 Use different versioning scheme
0b33b798 Add pypi build step
582b5904 Bump python-telegram-bot from 12.4.1 to 12.4.2
0fd3d74f Bump scikit-optimize from 0.7.1 to 0.7.2
9435950f Bump mkdocs-material from 4.6.2 to 4.6.3
500e1c77 Bump wrapt from 1.11.2 to 1.12.0
c6a3038f Bump coveralls from 1.10.0 to 1.11.1
212d20ed Bump ccxt from 1.22.39 to 1.22.61
bec86b13 Add github actions badge
3787ac7b increment limit to adjust to FTX defaults (1500 candles)
180939a9 winner, readability, with brackets as fix
6e71f2f1 my fix
6139239b Address points stated in comments
87b50697 Fix edge documentation rendering
fdd36229 Docs adjusted
42a5d78e Wording (duplicate, not duplicated)
ddea4b93 Fix test
e8c0a0bc Make mypy happy
1cf19133 Added missing failing strategy
29d9b6a4 Add test for enum failed
93f9ff1b Fix existing test
06b84b40 Remove redundant code
47a91c9d Remove green color
e598c769 Add colorization
f024cc40 Fix windows test failure
ecca7164 Fix small issue
d5a298bb Add sentence from suggestion
5efbdd25 Properly default to user_data/config.json if it exists
c92e1d97 Attempt to make mypy happy
1bc26fd0 Add printing statuses for list-hyperopts
be4a9b5f Lowercase freqtrade
9dafc2f3 Load config.json from user_data first
a2d7f8a7 Split tabular printing into sep. helper function
9cbf8c5f Add status for listed strategies
20c21b42 Move rpc send to be after db session add/flash
36ef5c6b Get rid of delete_trades method in Freqtradebot
749463e4 Adjust message in main.py
a0a14a10 freqtrade/templates/subtemplates/exchange_bittrex.j2
02148a1d Fix datatype styling issues
a93bc74e Update documentation ...
ccc92397 Reduce indentation of help
86592c3b Fix /help from telegram
81f84981 Initcap Freqtrade
634bf2b1 Docs: Fix checking of runmode
007cc944 fixed tests to send refresh, since its no longer defaulted
f09af888 modified get_buy/sell_rate refresh to true on notify_sell_cancel and notify_buy_cancel
2e3b8cdb fixed flake8 issues on /help output
f6db784a removed default to refresh argument in get_buy_rate and get_sell_rate
47874a45 added logic to differentiate sell orders with double asterisk
2efa1c16 Revert data-location section
483cba45 Fix last occurence of data_location
d6b93975 Fix typo in datadir key
4f3376e2 Do not instantiate directly DefaultStrategy in tests
539343b2 Adding 2 more filter options for completeness
7be9f006 Update data-analysis documentation to properly initialize configuration
c35fe2c3 Add link to quick-start-guide
d1c3eabb Changed commands to use ""check_int_positive""
899de8b2 modified tests for double partial call
cde1b2b5 readded rpc status message for partial buys
5f4c209f fixed one more occurence of executed buy, and test
4fedf1e5 default refresh TRUE on get_buy_rate and get_sell_Rate
5b4d8d69 Adding --min-trades and --max-trades for hyperopt-list
fc295649 Fixed messages and readability
867b736b Fixed to Executing Buys & Sells
7f4b90c6 fixed actual open_rate in notify_buy_cancel
f99d1c38 fixed open_rate instead of open_rate_requested
29f7c507 Fix usage of an item from BTContainer in tests
62bcb3d7 Fix tests in test_history.py
f2520c11 Used wrong utils.md as base
c924e4d5 Updated based on feedback: - Profit commands now use float - Compatible with --best - Corrected wrong information in docs
05128d21 Suggest to run flake for scripts
faf19eda Break the old binary file so users are forced to reinstall
d07c6980 Fix tests for hyperopt_loss
0ac0ca74 return back hint for running mypy
d69ddd2a Apply suggestions from code review
7bb02d0c Update docker-docs wording
83644ce5 Fix mypy type errors in tests
550f9fc8 Bump python-telegram-bot from 12.3.0 to 12.4.1
6b4094fd Bump mkdocs-material from 4.6.0 to 4.6.2
88f2ad1e Bump pandas from 1.0.0 to 1.0.1
90ee82ac Bump ccxt from 1.22.30 to 1.22.39
4af25ec3 Adjust mypy and flake commands
f7c74e55 Fix wording
5bf4c586 Update hyperopt_commands.py
cc3f65d0 Fix typo
c83da7ca Add section about order types into Bittrex Exchange-specific chapter
40abdd26 Suggest changing strategy
c89a3222 Fix SharpeHyperOptLossDaily
eb3783dc Fixed a blank line issue :-(
c648ec7c Added test cases and fixed a minor bug
c7ba85c2 Add tip on running order types for Bittrex
b536d501 Address PR Review
c96acd6c Fixed to pass PEP8
2796d3d8 added missing tests to increase coverage
636bd5ac Added filter options to ""hyperopt-list"" in order to easier find epochs.
1a9787ac Add validation for data-download relevant settings
879b5138 enhanced method description
4fad7a46 fixes in webhook-config docs
f3b11616 wide notifications fixes
c4031761 Don't validate exchange for data-download subcommand
34f04668 Add template for bittrex
52f41871 Allow exchange templates to configure outside-options too
f508324f Update docker documentation to be easier to use
a1fe3850 Improve docker-compose file to be ready to use
61ced5e9 Fix typo
28184201 Align sample_hyperopt_advanced.py to hyperopt_interface.py
a893f70e Replace NXT with XRP in config.json.example
aa2cb937 flake8 :)
ff819386 added draws to backtesting tables, reduced len of some labels to help fit this without increasing total width
f57bd6b6 Keep the docs clean for unexperienced users
418e7ada Highlight syntax in advanced-hyperopt as well
2034527f Update docs/strategy-customization.md
412f5d68 Add description to hyperopt advanced doc chapter
2846f945 Add description in the docs
739acaa4 Wordings improved
5b00eaa4 Updated Strategy Summary table to match other backtesting tables (#2864)
9639ffb1 added daily sharpe ratio hyperopt loss method, ty @djacky (#2826)
586cbc75 Add considerations for dry-run
6866f638 Fix merge-error
aa54fd22 - added spread filter - minimum value to volume pairlist
a707aeb3 Fix implementation of rolling_max
91b4c966 More consistency changes...
ffb53a6d get rid of typing.cast()
cbabc295 Don't convert to datetime - but convert to datetime64 instead
684cb549 Add pair to exception msg
f6c09160 make sure asyncio_loop is not initialized within ccxt code
d5f70400 Bump pandas from 0.25.3 to 1.0.0
3938418a Bump scikit-optimize from 0.5.2 to 0.7.1
401748e9 Bump ccxt from 1.21.91 to 1.22.30
bc2ae3e8 Bump pytest from 5.3.4 to 5.3.5
7b8e6653 Bump jinja2 from 2.10.3 to 2.11.1
df249c7c Remove unclear comment
d0506a64 Use correct matrix variable
c8960ab6 Only run coveralls once
53759600 Allow derived strategies
2b69e783 Fix failing CI test
84156879 Fix NO_CONF_REQUIRED for list-hyperopts
d12e03e5 Fix test inconsistency in test_freqtradebot.py
cd0534ef Add test
505648fb Adjust docs
857eb5ff Add list-hyperopts command
3fe39a3e Rename constant
a5e670b4 Add USERPATH_NOTEBOOKS
aeabe180 modified two lines from logger.info to logger.debug cause they're too spammy
d6475168 Fix link and lowercase variable
3499f1b8 better readability and more consistent with daily sharpe loss method
f3d50008 Add some type hints
cbd2b265 Fix small error
321bc336 Run tests against 3.8
4459679c Update dockerfile to 3.8.1
628b0692 Support python3.8 virtualenvs and remove config generation via SED
12317b1c Add some rudimentary tests for questions
d1a3a2d0 Add tests for build_config
cfa6a3e3 Don't overwrite files
c224c669 Small edits to install.md
929bbe30 Link to docker installation from index.md
8796ecb2 Ad example for new-config with answered questions
54512a66 Update help-strings for list-utils
c40a4d77 Use exchange_mapping to determine correct exchange-template
d69ef438 Add basic documentation for new-config option
d038bced fixed some more line alignments
c396ad4d Align quotes in same area
907a6115 added rounding to Tot Profit % on Sell Reasosn table to be consistent with other percentiles on table.
e2b3907d more consistent backtesting tables and labels
4be3f053 Exclude trading against BNB bases on binance
83baa6ee Add test stub
cebf99b5 Implement validation
acbf13e6 Fail gracefully if user interrupted question session
2f0775fa Extract build-config tests to new file
940bfbee Move start_config out of build_commands file
e250c568 Add Questionaire workflow
49c9258a enhance test
dd83cb1b Extract selection generation to a seperate method
68771a78 Remove state attr from Worker
c80d8f43 Add exchange templates
122c9163 Add first version of config_deploy
9f291282 Fix small json formatting issue
b384ca8f Create new-config command
a0b92fe0 removed typo
328a9ffa fixed typo in false statement
4c0e5863 Advise to use https method for git clone i.o ssh
f8db7f17 added ask price, bid price, immediate ask quantity, and immediate bid quantity to check_depth_of_market_buy. also added a line that mentions if delta condition was satisfied or not.
72c273aa Add test for closed trade case
70b9bd9c Verify if trade is closed before acting on Stoploss_on_exchange
ea5ac1ef Don't handle stoploss if there is an open regular order
a83de241 Check for closed stoploss-orders first
f5a44e4f open_order_id should be None when handling stoploss orders
10d9db72 Adjust tests slightly
cf933191 move exchange-specific order-parsing to exchange class
7a22aaa1 UPdate documentation to reflect that stoploss-on-exchange is also available for kraken
f1629c90 Implement stoploss for kraken
e6f19124 Use named arguments for stoploss create_order call
16b34e11 Complete rename of stoploss_limit to stoploss
256fc2e7 Rename stoploss_limit to stoploss
da0af489 Adjust tests to pass in order_types instead of rate
8d2e0bfd Move rate-calcuation for stoploss-limit order to exchange
41945138 Converting pairs from filename to pair corrected
4eaaec9d Implement pair_to_filename to datahandler
bc6a1035 Introduce pair_to_filename()
f82c4346 data conversion, not data conversation
814cc20c Remove potential circular import
f4a532ef Pass format to load_data
6b598333 Require dataformat entries in configuration
ae1b28aa Remove get_datahandlerclass from package exposes
e2a00c03 Document convert options
66d18575 Implement abstract interface
9e4fc00a Add test for convert_ohlcv
70f3ff04 Add test for convert_trades_Format
e7054adc Add tests for start_convert_data
28787a00 Move convert functions to convert module
525550e4 Fix typo in parameter transition
68604911 Rename datahandler module to history module
b37b5c3d Remove Explicit datadir conversation
9c5b94ad Pass data_format to methods
65f539e9 More tests for datahandler
d65c1eea Add some tests for datahandler
8a030e7f Use exists instead of is_file
a3144cb2 remove trim_tickerlist
baa942ff Don't use function to resolve pairname for test
32c2ce14 Remove last usage of load_tickerlist
4b277afc Remove test for load_tickerdata
5479c671 Clean up some codes which use list-based tests
80dbba12 Remove unnecessary mocks
aa39f216 Use load_data instead of a sequence of calls
a2567bea Remove unnecessary mock
d1b52809 Cleanup history
d06777b8 Remove old ""load_cached_data"" method
7a6476c9 Update tests
e4f185f3 Remove 'line' from load_cached_data tests
df085a6f Fix small bug and test
c648d973 Implement new ""load_data_for_updating"" method based on dataframes
ec8fb5f3 Make no-data warning optional
b83487a7 Extract default dataframe columns to constant
dbe8f727 Fix typehint
91c70a0e Change to use ohlcv_purge
37c5b689 Move dataframe validation to abstract class
e861f05b Move dataframe trim to within jsondatahandler
552c93ab Improve some docstrings
b7c1d554 Modify tests to point to datahandlers
9876d126 Use handler for trades
9547d47a Initialize datahandlers
5fca17d7 Allow initializing handler-class just once
416517b0 Move trim_dataframe from history to converter
9d8ea2f1 Replace calls to load_tickerdata_file with DataHandler calls
88fa7fc2 Simplify validate dataframe method
53ee636f Check if file exists before loading
873f5dbe Revrite validate_pairdata to work with pandas
db520a09 Trim dataframe, not tickerlist
866908d2 Load and save using pandas internal function
377d59ab Be selective how to load ohclv data for conversation
d9e7d64f Split parse_ticker_dataframe some logic to clean_ohlcv_dataframe.
1b90ec58 Use changed pair-handling for providers
d923bab8 Remove abstract interface for now
48728e2d Change DataProvider interface to accept pair per method
e529a4c2 Fix typehint for get_datahandlerclass
eff5cc05 Add default to internals
c6d6dbfd Implement jsondatahandler file store
8f214aec Fix ""dumping"" message to work correctly for .gz files
abc6b945 Add ohlcv_store call to convert_ohlcv
d804372d Enhance ohlcv_convert method
018e2703 Allow --pairs for convert arguments
2a728ee6 fix bug in find-files
3d4f6208 Allow timeframes for convert-data
ef0fcb0e Make data-finding safe
f8b8b9ac Convert to Path temporarily
2a6b542b Add second subcommand to allow conversation of ohlcv and trades data seprately
c3064dfd Enhance validation constants
cd4466a6 Add convert_* methods
e5a61667 Implement first version of jsondatahandler
2496aa8e Add convert-data template subcommands

</details>",91629816
586,False,False,2020-02-01T11:54:32Z,2020-02-01T11:55:21Z,"
## Highlighted changes

#### Balance / Wallet related

- Introduction of Dry-Run Wallet, simulating the wallet on the exchange.
- Introduced the `tradable_balance_ratio` setting - keeping a safety margin of the available balance on the exchange (defaults to 1% safety margin). It also allows to trade half the account by setting this to `0.5`. See [documentation](https://www.freqtrade.io/en/latest/configuration/#available-balance).
- Introduced the `amend_last_stake_amount` setting, which allows lower stakes if not enough balance is available. See [documentation](https://www.freqtrade.io/en/latest/configuration/#amend-last-stake-amount).

#### General improvements

- You can now use any currency on the exchange as the stake currency. Previously it was limited to the restricted set of 'BTC', 'XBT', 'ETH', 'USDT', 'EUR', 'USD' currencies only.
- Performance improvements to backtesting - closing a long-standing issue (#1016).
- Allowing the strategy to set the unfilled timeout, so it can be set in either configuration or strategy.
- Added the `list-strategies` command - allowing to list all strategies in a folder.
- The `/balance` RPC method will now convert to stake currency, not to BTC. 
- The `load_backtest_data()` and `load_trades_from_db()` methods now have their columns aligned where possible.
- Plotting now allows advanced plot configurations from within the strategy. Consult [the documentation](https://www.freqtrade.io/en/latest/plotting/#advanced-plot-configuration) for more details.
- Wallets are now refreshed when the `/balance` RPC method is called.



<details>
<summary>Full changelog </summary>

```
cff8498b Version bump 2020.01
c9ee678a Bump sqlalchemy from 1.3.12 to 1.3.13
a3b0f752 Bump pytest from 5.3.3 to 5.3.4
66939bdc Bump ccxt from 1.21.76 to 1.21.91
184a6005 Bump urllib3 from 1.25.7 to 1.25.8
161c06fd Bump plotly from 4.4.1 to 4.5.0
30e3e434 Add notify_status() to FreqtradeBot
33645e45 Minor cosmetics in start_trading
02563019 move setup_utils_config to configuration module
8c9119b4 Add docustring to commands module
2d02c3f2 Split out pairlist_commands
a3e9d043 Adjust imports to new place for arguments
7f851ad8 Move arguments and cli_options to commands module
a1c684f6 Simplify noqa setup for module imports
f347e593 Small adjustments for moved commands
e033df6a Move optimize_commands to commands module
b254bdfe Move plot_utils to plot_commands
70a0346b Move data-stuff to data-commands
7e233041 Adjust tests to new paths
926bf07d Seperate a few commands into specific files
6e852804 Adjust imports
80ed1c3e Move utils to commands
3f2542fc Move edge-module out of __init__.py
a3ac05cc Fix missed mock
bd4dd840 Fix type-errors with stake_amount
52f0ed53 Adjust tests
f4c7edf5 No args for backtest(), use arguments
aad10cee Add threading lock object for /forcesell
58ceda4b update wallets after forcesell
f36bc80a Add parametrized tests for get_buy_rate
8a940eb0 Align price finding function name on buy side with get_sell_rate
e13045b5 upgrade pip in windows environment
7d2d0235 Fix typo in sell-reason table generation
bff0a095 line was too long
c1c2717b added missing word in hyperopt loss example
1bf475fa Remove .get calls for dry_run - it's a mandatory property
099bbc5c Fix bug when stoploss_on_exchange in combination with dry-run
6e3336cb Adapt test to verify behaviour of stoploss_on_exchange in dry-run
8d451593 Bump pytest from 5.3.2 to 5.3.3
9474cb17 Bump ccxt from 1.21.56 to 1.21.76
fa1e9dd7 Adjust tests to allow updating within safe_sell_amount
29a5e4fb Update wallets before getting amount
8bcfe4a6 Up log level of safe_sell_amount message
90ed4c66 Cover equal case via test
d1bf388b Wallet amount must be compared with >=
6feb68b1 Change feature sorting to tell more of a story
f73f0b16 Update comments on backtesting
c8806a16 Allow wallet update from /balance
4013701b allow wallet update to be skipped if the value is fresh enough.
4c823f12 Sort imports
1e58cd70 Adapt tests to round price up
bea4ad8e Revert price_to_precision to rounding up
d7957bd7 add advanced tests for price_to_precision
425ec53b Combine amount_to_precision tests into one
797dc8a4 Add more detailed tests for amount_to_precision
c67b2530 Bump ccxt from 1.21.32 to 1.21.56
b3938a86 Bump python-telegram-bot from 12.2.0 to 12.3.0
2f8ed7ed Bump numpy from 1.18.0 to 1.18.1
af366357 Minor changes in the docs
495728f5 Refine docs
5fcab1ee Align method names to internal ccxt names
b60d7ad4 Use ccxt.decimal_to_precision instead of our own calculation
fa1f9bcd expose precisionMode from exchange class
53abfdbc Use sorted on set instead of explicit list conversion
3519cebf Add test for failing stake_validation
a7246ba1 No need to ""fix"" stake_currency enum anymore
60b47b6e Add tests for get_quote_currencies
ca288053 Modify tests to skip stake_currency validations
13274964 Implement validation for valid stake currency
235a10ab Don't suppport <1m timeframes
5faebad8 Don't hardcode TimeFrames - they can differ by exchange.
d3de3983 Docs adjusted
83b88e79 Remove Required marks for new settings
3faa2d0e Refine description for last_stake_amount_min_ratio
fab19ae3 Implement last_stake_amount_min_ratio
e94dfdef UPdate documentation to remove inexisting setting
9713dc8d Ensure wallets.update is called before buy
b748ed34 UPdate documentaiton wording
785cd2a6 Rename test module
c475729c Extract edge reporting to optimize_reports
989ab646 Add profit % to sell_reason table
7461b5dc Mention custom strategy in features
135487b2 SPlit control and Analyse feature into 2 seperate points
cee8f334 rearrange features -- move Run to the top
9559cb98 reworked
db34cb1b Do some adjustments to the wording of the index.md section
c9b0b4c7 Add plot_config to optional plot
c3fd894a Regenerate plots with new settings
3883d18b Add bollinger note
2b3f2e5f Add first version of documentation
6ac7dcf5 Bump arrow from 0.15.4 to 0.15.5
6da97faf Bump coveralls from 1.9.2 to 1.10.0
3c0d1840 Bump ccxt from 1.21.23 to 1.21.32
d846114d Bump scikit-learn from 0.22 to 0.22.1
aabeece4 Bump flake8-tidy-imports from 3.1.0 to 4.0.0
b614964b Bump pytest-mock from 1.13.0 to 2.0.0
888ea58d Add tests for new behaviour
d0ccfa19 Explicitly given indicators should override plot_config
ca054799 Add tests for amend_last_stake_amount
b37f34ff Implement amend_last_stake_amount
7daa5bc3 Don't return None from unlimited_stake - 0 handles this just as well
53499e01 Clearly differentiate trade buys sells (positive and negative)
bdda6203 add plot_config to startegy interface properly
b5a806de Fix typo and add tests for create_plotconfig
4628024d Adapt tests to new add_indicator methodology
f04873b0 Add plot_config to interface
5853b990 make Plot_config the default approach
5d5074ac Implement first working version of plot_config
84ef5881 support dicts as indicators
24aa596e Minor: Refine fee example in the docs
e1f89e3a Reword Note in backtesting fee docs
7e7c82cf Small adjustments to relative_stake PR
71dd0386 add tradable_balance_ratio to to all config samples
55041878 Update Backtesting fee documentation
0dd27491 Update documentation regarding configuration of stake_amount
f3beaa33 Deprecate capital_available_percentage
6d01653b Adapt test to test more cases with reduced tradable_balance
45583864 Apply get_available_balance logic to regular trades, too
3c798116 Extract `get_available_stake_amount`
4ac1ac7e Warn about tradable balance being applied to the current amount of the balance
a8d56b28 IMplement check for unlimited settings
11059e53 Fix missed default minimum in documentation
da1fea65 Minor correction to wording of MacOS Specific install doc
560aea87 Remove fiat_currency temporary variable
90744ff5 show percent instead of ratio (!)
b48bf035 Add note about MacOS installation
c13c11cf Type does not need to be a list
6e615998 Fix documentation typo
94afb7cb Improve integration test with a few additional tests
bfef3cf4 Add additional test case for lower balance ratios
cba156df Add offset calculation for relative stake maximum limit
64db1f67 Prepare tests to valiate reduced full amount.
a47a25ca Refine passing msg params
88efa406 Align the name of a variable to be same for buy and sell parts
f15e5e9d Add _notify_buy()
1b8943ac Add documentation for tradable_balance_ratio
9382b38c Fix mypy error
22fcf7b4 Allow empty stake currency in certain cases
20fc3b79 validate config for utils too
9325880f Split config-validation requires
2c8e8d8e Align columns for btanalysis loading
6fbdd6be Remove unused directory from user_data
e89fa446 Arrange common section for update trade state methods
a9fbad07 Improve docstrings
8cc48cf4 Fix tests where mocks fail now
10ee2362 Extract tests for backtest_reports to their own test module
904e1647 Extract generate_text_table_strategy to seperate module
caec345c Extract generate_text_table_sell_reason from backtesting class
18a53f44 Extract generate_text_table from backtesting class
21418e29 Minor: fix comment
4475110d Cosmetics in freqtradebot
0ea44b01 Fix message in setup.sh
26a2395a Include Pair name in exception log message
9d518b9d Add comment and don't hardcode 4 in test
6ebb9017 Improve test enter_positions
a88464de Improve some test code
fd7af587 Rename process_maybe_execute_buys() --> enter_positions()
84918ad4 Rename process_maybe_execute_sells() --> exit_positions()
b00406a7 Make process_maybe_execute_*() returning integers
4d56e3b3 Address some comments made in the review
8e9a3e8f Capture FtBaseException at the outermost level
1ffda29f Adjust improts to new exception location
024aa3ab Move exceptions to seperate module
20abf677 Add Debug ""code"" for randomly failing test
fb3a53b8 Use ExchangeResolver for edge_cli too
4c9295fe Rename Bid-strategy helpervariable to something shorter
de23f392 Add trailing_only_offset to template and sample
20a13265 Bump ccxt from 1.21.12 to 1.21.23
df7ceb4c Fix misinformation in /status table
304d15e2 Small corrections
d1c45cf3 Update analysis documentation to include kernel installation
04f28ed9 Refactor try/except: handle DependencyException for each pair separately
ce84f745 Adjust tests
76260430 Refactor create_trades()
5c39ebd0 Adjust logging
b2fb2845 Fix tests after changing output
fc98cf00 Address PR feedback - change output to show Filename only
d6ca562b Make mypy happy and handle hypothetical case when stake_amount == 0
3dbd83e3 Introduce get_free_open_trades() method
8eeabd23 Move warning to create_trades()
ed9cb421 Make mypy happy
ef92fd77 Align behavior: check for available in all cases: edge, unlimited and fixed
abaeab89 Make _calculate_unlimited_stake_amount() a separate method
243bcb23 Make _check_available_stake_amount() a separate method
86f26930 cosmetics
b6d1c5b1 _get_trade_stake_amount() is not private
039dfc30 No need to convert pair name
e51ac2c9 Remove unavailable pair ...
cadde3ab Check if markets.info is a dict before using it
98647b49 Remove wrong ""once per hour"" listings
63f41cf1 Update documentation with new result
e5aed098 Enhance backtest results with sell reason profit / loss table
ad750486 Fix testing with path in windows
402c761a Change loglevel of Path output to debug
66f9ece0 Add documentation for strategy-list
27b86170 Add tests
2ab989e2 Cleanup some code and add option
5a11ca86 Move instanciation out of search_object
25e6d6a7 Combine load_object methods into one
eb1040dd Convert resolvers to classmethods
a6844569 Add first steps for list-strategies
48935d29 Align edge documentation to configuration page
83ed0b38 Wordwrap before keep it secret
a105e566 Align /balance output to show everything in stake currency
b8442d53 Update integration test to also test dry-run-wallets
33cfeaf9 Remove i.e.  where it doesn't fit
f487dac0 FIx bug in dry-run wallets causing balances to stay there after trades are sold
690eb2a5 configuration.md reviewed
0ac5e503 Remove unused import
c6b9c8ec Forgot to save
ecbb77c1 Add forgotten option
bb8acc61 Convert datadir within config to Path
90cabd7c Wrap line
c6d22339 Convert StrategyLoader to static loader
6d5aca4f Convert hyperoptloss resolver to static loader
248ef5a0 Convert HyperoptResolver to static loader
560acb7c Convert ExchangeResolver to static loader class
5fefa9e9 Convert PairlistResolver to static loader
1c5f8070 Refactor build_paths to staticmethod
779278ed Bump sqlalchemy from 1.3.11 to 1.3.12
9cfbe98a Bump scipy from 1.3.3 to 1.4.1
31a7e9fe Bump mypy from 0.750 to 0.761
20ad8a37 Bump numpy from 1.17.4 to 1.18.0
8f17b813 Bump ccxt from 1.20.84 to 1.21.12
76a93fab Bump python from 3.7.5-slim-stretch to 3.7.6-slim-stretch
2195ae59 Use different time offsets to avoid confusion
dc567f99 Update documentation to new handling of dry-mode database
ffd7034c Persist dry-run trade per default
43c25c8a add documentation for is_pair_locked
a71deeda Document lock-pair implementation
89b4f45f Remove section about strategy template - use new-strategy intead
98353120 Improve pair_lock handling
1ff0d0f1 Add unfilledtimeout to strategy overrides
1a731592 Modify classifiers
c417877e sort pytest dependencies
9ec4368c Add release documentation
95bd9e8e No underscores in cli options
fc5764f9 Edge small cleanup
342f3f45 try with coveralls token in yml ...
0c6b5e01 Try with github-token
6507a26c Fix some tests after merge
e72c6a0d use only first part of the currency to get wallet-amount (!!)
1af96289 Fix note-box syntax error
11e787c8 Finish depth_of_market documentation piece
1c19856d add section about depth_of_market
d73ba71e Improve formatting of orderbook doc
dc07037e Add documentation for price finding
21622ac3 Rename get_ticker to fetch_ticker
cf4c3642 Minor improvements in data.history
c5e6a34f Remove unnecessary parenteses
15373896 Remove startup_candles argument in refresh_data
b2796f99 Remove redundant refresh_pair_history
bbb05b52 Remove fixed random order
60f89c8c Split refresh from load_data/load_pair_history
8513a5e2 Fix failures in test_main
2e2f084f Try to clear caplog ...
e1c0c6af fix random-seed to failing one
86de88ed Align usage of history import in test
a2964afd Rename profit_percent to profit_ratio to be consistent
539b5627 Fix typo
cbd10309 Add mid-state test
362a40db Update docstring
861a7834 Call calc_open_price() whenever necessary
307ade62 Cache open_trade_price
0b5354f1 Add required arguments to Trade method
707c5668 Fix typo
0277cd82 Make mypy happy
9cea5cd4 Add documentation about ohlcv_partial_candle
a6fc743d Align code in _download_*_history()
fa968996 Remove useless check
4cd45b65 Rename download_*_history as non-public
2af9ffa7 Align refresh_backtest_ to each other
75e6acd6 Bump ccxt from 1.20.46 to 1.20.84
05de60a7 Bump cachetools from 3.1.1 to 4.0.0
cc41cdbf Bump mkdocs-material from 4.5.1 to 4.6.0
c05af1b6 Bump plotly from 4.3.0 to 4.4.1
33db37a9 Bump joblib from 0.14.0 to 0.14.1
e398c375 Bump pytest from 5.3.1 to 5.3.2
655672c9 Enhance documentation Note
ce845ab0 Improve docstring for dry-run wallet method
b5b6458f Add note about unlimited stake amount
56e13c89 Enhance documentation for dry-run wallet
23d467eb Show simulation note also in restserver
c741b67c Adjust tests for dry_run wallet simulation
5a574187 Improve dry-run calculations
4463d584 Add release section about collapsible section
f0bbc750 Combine dry_run wallet into original Wallets class
fda8f7e3 Introuce WalletDry - supporting dry-run wallets
52b212db Fix tests after changing dry_run_wallet amount
931d24b5 Have dry_run_wallet default to 1000
26ab1088 Fix mypy errors in develop
f81c49ce Fix typo causing a trailing ""tic"" in /show_config output
2275a153 Remove default symbol from get_fee()
f2266ea9 Use shorter range for seeded random-state
82ff878e Fix typo in the docs
a48c0ad8 Use first pair of pairlist to get fee
e4cc5c47 Test new show_config branch
014c18ea Improve output from show_config when trailing_stop is active
3bd873f3 Add notes on random-state to the docs
04257d8e Add tests for safe_sell_amount
b69f5afa Round amount to precision also for dry-runs
5db88390 Try to verify available amount on the exchange
330b8cf8 space before unit ...
6e778ad7 Seed hyperopt random_state if not passed
7c7ca1cb Remove min (plural) from codebase
1058e5fb No plural for min
3f9f29ba Fix Flake8 import error
390db950 Show humanized and minutes version of duration
3448f862 Suppress scikit-learn FutureWarnings from skopt imports
3252654e Test adjusted
641e3fdf Fix generation of hyperopt trailing params
de33ec42 use sell_row.open also when the active ROI value just changed
25447329 Bump scikit-learn from 0.21.3 to 0.22
dc9fed4a Adjust documentation
88a24da2 Adapt tests to sending open / close date
e4655c9b include trade-duration with sell-notification
45d12dbc Avoid a few calculations during backtesting
189835b9 Add documentation for ROI-1 case
3163cbdf Apply special case for negative ROI
1e6f9f9f Add testcase for negative ROI sell using open
30918691 refactor get_close_rate out of get_sell_trade-entry
58d70b20 doc explicit optimization feature
0e9e6b34 refactor feature details doc
9199fd59 change doc into
```

<details>",91629816
587,False,False,2019-12-15T08:44:10Z,2019-12-15T08:47:12Z,"## Important - Breaking changes!
This release contains breaking changes to the freqtrade command line interface

* Freqtrade will now require an explicit sub-command. All parameters need to be **after** this sub-command:

#### Examples

`freqtrade --config customconfig.json --strategy AwesomeStrategy backtesting` will become `freqtrade backtesting --config customconfig.json --strategy AwesomeStrategy`

`freqtrade --config customconfig.json  --strategy AwesomeStrategy` will become `freqtrade trade --config customconfig.json --strategy AwesomeStrategy `

Trading/dry-run-mode is available  as `freqtrade trade`.

`--custom-hyperopt` is replaced by `--hyperopt` and does not default to `DefaultHyperopt` anymore.

Strategies need to be explicitly defined and do not fall back to DefaultStrategy anymore.
You can specify this either via `--strategy AwesomeStrategy`, or in the configuration (`""strategy"": ""AwesomeStrategy""`).

## Highlighted Changes

* Introduction of `trade` subcommand (Read below for further info)
* Introduction of `new-strategy` and `new-hyperopt` subcommands to simply create new strategies and hyperopt files.
Please refer the documentation for full usage samples [new-strategy](https://www.freqtrade.io/en/latest/utils/#create-new-strategy), [new-hyperopt](https://www.freqtrade.io/en/latest/utils/#create-new-hyperopt).
* Support for logging to syslog and journald.
* Addition of `/show_config` command to rpc methods to quickly see the bot's most important configurations.
* Addition of `--dry-run` flag to force trades to be simulated, overriding the corresponding configuration value.

#### Pairlists
* Deprecation of `pairlist` in the configuration - which is replaced by `pairlists` - a list of different pairlist configurations.
* Introduce a new way to chain different pairlists and filters dynamically [Detailed pairlist documentation](https://www.freqtrade.io/en/latest/configuration/#pairlists).
* Introduction of `test-pairlist` subcommand to test the result of the new pairlist chaining.
* Introduction of a low-price filter (requiring 1pip to be > N%).

#### Hyperopt
* Introduction of `hyperopt-list` and `hyperopt-show` subcommands.
Please refer the documentation for full usage samples [hyperopt-list](https://www.freqtrade.io/en/latest/utils/#list-hyperopt-results), [hyperopt-show](https://www.freqtrade.io/en/latest/utils/#show-details-of-hyperopt-results).
* Introduction of new `trailing` hyperopt space for optimizing trailing stop parameters. See [Understand Hyperopt Trailing Stop results](https://www.freqtrade.io/en/latest/hyperopt/#understand-hyperopt-trailing-stop-results).


## Full changelog
<details>
<summary>Expand full changelog</summary>

```
2f76eaf3 minor: Fix documentation formatting
18c73ceb Add tests for the last commit
8431b54b Fix index limits handling
5fc357ee Fix typo
a9f7e9fb Fix NO_CONF; fix tests
081b21fe Bump colorama from 0.4.1 to 0.4.3
ed053d24 Bump ccxt from 1.20.22 to 1.20.46
0ca3157a Bump coveralls from 1.8.2 to 1.9.2
49344567 Bump mkdocs-material from 4.5.0 to 4.5.1
0f4dcaa4 Bump pytest-mock from 1.12.1 to 1.13.0
4b560880 Add tests for hyperopt-list, hyperopt-show
21c68557 Build latest along with develop image
ed7207d4 Show pairs which are wrong ...
bb9235c7 Validate stake-currency against pairlist - making sure only correct pairs are in the whitelist
2bd4008c fix space name ...
d21ae4ed Add fixes for comments in the review
1da008b3 Document ""quick"" hyperopt of roi/stoploss and trailing stoploss
703458f3 Add test for loading ticker-interval from strategy
4b0a4c93 Fix hyperopt with ticker_interval from strategy
216094a7 Add reference to hyperopt-list and hyperopt-show to the Hyperopt doc
4efd8b96 Add description for hyperopt-list and hyperopt-show to the docs
b61f4383 Make flake happy
b20bea84 Adjust tests
54694dd3 Manual merge of some conflicts in hyperopt
16a50fbe Resort documentation
51f074ba Don't print quote-currency for -1
0ba804d0 Address first part of feedback
8a7fe3f1 The file will (for users) be in user_data - just in the repo it's in templates
054484ad load_pair_history should not return None, but an empty dataframe if no data is found
ac3e0615 Resolve issues stated in the review
ddf86d63 Adjust docs index
ba29a2ff Move docs on loss function creation to a separate doc file
b33e47a4 Update documentation with test-pairlist
298e8b23 Add testcase for test_pairlist
17e03559 minor: fix typo in docs
cd20d5b5 Update kraken pairlist
ebf6dad3 Update binance pairlist default config
683406b5 correct fallback to stake_currency
fc7b9846 Bump mypy from 0.740 to 0.750
110fbd3f Bump ccxt from 1.19.86 to 1.20.22
f0428be9 Bump pytest from 5.3.0 to 5.3.1
0b03c6c7 Implement to json
150a497c output pairlist after fetching all
ee733210 minor: Fix formatting typo in docs
86342efa Adjust test
05967442 Adjust test
d6b58767 Adjust test
668d4244 Refactor log_trials_result()
32c9b5f4 Description for generate_roi_table reformulated slightly
f42ce8fc Fix typo in the docs
26a7af85 Add trailing_space() into AdvancedSampleHyperOpt
f862b4d0 Add description for 'default' space
a88bfa8d Fix: trailing_stop_positive should be positive
fffd47e3 Add description of trailing space into docs
7a3c3c4d Add directlink to the section
eafccb44 Add command sample for journalctl with -u
b040cbff syslog and journald cases splitted
15343456 Add test_pairlist method
8f9b5095 Fix some tests
c3d74116 Fix imports
997c4262 fix some datatypes
111f018c Add datatype to configuration documentation
64da8771 Update stake_amount description
f0e6a9e0 Address feedback
a373e489 Comment added
f2cd4fda Fix the rest of tests
8e751216 Add hyperopt-list and hyperopt-show commands
cceb00c4 Try coveralls
585b8332 Improve tests and unify required attribute
066f3240 Make flake happy
8e1e20bf Fix some tests
0ac592ad Fix markets in conftest
17269c88 Fix _get_min_pair_stake_amount()
82041073 Add test for get_min_pair_stake_amount() with real data
9e7d367b Realign strategy_override paramters
12b9257c new-lines before defaults in documentation
37f698d9 move default values to Description field
e7c17df8 validate defaults in documentation
418ca003 Bump jsonschema from 3.1.1 to 3.2.0
03f02294 Bump pytest from 5.2.4 to 5.3.0
0a7a1290 Bump pytest-mock from 1.11.2 to 1.12.1
28f73ecb Bump ccxt from 1.19.54 to 1.19.86
6ab7f93c Bump scipy from 1.3.2 to 1.3.3
d1511a10 Update some config documentation
0775ac08 Cleanup constants and required
646a9d12 Align quoting of json schema
e7be742c Run validation after custom validations
8d002a8f Fix some more tests
af3eea38 Move config json validation to after strategy loading
4dc0631a Lower minimum tradeable value
a3415e52 Fix some test-types
1b337fe5 Remove unnecessary code piece
50350a09 use wallets instead of doing a direct call to /balance
1bf8d8cf show /balance in stake currency
62d50f51 add tests for balance from get-tickers
8c64be3c get tickers only once to show balance
a374df76 some minor fixes from feedback
cbf710a4 Fix coveralls (?)
f05818a8 Allow transition from ""no-config""-pairlist to pairlists
63ad95a4 reenable slack
5fb14e76 Adjust folder to match user_data folder - otherwise running tests creates this folder
c7c7a1c2 skip test due to no journald installed
1242263d Make test OS dependent
31c598f8 Add tests for advanced logging setup
6cb48305 Testcase added
067267f4 Log messages improved (plural/singular)
99db5341 Tests adjusted
737c07c5 Make mypy happy
097cdcb5 Save epochs at intermediate points
175591e5 Fix test
a183162d Add description into Advanced Setup section
a6bb7595 Update utils doc
210d468a Reinstate mfi ...
5f8fcebb Parametrize hyperopt file
f23f659a Use strings instead of subtemplates
f26c4008 Allow selection of templates for strategy
b3dbb818 Add subtemplates
5e5ef21f Align example imports
be4a4180 Use single line comments for samples
f7322358 Update documentation
671b98ec Fix windows test
ed04f7f3 Create userdir and backtest SampleStrategy
cbb187e9 Use constant for Strategy and hyperopt userdirpaths
03cdfe8c Add tests for new-hyperopt
37f81394 Small stylistic fixes
79891671 Adapt after rebase
65489c89 Add no-arg test
b36a1d32 test new_stratgy
8a1d02e1 Update numpy imports in sample strategies
8c2ff2f4 Add template for new-hyperopt command
e492d476 Disallow usage of DefaultStrategy
98baae94 Add jinja2 to requirements
e3cf6188 Add first version of new-strategy generation from template
8cf8ab08 Add note about create-datadir to install instruction
ed1d4500 Update documentation for create-userdir util
41494f28 Allow resetting of the directory
19b1a6c6 create-userdir should create the notebooks folder, too
471bd4d8 Small stylistic fixes
084efc98 Address test-failures due to file moves
1d2ef5c2 Extract directory_operation tests to it's own test file
fd45ebd0 Copy templates when creating userdir
258d4bd6 move sample-files from user_data to templates folder
b8aa727e Fix second part of freqtrade-strategies #51
eac01960 Add testcase for empty-order case
a5bd4e32 improve cancel_order handling
9aac0804 Fix 'remaining' bug when handling buy timeout
8b639b50 Remove only :return:
5f88c4aa Add example of usage for Aroon, Aroon Oscillator
63399621 Improve commands help list
c92f233c Move settings to correct location
751157b4 Don't notify on builds from forks
5f62a9e4 rename ttl to refresh_period
a8855bf7 rename LowPriceFilter to PrieFilter
c22b00b3 move pairlist filters out of config[]
cd6d2761 Bump pytest from 5.2.2 to 5.2.4
dddccf8f Bump ccxt from 1.19.25 to 1.19.54
0bc71403 Bump mkdocs-material from 4.4.3 to 4.5.0
cb6b3e17 Bump tabulate from 0.8.5 to 0.8.6
e7157fad Bump python-rapidjson from 0.8.0 to 0.9.1
a33d4087 Bump plotly from 4.2.1 to 4.3.0
42474b71 Bump flake8-tidy-imports from 3.0.0 to 3.1.0
93356459 Bump sqlalchemy from 1.3.10 to 1.3.11
599e18b9 Bump urllib3 from 1.25.6 to 1.25.7
547d65b0 Fix broken test
e4e8a611 Add tests for telegram
2b190e56 Add documentation
acab5679 Add /show_config to telegram
2c976bdd Add show_config endpoint
3aee8d2b Improve rest api client / status response
b6a12044 seperate docs job
be53c088 Try moving coveralls to github actions
91047830 Add tst for worker termination
6e0655b3 add empty worker variable
edc0d7f2 Fix non-terminating bot
b167fb07 fix windows test
3b9899df hyperopts ...
f94d4631 update checkout action to pinned version
569a547b Update Actions CI to new subcommands
f9a92c28 Adjust test
ab194c7d Add test
38243c52 Filter open trades - they are not added to the profit calc
c8c48156 Don't load trades twice ...
68904296 Allow timeout of 0
6174a5dd Reimplement adjustment of ccxt 'has' with more generic ccxt_config class attribute
e26bbc7d Add fix for bibox exchange
62c1ff77 update action to 2.1.0
6ac73f7c Update missed strings
66619204 re-add hyperopts multiple ...
c42c5a1f Adjust ""requires subcommand"" message
5b62ad87 Remove hyperopts occurances
2eb65132 Improve timedout handling
c449e392 Replace more occurances of ticker_interval
1c57a4ac more replacements of ticker_interval
334ac8b1 Adapt documentation for timeframe
d801dec6 Some more places with ticker_interval gone
08aedc18 Exchange ticker_interval with timeframe in some more places
e4bdb925 Replace some occurances of ticker_interval with timeframe
11f7ab61 Remove decimal import from rpc
df9bfb6c Add FIAT currency to status-table
ab9506df simplify status_table command
136ef077 Add sleep to allow thread to start
e8a8f416 Update dockerhub description from github readme.md
8c76f450 Use correct dockerhub image name
96f550c6 Disable tests
37ef5c38 integrate Slack notification
52e24c3a Split error-messsage between incompatible and wrong stake amount
025350eb Fix typo in the rest-api docs
80099743 Update documentation
75d5ff69 Add ping endpoing
a241c2af Build macos - ...
d1729a62 fix windows build
e51a7201 Apply cache to pi image
ff1d3643 Add github actions action
031157f2 Bump numpy from 1.17.3 to 1.17.4
c65d217d Bump scipy from 1.3.1 to 1.3.2
0a13f7e1 Bump ccxt from 1.19.14 to 1.19.25
27d81bb6 minor: More cosmetics on Exchange Notes
95492958 wordings
661c8251 minor: Exchange notes docs
83067c1e minor: Fix link in the Faq docs
04b51a98 Include warning-message to bittrex explanation
e810597e Add restricted markets snippet to documentation
692d6afb Minor exchange notes typographical cosmetics
eba55c27 Change link
085aa308 Implement ticker caching
de2d04f0 Add note about systemd load location
12654cb8 Add seperate exchange section in docs
4b15873e Simplify examples
86a5dfa6 Update documentation
0b480083 update documentation
5caeca75 Improve tests for pairlist-sequence behaviour
7ff61f12 pass pairlist position into the pairlists
ae356493 improve pairlistmanager errorhandling
a01b34a0 tests
02b9da8a Update documentation
ed0c7a6a Update configschema to fit new pairlists approach
25cb935e Some more adjustments for new pairlist
c74d7662 move from name to name_list
37985310 remove cachetools dependency
c3b4a4dd Update sample configurations
d7262c0b Fix correct ticker type
870966dc Fix more tests
85beb3b6 Fix test
bf69b055 Add name getting
31c7189b Verify blacklist correctly
eaf3fd80 Allow blacklist-verification from all pairlists
10595862 Small adjustments
b610e8c7 Don't refresh tickers if they are not needed
e632720c Allow chaining of pairlists
1f042f5e Quick start and easy installation sections reworked
54b63e89 Wordings on top of #2495
31ab32f0 Always set trailing_stop=True with 'trailing' hyperspace
bc5c91f6 add missing note block
076ef040 git branch note explanation
b0150d54 remove not use statement
dd47bd04 Move description to correct place
da57396d Fix UTC handling of timestamp() conversation in fetch_my_trades
d3a37658 Fix test
f90676cf Add trailing stoploss hyperspace
ca77dbe8 Fix UnicodeError in hyperopt output
60109aaa Bump ccxt from 1.18.1346 to 1.19.14
28f0c002 Bump pandas from 0.25.2 to 0.25.3
bc78316a Bump flake8 from 3.7.8 to 3.7.9
b8a6c55b Bump arrow from 0.15.2 to 0.15.4
c8638ce8 Fix bug where bids_to_ask_delta causes doublebuys
eb0b0350 Introduce remove_credentials to remove code duplication
f6a66cd3 Fix typo
871019c8 docker doc update about restart policy
1e44f93c Fix pandas access warning
3eca8021 Don't check exchange for Utils commands
6550e1fa Change docstring  in sampleHyperopt
80ad37ad Updated plot_indicators test
3287cdd4 Improve documentation regarding loading methods from hyperopt
12e86ee4 Make travis test-hyperopt the sample strategy
97d0f93d Align samples (hyperopt and strategy) to work together
861f10dc Allow populate-indicators to come from strategy
e9af6b39 Fix typo
2124661c Update faq with examples of grepping the log
691cec79 Be more selective which startup-messages are shown
241d9475 Add new runmodes
a80e49bd Change level of rpi header
9a42afe0 Move exchange-constants and retriers to exchange.common
b6616d7a Add test helping debug #1985
7be378aa Remove markets mock where it's not needed
734a9d5d Seperate tests related to worker from test_freqtradebot
ce6b869f Cleanup test
dc5f1b28 Extract integration tests into sepearte file
5dcf28ca Reduce frequency of ""startup-period"" message
365a408d Update release-documentation to fit new release style
9e988783 Allow configuration of stoploss on exchange limit
bba8e614 Rename function in samples
ad98d619 Update developer docs
14758dbe Some small cleanups
d89a7d52 Document new method to configure filters
640423c3 Add config samples for chainable pairlist filters
fd9c0260 Introduce chainable PairlistFilters
44289e4c Allow not using files from user_dir
6928c685 Add documentation sample for parallel_trade_analysis
dd408aa5 Add analyze_trade_parallelism analysis function
dac88c6a extract Find parallel trades per interval
78fe5a46 Update travis to verify for correct title usage
7a96d3c9 Update raspbian install documentation
b7b1e66c Convert to % as part of RPC to allow users to use unrounded ratio
5ed77711 Update documentation to include get_trades
c2076d86 Use scoped_session as intended
b37c5e48 use get_trades in rpc modules
26a5800a Extract get_trades function
01efebc4 Extract query to it's own function
ab117527 Refactor get_best_pair to persistence
f20f5ceb Move performance-calculation to persistence
6fe7b13e Replace coins in whitelist with existing ones
9c180e58 Log to stderr
de2cc58b Final cleanups and added tests
d803d86f Add low_price_percent_filter
d706571e Extract precision_filter to seperate function
4ff03553 Simplify precision_filter code
466a3b87 Enhance tests to cover precision_filter correctly
069da224 Add test to verify this is correct
e82460bd Fix create_cum_profit to work with trades that don't open on candle opens
61c037f2 Fix some typos and comment mistakes
73343b33 Address feedback
3a6020dc small improvements to stoploss doc
596a269d Bump pytest from 5.2.1 to 5.2.2
44d0a6f2 Bump ccxt from 1.18.1306 to 1.18.1346
60b99469 Bump nbconvert from 5.6.0 to 5.6.1
46b975a4 Bump pytest-mock from 1.11.1 to 1.11.2
70ad909b change samples to python code, and simplify a few things
2af3ce3e Improve stoploss documentation - split out offset_is_reached
132a4da7 Small style fixes and adjusted tests
73f5bff9 Add validation to make sure strategies work on that exchange
223f0cd4 Apply startup_period to edge as well
c4cb098d Update documentation with indicator_startup_period
2bc74882 Add test for startup_candles
2ba38807 Fix small bugs
33164ac7 Refactor loading of bt data to backtesting ...
86624411 Test trim_dataframe
5cdae17d Add tests for timerange modifications
bd4a23be Refactor start-adjust logic to timerange
5c2682e2 Add startup_candle_count to sample strategy
6382a4cd Implement startup-period to default-strategy
704121c1 Move most logic to history
9c7696a8 Add required_startup to backtesting
9e7e051e add trim-dataframe method
616fe08b Add subtract_start to timerange object
141c4541 Add startup-candles-argument for strategy
e5487441 Fix typos
48d83715 Fix typo in docs (thanks to Escaliert@Slack)
8b4fea4b Update installation.md
13ae339a Improve windows Install documentation with hints
bf20f3b7 Remove part which is related to #2418
32df73c0 flake
ef1885c3 Fix more tests
f5351e60 Adjust markets mock
bfec9d97 docs: Create Advanced Post-installation Tasks section; move systemd stuff there
3a7553ee Adjust option helpstring
d0521d33 Refactor whitelist handling
ea6b94fd docs: add a tip for The Ocean exchange
2e896462 Fix wrong volumepairlist message
e6337798 Improve pairlist documentation
41f97a73 Add logging to syslog and journald
45b83cc5 Don't require pair_whitelist for dynamicPairlist usecases
b3e028e8 Improve dynamic pairlist documentation
13255b37 Allow non-config to parse config
e1edf363 Fix test failures
1c503f39 Handle some merge aftermaths
2d34c0f5 Update helpstring exports
6fb96183 Reword help string
a5c83b66 Add --dry-run to trade command
89283ef4 Rename --custom-hyperopt to --hyperopt
ff1fa17d No default value for the config parameter
08e6d8a7 Rollback defaulting to DefaultHyperOptLoss
c4105436 Disable defaulting to DefaultHyperOpts and DefaultHyperOptLoss
95299d94 Remove unused test line
b73426b9 Disable Defaulting to DefaultStrategy
52ff391c Default dockerfile to ""freqtrade trade""
344a0a09 Update remaining documentations
27102263 Update documentation to use subcommands
381b0d3d Fix typo with new parser
52523bcd Use strategy child parser
0d13e2cb Update travis to run new methods
014881e5 Allow query version without subcommand
67b82638 Move test without command to test_main
09f18d07 Adjust some hyperopt tests
9ef874e9 Add Custom message during transition period
0aa73d5b Add test for failing case
ad2fa617 Fix utils test
e8106f37 Fix most tests to have trade as default argument
db3b9744 Fix calling sequence
d62a4d35 Fix some minor problems
1b25b5f5 Remove duplicate short-form `-s`
03add90c Adjust some tests to new call-method
0f2e277f Rename subparser variable to command
8664e7f7 Have main.py support only subcommand mode
cb37f432 Add trade subparser (and make subparser a requirement)
2a535b72 Parser should not have default
cd233688 Add first version with shared parent parsers
```

</details>",91629816
588,False,False,2019-11-01T18:52:07Z,2019-11-01T18:54:13Z,"## Important changes

- Introduce `freqtrade list-markets` and `freqtrade list-pairs` subcommands to easily list all pairs/markets on the exchange. Check out the [documentation](https://www.freqtrade.io/en/latest/utils/#list-pairslist-markets) to learn more.
- Add `docker-compose` files for easy developer-setups
- Add keep-alive message, removing message poping up every 5 seconds
- Settings in the `'experimental'` section in the config moved to the `'ask_strategy'` section. Please update your configurations.
- Allow [downloading tick data](https://www.freqtrade.io/en/latest/data-download/#trades-tick-data) to emulate OHLCV data (for Kraken backtesting)
- Sample strategy was reworked to include best practices.

## Full changelog

<details>
<summary>Expand full changelog</summary>
```
dab4ab78 Fix create_cum_profit to work with trades that don't open on candle opens
a74b941b Add test to verify this is correct
89bba6f7 Version bump
3929ad4e Fix typo
2f1d9696 Change keepalive to heartbeat
0773a653 Add I Am Alive Message
8201f70a Change loglevel of repeated message to debug
59e881c5 Remove obsolete scripts
2e1e0800 Fix potential race conditions between RPC and Freqtradebot during initialization
6640f4a1 Make flake happy
87ff7be5 Use exchange.name instead of config['exchange']['name']
336808ec Correctly pass validate flag to fallback exchange too
b26faa13 Call validate_timeframe only when validate is True
562e4e63 Set validate=False for exchangÑe in start_list_markets
73fa5bae minor: Fix wording in a docstring
a43d436f Move decorators out of API Class
ff5ba643 Improve docs
8872158a Bump mypy from 0.730 to 0.740
f07b26f2 Bump pandas from 0.25.1 to 0.25.2
e5f06c20 Bump python-telegram-bot from 12.1.1 to 12.2.0
36485939 Bump plotly from 4.1.1 to 4.2.1
657f1b6c Bump flake8-tidy-imports from 2.0.0 to 3.0.0
e350bcc2 Bump ccxt from 1.18.1260 to 1.18.1306
c2566f24 Bump numpy from 1.17.2 to 1.17.3
b116cc75 Fix failing test
bedbd964 slightly rephrase strategy docs
ca4d0067 Uncomment tests with --exchange
8a0d9013 Improve unclear sentence in the docs
5b680f2e minor: Condense paragraphs in the docs
45b2d24b Improve docs
10ca2492 Fix fluky test
d6b6ded8 Print empty line separator in case of human-readable formats (list and tabular)
20dd3f2d Clearly highlight potential problems with looking into the future
8a31b4c6 Update python base to 3.7.5 and install hyperopt dependencies
78cd75df Add requirement
b805e4e1 Try list extension
d8630ef8 Add one-sided ms timerange
c48876b1 Trades should use timestamps or dates, not indexes
16e10d99 Remove timeframe logic for non-date entries
0adcee92 Fix backtesting format since sublist does not render correctly
f41c659c Plotting trades from database should show correct duration
b152585d exportfilename should respect configured user_data_dir
fd22c872 Some minor cleanups to trades download methods and docs
30eb23e1 Minor freqtrade cleanup
4ec83a2c DefaultHyperOpts --> DefaultHyperOpt; hyperopts --> hyperopt where it's not correct
c649f984 Compare >= instead of =
3208f30c Fix base64 test on windows
5e731ec2 Add more tests
e55b2a1a Allow test to pass on fast computers by setting the offset to -1
ed8d8057 Make paths os independent to have tests pass on windows
00a95945 Improve assumptions
9d739f98 use requested - remaining amount - not the requested amount!
2588990f Require unfilledtimeout - don't require telegram in config
271846df Simplify cancel timedout
c181fac6 fix #2383
0ac46edd Add tests for new scenario
c735d352 Extract open_trade generation from freqtradebot
e9578948 Rename start_list_pairs() -> start_list_markets()
369335b8 Add tests for start_list_pairs()
2ebddcf4 Make flake happy again
8564affd Add tests for Exchange.get_markets()
a39d51d7 Update test to use limit_buy_order
750dc8bf Add tests for market_is_active()
033742b7 Fix pairlists to use market_is_active() instead of custom check
84ba431d Introduce a market with no 'active' field in conftest
b6e26c82 Replace market_is_pair() by symbol_is_pair()
e8eb968a Add tests for market_is_pair()
66605a19 Add tests for plural(), taken from #1989
1e61263a More sofisticated market_is_pair(), taken from #1989
bd08874f Fix options metavars shown in the helpstring
ff6a3465 Docs added
5b58141f iFix grammar issue
bf4e9a5d Code cleanup
837d4d82 Sort tabular and csv data by symbol as well
a8ffd29e Remove --active-only, introduce -a/--all instead
92fda0f7 Allow --base and --quote be lists of currencies
d72d3887 Make flake happy
fda71085 Refactor load-path building to parent class
1a765f1a Return generator instead of Object from _get_valid_object
7de16310 Print summary in the log for machine-readable formats
4c8411e8 Cleanup in print tabular and print-csv parts
f348956e --print-csv added
a4dfd77d Fix double comments for ADX
89e0c76a Add --print-json and -1/--one-column options
36d5bb6f Adjust ADX placement in the comments
ad89d199 Print list in the human-readable format
e6e35c25 Switch samplestrategy from ADX to RSI
ace70510 Wording fixes
a320d4cc Don't sell with 0 profit in samplestrategy
790e6146 Use crossed() in sample strategy
f5d87418 Bump sqlalchemy from 1.3.9 to 1.3.10
4c4134a2 Bump jsonschema from 3.0.2 to 3.1.1
b2682bcb Bump ccxt from 1.18.1225 to 1.18.1260
41117346 Add 'Is pair' in the list-markets tabular output
6e27c47d Handle properly exchanges with no active flag set for markets
76ad5bea Load correct exchange class
13e80e44 cleanup and better docstring
023eb196 Add documentation for --dl-trades
3e4617be add pandas-based converter-functions
ed9ec402 Add test for trades_ohlcv
56de81a1 Add some test data
ccb41d1e Add tests for test_download_trades_history
2374cda8 Cleanup and tests for refresh_backtest_trades
1b7a09c1 Add test for utils --dl-trades
37925e7f Add --dl-trades cli flag
762ae3a5 Extend tests
9f8a2acf Extend test-cases to 5 trades
4fdec9d6 Test id-based pagination
640d58eb Remove unneeded checks
fa8c6138 Remove unneeded exception handlers
b6ac898f Add test for exception handler
57bcff19 Test get_historic_trades
939a87ed Add test for fetch_trades
16d6914b Add test to cover missing line
05e47364 Small adjustments to get_trade_history
0d592f6c Refactor trade downloading to handle exceptions only once
476adf87 Add conversion from trades to ohlcv at different intervals
9584629f Rename argument from dl_path to datadir
c1c49183 Call new method based on condition
8069cd66 add refresh_trades_ method
1f79ca95 Remove duplicate check
1d8fc970 Fix duplicate trade error, rename some methods
19f3669f add docstring
06024b0a Fix zipfile handling
6e952a0a Capture downloaded data
57dee794 Fix end-reached for id-based trade-download
2c0bb71a Add download_trades_history()
ab8f638e Move id/time detection to get_historic_trades method
d250b67f Add load/store trades data
42b82415 use gz to save / load trades data
6cc98c1e Fix tests
77c367ad First draft of async get_trade methods
26b31489 Add build_ohlcv wrapper
27dc9ca7 Add trades_pagination attributes
63e87ef8 Add pair_trades_filename
6697b677 Add test for test_data_filename
baad1a51 Explain _params element
7cf79825 Add list-pairs and list-markets subcommands
f3f6e9d3 Allow skipping of exchange validation
3c8d27d0 remove correct comment ...
4c1705fb No specific handling for trailing_stop_positive
ff7a3cc8 remove last occurance of config. from stop_loss_reached
4d148849 stoploss_reached should not use config
e72b6a44 Updated Rest API Docs
c49f4b73 Fix helpstring
5e23cc71 Add tests for orderbook and market in dataprovider
0680fe2a fix path to tests
23b5c0e8 Improve tests for handling deprecated settings
cdd1bc42 Fix typo
2a9c06c4 Test added
434e0234 Add handling deprecated settings
bcd02a87 Fix beeing again ...
e1c14bc8 Don't use os.path in test_history
69c23c00 Fix minor typos in the docs
2e91ee38 remove underline from docs style
86ef3231 Add versions to doc theme
4d062d41 Improve comments in the SampleStrategy; set use_sell_signal = True
e78e4233 Improve docs wordings
057ab1b7 Remove unnecessary comments
613300c6 Add short description of the market() method into docs
c34ce15b Bump pytest-cov from 2.7.1 to 2.8.1
80d58b79 Bump pytest-mock from 1.11.0 to 1.11.1
568ecc20 Bump sqlalchemy from 1.3.8 to 1.3.9
652a04ac Bump ccxt from 1.18.1208 to 1.18.1225
5e9ab3e2 Bump mkdocs-material from 4.4.2 to 4.4.3
be6fd3af Bump pytest from 5.2.0 to 5.2.1
e272cd48 Bump joblib from 0.13.2 to 0.14.0
ad35a3d7 Small wording improvements
211b9cbe Cleanup in data.history
33940ae6 Use different keys and values
d2589c44 Make test exchange-independent
22733e44 Add tests for --fee
82d4051a Add --fee to documentation
0664a8c0 add `--fee` to change fees to other values
9b233764 Move experimental settings to ask_strategy
7ea9da96 Fix #2277
9b98e608 Add testcase for negative ROI after certain period
885edc97 Allow multiple ROI in detail-backtest tests
e1b8485b Remove indicator_helpers.py and test
764a35d0 Remove scattergl and fix tests
00ab6f57 Cleanup legacy strategy
73e9cbde Fix #2338
78381e9e Improve test to test full sell cycle
75252b62 Docstrings improved
f95b0ccd Tests added
38f184e5 Update test to not mock stoploss_on_exchange
1f4e5b17 Add basic test for execute sells_multiple logic
9ee7e28e Clean up some mocks
3ac5b918 Add market() method to dataprovider
4b29c4cd Test for handling closed trade adjusted
89729aef Fix and improve process_maybe_execute_sells()
15aae8a5 Tests adjusted
096c69dc Refactor Freqtradebot
eca8ddab Remove unused test-data
c57d5ef1 Added short descriptions and examples in utils.md
f2e878d9 Update helpstring for list-exchanges
f6a88c6e Tests adjusted
d1fa5f30 Add --all option to list-exchanges
cd0e813a Docs adjusted, utils.md added
dc47a391 Move ignore to corrct line for mypy 730
04fea69a Bump mypy from 0.720 to 0.730
7617dd50 Add separate message for `hitbtc` exchange
f359f869 Bump pytest from 5.1.3 to 5.2.0
d74ca78b Bump ccxt from 1.18.1180 to 1.18.1208
3c91ba13 Bump pytest-mock from 1.10.4 to 1.11.0
9a83d841 Bump tabulate from 0.8.3 to 0.8.5
8ae4018e Bump urllib3 from 1.25.5 to 1.25.6
739901b6 Add test for this behaviour
03b5be91 some commands should not have config at all
272c977d Add exchanges to the list of bad exchanges
75446d81 Refactor list-timeframes command with the use of the Exchange class methods
448b09d7 Add list-timeframes subcommand
23665c77 Don't use main.py as entry point in documentation
11bb7e52 use .develop dockerfile, move docs to develop.md, add freqtrade_bash
83e596c0 chart styling
9391c27b Enhancements to BB plotting
fe483ad0 Don't use the develop dockerfile for local
cb6e1368 how to exec
5c3fb4d5 docs for running docker-compose locally
7c6921c7 pr feedback regarding docker-compose naming
359b0ba0 Add samples for plotting to jupyter documentation
5234f8bf Update jupyter notebook slightly
9a3bad29 Automatically generate documentation from jupyter notebook
e8e05b68 split docker composes

```

</details>",91629816
589,False,False,2019-10-01T18:04:18Z,2019-10-01T18:06:26Z,"## Important changes

* Migration from `scripts/plot*` into freqtrade subcommands (`freqtrade plot-dataframe` and `freqtrade plot-profit`).

* Strategy should now include an `INTERFACE_VERSION=2` variable to be explicit what version you're targeting (and to facilitate future updates to the strategy interface).
* removal of `--refresh-pairs-cached` (please use `freqtrade download-data` instead).
* improvements to Hyperopt 
  * Adaptive hyperopt ROI space (no need to adjust the ROI space for different timeframes)
  * Improved memorymanagement for hyperopt.
  * Default stoploss space was shortened to [-0.35; -0.02], to avoid hyperoptimization results with higher stoploss values that are not applicable for most users.
  * a bug fixed which caused serious deviations between hyperopt results and backtesting in the same conditions. Position stacking in hyperopt was always erroneously set to true. Please review the results of your previous hyperopt sessions.

## Changelog
<details>
<summary>Expand full changelog</summary>
```
6a397f57 Add description of usage
2f005d6b Align example of ROI in the docs
45f5394d Align example in the docs
7e214d8e minor: change default stoploss space
43f2ef22 Change rel_tol to abs_tol to avoid surprises with high priced pairs
42b5a097 fix failing test
4ac53f15 Shorten the default hyperopt stoploss space
637ec606 Update slack link
60e3e626 Improve timerange section of the docs
9db91585 Allow use of config in custom hyperopt methods
eb07f1fe Fix typo
8d92f8b3 Compare floats via isclose instead of ==
49f0a721 Add test for rounding error on fload aggregation
5978b7bb Add explicit test for halfbought fee adjustment
0268bfdb Minor: fix typo in comment
e9de0882 Add import-fails code as a fixture
d05db077 Update PI install documentation  and dockerfile
d2f24730 install hyperopt seperately ([hyperopt])
47b6b565 Reorg dependencies to have hyperopt seperated
27cc73f4 Dynamically import hyperopt modules
cc91ccad Improve documentation wording
665e0570 Fix hyperopt position stacking
6c0a1fc4 Fix tests that fail when config.json is present
93b26216 Add format description for pairs.json file
6aa1ec2a Some small restructuring
cc9fc413 Rename section to data-downloading, implement some feedback
fe40636a Improve wordings
577b1fd9 Improve documentation wording
0f97a999 Improve wording
6ffb8b7a Fix wordings in comment
95e725c2 Bump ccxt from 1.18.1159 to 1.18.1180
0c6164df Fix memory exhaustion in skopt models list
d8bc3504 Bump python-telegram-bot from 12.1.0 to 12.1.1
242ff26e Bump pytest from 5.1.2 to 5.1.3
ab0adabd Bump urllib3 from 1.25.3 to 1.25.5
ba4db0da Improve configuration documentation
7aa42f88 Fail download-data gracefully if no pairs-file exists
3245ebcc Fix problme when no exchange is given to download-data
b1a3e213 Improve backtesting docs
2fcddfc8 Clarify updating existing data
313091eb some more refresh_pairs cleanups
508a35fc Update comment as to why certain points have not been removed
9cedbc13 Cleanup history.py and update documentation
e66fa1ce Adjust tests to not use --refresh-pairs
1cd8ed0c Remove --refresh-pairs
dc825c24 Make flake happy
15a4df4c Mock create_datadir to make sure no folders are left behind
f0cf8d6a Allow easy printing of loaded configuration
50b45639 Tests adjusted
69f29e89 minor: Cleanup for backtesting
ee6ad51a Manual bump to ccxt 1.18.1159
a42000e1 Change package author to ""freqtrade team""
e9a75e57 test adjusted
5cbc073d minor: Cleanup hyperopt
b7da02aa realistic fixture datas
f3e3a8fc unused in tests
9c1cce6f Bump ccxt from 1.18.1124 to 1.18.1149
cab394a0 Bump python-telegram-bot from 12.0.0 to 12.1.0
c2462ee8 Bump arrow from 0.15.0 to 0.15.2
b00467c8 Fix test failure
2cf045c5 Remove commented indicators from DefaultStrategy
e2a100c9 Directory / folder
eda1ec65 Revert back condition for open_since in Trade.__repr__
01357845 remove unused indicators from default_strategy
5e654620 Use available indicators in tests where possible
16b4ae83 Document this new behaviour
a5f3b68b Allow loading of fully initialized config from jupyter notbooks
f1632407 Simplify configuration init  where possible
c8d191a5 Adjust test
e6ec8f9f Fix tests: Change condition for printing 'close'
4d566e8b Update tests to not use Namespace
e6ccc142 have Arguments return a dict instead of Namespace
52b186ea Create-userdir does not need a configuration
67ff48ce Comment out noisy log messages
045ca873 Do not print humanized datetime in the log message
dda513c9 Minor class cosmetics
6c5eff4a Use List of Tuples, remove unused columns
849d694c Don't inherit from object
1d781ea9 Refine 'stoploss adjusted' log message
acf3b751 Log sell_flag, do not log sell_type=SellType.NONE
9bdfaf38 Remove quotes around the pairs
f8eb1cd5 Add tests for kraken balance implementation
3b4bbe7a Implement get_balances which uses open_orders
2bd59de0 Cleanup log_has_re regexp string
ac413c65 Clean up the use of patch_exchange
c01953da Remove kraken block
a9ecdc77 Use patched exchange instead
869a5b49 Eliminate asyncio warnings in tests
2081d755 Make flake happy
e298e773 Adjust tests
35580b13 Improve backtesting logs
85f12915 use git log to print version
94d2790a Fix #2239 -
9aa7db10 Add test for failing case
3398f31b Bump ccxt from 1.18.1115 to 1.18.1124
7dc3e67b Bump plotly from 4.1.0 to 4.1.1
3c869a80 Bump arrow from 0.14.6 to 0.15.0
edba5a00 Bump numpy from 1.17.1 to 1.17.2
adbc0159 changed more occuranes of function
a5510d14 de-mangling
34308504 don't print in tests
c5726e88 Don't gitignore sample_strategy
867a3273 Fix random failure if config.json exists
2a236db1 Pass test-data to dockerized backtest
3e0edc7e Update backtesting section about correct data used
0bb1127c update .gitignore
9d2c6c8d Fix paths in setup and travis
9513115c Fix paths in tests
f2cbc5fb Fix documentation references to tests folder
26d76cdb Adjust imports in tests to new path
65a516e2 Move tests out of freqtrade module
13932f55 Fix random test failures
bb2d8fef Enhance setup.py
865e0d3a Adjust tests: removed tests for/with import_strategy()
45cfdbbd Make flake happy
2b00a5d9 Get rid of import_strategy()
bd2ecf8c Add testdatadir to missed test
972b8a17 Remove defaulting to test_data folder when no datadir is present
fe631ffd Use fixture to determine test_data_dir
bde82e96 Move make_testdata_path to conftest
4fdf8a75 Adjust hyperopt tests after the merge with develop
7e567047 Parametrize tests for hyperopt simplified failed
ef8386c0 Fix table with ROI limits
e39d9111 Improve wordings in hyperopt.md
48ac37a1 BLock kraken trading - it's not working at the moment
e8f37666 Fix Problem when ccxt reports None as values
e2e00151 Don't rename dict ... we can use it as is
3343b347 Add tests for simplified hyperopt interface
e1072902 Validate plot arguments
1b66f01e Always use config.json if it's available
5ce63cd5 Remove no_config_ argument from Arguments
03f3d0dc Remove desc from Arguments header
88f823f8 Improvements to documentation
9a6a89c2 allow simplified hyperopt interface
e8614abc update table md formatting, enhance description
87ae2430 ranges for ROI tables for different ticker_intervals in docs
dc9fda76 Fix tests to adapt to new telegram-bot interface
3b15cce0 Handle arguments uniformly (by using context.args)
8cad90f9 Adapt to new api
9c60ab79 Adapt telegram api to new interface of telegram-bot-12.0.0
05789c4b Bump python-telegram-bot from 11.1.0 to 12.0.0
04335ddd Bump ccxt from 1.18.1085 to 1.18.1115
3f6c0ba6 Bump arrow from 0.14.5 to 0.14.6
bf4e3f55 Bump sqlalchemy from 1.3.7 to 1.3.8
51ad05ef Bump pytest from 5.1.1 to 5.1.2
89f5cf82 Bump numpy from 1.17.0 to 1.17.1
949ab2a1 Bump mkdocs-material from 4.4.1 to 4.4.2
aae9c319 Reenable stoploss_on_exchange for dry-run
20c9c93b Improve docstring
771519e3 Don't show stacktrace in case of invalidorder Error
f91557f5 Add space to exception message
514860ac Improve documentation
9d7ebc65 Move return statement to correct intend
6aab3fe2 Add test for stoploss order handling behaviour
7c0a49a6 _notify_sell needs ordertype seperately
292df115 Support selling via emergencysell
9f53e9f5 Raise InvalidOrder error when stoploss-creation fails
ee808abf Add emergency_sell as sell reason
7fc15664 simplify stoploss_oe code
f0c0f561 Abstract creating stoploss-orders from stoploss-logic
2886fa28 fix documentation
736deaae Add test with plot command without configuration
c9e15c2f Add test for new check_exchange branch
d48f03c3 check_exchange is not required for plotting
1760a8df Use subparser-name to exclude from config requires
f278fcfc Use plot-runmode for plot scripts
423805c9 Small documentation improvements
d060d277 Add test for all messagetypes
75dc174c support all messagetypes in webhook
d977695d Catch NotImplementedError when sending messages
b6b7dcd6 Test NotImplemented is cought correctly
cabe2910 Fix test-leakage by not copying config correctly
6b3d25b5 Fix datadir init when used wiht --exchange
68adfc66 Init exchange before datadir ...
c38f3a2b Apply dynamic versioning to develop
8923c022 docstring wording
756f44fc highlight really important notifications
51fbeed7 Rename TestStrategy to SampleStrategy
d66fb864 Add documentation for interface_version
a504abf0 minor: improvements in confuguration.md
d9c2b7d4 fix fetching ticker_interval from strategy
0e62b8bd Update strategy_version to INTERFACE_VERSION
92011f82 Introduce strategy_version variable
6af51358 Bump pandas from 0.25.0 to 0.25.1
6b233eb8 Bump ccxt from 1.18.1068 to 1.18.1085
75e3d220 Bump pytest from 5.1.0 to 5.1.1
e5da5f7f Bump mkdocs-material from 4.4.0 to 4.4.1
bfc68ec7 minor cleanup in Backtesting
513e8488 Don't escape ticks where it's not needed
da7da2ce Change tests to split function
3232251f Refactor downloading ohlcv from utils to history
e603cca7 Testing with now() should not pass in date/time
8f8acf5b Update ccxt to have this implemented
565a543b Use ccxt base methods to round timeframe
5e12b054 Improve test coverage
a4c8b5bf Move binance-specific test to test_binance.py
cbf09b5a Improve docstring for Exception
2c66b33f Adapt some tests to use Binance subclass for stoplosslimit
067c122b Adapt test to use Binance class
defa1c02 Move stoploss_limit to binance subclass
ea179a8e stoploss_limit shall not use `create_order()`
8a17615b move exceptionhandling from create_order() to calling functions
3121206a correct wrongly named test
240936eb Small fixes
1336781f Reorder points in documentation to group analysis points
661cd65b Improvements to plot documentation
fb498795 Improve profit-plot styling
2ae39891 Fix bug in bt-analysis when multiple trades sell at the same time
d711b8c0 Plot-profit should have subtitles per subplot
395414cc Refactor init_plotscript a bit (strategy is not needed for plot_profit)
9f29ad77 fix test after plot_dataframe change
545e5c5b simplify load_trades call
1b374fcf Improve plotting documentation
518d7dfd Replace plot-scripts with pointers to the new commands
f8ddb106 switch indicators to nargs argument type
0ef13be5 Test plot_profit
c559f957 Add test for plot-profit
f7cb75ff Add plot-profit command
29076acc Add test for analyse_and_plot
99b2be90 Cleanup plotting (if you have backtest results, no need to download data!)
f8c72fee Add some initial tests for plot_dataframe
69c2b128 Move plot_dataframe as freqtrade submodule
fcb0ff1b do not round values in the debug message
31669fde test adjusted
cadf5731 round printed stoploss value as well
a12876da fine printing for floats in the roi tables (round to 5 digits after the decimal point)
5b9711c0 adaptive roi_space

```
</details>",91629816
590,False,False,2019-08-31T17:13:05Z,2019-08-31T17:15:08Z,"Re-release of [2019.8](https://github.com/freqtrade/freqtrade/releases/tag/2019.8) fixing wrong datadir settings (with this bug, downloads are placed in the wrong folder / backtesting does not find existing data).

",91629816
591,False,False,2019-08-31T17:13:05Z,2019-08-28T17:27:27Z,"## Highlighted changes

- Fix multiple bugs in relation to stoploss
- migrate `download_backtest_data.py` to `freqtrade download-data`
- introduce new parameter, `--userdatadir` to specify a directory structure for `user_data`. This will default to `cwd/user_data` and not change current behaviour if not used.
- simplify minimal custom hyperopt file 
- lock pairs after trades for the current candle, to avoid sell/buy loops within one candle (mainly relevant when using longer timeframes (1h and up).


## Full changelog
```
44780837 Version bump to 2019-8
365b9c3e Add test to correctly handle unsuccessfull ordercreation
3f6eeda3 Reset stoploss_order_id when recreating fails
a8842f38 Fix wrong exception message
667a6233 adjust tests
067208bc make backtesting an attribute of Hyperopt
70ebd09d Add checks verifying that stoploss is not 0 (and positive-stoploss is also not 0).
782f4112 Add test checking stoploss == 0 values
d19b11a0 exchange cosmetics
0e81d720 Clense jupyter notebook
b2ef8f4e Add additional header
81925dfa Fix some doc inconsistencies
fe12d2e3 Fix documentation syntax
df1f5739 use seperate job for doc test
949ca1ab Fail travis if doc-test fails
13ffb392 Adjust tests to fixed loading method
75b2db44 FIx loading pairs-list
14aaf897 fix download replacement script
210f66e4 Improve wording
91e72ba0 small formatting issue
be308ff9 Fix grammar error in documentation
4ee35438 Improve deprecated docs
11dab2b9 Deprecate documentation for --refresh-pairs-cached
f02adf2a Deprecate --refresh-pairs-cached
9e249928 Remove calls to load_data using live=
e9e2a834 remove `--live` references
8cc477f3 edits
8d1a575a Reword documentation
70b1a05d example in the docs changed
9ad9ce0d Bump ccxt from 1.18.1063 to 1.18.1068
a4ede02c Gracefully handle problems with dry-run orders
ea4db0ff Pass object-name to loader to fix logging
d785d763 make VolumePairlist less verbose
b6462cd5 Add explaining comment
611850bf Add edge/dynamic_whitelist validation
ddfadbb6 Validate configuration consistency after loading strategy
045ac101 Split test for buy-orders too
ee7ba96e Don't do calculations in exception handlers when one element can be None
8e96ac87 Split exception tests for create_order
acf1e734 Adapt lg_has calls to new standard
d3009646 code formatting in test_dataprovider.py
407a3bca implementation of ohlcv optimized
310e4387 logging message improved
8a2a8ab8 docstring for ohlcv improved
5e440a4c Improve docs to point to `freqtrade download-data`
2cffc322 split example notebooks
7fa6d804 Add note explaining how / when docker images are rebuild
0e87cc8c Remove pyup.yml
351740fc Change pyup to every month (should ideally not find anything ...)
9143ea13 Bump ccxt from 1.18.1043 to 1.18.1063
e0335705 Add dependabot config yaml
4ce3cc66 Bump sqlalchemy from 1.3.6 to 1.3.7
fce3d758 Bump pytest from 5.0.1 to 5.1.0
cda912bd test added
84a0f9ea get_pair_dataframe helper method added
08fa5136 use copy of minimal_config ...
7a79b292 Fix bug in pairs fallback resolving
a53e9e3a improve tests for download_module
f7d5280f Replace ARGS_DOWNLOADER with ARGS_DOWNLOAD_DATA
29c56f44 Replace download_backtest_data script with warning message
c9207bcc Remove blank line at end
132f28ad Add tests to correctly load / override pair-lists
b2c21502 Add tests for download_data entrypoint
89257832 Don't use internal _API methods
219d0b7f Adjust documentation to removed download-script
4e308a1a Resolve pairlist in configuration
3c15e3eb Default load minimal config
8655e521 Adapt some tests
05deb9e0 Migrate download-script logic to utils.py
91886120 use nargs for --pairs argument
09286d49 file_dump_json accepts Path - so we should feed it that
53db3826 Update dockerfile python version
8d206f83 Fix wrong warning box
b94f3e80 tests fixed
2a842778 tests added
e525275d make flake and mypy happy
4fa92ec0 hyperopt: --print-json option added
69eff890 Improve comment in test_history to explain what is tested
12677f2d Adjust docstring to match functioning of load_cached_data
a94a8908 Don't forward timerange to load_ticker_file
fd77f699 f the string
f5e437d8 Change create_trade to create_trades for new test
11790fbf Fix typos in docstrings
f3e6bcb2 Avoid using negative indexes
b2a22f1a Fix samll errors
9d3322df Adapt history-tests to new load_cached_data header
91d1061c Abstract tickerdata storing
0ffb184e Change some docstrings and formatting from history
096a6426 Override equality operator
84baef92 Rename get_history to get_historic_ohlcv
51c3a31b Correct imports and calls to parse_timerange
06fa07e7 Move parse_timerange to TimeRange class
4da2bfef Improve docstring for some downloading methods
d6f5f6b7 Add test with preexisting trades
a4ab4256 improve docstring for create_trades
a76136c0 Rename create_trade to create_trades
e35a3492 Fix spelling of interface.py docstring
3d36747b preface in configuration.md reworked
4c4ba08e colorama added to install_requires
94196c84 docs: explanation for --no-color and colorization schema for results
9d476b5a Also check 0 open trades
0a07dfc5 Add test verifying that multiple trades are opened in one iteration
d69f7ae4 Adapt final tests to support multi-trade creation
974d899b Adapt some more tests
6948e0ba Handle orderbook_depth check correctly
a325f1ce adapt some tests
997eb757 Support creating multiple trades in one iteration
8873e007 process_maybe_execute_buy does not need to return bool
c29389f5 Remove process() checks from tests
4b8eaaf7 freqtradebot.process() does not need to return anything
8d813fa7 Remove return-value for _process
28e318b6 Lock pairs for stoploss_on_exchange fills too
2961efdc Initial test for locked pair
3c589bb8 fail if known bad exchanges are detcted
d8dbea9d Add exchange_reasons to bad exchanges
f960ea03 Remove duplicate test
de802341 hyperopt options updated in bot-usage.md
482847a9 docs adjusted; various fixes to bot-usage.md and configuration.md
58d308fd fix handling --no-color for edge and backtesting
59acd5ec Lock pair for the rest of the candle in case of sells
ca739f71 Fix default argument handling for timeframe_to_nextdate
23a70932 Remove pointless tests (without config?? really?)
1a34b9b6 --no-color option introduced
8f929128 final colorization schema
2600cb7b simplify timeframe_next_date calculation
200b6ea1 Add is_pair_locked
dd30d746 Update python-rapidjson from 0.7.2 to 0.8.0
6f42d665 Update arrow from 0.14.4 to 0.14.5
c4cdd85e Update ccxt from 1.18.1021 to 1.18.1043
0bd71db5 Update scipy from 1.3.0 to 1.3.1
feced71a Test closing sell-orders immediately
444ee274 close dry-run orders in case of market orders
bb0b1600 Remove duplicate test
241d5100 Handle and update sell-orders immediately if they are closed
c042d08b Add lock_pairs to interface
1ce63b5b Reformat tests to be easier readable
dd0ba183 Add timeframe_to_prev_candle
933a553d Convert timeframe to next date
af67bbde Test timeframe_to_x
43b41324 Improve hyperopt-loss docs
197ce0b6 Improve documentation wording for multiconfig files
e5dcd520 cosmetics in sample_hyperopt and default_hyperopt
90b75afd test added to load config with comments and trailing commas
2d60e4b1 allow comments and trailing commas in config files
c5d8499a Improve documentation regarding tests
b77c0d28 Replace all ""logentry"" in caplog_record_tuples
a636dda0 Fix remaining tests using log_has
dc5719e1 Adapt rpc to new log_has method
d53f6302 Change log_has to get caplog instead of caplog.record_tuples in more tests
02216073 Change log_has for some tests
a1b5c724 Change log-has to use record_tuples itself
a225672c Add tests for dry-run stoposs_on_exchange
4b4fcc70 Change stoploss_on_exchange in freqtradebot
e02e64fc Add test to make sure dry-run disables stoploss on exchange
176beefa Disable stoploss on exchange for dry-runs
1a85e3b4 Fix numpy warning
5209ce5b tests: don't mask numpy errors as warnings in tests
6d89da45 Add test for from_config
eb328037 combine normalize method and  config validation to in_files
afba31c3 change method from _load_config_Files to from_files()
c4cbe79b Adjust documentation
48d83768 tests fixed
ab092fc7 Reinstate comment on backesting data
28d8fc87 tests adjusted
ad6a2498 download_backtest_data.py adjusted
50c9679e move load_config_file() to separate module
8eb39178 code block instructions. removed extra packages
dd35ba5e added imports to doc code blocks.
3cc772c8 added reminders
247d7475 fixes to example notebook.
51d59e67 fixed another instance of Path in docs and nb
ae39f6fb use of termcolor eliminated
15cf5ac2 docs improved
ccf3c698 edits to clarify backtesting analysis
8ad5afd3 As -sharp_ratio is returned the value should be nagative.
0d4a2c6c advanced sample hyperopt added; changes to helpstrings
2bc67b4a missed a call of os.path. removed it.
9df1c23c changed Path, added jupyter
7a47d81b Ensure git reset --hard is realy desired
831e7088 Detect virtualenv and quit in that case
757538f1 Run ldconfig to add /usr/local/lib to path
cc4900f6 Doublecheck if virtualenv IS present
7d02580a  setup.sh script shall fail if venv initialization fails
5864968c Update plotly from 4.0.0 to 4.1.0
33bc8a24 Update ccxt from 1.18.1008 to 1.18.1021
dfce2020 Update mkdocs-material from 3.1.0 to 4.4.0
8418dfba edits for jupyter notebook example
caf45803 Use UTC Timezone for test
a90ced1f Since arguments are in milliseconds integer throughout ccxt.
81f77305 Add test to verify ticker_inteval is set
7e91a0f4 Fail gracefully if ticker-interval is not set
9d471f3c Fix documentation for strategy-list
988a0245 Update install-script to use parameter
0376630f Update urllib to latest version
c7d03297 Clean up comments of detail-backtests
bc2e920a Adjust code to verify ""current"" candle for buy/sells
3721610a Add new detailed trade-scenario tests
90438105 Add documentation for conda install
5e64d629 Update coveralls from 1.8.1 to 1.8.2
d71102c4 Update py_find_1st from 1.1.3 to 1.1.4
403f7668 Update jsonschema from 3.0.1 to 3.0.2
930c25f7 Update scikit-learn from 0.21.2 to 0.21.3
187d029d Update arrow from 0.14.3 to 0.14.4
9914198a Update ccxt from 1.18.992 to 1.18.1008
c6444a10 move roi_space, stoploss_space, generate_roi_table to IHyperOpt
9cbab35d colorization by means of termcolor and colorama
2af663dc rename _analyze_ticker_int to _analyze_ticker_internal
4d1ce817 intend if to be clearer
c5ccf447 Remove generate_dataframe from plot_dataframe script
e4380b53 Print plot filename so it can be easily opened
62262d0b improve docstring of _analyze_ticker_int
52d92cba Split analyze_ticker and _analyze_ticker_int
c6bd1437 add Operating system to issue template
d51fd1a5 fix typo
c4e30862 load_trades_db should give as many columns as possible
3dd6fe27 wording
fe796c46 test adjusted
f200f52a hyperopt print colorized results
d59608f7 adjust some documentation wordings
8ab07e04 Add FAQ section about restricted markets
ad55faaf Fix odd test
bbd58e77 Warn when using restricted pairs
e8b2ae0b tests adjusted
13620df7 'with values:' line removed
3b65c986 wordings fixed
cad7d913 tests: hide deprecation warning due to use of --live
b152d1a7 docs agjusted, plus minor fixes
aa8f44f6 improvements to hyperopt output
3eb571f3 recommended ...
32605fa1 small improvements
0b9b5f39 Improve document wording
76d22bc7 Show correct valueerror message
01cd3098 Improve wording
fceb4111 Create detailed section about strategy problem analysis
0413598d adding environment.yml for conda builds
3ccfe88a tests adjusted
065ebd39 cleanup in hyperopt
2a141af4 Only create userdir when explicitly requested
8cef567a create and use hyperopt-results folder
5d22d541 Add forgotten directory
c3d14ab9 don't use ""folder"" ...
04885258 Fix some documentation errors
b976f246 tests adjusted
8f1f416a hyperopt cleanup and output improvements
59caff8f UPdate developer docs
f825e81d developers need all dependencies!
7bea0007 Allow installing via submodules
8dd8addd Sort requirements-dev file
e14dd497 Improve release documentation
7a97995d 2017.7-dev version bump
03e60b9e Rename folder_Operations to directory_operations
c1bc1e31 Add documentation for user_data_dir
73ac98da Small fixes while tsting
14b43b50 Use user_data_dir for hyperopt
a3c605f1 PairListResovler to use user_data_dir
333413d2 Add default_conf to strategy tests
9de8d727 have strategyresolver use user_data_dir
432b106d Improve docstring, remove unneeded method
2c7a2483 Use user_data_dir in hyperopt
11394713 user_data_dir is PATH in config, not str
0a253d66 Remove os.path from hyperopt
ae0e0011 Fix some bugs in tests
eab82fde plot-scripts use user_data_dir
da755d1c Remove obsolete variable
1b2581f0 Add user_data_dir to configuration
56c8bdba Test create-userdir command line option
23435512 Add create-userdir command to initialize a user directory
6c3a0eb1 add create_userdir function
c85cd13c Change default backtest result to ""backtest_results"" - backtest_data is misleading

```",91629816
592,False,False,2019-07-30T04:19:43Z,2019-07-30T04:22:40Z,"
### Upgrade Note:

Please make sure to update your installation dependencies (`pip3 install -r requirements.txt`), several dependencies have been updated and freqtrade will produce errors when used with the old version of these dependencies.

### Highlighted changes

* Allow specification of custom hyperopt path
* Allow custom hyperopt loss function (includes Sharpe Ratio inspired Loss-function now).
* important improvements to align hyperopt with backtesting by default

### Deprecations

* `--live` option for backtesting has been deprecated since it's confusing and generates virtually no value, since the backtesting-period would be too short.

### Full changelog:

```
5ba0aa80 Update plotly from 3.10.0 to 4.0.0
3e95b7d8 Update mypy from 0.711 to 0.720
0f632201 Update pytest from 5.0.0 to 5.0.1
ebca1e43 Update flake8 from 3.7.7 to 3.7.8
a3620c60 Update flask from 1.0.3 to 1.1.1
9f70ebec Update arrow from 0.14.2 to 0.14.3
0fd91e44 Update sqlalchemy from 1.3.5 to 1.3.6
fe088dc8 Update ccxt from 1.18.860 to 1.18.992
5a6e20a6 Update pandas from 0.24.2 to 0.25.0
02bfe2da Update numpy from 1.16.4 to 1.17.0
b691fb7f Fix some hyperopt tests
08a3d263 Update bot-usage.md
bc299067 get rid of pandas warning in pytest
c2deb1db eliminate warnings in pytest when testing handling of the deprecated strategy interfaces
785a7a22 output divider in logs between throttles
1ac4a7e1 rendering for a Note fixed
327e5052 non-working link to misc.py removed
bf1c197a import errors fixed
3c3a902a Move argument definitions to their own file
0c14176c Deprecate --live
7ee971c3 Add simple method to add deprecations to cmd line options
10c69387 docs adjusted
4b8b2f7c Use raise xxx from e to have a nicer traceback
e1b8ff79 Add test to verify that get_order was successfully cought
05b18549 Gracefully handle InvalidOrderException.
f58668fd test added
05be16e9 helpstring alignment fixed
e9b77298 max() removed
a0cecc6c Fix test after pandas 0.25.0 update
cf611306 Resolve issue #2042
0c2c094d minor: add OnlyProfitHyperOptLoss
60cf56e2 Adapt tests to always provide message for ccxt exceptions
482f5f7a Update plotly dependencies (will break 3.x installations)
04382d4b add --hyperopt-path option
44b2261c Update plotly from 3.10.0 to 4.0.0
76b9d781 Update mypy from 0.711 to 0.720
bd0faaf7 Update pytest from 5.0.0 to 5.0.1
e0cd34c9 Update flake8 from 3.7.7 to 3.7.8
6c41ca4b Update flask from 1.0.3 to 1.1.1
7add015a Update sqlalchemy from 1.3.5 to 1.3.6
d6b6e59a Update ccxt from 1.18.860 to 1.18.965
a213674a Update pandas from 0.24.2 to 0.25.0
d2ad32ee partially revert last commit(DefaultStrategy import IS needed).
1fea6d39 Import DefaultStrategy from the correct file
dcddfce5 Fix small mistakes
e6528be6 Config is not optional for hyperopt resolver
08ca260e Simplify return valuef rom _load_object
88eb93da Fix base64 strategy test to make sure strategy was loaded via base64
b35efd96 Extract load_object from multiple paths to iResolver
89db5c6b Extract strategy-specific stuff from search logic
fa890497 Don't use --hyperopt-loss-class, but --hyperopt-loss instead
4a144d1c docs: description for whitelist and blacklist fixed
7af24dc4 cleanup Arguments: name attrs and methods as non-public
e01c0ab4 Improve doc wording
8b4827ad Convert create_datadir to Pathlib
43d5ec2d docs: removed historical excursus which can confuse new users
75a0998e docs: restore link to #dynamic-pairlists.
50d2950e add -V alias for --version
96564d0d remove deprecated --dynamic-whitelist option
3e5abd18 Randomize tests again
545ff6f9 Fix typo
49b95fe0 use Path.cwd() instead of odd parent.parent.parent structure
b8704e12 Add sample hyperopt loss file
639a4d5c Allow importing interface from hyperopt.py
0e500de1 Add sample loss and improve docstring
8ccfc0f3 Remove unused variables
be26ba8f rename _load_*_config() methods to _process_*_options()
14937710 improve description
192d7ad7 Add column description to hyperopt documentation
12679da5 Add test for hyperoptresolver
ec49b22a Add sharpe ratio hyperopt loss
d23179e2 Update hyperopt-loss to use resolver
7d62bb8c Revert --clean argument to --continue
c4e55d78 reword documentation
07a1c48e Fix wrong intendation for custom-hyperopt check
7be25313 Add some mypy ignores
55e8092c Add sharpe ratio as loss function
e5170582 Adapt tests to new loss-function method
710443d2 Add documentation for custom hyperopt
2a20423b Allow loading custom hyperopt loss functions
8096a1fb minor: configuration cleanup
2fedae60 Move unnecessary things out of generate_optimizer
b1b4048f Add test for hyperopt
107f00ff Add hyperopt option to clean temporary pickle files
a3b7e1f7 Update wording in docs
bbab5fef Remove wrong import in legacy startup sript
00770315 do not export ARGS_* from configuration
9cae2900 get rid of patched_configuration_open() in tests
876cae28 docs adjusted to current default values; more detailed description of --eps and --dmmp added
e955b1ae Use log_has_re instead of plain regex filters for log messages
dadf8adb Replace filter usage
4238ee09 Cleanup some code
65f77306 using logger.debug, info was too noisy
efbc7ccc enable --dmmp for hyperopt
a8f3f2bc Extend test to cover market orders with price too
25822d17 Add empty options dict to all tests using create_order
9887cb99 Check if Price is needed for market orders
2e1269c4 Revert comment for Exception that's not changed
b499e745 minor improvements to resolvers
bbfbd87a move create_datadir() to separate file
7e103e34 flake happy
94e6fb89 tests happy
1bdffcc7 make configuration a sep. module, including arguments
e993e010 Fix #2013
6a431280 Fix non-rendering docs
c474e2ac fix #2008
322227bf fix #2005
27cb1a41 Add FAQ section explaining ""module not found"" errors
c4fb0fd6 Don't run the bot with python3 freqtrade
15d2cbd6 loggers: wording improved
f7a2428d max_open_trades may be -1
6c2415d3 Rename parameters from pair to curr
84d38689 rename loglevel --> verbosity, because it's not logging level
f89b2a18 fix loglevel in conftest -- it's actually the verbosity level
8114d790 commit forgotten loggers.py
082065cd minor cosmetics in arguments.py
a65b5f8e make some more arguments positive integers
d8f133aa remove duplicated loglevel option
8e272e57 minor: cosmetics in arguments.py
ce2a5b28 move loggers setup out of configuration
17800c8c Remove folder references (it's directory!)
5c6039fd Fix #1997 - rename folder to dir
40fe2d2c Test get_valid_pair_combination
1bcf2737 Add tests for new behaviour
fcdbe846 Fix #1981 - Detect reverted currency pairs
b80cef96 fix validate_timeframes(); test added
b3644f7f Fix typo in docstring
d41b8cc9 catch ccxt.BaseError
91fb9d01 fix #1995
85ac217a Remove duplicate keyword from arguments
c91add20 Update mypy from 0.710 to 0.711
1e4f459a Update pytest from 4.6.3 to 5.0.0
06ad04e5 Update ccxt from 1.18.805 to 1.18.860
0d601fd1 Remove logger message
01904d3c Test not having timeframe available on exchange object
0c7d14fe Check if timeframes is available and fail gracefully otherwise
59818af6 Remove common_datearray function
44e05009 Test init_plotscript
db59d39e Don't use class for plotting
587d71ef Test generate_profit_plot
c7a4a16e Create generate_plot_graph
0b517584 Use add_profit in script
5a11ffca Add test for add_profit
0a184d38 create add_profit function
6b387d32 extract combine_tickers to btanalysis
348513c1 Improve formatting of plotting.py
0d5e94b1 Rename generate_row to add_indicators
88545d88 Use FTPlots class in plot-scripts
42ea0a19 create FTPlots class to combine duplicate script code
c87d2704 align plot_profit to plot_dataframe
700bab72 Rename generate_plot_file to store_plot_file
c3db4ebb Revise plot_profit to use pandas functions where possible
8aa327cb Add load_trades abstraction (to load trades from either DB or file)
4218d569 Only read trades once
e50eee59 Seperate plot-name generation and plotting
45068329 Update docstring
79b4e2dc Rename generate_graph to generate_candlestick_graph
edd3fc88 Add test for create_cum_profit
e8796e00 adding bitstamp to list of bad exchanges.
044be3b9 Add create_cum_profit column
0436811c Use mode OTHER, nto backtesting
4f5e212f fix #1978
21bf01a2 partial freqtradebot cleanup
16a9e6b7 Improve install documentation
e5a8030d comment added
6643b83a Update tests to test both balance versions
98681b78 Show ifferent message for balance in dry-run
f8dd0b0c Use parenteses instead of \ seperators
f04d4988 Add test to verify behaviour if currency in fee-dict is None
3043a8d9 Be more explicit about what's missing
05d93cda fix #1963
6fc6eaf7 minor: couple of typos fixed
1d5c3f34 Update qtpylib from source
353437bb 07 is July!!
8e92fc62 Use correct new versioning now
c1065346 Improve developer-document
b92c6cdf Cleanup arguments and test_arguments
ca509390 Use build_args for plot script
ba7a0dde Use build_args for download script
27798c16 Remove main_options
ee312ac2 Use build_args for plot_dataframe script
7e82be53 Use build_args to build subcomand arguments
7017e46b Add dict with all possible cli arguments
7166674d Move check_int_positive out of arguments class
e1daf027 UPdate version for develop
1b156e0f Don't install python to a system, it's error-prone and may not work
c1ee5d69 Try to get travis cache to work correctly
7fbdf36c avoid code duplication while selecting min_roi entries
144e053a fix for #1948
a8efb1e1 test for #1948 added
```",91629816
593,False,False,2019-06-26T04:05:43Z,2019-06-26T04:19:01Z,"This release will change the version-number from ""random"" numbers to calendar-based versioning, so it's immediately obvious how old a version is.

## some important changes

* many usefull improvements to hyperopt 
* Add REST API server/client to control the bot
* tons of bugfixes and small improvements

### Full Changelog

```
e83f8941 Fix documentation grammar
d6dbb21a Update mypy from 0.701 to 0.710
90ada064 Update wrapt from 1.11.1 to 1.11.2
e8429bd2 Update sqlalchemy from 1.3.4 to 1.3.5
5a30f046 Update ccxt from 1.18.725 to 1.18.805
11d39bb0 Improve wording
116d8e85 typos in docstrings fixed
5b84cb39 typo fixed
7f018839 diverse cosmetics to options help strings
3716c04e fix help string for --db-url
451d4a40 fix help strings shown to the user
4cbcb5f3 Move .title to ExchangeResolver (it does not make sense to do this over and over again)
026784ef remove get_tickers_data from plot_dataframe
cc56d0e0 Remove unneeded initialization
559d5ebd Remove combined load-method since it's confusing
3e61ada3 Be explicit in what is used, db or trades
8758218b Add data-analysis documentation
de38aea1 Fix sequence of loading trades
db17b20e Don't require pairs but fall back to pair_whitelist instead
a581ca66 Adapt test after merging develop
7a0d8666 Mypy type errors
1a27ae8a Add tests to verify that ticker_interval is there
f907a487 make ticker_interval available to hyperopt functions
89ba649d Test handling errors while trailing stop loss
63640518 Gracefully handle errosr when cancelling stoploss orders
a8dcfc05 Add test to verify InvalidOrder is handled correctly
dd379c41 Cancelling stoploss order should not kill the bot
911e71cd remove redundant test-functions
0866b5f2 allow reading config from stdin
860e0563 --datadir is now handled in arguments.common_options()
c6fed4e4 make flake happy
8c40a406 arguments cleanup
6f950bbd json validator cosmetics
0e7ea1da Update coveralls from 1.8.0 to 1.8.1
6973087d Update pytest from 4.6.2 to 4.6.3
25755f6a Update ccxt from 1.18.667 to 1.18.725
ba4890d3 Fix tests on windows
7cd36239 UPdate documentation with new value
06afb3f1 Don't use ""limit"" for sell-orders either
55712292 Add order_type to sell-notification
475e76b2 Add order_type to buy_notification
d217f32b minor: fix typo in freqtradebot.py
195bf5a4 tests adjusted
813c008a setup_configuration() cleanup
765eff23 Fix typo
0eb109f8 Improve some tests
fc3e3c46 File existence is checked in load_backtest_data
4b7dfc64 Add test for generate_plot_file
488bb971 Get rid of global conf object
907c2f1e Copy plot options to config
3f04930f Require pairs argument
0300128c Move plot-options to arguments.py
bf2c0390 Adjust some imports
1cd84157 Move extract_trades_of_period to btanlaysis
1c53aa56 Add tests for load_trades
c7643e14 Move load_trades to bt_anlaysis
9f5ca82f Add more tests
6db4e05a Improve plotting tests
2891d7cc Add initial plotting test
cae21854 Move generate_plot to plotting.py
63471619 don't use print in plot_dataframe
b1a01345 Add better hover tip
e0a1e541 sanity checks before plotting, cleanup
6df0b39f Cleanup plot_dataframe a bit
68af6d41 Move plot-functions to plotting module
583d70ec add plot module proto
9035e0b6 Update function due to merge of #1926
114de8a0 Remove unused imports
442339cd Add tests for utils.py
e6cab6d7 Move get_args from multiple locations to conftest
472e7f80 Fix Line too long error
4a916125 Tests need to pass pair to parse_ticker_dataframe
89ff614e Add pair as parameter, and warn when fillup was necessary
55079831 Don't explicitly validate backtest data (it's done while loading now).
d047a9d8 Adapt tests for new validate_backtest signature
cd4cf215 Convert validate_backtest_data to take dataframe directly
01b5ece6 Log missing data filllup if necessary
36dd061b Update slack link since the old one expired
a77d75eb Check log output since that's whats shown to users
707118a6 Test stake changed to unlimited
ad9dc349 edge cli should override stake_amount
09cd7db9 make flake happy
1af98871 add --one-column as an alias option
cedd3845 remove configuration from list-exchanges
1afe6c14 Don't run validation per strategy, it's only eneded once
941fb4eb tests added
ee113ab8 log messages aligned
04ea66c9 fix handling timeframes
9657b1a1 explict parse to string for ticker-interval
e08fda07 Fix bug with timeframe handling
550fbad5 Add test-cases with trailing_stop_offsets
160894c0 Calculate profit_high to make sure stoploss_positive_offset is correct
578180f4 Add test for sell-signal sell
b64b6a25 Support trailing_stop_positive options in BTContainer
a4d84242 trailing_stop_positive should only be set when needed, and none/undefined otherwise
a65c89f0 test adjusted
0cc2210f wording fixed
8df40a6f make flake happy
9c649658 list-exchanges subcommand added
dc7f8837 no need to duplicate this long error message
db6ccef6 return back check in init_ccxt()
676e7300 enhance check_exchange
7322a34f fix metadata in tests
4801af4c debug logging for IStrategy.advise_*() added
d55f2be9 make flake happy
cd60d6d9 make --days positive int only
dc0326db fix handling --exchange
6636f0c7 Update pytest from 4.6.1 to 4.6.2
1a41d4e6 Update python-rapidjson from 0.7.1 to 0.7.2
9961c0e1 Update arrow from 0.14.1 to 0.14.2
5c5b0eff Update ccxt from 1.18.615 to 1.18.667
4dc3a0ca Small cleanup to reduce dict lookups during backtesting/hyperopt
90b0f1da minor optimize cleanup
792390e8 Add missing parameter for exchange-verify snippet
9f2e0b11 Parametrize ohlcv_candle_limit (per call)
33805438 Add test for drop_incomplete option
ce317b62 Add docstrings to load_pair_history
6ad94684 Add WIP document of steps to test a new exchange
fdbbefdd Make drop_incomplete optional
3fe5388d Document _ft_has_params override
7108a2e5 Add deep_merge for _ft_has and test
9c497bf1 Improve docstring for deep_merge_dicts
d7c63347 Use kwarg for parse_ticker_dataframe
adc12ed0 Fix new test after develop merge
5273540a Fix test failure (double-trailing newlines are removed now)
f9fe2663 check for runmode before retrieving the orderbook
a9ed5da3 added doc for DataProvider.orderbook()
2e6ded06 removed redundant print()
71342739 Update plotly from 3.9.0 to 3.10.0
f75e97e9 Update coveralls from 1.7.0 to 1.8.0
a132517f Update pytest from 4.5.0 to 4.6.1
3c1ae07f Update flask from 1.0.2 to 1.0.3
4ef8a749 Update arrow from 0.13.2 to 0.14.1
51113dae Update sqlalchemy from 1.3.3 to 1.3.4
c04a8a10 Update ccxt from 1.18.578 to 1.18.615
bd8edd61 Update numpy from 1.16.3 to 1.16.4
107c3beb Fix test-failure introduced in #1891
36dae7cc trailing stoploss reason fixed
c68fe7a6 example how to use best bid and ask in strategy
19942646 implemented DataProvider.orderbook()
338f2a23 Use kwarg to call persistence.init()
1add4326 docs adjusted
e4e22167 make mypy happy
6b144150 fix handling of SystemExit
ef15f2bd log messages slightly improved
39932627 typo in log message fixed
11f535e7 change prints to logging
f463817c change metavar for --pairs-file
b6e8fecb Change persistence.init parameter
d6cf3144 Don't default to false for init()
fb88953b refactoring download_backtest_data.py
15984b5c Adjust some tests - implement new ""live"" method to plot_script
c2f6897d Move download of live data to load_data
d7bebc43 persistence.init does not need the config dict
7b367818 Remove duplicate code
9e4dd6f3 Read bin/freqtrade with deprecation warning
22144d89 Fix mypy error
c5ef700e Use autogenerated entrypoint
17d614c6 Remove binary script - allow None arguemnts
7406edfd Move set_loggers to main()
ea83b2b1 legacy code removed.
db2e6f2d tests adjusted
58477dcd cleanup: return after cmd removed in main()
536c8fa4 move python version check to the top
55bdd264 Edgecli -> Edge for Runmode and start_edge()
89f44c10 Fix grammar error
8b028068 Fix typos, add section for custom indicators
f7766d30 Improve plotting documentation
09e037c9 Update scikit-learn from 0.21.1 to 0.21.2
bfb6dc4a Update cachetools from 3.1.0 to 3.1.1
196a1bcc Update ccxt from 1.18.551 to 1.18.578
19886626 Update plot-script to work with exported trades
dab4307e Add secure way to genreate password, warn if no password is defined
e335e6c4 Fix some wordings
0e228acb minor: exchange debug logging humanized
201e02e7 Add test for Timeout - move tests to test_history
71447e55 Update missing import
8ad30e26 Adapt tests
104f1212 Move edge_cli_start to optimize
65a4862d Adapt tests to load start_* methods from optimize
236c392d Don't load hyperopts / optimize dependency tree if that module is not used
b38c4314 Adjust imports to new location
9225cdea Move validate_backtest_data and get_timeframe to histoyr
26a8cdcc Move telegram-setup to telegram page
3e0a71f6 Add docker install script to mkdocs index
4394701d Seperate docker-documentation
b6484cb2 Replace technical link
90ece09e require username/password for API server
febcc3dd Adapt tests and rest_client to basic_auth
2da71451 Switch auth to real basic auth
5bbd3c61 Add documentation
1fab884a use Authorization for client
04c35b46 Add authorization to tests
7e952b02 Add basic auth to rest-api
469c0b6a Adjust check_int_positive tests
c3e93e75 fix reduce() TypeError in hyperopts
7bbe8b24 Add a few more testcases for check_int_positive
7b968a24 logger.exception cleanup
253025c0 Add tests for check_int_positive
7b074765 Improve edge tests - cleanup test file
6e1da139 Log message changed
406e266b typo in comment fixed
2c9a519c edge: handle properly the 'No trades' case
98eeec31 renaming of make_testdata_path reverted
7cb75375 tests adjusted
11dce912 data/history minor cleanup
51aa469f Cleanups
58ced364 Add documentation for stoploss updates
11fd8a59 cleanup stoploss documentations
a39cdd3b Exclude Edge from startup-stoploss calc
53af8f33 Deep-copy default_conf for edge config
9f541814 Add test for stoploss_reinit
6a5daab5 add logic for stoploss reinitialization after startup
349c0619 Move startup to freqtradebot
96a34f75 Adapt test to new output from arrow
04e13eed Update filelock from 3.0.10 to 3.0.12
5b24ac78 Update scikit-learn from 0.21.0 to 0.21.1
34c7ac89 Update requests from 2.21.0 to 2.22.0
3404bb18 Update arrow from 0.13.1 to 0.13.2
de95e508 Update ccxt from 1.18.523 to 1.18.551
703fdb2b Update scipy from 1.2.1 to 1.3.0
e7b9bc68 minor: remove noisy useless debug message
fc96da86 Fix grammar messup
f93e6ad0 Rename strategy customization file
8d8b4a69 Clearly warn about using future data during strategy development
2cf07e21 rename exception handlers
e6ae890d small adjustments after first feedback
79cac36b Reference reest api in main documentation page
9385a27f Sort imports
f2e4689d Cleanup script
70fabebc Document rest api
c272e1cc Add default rest config
fd5012c0 Add test for api cleanup
bfc57a6f Adapt tests to new method of starting flask
540d4bef gracefully shutdown flask
5149ff7b Move api to /api/v1
01cd68a5 Test forcesell
b700c64d Test forcebuy - cleanup some tests
350c9037 Test falsk crash
39afe4c7 Test flask app .run()
b9435e3c Add more tests
a7329e5c Test api-server start from manager
a146c5bf Improve jsonification
557f8495 Improve 404 handling
03dc6d92 Remove hello()
3c468701 Test /count for api-server
88dd18e0 Move patch_signal to conftest
6b426e78 Tests for balance
70a3c2c6 Actions - Add tests
6ea08958 Fix docstrings
b1a14401 Add some initial tests for apiserver
e0486ea6 Make app a instance object
0ac434da Add forcebuy jsonification
6e4b1596 Add forcebuy and forcesell
bc4342b2 small cleanup
cb271f51 Add client actions for actions
ea8b8eec Add edge handler
b1964851 Add performance handlers
393e4ac9 Sort methods
0163edc8 rest-client more methods
3efdd55f Support blacklist adding
122cf4c8 Default add to None for blacklist rpc calls
938d7275 implement some methods
8f9b9d31 Reorder arguments
d1fffab2 Rename internal methods to _
ebebf947 Change commands to post
b0ac98a7 Clean up rest client
a132d6e1 Refactor client into class
a1043121 Add blacklist handler
5ba189ff Add more commands to rest client, fix bug in config handling
d2c28112 Move rest-client to scripts
99875afc Add default argument
ae8660fe Extract exception handling to decorator
01c93a2e Load rest-client config from file
d8549fe0 add balance handler
a12e0934 Api server - custom json encoder
2f808843 All handlers should be private
3cf6c6ee Implement a few more methods
8993882d Sort imports
c6c2893e Improve rest-client interface
96a260b0 rest_dump
6bb2fad9 Reorder some things
9d95ae93 Add flask to dependencies
68743012 Patch api server for tests
ef2950bc Load api-server in rpc_manager
6f67ea44 Enable config-check for rest server
26c42bd5 Add apiserver tests
c3c745ca Get new files from old branch
e2b83624 data/history cleanup
2741c5c3 inherit freqtrade exceptions from Exception i.o. BaseException
8b95e124 log message adjusted in backtesting and hyperopt
90a52e46 tests adjusted; new test_start_no_data() added for hyperopt
5677c488 minor: add ticker data validation; log backtesting interval
1cd98665 Update pyup only weekly
600f660f Update ccxt from 1.18.522 to 1.18.523
003461ec tests adjusted
00b4501c avg profit and total profit corrected (to be %, not ratio); comments cleaned up a bit; typo in the log msg fixed
11dca0bd Update pytest from 4.4.2 to 4.5.0
dccd6b4a Update ccxt from 1.18.519 to 1.18.522
46b1ecc7 Fix #1840 - Support balances other than USDT
652914a6 Update python-rapidjson from 0.7.0 to 0.7.1
22f902f0 Update ccxt from 1.18.516 to 1.18.519
131b2321 Add sample for order_types in config (slightly different syntax)
52da64b6 Align configuration files
75306b7a tests adjusted
ab23db2f Update scikit-learn from 0.20.3 to 0.21.0
349d5563 Update ccxt from 1.18.514 to 1.18.516
0f43e0bb minor hyperopt output improvements
00383b94 Update pytest from 4.4.1 to 4.4.2
f36ccdd9 Update ccxt from 1.18.512 to 1.18.514
909df0d7 Improve doc wording
0410654c Add printing dataframe to documentation
45e58677 heikinashi loop optimized; reset_index moved to tests
1ccc25b4 Fix test-data indexing
cf1ad3fd Update ccxt from 1.18.509 to 1.18.512
2554ebf2 fixed: heikinashi worked in backtesting, but failed in tests with testing arrays
d642e03c heikinashi performance problem resolved
db0644ed Update plotly from 3.8.1 to 3.9.0
a8c4bed4 Update ccxt from 1.18.508 to 1.18.509
6467d3b5 check python version
c8b8806f Update ccxt from 1.18.507 to 1.18.508
1a677c74 Add explicit test for to_json
2b78f73f Adapt tests to to_json method
31d27108 Move json to persistence
2200a022 fixed heikinashi
1e056ee4 Move trade jsonification to trade class
6c03246e Update ccxt from 1.18.502 to 1.18.507
f506644a Improve docker documentation
66c2bdd6 flake happy
1be4c594 qtpylib/indicators.py updated
32e4b0b1 Update pytest-cov from 2.6.1 to 2.7.1
dad55fe7 Update ccxt from 1.18.500 to 1.18.502
6c2301ec Update ccxt from 1.18.497 to 1.18.500
46214ce7 Fix typo after feedback
26969998 test adjusted
4cecf046 Update ccxt from 1.18.496 to 1.18.497
e7b81e4d hyperopt --min-trades parameter
b24bbb2c Improve test for reload_conf with a ""realistic"" workflow
5665426e better type hints in worker
61506797 Update ccxt from 1.18.493 to 1.18.496
537c0350 fix #1810
91642b2b Add tsts for forcesell-answers
f71eda1c Have forcesell return a result
59bd081e Update ccxt from 1.18.492 to 1.18.493
21b31f11 Update ccxt from 1.18.491 to 1.18.492
40c02073 revert erroneous refactor
dc12cacd Rename requirements-pi to requirements.common
99b08fbd Remove unused Hyperopt test lines
bf2a39b7 Fix add requirements-pi.txt in dockerfile earlier
eaf5547b Update ccxt from 1.18.489 to 1.18.491
ea44bbff prevent hyperopt from running simultaneously
45ecbc91 Use BaseError, not NetworkError in exception handler
22eb6cb5 Fix typo in args_to_config
65dcb6ac Catch errors on reload_markets
b4630c40 Add typehints
86313b33 Combine optimize configurations, eliminate duplicates
87329c68 Change ticker_interval too
ca3b8ef2 Remove duplicate argument
a0413b5d Only log one message per call
d6276a15 Convert all optimize to args_to_config
39f60c47 Add some more arguments to args_to_config
17cf9d33 add _args_to_conig
59f905a5 Update ccxt from 1.18.486 to 1.18.489
06057129 Update ccxt from 1.18.486 to 1.18.489
30888cf5 have pyup ignore outdated dependency
eb89b65b Downgrade urllib3, cleanup requirements files
a8e787fd test adjusted
ad692c18 Improve comment
a92d5f35 Parametrize default-param tests
95ebd077 an attempt to fix mocking
6a0f527e merge --job-workers and commit printing debug log messages with the opt state
65a82d7e Add some missing default parameters
6d2a1cfb remove full-config in tests and load full_config file
a429f83f flake happy; check_positive() renamed
2f0ad0d2 test adjusted
cc9f899c removed explicit dependency on multiprocessing module
a022b1a6 --random-state for optimzer to get reproducible results added
8568459c Update urllib3 from 1.24.2 to 1.25
9a2eb46c Update urllib3 from 1.24.2 to 1.25
48e2bd51 Update ccxt from 1.18.485 to 1.18.486
a2a70bd6 Update ccxt from 1.18.485 to 1.18.486
3e3fce5f print optimizer state in debug log messages
7c8e26c7 -j/--job-workers option added for controlling the number of joblib parallel worker processes used in hyperopt
8dad8f25 docs refreshed
ad85ac3d make --refresh-pairs-cached common option for optimization; added support for it into hyperopt
3da1b24b Update numpy from 1.16.2 to 1.16.3
42d2b24d Update ccxt from 1.18.483 to 1.18.485
8685fcd5 Update ccxt from 1.18.483 to 1.18.485
676cd6ff Add assert to make sure trade was closed
a9de2f80 Add tests to update wallets after closing a limit-sell
6b87d94b --print-all command line option added for hyperopt
706b30f4 Fix ""if"" condition with ""if not"" for check if trade is open.
3bcc6033 Added command for Wallets Sync after a trade is closed in ""update_trade"" method in ""freqtradebot"" class, this will help the Wallets get updated after a trade is sold and closed, specifically LIMIT_SELL trades, then bot can work properly with new trades.
abc4840d Update ccxt from 1.18.481 to 1.18.483
a118003d Update ccxt from 1.18.481 to 1.18.483
395aed5f Update plotly from 3.8.0 to 3.8.1
278e5f4c Update ccxt from 1.18.480 to 1.18.481
7fa50465 Update ccxt from 1.18.480 to 1.18.481
9b8067cb Improve developer documentation
8e8ec2fb version to 0.18.5-dev
5a65b6ca Update ccxt from 1.18.475 to 1.18.480
ed6a92cd Update ccxt from 1.18.475 to 1.18.480
72657758 Restore get_market_pairs from develop
d82fb572 Update pytest-mock from 1.10.3 to 1.10.4
5c10e9a7 Update urllib3 from 1.24.1 to 1.24.2
578ad903 Update urllib3 from 1.24.1 to 1.24.2
789b4458 Update ccxt from 1.18.472 to 1.18.475
c299d924 Update ccxt from 1.18.472 to 1.18.475
c3a9db64 change comments to docstrings
8bdbfbf1 tests for options added
f03acce8 typing of return value corrected
9fbe573c limit usage of ccxt to freqtrade/exchange only
3e4dd501 docs adjusted
cb2f422e make `name` option required again
4559a381 PoC: use defaults in json schema for some exchange options
91dc2b96 support for defaults in json.schema
```",91629816
594,False,False,2019-04-19T13:57:07Z,2019-04-20T10:45:30Z,"Change log:
```
8abdbc41 Update mypy from 0.700 to 0.701
7f229bbf Update ccxt from 1.18.470 to 1.18.472
d4947ba0 Update ccxt from 1.18.470 to 1.18.472
2cee7161 Gracefully handle pickle-errors when @staticmethod is used
a7383ad3 enable ratelimit in download-backtest-data too
52cc2d22 improve documentation for exchange configuration
5db10bdc Add rateLimit parameters for different exchanges
43119efa Remove ccxt_rate_limit completely (was deprecated)
b2a623ee Update plotly from 3.7.1 to 3.8.0
c40406d2 Update pytest from 4.4.0 to 4.4.1
87ff5ad1 Update sqlalchemy from 1.3.2 to 1.3.3
aa63f2be Update sqlalchemy from 1.3.2 to 1.3.3
5cb90bdf Update ccxt from 1.18.468 to 1.18.470
4f557af6 Update ccxt from 1.18.468 to 1.18.470
7efab85b Update sqlalchemy from 1.3.1 to 1.3.2
0ece1688 Update ccxt from 1.18.353 to 1.18.468
6be4c6af Update ccxt from 1.18.466 to 1.18.468
4f6df731 Update documentation for Raspberry install since we now have a rpi-requirements file
5e0e8de4 Version bump to 3.7.3 in docker file
37b1389f Fix flake8
2f79cf13 Update ccxt from 1.18.460 to 1.18.466
9f828224 Update ccxt from 1.18.458 to 1.18.460
016e8fde wrong rendering at freqtrade.io fixed; other cosmetics in docs/
d87db70e Fix missing column header
c3b9d699 Add docstring explaining the source of the script
12ca103f Update ccxt from 1.18.456 to 1.18.458
c2ca899c fixed printed message; cosmetic changes in the code in scripts/download_backtest_data.py
902ffa68 impoved argument and exception handling in scripts/get_market_pairs.py
f736646a Update ccxt from 1.18.445 to 1.18.456
e75cdd4c Rename variable, add more tests
71e671f0 Update ccxt from 1.18.442 to 1.18.445
ff6967de Add test for too large balance
5c417095 Don't send too large messages
ffdc33d9 Update ccxt from 1.18.437 to 1.18.442
ebf11263 cosmetic: rename interval, tick_interval, etc --> ticker_interval
3a81eb7d Update ccxt from 1.18.435 to 1.18.437
3ad4d937 Correct Dockerfile.pi file to use requirements-pi.txt
c35e5ca7 Add back requirements-pi.txt file and put it into .pyup.yml
e7c8e62d Remove requirements-pi.txt, change Dockerfile.pi to utilize the requirements.txt instead
d6d16b46 docstrings improved
dc1968b9 docstrings added
d294cab9 adding order id to invalidorder exception message
f1391781 rpc_counts should be in .rpc
4eb0ed9f Add Dockerfile.pi for building docker image for raspberry pi
7a598f32 Move rpc-count calculation to _rpc class
481df98f Update ccxt from 1.18.432 to 1.18.435
41ff2a92 TemporaryError removed
acb99a03 adding stoploss on exchange manual cancel note
a505826e flake8
54d068de missing test added
25d8e93a remove unnecessary comment
9712fb2d removing unnecessary comment
2b49a11b returning InvalidOrder exception for get_order
4c5432be Added command line options in backtesting to override max_open_trades and stake_amount
13e8f25c Improve docs layout
ac1964ed Remove unnecessary comment
dbb1bbf1 Fix webhook documentation
7486cb7c fix admonitions
e3cdc0a0 typos and visual fixes
6913bce6 flake8, import in script/plot_profit.py
7010c835 Improve commentign
2aa1b43f get rid of TICKER_INTERVAL_MINUTES dict, use ccxt's parse_timeframe() instead
32cbb714 Improve commenting on backtsting and backtest_multi_tst
7f4fd616 test for canceled SL on exchange added
647534a4 flake8
31fa8573 typo
a363d443 stoploss on exchange canceled handled
ebeaf64f Update mypy from 0.670 to 0.700
6afe232c Update ccxt from 1.18.430 to 1.18.432
0cdbe714 stake amount not amount
65350ad5 final flake happy
5488c66f flake8
9ee1dd99 tests fixed
0307ba78 Remove one branch - python does lazy evaluation
1a5b0969 Fix tests (both tests where testing the same thing)
3c399fbe Improve whitelist wordings
d5498c87 adding %
a3fe5f57 adding stake amount to telegram message
92dc3c89 Update sqlalchemy from 1.3.1 to 1.3.2
eb610441 Update ccxt from 1.18.425 to 1.18.430
67eeb145 flake8
a3835b12 flake8
5f38d5ee removing % sign as it is already a pct
53eaf859 filtering edge pairs for RPC
d54acca5 move tests back to original codebase to minimize changes
b0ddb33a tests cleanup: Worker --> FreqtradeBot where the Worker object is not really needed
62141d3d test cloned, separate tests for worker and freqtrade states
7b39a308 formatting and readability
a6daf0d9 formatting pct
54f11ad6 enriching TSL log
40df0dcf tests fixed
99d25642 adding InvalidOrder to exchange
389feda6 Invalid order exception added
b9b76977 Update ccxt from 1.18.420 to 1.18.425
0cfdce0d Update function name from update_open_order to update_trade_state
ab0e657d Check for empty whitelist moved to _process()
34b40500 Check whitelist fetched from config for emptiness
a3b01355 documentation added for telegram
8546db9d wording in the log message
ab579587 adding percentage to telegram status messages
061f91ba Update pytest from 4.3.1 to 4.4.0
97b31352 Update ccxt from 1.18.418 to 1.18.420
77d2479c tests adjusted
f0b2798c fix #1704
7251e5bd bot state moved back to freqtradebot from worker
7be90f71 Add test as called from execute_buy
19d3a0cb Update comment
0ddafeea Split test for open_orders from maybe_sell
b2ad402d Split tests for update-open_order
e46dac3f Test stoploss does not raise dependencyexception
5c8fbe2c Handle exception for stoploss independently of sell order
f11a1b01 Call update_open_order inline with buy
8f4cca47 Refactor update_open_order into it's own function
4fa73611 Don't set order_id to none here - it's used in ""update_open_order"".
c28a0374 Update pytest-mock from 1.10.2 to 1.10.3
93229fc5 Update ccxt from 1.18.415 to 1.18.418
707a5fca ifix typos in full_json_example
9b38c045 negating SL pct and adding tests
06144a1f Wording in a comment
1a61bf7b sort imports
87a296f7 No need to call patch_coinmarketcap each tim
e98c0621 We don't need to call patch_coinmarketcap each time.
40c0b4ef Autopatch coinmarketcap
44142706 Update ccxt from 1.18.412 to 1.18.415
208832e8 flake8, mypy resolved
12066411 Update docs with logfile methods
e5008fbf Add test for logfile attribute
d4ffdaff Correctly add types
bb5a310a Add --logfile argument
82b344db Update ccxt from 1.18.407 to 1.18.412
f2599ffe pct default to None
50fc6325 added SL pct to DB
a87fc5f8 Fix tests - freqtrade should not be patched in this case
2f3f5f19 sl percentage removed form rpc test
e11eb477 stoploss precentage in telegram msg removed
daeb172b Update ccxt from 1.18.406 to 1.18.407
0e5b0ebd adding SL and SL percentage to telegram msg
941921dd initial SL and SL added to RPC
0ca3a38b moved date to top and show open order only if it is not none
1678a039 removing close profit is trade is open
e5406ed3 typo in docs and comments
4d9ca71c shifting edge help message a line lower
6045f07a telegram message concatenation refactored
9b22d5ca Fix typo, add test for validate_order_tif
753b03d5 rolback on removing MD whitespaces
1e37d8cc flake8
4038cdf7 ""Edge"" test for rpc telegram
0687051f Update test_rpc.py
8641da13 added RPC tests in case of edge enabled/disabled
cc32566c Update ccxt from 1.18.400 to 1.18.406
955e2d28 Update test_rpc_telegram.py
4e57969e documentation added
3bdc7b9a add missed ""check"" in docs
b2c2b424 Removed unwanted comment
f5744cc9 fix in the tests
1f50bc79 Update ccxt from 1.18.398 to 1.18.400
c6d2c1e5 rest of telegram tests adjusted
8aee009a test _reconfigure() adjusted
5ccd6181 tests adjusted
5161e1ab Allow to pass config into worker, as it's used in the tests
e15f2ef1 add order_time_in_force in _ft_has and revert binance
8dea640e remove exchange urls
4005b8d1 remove the if condition for binance
85ac99ae move exchange urls to constants
e085fd9e Disable dataprovider from hyperopt.
f26ed1c8 Check if added pair has correct stake-currency
4cf72820 Update dataprovider docs
0ae81d41 Provide dataprovider access during backtesting
226fc3d9 Check that dataprovider is part of strategy
bd29b7d0 Test that dataprovider is loaded to strategy
c8b0c9af Worker moved to new worker.py
fe9322ec Update pytest-mock from 1.10.1 to 1.10.2
904b3008 Update ccxt from 1.18.395 to 1.18.398
66f1e0f4 help added
fd727851 using items()
a8be277c cached pairs iteration fixed + help added
1dfbf6ee darfting edge rpc messages
29b9bb96 Fix test to support adding things to pairlist
14167f82 Fix typehints
49559f1a Improve documentation and help message
042354d0 Test blacklist-adding
f0d3901b Add blacklist-pair to documentation
9d6f629f Support adding pairs to blacklist
7b99d5eb Add blacklist and whitelist commands to telegram docs
8b2174d2 Add tests for /blacklist handler
ffdca7ee Add blacklist to default_config
684727b3 Add black blacklist handler (ro)
3a8b69d6 also support dry_run
1bba9fcc Update documentation to use freqtrade, not freqtrade/main.py
f7fc9adc Run travis with freqtrade, not main.py
e60d1788 Add new options to docu
e644493e Update ccxt from 1.18.387 to 1.18.395
06f4e627 Add stake_currency to strategy, fix  documentation typo
0dc96210 Fix formatting of boxes 2
a95f30ce Fix custom boxes on documentation
83a2427a Fix mypy in scripts
184b13f2 Flake8 for scripts
9a632d9b Formatting
c404e9ff Simplify trailing_stop logic
b1fe8c53 Simplify stoploss_reached
7307084d Move stoploss-adjustment to the top
40899d08 Fix failing test (all timezones are in UTC, so we should not convert to None)
00e6749d Refactor backtest() to be a bit more concise
05466d31 Modify test to check for this condition
34ff946f Update ccxt from 1.18.386 to 1.18.387
158cb307 further refactoring of FreqtradeBot.process()
e35daf95 minor cleanup
b4488902 test_main.py adjusted (only beginning)
be6836b0 resolve python module circular dependency
60afba55 move worker stuff to main.py
89145a77 Update ccxt from 1.18.385 to 1.18.386
7fdb0990 Reformat log statement
00821036 docs for dry_run_wallet
6b89e86a Removed Timestamp cast
0eff324c Use dedicated index for every pair
cc369f41 Update coveralls from 1.6.0 to 1.7.0
6c889895 Update ccxt from 1.18.376 to 1.18.385
2b09e3ca Update plotly from 3.7.0 to 3.7.1
9a610673 Update ccxt from 1.18.372 to 1.18.376
50ea4c39 Update ccxt from 1.18.368 to 1.18.372
8d173efe reword stopbuy message
aa698a84 rename /stopbuy message
37e6b262 Update docs to include /stopbuy
9373d0c9 Add tests for /stopbuy
a467d768 Add /stopbuy command to telegram
93739960 fix flake8
c2076af4 update tests
4de4a70b update log messages
8afce7e6 Add testcase for Testcase 2
2bf7f2fe Remove duplicate backtest-result-analysi documentation
83864964 remove tests that are no longer applicable
7f9c76a6 move stake check to the same condition as the other checks
d4d37667 use pairname for stake cur comparison
d4543be8 edit comment
e38a3051 update docstring
c907e80c make sure no dups
a241e950 prune validate_pairs
39232cbc loop over whitelist only instead of all markets
a7b60f67 update trailing_stop with high in case of backtesting
05ab1c2e Fix some comments
8c7e8255 Add detailed test for trailing stop
f0e5113a Use Magicmock instead of lambda for mocking
a830bee9 Enable trailing_stop for BTContainer tests
190ecb7a Update ccxt from 1.18.367 to 1.18.368
a77d5135 Fix backteest detail numbering ...
7b99daeb Update docstring for adjust_stoploss
2d4a2fd1 Use oppen_rate instead of artificial defaults
a0e6cd93 Use bids, not asks for sell-rate detection
fc360608 Rename function to adjust_min_max
01733c94 Split up tests for adjust_stoploss and adjust_highlow
68a9b14e Min-rate should not default to 0
738ed932 call new function
7166a474 Add min_rate - always update min/max rates
e632539b Add 15min to documentation, fix link to ""parameters in THE strategy""
e7f6df46 Add missing bt file
a123246a Add test for load_backtest_data
ddb9933c Remove duplicate-check from test - it's in btanalysis
9f7f089d adjust plot_dataframe to use btanalysis
e1f48c2b Add btanalysis file
d7017ce1 Document backtest-result loading
29aa1598 Add test for get_sell_rate
6bfc3730 refactor getting sell/current rate for telegram and selling
d596a877 Update docs to link to ocnfiguration piece necessary
b9b15e5f Align help message for forcebuy
a233a8cc Be explicit in the documentation
d42ebab5 Rename function and add test
44acf2f4 Catch syntaxerror on import
6db6c3b2 Update ccxt from 1.18.362 to 1.18.367
95a3b5c4 check if ticker sort key is populated
1a83eed3 Update pandas from 0.24.1 to 0.24.2
4fa16042 Update ccxt from 1.18.361 to 1.18.362
edf2cd0b configuration test fixed
b5034cf5 TSL validator removed from exchange
29305dd0 config validation moved to configuration file
3c99e3b7 test adapted to new market refactoring
ff9231ee Format attributes-table
a1841c35 reset _last_markets_refresh
aa2d747d update docs
2bf5a384 Use close_rate for notification if available
23666858 Update pytest from 4.3.0 to 4.3.1
5151a452 Update ccxt from 1.18.358 to 1.18.361
6b948cfc Don't move notify_sell to rpc_manager - it needs exchange stuff
9054165e Adjust test, since rpc_message is now called on buy and sel
11cc33a9 Refactor notify_sell to rpc_manager
e2bcaa4d Set Requested_close_rate to stoploss when stoploss_on_exchange was hit
94b2d48d Add default value for minimal_roi (1000%)
0293a618 Update documentation for minimal_roi, which is not really optional
7ffe6577 fix test
cb9849e1 add markets_refresh_interval to CONF_SCHEMA
299e6401 include markets_refresh_interval in docs
779bcdd9 remove reload for async api
0ffefe44 reorder vars
deddbda2 delete markets patch from conftest
1a92bf9e add test
87410178 remove get_markets
35c2b961 add config param
0d980134 add markets reload func
3ad0686b fix typing
df9410cd check if markets were loaded
041e9957 add reload argument
6b97af4a add comment
e234158c update tests
c30fb7f5 return markets as dict
5c840f33 slight change to exception message
b24a22b0 use self.markets instead of get_markets
47cc04c0 use self.markets instead of _api.markets
ccad8832 adjust get_markets
3a2aa54d add markets property
d423f585 replace fetch_markets
0bcf50f1 added to stoploss doc
8d5cc42e configuration doc added
a772ab32 adding the option to resolver
f55d75e7 TSL validation tests added
3e4c9c87 Update ccxt from 1.18.357 to 1.18.358
36e95bc8 unnecessary variable removed
3e40f5c5 if condition simplified
643262bc add trailing stop loss config validator
48d33b07 Add stoploss to startup messages
0eb9dd5f Don't use timeInForce for market orders
4705b7da Add time_in_force test for sell
c0f276a8 Move kraken specific tests to their own file
e666c685 Fix tests so Market orders should not send timeInForce
f9aa3c27 Catch ModuleNotFoundError when importing external code
41add9f8 code cleanup; added message to systemd for reconfiguration
513b96b6 Update ccxt from 1.18.353 to 1.18.357
8730852d Support for systemd watchdog via sd_notify
ca496c13 TSL only offset test added
04670041 added trailing_only_offset_is_reached to full config
0eaac1cd Update sqlalchemy from 1.3.0 to 1.3.1
5f726d69 Update ccxt from 1.18.352 to 1.18.353
9c1c962a if condition fixed
c122eab7 added trailing_only_offset_is_reached option
43d30180 Update plotly from 3.6.1 to 3.7.0
3b805813 Update ccxt from 1.18.347 to 1.18.352
fa4c8110 Rename cheatsheet header
25529ad9 use || for coveralls
dba30bbf Update travis for coveralls
4cd70138 Add test to make sure this ain't reintroduced
0a2cacbb Fix #1637
702153d0 exchange.sandbox parameter was missing in the docs
9c1d4183 typo in doc
2da0d479 Update ccxt from 1.18.345 to 1.18.347
6b2f4b12 Update ccxt from 1.18.342 to 1.18.345
7b901e18 update sql_cheatsheet
e67ffd2d Fix issue that backtest is broken when stoploss_on_exchange is on
8624d83b Remove deprecated --dynamic-whitelist from freqtrade.service
962cfc5e Update ccxt from 1.18.333 to 1.18.342
35250eb2 one more typo fixed (by @xmatthias)
735e78f0 Update sqlalchemy from 1.2.18 to 1.3.0
ae7c4c33 Update ccxt from 1.18.323 to 1.18.333
c032dd0f new docs/deprecated.md added to the site menu
ce46555e docs/configuration.md reviewed: formatting, wording, grammar, etc
2f98dd04 description for --dynamic-whitelist moved to new docs/deprecated.md
71f5392f typo fixed
f6ca97d1 Update hyperopt doc to validate backtest results
386abc5e minor: doc update index.md
f16913a7 Update ccxt from 1.18.322 to 1.18.323
460e0711 How to use multiple configuration files
b8eb3ecb Update hyperopts documentation to work and match the code
2208a21a Update help strings
2d0aca0d Move --customhyperopts to hyperopt section
3c5deb9a Add test for precision_remove ...
e2cbb7e7 remove remnants markets and precisionlist
df79098a update docs
13ba5ba0 Update ccxt from 1.18.313 to 1.18.322
064f6629 delete separate pairlist
e1ae0d7e remove markets changes
c36fa0c7 add ticker argumet to get_target_bid
24c58751 add precision_filter
6bcfe658 Update scikit-learn from 0.20.2 to 0.20.3
28a70eba Update ccxt from 1.18.309 to 1.18.313
0fc54450 Update jsonschema from 3.0.0 to 3.0.1
e8ea2e6f Update ccxt from 1.18.304 to 1.18.309
b792f005 exchange cleanup
4df44d8b wallets cleanup
13de66d5 Update ccxt from 1.18.297 to 1.18.304
e5498ca2 Add libssl-dev to fix #1604
38d09f9e Update numpy from 1.16.1 to 1.16.2
768f62a2 Update ccxt from 1.18.296 to 1.18.297
761861f0 comments: removed mentioning recursion, typos, etc.
4c2961f0 eliminate recursion in _detect_next_stop_or_sell_point()
ef264841 Super() should not be called with parameters
79aac473 Remove market_url from tests
5c3177cc Adapt documentation to remove market_url
6c75b8a3 Remove pair market url
bcf5b5fd Update flake8 from 3.7.6 to 3.7.7
ef18ddd8 Update ccxt from 1.18.292 to 1.18.296
0c53bd6d Complete refactor, moving query_trades to persistance as get_open_trades
185bd1e5 Update ccxt from 1.18.290 to 1.18.292
00663500 Fix small typos
f2fd5205 Fix typo
31be4d24 Add parametrized tests
5c18346c Add typehint to binance dict
e0b634ba Parametrize exchanges and test multiple exchanges
a05155cb Adapt failing test
455b1683 add _ft_has to exchangeclass
06f486a8 Add binance exchange subclass
417bf2c9 Update jsonschema from 2.6.0 to 3.0.0
3673dba1 Update ccxt from 1.18.287 to 1.18.290
9b288c69 Add test to specifically test for merged dict
5fac4f7b Edge doc file minor improvements, typos, formatting
403ed48c rename _store_dry_order
ec6794b9 fix dry_orders
634ce87b Update ccxt from 1.18.281 to 1.18.287
98bca30d reorganize imports
cc0fae8e change < to <=
9a097214 return complete dry_order in buy and sell
9c54886f minor: formatting math expression in FAQ
a1b00f90 Edge question added; minor improvements (sections for Hyperopt and Edge)
29b8b797 Update ccxt from 1.18.280 to 1.18.281
b79d9673 add tests, further consolidate orders
69bb6eba fix comments
7738ebbc Update ccxt from 1.18.270 to 1.18.280
be754244 Only resolve exchanges from correct location
e0f426d8 Allow import freqtrade.exchange.*
e987a915 Rename exchange file
b5758e67 order creation cleanup
28518337 added _now_is_time_to_refresh()
c1ef6940 removed wrong comment: tuple is not created here
2aba9c08 fixed typos in comments
eb211706 added amount_reserve_percent into config json-schema
d9129cb9 Develop version bump to 0.18.2-dev
4315c157 Move exception handling to resolver, add test
da5bef50 cleanup
4fbba981 tests adjusted for multiple --config options
87c82dea support for multiple --config in the download_backtest_data.py utility
c08a2b66 help message fixed
7bc874c7 comments adjusted
fac0e4e6 more code cleanup in _process()
199e3d22 typo in a comment
5906d378 code cleanup in _process()
e495ffec align dry_run_orders
3e2f90a3 formatting
bb31e647 add test_sell_kraken_trading_agreement
481cf02d add test and fix exchange_resolver
2f225e23 multiple --config options
eed1c234 delete unnecessary arguments
4241caef changes to base and subclass
2103ae5f change rateLimit to 1000
0572336f revert changes to history
d8feceeb fix type-hints
da4faacd flake8
39c28626 remove error message to make pytest pass
5e8a7a03 correct time_in_force param
fe792882 load generic class if no subclass exists
d3ead2cd exchange import is not needed anymore
c879591f add exchange_resolver to resolver init
c315f63e use exchange_resolver in freqbot
2fb36b11 change variable names
ca388a9a create exchange_resolver
32b02c99 kraken subclass
54d5bce4 undo kraken specific changes
b7afcf34 add VolumePrecisionPairList
3aa614b9 bump version
3953092e output error message
ef5a0b9a add Kraken specifics
```",91629816
595,False,False,2019-02-21T11:33:09Z,2019-02-21T11:34:08Z,"Change log:
```
ba23f58f change the way to clone git rep for Window with docker
7dbb7a52 Update coveralls from 1.5.1 to 1.6.0
3ec3438a Update pytest from 4.2.1 to 4.3.0
1cd54829 Update flake8 from 3.7.5 to 3.7.6
bd6644a9 Update ccxt from 1.18.247 to 1.18.270
58864adc Move coveralls to after_success
f9d68d91 move default amount_reserve_percent value into constants
dffb2732 prevent convert LF->CRLF line ending on window
f63fdf41 Update ccxt from 1.18.245 to 1.18.247
9fad83bd Fix 1 to 0
f1ededf0 Fix typo in test-strategy, add volume > 0 check to buy/sell check
1bbb04da Update ccxt from 1.18.243 to 1.18.245
df8067d6 add description of the new configuration option amount_reserve_percent
66cc6000 add amount_reserve_percent into the full config file
ea6d4a9d fetch amount_reserve_percent from config
7c651632 Update joblib from 0.13.1 to 0.13.2
13a16178 Update sqlalchemy from 1.2.17 to 1.2.18
c2bc316e Update ccxt from 1.18.234 to 1.18.243
98bd7136 iUpdate orderbook_bid_test
f852be1a Fix tests for get_ticker fix
aee7b2c2 Update pytest from 4.2.0 to 4.2.1
c17eb89e Update arrow from 0.13.0 to 0.13.1
aaa85677 Update ccxt from 1.18.230 to 1.18.234
b87e1577 test adjusted
8e7e6700 Orthography in the log message
8fc8c985 logs: cosmetic changes
69a24c12 no need for test_ticker parameter just for making current tests happy, tests should be reimplemented
e8daadfb same approach for the sell side (at handle_trade)
91629807 shame on me
f551fb5f adjusted for passing tests
e8ef36fb execute_buy: do not use ticker if use_order_book:true is set in config
607190cd Update ccxt from 1.18.225 to 1.18.230
0b5f4dc3 Update python-rapidjson from 0.6.3 to 0.7.0
160c467e Update ccxt from 1.18.223 to 1.18.225
69f69d96 test asserts aligned accordingly to new log messages
5e741a0f fixed flake
d6c0c107 fixed flake
7ed15c64 what else?
08d35f3e fix checks
4dffb17d fix flake
14d6cdf9 OHLCV should be float for TA-LIB indicators in the strategy
b91981f0 Cosmetic: fix logging
585f5258 Cosmetic: fix logging
fe2f98c8 Update ccxt from 1.18.221 to 1.18.223
3bb9e17b Update plotly from 3.6.0 to 3.6.1
f0c9064b Update mypy from 0.660 to 0.670
e0142526 Update scipy from 1.2.0 to 1.2.1
e9aba039 Update ccxt from 1.18.210 to 1.18.221
92eb9519 Update ccxt from 1.18.208 to 1.18.210
39626bb5 Update ccxt from 1.18.203 to 1.18.208
395a7b25 Update ccxt from 1.18.197 to 1.18.203
6fd932bf Update pytest-mock from 1.10.0 to 1.10.1
fcc7cb98 Update flake8 from 3.7.4 to 3.7.5
64891df1 Update pandas from 0.24.0 to 0.24.1
218b5011 Update ccxt from 1.18.195 to 1.18.197
0a71ebce Remove unneeded pair conversation, add docstring
1d940041 Add log test for cancelled order
40fea459 Add log_has_re
02c35529 Adjust comment
91ed0213 Add tests for cancelled on exchnage
e8ed8a2e Handle orders cancelled on exchange
f2dd32e3 Update flake8-tidy-imports from 1.1.0 to 2.0.0
8d5474d4 Update plotly from 3.5.0 to 3.6.0
576d893d Update ccxt from 1.18.193 to 1.18.195
24f779ed Update flake8 from 3.7.3 to 3.7.4
2ce3bd95 Update numpy from 1.16.0 to 1.16.1
ba4e5cae Update ccxt from 1.18.190 to 1.18.193
d07cc592 Update pytest from 4.1.1 to 4.2.0
8d9114aa Update flake8 from 3.7.1 to 3.7.3
68a4e042 Update ccxt from 1.18.179 to 1.18.190
e3ae8d3f flake8 3.7.1 fixes
576d9b8f requirements: move numpy installation earlier as later packages require it
0c959c22 Update flake8 from 3.6.0 to 3.7.1
6ad1089f Update cachetools from 3.0.0 to 3.1.0
9f87a274 Update ccxt from 1.18.171 to 1.18.179
84b6b8fe edge messages enriched
cf283344 Update ccxt from 1.18.160 to 1.18.171
1a1123a5 Update ccxt from 1.18.155 to 1.18.160
f0954928 Update ccxt from 1.18.152 to 1.18.155
38f73daf Fix indexing error
e0ad095b Simplify conversation to python dates (pandas offers this ""for free""
1d08ada9 Fix backtest-test with timestamp-conversion
3446dd17 Add test informative_pairs_added
ba07348b Rename additional_pairs to informative_pairs
bfd86093 Fix comment
b112f2f3 Update pandas from 0.23.4 to 0.24.0
d222dd67 Update sqlalchemy from 1.2.16 to 1.2.17
e5b02240 remove unused import
e43aaaef add macd signal as default indicator2
422a0ce1 better Path usage, remove arg parameter in generate_graph
22e7ad8e Change back to LF lineendings
b840b9f5 Update ccxt from 1.18.144 to 1.18.146
eec72763 fix crash when backtest-result.json not exist
5e7ba85d Fix typo
3c316fe3 Fix alignment
56a3d781 Fix typo
bd246468 Update tabulate from 0.8.2 to 0.8.3
a97b3ab0 Update ccxt from 1.18.146 to 1.18.152
38d293cc Updated doc
dcceb40f Update ccxt from 1.18.144 to 1.18.146
9960fe07 Add experimental settings to sample strategy
74b03d05 Add tests and default values for all experimental features
ac199b62 Drop mandatory column
8750f1be Add strategy-override options
05d65b81 Fix typo
97f6a458 Allow more settings to come from strategy
ad8b1bbb Change default for positive_offset in sample
5ea332e9 fix bug with trailing_stop_offset if it's disabled
896c9d34 Added total profit column do backtest result
13e2f71d Add flake8 plugins and implement small improvements
c412cd9e Add information about dataframe
86a0863e Clarify logmessage Done fetching
a06593e6 Fix test
89ddfe08 Add additional-pairs (sample) to defaultstrategy
7c71b951 Update ccxt from 1.18.141 to 1.18.144
c77607b9 Fix tests after rebase
3221f883 Wrap line correctly
1e7431a7 Blackify
e66808bb Add additional pairs to refresh call
fc92491a Add documentation for additional_pairs
6e2de75b Add additional_pairs to strategy
d6cdfc58 Fix mypy hickup after changing list to tuples
7b138ef3 Add warning about strategy/backtesting
27b20217 Only run once per pair
e7800aa8 Import only what's necessary
a2bc1da6 Remove private var from class instance
1e749a0f Rename variable to be clearer
d7df5d57 Keep last_pair_refresh as tuple asw ell
6525a838 Adjust documentation to tuple use
f0af4601 Adopt plot_dataframe to work with --live
a9abc257 Improve data-provider tests
0aa0b1d4 Store tickers by pair / ticker_interval
5f61da30 Adjust tests to 3tuple return value from async method
d6df3e55 Return ticker_interval from async routine
e503d811 Change logmessages to match functions called
b981cfca remove comment which proves untrue now
a206777f Rename refresh_tickers to refresh_latest_ohlcv
06ec1060 simplify refresh_tickers
646e98da Always return dataframe
2b029b2a Only return ohlcv if available (Live and dry modes)
9edb8805 Add dataprovider documentation
35c8d1dc Update comment
8f3ea360 some cleanup
5ecdecd1 remove unused local variable persistance
58f1abf2 Add dp / wallets to strategy interface
d3a37db7 Provide available pairs
f034235a Tests for RunMode
1340b716 Add RunMode setting to determine bot state
fed3ebfb Change enum from 0 to 1 according to the documentation
a7db4d74 Add some simple dataprovider tests
84cc4887 Add copy parameter
e38c06af Small fixes
f1a5a8e2 provide history
4ab7edd3 small adaptations
05570732 add get_runmode
7206287b Use Dataprovider
b119a767 Some more restructuring
a6d74a14 Draft of dataprovider
1be3d57b Improve developer docs
e4a39903 Update ccxt from 1.18.137 to 1.18.141
6fb50e35 JSON standard does not allow single quoted strings
a7336300 Update ccxt from 1.18.134 to 1.18.137
b48430f9 Return list not None
4e760e1a Test for errors found in 1491
30e3b52b catch errors found in #1491
797ac713 fix stoploss_on_exchange_interval type
b421e437 Update wrapt from 1.11.0 to 1.11.1
2b65e3f3 Update ccxt from 1.18.133 to 1.18.134
87329a39 adding stop loss last update to test persistence
a2618208 wrapping in parantheses instead of line breaks
70780bb0 using dict.get to fetch interval
89eddfd3 refactoring english …
1c4ee35e using italic for “off exchange”
e41e4541 adding tailing_stop to docs
cc646638 update mypy
a2c01916 Add type-ignores to floatfmt
648def69 Remove unversioned install of most dev packages
97a83414 Update ccxt from 1.18.131 to 1.18.133
75cedfaf unreachable code removed
9d6c5479 added note for only binance
e682ecea stop loss documentation added
25331122 added referral to stop loss documentation
08d98773 added SL interval to configuration document
da51ef40 SL interval added to CONF_SCHEMA
91c714c7 stoploss_on_exchange_interval added to full config
5e2e96ac compatibility with edge added
611b48db fix return value from info hash: value is in string
50bc2013 adding whitespace
baa5cc5b logs enriched
aa03a864 comments added for TSL on exchange function
cffc9ce8 last step: stop loss on exchange added to trailing
6d588b3b trailing stop loss on exchange extracted to a separate function
bfb71215 refactoring handle_stoploss_on_exchange
29439c05 adding update beat test
1cd5abde removing unnecessary guard
12e81080 checking params of cancel order and stop loss order
399d2d89 Win rate formula was wrong (but not the definition)
494b905d Update ccxt from 1.18.126 to 1.18.131
f0cfab79 flaking 8
cfe00c2f initial test added for TSL on exchange
da041822 Update numpy from 1.15.4 to 1.16.0
a3897c99 Update ccxt from 1.18.120 to 1.18.126
04786f09 Update pytest from 4.1.0 to 4.1.1
cd2bccd4 Have backtest use the same logic to get the ROI entry
e9d61eb3 Fix ROI calculation problem
9e0902e7 Add test for case for odd ROI dict -  #1478
690fbeb9 Update joblib from 0.13.0 to 0.13.1
e95351fd Update sqlalchemy from 1.2.15 to 1.2.16
3867f73c Update ccxt from 1.18.119 to 1.18.120
4920ee34 Update wrapt from 1.10.11 to 1.11.0
3f809219 Update ccxt from 1.18.117 to 1.18.119
e025ad39 temp test commit
c1007f95 Update ccxt from 1.18.114 to 1.18.117
a4947554 Update .travis.yml
2e530a3e Update install_ta-lib.sh
e76ed31b fix ta-lib cache
f4979e0e Cache /usr/loca/lib
dd7d655a remove unwriteable cache-dir
f9a99f4a Change caching
7a13565e travis - python - test
bb3d7875 Test python 3.7
356a17cd Build python 3.7
da436c92 switch travis to xenial
69eed95a cd out of the build-helpers dir
df97652f Try fix ta-lib install
64372ea6 Fix ta-lib installation build helpers
b3f67bb8 Fix git pull in docker-image
b5adfcf5 Fix documentation typo
1a272584 condition fixed
9e133eb3 adding guard not to cancel the previous stop loss on exchange if market is falling quickly
aed85528 comparing with stopPrice instead of price
f4e0e044 Update pytest-cov from 2.6.0 to 2.6.1
4069e2fd Update pytest-asyncio from 0.9.0 to 0.10.0
ec22512f Update pytest from 4.0.2 to 4.1.0
c3107272 Update arrow from 0.12.1 to 0.13.0
b98526d3 Update ccxt from 1.18.102 to 1.18.114
4fbb9d44 adding stoploss_on_exchange_interval to order_types dict. default to 1 minute (60)
16472535 adding stoploss_last_update to persistence
f620449b Add test for hyperoptresolver
440a7ec9 fix pytest
40b1d8f0 Fix CI problems
5dd1f9b3 improve hyperopt docs
dd2af86a pprint results
821e299a adjusting trailing stoploss on exchange
16708882 include default buy/sell trends for the hyperopt strategy
a0df7b9d Use sell/buy trends from hyperopt file if available
87cbff5d Fix warning for max_open_trades when edge is enabled
13800701 Fix custom db_url ignored if provided by conf.json
3f82dd05 Update ccxt from 1.18.101 to 1.18.102
2147bd88 Fix problem when no experimental dict is available
798ae460 Add check if trigger is in parameters
5e087693 Update hyperopt documentation with sell-stuff
68ba1e1f Add sell signal hyperopt
a07353d3 fixes few wordings
506237e3 Don't use --quiet on pip install
f088f43b Install numpy before py_find_1st
01e2dc17 Remove whitespace in fucntion definition
337ebdec Avoid installing ta-lib multiple times
9e5e485d put --upgrade flag to the same location in subsequent requests
31da42a4 Show error when no python is found
94aa1aaf fix typo, improve doc sequence
dbf8ec6a Update dockerfile to python 3.7.2
16512d99 Update plotly from 3.4.2 to 3.5.0
8505ffbe Update ccxt from 1.18.97 to 1.18.101
f7b96d83 Add trailing options to sample-strategy
f32232ba Add documentation for stoploss in strategy
cacb9ef3 Loop twice
00c5ac56 Print startup strategy summary
a7dc6b18 Overridable attributs as list
5e234420 Simplify StrategyResolver by code deduplication
4599c80e Add trailing-stop to strategy
67cbd5d7 putting back requirements
a5ec564f Update ccxt from 1.18.95 to 1.18.97
f1bb4233 telegram documentation link
afffa2f3 changed to “Free, open source …”
de278a77 Update ccxt from 1.18.94 to 1.18.95
2c31fd66 cd build_helpers added before extracting Tar
3329ffd0 improve comment
05ce7787 readme enriched
68a9d1b2 description
207daf08 change description
516217b6 Stop loss should also be shown when trailing is active
6cc6ce35 Update ccxt from 1.18.89 to 1.18.94
848af375 Update README.md
1b84aa82 dont use 55 for regular check as that's a key in the dict
2bc76771 Align backtest to interface.py
1d518885 fix roi-reached when list is unsorted
b55994cb Clarify documentation
da6f1a39 Sequence of minroi dict must be irrelevant
a54d8f0e Create datadir when not exists
c337a931 Fix bug on --refresh-pairs-cached
a909322f Update ccxt from 1.18.87 to 1.18.89
672d115e Change default value and add docstring
dd1d3430 Add explicit test for ohlcv fillup
fae875f5 Implement missing_data_fillup to tests and operations
ef455573 Fill up missing as part of loading data
8b9cc45f move test for data completeness
7b1f4aec typo
827a8309 more links corrected
366980fd broken link corrected
42cc3e52 link second try
5be21fd9 Update ccxt from 1.18.86 to 1.18.87
361b294e block “==“ removed
dd91b5c7 links corrected
a07a004b test relative link
a86b34e4 old files removed
7bf1a92d “inofficial” => unofficial
db1c9b8e relative links
79ac2063 typo + broken link
04483da8 typo corrected
d4092119 add test to verify data does not contain missing data afterwards
03389d96 ADd test for data_interpolate
a021cd3a Add ohlcv data interpolator
be1969ad added widgets to index documents
689ca764 added “ready to try?”
034bcd64 requirements added to “about”
faad07aa changing index to about page
4d415205 about document enriched
c357483e typo
aa542784 unnecessary config removed
49c37692 content bar completed
f42df56a edge reformatted
808ce3e7 edge added to content bar
87cbf6aa Plotting reformatted
863cf303 hyperopt reformatted
b029a989 backtesting reformatted
219e9d9e optimization page reformatted
da380e6a start the bot documentation reformatted
83b97321 permalink installed
016522b1 configuration reformatetd
cb1d9b62 restructuring docs content
f32dfc57 Update ccxt from 1.18.84 to 1.18.86
af850801 Update ccxt from 1.18.78 to 1.18.84
460900dd Remove unused and duplicate datastructure
f6ff9b04 changed to introduction
0bcadbd8 bigger logo
78f29a74 added theme configuration
71de820a changing doc theme
dcf0feef move requirements to docs
ad696a9d removing numpy from docs
793dd384 removing unnecessary packages
ffbe95ef adding requirements for docs
9c442455 adding readdoc config
b45af561 initial commit for docs
cf0e31c5 Update plotly from 3.4.1 to 3.4.2
305f2b74 Update ccxt from 1.18.74 to 1.18.78
fab7663a Log when dumping to file (instead of print)
61f8ce5c remove unused imports
0f86e218 Add plotly requirements file
7dc40cda refactor file_load_json to be standalone
27abdd97 Move load_json to misc
065b469a rename test to avoid naming collision
c955415c Switch from ujson to rapidjson
1ce8f416 Reset stake-currency when using config to download pairs
1167b24e Update ccxt from 1.18.71 to 1.18.74
cb654a82 Add release documentation
```",91629816
596,False,False,2018-12-27T11:47:12Z,2018-12-27T11:49:08Z,"```
9af2fca7 Add handling for market orders
20cdabbe Add test for market order
8b38f44d Update installation reference for Raspbian
5b30815d Move ""following section"" part
37cde77e Fix typo
1fc0dcb9 Fix typo in link
b2bc5d93 Remove convert_backtestdata - this is not usefull anymore
32f43d32 Adjust pyup.yml to also ""find"" requirements-dev
5e3e7b69 correct TOC for bot-optimization.md
f2beaf10 Add strategy documentation (fixes #818)
d9512898 Refactor strategy documentation
b28b2369 Update ccxt from 1.18.69 to 1.18.71
0e6dbfab Update ccxt from 1.18.67 to 1.18.69
34b93eb9 Load config-file in download_backtest_data -
8fbeb700 move key/secret in download_backtest_data to correct location
ae514585 Update ccxt from 1.18.64 to 1.18.67
a5137e4f comparing float instead of int
741e3368 Update ccxt from 1.18.60 to 1.18.64
7243da3a tests added for klines copy=True
7c69dbae Update ccxt from 1.18.58 to 1.18.60
41ef02a2 Update ccxt from 1.18.50 to 1.18.58
34e3af6a do not copy DF if copy is false
a13b30b2 removing test
a45ec1ed adding copy as a parameter to klines
358b5d7e Update scikit-learn from 0.20.1 to 0.20.2
fc4384c9 Update ccxt from 1.18.46 to 1.18.50
ad495273 Update ccxt from 1.18.40 to 1.18.46
2e06d522 Update scipy from 1.1.0 to 1.2.0
fd4cfefd Update ccxt from 1.18.39 to 1.18.40
b1e9fa75 Base dev Docker image on freqtradeorg/freqtrade:develop.
215ded2e returning last candle close price for a pair
1483593e Fix instructions on building a dev Docker image.
ac9189eb Update ccxt from 1.18.37 to 1.18.39
1372095c Seperate requirements to run the bot and to develop.
5493d1a7 Fix wonrly named module
7357d6b0 adding order type explanation link to doc.
c784b829 typo
213155e6 typo
f756f1ad unnecessary explanation removed.
2e702844 reformatting
a967b891 broken link corrected
9d8a3b4e docs added
806ab372 Add / fix some comments
eb7034c7 Rename download_backtest_testdata to download_pair_history
50938d41 Remove tests for download_pairs
8bd4d03e remove download_pairs
8826a1df Add missing tests for trim_tickerlist
043cefd6 allow reloading single pair
ebb80b69 remove ujson / json fallback hack as it's now in requirements
f5b2430c Fix docstrings and typo
8a3c2a0c allow only loading 1 pair if necessary
429f846a Switch load_data to kwargs
acd07d40 Cleanup some comments and code formatting
d421e4e8 update edge description
d0c9791c Fix tests to support load_data with dataframe
34ea214f Fix some tests to use dataframe
1c5031b4 load_data to return dataframe
c1a32bc6 use json_load to load data
b4f1a80d Add edge oneliner to index
6c02cc59 Adjust test to pathlib
21aba162 Replace calls to load_data
f2619112 replace os.path with pathlib.Path
a34c2cf6 Add missing test-module __init__.py
4ad507f8 Update ccxt from 1.18.36 to 1.18.37
7e463b20 Add link to contributing for ""wanna help""
c42d5002 Update pytest from 4.0.1 to 4.0.2
43039aa6 Update ccxt from 1.18.32 to 1.18.36
407139b0 remove unused imports
17a820e5 Move tests from test_optimize to test_history
92c800d9 Adjust tests to data.history
4ca6aad9 Adjust imports in scripts
432cc002 Adjust imports to data.history
0250a96f Sort imports
1a3fcd47 extract data-handling methods from optimize
b38195e9 Rename to converter
1f298028 only export what's needed
453f62cd Adjust imports
030ecbfc move exchange_helpers to data module
aca24308 Fix comment
6c9c03b3 Update ccxt from 1.18.24 to 1.18.32
6b4bab27 Add link to edge documentation in bot-usage
df5a2801 fix edge doc broken link
7e3955b0 Fix edge-cli comments (refer to edge, not backtest
5c3dcf3e Test for wrong inputs (empty / none-dataframes) in get_signal
d6ba4f0e Fix last 2 tests to use DF as data container
7a533de1 Use list ticker history for backtesting
fe3990af Adjust some tests to dataframe passing
627ab9f5 pass around dataframe instead of list
aa1262be typo corrected
79f5c4ad Update sqlalchemy from 1.2.14 to 1.2.15
fd953bab Update ccxt from 1.18.18 to 1.18.24
8d8b53f4 added tests for IOC and FOK
81b4940e Adjust tests to new fiat-convert location
efc70950 move fiat-convert to rpc - adjust imports
0f2c5478 Move fiat-convert to subfolder
0ab8ac1c Add test to verify downloading history does not modify _pairs_last_refresh_time
70ad8a06 Update requests from 2.20.1 to 2.21.0
97e7b0d9 Update ccxt from 1.18.17 to 1.18.18
8c1901ad Extract caching logic from lowestlevel fetch_ohlcv function
523dea4a remove hacky workaround not needed anymore
e2bff9d5 Remove assigning klines from download method
36de4518 Remove class-level variables
adcaa843 test_strategy_override_order_tif added
e6fd7da4 adding test: create order should consider TIF
6018f2d2 order status handled in case of IOC and FOK
d904667c Update ccxt from 1.18.13 to 1.18.17
866b7aee tests fixed
663e33d2 if condition refactored
20d794e2 mistake in previous commit
2f5c8941 removing unnecessary default value
b35199a7 intermediary commit before extracting the logic
acb96eb5 Update ccxt from 1.18.11 to 1.18.13
3b951c38 Drop indexes on renamed table
b3b6eda2 Update ccxt from 1.18.10 to 1.18.11
ac9f19ae Update ccxt from 1.18.2 to 1.18.10
8f19c83f Refrase documentation
a63f123b Check if number_assets is defined, as it's required by VolumePairList
0ea7dc92 test added for total open trade stake amount from schalchemy
bf1841d2 Update ccxt from 1.17.583 to 1.18.2
0c107190 Specify JsonValidatorversion explicitly
2f0d7a1a Add specific test
3e2fa580 load pairlists via resolver
43031aa3 Add missing path-error handler for hyperopt
1a10e128 Documentation and developer documentation
21906e48 Remove duplicate code
37ebe05c Update ccxt from 1.17.581 to 1.17.583
d12cc39a some visual happyness
910601ba in case exchange doesn’t return order info …
e3876bcf removing AON as it is not supported in binance. will be added once TIF is added for other exchanges
1c3ce265 documentation for pairlists
6ab907be Rename config whitelist to pairlist
4143e2c0 adapt tests to send sell-reason in sell-message
33e9ed5a Print sellreason in sell-message
24f9ea29 tests fixed
e7684b44 capital in trade extracted to a separated argument
32b6cd9d Update ccxt from 1.17.574 to 1.17.581
bf678164 remove default param - fix tests
ba3218a8 Support multiple sorting variants
ab60571a Add sample config
0929f596 Refactor pairlist-tests
18ad3388 Some more tests adapted to pairlists
ef1208b3 Fix rpc messages
1b3ecb83 Deprecate --dynamic-whitelist
108d9a11 function name refactored
43bafc39 static method added
b5192193 total amount passed to edge should consider open trades too
3360e777 Fix flake adn mypy
11da297c Update ccxt from 1.17.572 to 1.17.574
99f7c375 Correct Edge links
3a086aac Add commit and message to container
26187ef6 patch exchange_has
d09dbfe2 Add volumePairList - refactor tests to correct file
58c7adae Test for blacklist
8fd713f3 validate_whitelist should return the list again
1738633e Fix refresh_whitelist tests
e8fbe77e Refactor static whitelist to module
bb828c30 Remove unnecessary test-file
35d678c5 Update ccxt from 1.17.566 to 1.17.572
b594bc7c Update ccxt from 1.17.563 to 1.17.566
a5414b84 flake8
2d17346b explaining arbitrary stake amount in comment
7ddbaa70 USDT to ETH conversion. 1 USDT = 1 ETH
bd673178 constants removed
33f1cc13 fixing tests
1d41a917 stake_amount in case it doesn’t exist
ee62adf4 highlight
4431e3bd position size explanation enriched
88d277ea adding required config for edge
9c0be99f rounding float at the end
c4f17f1c config json updated
86d9457e removing unnecessary variable before returning the result
9c987fde variable name changed (_final_pairs)
b1c81acf another futile one
042e631f rollback on futile change
bf990ec5 test fixed and flake
24f573f3 log ""Found no sell signal for whitelisted ..."" changed (#1378)
d4f83a75 Fix missing mock in test_add_stoploss_on_exchange
f04655c0 Test exceptions in sell-stoploss
4a2d6037 adding dots at the end of sentences
7e86ec31 tests added for wallet additional functions
c61ede41 documentation updated
aadc9f05 conf schema
11101e66 config full aded
12471e01 added tests for position sizing
7767470a return stake amount of strategy if edge doesn’t have any
f554647e “checking sell” message removed to debug
42c8888f Update ccxt from 1.17.556 to 1.17.563
efcec736 refactor startup_messages to rpc_manger
74ca34f2 flaking8
3d37c5d7 edge non existing stoploss fixed. solves #1370
bc2f6d3b Update ccxt from 1.17.545 to 1.17.556
6bedcc5d log enriched for time in force
a61daed8 logs enriched
cb9104fd Add BNB as blacklist to align to documentation
38592c6f Add binance config sample, improve invalid pair message
e698590b avoid generating logs on each iteration
1a5465fb logs enriched in case of stop loss on exchange, test fixed
c913fef8 stop loss limit when hit, the close price is “average”
e9305b65 position size fixed
fb755880 logs added in case stop loss on exchange is hit
da94e97c in case trade is not open, then handle_stoploss_on_exchange should not be called
50a38413 Update ccxt from 1.17.543 to 1.17.545
4ffc74d5 if buy order is rejected or expired the bot should exit the buy loop
29f680ec fix order type test
7dbf0fed stop loss limit order type corrected
159ac6e6 edge tests fixed for position sizing
7832fe70 Update ccxt from 1.17.539 to 1.17.543
f5a70750 edge real position sizing drafted
6351fe7a test added: stoploss_order_id should be null after migration
7f6fc7e9 Lost in git !
b6353508 flake8
1f1770ad migration script and and error handling on stop loss order
17004a5a documentation corrected
b2634e8e typo corrected
d3712c6e Update ccxt from 1.17.536 to 1.17.539
ad8592f3 Test live mode of get_free
16eec078 Use dot to access attribute in NamedTuple
9f26022c copy/paste corrected
962b02b0 one last step before tests
29c23e31 added time in force in buy and sell functions
181424e8 time in force validator added
ba20b1b5 TIF added to constants and json full
890cef88 oops, lost in git :/
fb7b65c9 time in force drafted
6c38bde2 some formatting fixed
b5797686 dry run set explicitly to False for live stop loss
5c257730 test added for dry run stop loss sell
1ad5ccdf dry run condition when sell occurs
a80c9843 flake8
92930b23 test fixed
5e1fb111 documentation added for stop loss on exchange
3e29fbb1 stoploss on exchange added as a parameter to order_types
ebaf58b0 Only sort data if necessary
8a436119 Remove get_candle_history (it's now async)
745a5177 Fix comment pointing to wrong column
317eba21 Remove dual instanciation of pairinfo named tuple
fd718471 replace  lambda with Magicmock in test
e89df448 Update ccxt from 1.17.535 to 1.17.536
e4744c1b stop loss on exchanged removed from doc
dcae3a26 test of check_consistency added
664b9617 removing NotImplementedError from stoploss_limit
1d35428c Rename get_valid_objects to get_valid object
a3477e07 Remove constructor, it's not needed in the baseclass
266bd7b9 error message improved
20de8c82 Convert to Pathlib
cc7b8209 Move hyperoptresolver to resolvers package
519b1f00 adding strategy config consistency function
2c0d0946 Small stylistic improvements to strategyresolver
21a093bc extract resolvers to IResolvers and it's own package
c8a0956e fixed test handle_stoploss_on_exchange
b5192880 [WIP] adding tests for handle_stoploss_on_exchange.
fe892713 typo
b2c0b20a added real tests for stop on exchange  in dry-run
000711b0 added stoploss_limit_order for dry-run
870631f3 1) comments added to handle_sl 2) dry-run force price removed
531d9ecd docstring added
afd0a054 typo corrected
a9ec5c66 simplifying if conditions
1a8e9ebc stoploss_order_id added to migration script
63c2ea11 Not sure why those arguments were there !
29347a69 adding get_free to wallet
29a4c99d Update pytest from 4.0.0 to 4.0.1
412a627d Update ccxt from 1.17.533 to 1.17.535
3e8de28b Add Note about order types support
dedf1ff7 refactoring
89eb3d9f blank line removed
1c2c19b1 the complex in the life of flake8 resolved
9144a8f7 tests fixed
5ee2faa1 adding stop loss on exchange after the buy order is fulfilled not before.
fea77824 handle stop loss on exchange added
605211db Update scikit-learn from 0.20.0 to 0.20.1
270624c0 Update ccxt from 1.17.529 to 1.17.533
a9f04609 tests fixed
27a6dcf3 getting available balance from wallet instead of API call.
1dde5679 final broken test fixed
6f0025c6 documentation written
7faafea8 added test for cancelling stop loss before sell
07ac9024 test exchange added
ecb2c4dc bloody flake8
cc1422d4 flake8
34185929 freqtradebot test added for orders on exchange
24df093a test: only implemented for binance
2461d86c dry run should consider stop loss is hit on limit price
3a1c3783 typing bugs
bbe8e4e4 flake8
da561762 cancelling stop loss order before selling
fad75939 doesn’t have to create another Trade for SL. can be cumulated into the same.
bb37b56d adding stop loss order id to Trade
3b7e05e0 stop loss order added right after a buy order is executued
bfbdddff stoploss limit order added to exchange
f73a18c5 Update ccxt from 1.17.522 to 1.17.529
eb532814 python beginner problem resolved
4b86b2b7 Happy flake8 !
3a2134db removed Optional
4d75e905 None ripped off for optional as wallet must have exchange and currency
b129750f adding “optional” in str
88f61581 1) NamedTuple refactored 2) Missing data handled
cb3cf960 tests added in case of missing data
aeb372c2 test wallet when api return changes
5b689402 update wallet in casse order remaining is zero
68f81aa2 test wallets moved to tests folder
64129897 refresh_ticker should be called just once per iteration.
d745e577 Update ccxt from 1.17.518 to 1.17.522
a3b60041 IHyperopt: all methods static, somef ixes for mypy
7757c53b Small fixes
5dd013c3 Rename hyperopt interface and resolver
5a550ef2 Fix docs typo in hyperopt
ce092742 Update ccxt from 1.17.513 to 1.17.518
e69f9439 Add missing semicolon
b5025013 Drafting stoploss on exchange
cf2d6850 Update ccxt from 1.17.502 to 1.17.513
003480ad flake indentation
b680681b updating wallet at handle timeout functions too
c0333780 change dict type to Any
9c549f45 removing unnecessary private function
608ce98e moving wallets to root
a92619f1 Added empty lines related to last commit removed
7cb8b28f wallet sync added
606e41d5 wallet tests added
f4bb2037 removing persistence update
d5b47abe Wallet table removed
a0658bb5 comments added
12f07ee1 space removed
b815c8fe updating wallets whenever a trade happens
afe52efc removing wallet from freq
82cb0e4d putting wallets into a class (doesn’t need to be in persistence)
b3e08831 Remove rate for market orders
c11984d9 Check if exchange supports all configured market types
968184ef Swap default mode to all limit (defaults to how it was before)
69dd56b2 wallet sync drafted
492868a9 Seperate different tests within one test clearer
681659f2 Update ccxt from 1.17.500 to 1.17.502
a9a157af Align tests and test if ordertype is passed to ccxt correctly
ef1e20bf Don't add default value for ordertype
54387326 remove need for escaping quote
e485aff5 Test failed load on invalid ordertypes
9ba281c1 add supported limit values
54a86d72 Raise error if one of the required ordertypes is not present
3ab0cf49 Add order_types to sample strategy
6e78efd9 Document ""order_types"" setting
24ed9a8b Add loading order_types from config file
b7abf7dd Update ccxt from 1.17.498 to 1.17.500
98df3c81 Fix missing mock in backtesting
db8c8ea4 added a space in help
d05c671a adding edge args to bot-usage
dcf99308 improve hyperopt documentation (links)
e6baa9cc Switch tests to kwarguments
52f4d700 Update pytest from 3.10.1 to 4.0.0
23295514 Update ccxt from 1.17.494 to 1.17.498
69619030 removing unnecessary args from config
03e6caa5 adding notice about Edge ignoring ROI and TSL in doc
1cfd19ae removing unnecessary args for edge
f666d159 renaming edge to edge_cli for command line version
6a71f80a Add support for different order types
4f800bfb Fix pickling-error
bb9a1e5f edge cli tests added
9698eee9 documentation added
ca22a116 timerange added to args
5d73b303 unnecessary libraries removed + arg help enriched
0767718a clear help added to stop losses arg
dd47d7ad cli blank line added to readability
b0e4aa8e stop loss range added to args
36030176 nb_trades and avg_trade_duration added to cli
ac0c9314 adding number of trades + average trade duration to edge info
7fb8ae3e Update py_find_1st from 1.1.2 to 1.1.3
9baf228e Update ccxt from 1.17.492 to 1.17.494
5de3f1d9 showing result in tabular
95cbbf1c adding edge configuration to cli
cf974168 Edge cli drafted
51dfd2bf If max_open_trade=-1 means it should be ignored.
4e64bc3d Update ccxt from 1.17.491 to 1.17.492
bdba6186 Fix doc-typos
028139fa Update pytest from 3.10.0 to 3.10.1
c29543dd Update ccxt from 1.17.489 to 1.17.491
261cd774 Update sqlalchemy from 1.2.13 to 1.2.14
ef2c31b5 Update ccxt from 1.17.488 to 1.17.489
060a1b3f Add /whitelist to help message
08ef2730 Add /whitelist call to telegram
62402351 Clarify volume selection for dynamic whitelist
02527eee Add rpc_whitelist call
9bbaeb4e mypy expression
aacc1d50 removing total capital in favour of stake amount
d6135533 base position on stake amount instead of total capital
7dd74c37 flake happiness provided
97fd33d7 adding test for process
523a9a60 fix tests
0f2ddbbe Update ccxt from 1.17.485 to 1.17.488
4dcd15da improving documentation for positioning
617a5840 putting edge adjust function in _process not in create_trade
12e735e8 1) extracting edge_conf to a fixture 2) test cased adjusted to Backtesting 3) Formatted backtesting_details a bit
b41633cf point out ""good first issue"" label
59cd4fe0 Remove boilerplate comments
292962d6 Fix tests
1840695a Update requests from 2.20.0 to 2.20.1
1db9169c Update ccxt from 1.17.481 to 1.17.485
5c5fe4c1 Fix test
272ff51d correctly patch exchange
56dcf080 Add explicit test for parallel trades
93429a58 remove TODO
9cd2ed5a fix hyperopt get_timeframe mock
fa4c199a fix some mismatches after rebase
2371d1e6 Fix backtest test (don't use 8m file if we use 1m tickers)
66487f2a require start/end-date argument in backtest
83a8d791 Fix alternate buy/sell (this should respect the sell signal!)
db17ccef Adapt backtesting-tests to new backtest-logic
03cda8e2 remove meaningless backtesting test
6729dfa6 Add get_timeframe mock for hyperopt
96efd12a add new options to hyperopt
e94da7ca inverse backtest logic to loop over time - not pairs (more realistic)
aefc2073 adding dot to the end of the phrase.
a7dc8f5f adding edge configuration to configuration.md and removed whitespaces
5d850825 adding a notice about the incompatibility of Edge with Dynamic whitelist
cca371c5 Update ccxt from 1.17.480 to 1.17.481
6d80c038 removing raise KeyError in test
e5c64997 assigning strategy to edge from FreqtradeBot
7b62e71f Fix some tests and rebase issues
866da8aa reinitializing Edge calculated data in case of inability to download backtesting data
3330d327 removing reserve keyword “filter”: replaced by “adjust”
7b809855 comments on recursive function + indentation of function declaration
934dd97e adding init for edge test folder
96a43327 _pair_info moved to class header for reusibility
b425cc3e adding explanation regarding max trade duration and interval
f75606d2 formulas markdown style
5bd3bae5 unifying default value explanations
bd1b0582 typos in documentation corrected
6d63de19 removing unnecessary lib
553e5656 forcestoploss refactored
f4b626ed Update ccxt from 1.17.476 to 1.17.480
8044846d Fix some refactoring problems
477515c4 Now using resolver for custom hyperopts
e0f42098 Updated logger in custom_hyperopt
40368bd1 Added more hyperopt documentation
5816d1c1 Updated documentation for new hyperopt
469db0d4 Decoupled custom hyperopts from hyperopt.py
23d3a7f3 capital after dots and default values corrected
1b457e90 config initializer refactored
bcecaa69 removing global variable modification
133ba5d6 moving stop loss range to init as it doesn’t need to be called on each iteration
5c38b92a simplifying calculations to be more readable
7278cdc7 Update ccxt from 1.17.469 to 1.17.476
5754e519 more typos
8a254901 Typo corrected
4fbabd3b Doc for Edge WIP 3
49d30ad0 doc WIP 2
cc413176 documentation WIP 1
2c0fc3c7 Test latex images
f92d229f Update pytest from 3.9.3 to 3.10.0
9f03c26c Update numpy from 1.15.3 to 1.15.4
8a5e4c3f Update cachetools from 2.1.0 to 3.0.0
3666e013 Update ccxt from 1.17.464 to 1.17.469
ed24d96a some formatting for flake8
8ea9b374 passing pair to get_trade_stake_amount
120655d2 fixing tests for namedtuple
14bfd4b7 using named tuples for keeping pairs data
81f971f1 Update ccxt from 1.17.459 to 1.17.464
d7821acb refreshing pairs on each iteration
b6d4e11e added minimum win rate to config
4ab7a0fb Update urllib3 from 1.24 to 1.24.1
7155e5cf Update ccxt from 1.17.455 to 1.17.459
f6498bf5 beginning
9cb66077 money_mgt added
f77fa6b5 misharizing temporarily for doc
b57ae20a edge doc file added
83b3323c formating md
85768fcc beginning of doc
ece1c8a7 flake8 again and again and again and again https://www.youtube.com/watch?v=MuSK3pDDYD4
d1ba994e expectancy test completed
237233c3 renaming tests
2ef2754f flake8 happiness satisfied
3eeaa50f stoploss and sell signal tests done
bb791eac backtesting remove from import + whitespace removed
7f3b4a97 Reinstate df - which was removed in #1287
333d505b OHLC validation corrected
05b80104 removing unnecessary test cases
2f6aafe6 Edge calculation refactored: removing redundant calculations
17895282 Update ccxt from 1.17.448 to 1.17.455
afc13291 Update sqlalchemy from 1.2.12 to 1.2.13
92f9c828 Update ccxt from 1.17.439 to 1.17.448
8316acfa Add column description to test-cases
95d271ca Fix ROI close-rate calculation to work with fees - adjust tests
c21b4564 Fix smoe comments in persistence
eab15e09 Update ccxt from 1.17.436 to 1.17.439
a321d0a8 Short descriptors
daa9863d Try adding headers
79d1d63e Align data (by halfing all data)
8c93760a simplify some code
fe2c158e Adjust sell-rate to new backtesting (respects roi/stoploss)
f96f0cde Add additional comment
9e921d44 refactor General bt-utils out of detailed backtest file
e442e22a refactorign
9798e881 refactor sell_r to sell_reason
3679b094 cleanup interface
fc3f8b43 some more cleanup
b383113d Test open / close time - small refactorings
936441a8 Update ccxt from 1.17.432 to 1.17.436
9065e79f Cleanup and add some comments on what's happening in the sample snippets
6096f3ca Simplify functional tests
98050ff5 use all min_roi entries
233c442a Adjust backtest so sell uses stop-loss or roi value as closerate
a0e8bfbd shift buy-signal to one earlier (backtest shifts it forward to avoid lookahead)
409465ac adapt functional tests for new version after rebase
30a6e684 update with new comments and new data for tc5
b8f78cb1 Refactor tests, implement @creslinux's data
e0fda7a5 Add tests validating backtest details
2f55cbde fix #1298
35759b37 Update ccxt from 1.17.429 to 1.17.432
1121ec07 don't have nb_assets as parameter - it's a config setting as any other
86ad0c04 Update pytest from 3.9.2 to 3.9.3
d3387dec Update ccxt from 1.17.427 to 1.17.429
551dc79c Don't overwrite pair_whitelist in config dict
7e4a0bae improve hyperopt.md
a4fc5afb Add hyperopt ROI documentation, add note on methology for hyperopt
57d3a6f7 Update ccxt from 1.17.421 to 1.17.427
f860aab0 Update ccxt from 1.17.411 to 1.17.421
426db721 removing test line
dfeabcf7 Edge tests template refactored to be more readable
c5474794 1) open_trade_index refactored 2) sell index is shifted by 1
5c77dc6b Update ccxt from 1.17.402 to 1.17.411
b09a1d1a 1) do not download ta-lib as we have it offline.  2) removing ta-lib directory but not the file
67ace0a7 trade open time bug resolved (was behind of the market)
b90392f9 Update pytest from 3.9.1 to 3.9.2
59545013 Update numpy from 1.15.2 to 1.15.3
49d16872 Update ccxt from 1.17.399 to 1.17.402
764aed2c Update ccxt from 1.17.395 to 1.17.399
91dc8644 Update hyperopt.md
ee697d60 Update ccxt from 1.17.393 to 1.17.395
530d521d Rebuild complete image on ""cron"" events
39efda19 Add freqtradeorg/freqtrade docker images to the documentation
7301d76c Remove autobuild for technical as it's not versioned
0535660d build technical image
af728301 modify travis to build and push docker
907761f9 Install ta-lib in Docker with script
98738c48 modify install-ta-lib script to support running in docker
184b5ca3 cleanup root dir and create build_helpers
677a9e56 remove skipped test (refresh_whitelist is tested in test_acl_pair)
202b1d1f fix #1289 - we should not modify decimal context
71814ae2 Update requests from 2.19.1 to 2.20.0
c69b8791 Update ccxt from 1.17.392 to 1.17.393
7f9f5324 Add validate_backtest_data script
3c6d10f0 Print missing value count too
bc356c4d Return true/false for validation function
518dcf52 Cleanup some tests 8m is not a valid ticker value
fb52d322 Add validate_backtest_data function
57bc4a86 average trade duration added
d7459bbb refactor get_timeframe out of backtesting class
8a3272e7 don't copy tickerdata_to_dataframe into backtesting
d953190c Update pytest from 3.8.2 to 3.9.1
14e58169 Update urllib3 from 1.23 to 1.24
5134736c Update ccxt from 1.17.388 to 1.17.392
b546f030 Update ccxt from 1.17.383 to 1.17.388
b278dcd6 Update ccxt from 1.17.381 to 1.17.383
631ba464 Show warning if part of backtest data is missing
4b9d04a2 Update ccxt from 1.17.376 to 1.17.381
93503d60 Update ccxt from 1.17.375 to 1.17.376
6aa9cd10 removing outliers per pair and not across all pairs
fb3fd7cb setup script and documentation fixed for TA-Lib and MacOS
912e9bd1 mac installation path
138c8152 remove unused import
701978a4 Add test for dust hiding
36286598 Add tests to check if no failure occurs when pair is not available
792d2dbe Hide ""dust"" from /balance
a4d2bb6f Fix ""No market symbol"" exception in telegram calls
3e8e8a55 Enable analytical telegram commands when stopped
3de3c246 add warning-message when forcebuy_enable is true
6ff4c9b8 Update docs for /forcesell
03fb1885 Update urllib3 from 1.22 to 1.23
a541d0a9 convert tests to packages
44c275c8 flush session for /forcesell all
8c6d7c48 Add tests for /forcebuy
fbe69cee Add /forcebuy to telegram
98c1706c Update ccxt from 1.17.373 to 1.17.375
b1f016b9 Update hyperopt.md
50290039 Allow passing price to buy function
a20ceb9e Add reload_conf to telegram help
21480d42 be more expressive on what ""this value"" is
2cd7b40b Fix spelling in stoploss.md
3af655d1 Update ccxt from 1.17.371 to 1.17.373
d5409287 Update ccxt from 1.17.369 to 1.17.371
1d38c35e Fix typo / word repetition
6d4f68fc unnecessary variables removed
9e44b260 BacktestResult removed as it is not used
bd25212b test case added: edge calculate function
36d928d4 unnecessary if removed
18c04ab4 Update ccxt from 1.17.368 to 1.17.369
ce4f0696 Add logging to download script and enable ccxt_async_config
3973d369 deprecate ccxt_rate_limt
37088cfb add to constants
ddc15132 Add ccxt_config to both config_samples
d1edcf9d Add documentation for ccxt_config
e7d5cf9d Allow loading of any additional configuration to ccxt
d3078d75 test case added: edge stop loss for pair
77cac9e5 autopep8 applied
06d75a8b test cases added: force_stoploss by Edge
9723300a Update ccxt from 1.17.365 to 1.17.368
3ed486f3 update documentation for raspberry
fa387729 Update pytest from 3.8.1 to 3.8.2
1e669c72 Update ccxt from 1.17.363 to 1.17.365
b57d9edd Edge test expectancy function (round 1)
6f79b558 - function renamed to be more readable - expectancy bug resolved
a46b3ec9 first test completed
de20e142 added 9 use cased for testing Edge
a364a1e4 Edge package test cases drafted
697493bd test cases for Edge package drafted
23f89809 edge config added to CONF_SCHEMA and config_full.json.example
8741a637 return type of stake_amount set to float
26b3c3f7 removing unnecessary typing
3b57aef1 config name refactored
9c4fdc1b initializing Edge in Freqtradebot only if it is enabled
d634a034 adding DataFrame type
e4fc298b typo corrected
11c3b3fd trade_df unnecessary type removed
a6c2e40b moving time range to initializer as we have to calculate it once
4a9ed02b develop to version 0.17.3
f306abb3 No need for Exchange class in Edge
8b3631d1 make “if condition” more readable
2056b6f5 no need to initialize a variable with None
ad666ac6 autopep8 corrected
f72fb0ad exchange “None” condition removed as Edge is after Exchange anyway
114fd7fe declaring local variables. using get for configuration
aa194875 removing unnecessary constructor docstring
2a9ca9a3 Removing future from travis and dockerfile
cff83d3e bloody autopep8 again
c8d06e2b filter pairs according to expectancy + bug at the end of array resolved
f15825e3 long line broken to two
e822d5d7 upgrading py_first_1st to 1.1.2: ez_setup.py removed
96a0fc88 Moving Edge before refresh_pairs
21f5a94e using autopep8 for formatting file
25d6ed31 whitespace removed
24364a56 keeping mypy happy
0594deaf removing whitespaces and long lines
75ba6578 unused library + trailing whitespaces removed.
fcf837bf refactoring variable declaration
87df4e45 refactoring backslap (round 2)
40d73de3 refactoring backslap (round one)
e8716f16 calculating expectancy and sort pairs accordingly instead of delta
a806dd45 lost in branches ! typo for some magical unknown reasons
027ec4d9 test_sell_profit_only_enable_loss and test_create_trade_limit_reached fixed
30842864 test_process_trade_creation log message changed: in reality the buy signal is actually triggered
76dd7549 test_get_trade_stake_amount and test_get_trade_stake_amount_no_stake_amount fixed: “pair” arg added to _get_trade_stake_amount
303eefda test_get_trade_stake_amount_unlimited_amount fixed: “pair” argument added to _get_trade_stake_amount
13667835 Dockerfile: installing future before requirements.txt
a26131ce .travis: install future before requirements.txt
29459d7d import libraries organized.
f1b4e4b3 stop loss range “start, end, step” configurable for Edge
cf37093e empty dict default removed
d6d3dfdc removing “if ujson_found is not None:” as “json” refers to “ujson” if it exists
66b1eac1 removing unnecessary ujson import
e1ca8073 removing unnecessary ujson import
fbc77c1f moving stake_currency line back to its initial place
3b925e46 removing default pair value of _get_trade_stake_amount
3e3ed947 added “max_trade_duration” config + using “remove_dumps” config
61095db0 edge config enriched
4fd037f8 removing pdb
4bd956d5 test file removed
74979943 backslap removed from arguments
2d432bfa backtesting rollbacked to develop branch
4746aea0 test file for edge (will be removed)
ef52c7b5 edge positioning put into package
decaf6c4 Backslap bug on “stop loss triggered” indexes resolved
88854cba removing only pumps from dataset
07ba14d1 backslap bug resolved
5d9c7fa8 add point about malicious code
e30d23cf [draft] First version of edge positioning
3f890335 Introduce Commiter guide
601ae054 formatting for contributing.md
bc6b80ff Edge functionality drafted
721fb3e3 remove unused profile import
04d5e857 added option to easily switch between backtesting and backslapping from the commandline option
ab66fe1b prepared for tracking signals
1a673c6a working on moving backslap
0372485c Some reason did not push this... vector calcs redone.
2dc3d6a6 Update backtesting.py
e39ae45d Some reason did not push this... vector calcs redone.
482b8518 Update setup.py
79f931f2 Update backtesting.py
3184c85d default settings to trigger low, take stop
8cea0517 Added stop_stops
ed4bf32f Fixed Stop closing in Index 0 when buy opening on Index 1
baaf0a5b Handle when 0 trades are found in any pairs being tested.
a3139173 Handle a buy on the last candle
357c8c0b sensible defaults
3b0cb7bc Added ujson and py_find_1st to setup.py
8d5da4e6 changed defaults Seperated save trades and print trades options.
ec196053 Added Show trades option
99d16e82 disable time calcs output on vector displaying in debug. Excessive.
885a6534 Disabled full debug  on in last commit Switched Stops to trigger on Low Switched Stops to pay stop-rate not close.
059aceb5 Disabled full debug  on in last commit Switched Stops to trigger on Low Switched Stops to pay stop-rate not close.
0f3339f7 use ujson to load ticker files 30% faster from disk.
4a39a754 Fixed:  self.use_backslap = Bool on line97
5aaf454f GAS trades verified from candle data to excel by hand All pass 3 sells 1 stop loss
fb0edd71 in tech test
eed29a6b update
7174f27e Rewrite to used algned numpy/dataframes updated logic added vector fill for abs/profit/duration in single hit on results.
a8b62a21 hmm
4e68362d Works with reporting output
71c3106f Added ABS and Fees Fixed Index Alignment that was off moving from scratch to FT Fixed Stoploss,   its a negative in FT, had been using positve stop -1 in scratch
07175ebc up
90e3c387 First cut, Bslap science project replacement for freqtrade backtest analysis

```",91629816
597,False,False,2018-10-03T10:09:11Z,2018-10-03T10:10:17Z,"```
91373387 - Merge pull request #1251 from freqtrade/pyup-scheduled-update-2018-10-01
d0c7b7c5 - Update ccxt from 1.17.360 to 1.17.363
b130a923 - Merge pull request #1249 from freqtrade/pyup-scheduled-update-2018-09-30
3af3094a - Merge pull request #1247 from freqtrade/fix_hyperopt_pickle
9d70d250 - Update scikit-learn from 0.19.2 to 0.20.0
05adebb5 - Update ccxt from 1.17.351 to 1.17.360
e1ddddad - Merge pull request #1246 from freqtrade/fix/network_test
84622dc8 - Move test for strategy out of constructor
36e9abc8 - Manually update scikit-learn to 0.20.0
1b290ffb - Update hyperopt to show errors if non-supported variables are used
334e7553 - Fix hyperopt not working after update of scikit-learn to 0.20.0
f4585a27 - Patch exchange to not cause network delays during tests
448f3a71 - Merge pull request #1241 from freqtrade/fix/loadstrategyonce
6e66763e - Only load strategy once during backtesting
89b515be - Merge pull request #1220 from freqtrade/fix/plot_dataframe
d4818957 - Merge pull request #1211 from freqtrade/fix_no_trades_found
4ad3e96a - Merge pull request #1225 from freqtrade/test_acl_improvement
3893b638 - Merge pull request #1213 from freqtrade/fix_mac_install
5dac3b56 - Merge pull request #1238 from freqtrade/fix/buyexception
bcb13d04 - Merge pull request #1239 from freqtrade/pyup-scheduled-update-2018-09-26
f790f953 - Update ccxt from 1.17.350 to 1.17.351
766d3289 - Merge pull request #1204 from freqtrade/move_load_markets
e09674b7 - Merge pull request #1227 from freqtrade/feat/reduce_backtestnoise
88ccdc03 - Fix exception when order cannot be found
d04247cd - Merge pull request #1235 from freqtrade/pyup-scheduled-update-2018-09-25
d13e87d7 - Update ccxt from 1.17.341 to 1.17.350
bbcbf6ad - Merge pull request #1234 from freqtrade/pyup-scheduled-update-2018-09-23
6116c27a - Update pytest from 3.8.0 to 3.8.1
12e62878 - Update numpy from 1.15.1 to 1.15.2
0e168159 - Update ccxt from 1.17.335 to 1.17.341
e1c9b77c - Merge pull request #1230 from freqtrade/pyup-scheduled-update-2018-09-22
54b714ba - Update ccxt from 1.17.327 to 1.17.335
f302882f - Merge pull request #1228 from freqtrade/pyup-scheduled-update-2018-09-21
8e659af5 - Update ccxt from 1.17.324 to 1.17.327
567211e9 - don't print ""NAN"" lines in ""left_open_trades""
95f884f4 - Merge pull request #1226 from freqtrade/pyup-scheduled-update-2018-09-20
53c0f01b - Update sqlalchemy from 1.2.11 to 1.2.12
0aa8557c - Update ccxt from 1.17.316 to 1.17.324
4d5e368c - Remove direct call to pytest fixture to elliminate pytest warning
2d4d1d73 - Merge pull request #1224 from freqtrade/pyup-scheduled-update-2018-09-19
2c5b6aca - Update ccxt from 1.17.311 to 1.17.316
eaa657aa - Merge pull request #1222 from freqtrade/pyup-scheduled-update-2018-09-18
a5d4de80 - Update ccxt from 1.17.305 to 1.17.311
52b75c59 - Merge pull request #1218 from jin10086/develop
f04e4f21 - Fix trailing whitespace
176bae2d - Set default-db url in configuration, not arguments
14e21765 - Fix missing column to load current backtesting export files
eebaede8 - Merge pull request #1219 from freqtrade/pyup-scheduled-update-2018-09-17
9b83a092 - Update ccxt from 1.17.300 to 1.17.305
0a4b2f19 - use --no-cache-dir for docker build
3abc294e - Merge pull request #1216 from 0xflotus/patch-1
6aa18bdd - fixed being
16279bc1 - Merge pull request #1215 from freqtrade/pyup-scheduled-update-2018-09-16
14961e2e - Update ccxt from 1.17.294 to 1.17.300
30ae5829 - Fix SED command for macos
200dfa75 - Wording for readme.md
51b3eb78 - Add section about about clock accuracy to readme.md
9685c09c - Add offset to ""get_trades_for_order""
4303e86e - Merge pull request #1210 from freqtrade/pyup-scheduled-update-2018-09-15
f4d26961 - Update ccxt from 1.17.291 to 1.17.294
029a6798 - Merge pull request #1209 from freqtrade/pyup-scheduled-update-2018-09-14
f5ba34ad - Update ccxt from 1.17.283 to 1.17.291
bcf47b29 - Merge pull request #1208 from freqtrade/pyup-scheduled-update-2018-09-13
91c0e364 - Update ccxt from 1.17.276 to 1.17.283
fadf82dd - Merge pull request #1205 from freqtrade/pyup-scheduled-update-2018-09-12
241b23e5 - Update ccxt from 1.17.271 to 1.17.276
c429eae6 - Adjust remaining tests to _load_markets refactoring
674bad2a - Add and fix tests for load_markets
14b7fc42 - Change returntype for _load_markets to dict
14717b17 - Merge pull request #1203 from freqtrade/pyup-scheduled-update-2018-09-11
51ef1379 - Update ccxt from 1.17.257 to 1.17.271
f954efbd - Adapt tests to not _load_markets
0a290967 - Refactor load_market out of validate_pairs
687dc78d - Merge pull request #1202 from freqtrade/pyup-scheduled-update-2018-09-10
8aaf1745 - Update ccxt from 1.17.250 to 1.17.257
2660be9b - Merge pull request #1201 from freqtrade/pyup-scheduled-update-2018-09-09
65ad9cf7 - Update ccxt from 1.17.242 to 1.17.250
179bcf39 - Merge pull request #1101 from mishaker/ccxt-async
062eca19 - Merge pull request #1199 from freqtrade/doc_ratelimit
46921746 - Merge pull request #1200 from freqtrade/pyup-scheduled-update-2018-09-08
65699f70 - Update ccxt from 1.17.240 to 1.17.242
e57be107 - Document ccxt_rate_limit
5ba6cfe4 - Merge pull request #1195 from freqtrade/update_hyperopt_doc
f0c7394b - Merge pull request #1197 from freqtrade/pyup-scheduled-update-2018-09-07
fb4f83b3 - Update pytest from 3.7.4 to 3.8.0
a49a60b4 - Update ccxt from 1.17.233 to 1.17.240
13ffd880 - merging develop into async. requirement.txt conflict resolved
4e847f26 - explicitly ask for more ressources in hyperopt documentation
0004b324 - Merge pull request #1194 from freqtrade/pyup-scheduled-update-2018-09-06
4f583d61 - Update ccxt from 1.17.231 to 1.17.233
3eb2e92d - Merge pull request #1191 from freqtrade/pyup-scheduled-update-2018-09-05
a748c079 - Update ccxt from 1.17.229 to 1.17.231
1682d6b3 - Merge pull request #1188 from freqtrade/pyup-scheduled-update-2018-09-04
27ffce4c - Update pytest-cov from 2.5.1 to 2.6.0
d62f97dc - Update ccxt from 1.17.223 to 1.17.229
9c1cd4be - Merge pull request #1187 from freqtrade/pyup-scheduled-update-2018-09-03
754027ef - Update ccxt from 1.17.222 to 1.17.223
e9deb928 - Fix bug when exchange result is empty
6b74fb08 - Merge pull request #1119 from creslinux/ta_on_candle
feb14990 - Merge pull request #1186 from freqtrade/pyup-scheduled-update-2018-09-02
3831f198 - Update python-telegram-bot from 11.0.0 to 11.1.0
adfd8c7f - Update ccxt from 1.17.216 to 1.17.222
3fd00c9a - Merge branch 'develop' into ta_on_candle
2ec5a536 - Fix comment location
d35d3bb3 - rename ta_on_candle to process_only_new_candles
cb46aeb7 - rename variable to be more expressive
b8624e59 - Merge pull request #1183 from freqtrade/pyup-scheduled-update-2018-09-01
fa5c8e4b - Update ccxt from 1.17.210 to 1.17.216
9945b975 - Merge pull request #1175 from freqtrade/doc/installation
17d6d923 - Merge pull request #1179 from freqtrade/pyup-scheduled-update-2018-08-30
9560cb80 - Update pytest from 3.7.3 to 3.7.4
3ed97fe5 - Update python-telegram-bot from 10.1.0 to 11.0.0
35c5d4f5 - Update ccxt from 1.17.205 to 1.17.210
a1bd30aa - Fix documentation string
ffd4469c - fix typo, refresh_tickers does not need a return value
54ddd908 - Merge branch 'develop' into ccxt-async
d41f0667 - Merge pull request #1125 from nullart2/order-book
9f8e68ce - Merge branch 'develop' into order-book
f7b67cec - Fix missing docstring
e14e7d9b - Merge pull request #1177 from freqtrade/pyup-scheduled-update-2018-08-29
b659ec00 - Update ccxt from 1.17.199 to 1.17.205
b6b89a46 - move order_book config out of experimental
c9ee5280 - Add section about raspberry / conda to install.md
9bce6c5f - Add error-section for windows
cdfff574 - Merge pull request #1174 from freqtrade/pyup-scheduled-update-2018-08-28
19628d31 - Update ccxt from 1.17.194 to 1.17.199
32ae344e - Merge pull request #1172 from freqtrade/pyup-scheduled-update-2018-08-27
c99ff78f - Update pytest from 3.7.2 to 3.7.3
188cfc43 - Update ccxt from 1.17.188 to 1.17.194
1a9c085f - Restructure install documentation
eefc5349 - Merge pull request #1171 from freqtrade/pyup-scheduled-update-2018-08-26
fe169483 - Update ccxt from 1.17.184 to 1.17.188
4dfaf1d2 - Merge pull request #5 from xmatthias/order_book_xmatt
c5efcace - change pip3.6 to pip3
c770eae7 - Merge pull request #1168 from freqtrade/pyup-scheduled-update-2018-08-25
2ee1a2d8 - Update ccxt from 1.17.176 to 1.17.184
42587741 - mock exchange to avoid random failures
a489a044 - Mock Exchange results to avoid random test-failures
1d080219 - Merge pull request #1167 from freqtrade/pyup-scheduled-update-2018-08-24
ab628c13 - Update ccxt from 1.17.170 to 1.17.176
a37802e2 - Merge pull request #1165 from freqtrade/pyup-scheduled-update-2018-08-23
8c0e3375 - Update ccxt from 1.17.163 to 1.17.170
cac7e2c7 - Merge pull request #1164 from freqtrade/pyup-scheduled-update-2018-08-22
ebc07239 - Update numpy from 1.15.0 to 1.15.1
4508349d - Update ccxt from 1.17.157 to 1.17.163
7376a0d5 - Merge pull request #1131 from freqtrade/parametrize_outdated_ticker
36e0e652 - Merge pull request #1135 from freqtrade/fix/rpc_balance_vtho
5e4ae46b - Merge pull request #1163 from freqtrade/remove_amount_to_lots
66d52c12 - Merge pull request #4 from xmatthias/ccxt_async_retrier
6e90d482 - remove amount_to_lots (deprecated / removed)
37bb6ac5 - Merge pull request #1162 from freqtrade/pyup-scheduled-update-2018-08-21
8a844488 - Update sqlalchemy from 1.2.10 to 1.2.11
e5707b8a - Update ccxt from 1.17.152 to 1.17.157
8f41e0e1 - Use setting in 'exchange' dict
4bf05422 - Merge pull request #1161 from freqtrade/pyup-scheduled-update-2018-08-20
43f73c5a - Update ccxt from 1.17.146 to 1.17.152
a077955e - update json.load to json_load - followup to #1142
0674c3e8 - Merge pull request #1142 from freqtrade/ujson-loader
6d1c82a5 - Remove last refreence to `get_candle_history`
de0f3e43 - remove unused mocks
694b8be3 - Move variables from class to instance
9403248e - have plot-script use async ticker-refresh
c955c7c4 - Merge pull request #1160 from freqtrade/pyup-scheduled-update-2018-08-19
5a087670 - Update pytest from 3.7.1 to 3.7.2
97e9a44f - Update ccxt from 1.17.139 to 1.17.146
088c54b8 - remove unnecessary function
d722c121 - fix bug in async download script
d556f669 - Add async retrier
66255b8c - Merge pull request #1159 from freqtrade/pyup-scheduled-update-2018-08-18
bc22320f - Update ccxt from 1.17.134 to 1.17.139
64781643 - Merge pull request #1157 from freqtrade/pyup-scheduled-update-2018-08-17
56188f2f - Update ccxt from 1.17.132 to 1.17.134
eb4bc664 - Merge pull request #1156 from freqtrade/add_min_roi_test
d1c5eebf - Add explicit test on handling min_roi_reached
98240e0e - Merge pull request #1154 from freqtrade/min_roi_output
0750d356 - Merge pull request #1141 from freqtrade/fix/python3.7
f57bf8f2 - Merge pull request #1155 from freqtrade/pyup-scheduled-update-2018-08-16
dc41a19f - Update ccxt from 1.17.126 to 1.17.132
16fa877b - Remove verbosity of trying backup tables - properly log if databasemigration happened
ff8ed564 - Refactor refresh_pairs to exchange and fix tests
e6e2799f - Keeping cached Klines only in exchange and renaming _cached_klines to klines.
4a8c1209 - Output min-roi setting when overwriting from config
```",91629816
598,False,False,2018-08-16T05:12:36Z,2018-08-16T05:54:33Z,"Changes:
```
aa10c6e - master to RELEASE 0.17.1
e02f964 - Merge pull request #1152 from freqtrade/pyup-scheduled-update-2018-08-15
be373e7 - Update ccxt from 1.17.122 to 1.17.126
6e2a2ab - Merge pull request #1151 from freqtrade/version-bump
dd7f540 - Push develop as 0.17.2
78d1a67 - Merge pull request #1140 from freqtrade/update_plotly
2999588 - Merge pull request #1150 from nullart2/informative_startup
1edbc49 - refactor
b34aa46 - additional tests
48e218d - test_talib fix
2bc7a66 - informative startup
8b9f1ca - Merge pull request #2 from freqtrade/develop
05cfbde - Merge pull request #1146 from freqtrade/pyup-scheduled-update-2018-08-14
04878da - Update ccxt from 1.17.118 to 1.17.122
5049485 - Merge pull request #1144 from freqtrade/pyup-scheduled-update-2018-08-13
eca8682 - Update ccxt from 1.17.113 to 1.17.118
a488734 - Merge pull request #1143 from freqtrade/pyup-scheduled-update-2018-08-12
2e78379 - Update ccxt from 1.17.106 to 1.17.113
7f6f579 - update plotly dependency
e73331b - Merge pull request #1124 from berlinguyinca/database_tuning
ffa4715 - Flake8 fix
5f8ec82 - Revert ""updated dockerfile and requirements""
3ad6ee6 - Merge pull request #1139 from freqtrade/pyup-scheduled-update-2018-08-11
5bec389 - Update ccxt from 1.17.94 to 1.17.106
853374d - Merge pull request #1136 from freqtrade/pyup-scheduled-update-2018-08-09
1bcd433 - Update ccxt from 1.17.86 to 1.17.94
ed4771b - Merge pull request #1130 from freqtrade/fix_metadatatests
636ae1d - Merge pull request #1134 from freqtrade/pyup-scheduled-update-2018-08-08
4d03fc2 - Update ccxt from 1.17.84 to 1.17.86
8631104 - Merge pull request #1132 from freqtrade/pyup-scheduled-update-2018-08-07
3d94720 - Update ccxt from 1.17.81 to 1.17.84
131d268 - Fix failing tests when metadata in `analyze_ticker` is actually used
eca5c6f - Merge pull request #1129 from freqtrade/pyup-scheduled-update-2018-08-06
bc62f62 - Update ccxt from 1.17.78 to 1.17.81
199bd7b - Merge pull request #1123 from freqtrade/fix-db_migration
8fc0f6e - Merge pull request #1128 from Axel-CH/fix-talib-prescision
65f7b75 - fix flake8 issue
848ecb9 - remove unnecessary seb command
a555460 - add sed command in doc, fix travis error
0b825e9 - fix talib bug on bollinger bands and other indicators when working on small assets, rise talib prescision and add test associated
a2730cd - Merge pull request #1126 from freqtrade/pyup-scheduled-update-2018-08-05
ba4de41 - Update pandas from 0.23.3 to 0.23.4
be9436b - Update ccxt from 1.17.73 to 1.17.78
d73d0a5 - Fix database migration
ea506b0 - Add test for failing database migration
6ef1467 - Merge pull request #1122 from freqtrade/pyup-scheduled-update-2018-08-04
721341e - Update ccxt from 1.17.66 to 1.17.73
a586a75 - Merge pull request #1120 from freqtrade/pyup-scheduled-update-2018-08-03
b963b95 - Update pytest from 3.7.0 to 3.7.1
3037d85 - Update ccxt from 1.17.63 to 1.17.66
2cfa3b7 - updated dockerfile and requirements
85c73ea - added index
80a1c6e - Merge pull request #1106 from creslinux/xbt
ea72af7 - Merge pull request #1118 from freqtrade/pyup-scheduled-update-2018-08-02
1450084 - Update ccxt from 1.17.60 to 1.17.63
398c617 - Merge pull request #1116 from creslinux/script_get_market_pairs
00b81e3 - fix readme.md spelling
0fc4a79 - Add note to readme for binance users
7f4472a - As requested in issue #1111 A python script to return
e282d57 - fix broken test
3a5b435 - Merge pull request #1089 from freqtrade/feat/backtest_multi_strat
17d78b7 - Merge pull request #1115 from creslinux/candlesnottickers
1f97d0d - fix
a741f11 - missing __init__.py
f619cd1 - renamed/refactored get_ticker_history to get_candle_history as it does not fetch any ticker data only candles and is causing confusion when developer are talking about candles /tickers incorreclty.
29dcd2e - Merge pull request #1108 from freqtrade/pyup-scheduled-update-2018-08-01
f7f75b4 - Update ccxt from 1.17.56 to 1.17.60
7458aa4 - Merge pull request #982 from berlinguyinca/BASE64
36f91fc - XBT missing as a market symbol for BTC in constants
5b8ee21 - Adapt to pair_to_strat methology
038e976 - Merge branch 'develop' into BASE64
40ee86b - Adapt after rebase
76fbb89 - use print for backtest results to avoid odd newline-handling
c648e2a - Adjust documentation to strategy table
765d1c7 - Add test for stratgy summary table
028589a - Add strategy summary table
5125076 - Fix typo
4ea6780 - Update documentation with --strategy-list
a8b55b8 - Add test for strategy-name injection
a57a2f4 - Store backtest-result in different vars
bd3563d - Add test for new functionality
644f729 - Refactor strategy loading to __init__
5f2e92e - Refactor backtesting
65aaa3d - Extract backtest strategy setting
9a42aac - Add testcase for --strategylist
56046b3 - Add strategylist option to backtesting
e7d0439 - Add new arguments
e38e0e6 - Merge pull request #1103 from misaghshakeri/ccxt_ratelimit_configurable
74fa4dd - CCXT rate limit config default to => true
66a0986 - Merge pull request #1102 from freqtrade/pyup-scheduled-update-2018-07-31
7248018 - Update pytest from 3.6.4 to 3.7.0
ab4343b - Update ccxt from 1.17.49 to 1.17.56
be1298d - Initializing CCXT with rate_limit parameter optional (default to false)
1044d15 - Merge pull request #1096 from freqtrade/cleaner-tests
2d7ef30 - Merge pull request #1093 from freqtrade/fix/talib-install
b83487c - added required changes
d048f3c - Merge pull request #1078 from creslinux/sandbox2
5a55cd2 - Merge branch 'develop' into sandbox2
f85cc42 - Merge branch 'develop' into cleaner-tests
155e134 - Merge pull request #1097 from creslinux/gdax3
81cf722 - Merge pull request #1044 from freqtrade/pair_to_strat
fe27ca6 - Update test_exchange.py
012fe94 - Recommitted as new branch with unit tests - GIT screwd me on the last PR
075a42d - Merge pull request #1095 from freqtrade/pyup-scheduled-update-2018-07-30
8b8d3f3 - default_conf is function-scoped fixture, no need to deepcopy it
3ecc502 - Update ccxt from 1.17.45 to 1.17.49
67d1693 - avoid validating default_conf hundreds of times
3083e5d - use pytest fixture properly in test_hyperopt
affdeb8 - rename func to throttled_func
fb80964 - freqtradebot tests don't need to mock coinmarketcap anymore
1c20ef8 - remove parens
df53e91 - fix one more test that was missing mock and needed internet
e242842 - remove more useless docstrings from tests
2401fa1 - Change missed calls to advise_* functions
787d604 - Switch from pair(str) to metadata(dict)
941879d - revert docs to use populate_* functions
82680ac - improve docstrings for strategy
5fbce13 - update hyperopt to use new methods
39cf0de - don't use __annotate__
f286ba6 - overload populate_indicators to work with and without pair argumen
98665dc - revert inadvertent wihtespace changes
cf83416 - update script to use new method
791c5ff - update comments to explain what advise methods do
8a9c54e - use new methods
18b8f20 - fix small test bug
f12167f - Fix backtesting test
df8700e - Adapt after merge from develop
0eff671 - improve tests for legacy-strategy loading
aa772c2 - Add tests for advise_indicator methods
4ebd706 - improve comments
fa48b8a - Update documentation with advise-* methods
c9a97bc - Add tests for deprecation
2f905cb - Update test-strategy with new methods
7300c0a - remove @abstractmethod as this method may not be present in new strategies
921f645 - fixing tests...
0dcaa82 - fixed test?
3dd7d20 - more test fixes
abc55a6 - fixing? hyperopt
5871488 - fixed errors and making flake pass
2e6e502 - fix mypy and tests
19b9966 - satisfied flake8 again
57f6836 - revised code
296d3d8 - working on refacturing of the strategy class
336cd52 - Merge pull request #1094 from freqtrade/pyup-scheduled-update-2018-07-29
f832edf - remove useless docstrings from tests
1bbb86c - remove nonsense asserts
2ef3540 - Update pytest from 3.6.3 to 3.6.4
9c7f53d - Update ccxt from 1.17.39 to 1.17.45
ebfcc0f - install numpy before ta-lib to fix build errors
4202413 - Merge pull request #1092 from freqtrade/revert-1090-ujson-loader
7f27bef - Revert ""backtesting: try to load data with ujson if it exists""
dd71071 - Added logger.info when Sandbox is enabled.
c85c7a3 - Documentation fixes.
1e804c0 - flake 8
fc06d02 - Unit tests for sandbox pass / fail scenarios
618784d - Merge pull request #1090 from freqtrade/ujson-loader
cfcc2e6 - Merge pull request #1088 from freqtrade/fix/unpatched_mock
187e039 - Merge pull request #1034 from freqtrade/feat/positive_sl_limit
b3df1b1 - added documentation:
0a05966 - Submitting with unit test for the working scenario.
cb2fff8 - mypy doesn't handle common idiomacy so disable the line (see the open issue more details)
cdd8cc5 - backtesting: try to load data with ujson if it exists
8648ac9 - Update documentation with hot to sandbox test. Allowing end-to-end GDAX API use without risking real money.
083befa - Merge pull request #1087 from freqtrade/pyup-scheduled-update-2018-07-28
099e702 - Update ccxt from 1.17.29 to 1.17.39
6ab8fa8 - Merge pull request #1079 from creslinux/apiAuthPass
b2b81c8 - Update documentation with hot to sandbox test. Allowing end-to-end GDAX API use without risking real money.
243b63e - fix rpc test going to network (unsuitable for flights...)
a3d870a - Merge pull request #1075 from freqtrade/extract_get_history
1ceaa22 - Merge pull request #1080 from freqtrade/pyup-scheduled-update-2018-07-27
c8ac985 - Merge pull request #1081 from sandoche/patch-1
ca0d658 - Error fixed in the quickstart documentation
4547ae9 - Update ccxt from 1.17.20 to 1.17.29
40ae250 - Update constants.py
c472531 - have to begin before we can stop
7efa810 - Removed ; at line end.
d23b3cc - odd cut and paste error fixed.
48cd468 - Don't do all network calls at once without async
df3e76a - Remove legacy code, fix missed call
f2a9be3 - Adjust tests and remove legacy variable
3324cdf - add mock for get_history in patch_get_signal
484103b - extract get_history_data from get_signal
6e437a7 - Merge pull request #1074 from freqtrade/pyup-scheduled-update-2018-07-26
0c7cead - Update ccxt from 1.17.11 to 1.17.20
726b94b - Merge pull request #1069 from freqtrade/feat/movefiatconverttorpc
452a1ca - don't default fiat_convert to None for outputs
7b49f74 - remove #FIX which was fixed
78f8c65 - Merge pull request #1072 from freqtrade/datesorting-backtest-fix
4b38c8b - use pandas own min and max for column sorting
3fa1c5b - Merge pull request #1070 from freqtrade/pyup-scheduled-update-2018-07-25
4f4daf4 - Update ccxt from 1.16.89 to 1.17.11
dc1ad3c - whitespace issues
ff64359 - Fix random test failure
23c2a75 - Merge pull request #1066 from freqtrade/pyup-scheduled-update-2018-07-24
7feea8c - Update numpy from 1.14.5 to 1.15.0
cf6e229 - Update ccxt from 1.16.88 to 1.16.89
4928686 - Remove currency from daily table
30b72ad - don't show fiat-currency if not set
1a9ead4 - fix missed fiat_display_currency config value
0b31905 - Merge pull request #1018 from freqtrade/feat/sell_reason
456e49f - default fiat_currency to none
ab67822 - Merge pull request #1062 from freqtrade/fix/migratescript
7f877ae - Merge pull request #1063 from freqtrade/pyup-scheduled-update-2018-07-23
4575919 - Update ccxt from 1.16.86 to 1.16.88
10fc2c6 - Fix bug causing a database-migration to fail from aspecific state
643de58 - Add test to check for a mid-migrated database (not old but not new)
aba3c69 - Merge pull request #1061 from freqtrade/fix_networkcall
0775a37 - rename sellreason to sell_Reason, fix typos
23fe0db - Add missing mock
f54ac5a - revert bugfix done in it's own branch
4c84115 - Don't require fiat-currency
bd2771b - use correct property
4d864df - Add tests for no_fiat functionality
fae4c3a - only init if stake_currency is set
2b29786 - adjust checks to fit new functionality
6cc0a72 - ADd optional to class _fiat_convert
f53e037 - Merge pull request #1060 from freqtrade/pyup-scheduled-update-2018-07-22
5ab1e66 - Update ccxt from 1.16.80 to 1.16.86
849ded7 - Merge pull request #1057 from freqtrade/fix/fiatconvert_error
f297d22 - fix some tests in rpc_telegram
0681a80 - move cryptofiatconvert to rpc
be3f047 - remove unnecessary mocks - add mocks which went to exchange
9467461 - only init FIATConvert when telegram is enabled
66af411 - Catch all exceptions from fiat-convert api calls
6f78988 - Merge pull request #1055 from freqtrade/pyup-scheduled-update-2018-07-21
ab3478a - Update ccxt from 1.16.75 to 1.16.80
00fa41d - Merge pull request #1051 from freqtrade/pyup-scheduled-update-2018-07-20
7f6c79e - Update ccxt from 1.16.68 to 1.16.75
b45128f - Merge pull request #1050 from freqtrade/xmatt_verbosity2
dd1290e - Add multiple verbosity levels
6270188 - Merge pull request #1049 from freqtrade/revert-1045-xmatt_verbosity
90915b6 - Revert ""Add more verbosity levels""
1b2bfad - Fix wrong test
060469f - Add stuff after rebase
4fb9823 - fix rebase problem
760c79c - Use `.center()` to output trades header line
a452864 - Use namedtuple for sell_return
ad98c62 - update backtest anlaysis cheatsheet
506aa0e - Add print_sales table and test
426c25f - record ticker_interval and strategyname
4059871 - Add get_strategy_name
2a61629 - Export sell_reason from backtest
8c0b19f - Check sell-reason for sell-reason-specific tests
838b0e7 - Remove unused import
cbffd36 - add sell_reason to backtesting
0147b16 - remove optional from selltype
49a7c7f - fix tests
1af24af - Merge pull request #1047 from freqtrade/pyup-scheduled-update-2018-07-19
0cc1b66 - Merge pull request #1037 from freqtrade/fix/backtest-comment
6070d81 - Merge pull request #1040 from freqtrade/xmatthias_backtest_duration
f2bfc9c - Update ccxt from 1.16.57 to 1.16.68
f991109 - Add sell-reason to sell-tree
6bb7167 - Add sellType enum
365ba98 - add option to full_json example
6a3c8e3 - update docs for trailing stoploss offset
c0a7725 - Add stoploss offset
71100a6 - update documentation with new options
8f25403 - Add short form for parameters, change default for hyperopt
aa69177 - Properly check emptyness and adjust floatfmt
64f9334 - Merge pull request #1007 from freqtrade/remove-analyze
aaa58a9 - Merge pull request #1045 from freqtrade/xmatt_verbosity
75c0a47 - Test setting verbosity in commandline
1ab7f5f - add tests for more debug levels
789b980 - Allow different loglevels
7134c15 - Merge pull request #1024 from freqtrade/feature/webhook
79b1030 - output duration in a more readable way
ac6955f - Merge pull request #1041 from freqtrade/pyup-scheduled-update-2018-07-18
a374f95 - Update ccxt from 1.16.50 to 1.16.57
f9f6a3b - cast to int to keep exports constant
8e4d2ab - Fix typo
08237ab - Fix wrong backtest duration
5b3fa3c - Merge pull request #1039 from Lufedi/develop
ee8e890 - Add docs to get_trade_stake_amount function
3df79b8 - fix hanging intend
a290286 - update documentation
c82276e - add --disable-max-market-positions
b29eed3 - update documentation
e176184 - Rename --realistic-simulation to --enable-position-stacking
85fd4dd - rename analyze.py to exchange_helpers.py
78205da - Merge pull request #1036 from freqtrade/pyup-scheduled-update-2018-07-17
e021d22 - Update ccxt from 1.16.36 to 1.16.50
4a26eb3 - fix plot_profit to use strategy instead of Analyze
50b15b8 - fix plot_dataframe to use strategy instead of Analyze
e11ec28 - remove leftover commented-out code
06d024c - make pytest ignore this file
0842646 - fix the last failing unit test
dbc3874 - __init__ must return None to please mypy
78af4bc - move and fix tests from Analyze to interface of strategy
2795db3 - Merge pull request #1033 from freqtrade/pyup-scheduled-update-2018-07-16
4f95772 - Update scikit-learn from 0.19.1 to 0.19.2
62f4d73 - Update ccxt from 1.16.33 to 1.16.36
a3466f4 - Merge pull request #1031 from freqtrade/feat/update_configdict
050afe2 - Merge pull request #979 from creslinux/Check_timeframes
5c87c42 - restore one analyze test
aeb4102 - refactor Analyze class methods to base Strategy class
f6b8c2b - move parse_ticker_dataframe outside Analyze class
85e6c95 - remove pass-through methods from Analyze
a74147c - move strategy initialization outside Analyze
727f569 - Merge pull request #1032 from freqtrade/pyup-scheduled-update-2018-07-15
8f59759 - Update ccxt from 1.16.16 to 1.16.33
1582260 - consistent use of the config dict within the test
b4ba641 - Update config dict with attributes loaded from strategy
682f4c1 - Merge pull request #1030 from freqtrade/pyup-scheduled-update-2018-07-14
e1de988 - Update sqlalchemy from 1.2.9 to 1.2.10
bc83c34 - Update ccxt from 1.16.12 to 1.16.16
278e715 - adjust webhook tests
1284627 - move url to private class level
120fc29 - use dict comprehension
6336d8a - remove copy leftover
ee2f6cc - Add test for enable_webhook
144d308 - Allow enabling of webhook
3ca161f - Add webhook config
f55df7b - improve README.md formatting (styling only)
71df41c - add documentation for rpc_webhook
a464306 - allow more flexibility in webhook
25250f7 - don't hardcode post parameters
fa85127 - add tests for webhook
ae22af1 - fix typo
6e16c1d - add webhook test file
266092a - Merge pull request #1029 from freqtrade/mypy-fix
fa8b349 - rpc: dont re-use variables with different types
04bed3e - Merge pull request #1027 from peterkorodi/patch-2
68ddd1b - Update plotting.md
b6e1020 - Merge pull request #1026 from freqtrade/pyup-scheduled-update-2018-07-13
5b02b87 - Update ccxt from 1.16.6 to 1.16.12
c17e8d6 - Merge pull request #972 from freqtrade/feature/rewrite-rpc
cb8cd21 - add tests for telegram.send_msg
a559e22 - remove duplicate send_msg invocation
7eaeb8d - status: return arrow object instead humanized str
0920fb6 - use more granular msg dict for buy/sell notifications
4cb1aa1 - use dict as argument for rpc.send_msg
96a405f - implement name property in abstract class
112998c - refactor _rpc_balance
f1a370b - return dict from _rpc_status and handle rendering in module impl
29670b9 - remove markdown formatting from exception string
df8ba28 - convert start, stop and reload_conf to return a dict
5288e18 - Merge pull request #1022 from freqtrade/pyup-scheduled-update-2018-07-12
ddfc472 - Update ccxt from 1.15.42 to 1.16.6
bd46b4f - Merge pull request #1015 from freqtrade/xmatthias-patch-1
46708e7 - Merge pull request #1014 from freqtrade/pyup-scheduled-update-2018-07-11
06c9494 - add missing s to Backtest cum results
8f6252b - Update ccxt from 1.15.35 to 1.15.42
1f16ff2 - Merge pull request #1010 from jblestang/refactoring_create_trade_function
aa23663 - Merge pull request #1001 from xmatthias/feat/backtest_cum_profit
8b72560 - Merge pull request #1006 from freqtrade/update_plotly
773fb59 - Reafcotring Create Trade
3540ba3 - Merge pull request #1009 from freqtrade/pyup-scheduled-update-2018-07-10
d546a4b - Update ccxt from 1.15.28 to 1.15.35
b4be3c2 - Merge pull request #1002 from xmatthias/test/use_open_backtest
85c6051 - Fix test crash
6be6448 - replace ""transparent"" with rgb to fix exception in plotly 3.0.0
f5bc65b - update plotly
a7a8263 - Merge pull request #1004 from berlinguyinca/patch-2
b9916b6 - Merge pull request #1005 from freqtrade/pyup-scheduled-update-2018-07-09
b773e34 - Update ccxt from 1.15.27 to 1.15.28
4654792 - Fixing database issues
750d737 - Add tests for change to open_rate
0bd9674 - Merge pull request #1000 from pan-long/fix-doc
8b06000 - Use open-rates for backtesting
efaa8f1 - Improve formattiong of table
3848764 - fix tests for backtest-result output table
1a24afe - add cumsum to backtest-results
8fb146b - Merge pull request #992 from freqtrade/backtest_optimize
05b078b - Merge pull request #999 from freqtrade/pyup-scheduled-update-2018-07-08
6926e46 - Merge pull request #984 from freqtrade/test_backtest_results
3476410 - Merge pull request #997 from freqtrade/fix/timedout_candle
17c9c18 - Update pandas from 0.23.2 to 0.23.3
cc107bb - Update ccxt from 1.15.25 to 1.15.27
8dd6e29 - don't flag data as outdated which isn't
3e03a20 - reduce calculation effort (slightly!)
570d27a - Add testcase where ticker_interval is not in the configuration
7c8c8e8 - Merge pull request #990 from freqtrade/update_dockerfile
2b488d1 - Update Dockerfile to 3.6.6
e98efe3 - Merge pull request #989 from freqtrade/pyup-scheduled-update-2018-07-07
3f6e9cd - Add tests for validate_timeframes
af17cef - fix existing tests to work with validate_timeframes
742fefa - Update pandas from 0.23.1 to 0.23.2
08fe10e - Update ccxt from 1.15.21 to 1.15.25
9906da4 - move comment to correct place
54976fa - Add more tests to validate buy/sell rows
e1d7c72 - Merge pull request #983 from freqtrade/pyup-scheduled-update-2018-07-06
af03c17 - Update ccxt from 1.15.13 to 1.15.21
1897a1c - fixed mypy issues, seriosuly...
58879ff - fixed braket
e1f5745 - Update resolver.py
1c48902 - Merge branch 'develop' into BASE64
8bbee40 - integrated BASE64 encoded strategy loading
c35d1b9 - Add test which checks the backtest result
4f642b7 - Merge pull request #981 from freqtrade/fstrings-in-use
e808b3a - rpc: get rid of extra else and fix mypy warning
df68b09 - rpc: fstrings
adbffc6 - telegram: fstrings in use
21fc933 - convert_backtesting: fstrings in use
a2063ed - persistence: fstrings in use
7dca3c6 - freqtradebot,main,hyperopt: fstrings in use
03c112a - config, optimize: fstrings in use
c77686c - Merge pull request #980 from freqtrade/pyup-scheduled-update-2018-07-05
239f860 - Update pytest from 3.6.2 to 3.6.3
bfd1e90 - Update ccxt from 1.15.8 to 1.15.13
5ab644d - flake 8 fix
966668f -  Handle if ticker_interval in config.json is not supported on exchange.
d8d0579 - Merge pull request #930 from freqtrade/skopt
64c68d9 - Merge pull request #976 from freqtrade/sort-imports
700f02d - Merge pull request #977 from freqtrade/pyup-scheduled-update-2018-07-04
ac20bf3 - Update ccxt from 1.15.7 to 1.15.8
bf4d0a9 - sort imports
96bb2ef - use joblib.dump and load for trials
c4a8435 - change pickle file name to better suit it's current purpose
9dbe0f5 - fix tests after changing the dumping and pickling dataframe in hyperopt
3a7056e - run at least one epoch
2cde540 - remove dead code
ef59f9a - sort imports in hyperopt.py
e91cfbf - Merge pull request #975 from freqtrade/pyup-scheduled-update-2018-07-03
2c0e950 - Update ccxt from 1.15.3 to 1.15.7
ee4754c - avoid re-serialization of whole dataframe
4a26b88 - improve documentation
2713fdb - use cpu count explicitly in job count
79aab4c - use fstring
2b34d10 - Merge pull request #973 from freqtrade/pyup-scheduled-update-2018-07-02
76343ec - Update ccxt from 1.14.301 to 1.15.3
fa8fc3e - handle the case where we have zero buys
aec3f58 - Merge branch 'develop' into skopt
a58d51d - update hyperopt documentation
5e4a6ba - Merge pull request #963 from freqtrade/feat/stop_loss
3c5be55 - remove unnecessary variable
782570e - Address PR comment
ed2a1be - Merge branch 'develop' into feat/stop_loss
937644a - change while-loop to enumerate - add intensified test for this scenario
e39d88e - Address some PR comments
f91263c - Merge pull request #966 from freqtrade/feat/revamp_exchangetest
e2127f5 - Merge pull request #969 from xmatthias/split_unfilled
2dc8815 - address PR comments
c66f858 - rename innerfun to mock_ccxt_fun
8023fdf - Merge pull request #971 from freqtrade/fix/nonmocked_markets
2cee8e5 - Merge pull request #965 from freqtrade/fix/fix_959
8f49d5e - documentation updates
9e3e900 - Add get_markets mock to new tests
14e12bd - Fix missing comma in example.json
c29163a - Merge pull request #970 from freqtrade/pyup-scheduled-update-2018-06-30
5a591e0 - Update sqlalchemy from 1.2.8 to 1.2.9
c447644 - Update ccxt from 1.14.295 to 1.14.301
98108a7 - separating unfulfilled timeouts for buy and sell
0ce0893 - mypy fixes
6dd5f85 - Merge pull request #954 from freqtrade/feat/allow_backtest_plot
d8f2a68 - Merge pull request #967 from freqtrade/pyup-scheduled-update-2018-06-29
8a941f3 - Update ccxt from 1.14.289 to 1.14.295
cf6b1a6 - increase exchange code coverage
dcdc18a - rename test-function
15c7854 - add test for exchange_has
fe8a216 - add test for Not supported
ebbfc72 - increase test coverage
8ec9a09 - Standardize retrier exception testing
2d4ce59 - catch crash with cobinhood
c5a00b4 - Merge pull request #964 from freqtrade/pyup-scheduled-update-2018-06-28
7cecae5 - Update ccxt from 1.14.288 to 1.14.289
d5ad066 - support multiple db transitions by keeping the backup-table dynamic
860b270 - update db migrate script to work for more changes
35e07bf - Merge pull request #962 from freqtrade/pyup-scheduled-update-2018-06-27
19beb09 - Update ccxt from 1.14.272 to 1.14.288
8ecdae6 - add mypy ignore (and comment as to why)
e6e868a - remove markdown code type as it is not valid json
78e6c9f - add tests for trailing stoploss
c997aa9 - move initial logic to persistence
a91d75b - Add test for adjust_stop-loss
e9d5bce - cleanly check if stop_loss is initialized
88b898c - add test for moving stoploss
8bec505 - add test for trailing_stoploss
a3708bc - add missing test
03005bc - update documentation
da5be9f - add stop_loss based on work from @berlinguyinca
3e167e1 - update sample configs
5015bc9 - slight update to persistence
243c36b - get persistence.py for stop_loss
9ac3c55 - fix some stoploss documentation
257e184 - Update stoploss.md
54f52fb - Create stoploss.md
e1d8a59 - Merge pull request #960 from freqtrade/pyup-scheduled-update-2018-06-26
7c2a50c - Update ccxt from 1.14.267 to 1.14.272
4c7d1c9 - Merge pull request #957 from freqtrade/pyup-scheduled-update-2018-06-25
4f1fa28 - Update ccxt from 1.14.257 to 1.14.267
2b6407e - remove unused tests from hyperopt
0bddc58 - extract loading previous results to a method
17ee7f8 - fix typo in requirements.txt
375ea94 - Merge pull request #956 from freqtrade/fix/download_backtest
43f1a1d - rework download_backtest script
e70cb96 - document what to do with exported backtest results
a8cb0b0 - Merge pull request #955 from freqtrade/pyup-scheduled-update-2018-06-24
118a43c - fixing tests for hyperopt
5e7e977 - Update ccxt from 1.14.256 to 1.14.257
660ec6f - fix parameter type
```",91629816
599,False,False,2018-06-23T21:22:51Z,2018-06-23T21:25:52Z,"* CCXT in use
* alot of new features",91629816
600,False,False,2018-05-12T06:50:01Z,2018-05-12T06:55:16Z,**Note** this is the final release that uses our own implementation of bittrex. After this release we will be using [ccxt](https://github.com/ccxt/ccxt) library for the exchanges.,91629816
601,False,False,2018-05-12T06:43:22Z,2018-05-12T06:44:42Z,"## Release Summary
The community was again very active, thank you for your PR. We are proud to release another major version.

Majors improvements:
* [Custom strategies](https://github.com/gcarq/freqtrade/pull/400)
* [Support multiple Ticker Interval](https://github.com/gcarq/freqtrade/pull/391): 1m, 5m, 30 min, 60 min and 1 day ticker
* Hyperopt will calculate your [minimal_roi](https://github.com/gcarq/freqtrade/pull/436)
* [Replace matplotlib with Plotly](https://github.com/gcarq/freqtrade/pull/454)
* [Bot Stability improved](https://github.com/gcarq/freqtrade/issues/226)

## Breaking Changes

This version introduces a major update on strategies. Indicators, Buy and Sell strategies have moved from `analyze.py` to custom strategies you can create into `user_data/strategies/` folder.

We suggest you starting by reading the updated documentation about the strategies: [Bot usage](https://github.com/freqtrade/freqtrade/blob/develop/docs/bot-usage.md#how-to-use---strategy) and [backtesting](https://github.com/freqtrade/freqtrade/blob/develop/docs/backtesting.md)

The bot still includes a default strategy, but you can now create and update your own strategy without worrying of merge conflicts at each release. It will also allow you to play with different strategies without updating the bot source code. 


### How to move your strategy into a custom strategy?

1. Duplicate `user_data/strategies/test_strategy.py` to a new file `user_data/strategies/custom_strategy.py`
2. Replace the content of `populate_indicators()`, `populate_buy_trend()`, `populate_buy_trend()`, and `populate_sell_trend()` by the customization you have made previously into `freqtrade/analyse.py`
3. Define `minimal_roi`, `stoploss`, and `ticker_interval` (You can remove them from your configuration)
4. Start the bot with the param `--strategy <strategy_filename>` or `-s <strategy_filename>` 

```bash
python3 ./freqtrade/main.py --strategy custom_strategy
```
If the strategy file is not found or contains code errors the bot will fallback to the default strategy included (located into `freqtrade/strategy/default_strategy.py`).

**Note:** Strategies already integrates `minimal_roi`, `stoploss`, and `ticker_interval` values. This value in the config file becomes optional and can be removed. However, if you keep `minimal_roi`, `stoploss`, and `ticker_interval` they will override the strategy values.


### Strategies samples
* Test strategy included with the bot: [user_data/strategies/test_strategy.py](https://github.com/freqtrade/freqtrade/blob/develop/user_data/strategies/test_strategy.py)
* multiple additional strategies: [here](https://github.com/freqtrade/freqtrade-strategies/tree/master/user_data/strategies)

## Features and Bugfixes

* Improve Telegram: #386, #409, #419, #424
* Improvement: Bot stability and new features: #376, #379, #391, #392, #395, #398, #400, #411, #412, #415, #417, #423, #426, #428, #429, #432, #446, #456
* Improve Backtesting and Hyperopt: #393, #394, #430, #436 , #449
* Improve Plotting: #454
* Update documentation: #381, #404, #437, #458, #463, #466
* Upgrade Dependencies version: #377, #388, #399, #403, #431, #433, #445, #451

## Known Issues ([Link](https://github.com/gcarq/freqtrade/issues?q=is%3Aissue+is%3Aopen+label%3Abug)):




## Greetings
Thanks to @jblestang, @kryofly, @vertti, @shusso, @gcarq, @rohit366, @mijgame for your contributions
",91629816
602,False,False,2018-01-13T07:21:06Z,2018-01-13T07:24:32Z,"## Release Summary
Minor update, fix the broken`plot_dataframe.py` script.

## Breaking Changes

Please see release [0.15.0](https://github.com/gcarq/freqtrade/releases/tag/0.15.0).

## Features and Bugfixes
- Improvement: Bot stability and new features: #364 
- Upgrade Dependencies version: #362, #368 

## Known Issues ([Link](https://github.com/gcarq/freqtrade/issues?q=is%3Aissue+is%3Aopen+label%3Abug)):
- #118: Sell due to loss, bot buys the same currency
- #147: ZeroDivisionError after /count 
- #238: Retry on ""Got invalid response"" during backtesting
- #251: Error in `/performance`Telegram command since develop version 28-12-17
- #319: bot keeps thinking order is opened bug
- #341: Buggy get_ticker bug
- #345: Doker installation failed - numpy bug
- #371: Exception can happen with `/forcesell` 

",91629816
603,False,False,2018-01-11T11:58:06Z,2018-01-12T04:26:44Z,"## Release Summary
Thank you very much to all the community for your contributions. We received more than 200 commits, submitted by 13 contributors.

This new release is huge with a lot of improvements for the bot and tons of new features. Please take a look at our [new documentation](https://github.com/gcarq/freqtrade/blob/develop/docs/index.md) to know how to use the bot.

## Breaking Changes

### 1. New config parameters required
`config.json` has been upgraded. New fields are mandatory. Compare your config to `config.json.example` and update your config file accordingly, otherwise the bot will not start.

### 2. Database upgrade
The fee calculation has been fixed and the fee data in your database are incorrect.
If you have had a bot running  before 12/23/17, please backup your DB, and run the following SQL command:
```sql
UPDATE trades SET fee=0.0025 WHERE fee=0.005;
```

Trouble in updating your database? [Read this page to understand how to update the DB](https://github.com/gcarq/freqtrade/blob/develop/docs/sql_cheatsheet.md).


## Features and Bugfixes
- New command-line parameters (Checkout the [documentation](https://github.com/gcarq/freqtrade/blob/develop/docs/bot-usage.md) for more details): 
    - #173, #182, #248, #328
- New documentation ([Link](https://github.com/gcarq/freqtrade/blob/develop/docs/index.md)):
    - #279, #296, #349, #347
- New parameters available in the config.json (Checkout the [documentation](https://github.com/gcarq/freqtrade/blob/develop/docs/configuration.md) for more details):
    - #124, #125, 84b105c82b5a05351fbc60d9143449885ae1ea6c, 371e6d99c9d580944c9135a35b27810a55bfd02b, 9ff1f05e66c6ae52c5aaf59924121dde153f9c92, #143, #172, #267, #292, #265, #295, #342
- Increase test coverage to 85% ([Link](https://coveralls.io/github/gcarq/freqtrade?branch=develop)):
    - #236, #241, #242, #247, #249, #256, #260, #263, #277, #339, #353, #354
- Improvement: Bot stability and new features:
    - 55a69e4a4599f681cd8296c13021f95c917ce8b3, 788cda4925b7e1cdf18d09242f0e733f8f6a71ef, 383a9f6eeb54882fc2b72b4c3d530ca8b3a64d4e, #123, f3ba3ddd54f608b74bcd6e315aa21f719270503b, #122, #128, #133, be6939ee8a00f1148194a5163cb4f8bf1fec53c6, #192, #202, #237, #253, #249, #284, #306, #321, #327, #324, #331, #355, #358, #360
- Improvement: Telegram features (Checkout the [documentation](https://github.com/gcarq/freqtrade/blob/develop/docs/telegram-usage.md) for more details): 
    - cfbfe90aa0f1218699479570e229fff29f8e56cc, #171, #186, #188, 4dab39ed9e4edc589581fd00508bf5a2a4b1abe7, #215, #239, #244, #259, #276, #271, #294, #293
- Improvement: Backtesting / Hyperopt script:
    - 02ca2ed5856ef905d93a90d44cf8c358ea5310b4, #131, #136, 371ee1e457985f6416a5431f727ecca69a219088, 3b37f77a4dd61bdcd87fb59ed3e51fc1dc8c73e5, 7fa5846c6ba836be4094d96f02566131ed5a070f, b9c4eafd9620fd9d292388186ee1b68719d009e5, a23fce519d29a7eabf0acaf38b150641c3470cd1, e27a6a7a91772f73fc935c05ad77c477aa1ef1c6, 2fe11cd77ac45e3291405ab09dc6e289d2a493b5, #146, #154, f7def09decca261ba71d3a798aba3bb19741ec79, #169, #194, #191, #196, #218, #231, #232, #235, #287, #291, #297, #312, #315, #330, #338, #332, #344, #351
- Improvement: Plotting script:
    - f3ba3ddd54f608b74bcd6e315aa21f719270503b, #197
- Improvement: Bittrex API: 
    - #155
- Update the default Buy/Sell Strategy, and Indicators: 
    - 5fce2c57129c0373fafb649f19a0bb2e70a20762, #135, #313, #323
- Fix fee calculation: 
    - 9a87dcf0a1753616fd53b7271343360ddf175918, #200
- Upgrade Dependencies version

## Known Issues ([Link](https://github.com/gcarq/freqtrade/issues?q=is%3Aissue+is%3Aopen+label%3Abug)):
- #118: Sell due to loss, bot buys the same currency
- #147: ZeroDivisionError after /count 
- #238: Retry on ""Got invalid response"" during backtesting
- #251: Error in `/performance`Telegram command since develop version 28-12-17
- #319: bot keeps thinking order is opened bug
- #341: Buggy get_ticker bug
- #345: Doker installation failed - numpy bug
- #363: plot_dataframe.py broken bug
- #371: Exception can happen with `/forcesell` 

",91629816
604,False,False,2017-11-20T19:01:20Z,2017-11-20T19:16:04Z,"**Features and Bugfixes**

- Lots of bugfixes and stability improvements #120 #113 #112 #110 #108 #106
- Create foundation for sell signals #104
- Add backtesting subcommand #107
- Reduce hyperopt memory footprint #111
- Changed buy strategy #114

**Known Issues**

- Sell due to loss, bot buys the same currency #118 
- Handling SIGINT is broken #109 ",91629816
605,False,False,2017-11-15T23:40:45Z,2017-11-15T23:44:09Z,"**Features and Bugfixes**

- set bittrex API `calls_per_second` to 1
- automatically remove pair from whitelist if bittrex wallet is down
- hyperopt improvements
- bug fixes and stability improvements
",91629816
606,False,False,2017-11-09T22:53:11Z,2017-11-09T22:55:18Z," * Fixes sqlite threading issue
 * Adds `/version` command handler
 * Adds `/forcesell all` command handler",91629816
607,False,False,2017-11-09T19:56:09Z,2017-11-09T20:12:02Z,"**Features and Bugfixes**

- Sell amount equal to amount purchased (#22)
- Use Decimal for profit calculation for a more precise floating point arithmetic
- Account exchange fees (#56)
- Lots of stability fixes and improvements
- `dry_run`: Use in-memory database
- Telegram: `/status table`: shows a compresensive status overview (#86) 
- Improved backtesting (#95)
- Upgrade python bittrex to 0.2.0


**Breaking Changes!**

The database format has changed.

* Please sell the coins for your open trades manually or use `/forcesell <id>` to sell them before upgrading! The new database file is `tradesv3.sqlite`.
* `dry_run` uses an in-memory database, which gets deleted on every stop.
",91629816
608,False,False,2017-10-24T16:14:38Z,2017-10-24T16:21:23Z,"**Features and Bugfixes**

- Upgrade dependencies (#67)
- More efficient and flexible Docker builds (#71) 
- Small tweaks to strategy (#73)
- Add script to download live data for backtesting (#70)
- Add `/help` Telegram command (#77)
- Use hyperopt to find optimal parameters for buy strategy (#76)
- Lots of small improvements and fixes
",91629816
609,False,False,2017-10-10T15:55:07Z,2017-10-10T16:14:20Z,"**Features and Bugfixes**

- show warning when bittrex returns empty data (#30)
- fix bug where telegram wasn't optional (#41)
- improved trading strategy for buy trigger (#44)
- refactor project structure to make it packageable (#47)
- fix whitelist vanishing bug (#50)
- mock missing 3rd party calls for unittests (#53)
- refactor exchange interface to make it easier to integrate new exchanges (#58)
- use latest telegram library
- switch to pytest
- lots of other improvements and fixes

**Breaking Changes**

With this release the `config.json` format has changed, if you used a previous version upgrade to the new format (see `config.json.example`).
It is also recommended to start with a fresh database, because the dataformat has changed slightly. That means you have to sell all active open orders manually and rename/remove `tradesv2.sqlite`.
",91629816
610,False,False,2017-09-28T17:17:03Z,2017-09-28T17:27:15Z,"- new buy strategy (#20)
- drop poloniex support
- use five min ticker
- configurable bidding price (#26)
- backtesting trading strategy (#29)
- lots of minor improvements and fixes",91629816
611,False,False,2018-01-24T15:45:41Z,2018-09-17T10:09:51Z,* Add live.blockcypher.com to block explorers and remove blockexplorer.com.,3886965
612,False,False,2017-07-02T08:20:29Z,2017-07-02T08:43:34Z,"* Adjust the static network fees used for sanity checks and fallbacks.
",3886965
613,False,False,2017-06-19T17:13:42Z,2017-06-19T17:31:10Z,"* Update translations from Transifex.
",3886965
614,False,False,2017-06-03T13:15:41Z,2017-06-03T13:29:27Z,"* Fix problem with sweeping paper wallets.
",3886965
615,False,False,2017-06-01T13:06:24Z,2017-06-01T13:39:44Z,"* Adjust the static network fees used for sanity checks and fallbacks.
",3886965
616,False,False,2017-05-21T07:48:01Z,2017-05-21T09:33:11Z,"* Adjust the static network fees used for sanity checks and fallbacks.
",3886965
617,False,False,2017-05-12T16:35:35Z,2017-05-12T17:07:14Z,"* Adjust the static network fees used for sanity checks and fallbacks.
",3886965
618,False,False,2017-05-03T17:16:08Z,2017-05-03T17:57:00Z,"* Update translations from Transifex.
* Minor bugfixes.
",3886965
619,False,False,2017-03-25T16:37:00Z,2017-03-25T16:55:16Z,"* Add technical notes.
* Update translations from Transifex.
",3886965
620,False,False,2017-03-07T16:18:53Z,2017-03-07T16:28:57Z,"* Bugfix.
",3886965
621,False,True,2017-03-06T09:32:04Z,2017-03-06T14:58:17Z,"* Improve app startup time.
* Fix 'raise fee' was raising the fee too much.
",3886965
622,False,False,2017-03-01T11:34:18Z,2017-03-01T11:54:48Z,"- Block sending payments while blockchain replay is in progress.
",3886965
623,False,False,2017-02-11T16:13:20Z,2017-02-11T18:07:05Z,"- Update translations from Transifex.
- Bugfix.
",3886965
624,False,False,2017-02-02T18:28:16Z,2017-02-02T18:59:03Z,"- Add option to report issue with selected payment.
- Add blockchain.info to block explorers.
- Minor bugfix.
",3886965
625,False,False,2017-01-15T19:20:42Z,2017-01-15T19:40:50Z,"- Query a set of Electrum servers to swipe paper wallets. Biteasy can't be used any more, because they are closing down.
",3886965
626,False,False,2017-01-11T16:46:26Z,2017-01-11T17:14:03Z,"- Update translations from Transifex.
- Remove biteasy from block explorers because they are closing down.
- Minor bugfixes.
",3886965
627,False,False,2016-12-21T14:02:26Z,2016-12-21T14:15:33Z,"- Minor bugfix.
",3886965
628,False,False,2016-12-17T02:49:28Z,2016-12-17T03:00:11Z,"- Material design for Android 5.0 (Lollipop) and above!
",3886965
629,False,False,2016-12-07T21:25:54Z,2016-12-08T17:20:30Z,"- Minor bugfix.
",3886965
630,False,True,2016-12-06T17:19:05Z,2016-12-06T17:42:20Z,"- For Android 7.1 (Nougat) and above, support the new app shortcuts.
",3886965
631,False,False,2016-11-27T14:57:25Z,2016-11-27T15:29:53Z,"- Minor bugfix.
",3886965
632,False,True,2016-11-26T20:24:43Z,2016-11-26T20:45:16Z,"- For Android 6.0 (Marshmellow) and above, bring back the ability to receive payments via Bluetooth. This means your customers can pay without being connected to the internet!
- Nicely animated appearance of main screen on phones.
",3886965
633,False,False,2016-11-09T14:34:49Z,2016-11-09T16:20:25Z,"- Switch exchange rates feed to BitcoinAverage API v2.
- Update translations from Transifex.
- Minor bugfix.
",3886965
634,False,False,2016-11-02T10:26:16Z,2016-11-02T10:43:16Z,"- Work around broken exchange rate.
",3886965
635,False,False,2016-10-27T22:50:32Z,2016-10-27T23:00:57Z,"- Dynamic network fee. This will help dealing with an overloaded Bitcoin network.
",3886965
636,False,False,2016-10-25T09:36:36Z,2016-10-25T09:53:41Z,"- Fix background color in recent tasks list.
- The testnet version doesn't make files world readable any more.
- Adjust the normal fee category.
",3886965
637,False,False,2016-10-07T16:40:04Z,2016-10-07T16:47:40Z,"- The app now requires Android 4.1 (Jelly Bean) or higher. This makes UI development easier in future.
- Fix detection of network state. This needs the ACCESS_NETWORK_STATE permission.
",3886965
638,False,False,2016-10-05T10:09:40Z,2016-10-05T10:52:31Z,"- Minor bugfix.
",3886965
639,False,False,2016-09-30T14:23:11Z,2016-09-30T14:42:40Z,"- Update translations from Transifex.
- Minor bugfixes.
",3886965
640,False,False,2016-09-16T16:25:17Z,2016-09-16T16:51:39Z,"- Supports HTTP/2 and ALPN on all HTTP calls (e.g. payment protocol).
- Slightly more robust scanning of QR codes.
- Minor bugfixes.
",3886965
641,False,False,2016-08-30T09:58:29Z,2016-08-30T11:17:28Z,"- Strengthen security of spending PIN for all existing wallets, too.
",3886965
642,False,False,2016-08-26T09:02:27Z,2016-08-26T09:21:48Z,"- Regression fix.
",3886965
643,False,True,2016-08-23T15:04:10Z,2016-08-23T15:40:27Z,"- Speed up wallet decryption when using a spending PIN.
- Minor bugfix.
",3886965
644,False,False,2016-08-19T19:46:32Z,2016-08-19T20:08:10Z,"- Strengthen security of spending PIN.
- Update translations from Transifex.
",3886965
645,False,False,2016-08-01T22:11:05Z,2016-08-01T22:24:11Z,"- Fix for layout in landscape orientation.
",3886965
646,False,False,2016-07-24T23:58:09Z,2016-07-25T00:18:08Z,"- Quick-fix regression: ANR coming from the QR code scanner back into the 'send coins' dialog.
",3886965
647,False,True,2016-07-24T13:31:13Z,2016-07-24T13:46:12Z,"- Fix rotated camera image on some devices.
",3886965
648,False,True,2016-07-23T17:53:14Z,2016-07-23T18:30:23Z,"- Message for a delayed confirmation of an incoming payment.
- Minor bugfixes.
",3886965
649,False,False,2016-07-15T20:51:31Z,2016-07-15T22:33:21Z,"- On Android 6.0 (Marshmellow) and above, you can now grant or revoke app permissions at will.
  The current permissions are: Camera (for scanning QR codes) and Read/Write External Storage (for wallet backups).
- Fix a crash when trying to sweep a password protected paper wallet.
- Update translations from Transifex.
",3886965
650,False,False,2016-07-13T11:26:25Z,2016-07-15T22:31:48Z,"- Fix a crash when scanning QR codes.
",3886965
651,False,False,2016-06-23T17:07:14Z,2016-06-23T17:16:41Z,"- Adjust the normal fee category.
- Minor bugfix.
",3886965
652,False,False,2016-06-15T09:05:00Z,2016-06-15T09:13:56Z,"- Adjust all fee categories.
",3886965
653,False,False,2016-06-13T20:18:47Z,2016-06-13T20:23:23Z,"- Minor bugfixes.
- Based on bitcoinj 0.14.3.
",3886965
654,False,False,2016-06-06T19:58:35Z,2016-06-06T20:00:13Z,"- Fix occasional crash while editing the 'pay to' field when sending coins.
",3886965
655,False,False,2016-05-31T12:00:35Z,2016-05-31T12:24:41Z,"- Fix for rare wrong balance calculation.
- Labs: When sending coins, use DNSSEC to look up wallet names from the domain name system.
- Based on bitcoinj 0.14.2.
",3886965
656,False,False,2016-05-14T06:37:57Z,2016-05-14T08:06:28Z,"- Fix crash when sweeping a paper wallet.
",3886965
657,False,True,2016-05-06T20:50:30Z,2016-05-06T20:53:47Z,"- The network fee is now calculated on a per-byte basis, rather than per-kB. On average, this means a lower fee!
- Based on bitcoinj 0.14.
",3886965
658,False,False,2016-04-25T19:29:48Z,2016-04-25T19:35:30Z,"- Improve mechanism for setting a trusted peer and warn if its hostname cannot be resolved.
",3886965
659,False,False,2016-04-10T16:16:49Z,2016-04-10T16:21:58Z,"- After a couple of weeks of not being used, the app will notify if there are still coins in the wallet.
",3886965
660,False,False,2016-03-23T16:55:21Z,2016-03-23T16:56:03Z,"- Update translations from Transifex.
- Based on bitcoinj 0.13.6.
",3886965
661,False,False,2016-03-10T20:11:53Z,2016-03-10T20:17:57Z,"- Fix for crash when entering too large amounts.
- Add warning to RBF (replace-by-fee) transactions.
",3886965
662,False,False,2016-02-27T21:47:21Z,2016-02-27T21:54:37Z,"- Automatically close send coins dialog if payment was successful. This can be disabled in the settings.
- Consider RBF (replace-by-fee) transactions as risky, so for them wait for the first confirmation.
- Update Catalan translation from Transifex.
- Based on bitcoinj 0.13.5.
",3886965
663,False,False,2016-01-18T21:49:36Z,2016-01-18T21:51:39Z,"- Speculative fix for ANR.
",3886965
664,False,False,2015-12-21T23:08:43Z,2015-12-21T23:26:32Z,"- Adjusts to the new network fee rules imposed by Bitcoin Core.
- Now requires Android 4.0.3 (ICS) for all subprojects.
- Update Russian, Italian, Turkish, Swedish, Spanish, Norwegian Bokmål, Japanese, Hungarian, Finnish, Dutch, Danish, Traditional Chinese and Brazilian Portuguese translations.
- Based on bitcoinj 0.13.4.
",3886965
665,False,False,2015-11-16T15:31:12Z,2015-11-16T15:36:45Z,"- Fix problem with sweeping paper wallets.
",3886965
666,False,False,2015-10-31T12:02:05Z,2015-10-31T21:34:33Z,"- Switch default block explorer to blockexplorer.com.
- Hint to enable storage encryption.
- Update translations from Transifex.
",3886965
667,False,False,2015-10-18T13:43:29Z,2015-10-18T13:49:07Z,"- Optimizations & bugfixes.
- Based on bitcoinj 0.13.3.
",3886965
668,False,False,2015-10-02T15:34:25Z,2015-10-02T15:36:17Z,"- Add blockexplorer.com to block explorers used for browsing transactions, addresses and blocks.
- Update Dutch, Italian and Russian translations.
",3886965
669,False,False,2015-09-07T08:02:51Z,2015-09-07T08:05:18Z,"- Bugfixes.
- Update Hungarian, French and Swedish translations.
",3886965
670,False,False,2015-08-06T07:42:18Z,2015-08-06T07:56:26Z,"- Update Finnish translation.
- Based on bitcoinj 0.13.2.
",3886965
671,False,False,2015-07-27T08:55:07Z,2015-07-27T09:05:53Z,"- Bugfixes.
- Update Korean translation.
",3886965
672,False,False,2015-07-17T15:12:21Z,2015-07-17T15:16:57Z,"- Allow raising the fee of an unconfirmed transaction. Uses child-pays-for-parent (CPFP).
- Fix crash when sharing address.
",3886965
673,False,True,2015-07-14T21:17:21Z,2015-07-14T21:25:29Z,"- Pay the default fee for sweeping paper wallets.
- Update Turkish, Swedish, Norwegian Bokmål, Japanese, Italian, Hungarian, French and Danish translations.
- Based on bitcoinj 0.13.1.
",3886965
674,False,False,2015-07-09T22:11:52Z,2015-07-09T22:14:39Z,"- Upwards-adjust default network fee again. We're forced to do this due to the high number of spam transactions.
",3886965
675,False,True,2015-07-06T14:45:58Z,2015-07-06T14:47:59Z,"- Setting for own name, to be added as a label/memo to payment requests.
- List animations for network monitor.
",3886965
676,False,False,2015-06-17T08:56:09Z,2015-06-17T09:03:04Z,"- Upwards-adjust default network fee again. We're still way below estimated fee.
- Small bugfixes.
- Update Greek and Swedish translations.
- Migrate build from Maven to Gradle. This should make things easier for Android Studio users. See README for building the app.
",3886965
677,False,False,2015-06-07T10:09:41Z,2015-06-07T12:01:03Z,"- Bugfixes.
- For developers: In-app payments integration (integration-android) now available on Maven Central and jCenter. Also see: https://github.com/schildbach/bitcoin-wallet/wiki/InAppPayments
",3886965
678,False,False,2015-05-30T21:56:23Z,2015-05-30T22:18:35Z,"- Update Italian, Spanish, Finnish and Japanese translations.
",3886965
679,False,False,2015-05-23T15:49:47Z,2015-05-23T15:56:04Z,"- Upwards-adjust default fee, because transactions at the old fee level have become a bit slow. You can switch back to 'economic' in the send coins options menu.
- Small bugfixes.
",3886965
680,False,False,2015-05-15T18:41:14Z,2015-05-15T18:50:27Z,"- Nice slide-in animation for sent payment.
- Update Brazilian Portuguese, Danish, Japanese, French, Turkish and Norwegian Bokmål translations.
- Small bugfixes.
",3886965
681,False,False,2015-05-08T10:02:35Z,2015-05-08T10:22:27Z,"- Add Hindi and Croatian translations. Update Greek and Albanian.
- Design bugfixes.
",3886965
682,False,False,2015-04-30T14:20:06Z,2015-04-30T14:23:14Z,"- Tint incoming transactions in green, outgoing in red.
- Tint action bar labels.
",3886965
683,False,True,2015-04-29T06:09:17Z,2015-04-29T06:12:11Z,"- Material design for list of transactions.
- Update Albanian, Turkish, Finnish, Spanish, Russian, Norwegian Bokmål, Japanese, Italian, French, Danish, Czech and Catalan translations.
",3886965
684,False,False,2015-04-20T16:49:41Z,2015-04-20T17:01:02Z,"- Update android-maven-plugin to 4.2.0, so we can use AARs.
- Bugfixes.
",3886965
685,False,False,2015-04-13T09:29:55Z,2015-04-13T09:44:43Z,"- Use action bar submenu for filtering wallet transactions, rather than a ViewPager.
- Speed up transactions list.
- Update QR-code scanner to ZXing 3.2.0.
",3886965
686,False,False,2015-04-05T09:36:39Z,2015-04-05T10:06:24Z,"- Update Dutch and Albanian translations.
- Bugfixes.
",3886965
687,False,True,2015-04-01T11:15:24Z,2015-04-01T13:06:25Z,"- Show derived addresses in address book under ""your addresses"".
- Show ""to addresses"" of received payments, rather than ""from addresses"".
- Speed up blockchain sync.
- Based on bitcoinj 0.12.3.
",3886965
688,False,False,2015-03-09T09:17:33Z,2015-03-09T22:24:24Z,"- Bugfixes.
",3886965
689,False,False,2015-03-08T22:25:30Z,2015-03-08T22:29:58Z,"- Improve entry of password in backup wallet dialog.
- Share current wallet address by tapping on it.
- Update dialogs to material theme on Lollipop devices.
- New translations into Albanian and Swahill.
- Update Spanish, Turkish, Russian, Brazilian Portuguese, Norwegian Bokmål, Japanese, Italian, French, Finnish, Danish, Czech and Catalan translations.
",3886965
690,False,False,2015-01-30T17:22:06Z,2015-01-30T17:32:47Z,"- Show and share extended public key. This can be used to grant read-only access to your wallet. The new option is available in the diagnostics settings.
- Record fiat amount for sent payments.
",3886965
691,False,False,2015-01-22T20:31:08Z,2015-01-22T20:33:13Z,"- Update action buttons to material design.
- Update Finnish, Catalan, Swedish, Brazilian Portuguese, Italian, Spanish, Russian, French, Dutch, Czech and Chinese translations.
",3886965
692,False,False,2014-12-22T12:29:10Z,2014-12-22T12:31:39Z,"- Important fix for when a wallet is restored via an external app, the QR code on the main screen can still show an old address for a while.
",3886965
693,False,False,2014-12-17T13:28:56Z,2014-12-17T13:32:07Z,"- Important fix for how old pre-version-3.47 wallet backups are restored.
- We're showing the backup warning for users with old wallets. If you see it, please refresh your backup! It's time everybody is in possession of a backup using the current format.
",3886965
694,False,False,2014-12-15T20:35:33Z,2014-12-15T20:39:09Z,"- Update Turkish, Norwegian Bokmål, Japanese, French and Danish translations.
- Small bugfixes.
",3886965
695,False,False,2014-11-28T14:12:13Z,2014-11-28T14:14:23Z,"- Support sweeping of password-protected paper wallets (BIP38).
- Update Swedish translation.
- Update android-maven-plugin to 4.0.0, so the build should now be compatible to newer Maven versions.
- Update to ProGuard 5.1, making it possible to build with a Java 8 compiler.
",3886965
696,False,False,2014-11-16T16:03:59Z,2014-11-16T16:09:41Z,"- Small bugfixes.
",3886965
697,False,False,2014-11-15T12:07:46Z,2014-11-15T12:10:18Z,"- When sending coins, there is a ""quick confirm"" option which pays the old higher fee.
- Fix white/black screen that prevents some users from starting the app.
- Fix reuse of change address in some cases.
- Based on bitcoinj 0.12.2.
",3886965
698,False,False,2014-11-08T18:13:35Z,2014-11-08T19:01:00Z,"- Fix sent transaction not updating on send coins screen.
- Fix compatibility issue to GMail 5 app when sending report attachments.
- Migrate clipboard to use Android 4 API.
",3886965
699,False,False,2014-11-03T08:57:26Z,2014-11-03T09:00:21Z,"- Migrate preferences and NFC to use Android 4 API.
",3886965
700,False,False,2014-10-30T15:17:26Z,2014-10-30T15:19:55Z,"- Update Norwegian Bokmål, Japanese, Danish, Finnish, Spanish, Catalan and Russian translations.
",3886965
701,False,False,2014-10-29T08:40:19Z,2014-10-29T10:16:00Z,"v3.60 (v3 maintenance)
- Add v3 flavor, to separate new version alerts from the master branch.
",3886965
702,False,True,2014-10-26T15:36:36Z,2014-10-26T15:39:47Z,"- Performance improvements.
- Drop network fee by factor of 10.
- Support rotation for HD key chains.
- Based on bitcoinj 0.12.1.
",3886965
703,False,True,2014-10-20T13:59:32Z,2014-10-20T14:08:33Z,"- The wallet can be protected by a spending PIN.
- Record memos read from payment requests.
",3886965
704,False,False,2014-10-17T09:35:20Z,2014-10-17T09:59:58Z,"- Re-add textual Bitcoin address to enlarged QR code.
",3886965
705,False,False,2014-10-14T19:52:22Z,2014-10-14T20:30:08Z,"- Small bugfixes.
",3886965
706,False,False,2014-10-13T13:54:52Z,2014-10-13T19:31:10Z,"- Remove textual Bitcoin address from main screen.
- Warning for users with pay-to-many transactions. Those will slow down their
  wallet.
- Workaround for crash in the network monitor.
",3886965
707,False,False,2014-10-08T17:27:36Z,2014-10-08T17:29:26Z,"- Fix crash when sweeping wallets.
- New translation into Catalan.
- Update Korean, Russian, Italian and Danish translations.
",3886965
708,False,False,2014-10-05T19:40:11Z,2014-10-05T20:00:47Z,"- New translation into Norwegian Bokmål.
- Small bugfix.
",3886965
709,False,True,2014-10-03T15:50:29Z,2014-10-03T15:52:02Z,"v4.0
- All Bitcoin addresses are now deterministically derived from one single secret,
  which was created when you installed the app for the first time. So from now on,
  only one backup is needed to recover all your future funds in that wallet.
- The app does its best to not reuse addresses any more. ""Request coins"" will use a
  fresh address on each invocation. The current address in the QR code on the main
  page changes as soon as coins are received on it.
- When sending coins, the fee is shown while you type and before you press ""Send"".
  After sending, you'll see the paid fee in the transaction list.
- When sending coins, most errors are now shown already before you press Send.
- The app now requires Android 4.0.3 or higher. This makes UI development much
  easier in future.
- The app has a fresher, sharper looking app icon. The icon for the testnet version
  is now entirely grey.
- On Android 4.1 or higher, the app-widget is now horizontally resizable.
- Based on bitcoinj 0.12.
",3886965
710,False,False,2014-09-21T14:51:39Z,2014-09-21T15:02:16Z,"- Resolve issue with restoring backups that have been renamed.
- Update Turkish, Korean, Ukrainian, Russian, Italian, French, Finnish and Danish translations.
- Remove BROADCAST_STICKY permission.
",3886965
711,False,False,2014-09-10T09:51:10Z,2014-09-10T09:53:51Z,"- Small bugfixes.
",3886965
712,False,False,2014-09-02T08:38:10Z,2014-09-02T08:40:10Z,"- App-widget: show approximate balance in local currency.
",3886965
713,False,False,2014-08-21T08:26:58Z,2014-08-21T08:29:23Z,"- New translation into Ukrainian. Update many other translations.
- Small bugfixes.
",3886965
714,False,False,2014-08-04T07:14:00Z,2014-08-04T07:16:29Z,"- Support compressed keys when sweeping a wallet.
- Update Russian translation.
",3886965
715,False,False,2014-07-11T12:35:58Z,2014-07-11T12:38:45Z,"- New translation into Finnish.
- Update Czech, Korean, Turkish, Spanish, Japanese, Hebrew and Italian translations.
",3886965
716,False,False,2014-07-02T10:50:59Z,2014-07-02T10:53:46Z,"- Update French, Danish and Korean translations.
",3886965
717,False,True,2014-07-01T12:46:50Z,2014-07-01T17:15:52Z,"- Sweeping of paper wallets (e.g. those used for cold storage).
- New translation into Korean.
- Small bugfixes.
",3886965
718,False,False,2014-06-07T21:08:55Z,2014-06-07T21:11:23Z,"- Update Chinese, Danish, Italian and Japanese translations.
- Update QR-code scanner to ZXing 3.1.0.
- Small bugfixes.
- Based on bitcoinj 0.11.3.
",3886965
719,False,False,2014-05-22T07:27:28Z,2014-05-22T07:32:27Z,"- Update French and Turkish translations.
- Small bugfixes.
",3886965
720,False,False,2014-05-16T13:43:51Z,2014-05-16T13:46:55Z,"- Get rid of all NFC Android application records. This will improve interoperability with other Android wallets.
- Manual wallet backups now back up the whole wallet, not just the private keys. It also means when restoring your wallet, the current (hopefully empty) wallet is thrown away. This change is a requirement for (future) encrypted wallets, HD wallets and more.
- Filter exchange rates by a search query.
- Update Russian translation.
- Update QR-code scanner to ZXing 3.0.1.
- Small bugfixes.
",3886965
721,False,False,2014-04-22T16:37:47Z,2014-04-22T17:26:08Z,"- New translation into Slovenian.
- Update Hebrew translation.
- Fix missing transactions due to once dusty outputs which are standard as of Bitcoin Core 0.9.
- Preparation for fetching payment requests via Bluetooth.
- Based on bitcoinj 0.11.2.
",3886965
722,False,False,2014-04-10T20:33:37Z,2014-04-10T21:57:03Z,"- Bugfixes.
",3886965
723,False,False,2014-04-09T12:22:01Z,2014-04-09T18:32:16Z,"- Due to the OpenSSL ""Heartbleed"" vulnerability, removed all HTTPS network access on Android 4.1.1.
  This means exchange rates will not be available, and the payment protocol cannot fetch
  signature and cannot pay directly via HTTPS. The chances of an actual exploitability on
  Android are very slim, but we want to stay on the safe side until things are clearer.
  Also see http://heartbleed.com/
",3886965
724,False,False,2014-03-19T11:45:35Z,2014-04-01T16:37:49Z,"- Support for µBTC denomination, for people who are used to low valued currencies.
- Always use BIP70 when sending payments directly via Bluetooth.
- Small bugfixes.
",3886965
725,False,False,2014-04-01T16:30:04Z,2014-04-01T16:34:20Z,"- Small bugfixes.
",3886965
726,False,False,2014-03-08T12:12:31Z,2014-03-08T12:16:43Z,"- Usage of BIP70 when initiating payments via NFC (tap-to-pay) is now a supported feature.
- New translation into Arabic.
",3886965
727,False,False,2014-03-04T10:01:22Z,2014-03-04T10:03:12Z,"- Supports BIP70 payment protocol for in-app payments.
- Accepting direct payments via Bluetooth is now a supported feature.
",3886965
728,False,False,2014-02-25T17:16:55Z,2014-02-25T17:21:57Z,"- New translation into Japanese.
",3886965
729,False,False,2014-02-24T09:40:14Z,2014-02-24T09:43:47Z,"- Small bugfix.
",3886965
730,False,False,2014-02-23T21:50:39Z,2014-02-23T22:12:52Z,"- Protect wallet against dust spam.
- Fixed some bugs in the payment protocol.
- Based on bitcoinj 0.11.1.
",3886965
731,False,False,2014-02-11T11:17:54Z,2014-02-11T11:21:27Z,"- Default denomination has changed to millibitcoin (mBTC).
- Cross-calculated exchange rates for currencies without Bitcoin volume. Thanks to BitcoinAverage.
- Better handling of errors when sending coins, specifically when funds are exceeded.
- Labs: Uses BIP70 payment protocol for tap-to-pay and scan-to-pay, if enabled in the settings.
- Support for BIP72 URI extension to payment protocol.
- New translations into Traditional Chinese, Macedonian and Esperanto. Updated Spanish, French and Danish.
- Resolved issues with wallets with many transactions.
- Based on bitcoinj 0.11.
",3886965
732,False,True,2014-02-08T11:15:40Z,2014-02-08T11:20:28Z,"- Small bugfixes.
",3886965
733,False,True,2014-02-07T22:55:16Z,2014-02-07T22:58:56Z,"- Support for BIP72 URI extension for payment protocol.
",3886965
734,False,True,2014-02-04T14:58:11Z,2014-02-04T15:00:40Z,"- Default denomination has changed to millibitcoin (mBTC).
- Cross-calculated exchange rates for currencies without Bitcoin volume. Thanks to BitcoinAverage.
- Better handling of errors when sending coins, specifically when funds are exceeded.
- Labs: Uses BIP70 payment protocol for tap-to-pay and scan-to-pay, if enabled in the settings.
- New translations into Traditional Chinese, Macedonian and Esperanto. Updated Spanish.
- Resolved issues with wallets with many transactions.
- Based on bitcoinj 0.11.
",3886965
735,False,False,2014-01-08T18:15:10Z,2014-01-08T18:23:53Z,"- improved battery usage
- new Danish translation
- updated Polish translation
",3886965
736,False,False,2014-01-05T15:15:49Z,2014-01-05T18:20:32Z,"- fixed issues with fetching exchange rates
- Slovak translation
- updated French, Hungarian, Italian and Portuguese translations
",3886965
737,False,False,2013-12-07T15:51:39Z,2013-12-08T11:02:35Z,"- for those who still use the unsecure address (pre-August), moves coins to secure addresses
- updated Russian and Turkish translations
",3886965
738,False,False,2013-11-30T23:22:58Z,2013-12-01T09:35:41Z,"- support for mBTC denomination
- also use weighted exchange rates from BitcoinAverage
- fixed issue with camera autofocus on some Samsung Galaxy devices
- improve battery usage
",3886965
739,False,False,2013-11-23T08:18:02Z,2013-12-01T09:34:24Z,"- fixed issue with stuck outgoing transactions
- fixed issue with detecting online state
",3886965
740,False,False,2013-10-24T20:01:47Z,2013-12-01T09:31:01Z,"- sound effect when sending a payment
- fixed rare issues with transactions missing or shown as unconfirmed
- Hungarian translation
- based on bitcoinj 0.10.2
",3886965
741,False,False,2013-09-17T09:18:28Z,2013-12-01T09:29:56Z,"- small improvements and bugfixes
",3886965
742,False,False,2013-08-26T15:13:16Z,2013-12-01T09:28:22Z,"- use findbugs
- small bugfixes
",3886965
743,False,False,2013-08-23T15:38:43Z,2013-12-01T09:27:15Z,"- Indonesian translation
- bluetooth offline transactions
- revamp of qr-code and nfc based offline transactions
- remove transaction details screen, link to blockexplorer.com instead
",3886965
744,False,False,2013-08-15T15:55:01Z,2013-08-17T19:11:25Z,"- fixed issue with emptying wallet
- based on bitcoinj 0.10.1
",3886965
745,False,False,2013-08-12T15:00:47Z,2013-08-13T20:23:24Z,"IMPORTANT: Because of the Android SecureRandom class has multiple severe bugs that render it useless for cryptographic purposes, versions 3.15 and later rotate all private keys. You will need to make a fresh backup of your wallet. It will not contain your old (insecure) keys, so keep your old backups around just in case.

More info: http://bitcoin.org/en/alert/2013-08-11-android
- auto-rotate weak keys
- option for easy emptying wallet
- based on bitcoinj 0.10
",3886965
746,False,False,2013-08-13T20:18:57Z,2013-08-13T20:21:56Z,"- backup reminder when creating new keys
- don't trigger blockchain sync because of plugging power
",3886965
747,False,False,2013-07-20T06:20:32Z,2013-07-21T13:34:40Z,"- Vietnamese and Portuguese (Brazil) translations
- small improvements
",3886965
748,False,False,2013-07-09T20:49:08Z,2013-07-21T13:31:51Z,"- bugfix
",3886965
749,False,False,2013-06-29T13:49:59Z,2013-07-04T07:40:33Z,"- new embedded currency calculator
- change default Bitcoin precision from 8 to 4
",3886965
750,False,False,2019-08-30T05:21:04Z,2019-08-30T05:25:47Z,"- Fix the default size of the SVG version of the KMD icon  05edb3c1

https://github.com/atomiclabs/cryptocurrency-icons/compare/v0.16.0...v0.16.1",91978995
751,False,False,2019-08-05T16:37:30Z,2019-08-05T16:40:34Z,"- Add MATIC icon (#333)  https://github.com/atomiclabs/cryptocurrency-icons/commit/bb3edf409bb31593b17d9258299a48d6cfe6fe73

https://github.com/atomiclabs/cryptocurrency-icons/compare/v0.15.0...v0.16.0",91978995
752,False,False,2019-07-20T08:04:52Z,2019-07-20T08:06:40Z,"- Update KMD icon (#332)  40945b85

https://github.com/atomiclabs/cryptocurrency-icons/compare/v0.14.0...v0.15.0",91978995
753,False,False,2019-06-14T07:38:10Z,2019-06-14T07:40:14Z,"- Add and update icons (#310)  12d4b8d

https://github.com/atomiclabs/cryptocurrency-icons/compare/v0.13.0...v0.14.0",91978995
754,False,False,2019-04-17T04:44:51Z,2019-04-17T04:47:00Z,"- Fix #294  5a160a8
- Update `DNR` to `D` (#295)  82e7fd1 df67b9e

https://github.com/atomiclabs/cryptocurrency-icons/compare/v0.12.0...v0.13.0",91978995
755,False,False,2019-03-19T14:00:46Z,2019-03-19T14:08:05Z,"- Add new and missing icons  564a5c7 90a2b3b
- Fix name for BTM  2e88e4d

https://github.com/atomiclabs/cryptocurrency-icons/compare/v0.10.1...v0.11.0",91978995
756,False,False,2016-12-24T19:25:29Z,2016-12-24T19:33:05Z,"- remove support for IE8
- small translations updates for hu and pt-br
",2717417
757,False,False,2016-11-27T20:15:05Z,2016-11-27T20:17:19Z,,2717417
758,False,False,2016-08-21T23:57:42Z,2016-08-22T14:03:53Z,"- throw if modInverse 0
- improve BigInteger constructor so that it works if caller forgets 'new'
- add unit tests for BigInteger
- thanks to dooglus, jprichardson, dcousens
",2717417
759,False,False,2016-02-20T01:29:59Z,2016-02-20T02:40:04Z,"- switch languages without full page load
- add BIP38 encryption to Bulk Wallet
- use compressed addresses on Single/Paper/Bulk Wallet 
- add compressed address option on Brain Wallet
",2717417
760,False,False,2015-11-22T18:54:07Z,2015-11-22T19:01:46Z,,2717417
761,False,False,2015-10-25T23:16:22Z,2015-10-25T23:19:17Z,"fix for session log not keeping track of keys from ""Wallet Details"" tab before entropy is collected. Thanks dooglus for reporting it.
",2717417
762,False,False,2015-10-25T18:54:59Z,2015-10-25T18:58:23Z,,2717417
763,False,False,2015-08-16T21:16:17Z,2015-08-16T21:20:55Z,"add status icons for checking the URI protocol used, support for window.crypto.getRandomValues and run the synchronous unit tests after entropy collection.
",2717417
764,False,False,2015-07-19T00:38:11Z,2015-07-19T00:42:58Z,,2717417
765,False,False,2015-07-06T01:22:42Z,2015-07-06T01:25:17Z,"You can now get to the Brain Wallet and Wallet Details tabs before completing the entropy collection.
",2717417
766,False,False,2015-01-08T22:40:27Z,2015-01-08T22:41:58Z,,2717417
767,False,False,2015-01-07T03:01:06Z,2015-01-07T03:07:44Z,"- Japanese translations for Split Wallet. Thanks dabura667.
- remove promise to show MINI key on details tab. MINI key
  will only be shown when it is provided since it cannot 
  be derived from other key formats.
- fix README
- Russian translations. Thanks e5faf2.
- Simplified Chinese translations. Thanks kwl01skz.
- add direct link to zip on github
- add this CHANGELOG to repository and add detached sigs in repository.
  add link to sig of HTML.
- hash with SHA256 instead of SHA1. SHA1 hash still provided in package.json.
",2717417
768,False,False,2014-01-19T05:42:16Z,2014-01-25T16:36:53Z,,2717417
769,False,False,2018-02-18T14:54:29Z,2018-02-22T00:03:43Z,"* Urgent Fix
* Remove console log",111359065
770,False,False,2018-02-15T15:10:30Z,2018-02-15T15:13:34Z,* Add portfolio balance,111359065
771,False,False,2018-02-04T02:45:41Z,2018-02-04T02:47:18Z,,111359065
772,False,False,2018-02-04T01:14:06Z,2018-02-04T01:15:33Z,Change arguments to JSON file reader,111359065
773,False,False,2018-02-02T02:21:18Z,2018-02-02T02:23:13Z,* Add customised portfolio path,111359065
774,False,False,2018-01-28T08:55:58Z,2018-01-28T08:56:47Z,* Add --rank option to sort specific column,111359065
775,False,False,2018-01-27T17:16:07Z,2018-01-27T17:49:29Z,"* Organise source code
* Change --columns to --specific
* Remove --humanize
* Improve parameter validation",111359065
776,False,False,2018-01-20T10:58:14Z,2018-01-20T11:01:11Z,"* Add column option 
* Add change 7D",111359065
777,False,False,2018-01-20T09:27:05Z,2018-01-20T09:28:10Z,* Enabled BTC as a convert price,111359065
778,False,False,2018-01-20T09:15:24Z,2018-01-20T09:16:44Z,"* Fixed bugs
* Updated logo
* Updated screenshot
* Removed emoji",111359065
779,False,False,2018-01-20T08:47:51Z,2018-01-20T08:53:31Z,"* Added -P portfolio option to enable portfolio tracking
* Removed coinmon cfont header",111359065
780,False,False,2017-11-22T22:08:38Z,2017-11-22T22:11:31Z,* Fixed bugs from the optimised find option,111359065
781,False,False,2017-11-22T12:45:55Z,2017-11-22T12:48:30Z,"* Support comma separated params by @maticrivo 
* Change to support exact coin symbol only",111359065
782,False,False,2017-11-21T18:48:02Z,2017-11-21T18:51:05Z,"* Added option --humanize [enable]
* Fixed minor bugs",111359065
783,False,False,2020-02-19T07:22:01Z,2020-02-19T07:24:32Z,"

## Changelog

da95820 Update changelog
6a8124e Merge branch 'hmble-fix'
f0187c3 Fix names
eb3831e Alphabetize currency list
cf13ad6 Merge pull request #50 from vuongggggg/feature/support-currency-vnd
e4d0bc9 updated currency supported info
9033b1e added VND currency
a417e4b Fixes miguelmota/cointop#48
c3aa7bf Update rpm build spec


",127352116
784,False,False,2019-12-31T19:46:17Z,2019-12-31T19:46:55Z,"

## Changelog

3ec6483 Fix flathub app release version
ff39b35 Update .gitignore


",127352116
785,False,False,2019-12-30T07:35:03Z,2019-12-30T07:35:26Z,"

## Changelog

8ecbfa3 Update CHANGELOG
c8803f7 Add tab keybinding to move to next row or next page
3f18533 Fix marketbar currency when using coingecko api
ca1987a Return error on update callback
38187de Fix chart update loader race condition. Closes #44
124812f Remove fatal logs
a000c96 Remove log.Fatal artifact. Closes #46


",127352116
786,False,False,2019-12-29T08:47:24Z,2019-12-29T08:51:52Z,"

## Changelog

4ac1ee2 Update CHANGELOG
eaf66f6 Use forked version of termbox-go to fix keybindings on freebsd. Closes #43
491d019 Update README
e82b4c1 Update snapcraft
f64ad72 Add contributing section


",127352116
787,False,False,2019-11-18T07:37:23Z,2019-11-18T07:37:44Z,"

## Changelog

b61e2fd Update method descriptions
6f28649 Fix ldflags version


",127352116
788,False,False,2019-11-18T06:06:38Z,2019-11-18T06:11:10Z,"

## Changelog

c9211b5 Use ldflags for version
ab0c3c7 Update README
b54de96 Merge branch 'rigaspapas-adjust-chart-height'
c9a404b Update go.mod
b46cea5 Make chart height adjustable


",127352116
789,False,False,2019-09-15T07:15:58Z,2019-09-15T07:17:04Z,"## Changelog

53a5d72 Update CHANGELOG
7f2fad6 Merge branch 'alrs-fix-dropped-errors'
33297c7 Return missing error
1aa81b8 Merge branch 'fix-dropped-errors' of github.com:alrs/cointop into alrs-fix-dropped-errors
5f073fe Navigation bug fixes. Fixes #41
489b048 Fix dropped errors

",127352116
790,False,False,2019-09-08T16:55:00Z,2019-09-08T16:55:43Z,"## Changelog

cb2e7f5 Update changelog
d2350a3 v1.3.5
5e2134e Fix sorting issue with favorites and portfolio
fd3ba0f require go v1.12
3211bd7 Use os.UserHomeDir(); closes #40
f2027ca Remove additional price fetch; CoinGecko fixed bug
f1e3f81 Update isatty package to resolve #39
50f69ec Add mentions
db3cb70 Use sync.Map for maintaining map of all coins
2e36bdb Update assets

",127352116
791,False,False,2019-07-05T07:16:56Z,2019-07-05T07:17:20Z,"## Changelog

3c55749 v1.3.4
68a8a0f Update windows instructions
24e692c Windows path fix
d13be7d Update README
2d4185b Fix for go10
cea9a81 Use Go's filepath seperator for config path
a29e06b Use mkdirAll for creating config
e39aa24 Fix nil check

",127352116
792,False,False,2019-07-02T08:02:56Z,2019-07-02T08:03:19Z,"## Changelog

dbe0dad v1.3.3
96cab2b Add chart loading label
3be23ec convert symbol to name for price api
f64aa46 Use cobra for cli flags. Added price command
592d061 Create view structures
8cdb1b1 Fix readme typo
4ef4f7a Clean up

",127352116
793,False,False,2019-06-30T18:59:53Z,2019-06-30T19:00:12Z,"## Changelog

bedbda8 cointop 1.3.2
29283b7 table toggle fullscreen shortcut
47b4b84 Merge pull request #38 from waymobetta/master
93d019e [README] fix license path
d3654a7 add windows build instruction to faq
f1da2dc Hide open shortcut in statusbar if no open command found
52496b8 Fix refresh limit flag default
2687144 Change toml config defaultView to default_view
065ab01 Add refresh rate flag. Closes #23
9c465bf Update changelog
348190d Update readme

",127352116
794,False,False,2019-06-26T07:30:52Z,2019-06-26T07:31:31Z,"## Changelog

4dece82 v1.3.1
0dac74c colorscheme help install instructions
0abaeb9 Remove exponential notation formatting from termui. Fixes #35
599d2a2 Fetch full price if avaiable in coingecko api. Closes #37
22e5e5a Add flag to hide marketbar, statusbar, or chart view and add flag to only show the table. Closes #27
434db03 Update readme

",127352116
795,False,False,2019-06-10T02:43:24Z,2019-06-10T02:48:15Z,"## Changelog

a255d67 go mod vendor
6405fda Update CHANGELOG
a7b5713 colorscheme parse hex
eb14d98 Update readme
bdcde19 Add colorscheme section to readme
1308bec Add colorscheme command line flag
12d56de Use theme styles
81af942 Read colorscheme file
65f4317 Add tip jar

",127352116
796,False,False,2019-06-01T23:57:17Z,2019-06-01T23:58:17Z,"## Changelog

da7cdbd 1.2.2
caf6a60 Fix market bar bg color
3e70191 Add FUNDING.yml
a3d9626 Fix concurrent filecache write error; hopefully actually fixes #32

",127352116
797,False,False,2019-06-01T16:54:56Z,2019-06-01T16:55:59Z,"## Changelog

14252d4 1.2.1
ca3921e Use mutex locks for filecache writes; fixes #32""
50f8d6c Remove github issue templates
43c90fb Update FAQ

",127352116
798,False,False,2019-05-13T03:47:21Z,2019-05-13T03:48:15Z,"## Changelog

eaf9423 v1.2.0
6361b22 Add CoinGecko API support
71d9620 update readme

",127352116
799,False,False,2019-04-23T21:37:00Z,2019-04-23T21:37:22Z,"## Changelog

be84b5e Prompt for CoinMarketCap Pro API Key
a118bd3 update rpm spec

",127352116
800,False,False,2019-04-23T07:23:58Z,2019-04-23T07:24:24Z,"## Changelog

4cc578e 1.1.5
ccd7f74 update Makefile

",127352116
801,False,False,2019-03-18T21:57:24Z,2019-04-22T02:40:57Z,"## Changelog

1a2c05b go mod vendor
0eb3dae closes #26
e457a89 use coinmarketcap pro api v1
3080174 update readme
8db0e65 update faq
f109e58 mentions
5536bfc update snapcraft go
6eb6236 closes #24
b7ea461 Merge pull request #25 from waymobetta/patch-1
8fb6c46 fix installing path
5b40698 update readme

",127352116
802,False,False,2019-02-14T04:00:10Z,2019-02-26T06:35:23Z,"## Changelog

d318efa closes #24
5b40698 update readme

",127352116
803,False,False,2018-12-31T23:35:52Z,2018-12-31T23:36:30Z,"## Changelog

b91ef29 update readme
22d551b add config, clean, and reset flags
9b0670f Merge pull request #23 from The-King-of-Toasters/master
e9b91f9 Fix README
03fcbc6 [readme] search instructions
88a8733 Merge branch 'The-King-of-Toasters-master'
8841804 add make deps
3977149 Add Arch instructions, bump version requirements and fix formatting.
3ec497b Transfer from dep to go modules.
e41559f add portfolio screenshot to readme
a9079be makefile version flag

",127352116
804,False,False,2018-12-26T07:24:07Z,2018-12-26T07:26:17Z,"## Changelog

7474b5e update version
8e58d5a dep ensure

",127352116
805,False,False,2018-12-26T06:48:55Z,2018-12-26T06:50:54Z,"## Changelog

98b6d2b update version

",127352116
806,False,False,2018-12-26T06:20:18Z,2018-12-26T06:24:10Z,"## Changelog

0c5a627 update version
bd58b11 portfolio percentages
70e1809 portfolio chart
e15da25 update readme
a1ae8ac update readme
08a5c1e update readme
55f6199 update readme
caf7a75 portfolio add/edit menu
f017555 portfolio view
1e278fd update readme
c3ab40c Merge pull request #20 from CardanoUmbrella/master
4e37ddb Small spelling correction
b97936b show version in status bar and in help menu
22dd518 print version
1749474 fix show link after refresh
42f6c70 update flatpak update instructions
48b788a update readme
902639e update makefile
5bef88f update rpm version
cbf81aa specs cp
9fa0c93 update copr makefile instructions
a05b8c7 update makefile
d173157 small readme logo
2de454e update makefile
a237cdb update readme

",127352116
807,False,False,2018-06-23T08:13:11Z,2018-06-23T08:17:55Z,"## Changelog

e188845 store favorites by name instead of by symbol
a437bf1 update readme
a20f9d7 resize
1e90b87 update image
39bb319 update readme
7834a3f update readme
8e8283e add currencies
b0e44a9 add NOK
1a81f7e add MYR currency
e8f02ac update brew instructions
803ece8 rpmlint
d1bc73f copr dev
88c81c8 copr update instructions
8d06bc2 rm empty cmd
dc02e6a project pages + copr install
0ba3dc3 add changelog
9f00ca1 create code of conduct
a8d578a create contributing.md
aceb584 Create pull request template
e3ee945 Update issue templates
cf0ad3b 1.0.5

",127352116
808,False,False,2018-05-16T01:56:34Z,2018-05-21T07:26:25Z,"## Changelog

69da4cf add .goreleaser
c0716fb brew test
8b33ac7 Merge pull request #15 from TingPing/patch-1
9139338 update flathub commit rev
5e08a6f add flathub category
249228b appdata: Fix license
9b1b495 flatpak instructions update
9c384ec Exec=cointop
fccab72 move appdata.xml to share/metainfo
413ca00 update flatpak rev
1eafc9d add flathub .desktop file
7beea7d move icons to assets
880d8c5 flathub icons
ab90056 XDG_CONFIG_HOME
e9e480a add flathub files
4454d46 fix output
bbb0d00 clean up
1157009 update flatpak script

",127352116
809,False,False,2018-05-13T01:47:06Z,2018-05-13T01:49:47Z,,127352116
810,False,False,2018-05-12T19:59:15Z,2018-05-12T21:21:31Z,,127352116
811,False,False,2018-05-12T19:42:48Z,2018-05-12T19:50:10Z,,127352116
812,False,False,2018-04-28T00:07:13Z,2018-04-28T00:12:06Z,,127352116
813,False,False,2018-04-26T23:19:19Z,2018-04-27T18:14:24Z,,127352116
814,False,False,2018-04-26T17:46:25Z,2018-04-26T19:26:13Z,,127352116
815,False,False,2020-01-16T21:34:51Z,2020-01-16T22:24:50Z,,47580020
816,False,True,2019-11-20T21:03:58Z,2019-11-20T21:50:53Z,"This is a beta release for v0.37.0

Changes:

- [#1966](https://github.com/blockstack/blockstack-browser/pull/1966): w3c crypto, greatly improving cryptographic performance. Updates blockstack.js to v21.0.0-alpha.4. Also includes lots of code health improvements
- [#1965](https://github.com/blockstack/blockstack-browser/pull/1965): Adding a notice to the wallet page
- [#1973](https://github.com/blockstack/blockstack-browser/pull/1973): Allowing collection scopes during auth
- [#1971](https://github.com/blockstack/blockstack-browser/pull/1971): Open app after installing on Windows
- [#1951](https://github.com/blockstack/blockstack-browser/pull/1951): Update MacOS native code to Swift 4
- [#1942](https://github.com/blockstack/blockstack-browser/pull/1942): Update blockstack.js to v19
- [#1938](https://github.com/blockstack/blockstack-browser/pull/1938): Allow renewing Blockstack IDs
- Removes all social proofs, except Twitter, and changes the URL in the suggested tweet
",47580020
817,False,True,2019-09-04T19:12:36Z,2019-09-13T15:09:03Z,This is an alpha build of the browser with collections support. For developer preview only.,47580020
818,False,True,2019-06-19T21:17:03Z,2019-06-19T21:18:46Z,"## Release notes

- Improved UX of the /clear-auth route (now located at /sign-out)
- Updated blockstack.js version in the Browser to 19.1.0
- Handle relative icon URLs in manifest.json
- Add an E2E test for listFiles
- Better error message when you get rate limited on a subdomain registration
- Changed UX of the 'deny' action when signing in to reduce confusion
- Fixed name price calculation bug",47580020
819,False,True,2019-05-28T13:11:17Z,2019-05-28T13:56:26Z,"## Release notes

- Improved UX of the /clear-auth route (now located at /sign-out)
- Updated blockstack.js version in the Browser to 19.1.0
- Handle relative icon URLs in manifest.json
- Add an E2E test for listFiles
- Better error message when you get rate limited on a subdomain registration
- Changed UX of the 'deny' action when signing in to reduce confusion",47580020
820,False,True,2019-04-01T03:56:15Z,2019-04-01T04:12:59Z,"## Features
- Added end-to-end tests that cover account creation, sign in and restore across many browsers and platforms.
- Added a new home page
- Added a beta mode that switches to the latest beta version for the adventurous
- Development mode in Windows

## Fixes
- Logging in using a non-default web browser will no longer send you to the default browser
- Fixed an issue with some magic recovery code showing as invalid
- Email addresses are now persisted, apps will receive your email when requested
- Fixed issue migrating from an older version

**Windows Notes**
* This release is signed by ""Blockstack PBC""
* The installer is a 'multiple-context' installer. If you run it as a user, it will install only for that user. If you run it as administrator, it will install for all users.",47580020
821,False,True,2019-03-27T16:10:35Z,2019-03-27T16:12:36Z,"## Features
- Added end-to-end tests that cover account creation, sign in and restore across many browsers and platforms.
- Added a new home page
- Added a beta mode that switches to the latest beta version for the adventurous
- Development mode in Windows

## Fixes
- Logging in using a non-default web browser will no longer send you to the default browser
- Fixed an issue with some magic recovery code showing as invalid
- Email addresses are now persisted, apps will receive your email when requested
- Fixed issue migrating from an older version

**Windows Notes**
* This release is signed by ""Blockstack PBC""
* The installer is a 'multiple-context' installer. If you run it as a user, it will install only for that user. If you run it as administrator, it will install for all users.",47580020
822,False,True,2019-03-25T21:07:48Z,2019-06-19T21:18:56Z,"## Features
- Added end-to-end tests that cover account creation, sign in and restore across many browsers and platforms.
- Added a new home page
- Added a beta mode that switches to the latest beta version for the adventurous
- Development mode in Windows

## Fixes
- Logging in using a non-default web browser will no longer send you to the default browser
- Fixed an issue with some magic recovery code showing as invalid
- Email addresses are now persisted, apps will receive your email when requested

**Windows Notes**
* This release is signed by ""Blockstack PBC""
* The installer is a 'multiple-context' installer. If you run it as a user, it will install only for that user. If you run it as administrator, it will install for all users.",47580020
823,False,True,2019-02-12T19:12:19Z,2019-02-12T19:29:44Z,"## Bug fixes
- Improved cross-browser support for the protocol handler
- Ability to reset the browser from the update screen if the password has been forgotten
- Fixed overwriting of stale profiles when logging into Blockstack apps on multiple devices
- Fixed the profile URL contained in the auth response

**Windows Notes**
* This release is signed by ""Blockstack PBC""
* The installer is a 'multiple-context' installer. If you run it as a user, it will install only for that user. If you run it as administrator, it will install for all users.",47580020
824,False,True,2019-01-08T02:51:24Z,2019-01-08T03:09:35Z,"## Bug fixes
- Fixed a Gaia authentication token bug

**Windows Notes**
* This release is signed by ""Blockstack PBC""
* The installer is a 'multiple-context' installer. If you run it as a user, it will install only for that user. If you run it as administrator, it will install for all users.",47580020
825,False,True,2019-01-02T20:33:43Z,2019-01-02T20:56:10Z,"## Bug fixes
- Fixed a bug where usernames don't show up after updating the browser


**Windows Notes**
* This release is signed by ""Blockstack PBC""
* The installer is a 'multiple-context' installer. If you run it as a user, it will install only for that user. If you run it as administrator, it will install for all users.",47580020
826,False,True,2018-12-20T23:04:31Z,2018-12-20T23:15:09Z,"## Features
- Optional user selectable Gaia hubs 

## Bug fixes
- Fixed Bitcoin wallet balance not updating or showing 0.


**Windows Notes**
* This release is signed by ""Blockstack PBC""
* The installer is a 'multiple-context' installer. If you run it as a user, it will install only for that user. If you run it as administrator, it will install for all users.",47580020
827,False,True,2018-12-20T21:04:10Z,2018-12-20T21:14:11Z,"## Features
- Optional user selectable Gaia hubs 

## Bug fixes
- Fixed Bitcoin wallet balance not updating or showing 0.


**Windows Notes**
* This release is signed by ""Blockstack PBC""
* The installer is a 'multiple-context' installer. If you run it as a user, it will install only for that user. If you run it as administrator, it will install for all users.",47580020
828,False,True,2018-10-26T19:37:13Z,2018-10-26T20:26:19Z,"## Bug fixes

- Fixed a sign-in issue that affects legacy Blockstack IDs
- Fixed profile social proof verification issues on the web-hosted browser
- Fixed a name registration UI bug

**Windows Notes**
* This release is signed by ""Blockstack PBC""
* The installer is a 'multiple-context' installer. If you run it as a user, it will install only for that user. If you run it as administrator, it will install for all users.",47580020
829,False,True,2018-09-28T20:02:24Z,2018-09-28T20:23:49Z,"## Features

- Restore your ID via QR code scan
- Improved onboarding experience


**Windows Notes**
* This release is signed by ""Blockstack PBC""
* The installer is a 'multiple-context' installer. If you run it as a user, it will install only for that user. If you run it as administrator, it will install for all users.

**Linux Notes**

* Please make sure to `chmod +x` on the `.sh` file before you try to run it.",47580020
830,False,True,2018-09-28T15:42:17Z,2018-09-28T16:51:03Z,"## Features

- Restore your ID via QR code scan
- Improved onboarding experience


**Windows Notes**
* This release is signed by ""Blockstack PBC""
* The installer is a 'multiple-context' installer. If you run it as a user, it will install only for that user. If you run it as administrator, it will install for all users.",47580020
831,False,True,2018-09-05T18:41:04Z,2018-09-05T18:55:07Z,"## Bug Fixes

- Fixed wallet showing 0 balance
- Fixed build process bug which increased the bundle size
- Fixed minor UI issue in onboarding views that affected some mobile screen sizes

**Windows Notes**
* This release is signed by ""Blockstack PBC""
* The installer is a 'multiple-context' installer. If you run it as a user, it will install only for that user. If you run it as administrator, it will install for all users.",47580020
832,False,True,2018-08-30T17:57:06Z,2018-08-30T18:09:36Z,"This public alpha release features:

- More tolerant input for recovery codes 
- Profile UI enhancements
- Fixed bug with profile photo upload
- Improved error handling during onboarding
- Added confirmation screens for wallet actions

**Windows Notes**
* This release is signed by ""Blockstack PBC""
* The installer is a 'multiple-context' installer. If you run it as a user, it will install only for that user. If you run it as administrator, it will install for all users.",47580020
833,False,True,2018-08-22T20:35:53Z,2018-08-22T20:39:27Z,"This public alpha release features:

- Fixed issue with app icons not displaying in Firefox and Safari
- Fixed potential broken app state during onboarding

**Windows Notes**
* This release is signed by ""Blockstack PBC""
* The installer is a 'multiple-context' installer. If you run it as a user, it will install only for that user. If you run it as administrator, it will install for all users.",47580020
834,False,True,2018-08-15T21:03:59Z,2018-08-20T03:08:19Z,"This public alpha release features:

- Fix for a social proof verification bug that affects some usernames
- Performance improvements
- User experience improvements

**Windows Notes**
* This release is signed by ""Blockstack PBC""
* The installer is a 'multiple-context' installer. If you run it as a user, it will install only for that user. If you run it as administrator, it will install for all users.",47580020
835,False,True,2018-08-15T16:08:57Z,2018-08-15T16:22:23Z,"This release fixes a bug where authenticating using older Blockstack IDs can result in an empty or incorrect profile.json being returned to the app.

Discussion regarding this bug:
GitHub: https://github.com/blockstack/blockstack-browser/issues/1607
Forums: https://forum.blockstack.org/t/blockstack-profile-json-corruption/5965

**Windows Notes**
* This release is signed by ""Blockstack PBC""
* The installer is a 'multiple-context' installer. If you run it as a user, it will install only for that user. If you run it as administrator, it will install for all users.",47580020
836,False,True,2018-08-03T19:26:26Z,2018-08-03T19:39:40Z,"This public alpha release features:

- Onboarding user experience improvements
- Fixes a bug where profile information is wiped after purchasing a username
- Anonymous analytics (opt-out in settings menu)

**Windows Notes**
* This release is signed by ""Blockstack PBC""
* The installer is a 'multiple-context' installer. If you run it as a user, it will install only for that user. If you run it as administrator, it will install for all users.",47580020
837,False,True,2018-07-20T15:27:33Z,2018-07-20T15:37:48Z,"This public alpha release features:

- Added an 8 character minimum length requirement for sponsored usernames

**Windows Notes**
* This release is signed by ""Blockstack PBC""
* The installer is a 'multiple-context' installer. If you run it as a user, it will install only for that user. If you run it as administrator, it will install for all users.",47580020
838,False,True,2018-07-17T01:34:33Z,2018-07-17T02:01:48Z,"This public alpha release features:

- Ability to register sponsored usernames after sign up
- Bug fixes


**Windows Notes**
* This release is signed by ""Blockstack PBC""
* The installer is a 'multiple-context' installer. If you run it as a user, it will install only for that user. If you run it as administrator, it will install for all users.",47580020
839,False,True,2018-06-28T03:47:03Z,2018-06-28T04:05:19Z,"This public alpha release features:

- Fixed a bug where social verifications show as unverified
- Fixed issues with missing usernames after restoring an ID
- Fixed email scope not returning anything after restoring an ID
- Onboarding flow improvements

> NOTE: The new bitcoin wallet is stored in the browser and secured by the same key as your identity. This is a change from prior versions where we were the bitcoins were stored in a separate wallet from your identity. To migrate the bitcoins from the old wallet, follow the instructions [here](https://forum.blockstack.org/t/interrupted-username-purchase-now-in-limbo-via-blockstack-browser-on-windows/1701/15).

**Windows Notes**
* This release is signed by ""Blockstack PBC""
* The installer is a 'multiple-context' installer. If you run it as a user, it will install only for that user. If you run it as administrator, it will install for all users.

**Names purchased in a pre-release version prior to v0.10.0 will need to be transferred to the production keychain location with a future tool.**",47580020
840,False,True,2018-06-25T23:41:47Z,2018-06-25T23:52:35Z,"This public alpha release features:

- New app (Misthos)
- Fixes critical auth bug for users with badly configured zone files

> NOTE: The new bitcoin wallet is stored in the browser and secured by the same key as your identity. This is a change from prior versions where we were the bitcoins were stored in a separate wallet from your identity. To migrate the bitcoins from the old wallet, follow the instructions [here](https://forum.blockstack.org/t/interrupted-username-purchase-now-in-limbo-via-blockstack-browser-on-windows/1701/15).

**Windows Notes**
* This release is signed by ""Blockstack PBC""
* The installer is a 'multiple-context' installer. If you run it as a user, it will install only for that user. If you run it as administrator, it will install for all users.

**Names purchased in a pre-release version prior to v0.10.0 will need to be transferred to the production keychain location with a future tool.**",47580020
841,False,True,2018-05-31T22:24:20Z,2018-05-31T22:35:46Z,"This public alpha release features:

- New and improved onboarding process
- Ability to register free `<you>.id.blockstack` sponsored names during onboarding
- New apps
- Bug fixes

> NOTE: The new bitcoin wallet is stored in the browser and secured by the same key as your identity. This is a change from prior versions where we were the bitcoins were stored in a separate wallet from your identity. To migrate the bitcoins from the old wallet, follow the instructions [here](https://forum.blockstack.org/t/interrupted-username-purchase-now-in-limbo-via-blockstack-browser-on-windows/1701/15).

**Windows Notes**
* This release is signed by ""Blockstack PBC""
* The installer is a 'multiple-context' installer. If you run it as a user, it will install only for that user. If you run it as administrator, it will install for all users.

**Names purchased in a pre-release version prior to v0.10.0 will need to be transferred to the production keychain location with a future tool.**",47580020
842,False,True,2018-05-30T20:14:48Z,2018-05-30T20:30:15Z,"This public alpha release features:

- New and improved onboarding process
- Ability to register free `<you>.id.blockstack` sponsored names during onboarding
- New apps

> NOTE: The new bitcoin wallet is stored in the browser and secured by the same key as your identity. This is a change from prior versions where we were the bitcoins were stored in a separate wallet from your identity. To migrate the bitcoins from the old wallet, follow the instructions [here](https://forum.blockstack.org/t/interrupted-username-purchase-now-in-limbo-via-blockstack-browser-on-windows/1701/15).

**Windows Notes**
* This release is signed by ""Blockstack PBC""
* The installer is a 'multiple-context' installer. If you run it as a user, it will install only for that user. If you run it as administrator, it will install for all users.

**Names purchased in a pre-release version prior to v0.10.0 will need to be transferred to the production keychain location with a future tool.**",47580020
843,False,True,2018-04-10T21:19:56Z,2018-04-10T21:39:29Z,"This public alpha release features:

- Removal of bundled Blockstack Core
- Client-side Bitcoin transactions
- Fixes an auth error which occurs on new/unsaved profiles
- Enables email scope in auth
- Enables registration and bitcoin wallets on the Windows and Webapp builds!

> NOTE: The new bitcoin wallet is stored in the browser and secured by the same key as your identity. This is a change from prior versions where we were the bitcoins were stored in a separate wallet from your identity. To migrate the bitcoins from the old wallet, follow the instructions [here](https://forum.blockstack.org/t/interrupted-username-purchase-now-in-limbo-via-blockstack-browser-on-windows/1701/15).

**Windows Notes**
* This release is signed by ""Blockstack PBC""
* The installer is a 'multiple-context' installer. If you run it as a user, it will install only for that user. If you run it as administrator, it will install for all users.

**Names purchased in a pre-release version prior to v0.10.0 will need to be transferred to the production keychain location with a future tool.**",47580020
844,False,True,2018-03-19T20:03:30Z,2018-03-19T20:12:01Z,"This public alpha release features:

- New chat apps
- Documentation update

The bitcoin transactions needed for name registrations are now generated in the browser. (Without a call to the local Blockstack core node) The pre-order and registration transactions are submitted to and queued on a transaction broadcasting service which will broadcast them to the network in the correct sequence. There's no longer a need to keep the browser online for several hours to register names.

> NOTE: The new bitcoin wallet is stored in the browser and secured by the same key as your identity. This is a change from prior versions where we were the bitcoins were stored in a separate wallet from your identity. To migrate the bitcoins from the old wallet, follow the instructions [here](https://forum.blockstack.org/t/interrupted-username-purchase-now-in-limbo-via-blockstack-browser-on-windows/1701/15).

**Windows Notes**

* This release of the Windows installer runs natively, however, it does _not_ support using the bitcoin wallet or performing transactions, however, the next release should enable both.
* Soon, the Windows build will support _all_ of our features, natively
* This release is signed by ""Blockstack PBC""
* The installer is a 'multiple-context' installer. If you run it as a user, it will install only for that user. If you run it as administrator, it will install for all users.

**Names purchased in a pre-release version prior to v0.10.0 will need to be transferred to the production keychain location with a future tool.**",47580020
845,False,True,2018-03-15T08:57:34Z,2018-03-15T09:09:10Z,"This public alpha release features:

- Improved security

The bitcoin transactions needed for name registrations are now generated in the browser. (Without a call to the local Blockstack core node) The pre-order and registration transactions are submitted to and queued on a transaction broadcasting service which will broadcast them to the network in the correct sequence. There's no longer a need to keep the browser online for several hours to register names.

> NOTE: The new bitcoin wallet is stored in the browser and secured by the same key as your identity. This is a change from prior versions where we were the bitcoins were stored in a separate wallet from your identity. To migrate the bitcoins from the old wallet, follow the instructions [here](https://forum.blockstack.org/t/interrupted-username-purchase-now-in-limbo-via-blockstack-browser-on-windows/1701/15).

**Windows Notes**

* This release of the Windows installer runs natively, however, it does _not_ support using the bitcoin wallet or performing transactions, however, the next release should enable both.
* Soon, the Windows build will support _all_ of our features, natively
* This release is signed by ""Blockstack PBC""
* The installer is a 'multiple-context' installer. If you run it as a user, it will install only for that user. If you run it as administrator, it will install for all users.

**Names purchased in a pre-release version prior to v0.10.0 will need to be transferred to the production keychain location with a future tool.**",47580020
846,False,True,2018-03-12T21:26:52Z,2018-03-12T21:51:36Z,"This public alpha release features:

- Browser name registration transaction generation.
- Bug fix for profiles without usernames: https://github.com/blockstack/blockstack-browser/issues/1228

The bitcoin transactions needed for name registrations are now generated in the browser. (Without a call to the local Blockstack core node) The pre-order and registration transactions are submitted to and queued on a transaction broadcasting service which will broadcast them to the network in the correct sequence. There's no longer a need to keep the browser online for several hours to register names.

> NOTE: The new bitcoin wallet is stored in the browser and secured by the same key as your identity. This is a change from prior versions where we were the bitcoins were stored in a separate wallet from your identity. To migrate the bitcoins from the old wallet, follow the instructions [here](https://forum.blockstack.org/t/interrupted-username-purchase-now-in-limbo-via-blockstack-browser-on-windows/1701/15).

**Windows Notes**

* This release of the Windows installer runs natively, however, it does _not_ support using the bitcoin wallet or performing transactions, however, the next release should enable both.
* Soon, the Windows build will support _all_ of our features, natively
* This release is signed by ""Blockstack PBC""
* The installer is a 'multiple-context' installer. If you run it as a user, it will install only for that user. If you run it as administrator, it will install for all users.

**Names purchased in a pre-release version prior to v0.10.0 will need to be transferred to the production keychain location with a future tool.**",47580020
847,False,True,2018-02-28T18:21:20Z,2018-02-28T22:58:02Z,"This public alpha release features:
* Blockstack Core v0.18
* Support for Blockstack IDs with subdomains

> NOTE: The new bitcoin wallet is stored in the browser and secured by the same key as your identity. This is a change from prior versions where we were the bitcoins were stored in a separate wallet from your identity. To migrate the bitcoins from the old wallet, follow the instructions [here](https://forum.blockstack.org/t/interrupted-username-purchase-now-in-limbo-via-blockstack-browser-on-windows/1701/15).

**Windows Notes**
* This release of the Windows installer runs natively, however, it does _not_ support purchasing names or using the bitcoin wallet -- this is a leaner application experience that supports:
   1. creating a profile
   2. adding social verifications
   3. transfering Onename addresses to the Browser identity wallet
   4. authentication with applications that use the newer versions of Blockstack's storage system.
* Soon, the Windows build will support _all_ of our features, natively
* This release is signed by ""Blockstack PBC""
* The installer is a 'multiple-context' installer. If you run it as a user, it will install only for that user. If you run it as administrator, it will install for all users.

**Names purchased in a pre-release version prior to v0.10.0 will need to be transferred to the production keychain location with a future tool.**",47580020
848,False,True,2018-02-01T12:19:42Z,2018-02-01T12:41:25Z,"This public alpha release features:
* Fixes for a Blockstack ID address generation bug
* Fixes for an authentication bug that occurred in some apps using multi-player storage
* Increased test coverage
* Improved storage code

> NOTE: The new bitcoin wallet is stored in the browser and secured by the same key as your identity. This is a change from prior versions where we were the bitcoins were stored in a separate wallet from your identity. To migrate the bitcoins from the old wallet, follow the instructions [here](https://forum.blockstack.org/t/interrupted-username-purchase-now-in-limbo-via-blockstack-browser-on-windows/1701/15).

**Windows Notes**
* This release of the Windows installer runs natively, however, it does _not_ support purchasing names or using the bitcoin wallet -- this is a leaner application experience that supports:
   1. creating a profile
   2. adding social verifications
   3. transfering Onename addresses to the Browser identity wallet
   4. authentication with applications that use the newer versions of Blockstack's storage system.
* Soon, the Windows build will support _all_ of our features, natively
* This release is signed by ""Blockstack PBC""
* The installer is a 'multiple-context' installer. If you run it as a user, it will install only for that user. If you run it as administrator, it will install for all users.

**Names purchased in a pre-release version prior to v0.10.0 will need to be transferred to the production keychain location with a future tool.**",47580020
849,False,True,2018-01-12T22:29:00Z,2018-01-12T22:38:47Z,"This public alpha release features:
* Support for multi-player storage in Gaia
* New apps 

> NOTE: The new bitcoin wallet is stored in the browser and secured by the same key as your identity. This is a change from prior versions where we were the bitcoins were stored in a separate wallet from your identity. To migrate the bitcoins from the old wallet, follow the instructions [here](https://forum.blockstack.org/t/interrupted-username-purchase-now-in-limbo-via-blockstack-browser-on-windows/1701/15).

**Windows Notes**
* This release of the Windows installer runs natively, however, it does _not_ support purchasing names or using the bitcoin wallet -- this is a leaner application experience that supports:
   1. creating a profile
   2. adding social verifications
   3. transfering Onename addresses to the Browser identity wallet
   4. authentication with applications that use the newer versions of Blockstack's storage system.
* Soon, the Windows build will support _all_ of our features, natively
* This release is signed by ""Blockstack PBC""
* The installer is a 'multiple-context' installer. If you run it as a user, it will install only for that user. If you run it as administrator, it will install for all users.

**Names purchased in a pre-release version prior to v0.10.0 will need to be transferred to the production keychain location with a future tool.**",47580020
850,False,True,2018-01-12T05:39:12Z,2018-01-12T05:47:55Z,"This public alpha release features:
* Support for multi-player storage in Gaia
* New apps 

> NOTE: The new bitcoin wallet is stored in the browser and secured by the same key as your identity. This is a change from prior versions where we were the bitcoins were stored in a separate wallet from your identity. To migrate the bitcoins from the old wallet, follow the instructions [here](https://forum.blockstack.org/t/interrupted-username-purchase-now-in-limbo-via-blockstack-browser-on-windows/1701/15).

**Windows Notes**
* This release of the Windows installer runs natively, however, it does _not_ support purchasing names or using the bitcoin wallet -- this is a leaner application experience that supports:
   1. creating a profile
   2. adding social verifications
   3. transfering Onename addresses to the Browser identity wallet
   4. authentication with applications that use the newer versions of Blockstack's storage system.
* Soon, the Windows build will support _all_ of our features, natively
* This release is signed by ""Blockstack PBC""
* The installer is a 'multiple-context' installer. If you run it as a user, it will install only for that user. If you run it as administrator, it will install for all users.

**Names purchased in a pre-release version prior to v0.10.0 will need to be transferred to the production keychain location with a future tool.**",47580020
851,False,True,2017-12-27T12:08:22Z,2017-12-27T12:23:26Z,"This public alpha release features:
* Enables support for authentication with apps that use the new direct to gaia hub storage system on Windows. Windows users will now be able to use new gaia apps!
* Fixes for the invalid hex string error that periodically occurred.

> NOTE: The new bitcoin wallet is stored in the browser and secured by the same key as your identity. This is a change from prior versions where we were the bitcoins were stored in a separate wallet from your identity. To migrate the bitcoins from the old wallet, follow the instructions [here](https://forum.blockstack.org/t/interrupted-username-purchase-now-in-limbo-via-blockstack-browser-on-windows/1701/15).

**Windows Notes**
* This release of the Windows installer runs natively, however, it does _not_ support purchasing names or using the bitcoin wallet -- this is a leaner application experience that supports:
   1. creating a profile
   2. adding social verifications
   3. transfering Onename addresses to the Browser identity wallet
   4. authentication with applications that use the newer versions of Blockstack's storage system.
* Soon, the Windows build will support _all_ of our features, natively
* This release is signed by ""Blockstack PBC""
* The installer is a 'multiple-context' installer. If you run it as a user, it will install only for that user. If you run it as administrator, it will install for all users.

**Names purchased in a pre-release version prior to v0.10.0 will need to be transferred to the production keychain location with a future tool.**",47580020
852,False,True,2017-12-20T00:21:41Z,2017-12-20T15:55:21Z,"This public alpha release features:
* 14 new apps added to home screen

> NOTE: The new bitcoin wallet is stored in the browser and secured by the same key as your identity. This is a change from prior versions where we were the bitcoins were stored in a separate wallet from your identity. To migrate the bitcoins from the old wallet, follow the instructions [here](https://forum.blockstack.org/t/interrupted-username-purchase-now-in-limbo-via-blockstack-browser-on-windows/1701/15).

**Windows Build**
* This release of the Windows installer runs natively, however, it does _not_ support purchasing names, using our storage system with applications, or using the bitcoin wallet -- this is a leaner application experience that supports:
   1. creating a profile
   2. adding social verifications
   3. transfering Onename addresses to the Browser identity wallet
   4. authentication with applications that do not use Blockstack's storage system.
* Soon, the Windows build will support _all_ of our features, natively
* Adventurous developers can still use the launcher script to help set up a Docker environment
* This release is signed by ""Blockstack PBC""

**Linux/Docker Script**
* The Blockstack-for-Linux.sh script can be used to start a Blockstack Browser daemon on Linux and other environments supporting Docker
* Using the script requires setting up Docker beforehand
* run `./Blockstack-for-Linux-v0.21.5.sh help` for instructions on using the script

**Known issues**
These will be fixed in an upcoming release:
* Dropbox support is temporarily disabled in this release. It will be re-enabled in a future release. https://github.com/blockstack/blockstack-browser/issues/908

**Names purchased in a pre-release version prior to v0.10.0 will need to be transferred to the production keychain location with a future tool.**",47580020
853,False,True,2017-12-06T00:34:40Z,2017-12-06T00:40:53Z,"This public alpha release features:
* Fixes a Blockstack core bug 

> NOTE: The new bitcoin wallet is stored in the browser and secured by the same key as your identity. This is a change from prior versions where we were the bitcoins were stored in a separate wallet from your identity. To migrate the bitcoins from the old wallet, follow the instructions [here](https://forum.blockstack.org/t/interrupted-username-purchase-now-in-limbo-via-blockstack-browser-on-windows/1701/15).

**Known issues**
These will be fixed in an upcoming release:
* Dropbox support is temporarily disabled in this release. It will be re-enabled in a future release. https://github.com/blockstack/blockstack-browser/issues/908

**Names purchased in a pre-release version prior to v0.10.0 will need to be transferred to the production keychain location with a future tool.**",47580020
854,False,True,2017-11-23T17:41:11Z,2017-11-23T17:45:04Z,"This public alpha release features:
* A new app
* Renamed ""Trust Level"" to ""Social Level"" to avoid misleading users
* Bug fixes

> NOTE: The new bitcoin wallet is stored in the browser and secured by the same key as your identity. This is a change from prior versions where we were the bitcoins were stored in a separate wallet from your identity. To migrate the bitcoins from the old wallet, follow the instructions [here](https://forum.blockstack.org/t/interrupted-username-purchase-now-in-limbo-via-blockstack-browser-on-windows/1701/15).

**Windows Build**
* This release of the Windows installer runs natively, however, it does _not_ support purchasing names, using our storage system with applications, or using the bitcoin wallet -- this is a leaner application experience that supports:
   1. creating a profile
   2. adding social verifications
   3. transfering Onename addresses to the Browser identity wallet
   4. authentication with applications that do not use Blockstack's storage system.
* Previous Windows builds used an installation of Docker to execute background daemons for the Blockstack Browser, this supported the authentication, name purchasing, and bitcoin wallet features.
* Trying to install docker and the containers automatically resulted in a lot of problems, and we believe that a native experience for Windows will provide a much better overall experience.
* In the future, the Windows build will support _all_ of our features, natively
* Adventurous developers can still use the launcher script to help set up a Docker environment
* This release is signed by ""Blockstack PBC""

**Linux/Docker Script**
* The Blockstack-for-Linux.sh script can be used to start a Blockstack Browser daemon on Linux and other environments supporting Docker
* Using the script requires setting up Docker beforehand
* run `./Blockstack-for-Linux-v0.20.1.sh help` for instructions on using the script


**Known issues**
These will be fixed in an upcoming release:
* Dropbox support is temporarily disabled in this release. It will be re-enabled in a future release. https://github.com/blockstack/blockstack-browser/issues/908

**Names purchased in a pre-release version prior to v0.10.0 will need to be transferred to the production keychain location with a future tool.**",47580020
855,False,True,2017-11-13T18:42:31Z,2017-11-13T18:44:13Z,"This public alpha release features:
* Many new apps!

> NOTE: The new bitcoin wallet is stored in the browser and secured by the same key as your identity. This is a change from prior versions where we were the bitcoins were stored in a separate wallet from your identity. To migrate the bitcoins from follow the instructions [here](https://forum.blockstack.org/t/interrupted-username-purchase-now-in-limbo-via-blockstack-browser-on-windows/1701/15).

**Known issues**
These will be fixed in an upcoming release:
* Dropbox support is temporarily disabled in this release. It will be re-enabled in a future release. https://github.com/blockstack/blockstack-browser/issues/908

**Windows Build**
* This release of the Windows installer runs natively, however, it does _not_ support purchasing names, using our storage system with applications, or using the bitcoin wallet -- this is a leaner application experience that supports:
   1. creating a profile
   2. adding social verifications
   3. transfering Onename addresses to the Browser identity wallet
   4. authentication with applications that do not use Blockstack's storage system.
* Previous Windows builds used an installation of Docker to execute background daemons for the Blockstack Browser, this supported the authentication, name purchasing, and bitcoin wallet features.
* Trying to install docker and the containers automatically resulted in a lot of problems, and we believe that a native experience for Windows will provide a much better overall experience.
* In the future, the Windows build will support _all_ of our features, natively
* Adventurous developers can still use the launcher script to help set up a Docker environment
* This release is signed by ""Blockstack PBC""

**Linux/Docker Script**
* The Blockstack-for-Linux.sh script can be used to start a Blockstack Browser daemon on Linux and other environments supporting Docker
* Using the script requires setting up Docker beforehand
* run `./Blockstack-for-Linux-v0.20.1.sh help` for instructions on using the script

**Names purchased in a pre-release version prior to v0.10.0 will need to be transferred to the production keychain location with a future tool.**",47580020
856,False,True,2017-11-08T21:00:17Z,2017-11-08T21:02:04Z,"This public alpha release features:
* Improvements to the social media account verification process
* New apps
* Bug fixes

> NOTE: The new bitcoin wallet is stored in the browser and secured by the same key as your identity. This is a change from prior versions where we were the bitcoins were stored in a separate wallet from your identity. To migrate the bitcoins from follow the instructions [here](https://forum.blockstack.org/t/interrupted-username-purchase-now-in-limbo-via-blockstack-browser-on-windows/1701/15).

**Windows Build**
* This release of the Windows installer runs natively, however, it does _not_ support purchasing names, using our storage system with applications, or using the bitcoin wallet -- this is a leaner application experience that supports:
   1. creating a profile
   2. adding social verifications
   3. transfering Onename addresses to the Browser identity wallet
   4. authentication with applications that do not use Blockstack's storage system.
* Previous Windows builds used an installation of Docker to execute background daemons for the Blockstack Browser, this supported the authentication, name purchasing, and bitcoin wallet features.
* Trying to install docker and the containers automatically resulted in a lot of problems, and we believe that a native experience for Windows will provide a much better overall experience.
* In the future, the Windows build will support _all_ of our features, natively
* Adventurous developers can still use the launcher script to help set up a Docker environment
* This release is signed by ""Blockstack PBC""

**Linux/Docker Script**
* The Blockstack-for-Linux.sh script can be used to start a Blockstack Browser daemon on Linux and other environments supporting Docker
* Using the script requires setting up Docker beforehand
* run `./Blockstack-for-Linux-v0.20.1.sh help` for instructions on using the script

**Known issues**
These will be fixed in an upcoming release:
* Dropbox support is temporarily disabled in this release. It will be re-enabled in a future release. https://github.com/blockstack/blockstack-browser/issues/908

**Names purchased in a pre-release version prior to v0.10.0 will need to be transferred to the production keychain location with a future tool.**",47580020
857,False,True,2017-11-03T06:30:09Z,2017-11-03T07:09:20Z,"This public alpha release features:
* Restoring a keychain will also restore Blockstack ID profile information for IDs that don't have usernames as long as you are using default storage
* Improved navigation
* Improvements to social media account verification process
* Bug fixes

> NOTE: The new bitcoin wallet is stored in the browser and secured by the same key as your identity. This is a change from prior versions where we were the bitcoins were stored in a separate wallet from your identity. To migrate the bitcoins from follow the instructions [here](https://forum.blockstack.org/t/interrupted-username-purchase-now-in-limbo-via-blockstack-browser-on-windows/1701/15).

**Windows Build**
* This release of the Windows installer runs natively, however, it does _not_ support purchasing names, using our storage system with applications, or using the bitcoin wallet -- this is a leaner application experience that supports:
   1. creating a profile
   2. adding social verifications
   3. transfering Onename addresses to the Browser identity wallet
   4. authentication with applications that do not use Blockstack's storage system.
* Previous Windows builds used an installation of Docker to execute background daemons for the Blockstack Browser, this supported the authentication, name purchasing, and bitcoin wallet features.
* Trying to install docker and the containers automatically resulted in a lot of problems, and we believe that a native experience for Windows will provide a much better overall experience.
* In the future, the Windows build will support _all_ of our features, natively
* Adventurous developers can still use the launcher script to help set up a Docker environment
* This release is signed by ""Blockstack PBC""

**Linux/Docker Script**
* The Blockstack-for-Linux.sh script can be used to start a Blockstack Browser daemon on Linux and other environments supporting Docker
* Using the script requires setting up Docker beforehand
* run `./Blockstack-for-Linux-v0.20.1.sh help` for instructions on using the script

**Known issues**
These will be fixed in an upcoming release:
* Dropbox support is temporarily disabled in this release. It will be re-enabled in a future release. https://github.com/blockstack/blockstack-browser/issues/908

**Names purchased in a pre-release version prior to v0.10.0 will need to be transferred to the production keychain location with a future tool.**",47580020
858,False,True,2017-11-01T16:48:18Z,2017-11-01T16:50:43Z,"This public alpha release features:
* Improved sign in process
* Improved language if a user tries to sign in to an app before completing on-boarding
* Bug fixes

> NOTE: The new bitcoin wallet is stored in the browser and secured by the same key as your identity. This is a change from prior versions where we were the bitcoins were stored in a separate wallet from your identity. To migrate the bitcoins from follow the instructions [here](https://forum.blockstack.org/t/interrupted-username-purchase-now-in-limbo-via-blockstack-browser-on-windows/1701/15).


**Windows Build**
* This release of the Windows installer runs natively, however, it does _not_ support purchasing names, using our storage system with applications, or using the bitcoin wallet -- this is a leaner application experience that supports:
   1. creating a profile
   2. adding social verifications
   3. transfering Onename addresses to the Browser identity wallet
   4. authentication with applications that do not use Blockstack's storage system.
* Previous Windows builds used an installation of Docker to execute background daemons for the Blockstack Browser, this supported the authentication, name purchasing, and bitcoin wallet features.
* Trying to install docker and the containers automatically resulted in a lot of problems, and we believe that a native experience for Windows will provide a much better overall experience.
* In the future, the Windows build will support _all_ of our features, natively
* Adventurous developers can still use the launcher script to help set up a Docker environment
* This release is signed by ""Blockstack PBC""

**Linux/Docker Script**
* The Blockstack-for-Linux.sh script can be used to start a Blockstack Browser daemon on Linux and other environments supporting Docker
* Using the script requires setting up Docker beforehand
* run `./Blockstack-for-Linux-v0.20.0.sh help` for instructions on using the script

**Known issues**
These will be fixed in an upcoming release:
* Dropbox support is temporarily disabled in this release. It will be re-enabled in a future release. https://github.com/blockstack/blockstack-browser/issues/908

**Names purchased in a pre-release version prior to v0.10.0 will need to be transferred to the production keychain location with a future tool.**",47580020
859,False,True,2017-10-31T17:11:09Z,2017-10-31T17:15:25Z,"This public alpha release features:
* Improved app sign in experience
* Improved navigation
* A new link to a support website 
* A new reset browser option that can also be used to reset your password
* A Blockstack ID completion indicator
* Bug fixes and other improvements

> NOTE: The new bitcoin wallet is stored in the browser and secured by the same key as your identity. This is a change from prior versions where we were the bitcoins were stored in a separate wallet from your identity. To migrate the bitcoins from follow the instructions [here](https://forum.blockstack.org/t/interrupted-username-purchase-now-in-limbo-via-blockstack-browser-on-windows/1701/15).

**Windows Build**
* This release of the Windows installer runs natively, however, it does _not_ support purchasing names, using our storage system with applications, or using the bitcoin wallet -- this is a leaner application experience that supports creating a profile, adding social verifications, transfering Onename addresses to the Browser identity wallet, and now authentication with applications that do not use Blockstack's storage system.
* Previous Windows builds used an installation of Docker to execute background daemons for the Blockstack Browser, this supported the authentication, name purchasing, and bitcoin wallet features.
* Trying to install docker and the containers automatically resulted in a lot of problems, and we believe that a native experience for Windows will provide a much better overall experience.
* In the future, the Windows build will support _all_ of our features, natively
* Adventurous developers can still use the launcher script to help set up a Docker environment
* This release is signed by ""Blockstack PBC""

**Linux/Docker Script**
* The Blockstack-for-Linux.sh script can be used to start a Blockstack Browser daemon on Linux and other environments supporting Docker
* Using the script requires setting up Docker beforehand
* run `./Blockstack-for-Linux-v0.19.1.sh help` for instructions on using the script

**Known issues**
These will be fixed in an upcoming release:
* Dropbox support is temporarily disabled in this release. It will be re-enabled in a future release. https://github.com/blockstack/blockstack-browser/issues/908

**Names purchased in a pre-release version prior to v0.10.0 will need to be transferred to the production keychain location with a future tool.**",47580020
860,False,True,2017-10-26T12:58:06Z,2017-10-26T13:04:08Z,"This developer release features:
* Improved social media account verification process
* On-boarding process improvements

> NOTE: The new bitcoin wallet is stored in the browser and secured by the same key as your identity. This is a change from prior versions where we were the bitcoins were stored in a separate wallet from your identity. To migrate the bitcoins from follow the instructions [here](https://forum.blockstack.org/t/interrupted-username-purchase-now-in-limbo-via-blockstack-browser-on-windows/1701/15).

**Known issues**
These will be fixed in an upcoming release:
* Dropbox support is temporarily disabled in this release. It will be re-enabled in a future release. https://github.com/blockstack/blockstack-browser/issues/908


**Windows Build**
* Previous Windows builds used an installation of Docker to execute background daemons for the Blockstack Browser, this supported the authentication, name purchasing, and bitcoin wallet features.
* Trying to install docker and the containers automatically resulted in a lot of problems, and we believe that a native experience for Windows will provide a much better overall experience.
* This release of the Windows installer runs natively, however, it does _not_ support purchasing names, authenticating with applications, or using the bitcoin wallet -- this is a leaner application experience that supports creating a profile, adding social verifications, and transfering Onename addresses to the Browser identity wallet.
* In the future, the Windows build will support _all_ of our features, natively
* Adventurous developers can still use the launcher script to help set up a Docker environment
* This release is signed by ""Blockstack PBC"", however, please confirm that your installer's SHA256 hash is `46f5d28042efe37c783029e38da63769677d32d8a47da05008bd16f0be43bcd1`
* Future releases _will_ be signed.

**Linux/Docker Script**
* The Blockstack-for-Linux.sh script can be used to start a Blockstack Browser daemon on Linux and other environments supporting Docker
* Using the script requires setting up Docker beforehand
* run `./Blockstack-for-Linux-v0.19.0.sh help` for instructions on using the script

**Names purchased in a pre-release version prior to v0.10.0 will need to be transferred to the production keychain location with a future tool.**
",47580020
861,False,True,2017-10-24T19:36:28Z,2017-10-24T19:49:59Z,"This developer release features:
* Streamlined transfer process from Onename
* Navigation improvements
* Security improvements

> NOTE: The new bitcoin wallet is stored in the browser and secured by the same key as your identity. This is a change from prior versions where we were the bitcoins were stored in a separate wallet from your identity. To migrate the bitcoins from follow the instructions [here](https://forum.blockstack.org/t/interrupted-username-purchase-now-in-limbo-via-blockstack-browser-on-windows/1701/15).

**Windows Build**
* Previous Windows builds used an installation of Docker to execute background daemons for the Blockstack Browser, this supported the authentication, name purchasing, and bitcoin wallet features.
* Trying to install docker and the containers automatically resulted in a lot of problems, and we believe that a native experience for Windows will provide a much better overall experience.
* This release of the Windows installer runs natively, however, it does _not_ support purchasing names, authenticating with applications, or using the bitcoin wallet -- this is a leaner application experience that supports creating a profile, adding social verifications, and transfering Onename addresses to the Browser identity wallet.
* In the future, the Windows build will support _all_ of our features, natively
* Adventurous developers can still use the launcher script to help set up a Docker environment
* This release is not signed, however, the installer's SHA256 hash is `dfdd7145afb106bf20338d630a69cc5dd5c82ab0d362c986ff96a6d9626f053b`
* Future releases _will_ be signed.

**Known issues**
These will be fixed in an upcoming release:
* Dropbox support is temporarily disabled in this release. It will be re-enabled in a future release. https://github.com/blockstack/blockstack-browser/issues/908


**Names purchased in a pre-release version prior to v0.10.0 will need to be transferred to the production keychain location with a future tool.**
",47580020
862,False,True,2017-10-20T22:12:12Z,2017-10-20T22:15:51Z,"This developer release features:
* Improvements to the verifications process
* Improved support for Blockstack IDs without a username
* Improved display of usernames that are pending registration confirmation

> NOTE: The new bitcoin wallet is stored in the browser and secured by the same key as your identity. This is a change from prior versions where we were the bitcoins were stored in a separate wallet from your identity. To migrate the bitcoins from follow the instructions [here](https://forum.blockstack.org/t/interrupted-username-purchase-now-in-limbo-via-blockstack-browser-on-windows/1701/15).

**Known issues**
These will be fixed in an upcoming release:
* Dropbox support is temporarily disabled in this release. It will be re-enabled in a future release. https://github.com/blockstack/blockstack-browser/issues/908


**Names purchased in a pre-release version prior to v0.10.0 will need to be transferred to the production keychain location with a future tool.**
",47580020
863,False,True,2017-10-18T21:18:09Z,2017-10-18T21:21:26Z,"This developer release features:
* Improvements to the verifications process
* Improved support for Blockstack IDs without a username
* Improved display of usernames that are pending registration confirmation

> NOTE: The new bitcoin wallet is stored in the browser and secured by the same key as your identity. This is a change from prior versions where we were the bitcoins were stored in a separate wallet from your identity. To migrate the bitcoins from follow the instructions [here](https://forum.blockstack.org/t/interrupted-username-purchase-now-in-limbo-via-blockstack-browser-on-windows/1701/15).

**Known issues**
These will be fixed in an upcoming release:
* Dropbox support is temporarily disabled in this release. It will be re-enabled in a future release. https://github.com/blockstack/blockstack-browser/issues/908


**Names purchased in a pre-release version prior to v0.10.0 will need to be transferred to the production keychain location with a future tool.**
",47580020
864,False,True,2017-10-17T13:12:30Z,2017-10-17T14:09:41Z,"This developer release features:
* Improvements to the verifications process
* Improved support for Blockstack IDs without a username
* Improved display of usernames that are pending registration confirmation

> NOTE: The new bitcoin wallet is stored in the browser and secured by the same key as your identity. This is a change from prior versions where we were the bitcoins were stored in a separate wallet from your identity. To migrate the bitcoins from follow the instructions [here](https://forum.blockstack.org/t/interrupted-username-purchase-now-in-limbo-via-blockstack-browser-on-windows/1701/15).

**Known issues**
These will be fixed in an upcoming release:
* Dropbox support is temporarily disabled in this release. It will be re-enabled in a future release. https://github.com/blockstack/blockstack-browser/issues/908


**Names purchased in a pre-release version prior to v0.10.0 will need to be transferred to the production keychain location with a future tool.**
",47580020
865,False,True,2017-10-11T00:28:31Z,2017-10-11T01:18:04Z,"This developer release features:

* a new address-based social proof verifications system
* a new bitcoin wallet that is derived from your identity key
* a new username registration process that is both faster and cheaper
* an improved sign in process (fixes #864)

> NOTE: The new bitcoin wallet is stored in the browser and secured by the same key as your identity. This is a change from prior versions where we were the bitcoins were stored in a separate wallet from your identity. To migrate the bitcoins from follow the instructions [here](https://forum.blockstack.org/t/interrupted-username-purchase-now-in-limbo-via-blockstack-browser-on-windows/1701/15).

**Known issues**
These will be fixed in an upcoming release:

* You will need to restore your account after upgrading to this version for proper behavior. #562
* Your Blockstack ID information will not be saved unless you have a username. If you edit your Blockstack ID before adding a username, adding a username will cause it to disappear. #866
* After adding a username, the name may take a while to display or indicate it is ready to use when in fact it is not. #864

**Names purchased in a pre-release version prior to v0.10.0 will need to be transferred to the production keychain location with a future tool.**
",47580020
866,False,True,2017-10-08T07:09:41Z,2017-10-08T07:36:29Z,"This developer release features:
* a new address-based social proof verifications system
* a new bitcoin wallet that is derived from your identity key
* a new username registration process that is both faster and cheaper

**Known issues**
 These will be fixed in an upcoming release: 
* You will need to restore your account after upgrading to this version for proper behavior. https://github.com/blockstack/blockstack-browser/issues/562
* Your Blockstack ID information will not be saved unless you have a username. If you edit your Blockstack ID before adding a username, adding a username will cause it to disappear. https://github.com/blockstack/blockstack-browser/issues/866
* Sign in to apps with Blockstack IDs that have newly registered usernames will fail until the name is confirmed on the network. https://github.com/blockstack/blockstack-browser/issues/864
* After adding a username, the name may take a while to display or indicate it is ready to use when in fact it is not. https://github.com/blockstack/blockstack-browser/issues/864

**Names purchased in a pre-release version prior to v0.10.0 will need to be transferred to the production keychain location with a future tool.**",47580020
867,False,True,2017-09-21T15:58:17Z,2017-09-22T11:53:58Z,"This developer release includes a complete redesign and numerous bug fixes.

Linux users should use the included launcher script to start and use Blockstack Browser. The supplied windows installer sets up a docker environment for installing and using Blockstack Browser

**Please note that since this is a pre-release, you may need to restore your account for proper behavior. Also, names purchased in an earlier pre-release version may disappear between pre-release versions as we optimize our keychain format. They may need to be transferred to the production keychain location with a future tool.**",47580020
868,False,True,2017-09-07T16:44:39Z,2017-09-07T17:25:44Z,"This developer release includes the ability to transfer your name to another wallet, improvements to the account restoration process and other improvements!

*Please note that since this is a pre-release, you may need to restore your account for proper behavior. Also, names purchased in an earlier pre-release version may disappear between pre-release versions as we optimize our keychain format. They may need to be transferred to the production keychain location with a future tool.*",47580020
869,False,True,2017-08-24T13:38:44Z,2017-08-24T16:35:35Z,"This developer release includes the following improvements:

* Option to automatically start Blockstack on macOS
* Option to select the default profile used for sign in with Blockstack
* Ability to select which profile is used for sign in to Blockstack apps at sign in time
* Advanced feature which allows manual update of a name's zone file 
* Name registration process improvements
* Numerous bug fixes

*Please note that since this is a pre-release, you should reset your browser's local storage before running a new version. Also, names purchased in a pre-release version may disappear between pre-release versions as we optimize our keychain format. They may need to be transferred to the production keychain location with a future tool.*",47580020
870,False,True,2017-08-10T06:13:24Z,2017-08-10T06:37:22Z,"This developer release includes design improvements and a new status bar.

*Please note that since this is a pre-release, you should reset your browser's local storage before running a new version. Also, names purchased in a pre-release version may disappear between pre-release versions as we optimize our keychain format. They may need to be transferred to the production keychain location with a future tool.*

### Mac

Use the download link below.

### Linux

Follow the instructions [here](https://github.com/blockstack/blockstack-core/blob/master/docs/setup_core_portal.md).",47580020
871,False,True,2017-07-27T15:39:23Z,2017-07-27T15:47:33Z,"This developer release includes a new on-boarding flow and several new Blockstack apps!

*Please note that since this is a pre-release, you should reset your browser's local storage before running a new version. Also, names purchased in a pre-release version may disappear between pre-release versions as we optimize our keychain format. They may need to be transferred to the production keychain location with a future tool.*

### Mac

Use the download link below.

### Linux

Follow the instructions [here](https://github.com/blockstack/blockstack-core/blob/master/docs/setup_core_portal.md).",47580020
872,False,True,2017-07-23T09:18:03Z,2017-07-23T11:14:54Z,"This pre-release fixes issues with withdrawing bitcoin and storage of larger files.

*Please note that since this is a pre-release, you should reset your browser's local storage before running a new version. Also, names purchased in a pre-release version may disappear between pre-release versions as we optimize our keychain format. They may need to be transferred to the production keychain location with a future tool.*",47580020
873,False,True,2017-07-18T13:22:53Z,2017-07-18T13:37:43Z,"This developer release enables sign in to apps and storage without a username.

*Please note that since this is a pre-release, you should reset your browser's local storage before running a new version. Also, names purchased in a pre-release version may disappear between pre-release versions as we optimize our keychain format. They may need to be transferred to the production keychain location with a future tool.*

### Mac

Use the download link below.

### Linux

Follow the instructions [here](https://github.com/blockstack/blockstack-core/blob/rc-0.14.3/docs/setup_core_portal.md).
",47580020
874,False,True,2017-07-12T13:09:34Z,2017-07-12T13:15:37Z,"This developer release features improvements to name registration speed and cost, support for apps that use storage, and numerous other fixes.

_Please note that since this is a pre-release, you should reset your browser's local storage before running a new version. Also, names purchased in a pre-release version may disappear between pre-release versions as we optimize our keychain format. They may need to be transferred to the production keychain location with a future tool._",47580020
875,False,True,2017-06-23T16:05:02Z,2017-06-23T16:23:47Z,"This release features initialization of your Gaia storage on Dropbox, an improved keychain and the ability to log in to apps before buying a username.

_Please note: Names created on earlier versions may no longer appear in your Profiles app. Don't worry! The names are still there and will re-appear once migrated with an upcoming migration tool. Make sure to save your backup phrase._",47580020
876,False,True,2017-06-02T02:22:25Z,2017-06-02T02:28:36Z,"This developer release features:
* improvements to the registrar

### Mac

Use the download link below.

### Linux

Follow the instructions [here](https://github.com/blockstack/blockstack-core/blob/rc-0.14.2/docs/setup_core_portal.md).

### Windows

Coming soon.",47580020
877,False,True,2017-05-23T09:15:41Z,2017-05-23T09:23:27Z,"Announcing our first developer release! This release features:

* an entirely new on-boarding flow
* a new name registration process that allows you to create & sign in with profiles before buying a username
* an improved authentication process that returns Blockstack Core session tokens which will allow your app to access user storage in an upcoming release
* ability to use major functions without connecting a storage provider
* new & improved status bar

### Mac

Use the download link below.

### Linux

Follow the instructions [here](https://github.com/blockstack/blockstack-core/blob/rc-0.14.2/docs/setup_core_portal.md).

### Windows

Coming soon.",47580020
878,False,True,2017-05-08T15:29:04Z,2017-05-08T15:47:51Z,"This release features a release candidate of Blockstack Core 0.14.2, increased test coverage and stability improvements.

* Fixes authentication issue.",47580020
879,False,True,2017-05-06T04:55:56Z,2017-05-06T05:13:27Z,"This release features a release candidate of Blockstack Core 0.14.2, increased test coverage and stability improvements.",47580020
880,False,True,2017-04-19T12:45:49Z,2017-04-19T12:55:24Z,This release features improved integration with Blockstack Core along with security and (local) logging.,47580020
881,False,True,2017-04-05T16:05:15Z,2017-04-05T16:10:10Z,"This release features a beautiful new Wallet app, improvements to the registration process and automatic updates on macOS.

This release also includes the following improvements:
* Fixes bug that prevented new account creation #392 ",47580020
882,False,True,2017-04-04T17:37:37Z,2017-04-04T17:42:32Z,"This release features a beautiful new Wallet app, improvements to the registration process and automatic updates on macOS.

This release also includes the following improvements:
* Adds storage menu item and fixes wallet menu item in macOS app #385 
* Fixes a problem displaying the wallet address #386 
",47580020
883,False,True,2017-04-04T16:15:08Z,2017-04-04T16:21:20Z,"This release features a beautiful new Wallet app, improvements to the registration process and automatic updates on macOS. ",47580020
884,False,True,2017-03-24T13:01:25Z,2017-03-24T13:12:17Z,"This release features Blockstack Authentication. You can now use Blockstack to [log in to our forum](https://forum.blockstack.org)!

This release:
* #338 - Portal no longer takes as long to open on macOS launch
* #249 - Improvements to wallet app to solve speed (#341) and balance (#347) issues
* Users can now close the auth modal
* #342 - You can now view the current version of Blockstack for macOS by option-clicking the menu bar icon",47580020
885,False,True,2017-03-22T19:31:32Z,2017-03-22T19:38:13Z,"This release features Blockstack Authentication. You can now use Blockstack to [log in to our forum](https://forum.blockstack.org)!

This release:
* Includes updated icons
",47580020
886,False,True,2017-03-22T13:11:14Z,2017-03-22T13:17:33Z,"This release features Blockstack Authentication. You can now use Blockstack to [log in to our forum](https://forum.blockstack.org)!

This release fixes: 
* Bug #280 which caused Approval of an authentication request to fail in the uglified/minified version of Portal bundled with our macOS app.",47580020
887,False,True,2017-03-22T00:21:44Z,2017-03-22T00:25:29Z,This release features Blockstack Authentication. You can now use Blockstack to [log in to our forum](https://forum.blockstack.org)!,47580020
888,False,True,2017-03-10T09:14:10Z,2017-03-10T09:21:19Z,"This release fixes bug https://github.com/blockstack/blockstack-portal/issues/305 in the macOS app where the app would fail to start if a user had not previously used the app on a particular macOS user account.

Thanks goes out to @muneeb-ali and @pietrorea for reporting!",47580020
889,False,True,2017-03-06T19:16:54Z,2017-03-06T19:18:10Z,,47580020
890,False,True,2017-02-15T20:02:52Z,2017-02-15T20:21:31Z,"This is the first release to bundle a Blockstack Core node with the Blockstack Mac app.
",47580020
891,False,True,2017-01-22T17:02:47Z,2017-01-20T11:34:00Z,,47580020
892,False,True,2016-08-12T19:25:26Z,2016-08-12T19:31:05Z,,47580020
893,False,False,2020-02-22T12:37:45Z,2020-02-22T15:22:26Z,"What's new
----------------

* v0.19.0.1 - Mainnet Ignition v0.19.0 - Upgrade to bitcoin core 0.19.0.1 - Bug fixes
	* Upgrade Qtum core to [bitcoin core 0.19.0.1](https://bitcoin.org/en/release/v0.19.0.1#change-log).
	* Add utxoRoot to `callcontract` rpc call transaction receipt.
	* Update Chinese and Korean translations.
	* Update some broken links.

Hash validation
----------------

If you would like to validate that the binaries you download are exactly the same as those provided and built by the Qtum team, then you can compare your binaries to the following sha256sum hashes:

```
ad63893efdcf6cdf79b0bb309f19befa112aac9606fdd90aafb43a83a4d548e1  qtum-0.19.0.1-aarch64-linux-gnu-debug.tar.gz
0dc293a8396606b8a805a2fb0375d54da7c17827f9522eca627c9f3f4ee0fe1a  qtum-0.19.0.1-aarch64-linux-gnu.tar.gz
89e50d5db8e11d38fd32819f006fd75eac63132f82965405cf9306bcbc62aada  qtum-0.19.0.1-arm-linux-gnueabihf-debug.tar.gz
709c685c3a6766e2e8fe45b203c7d5798a3bd106533d0bf89c5a730904b7bff7  qtum-0.19.0.1-arm-linux-gnueabihf.tar.gz
b8338f4305bc8746d8fa927c93f48d0fb01ec7633412399dcf3a84201c7728db  qtum-0.19.0.1-i686-pc-linux-gnu-debug.tar.gz
b5ac8771718fd2f5153b0578c48891e7e5fc7dfdf637a72c2009e3338dade7a0  qtum-0.19.0.1-i686-pc-linux-gnu.tar.gz
faf6955cf9114fd7d712a86fdf24a403faf4e09e0c26c065d8fad639c673f07f  qtum-0.19.0.1-riscv64-linux-gnu-debug.tar.gz
f9c88fd136caf5e7421d8a0e7393e02ea8fa5ed176a6a949a10c15d94f0603ec  qtum-0.19.0.1-riscv64-linux-gnu.tar.gz
4a06931f395d817f8eedc5369f2591d3b265d0a3bab211e91dae63c49b226e2c  qtum-0.19.0.1-x86_64-linux-gnu-debug.tar.gz
960a359467208a87bb6dc38dda6eb9b95142242768b15d19ee3422c964499888  qtum-0.19.0.1-x86_64-linux-gnu.tar.gz
6bf66ed8b5765ed861b16a0f235728cb84d52921810b7e3a24b890dfe2c08a75  src/qtum-0.19.0.1.tar.gz
90fe2dbd731d5c0283d9dbcffb4adccb7017f86ea08538aa2ca21f009d840139  qtum-core-linux-0.19-res.yml

31ca9f297c6171bee9891b5f681e36d3f1697dec0ab3879f28b424db7bcd065b  qtum-0.19.0.1-win-unsigned.tar.gz
0c6373f17e96b6e614c82a5816b98254a4e65c512bf18b53105cc8282f78868e  qtum-0.19.0.1-win64-debug.zip
0ba952939c9c2b241b9cdd323761aaf101502ed869b3124db4a84a046b7e65f3  qtum-0.19.0.1-win64-setup-unsigned.exe
47be7e56b1f565eca003339f1a15c3c6164e340dcb8e7fde356a1edefbbacc37  qtum-0.19.0.1-win64.zip
6bf66ed8b5765ed861b16a0f235728cb84d52921810b7e3a24b890dfe2c08a75  src/qtum-0.19.0.1.tar.gz
384f82d13e43c48339c7e0837ec804ecd330f8e8291aa79b807c353d85e537f7  qtum-core-win-0.19-res.yml

bb957b66f55173f342dd78d089e2d60c6271fda8653579d7bea6143d09869204  qtum-0.19.0.1-osx-unsigned.dmg
e97887c18ff614c3cdbf5150257aad89254ff52226cda945cbb944fe70e43986  qtum-0.19.0.1-osx-unsigned.tar.gz
ecfe6912ffdfed8e5fab6049e179fea74bba6a5a58d1de2665368cc08b701652  qtum-0.19.0.1-osx64.tar.gz
6bf66ed8b5765ed861b16a0f235728cb84d52921810b7e3a24b890dfe2c08a75  src/qtum-0.19.0.1.tar.gz
aefe9d97df0248cb5731cb07143454da63276869bc8a44563d73fd2759df0b8a  qtum-core-osx-0.19-res.yml

```",83774906
894,False,False,2020-01-09T21:31:50Z,2020-01-10T01:31:55Z,"* v0.18.3 – Mandatory update for Windows x64: Bug fix.
	* Fix a bug that affected Windows x64 client where a node would fail to finish sync.
	* Fix randomly failing Travis CI tests.
	* Update copyright year.

Hash validation
----------------

If you would like to validate that the binaries you download are exactly the same as those provided and built by the Qtum team, then you can compare your binaries to the following sha256sum hashes:

```
b6727e7b1353295bc82737a02dd74239cc1bcf4cb540e1053df36cbd621b0890  qtum-0.18.3-aarch64-linux-gnu-debug.tar.gz
d0a5bd3786a4a387221e707886f47570dbfd2be35e5d8118aaadbc2fadfc55bf  qtum-0.18.3-aarch64-linux-gnu.tar.gz
3b83cdc62c36b1b21df331f896248bba30716b6d5a64eeb31907661aee13da89  qtum-0.18.3-arm-linux-gnueabihf-debug.tar.gz
d612aad2d4a8b646605896f3546418998b172764e4181d56583ae3374fb06b8c  qtum-0.18.3-arm-linux-gnueabihf.tar.gz
87d0aee40016732a3c9dedb82152ad125e9be816d4e20c32129eca120e12f837  qtum-0.18.3-i686-pc-linux-gnu-debug.tar.gz
447b418a398a5aa77d7083cabfbe75a118810911e65b3adf1acff03f5f9f89d5  qtum-0.18.3-i686-pc-linux-gnu.tar.gz
ce173a4c3aa421519ebe0024408609ab61179a8bc902f83cc703940e4876f774  qtum-0.18.3-riscv64-linux-gnu-debug.tar.gz
fee7bce7e172be03271853bbd20f7f6eebd7e4ab73b053f07374792e216f1b6c  qtum-0.18.3-riscv64-linux-gnu.tar.gz
6f018af3dda57bf9ed14a8ca079f3e8d07e09469de43b461b2a1a06920c424db  qtum-0.18.3-x86_64-linux-gnu-debug.tar.gz
f70b21da2ff3e0e7aecfe3a9861df20c6be8d67e5be758f70e6b05c3c9afc951  qtum-0.18.3-x86_64-linux-gnu.tar.gz
5fcf50a3be7a0be9f70fcd743273ed7040518449adbd6a81c8a2cb4feeb733c8  src/qtum-0.18.3.tar.gz
1e9b8b299a23c8072d98daf54dab17c03e29654bc35e7f9a1e8758ae1fe99529  qtum-linux-0.18-res.yml

7cd3b2f06a812ff6db4cc523c9360711b59cea54eff0f3af1ef36d382f6efc39  qtum-0.18.3-win-unsigned.tar.gz
306cf19177c89724936a012df177744ccdec2cf130a618a4a8cf1bb70859906e  qtum-0.18.3-win32-debug.zip
9030359dde8c935f64ad8c9f5d6bf91284be0d77899912d8944c54edd550de25  qtum-0.18.3-win32-setup-unsigned.exe
7f693407a34655a846dc001e840782a67a885ddc15a217c064dfd2109f7ed8ef  qtum-0.18.3-win32.zip
32229427ffc0408c07b7772468198713a68640130f7360f97f60ab004cddcbea  qtum-0.18.3-win64-debug.zip
57ae69e604df16d6e09e11280aea938d51b939e0c201022fa74d73e5bac8cbbe  qtum-0.18.3-win64-setup-unsigned.exe
e328fb5768d573ccca52c8021497f356781c08af80ed87d478627ff311d8996e  qtum-0.18.3-win64.zip
5fcf50a3be7a0be9f70fcd743273ed7040518449adbd6a81c8a2cb4feeb733c8  src/qtum-0.18.3.tar.gz
8968bada0b62d85d94798492fd856922c6fa6f5d481b76d003bcaf9e1f9d9ab5  qtum-win-0.18-res.yml

80639e7cb0f38a6c2cea72361720629bad3fc99475075ae3771ef6c857637c7e  qtum-0.18.3-osx-unsigned.dmg
b3a644a23e5f3cf08b7a01681636c4f557f44d595b0ce944794a7ba989af761a  qtum-0.18.3-osx-unsigned.tar.gz
91f5e07fae24c282cb74babb158ce7fe70d6b80ce58f134722d5e7d70f835886  qtum-0.18.3-osx64.tar.gz
5fcf50a3be7a0be9f70fcd743273ed7040518449adbd6a81c8a2cb4feeb733c8  src/qtum-0.18.3.tar.gz
2f3521fb9f50ebd16e1984ca7268b25564603dcad62045c081118edec1bc97b2  qtum-osx-0.18-res.yml

```",83774906
895,False,False,2019-12-04T18:07:24Z,2019-12-05T02:05:48Z,"* v0.18.2 – Recommended Update: New GUI, New features, Security improvements and Bug fixes.
	* New GUI implemented with two new themes added (light and dark blue).
	* Add `signrawsendertransactionwithwallet` and `signrawsendertransactionwithkey` rpc calls to support OP_SENDER raw transactions signing.
	* Add a new process to clean BlockIndex entries older than the last moving checkpoint.
	* Add outputIndex to transaction receipts (requires to reindex once to update the old log entries).
	* Add `-showevmlogs` option to show/hide evm logs in the console.
	* Reduce the max needed glibc version to 2.11 (fix build on CentOS 7).
	* Fix build on OS X Catalina.
	* Fix out-of-source build.
	* Fix gitian build.
	* Unbreak build with Boost 1.72
	* Update Mac OS README.
	* Update blockchain data.
	* Add recent checkpoints.

Hash validation
----------------

If you would like to validate that the binaries you download are exactly the same as those provided and built by the Qtum team, then you can compare your binaries to the following sha256sum hashes:

```
3ff77b843e56eb4b024a64ed4c0350321172f7465322f7a40f54d940ee49502b  qtum-0.18.2-aarch64-linux-gnu-debug.tar.gz
28bdca4bb0fc757283b460e6cab2fdb4c6c42348e58c8e796a11b6945d5fd04b  qtum-0.18.2-aarch64-linux-gnu.tar.gz
95c675d6c44b50347e3136757ef6e382ca5b7318d146c263aadd809c336d337e  qtum-0.18.2-arm-linux-gnueabihf-debug.tar.gz
9ef93a8c472d0f59950d92f852db1a595b45ea687b5355b5f3e3059d42562af7  qtum-0.18.2-arm-linux-gnueabihf.tar.gz
4755cba9765b5c93dc610151d3d7e10612d54923d71503d4a2273b5c0cf26d82  qtum-0.18.2-i686-pc-linux-gnu-debug.tar.gz
3914134d7d51d05fb28a279fdb66ed72732b0388b76180847bd269ac00a4e426  qtum-0.18.2-i686-pc-linux-gnu.tar.gz
2ce5e4579d0782c640389bc019a04794b54bd6c897cabe14decc686be8a1382d  qtum-0.18.2-riscv64-linux-gnu-debug.tar.gz
763bbfab0cddf070a563d880b3a4df9c5b15d4fa45c18e2d38bd0b581954cadd  qtum-0.18.2-riscv64-linux-gnu.tar.gz
c281018110ee30609ec2bc72cf1e2fdd7f18dd8dec149a21720a6da56c2448b2  qtum-0.18.2-x86_64-linux-gnu-debug.tar.gz
503f6c9acd4ca800baa2092e904a0bf84e6e59cf96c29204296d0c644e8bf2c8  qtum-0.18.2-x86_64-linux-gnu.tar.gz
35070fed8952c0bbfb279f554828389125c7cb249b0a943085ebaabc65af902e  src/qtum-0.18.2.tar.gz
83e06dbbf00b0d88fd0562da43799bea9114f2863afd194e8c399008eafe451b  qtum-linux-0.18-res.yml

dc2bd5c0a378fafe73dc3c5343f61ee05a309f071afa1665d53c9f8d558d2bfa  qtum-0.18.2-win-unsigned.tar.gz
736b5654782bbd0a76718c1bfe847432764b352be68d15c267eb9757ce667e8e  qtum-0.18.2-win32-debug.zip
e22fffa3c3c4d8c086e27719203638f436485001fefffdec31c841f1641949f0  qtum-0.18.2-win32-setup-unsigned.exe
2bc2386d1f2b2d7be19a823a5864dae637a8357b1d45eada87c81e98d57cad40  qtum-0.18.2-win32.zip
954bec1898941ddc05076f5cf38fc9f1cc8791bc1c3d3b3334c7c2c2d1a65057  qtum-0.18.2-win64-debug.zip
899ae3a5a10a2b1e3fd0adf2dc26bc692f3a903eea2698bbdb1721f539db8d60  qtum-0.18.2-win64-setup-unsigned.exe
ef851256a93bf40fdabe67523686bec4cece7e66557e78c62aa4adc8f3ccfb44  qtum-0.18.2-win64.zip
35070fed8952c0bbfb279f554828389125c7cb249b0a943085ebaabc65af902e  src/qtum-0.18.2.tar.gz
aba89942d0930d020215fc57018fada6be2f40d9a3bb7e4a73cbf629a967ab8d  qtum-win-0.18-res.yml

de21ee839e2ea67ab85e684358deaaecfd6f3c990a9c2f3bfdcbdf92ceb478f7  qtum-0.18.2-osx-unsigned.dmg
6a011121d255ea3278001ee110fb4d34b6cd0cee35e6e04ae73299480028bb94  qtum-0.18.2-osx-unsigned.tar.gz
d0d0cb9ef9b8b09199cc1a475de7845cf2f877b16214fbb6cfefb2619e863613  qtum-0.18.2-osx64.tar.gz
35070fed8952c0bbfb279f554828389125c7cb249b0a943085ebaabc65af902e  src/qtum-0.18.2.tar.gz
e6a860107c068c4431e60426deb57bd938afaaa6117090d4884805ab57c9541a  qtum-osx-0.18-res.yml
```",83774906
896,False,False,2019-09-18T14:04:48Z,2019-09-19T02:58:20Z,"* v0.18.1 – Hard Fork Mandatory Update **before block 466600** (446320 in testnet) – New features and bug fixes
	* [QIP-5](https://github.com/qtumproject/qips/issues/6) implemented: Add OP_SENDER opcode.
	* [QIP-6](https://github.com/qtumproject/qips/issues/7) implemented: Add btc_ecrecover precompiled contract.
	* [QIP-7](https://github.com/qtumproject/qips/issues/8) implemented: Upgrade the EVM to constantinople.
	* [QIP-9](https://github.com/qtumproject/qips/issues/9) implemented: Change difficulty adjustment algorithm.
	* Bump minimum protocol version to 70017 (active after the HF).
	* Increase the minimum target limit of pos difficulty (active after the HF).
	* Add support for OP_SENDER in `createcontract` and `sendtocontract` (active after the HF).
	* Fix for changing the gas schedule when a node is run using `-dgpstorage` (active after the HF).
	* Add advanced Qt wallet restore options.
	* Fix gitian build for the new dependencies.
	* Fix path string conversion for wallet backup in Windows.
	* Restore pid name from qtum.pid to qtumd.pid
	* Make regtest detection independent from fPoSNoRetargeting.
	* Fix a typo in linearize script example config file.
	* Fix a bug that could cause inconsistencies in execution results in some edge cases.
	* Add python tests to cover the new features.
	* Add recent checkpoints.
	* Update nMinimumChainWork, defaultAssumeValid and chainTxData.
	* Fix Qt wallet requesting access to contacts and calendar when picking data directory in OSX.

Hash validation
----------------

If you would like to validate that the binaries you download are exactly the same as those provided and built by the Qtum team, then you can compare your binaries to the following sha256sum hashes:

```
6e76063e670fbd497eee683fdb2e7564db6c01ea2d6ae45c7121d93c243a7f8c  qtum-0.18.1-aarch64-linux-gnu-debug.tar.gz
e61cd2779a7f0e34b32abd9294aa8176e306f476c3a354ea6ac6406074c72725  qtum-0.18.1-aarch64-linux-gnu.tar.gz
80768191ea9837e2b01d9f9f4660ddec5e4b126b8f3adf7b73c2355bf3e3ce87  qtum-0.18.1-arm-linux-gnueabihf-debug.tar.gz
70041865c38201f5c58f0663d0c92cf14543318f14a2f9abf62e2badb6bd8ed2  qtum-0.18.1-arm-linux-gnueabihf.tar.gz
b79499683501e8cc035dd5be188df088911fc6c7b6e11c69017a7d9cb2d8ad23  qtum-0.18.1-i686-pc-linux-gnu-debug.tar.gz
3e4913064efcd9869fca531428d8a47d24c347daaa8eb761a41eb005d014852a  qtum-0.18.1-i686-pc-linux-gnu.tar.gz
08db6e7c15b63bd4cac5c9d2c896a0a849c87ea8edcbb267c345ffe3a7751baa  qtum-0.18.1-riscv64-linux-gnu-debug.tar.gz
5418399e7ba036df8015ba352b03cde6800c8373f88e71404bdc7ed7d932d46b  qtum-0.18.1-riscv64-linux-gnu.tar.gz
c445cd848deabab46899764274d6cc0d5df9ecc8bebd4d9cb9066cb12614a6e6  qtum-0.18.1-x86_64-linux-gnu-debug.tar.gz
78c9038183385fe211535c60f7cdb3663d0a77d702fabf468509d5771a3bea53  qtum-0.18.1-x86_64-linux-gnu.tar.gz
03e15dcf6e908ac82237ffbdb6abf1b5c2cd677770df3e80cdb39ac43978cd4b  src/qtum-0.18.1.tar.gz
5e25d6abd78db4f8ba7a6fba84d2ae10d98d8c706dc60e5f3f1a1cc85c3707d1  qtum-linux-0.18-res.yml

407a8749bf794cc2f21029a4e9e1540e999a506bf9c074eece0080b4f35b1fcd  qtum-0.18.1-win-unsigned.tar.gz
48e8230a39e344f39b290244c4268f54e131489015683dd37278291d563651f3  qtum-0.18.1-win32-debug.zip
ac2dff3a3fe245d90f360f97e9f0a88371a247e04565b97043fe5401564f0f36  qtum-0.18.1-win32-setup-unsigned.exe
e534441d07f2d1dc3bf70495c40b3103f49abfb0005ae93204ae9aff6f6b4099  qtum-0.18.1-win32.zip
20e1423e06b7c82403c3d8fcf9c83431879bdac887c412f4e46253b5ea08d164  qtum-0.18.1-win64-debug.zip
47578651bcfd1a7d876672fba27a971b86420adb87224ff420ec22fe5fb08c05  qtum-0.18.1-win64-setup-unsigned.exe
b312073eae95d1a07d18b61e4399b18d74e9359b8cc0b55badc7a78b38605569  qtum-0.18.1-win64.zip
03e15dcf6e908ac82237ffbdb6abf1b5c2cd677770df3e80cdb39ac43978cd4b  src/qtum-0.18.1.tar.gz
f5471418e56b6c8c26687a22fbd38991c84b0cfc57f27dd8bba56c405dca0d13  qtum-win-0.18-res.yml

27751c660ff45dc3ab196039bf7ea355fbd2a6fc55d83ae3d648691df050cd50  qtum-0.18.1-osx-unsigned.dmg
36800005c53268ffdbb572a1348d84fcdd8b5d7ad84f08152a6d82094d48c02f  qtum-0.18.1-osx-unsigned.tar.gz
7ef7013f593028f4ce277432c4175855964f1bbec34d9505ce087ff483f3f008  qtum-0.18.1-osx64.tar.gz
03e15dcf6e908ac82237ffbdb6abf1b5c2cd677770df3e80cdb39ac43978cd4b  src/qtum-0.18.1.tar.gz
ae3533390b19883986784de3d03c9d5c8edf4fac00b88fcf1f208de89c54d974  qtum-osx-0.18-res.yml
```",83774906
897,False,False,2019-08-17T00:06:02Z,2019-08-17T03:17:18Z,"What's new
----------------

* v0.18.0 - Upgrade Qtum core to bitcoin core 0.18.0 - Staker improvements - Bug fixes
	* Upgrade Qtum core to [bitcoin core 0.18.0](https://bitcoin.org/en/release/v0.18.0#change-log). 
	* Staker optimizations: better performance for big wallets and improved UTXO aggregation.
	* Fix for building Qtum core with `--disable-wallet` option.
	* Remove obsolete token template link in Qt wallet.
	* Add testnet launcher for Linux desktops.
	* Update `Readme.md` file.
	* Update block explorers links.
	* Fix desktop category for Qtum.
	* Fix Qtum launch date in Qt wallet.
	* Publish riscv64 builds.
	* Simpler release description.

Hash validation
----------------

If you would like to validate that the binaries you download are exactly the same as those provided and built by the Qtum team, then you can compare your binaries to the following sha256sum hashes:

```
ad84f47ee8a6d3163ff3aa9482f218ac6fe96b00f7ee83be2a5d1eb9b1771bb3  qtum-0.18.0-aarch64-linux-gnu-debug.tar.gz
5c4c8b5085ac4ff8260b5f48dab7be4319bb19aab57096b0cf1e15266a4d63f4  qtum-0.18.0-aarch64-linux-gnu.tar.gz
3d16b4286330725bbed02213f68e926a56dab53d15c00e7425a2a01a6a02fdf1  qtum-0.18.0-arm-linux-gnueabihf-debug.tar.gz
19431326dbd16a5c635fa7a431df4a7c81585360905f65ba289b962a48b9d818  qtum-0.18.0-arm-linux-gnueabihf.tar.gz
4ef9e08aa7229e358860c64d0eabc835ce6e5e10186c6e54df749fada7bf57ad  qtum-0.18.0-i686-pc-linux-gnu-debug.tar.gz
7054624ad0d1611c0290cae0ae91808a08c050754286a149d23565e68a3e373b  qtum-0.18.0-i686-pc-linux-gnu.tar.gz
116bde19c9e87a14b6e79673a964b5ca6118651d272fa6f63945e0b607c5d092  qtum-0.18.0-riscv64-linux-gnu-debug.tar.gz
f658e8b887384d86bf817c6a9fab950cd5be7f9ef5450fc78fd652f7012485b8  qtum-0.18.0-riscv64-linux-gnu.tar.gz
48ff34b7bfac2bac9592748809160160194bf8e3a1628ae9497250473d5ac064  qtum-0.18.0-x86_64-linux-gnu-debug.tar.gz
5a4eeba2587938087dc5b04a5c1684e063d1b556a914a0a26de09f64d153a6b6  qtum-0.18.0-x86_64-linux-gnu.tar.gz
3716056340386906c6cb26ce96e8e9035be6a9b52bba69d334a2ec3f0df80cef  src/qtum-0.18.0.tar.gz
f85d22f107594a79a3a2c1b903f14168462f0c75de5f92e1ac1544fffcc48f81  qtum-linux-0.18-res.yml

41c86be599aba79c64cee85310e69216f904e247eac92ab8d8cac023ffaffecf  qtum-0.18.0-win-unsigned.tar.gz
f312ace1ea6da5b643941a30ec1eb7dd4b72f853b1dcb47ab0a0eea5d114bc26  qtum-0.18.0-win32-debug.zip
ec39820d05eaeb7ee52a31206f8e1510315d0a2c6bf3d8aad98727748dbfadb8  qtum-0.18.0-win32-setup-unsigned.exe
3b2231e1adff130f9d818455a444b293d410eff3783087312b0c2aaf02bd0284  qtum-0.18.0-win32.zip
9df5395a5d9e8f8be2ba877d35fe722489772415f0c4b42cd1877042de1b5cde  qtum-0.18.0-win64-debug.zip
bb36c141a9dcf899b0c3abc3c51965723cc697b22d6f624bfa1b6e67739df916  qtum-0.18.0-win64-setup-unsigned.exe
dbf0525733298cbd77b746b7dd5d740f355cc2dfc61dae44887fbf3a85e4e35f  qtum-0.18.0-win64.zip
3716056340386906c6cb26ce96e8e9035be6a9b52bba69d334a2ec3f0df80cef  src/qtum-0.18.0.tar.gz
dc8852cd45f3eaa608bbaa7f9663f399538a00479894b3088ff0e5b937979090  qtum-win-0.18-res.yml

6941076c1730b440f5ce038d77d8ce0c1bb1c6744dd64e4c0becb83a327d0579  qtum-0.18.0-osx-unsigned.dmg
8eed660ceadcfded96b4be1521fa8d6739931dbc0039bdda854da30ae9ef1732  qtum-0.18.0-osx-unsigned.tar.gz
2f7a3dbddf811f4b0ca98ce9fdef647906b2aa4c82b18ea62003c39ae0b85cde  qtum-0.18.0-osx64.tar.gz
3716056340386906c6cb26ce96e8e9035be6a9b52bba69d334a2ec3f0df80cef  src/qtum-0.18.0.tar.gz",83774906
898,False,False,2019-06-24T06:08:38Z,2019-06-24T17:40:36Z,"About Qtum and Mainnet Ignition
-------------------------------

Qtum is a decentralized blockchain project built on Bitcoin's UTXO model, with support for Ethereum Virtual Machine based smart contracts, and secured by a proof of stake consensus model. It achieves this through the revolutionary Account Abstraction Layer which allows the EVM to communicate with Qtum's Bitcoin-like UTXO blockchain. For more general information about Qtum as well as links to join our community, go to https://qtum.org

Welcome to the Qtum Ignition Main Network. This is the main network where the tokens hold value and should be guarded very carefully. There will be a testnet setup soon for developers, in the meantime you can use `-regtest` mode for testing needs. We will announce details about the token swap from QTUM ERC20 coins to QTUM mainnet tokens soon, watch our [website](https://qtum.org) for details about that.  

The major features implemented in Qtum Ignition include:

1. The Ethereum Virtual Machine, which allows for compatibility with most existing Solidity based smart contracts.
2. The Smart Staking Protocol is complete, which is an optimized Proof of Stake implementation designed for a smart contract platform (however, smart contracts can not participate in staking yet).
3. An improved smart contract GUI has been implemented that can be used for creating contracts, sending data and Qtum to them, and checking their status by executing them locally, The GUI also offers easy QRC20 tokens management. 
4. Regtest mode, which is ideal for developers who wish to create their own private blockchain. It is tuned specifically to make development easier. It will stake blocks automatically every 30 seconds, and can generate proof-of-work blocks instantly as needed.
5. The Decentralized Governance Protocol is completely implemented and functional, which allows certain network parameters to be modified without a fork.

For more technical information for how to start developing with Qtum please read the [Guide](https://github.com/qtumproject/qtum/blob/master/doc/sparknet-guide.md) and also see this tutorial for deploying a simple [faucet smart contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet) (it hasn't yet been updated for Mainnet for obvious reasons, but all the instructions are the same and you can try them in regtest mode)

Note: Qtum Core is considered beta software. We make no warranties or guarantees of its security or stability.

Update History
--------------
* v0.17.6 - Soft fork - Mandatory update
	* Add header signature verification (soft fork at block 399100 for mainnet/391993 for testnet).
	* Add support for bitcore RPC calls, configure with `./configure --enable-bitcore-rpc` to enable.
	* Make spam filter ban list persistent.
	* Enable spam filter for blocks.
	* Add support for hardened checkpoints.
	* Fix a bug that prevented seen stake set from working properly.
	* Fix a bug that prevented opening `qtum.conf` file from Qt wallet in OSX.
	* Fix `getblockstats` rpc call for PoS blocks.
	* Fix a bug with `callcontract` that caused `msg.sender` to return a wrong value when `gasLimit` was specified.
	* Fix linearize python script.
	* Rename argument `-notusechangeaddress` to `-usechangeaddress`.
* v0.17.5 - Highly recommended update - Bug fix
	* Fix a bug introduced in 0.17.4 that caused some nodes not to be able to properly do reorg when receiving a duplicate stake block.
	* Add a recent checkpoint.
	* Fix gitian script filename in gitian build docs.
* v0.17.4 - Recommended update - Bug fixes
	* Enforce PoS checks when receiving blocks/headers.
	* Fix a bug that would cause Qt wallet to become unresponsive in Windows when machine time is inaccurate.
	* Fix wrong port numbers in some RPC help messages.
	* Update nMinimumChainWork, ChainTxData and defaultAssumeValid using recent chain data.
* v0.17.3 - Mandatory update for stakers - Bug fixes
	* Fix a bug where a staking node would stop producing valid blocks when it receives an invalid header.
	* Fix a bug that would cause a node to fail at syncing when started with `-checklevel`>3.
	* Add new checkpoints.
* v0.17.2 - Recommended update - Bug fixes
	* Update ZMQ version to 4.3.1 ([CVE-2019-6250](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-6250))
	* Change the behavior of the EVM's event emitter to match ethereum's behavior in some cases.
	* Fix a bug where the staking icon would not show accurate information.
	* Fix a bug where compilation would fail if the system has secp256k1 library already installed.
	* Fix a minor typo in Qt wallet.
* v0.17.1 - Upgrade Qtum core to bitcoin core 0.17.1 plus other improvements and bug fixes
	* Upgrade Qtum core to bitcoin core 0.17.1 including partially signed transactions support, external wallet files and more. Check bitcoin [0.17.0](https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.17.0.md) and [0.17.1](https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.17.1.md) release notes for more details.	
	* Fix a bug which allowed using P2SH addresses as transaction sender in RPC interface, which caused that transaction to be rejected.
	* Fix an issue which prevented the correct logs to be printed when a state divergence was detected.
	* Prioritize create contract transactions over send to contract ones when staking.
	* Fix a bug which allowed node's time manipulation in some cases.
	* Fix a bug which prevented some EVM globals to be returned correctly when using `callcontract` RPC call.
	* Fix a bug which caused fee estimation to be excessively high in some cases.
	* Fix Solidity compiler link in the GUI wallet.
	* Make `getaccountinfo` RPC call help message clearer.
	* Improve the way encrypted wallet related RPC calls help messages were displayed.
	* Fix a bug that caused build description to be inaccurate.
* v0.16.2 - Recommended update - Improved network security and bug fixes
	* Implement network spam protection
	* Only request blocks from peers when their chainwork is strictly greater than the current tip
	* Add extra header checks for PoS timestamp, block indexes, signature type (LowS), synchronized and rolling checkpoints.
	* Add recent checkpoints
	* Update nMinimumChainWork, defaultAssumeValid and chainTxData
	* Update BLOCK\_CHAIN\_SIZE
	* Fix failing Qt tests in `make check` on OSX Mojave
	* Fix getblocktemplate rpc call for PoS blocks
	* Fix help messages for walletpassphrase and getnetworkhashps rpc calls
* v0.16.1 - Mandatory Update - Critical bug fix
	* Fix an upstream bitcoin critical bug, more info: [CVE-2018-17144](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-17144)
* v0.16.0 - Upgrade Qtum core to bitcoin core 0.16 and bug fixes
	* Upgrade Qtum core to bitcoin core 0.16 including segwit wallet, bech32 addresses, HD-wallets by default and [more](https://bitcoin.org/en/release/v0.16.0#notable-changes)
	* Fix a bug where contract transactions with no change would fail in some cases
	* Fix a display bug where multiple logs would not show corretly in Qt wallet
	* Update gitian build scripts to support ubuntu bionic as building host
* v0.15.3 - Recommended update - Bug fix
	* Fix a bug with `searchlogs` and `waitforlogs` rpc calls that caused duplicacte logs to show in some cases
	* Add support for building with boost 1.67 
* v0.15.2 - Recommended update - Improved seeding and bug fixes
	* Fix a staker halving subsidy calculation bug
	* Fix some translations errors and typos
	* Add Support for openssl 1.1
	* Fix CVE-2018-12356 by hardening the regex
	* Fix a python tests bug that caused bulk running of tests to fail
	* Add static seeds
	* Add new dns seed nodes
	* Update copyright year
* v0.15.1 - Upgrade Qtum core to bitcoin core 0.15.1 and bug fixes
    * Upgrade Qtum core code to bitcoin core 0.15.1 with important performance improvments and other features, read more about bitcoin core [0.15.0](https://bitcoin.org/en/release/v0.15.0) and [0.15.1](https://bitcoin.org/en/release/v0.15.1)
    * Fix a bug with reindexing when the data directory is empty
    * Prevent sending QRC20 tokens to P2SH Qtum addresses in the Qt wallet
    * Restore JS number as string support for `callcontract` and `sendtocontract` rpc calls
    * Fix a bug where the wrong block hash would be stored in the transaction receipt for miners with `-logevents` enabled
* v0.14.16 - Improvments and Bug fixes
    * Fixed a bug where transactions with low fees would get stuck in the local mempool.
    * Fix a bug with clearing cache of StorageResults
    * Add contract support to ""createrawtransaction"" rpc call
    * Add sender support to ""sendtoaddress"" rpc call
* v0.14.15 - Recommended Update
    * Add EVM global variables to callcontract
    * Update gitian build script
    * Update CentOS build instructions
    * Add exception data to TransactionReceipt
    * Fixed a bug where the gas price could not be parsed correctly on certain platforms (reported by APIS)
    * Fixed a bug where the logs were not reverted on disconnect block in certain cases
* v0.14.14 - Mandatory Update
    * New Qt GUI
    * Fix Qt wallet freeze when syncing from scratch with `-logevents` or `-reindex`
    * Fix a bug with cacheUTXO (hardfork at block 100000 in mainnet, 84500 in testnet)
    * Add update checking functionality to Qt wallet
    * Fix a bug in token transfers history dates
    * Fix a bug with searchlogs rpc call
    * Add an extra check when adding token addresses
    * Fix compatibility with boost 1.66 
    * Add checkpoints
    * Update nMinimumChainWork and defaultAssumeValid chain params
    * Add minmempoolgaslimit startup argument
    * Add Gitian build signatures
* v0.14.13 - Mandatory Update
    * Fix a callcontract bug which in very specific cases could cause the node to fail to sync the blockchain
    * Add ability to save and restore contract addresses and ABI data
    * Make the token confirmation view data correct
* v0.14.12 - Recommended Update
    * Added option to disable change address usage
    * Fixed bug where heavy RPC usage could cause the wallet to crash
* v0.14.11 - Optional Update
    * Changed our versioning scheme to be consistent and avoid the two version number confusion
    * Add feature to restore wallet in the Qt wallet
    * Add new RPC call ""waitforlogs"" that is particularly useful for Dapp developers
    * Add long-polling support to the gettransaction RPC call
* v1.1.4 - Recommended update
    * Fixed a bug that would cause syncing to stop
    * Fixed a bug that would cause the wallet to crash when using -logevents
* v1.1.3 - Highly recommended update
    * Fixed a bug that caused contact addresses to show in receive token address dropdown
* v1.1.2 - Optional update, but recommended if using QRC tokens
    * Fixed a bug with token transactions where the transaction ID displayed was incorrect in the Qt wallet
    * Allow adding 0 balance addresses as the token receiver in the Qt wallet
* v1.1.1: When sending to contracts, the sender address is now the default change address to reduce confusion; fix -salvagewallet so it works with token transactions
* v1.1.0: Add GUI support Qtum QRC tokens, allowing full management of tokens on the Qtum blockchain from the Qt wallet
    * Sending to a contract no longer requires ABI data, allowing easy participation in simple crowdsale contracts
* v1.0.4: Fix bug where certain circumstances when staking could cause the displayed balance to be inaccurate until completely redownloading the blockchain.
* v1.0.3: Fix staker bug that reported false messages; slightly increases staking performance; optimize staker parameters; fix white send button in GUI
* v1.0.2: Various UI fixes, minor gas overflow consensus fix, per-txout exploit fix, testnet mode setup and functioning
* v1.0.1: Fixed network magic bytes and minimum version to ensure the main network does not conflict with the Skynet network
* v1.0: Initial release

Reindex Required When Upgrading from v1.0.1
----------------------------------------------

When you first start the Qtum 1.0.2 GUI wallet after using Qtum v1.0.1 it will prompt you that it must reindex the database. This is normal and is a result of switching our internal database format from per-transaction to per-txout. If you use `qtumd -daemon` it will silently fail to start. You need to use `qtumd -daemon -reindex` in this case. 

Qtum Documentation and Usage Resources
---------------

Basic usage resources:

* [Official Qtum Usage Guide](https://github.com/qtumproject/qtum/wiki/Qtum-Wallet-Tutorial)
* [Unofficial Qtum staking tutorial](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtum-qt)
* [Unofficial Qtum staking tutorial on Raspberry Pi](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtumd-on-a-raspberry-pi-3)
* [Unofficial guide for keeping your wallet safe](https://steemit.com/qtum/@cryptominder/encrypting-backing-up-and-restoring-your-qtum-wallet)
* [Block explorer](https://explorer.qtum.org)
* [Unofficial block explorer](https://qtumexplorer.io/)
* [Unofficial Raspberry Pi Web UI](https://github.com/rpiwalletui/qtum-ui)

Development resources:

* [Deploying a custom token to Qtum](https://blog.qtum.org/qtum-custom-token-walkthrough-467d725fa27d)
* [Early example faucet contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet)
* [Unofficial Qtum Hello World tutorial](https://steemit.com/qtum/@cryptominder/quantum-qtum-blockchain-developer-tutorial-hello-world)

General Info about Qtum:

* [Mainnet event AMA](https://www.reddit.com/r/Qtum/comments/6zs8t0/official_qtum_ama_thread_starts_at_10pm_beijing/)
* [Qtum's PoS vs CASPER](https://www.reddit.com/r/Qtum/comments/788oa5/qtums_pos_vs_casper_and_the_nothingatstake_problem/)
* [Technical article explaining Qtum's PoS model in depth](http://earlz.net/view/2017/07/27/1904/the-missing-explanation-of-proof-of-stake-version)
* [Unofficial What is Qtum article](https://storeofvalue.github.io/posts/what-is-qtum-without-the-bullshit/)

#### Build Qtum Core

If you want to build it from source, it's recommended to follow the specific [""build"" documentation](https://github.com/qtumproject/qtum/tree/testnet-2/doc) for your platform. But mostly it boils down to the following:

1. Clone the qtum source code and cd into `qtum`

        git clone --recursive https://github.com/qtumproject/qtum.git
        cd qtum


2.  Build qtum-core:

    Configure and build the headless qtum binaries as well as the GUI (if Qt is found).

    You can disable the GUI build by passing `--without-gui` to configure.

        ./autogen.sh
        ./configure
        make

3.  It is recommended to build and run the unit tests to ensure everything is working correctly:

        make check


If you encounter an error like:

> make[2]: *** No rule to make target ‘cpp-ethereum/utils/libscrypt/b64.c’, needed by ‘cpp-ethereum/utils/libscrypt/libbitcoinconsensus_la-b64.lo’.  Stop.

Then you did not checkout the cpp-ethereum submodule for Qtum. To do that, simply:

    cd qtum
    git submodule update --init --recursive

Validate and Reproduce Binaries
---------------------------------

Qtum uses a tool called Gitian to make reproducible builds that can be verified by anyone. Instructions on setting up a Gitian VM and building Qtum are provided [in doc/gitian-building.md](https://github.com/qtumproject/qtum/blob/master/doc/gitian-building.md)

Community Resources
---------

Make sure to check out these resources as well for more information and to keep up to date with all the latest news about Qtum. At least 1 developer is always around, so if you're developing on Qtum and need help, we'd love to welcome you to our community.  

* [/r/Qtum on Reddit](https://www.reddit.com/r/Qtum/)
* [Qtum Telegram Group](https://t.me/joinchat/D5oBaw29NeOdpw6qqqf2lw)
* [@QtumOfficial on Twitter](https://mobile.twitter.com/qtumofficial)
* [Qtum on Facebook](https://www.facebook.com/QtumOfficial/)
* [Qtum Forum](https://forum.qtum.org/)
* [Qtum.org](https://qtum.org/en/)


Qtum Smart Contract Limitations
-----------

* EVM smart contracts can not receive coins from or send coins to any address type other than pay-to-pubkeyhash (starts with Q) addresses. This is due to a limitation in the EVM
* Contracts are not allowed to create contracts with an initial endowment of coins. The contract must first be created, and then be sent coins in a separate transaction. Humans are also not allowed to create contracts with an initial endowment of coins.
* Although all of the infrastructure is present, Qtum Core does not currently parse Solidity event data. You must parse this yourself using either `searchlogs` or `-record-log-opcodes` features.
* It is not possible to send a contract coins without also executing the contract. This is also the case of Ethereum. This was promised in earlier discussions and technically does work, but due to lack of time for testing this feature was disabled. We hope to reenable this feature with release of the x86 virtual machine in 2018.
* In Qtum there can be multiple addresses used to create a proof-of-stake block. However, the EVM can only see the first output using the `coinbase` operation in Solidity (this address is also the one registered for the continuous staker rewards after 500 blocks). 

Hash Validation
----------------

If you would like to validate that the binaries you download are exactly the same as those provided and built by the Qtum team, then you can compare your binaries to the following sha256sum hashes:

```
33522d119a5c87e310661cc080253ed04e66109b277517e60befbe6ba02df60c  qtum-0.17.6-aarch64-linux-gnu-debug.tar.gz
1d49aae2b597a4a2f149200acbbee7c1ede4363fa5308aa333f61a3b22f1e9b3  qtum-0.17.6-aarch64-linux-gnu.tar.gz
6fd94e929d6842df581a65da5a7bbbd1f0e69b6849d0304e49418d35d18710bf  qtum-0.17.6-arm-linux-gnueabihf-debug.tar.gz
1f06ed09da0cda3f843c885ac4ef7de27bc68ca8203b7d3b404901193fb6097f  qtum-0.17.6-arm-linux-gnueabihf.tar.gz
b071a6fe3788a87df8fec120f72d252cb428763170f6873dd2baa5ac7c9801d0  qtum-0.17.6-i686-pc-linux-gnu-debug.tar.gz
ad5c4b74e7c3c23f215ea5335dff037e19815fc69c90b6f2123ec059bf2148ce  qtum-0.17.6-i686-pc-linux-gnu.tar.gz
e41442168cfebf9f938be68fdd6e31d10541f0ce8e730d176b00a373cbfc2a8b  qtum-0.17.6-x86_64-linux-gnu-debug.tar.gz
1b7a1e70e102ce4b7389b44ebc9f06661b44ef7a017932a112600bfb1c1e20f1  qtum-0.17.6-x86_64-linux-gnu.tar.gz
b6d674bb6412da0a043709d99f2b1ee7440686db441264e16924be940b0c58e8  src/qtum-0.17.6.tar.gz
c220189f6ccf0ada949b101b6908c87e6690ee17d41628fb0a938b5303486328  qtum-linux-0.17-res.yml

df1bd7611c67172151a13fa9c1f70d7ef2216dda223e010c92da0ea8767ef670  qtum-0.17.6-win-unsigned.tar.gz
568b3548fcbd64887f9c748d855ff6c40cb05bd110aaf937d78c2599ba82567f  qtum-0.17.6-win32-debug.zip
7406d8cdd19034b2cc4c66c4a1494388de79bec2927efdbecefeeda766360e83  qtum-0.17.6-win32-setup-unsigned.exe
9ec1df3fc9136ae045f17ddaf755dfa1de23f4ebac611d50855bbe31ffe21a8d  qtum-0.17.6-win32.zip
18479f1a9310f6b6b1bc407460112c16af36eade6a9542e834032694535b9786  qtum-0.17.6-win64-debug.zip
1af40fc3c0432bc9e1ccf0db03d23565f9e3b9ad22e4936608729ea70dd3ca8e  qtum-0.17.6-win64-setup-unsigned.exe
03f41b996d438942a94a78ad0badfb8140e853ecb832cd4fb188a0d4a2f20fbe  qtum-0.17.6-win64.zip
b6d674bb6412da0a043709d99f2b1ee7440686db441264e16924be940b0c58e8  src/qtum-0.17.6.tar.gz
19e2109a25881db85789fa30052a0d4d1c07f5be725681838e3cd2846bb0b356  qtum-win-0.17-res.yml

d57899992770d952505aaff4a2f42d990d415596bb87d9d94b5540d650d40adc  qtum-0.17.6-osx-unsigned.dmg
4678164138dadaa574391b8a5f64059dce9bd664b40ee1e4b1bf4bc17b5b3c43  qtum-0.17.6-osx-unsigned.tar.gz
eba54932a6bed6d42ec4a2c3cc4f7fced5a88d0cb169b16a8a162f7c0189c8c9  qtum-0.17.6-osx64.tar.gz
b6d674bb6412da0a043709d99f2b1ee7440686db441264e16924be940b0c58e8  src/qtum-0.17.6.tar.gz
0ee37947bf3e8f1985b1f9b03760fe3449910ab69600b5bce063e8a0cef85454  qtum-osx-0.17-res.yml

```",83774906
899,False,False,2019-05-09T00:59:06Z,2019-05-09T02:46:05Z,"About Qtum and Mainnet Ignition
-------------------------------

Qtum is a decentralized blockchain project built on Bitcoin's UTXO model, with support for Ethereum Virtual Machine based smart contracts, and secured by a proof of stake consensus model. It achieves this through the revolutionary Account Abstraction Layer which allows the EVM to communicate with Qtum's Bitcoin-like UTXO blockchain. For more general information about Qtum as well as links to join our community, go to https://qtum.org

Welcome to the Qtum Ignition Main Network. This is the main network where the tokens hold value and should be guarded very carefully. There will be a testnet setup soon for developers, in the meantime you can use `-regtest` mode for testing needs. We will announce details about the token swap from QTUM ERC20 coins to QTUM mainnet tokens soon, watch our [website](https://qtum.org) for details about that.  

The major features implemented in Qtum Ignition include:

1. The Ethereum Virtual Machine, which allows for compatibility with most existing Solidity based smart contracts.
2. The Smart Staking Protocol is complete, which is an optimized Proof of Stake implementation designed for a smart contract platform (however, smart contracts can not participate in staking yet).
3. An improved smart contract GUI has been implemented that can be used for creating contracts, sending data and Qtum to them, and checking their status by executing them locally, The GUI also offers easy QRC20 tokens management. 
4. Regtest mode, which is ideal for developers who wish to create their own private blockchain. It is tuned specifically to make development easier. It will stake blocks automatically every 30 seconds, and can generate proof-of-work blocks instantly as needed.
5. The Decentralized Governance Protocol is completely implemented and functional, which allows certain network parameters to be modified without a fork.

For more technical information for how to start developing with Qtum please read the [Guide](https://github.com/qtumproject/qtum/blob/master/doc/sparknet-guide.md) and also see this tutorial for deploying a simple [faucet smart contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet) (it hasn't yet been updated for Mainnet for obvious reasons, but all the instructions are the same and you can try them in regtest mode)

Note: Qtum Core is considered beta software. We make no warranties or guarantees of its security or stability.

Update History
--------------
* v0.17.5 - Highly recommended update - Bug fix
	* Fix a bug introduced in 0.17.4 that caused some nodes not to be able to properly do reorg when receiving a duplicate stake block.
	* Add a recent checkpoint.
	* Fix gitian script filename in gitian build docs.
* v0.17.4 - Recommended update - Bug fixes
	* Enforce PoS checks when receiving blocks/headers.
	* Fix a bug that would cause Qt wallet to become unresponsive in Windows when machine time is inaccurate.
	* Fix wrong port numbers in some RPC help messages.
	* Update nMinimumChainWork, ChainTxData and defaultAssumeValid using recent chain data.
* v0.17.3 - Mandatory update for stakers - Bug fixes
	* Fix a bug where a staking node would stop producing valid blocks when it receives an invalid header.
	* Fix a bug that would cause a node to fail at syncing when started with `-checklevel`>3.
	* Add new checkpoints.
* v0.17.2 - Recommended update - Bug fixes
	* Update ZMQ version to 4.3.1 ([CVE-2019-6250](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-6250))
	* Change the behavior of the EVM's event emitter to match ethereum's behavior in some cases.
	* Fix a bug where the staking icon would not show accurate information.
	* Fix a bug where compilation would fail if the system has secp256k1 library already installed.
	* Fix a minor typo in Qt wallet.
* v0.17.1 - Upgrade Qtum core to bitcoin core 0.17.1 plus other improvements and bug fixes
	* Upgrade Qtum core to bitcoin core 0.17.1 including partially signed transactions support, external wallet files and more. Check bitcoin [0.17.0](https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.17.0.md) and [0.17.1](https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.17.1.md) release notes for more details.	
	* Fix a bug which allowed using P2SH addresses as transaction sender in RPC interface, which caused that transaction to be rejected.
	* Fix an issue which prevented the correct logs to be printed when a state divergence was detected.
	* Prioritize create contract transactions over send to contract ones when staking.
	* Fix a bug which allowed node's time manipulation in some cases.
	* Fix a bug which prevented some EVM globals to be returned correctly when using `callcontract` RPC call.
	* Fix a bug which caused fee estimation to be excessively high in some cases.
	* Fix Solidity compiler link in the GUI wallet.
	* Make `getaccountinfo` RPC call help message clearer.
	* Improve the way encrypted wallet related RPC calls help messages were displayed.
	* Fix a bug that caused build description to be inaccurate.
* v0.16.2 - Recommended update - Improved network security and bug fixes
	* Implement network spam protection
	* Only request blocks from peers when their chainwork is strictly greater than the current tip
	* Add extra header checks for PoS timestamp, block indexes, signature type (LowS), synchronized and rolling checkpoints.
	* Add recent checkpoints
	* Update nMinimumChainWork, defaultAssumeValid and chainTxData
	* Update BLOCK\_CHAIN\_SIZE
	* Fix failing Qt tests in `make check` on OSX Mojave
	* Fix getblocktemplate rpc call for PoS blocks
	* Fix help messages for walletpassphrase and getnetworkhashps rpc calls
* v0.16.1 - Mandatory Update - Critical bug fix
	* Fix an upstream bitcoin critical bug, more info: [CVE-2018-17144](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-17144)
* v0.16.0 - Upgrade Qtum core to bitcoin core 0.16 and bug fixes
	* Upgrade Qtum core to bitcoin core 0.16 including segwit wallet, bech32 addresses, HD-wallets by default and [more](https://bitcoin.org/en/release/v0.16.0#notable-changes)
	* Fix a bug where contract transactions with no change would fail in some cases
	* Fix a display bug where multiple logs would not show corretly in Qt wallet
	* Update gitian build scripts to support ubuntu bionic as building host
* v0.15.3 - Recommended update - Bug fix
	* Fix a bug with `searchlogs` and `waitforlogs` rpc calls that caused duplicacte logs to show in some cases
	* Add support for building with boost 1.67 
* v0.15.2 - Recommended update - Improved seeding and bug fixes
	* Fix a staker halving subsidy calculation bug
	* Fix some translations errors and typos
	* Add Support for openssl 1.1
	* Fix CVE-2018-12356 by hardening the regex
	* Fix a python tests bug that caused bulk running of tests to fail
	* Add static seeds
	* Add new dns seed nodes
	* Update copyright year
* v0.15.1 - Upgrade Qtum core to bitcoin core 0.15.1 and bug fixes
    * Upgrade Qtum core code to bitcoin core 0.15.1 with important performance improvments and other features, read more about bitcoin core [0.15.0](https://bitcoin.org/en/release/v0.15.0) and [0.15.1](https://bitcoin.org/en/release/v0.15.1)
    * Fix a bug with reindexing when the data directory is empty
    * Prevent sending QRC20 tokens to P2SH Qtum addresses in the Qt wallet
    * Restore JS number as string support for `callcontract` and `sendtocontract` rpc calls
    * Fix a bug where the wrong block hash would be stored in the transaction receipt for miners with `-logevents` enabled
* v0.14.16 - Improvments and Bug fixes
    * Fixed a bug where transactions with low fees would get stuck in the local mempool.
    * Fix a bug with clearing cache of StorageResults
    * Add contract support to ""createrawtransaction"" rpc call
    * Add sender support to ""sendtoaddress"" rpc call
* v0.14.15 - Recommended Update
    * Add EVM global variables to callcontract
    * Update gitian build script
    * Update CentOS build instructions
    * Add exception data to TransactionReceipt
    * Fixed a bug where the gas price could not be parsed correctly on certain platforms (reported by APIS)
    * Fixed a bug where the logs were not reverted on disconnect block in certain cases
* v0.14.14 - Mandatory Update
    * New Qt GUI
    * Fix Qt wallet freeze when syncing from scratch with `-logevents` or `-reindex`
    * Fix a bug with cacheUTXO (hardfork at block 100000 in mainnet, 84500 in testnet)
    * Add update checking functionality to Qt wallet
    * Fix a bug in token transfers history dates
    * Fix a bug with searchlogs rpc call
    * Add an extra check when adding token addresses
    * Fix compatibility with boost 1.66 
    * Add checkpoints
    * Update nMinimumChainWork and defaultAssumeValid chain params
    * Add minmempoolgaslimit startup argument
    * Add Gitian build signatures
* v0.14.13 - Mandatory Update
    * Fix a callcontract bug which in very specific cases could cause the node to fail to sync the blockchain
    * Add ability to save and restore contract addresses and ABI data
    * Make the token confirmation view data correct
* v0.14.12 - Recommended Update
    * Added option to disable change address usage
    * Fixed bug where heavy RPC usage could cause the wallet to crash
* v0.14.11 - Optional Update
    * Changed our versioning scheme to be consistent and avoid the two version number confusion
    * Add feature to restore wallet in the Qt wallet
    * Add new RPC call ""waitforlogs"" that is particularly useful for Dapp developers
    * Add long-polling support to the gettransaction RPC call
* v1.1.4 - Recommended update
    * Fixed a bug that would cause syncing to stop
    * Fixed a bug that would cause the wallet to crash when using -logevents
* v1.1.3 - Highly recommended update
    * Fixed a bug that caused contact addresses to show in receive token address dropdown
* v1.1.2 - Optional update, but recommended if using QRC tokens
    * Fixed a bug with token transactions where the transaction ID displayed was incorrect in the Qt wallet
    * Allow adding 0 balance addresses as the token receiver in the Qt wallet
* v1.1.1: When sending to contracts, the sender address is now the default change address to reduce confusion; fix -salvagewallet so it works with token transactions
* v1.1.0: Add GUI support Qtum QRC tokens, allowing full management of tokens on the Qtum blockchain from the Qt wallet
    * Sending to a contract no longer requires ABI data, allowing easy participation in simple crowdsale contracts
* v1.0.4: Fix bug where certain circumstances when staking could cause the displayed balance to be inaccurate until completely redownloading the blockchain.
* v1.0.3: Fix staker bug that reported false messages; slightly increases staking performance; optimize staker parameters; fix white send button in GUI
* v1.0.2: Various UI fixes, minor gas overflow consensus fix, per-txout exploit fix, testnet mode setup and functioning
* v1.0.1: Fixed network magic bytes and minimum version to ensure the main network does not conflict with the Skynet network
* v1.0: Initial release

Reindex Required When Upgrading from v1.0.1
----------------------------------------------

When you first start the Qtum 1.0.2 GUI wallet after using Qtum v1.0.1 it will prompt you that it must reindex the database. This is normal and is a result of switching our internal database format from per-transaction to per-txout. If you use `qtumd -daemon` it will silently fail to start. You need to use `qtumd -daemon -reindex` in this case. 

Qtum Documentation and Usage Resources
---------------

Basic usage resources:

* [Official Qtum Usage Guide](https://github.com/qtumproject/qtum/wiki/Qtum-Wallet-Tutorial)
* [Unofficial Qtum staking tutorial](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtum-qt)
* [Unofficial Qtum staking tutorial on Raspberry Pi](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtumd-on-a-raspberry-pi-3)
* [Unofficial guide for keeping your wallet safe](https://steemit.com/qtum/@cryptominder/encrypting-backing-up-and-restoring-your-qtum-wallet)
* [Block explorer](https://explorer.qtum.org)
* [Unofficial block explorer](https://qtumexplorer.io/)
* [Unofficial Raspberry Pi Web UI](https://github.com/rpiwalletui/qtum-ui)

Development resources:

* [Deploying a custom token to Qtum](https://blog.qtum.org/qtum-custom-token-walkthrough-467d725fa27d)
* [Early example faucet contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet)
* [Unofficial Qtum Hello World tutorial](https://steemit.com/qtum/@cryptominder/quantum-qtum-blockchain-developer-tutorial-hello-world)

General Info about Qtum:

* [Mainnet event AMA](https://www.reddit.com/r/Qtum/comments/6zs8t0/official_qtum_ama_thread_starts_at_10pm_beijing/)
* [Qtum's PoS vs CASPER](https://www.reddit.com/r/Qtum/comments/788oa5/qtums_pos_vs_casper_and_the_nothingatstake_problem/)
* [Technical article explaining Qtum's PoS model in depth](http://earlz.net/view/2017/07/27/1904/the-missing-explanation-of-proof-of-stake-version)
* [Unofficial What is Qtum article](https://storeofvalue.github.io/posts/what-is-qtum-without-the-bullshit/)

#### Build Qtum Core

If you want to build it from source, it's recommended to follow the specific [""build"" documentation](https://github.com/qtumproject/qtum/tree/testnet-2/doc) for your platform. But mostly it boils down to the following:

1. Clone the qtum source code and cd into `qtum`

        git clone --recursive https://github.com/qtumproject/qtum.git
        cd qtum


2.  Build qtum-core:

    Configure and build the headless qtum binaries as well as the GUI (if Qt is found).

    You can disable the GUI build by passing `--without-gui` to configure.

        ./autogen.sh
        ./configure
        make

3.  It is recommended to build and run the unit tests to ensure everything is working correctly:

        make check


If you encounter an error like:

> make[2]: *** No rule to make target ‘cpp-ethereum/utils/libscrypt/b64.c’, needed by ‘cpp-ethereum/utils/libscrypt/libbitcoinconsensus_la-b64.lo’.  Stop.

Then you did not checkout the cpp-ethereum submodule for Qtum. To do that, simply:

    cd qtum
    git submodule update --init --recursive

Validate and Reproduce Binaries
---------------------------------

Qtum uses a tool called Gitian to make reproducible builds that can be verified by anyone. Instructions on setting up a Gitian VM and building Qtum are provided [in doc/gitian-building.md](https://github.com/qtumproject/qtum/blob/master/doc/gitian-building.md)

Community Resources
---------

Make sure to check out these resources as well for more information and to keep up to date with all the latest news about Qtum. At least 1 developer is always around, so if you're developing on Qtum and need help, we'd love to welcome you to our community.  

* [/r/Qtum on Reddit](https://www.reddit.com/r/Qtum/)
* [Qtum Telegram Group](https://t.me/joinchat/D5oBaw29NeOdpw6qqqf2lw)
* [@QtumOfficial on Twitter](https://mobile.twitter.com/qtumofficial)
* [Qtum on Facebook](https://www.facebook.com/QtumOfficial/)
* [Qtum Forum](https://forum.qtum.org/)
* [Qtum.org](https://qtum.org/en/)


Qtum Smart Contract Limitations
-----------

* EVM smart contracts can not receive coins from or send coins to any address type other than pay-to-pubkeyhash (starts with Q) addresses. This is due to a limitation in the EVM
* Contracts are not allowed to create contracts with an initial endowment of coins. The contract must first be created, and then be sent coins in a separate transaction. Humans are also not allowed to create contracts with an initial endowment of coins.
* Although all of the infrastructure is present, Qtum Core does not currently parse Solidity event data. You must parse this yourself using either `searchlogs` or `-record-log-opcodes` features.
* It is not possible to send a contract coins without also executing the contract. This is also the case of Ethereum. This was promised in earlier discussions and technically does work, but due to lack of time for testing this feature was disabled. We hope to reenable this feature with release of the x86 virtual machine in 2018.
* In Qtum there can be multiple addresses used to create a proof-of-stake block. However, the EVM can only see the first output using the `coinbase` operation in Solidity (this address is also the one registered for the continuous staker rewards after 500 blocks). 

Hash Validation
----------------

If you would like to validate that the binaries you download are exactly the same as those provided and built by the Qtum team, then you can compare your binaries to the following sha256sum hashes:

```
ab98c828a4b0ce1c1da280992723b85f28a88fc0d6cff70b31beb7b0fd438e48  qtum-0.17.5-aarch64-linux-gnu-debug.tar.gz
1cfbf20d66880e243c83bf2deb634148be0e5bac62906ab96faf5cfe5815a197  qtum-0.17.5-aarch64-linux-gnu.tar.gz
296a57a15c39ac7e085611665cb6425d27b2940f6fb7215e15df595c424d791d  qtum-0.17.5-arm-linux-gnueabihf-debug.tar.gz
afdc64324299095832a5d58a758d80ea541c73e7080627615802b5195b02b4af  qtum-0.17.5-arm-linux-gnueabihf.tar.gz
be67874a0a02ec314540933dc0add1e1516944396ea0c2ee2192693f60ccf0b7  qtum-0.17.5-i686-pc-linux-gnu-debug.tar.gz
d9eacbc64416b4dfd83de16e60be8283071d95153a33fcb55907916d6f48c558  qtum-0.17.5-i686-pc-linux-gnu.tar.gz
42f626a1f2ffa715f96593457325ca27c5fc74e891035a2ad07ef9e4ee8d1c2e  qtum-0.17.5-x86_64-linux-gnu-debug.tar.gz
824bb5963056ff03c1546ed857193960ca9560f5b15ec664a3970978c9267542  qtum-0.17.5-x86_64-linux-gnu.tar.gz
8263b1424fa85d6d841156908510a394ad6be84706af054beacfbf9b3c9a999c  src/qtum-0.17.5.tar.gz
22f79fea1acc260bc9149ccef47dc02073c9fb4e32921b38df52d3114e58fc74  qtum-linux-0.17-res.yml

d3525d2487951f3634ada153926ed3046943f3321ed3dd7fd7eb136063a8a414  qtum-0.17.5-win-unsigned.tar.gz
85aa5dfaee1d6ecd4cda48ea4974b7ddd2de9deb8287740336be66ee6b2edd3a  qtum-0.17.5-win32-debug.zip
4222c8d83b61e5675087c1126cc3b376cdee06ca4874ff72eadc8994b5fbaa18  qtum-0.17.5-win32-setup-unsigned.exe
80ee59e53da2dba69e3efd025f1a4d3dff5678512d21b04befb01ba4c671b495  qtum-0.17.5-win32.zip
d09b35aece5cbc05fd9b879c76c2d6ffb07fe615ac8e21382eb48f25d3fedb4f  qtum-0.17.5-win64-debug.zip
b6ccbc60484234cd9522d8608852771fb4e2371d3ed74114df29419872f4c373  qtum-0.17.5-win64-setup-unsigned.exe
a51cf316050f051cbb7c4b7e3c57073f717a10d89f474d882896e84907d75fd9  qtum-0.17.5-win64.zip
8263b1424fa85d6d841156908510a394ad6be84706af054beacfbf9b3c9a999c  src/qtum-0.17.5.tar.gz
45f0ecb83239127686e2c64815d0f4ccf4116ae6ad7a881bcbae714e79e03da8  qtum-win-0.17-res.yml

6cc84f6060c755fbd1113ff1b50d33607b28b033a7ac01a33be0a6f0726b20db  qtum-0.17.5-osx-unsigned.dmg
fe8110af7937a6650c5969d9048ab04f58403f35e378da877c9644bc6d42a570  qtum-0.17.5-osx-unsigned.tar.gz
5085acc58f8d68a40191823594c0f9f0b41f1290c0a851daffae4663e6ad3b47  qtum-0.17.5-osx64.tar.gz
8263b1424fa85d6d841156908510a394ad6be84706af054beacfbf9b3c9a999c  src/qtum-0.17.5.tar.gz
606a80084c83c748131243cf24a6f642fb0db63e456932a15c5fbb20e4e5dd0f  qtum-osx-0.17-res.yml

```",83774906
900,False,False,2019-05-02T01:34:11Z,2019-05-02T03:37:53Z,"About Qtum and Mainnet Ignition
-------------------------------

Qtum is a decentralized blockchain project built on Bitcoin's UTXO model, with support for Ethereum Virtual Machine based smart contracts, and secured by a proof of stake consensus model. It achieves this through the revolutionary Account Abstraction Layer which allows the EVM to communicate with Qtum's Bitcoin-like UTXO blockchain. For more general information about Qtum as well as links to join our community, go to https://qtum.org

Welcome to the Qtum Ignition Main Network. This is the main network where the tokens hold value and should be guarded very carefully. There will be a testnet setup soon for developers, in the meantime you can use `-regtest` mode for testing needs. We will announce details about the token swap from QTUM ERC20 coins to QTUM mainnet tokens soon, watch our [website](https://qtum.org) for details about that.  

The major features implemented in Qtum Ignition include:

1. The Ethereum Virtual Machine, which allows for compatibility with most existing Solidity based smart contracts.
2. The Smart Staking Protocol is complete, which is an optimized Proof of Stake implementation designed for a smart contract platform (however, smart contracts can not participate in staking yet).
3. An improved smart contract GUI has been implemented that can be used for creating contracts, sending data and Qtum to them, and checking their status by executing them locally, The GUI also offers easy QRC20 tokens management. 
4. Regtest mode, which is ideal for developers who wish to create their own private blockchain. It is tuned specifically to make development easier. It will stake blocks automatically every 30 seconds, and can generate proof-of-work blocks instantly as needed.
5. The Decentralized Governance Protocol is completely implemented and functional, which allows certain network parameters to be modified without a fork.

For more technical information for how to start developing with Qtum please read the [Guide](https://github.com/qtumproject/qtum/blob/master/doc/sparknet-guide.md) and also see this tutorial for deploying a simple [faucet smart contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet) (it hasn't yet been updated for Mainnet for obvious reasons, but all the instructions are the same and you can try them in regtest mode)

Note: Qtum Core is considered beta software. We make no warranties or guarantees of its security or stability.

Update History
--------------
* v0.17.4 - Recommended update - Bug fixes
	* Enforce PoS checks when receiving blocks/headers.
	* Fix a bug that would cause Qt wallet to become unresponsive in Windows when machine time is inaccurate.
	* Fix wrong port numbers in some RPC help messages.
	* Update nMinimumChainWork, ChainTxData and defaultAssumeValid using recent chain data.
* v0.17.3 - Mandatory update for stakers - Bug fixes
	* Fix a bug where a staking node would stop producing valid blocks when it receives an invalid header.
	* Fix a bug that would cause a node to fail at syncing when started with `-checklevel`>3.
	* Add new checkpoints.
* v0.17.2 - Recommended update - Bug fixes
	* Update ZMQ version to 4.3.1 ([CVE-2019-6250](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-6250))
	* Change the behavior of the EVM's event emitter to match ethereum's behavior in some cases.
	* Fix a bug where the staking icon would not show accurate information.
	* Fix a bug where compilation would fail if the system has secp256k1 library already installed.
	* Fix a minor typo in Qt wallet.
* v0.17.1 - Upgrade Qtum core to bitcoin core 0.17.1 plus other improvements and bug fixes
	* Upgrade Qtum core to bitcoin core 0.17.1 including partially signed transactions support, external wallet files and more. Check bitcoin [0.17.0](https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.17.0.md) and [0.17.1](https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.17.1.md) release notes for more details.	
	* Fix a bug which allowed using P2SH addresses as transaction sender in RPC interface, which caused that transaction to be rejected.
	* Fix an issue which prevented the correct logs to be printed when a state divergence was detected.
	* Prioritize create contract transactions over send to contract ones when staking.
	* Fix a bug which allowed node's time manipulation in some cases.
	* Fix a bug which prevented some EVM globals to be returned correctly when using `callcontract` RPC call.
	* Fix a bug which caused fee estimation to be excessively high in some cases.
	* Fix Solidity compiler link in the GUI wallet.
	* Make `getaccountinfo` RPC call help message clearer.
	* Improve the way encrypted wallet related RPC calls help messages were displayed.
	* Fix a bug that caused build description to be inaccurate.
* v0.16.2 - Recommended update - Improved network security and bug fixes
	* Implement network spam protection
	* Only request blocks from peers when their chainwork is strictly greater than the current tip
	* Add extra header checks for PoS timestamp, block indexes, signature type (LowS), synchronized and rolling checkpoints.
	* Add recent checkpoints
	* Update nMinimumChainWork, defaultAssumeValid and chainTxData
	* Update BLOCK\_CHAIN\_SIZE
	* Fix failing Qt tests in `make check` on OSX Mojave
	* Fix getblocktemplate rpc call for PoS blocks
	* Fix help messages for walletpassphrase and getnetworkhashps rpc calls
* v0.16.1 - Mandatory Update - Critical bug fix
	* Fix an upstream bitcoin critical bug, more info: [CVE-2018-17144](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-17144)
* v0.16.0 - Upgrade Qtum core to bitcoin core 0.16 and bug fixes
	* Upgrade Qtum core to bitcoin core 0.16 including segwit wallet, bech32 addresses, HD-wallets by default and [more](https://bitcoin.org/en/release/v0.16.0#notable-changes)
	* Fix a bug where contract transactions with no change would fail in some cases
	* Fix a display bug where multiple logs would not show corretly in Qt wallet
	* Update gitian build scripts to support ubuntu bionic as building host
* v0.15.3 - Recommended update - Bug fix
	* Fix a bug with `searchlogs` and `waitforlogs` rpc calls that caused duplicacte logs to show in some cases
	* Add support for building with boost 1.67 
* v0.15.2 - Recommended update - Improved seeding and bug fixes
	* Fix a staker halving subsidy calculation bug
	* Fix some translations errors and typos
	* Add Support for openssl 1.1
	* Fix CVE-2018-12356 by hardening the regex
	* Fix a python tests bug that caused bulk running of tests to fail
	* Add static seeds
	* Add new dns seed nodes
	* Update copyright year
* v0.15.1 - Upgrade Qtum core to bitcoin core 0.15.1 and bug fixes
    * Upgrade Qtum core code to bitcoin core 0.15.1 with important performance improvments and other features, read more about bitcoin core [0.15.0](https://bitcoin.org/en/release/v0.15.0) and [0.15.1](https://bitcoin.org/en/release/v0.15.1)
    * Fix a bug with reindexing when the data directory is empty
    * Prevent sending QRC20 tokens to P2SH Qtum addresses in the Qt wallet
    * Restore JS number as string support for `callcontract` and `sendtocontract` rpc calls
    * Fix a bug where the wrong block hash would be stored in the transaction receipt for miners with `-logevents` enabled
* v0.14.16 - Improvments and Bug fixes
    * Fixed a bug where transactions with low fees would get stuck in the local mempool.
    * Fix a bug with clearing cache of StorageResults
    * Add contract support to ""createrawtransaction"" rpc call
    * Add sender support to ""sendtoaddress"" rpc call
* v0.14.15 - Recommended Update
    * Add EVM global variables to callcontract
    * Update gitian build script
    * Update CentOS build instructions
    * Add exception data to TransactionReceipt
    * Fixed a bug where the gas price could not be parsed correctly on certain platforms (reported by APIS)
    * Fixed a bug where the logs were not reverted on disconnect block in certain cases
* v0.14.14 - Mandatory Update
    * New Qt GUI
    * Fix Qt wallet freeze when syncing from scratch with `-logevents` or `-reindex`
    * Fix a bug with cacheUTXO (hardfork at block 100000 in mainnet, 84500 in testnet)
    * Add update checking functionality to Qt wallet
    * Fix a bug in token transfers history dates
    * Fix a bug with searchlogs rpc call
    * Add an extra check when adding token addresses
    * Fix compatibility with boost 1.66 
    * Add checkpoints
    * Update nMinimumChainWork and defaultAssumeValid chain params
    * Add minmempoolgaslimit startup argument
    * Add Gitian build signatures
* v0.14.13 - Mandatory Update
    * Fix a callcontract bug which in very specific cases could cause the node to fail to sync the blockchain
    * Add ability to save and restore contract addresses and ABI data
    * Make the token confirmation view data correct
* v0.14.12 - Recommended Update
    * Added option to disable change address usage
    * Fixed bug where heavy RPC usage could cause the wallet to crash
* v0.14.11 - Optional Update
    * Changed our versioning scheme to be consistent and avoid the two version number confusion
    * Add feature to restore wallet in the Qt wallet
    * Add new RPC call ""waitforlogs"" that is particularly useful for Dapp developers
    * Add long-polling support to the gettransaction RPC call
* v1.1.4 - Recommended update
    * Fixed a bug that would cause syncing to stop
    * Fixed a bug that would cause the wallet to crash when using -logevents
* v1.1.3 - Highly recommended update
    * Fixed a bug that caused contact addresses to show in receive token address dropdown
* v1.1.2 - Optional update, but recommended if using QRC tokens
    * Fixed a bug with token transactions where the transaction ID displayed was incorrect in the Qt wallet
    * Allow adding 0 balance addresses as the token receiver in the Qt wallet
* v1.1.1: When sending to contracts, the sender address is now the default change address to reduce confusion; fix -salvagewallet so it works with token transactions
* v1.1.0: Add GUI support Qtum QRC tokens, allowing full management of tokens on the Qtum blockchain from the Qt wallet
    * Sending to a contract no longer requires ABI data, allowing easy participation in simple crowdsale contracts
* v1.0.4: Fix bug where certain circumstances when staking could cause the displayed balance to be inaccurate until completely redownloading the blockchain.
* v1.0.3: Fix staker bug that reported false messages; slightly increases staking performance; optimize staker parameters; fix white send button in GUI
* v1.0.2: Various UI fixes, minor gas overflow consensus fix, per-txout exploit fix, testnet mode setup and functioning
* v1.0.1: Fixed network magic bytes and minimum version to ensure the main network does not conflict with the Skynet network
* v1.0: Initial release

Reindex Required When Upgrading from v1.0.1
----------------------------------------------

When you first start the Qtum 1.0.2 GUI wallet after using Qtum v1.0.1 it will prompt you that it must reindex the database. This is normal and is a result of switching our internal database format from per-transaction to per-txout. If you use `qtumd -daemon` it will silently fail to start. You need to use `qtumd -daemon -reindex` in this case. 

Qtum Documentation and Usage Resources
---------------

Basic usage resources:

* [Official Qtum Usage Guide](https://github.com/qtumproject/qtum/wiki/Qtum-Wallet-Tutorial)
* [Unofficial Qtum staking tutorial](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtum-qt)
* [Unofficial Qtum staking tutorial on Raspberry Pi](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtumd-on-a-raspberry-pi-3)
* [Unofficial guide for keeping your wallet safe](https://steemit.com/qtum/@cryptominder/encrypting-backing-up-and-restoring-your-qtum-wallet)
* [Block explorer](https://explorer.qtum.org)
* [Unofficial block explorer](https://qtumexplorer.io/)
* [Unofficial Raspberry Pi Web UI](https://github.com/rpiwalletui/qtum-ui)

Development resources:

* [Deploying a custom token to Qtum](https://blog.qtum.org/qtum-custom-token-walkthrough-467d725fa27d)
* [Early example faucet contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet)
* [Unofficial Qtum Hello World tutorial](https://steemit.com/qtum/@cryptominder/quantum-qtum-blockchain-developer-tutorial-hello-world)

General Info about Qtum:

* [Mainnet event AMA](https://www.reddit.com/r/Qtum/comments/6zs8t0/official_qtum_ama_thread_starts_at_10pm_beijing/)
* [Qtum's PoS vs CASPER](https://www.reddit.com/r/Qtum/comments/788oa5/qtums_pos_vs_casper_and_the_nothingatstake_problem/)
* [Technical article explaining Qtum's PoS model in depth](http://earlz.net/view/2017/07/27/1904/the-missing-explanation-of-proof-of-stake-version)
* [Unofficial What is Qtum article](https://storeofvalue.github.io/posts/what-is-qtum-without-the-bullshit/)

#### Build Qtum Core

If you want to build it from source, it's recommended to follow the specific [""build"" documentation](https://github.com/qtumproject/qtum/tree/testnet-2/doc) for your platform. But mostly it boils down to the following:

1. Clone the qtum source code and cd into `qtum`

        git clone --recursive https://github.com/qtumproject/qtum.git
        cd qtum


2.  Build qtum-core:

    Configure and build the headless qtum binaries as well as the GUI (if Qt is found).

    You can disable the GUI build by passing `--without-gui` to configure.

        ./autogen.sh
        ./configure
        make

3.  It is recommended to build and run the unit tests to ensure everything is working correctly:

        make check


If you encounter an error like:

> make[2]: *** No rule to make target ‘cpp-ethereum/utils/libscrypt/b64.c’, needed by ‘cpp-ethereum/utils/libscrypt/libbitcoinconsensus_la-b64.lo’.  Stop.

Then you did not checkout the cpp-ethereum submodule for Qtum. To do that, simply:

    cd qtum
    git submodule update --init --recursive

Validate and Reproduce Binaries
---------------------------------

Qtum uses a tool called Gitian to make reproducible builds that can be verified by anyone. Instructions on setting up a Gitian VM and building Qtum are provided [in doc/gitian-building.md](https://github.com/qtumproject/qtum/blob/master/doc/gitian-building.md)

Community Resources
---------

Make sure to check out these resources as well for more information and to keep up to date with all the latest news about Qtum. At least 1 developer is always around, so if you're developing on Qtum and need help, we'd love to welcome you to our community.  

* [/r/Qtum on Reddit](https://www.reddit.com/r/Qtum/)
* [Qtum Telegram Group](https://t.me/joinchat/D5oBaw29NeOdpw6qqqf2lw)
* [@QtumOfficial on Twitter](https://mobile.twitter.com/qtumofficial)
* [Qtum on Facebook](https://www.facebook.com/QtumOfficial/)
* [Qtum Forum](https://forum.qtum.org/)
* [Qtum.org](https://qtum.org/en/)


Qtum Smart Contract Limitations
-----------

* EVM smart contracts can not receive coins from or send coins to any address type other than pay-to-pubkeyhash (starts with Q) addresses. This is due to a limitation in the EVM
* Contracts are not allowed to create contracts with an initial endowment of coins. The contract must first be created, and then be sent coins in a separate transaction. Humans are also not allowed to create contracts with an initial endowment of coins.
* Although all of the infrastructure is present, Qtum Core does not currently parse Solidity event data. You must parse this yourself using either `searchlogs` or `-record-log-opcodes` features.
* It is not possible to send a contract coins without also executing the contract. This is also the case of Ethereum. This was promised in earlier discussions and technically does work, but due to lack of time for testing this feature was disabled. We hope to reenable this feature with release of the x86 virtual machine in 2018.
* In Qtum there can be multiple addresses used to create a proof-of-stake block. However, the EVM can only see the first output using the `coinbase` operation in Solidity (this address is also the one registered for the continuous staker rewards after 500 blocks). 

Hash Validation
----------------

If you would like to validate that the binaries you download are exactly the same as those provided and built by the Qtum team, then you can compare your binaries to the following sha256sum hashes:

```
3474c76493be3bc6f91809fe15141527caff3eb05fbe2926d898281eb67bd63a  qtum-0.17.4-aarch64-linux-gnu-debug.tar.gz
ec3cf7a4ed06c8bf689bf4fd717f42b1a1c76be1ae974e7cb5db7a1b6704c06f  qtum-0.17.4-aarch64-linux-gnu.tar.gz
d0aedea395f9b025db1def7f534435340dac5efb6c9db89f5979ed563fa38bf4  qtum-0.17.4-arm-linux-gnueabihf-debug.tar.gz
3e784569c7c456ef7335aaf3fae48b6f4ae1018135eb00c525009a93e6f89378  qtum-0.17.4-arm-linux-gnueabihf.tar.gz
f67fbdfc442cb24229c89c2978d6d5dda3a112764c7f8148e964cb30791c87f0  qtum-0.17.4-i686-pc-linux-gnu-debug.tar.gz
f77243a02e10214d9d92bd31d6313534c8dde022155ebd4151009325a027e76f  qtum-0.17.4-i686-pc-linux-gnu.tar.gz
cdd84c8492e18950b7a7bc868c71422d1f9e9112eebc7c461097d47aeccdfd05  qtum-0.17.4-x86_64-linux-gnu-debug.tar.gz
b6cc3e6fcebb3d848a9848b0372eaac1f1dc87a34b619641f4712507ebdf065c  qtum-0.17.4-x86_64-linux-gnu.tar.gz
2032cc8df96e2a85a124a7370e537ad202eb0915c5d027b33fd2ab326afaf812  src/qtum-0.17.4.tar.gz
6ad5ed0cdac61d8c4df5a2eb9e9c4b06c395182036a85f81cd9fc32f16c68c7a  qtum-linux-0.17-res.yml

2fce9cc80a8a4ed996304ab2b1db31da607ec543e68f2bb30c19d81379fcb261  qtum-0.17.4-win-unsigned.tar.gz
bef1d1ddb88d85a6830729df8f411190b87b002b505dcbe121b5aa4bca47cc36  qtum-0.17.4-win32-debug.zip
eeeb970142c53ac4d4e8cecf02ea694f84b6fc9f2a4df928c26a44f67ba2a771  qtum-0.17.4-win32-setup-unsigned.exe
c73fbf6a1ab7ff53c218f9965e0b78038f5eb6749ed46dee6aba4c30a0e41806  qtum-0.17.4-win32.zip
5431f2f5736284d190d036ed66286b013bfe48cdaa5664ade9727704f687b5f3  qtum-0.17.4-win64-debug.zip
1c0b6b2127eaed1f62425db05070763989525fbb06753fb2dd9b377e9acc0f79  qtum-0.17.4-win64-setup-unsigned.exe
07a7a4e4fdef3ee3ad3e8a1707a3920bb0c86485aca8782e2364572fcd9dcdf1  qtum-0.17.4-win64.zip
2032cc8df96e2a85a124a7370e537ad202eb0915c5d027b33fd2ab326afaf812  src/qtum-0.17.4.tar.gz
54015319980e8a8b7f75d31e6f5e8a754e4cb292d4574372ba54832d9fec8b28  qtum-win-0.17-res.yml

692ff5e3bc211cbdf3a5579199ea798837bd2cf3152e0ea65b3a5ed7ff1f6482  qtum-0.17.4-osx-unsigned.dmg
42c5aa8491219137b0c1738369d74d239c9df98009c75722574cc31138d8b37e  qtum-0.17.4-osx-unsigned.tar.gz
4578ef2f8c98abd329bd832defdc1e4a451bbdc84a7008d440b4171b8a55af70  qtum-0.17.4-osx64.tar.gz
2032cc8df96e2a85a124a7370e537ad202eb0915c5d027b33fd2ab326afaf812  src/qtum-0.17.4.tar.gz
26e9addc42de11d05e658ad84f07e0f17e2c731144c1d51ce74034a6cace51f9  qtum-osx-0.17-res.yml

```",83774906
901,False,False,2019-04-13T16:37:11Z,2019-04-13T18:54:49Z,"About Qtum and Mainnet Ignition
-------------------------------

Qtum is a decentralized blockchain project built on Bitcoin's UTXO model, with support for Ethereum Virtual Machine based smart contracts, and secured by a proof of stake consensus model. It achieves this through the revolutionary Account Abstraction Layer which allows the EVM to communicate with Qtum's Bitcoin-like UTXO blockchain. For more general information about Qtum as well as links to join our community, go to https://qtum.org

Welcome to the Qtum Ignition Main Network. This is the main network where the tokens hold value and should be guarded very carefully. There will be a testnet setup soon for developers, in the meantime you can use `-regtest` mode for testing needs. We will announce details about the token swap from QTUM ERC20 coins to QTUM mainnet tokens soon, watch our [website](https://qtum.org) for details about that.  

The major features implemented in Qtum Ignition include:

1. The Ethereum Virtual Machine, which allows for compatibility with most existing Solidity based smart contracts.
2. The Smart Staking Protocol is complete, which is an optimized Proof of Stake implementation designed for a smart contract platform (however, smart contracts can not participate in staking yet).
3. An improved smart contract GUI has been implemented that can be used for creating contracts, sending data and Qtum to them, and checking their status by executing them locally, The GUI also offers easy QRC20 tokens management. 
4. Regtest mode, which is ideal for developers who wish to create their own private blockchain. It is tuned specifically to make development easier. It will stake blocks automatically every 30 seconds, and can generate proof-of-work blocks instantly as needed.
5. The Decentralized Governance Protocol is completely implemented and functional, which allows certain network parameters to be modified without a fork.

For more technical information for how to start developing with Qtum please read the [Guide](https://github.com/qtumproject/qtum/blob/master/doc/sparknet-guide.md) and also see this tutorial for deploying a simple [faucet smart contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet) (it hasn't yet been updated for Mainnet for obvious reasons, but all the instructions are the same and you can try them in regtest mode)

Note: Qtum Core is considered beta software. We make no warranties or guarantees of its security or stability.

Update History
--------------
* v0.17.3 - Mandatory update for stakers - Bug fixes
	* Fix a bug where a staking node would stop producing valid blocks when it receives an invalid header.
	* Fix a bug that would cause a node to fail at syncing when started with `-checklevel`>3.
	* Add new checkpoints.
* v0.17.2 - Recommended update - Bug fixes
	* Update ZMQ version to 4.3.1 ([CVE-2019-6250](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-6250))
	* Change the behavior of the EVM's event emitter to match ethereum's behavior in some cases.
	* Fix a bug where the staking icon would not show accurate information.
	* Fix a bug where compilation would fail if the system has secp256k1 library already installed.
	* Fix a minor typo in Qt wallet.
* v0.17.1 - Upgrade Qtum core to bitcoin core 0.17.1 plus other improvements and bug fixes
	* Upgrade Qtum core to bitcoin core 0.17.1 including partially signed transactions support, external wallet files and more. Check bitcoin [0.17.0](https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.17.0.md) and [0.17.1](https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.17.1.md) release notes for more details.	
	* Fix a bug which allowed using P2SH addresses as transaction sender in RPC interface, which caused that transaction to be rejected.
	* Fix an issue which prevented the correct logs to be printed when a state divergence was detected.
	* Prioritize create contract transactions over send to contract ones when staking.
	* Fix a bug which allowed node's time manipulation in some cases.
	* Fix a bug which prevented some EVM globals to be returned correctly when using `callcontract` RPC call.
	* Fix a bug which caused fee estimation to be excessively high in some cases.
	* Fix Solidity compiler link in the GUI wallet.
	* Make `getaccountinfo` RPC call help message clearer.
	* Improve the way encrypted wallet related RPC calls help messages were displayed.
	* Fix a bug that caused build description to be inaccurate.
* v0.16.2 - Recommended update - Improved network security and bug fixes
	* Implement network spam protection
	* Only request blocks from peers when their chainwork is strictly greater than the current tip
	* Add extra header checks for PoS timestamp, block indexes, signature type (LowS), synchronized and rolling checkpoints.
	* Add recent checkpoints
	* Update nMinimumChainWork, defaultAssumeValid and chainTxData
	* Update BLOCK\_CHAIN\_SIZE
	* Fix failing Qt tests in `make check` on OSX Mojave
	* Fix getblocktemplate rpc call for PoS blocks
	* Fix help messages for walletpassphrase and getnetworkhashps rpc calls
* v0.16.1 - Mandatory Update - Critical bug fix
	* Fix an upstream bitcoin critical bug, more info: [CVE-2018-17144](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-17144)
* v0.16.0 - Upgrade Qtum core to bitcoin core 0.16 and bug fixes
	* Upgrade Qtum core to bitcoin core 0.16 including segwit wallet, bech32 addresses, HD-wallets by default and [more](https://bitcoin.org/en/release/v0.16.0#notable-changes)
	* Fix a bug where contract transactions with no change would fail in some cases
	* Fix a display bug where multiple logs would not show corretly in Qt wallet
	* Update gitian build scripts to support ubuntu bionic as building host
* v0.15.3 - Recommended update - Bug fix
	* Fix a bug with `searchlogs` and `waitforlogs` rpc calls that caused duplicacte logs to show in some cases
	* Add support for building with boost 1.67 
* v0.15.2 - Recommended update - Improved seeding and bug fixes
	* Fix a staker halving subsidy calculation bug
	* Fix some translations errors and typos
	* Add Support for openssl 1.1
	* Fix CVE-2018-12356 by hardening the regex
	* Fix a python tests bug that caused bulk running of tests to fail
	* Add static seeds
	* Add new dns seed nodes
	* Update copyright year
* v0.15.1 - Upgrade Qtum core to bitcoin core 0.15.1 and bug fixes
    * Upgrade Qtum core code to bitcoin core 0.15.1 with important performance improvments and other features, read more about bitcoin core [0.15.0](https://bitcoin.org/en/release/v0.15.0) and [0.15.1](https://bitcoin.org/en/release/v0.15.1)
    * Fix a bug with reindexing when the data directory is empty
    * Prevent sending QRC20 tokens to P2SH Qtum addresses in the Qt wallet
    * Restore JS number as string support for `callcontract` and `sendtocontract` rpc calls
    * Fix a bug where the wrong block hash would be stored in the transaction receipt for miners with `-logevents` enabled
* v0.14.16 - Improvments and Bug fixes
    * Fixed a bug where transactions with low fees would get stuck in the local mempool.
    * Fix a bug with clearing cache of StorageResults
    * Add contract support to ""createrawtransaction"" rpc call
    * Add sender support to ""sendtoaddress"" rpc call
* v0.14.15 - Recommended Update
    * Add EVM global variables to callcontract
    * Update gitian build script
    * Update CentOS build instructions
    * Add exception data to TransactionReceipt
    * Fixed a bug where the gas price could not be parsed correctly on certain platforms (reported by APIS)
    * Fixed a bug where the logs were not reverted on disconnect block in certain cases
* v0.14.14 - Mandatory Update
    * New Qt GUI
    * Fix Qt wallet freeze when syncing from scratch with `-logevents` or `-reindex`
    * Fix a bug with cacheUTXO (hardfork at block 100000 in mainnet, 84500 in testnet)
    * Add update checking functionality to Qt wallet
    * Fix a bug in token transfers history dates
    * Fix a bug with searchlogs rpc call
    * Add an extra check when adding token addresses
    * Fix compatibility with boost 1.66 
    * Add checkpoints
    * Update nMinimumChainWork and defaultAssumeValid chain params
    * Add minmempoolgaslimit startup argument
    * Add Gitian build signatures
* v0.14.13 - Mandatory Update
    * Fix a callcontract bug which in very specific cases could cause the node to fail to sync the blockchain
    * Add ability to save and restore contract addresses and ABI data
    * Make the token confirmation view data correct
* v0.14.12 - Recommended Update
    * Added option to disable change address usage
    * Fixed bug where heavy RPC usage could cause the wallet to crash
* v0.14.11 - Optional Update
    * Changed our versioning scheme to be consistent and avoid the two version number confusion
    * Add feature to restore wallet in the Qt wallet
    * Add new RPC call ""waitforlogs"" that is particularly useful for Dapp developers
    * Add long-polling support to the gettransaction RPC call
* v1.1.4 - Recommended update
    * Fixed a bug that would cause syncing to stop
    * Fixed a bug that would cause the wallet to crash when using -logevents
* v1.1.3 - Highly recommended update
    * Fixed a bug that caused contact addresses to show in receive token address dropdown
* v1.1.2 - Optional update, but recommended if using QRC tokens
    * Fixed a bug with token transactions where the transaction ID displayed was incorrect in the Qt wallet
    * Allow adding 0 balance addresses as the token receiver in the Qt wallet
* v1.1.1: When sending to contracts, the sender address is now the default change address to reduce confusion; fix -salvagewallet so it works with token transactions
* v1.1.0: Add GUI support Qtum QRC tokens, allowing full management of tokens on the Qtum blockchain from the Qt wallet
    * Sending to a contract no longer requires ABI data, allowing easy participation in simple crowdsale contracts
* v1.0.4: Fix bug where certain circumstances when staking could cause the displayed balance to be inaccurate until completely redownloading the blockchain.
* v1.0.3: Fix staker bug that reported false messages; slightly increases staking performance; optimize staker parameters; fix white send button in GUI
* v1.0.2: Various UI fixes, minor gas overflow consensus fix, per-txout exploit fix, testnet mode setup and functioning
* v1.0.1: Fixed network magic bytes and minimum version to ensure the main network does not conflict with the Skynet network
* v1.0: Initial release

Reindex Required When Upgrading from v1.0.1
----------------------------------------------

When you first start the Qtum 1.0.2 GUI wallet after using Qtum v1.0.1 it will prompt you that it must reindex the database. This is normal and is a result of switching our internal database format from per-transaction to per-txout. If you use `qtumd -daemon` it will silently fail to start. You need to use `qtumd -daemon -reindex` in this case. 

Qtum Documentation and Usage Resources
---------------

Basic usage resources:

* [Official Qtum Usage Guide](https://github.com/qtumproject/qtum/wiki/Qtum-Wallet-Tutorial)
* [Unofficial Qtum staking tutorial](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtum-qt)
* [Unofficial Qtum staking tutorial on Raspberry Pi](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtumd-on-a-raspberry-pi-3)
* [Unofficial guide for keeping your wallet safe](https://steemit.com/qtum/@cryptominder/encrypting-backing-up-and-restoring-your-qtum-wallet)
* [Block explorer](https://explorer.qtum.org)
* [Unofficial block explorer](https://qtumexplorer.io/)
* [Unofficial Raspberry Pi Web UI](https://github.com/rpiwalletui/qtum-ui)

Development resources:

* [Deploying a custom token to Qtum](https://blog.qtum.org/qtum-custom-token-walkthrough-467d725fa27d)
* [Early example faucet contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet)
* [Unofficial Qtum Hello World tutorial](https://steemit.com/qtum/@cryptominder/quantum-qtum-blockchain-developer-tutorial-hello-world)

General Info about Qtum:

* [Mainnet event AMA](https://www.reddit.com/r/Qtum/comments/6zs8t0/official_qtum_ama_thread_starts_at_10pm_beijing/)
* [Qtum's PoS vs CASPER](https://www.reddit.com/r/Qtum/comments/788oa5/qtums_pos_vs_casper_and_the_nothingatstake_problem/)
* [Technical article explaining Qtum's PoS model in depth](http://earlz.net/view/2017/07/27/1904/the-missing-explanation-of-proof-of-stake-version)
* [Unofficial What is Qtum article](https://storeofvalue.github.io/posts/what-is-qtum-without-the-bullshit/)

#### Build Qtum Core

If you want to build it from source, it's recommended to follow the specific [""build"" documentation](https://github.com/qtumproject/qtum/tree/testnet-2/doc) for your platform. But mostly it boils down to the following:

1. Clone the qtum source code and cd into `qtum`

        git clone --recursive https://github.com/qtumproject/qtum.git
        cd qtum


2.  Build qtum-core:

    Configure and build the headless qtum binaries as well as the GUI (if Qt is found).

    You can disable the GUI build by passing `--without-gui` to configure.

        ./autogen.sh
        ./configure
        make

3.  It is recommended to build and run the unit tests to ensure everything is working correctly:

        make check


If you encounter an error like:

> make[2]: *** No rule to make target ‘cpp-ethereum/utils/libscrypt/b64.c’, needed by ‘cpp-ethereum/utils/libscrypt/libbitcoinconsensus_la-b64.lo’.  Stop.

Then you did not checkout the cpp-ethereum submodule for Qtum. To do that, simply:

    cd qtum
    git submodule update --init --recursive

Validate and Reproduce Binaries
---------------------------------

Qtum uses a tool called Gitian to make reproducible builds that can be verified by anyone. Instructions on setting up a Gitian VM and building Qtum are provided [in doc/gitian-building.md](https://github.com/qtumproject/qtum/blob/master/doc/gitian-building.md)

Community Resources
---------

Make sure to check out these resources as well for more information and to keep up to date with all the latest news about Qtum. At least 1 developer is always around, so if you're developing on Qtum and need help, we'd love to welcome you to our community.  

* [/r/Qtum on Reddit](https://www.reddit.com/r/Qtum/)
* [Qtum Telegram Group](https://t.me/joinchat/D5oBaw29NeOdpw6qqqf2lw)
* [@QtumOfficial on Twitter](https://mobile.twitter.com/qtumofficial)
* [Qtum on Facebook](https://www.facebook.com/QtumOfficial/)
* [Qtum Forum](https://forum.qtum.org/)
* [Qtum.org](https://qtum.org/en/)


Qtum Smart Contract Limitations
-----------

* EVM smart contracts can not receive coins from or send coins to any address type other than pay-to-pubkeyhash (starts with Q) addresses. This is due to a limitation in the EVM
* Contracts are not allowed to create contracts with an initial endowment of coins. The contract must first be created, and then be sent coins in a separate transaction. Humans are also not allowed to create contracts with an initial endowment of coins.
* Although all of the infrastructure is present, Qtum Core does not currently parse Solidity event data. You must parse this yourself using either `searchlogs` or `-record-log-opcodes` features.
* It is not possible to send a contract coins without also executing the contract. This is also the case of Ethereum. This was promised in earlier discussions and technically does work, but due to lack of time for testing this feature was disabled. We hope to reenable this feature with release of the x86 virtual machine in 2018.
* In Qtum there can be multiple addresses used to create a proof-of-stake block. However, the EVM can only see the first output using the `coinbase` operation in Solidity (this address is also the one registered for the continuous staker rewards after 500 blocks). 

Hash Validation
----------------

```

If you would like to validate that the binaries you download are exactly the same as those provided and built by the Qtum team, then you can compare your binaries to the following sha256sum hashes:

5c10260ac55119757f539bc4244458e667d72d945373f4c6c2d9550071867e1e  qtum-0.17.3-aarch64-linux-gnu-debug.tar.gz
28a219736fbf7987d39388ba061f4bd6db585e155275e6f599a528b54855aeae  qtum-0.17.3-aarch64-linux-gnu.tar.gz
b86b91180b2ba83e23e497e4576c0daac01c95f4040cd4e437c296675452877e  qtum-0.17.3-arm-linux-gnueabihf-debug.tar.gz
48239269d4a270fb1203d031fe9f45454fbb8ff9ffae8cc0917f8e3f96f190c9  qtum-0.17.3-arm-linux-gnueabihf.tar.gz
310aca8aa44ae29905a26d675614c87638086d590bc31d1ff7e751ebdc243a4b  qtum-0.17.3-i686-pc-linux-gnu-debug.tar.gz
8e98256ab921a5a71730fd2178ad64eb9352b9c39b9555b403b8c142c2af9800  qtum-0.17.3-i686-pc-linux-gnu.tar.gz
ee6dc083c8d9c7c79a5a293cad0c8fcab422a53732dfeef3939b6f56be0a0bb3  qtum-0.17.3-x86_64-linux-gnu-debug.tar.gz
d92e2171a0fb2d4128e706379074ff3f5190d0d82790041d111a7cac28810d50  qtum-0.17.3-x86_64-linux-gnu.tar.gz
fa2766a73cfcea477e18d89c27067af690f5dd7d4feae19862b1f5740d8a920d  src/qtum-0.17.3.tar.gz
46ea6db347800c97c8ac8bc7cc0e5a0ec038912ed6a9674ff5cb64a2d4f5f1d2  qtum-linux-0.17-res.yml

e645cd8ba9983ecbb1570b837fbb3e6f0593ad7a2a2e8bd154d514bdfb8d3d45  qtum-0.17.3-win-unsigned.tar.gz
21c772338132b525f6be48308c5728bb094af11522f1dce57e29e798998a7a83  qtum-0.17.3-win32-debug.zip
c04aec6a7eaf1f95d4e90598131446c7807d799359e5d2a9fb65c15799bf3c52  qtum-0.17.3-win32-setup-unsigned.exe
980f3d2b1c3134f8e06fea2cc36bd40de4c628cda1b790e5c8fc4433ae2b971f  qtum-0.17.3-win32.zip
40e895cb529b53f97969855f0eac189029ccaebda1bc0da4f745feff1aeb2e50  qtum-0.17.3-win64-debug.zip
4cf740ead4845c8fc2cd19fd745ea0b59e7a44f650c999f55a7d62586c620430  qtum-0.17.3-win64-setup-unsigned.exe
abb88db062978f51714129a073d9c97e78eb111c665cb55806a454b701d7e588  qtum-0.17.3-win64.zip
fa2766a73cfcea477e18d89c27067af690f5dd7d4feae19862b1f5740d8a920d  src/qtum-0.17.3.tar.gz
5d44f5e0a0dc91daf7a54f6e1687c3b74a261d90333eb9459a64d54bfff8b03e  qtum-win-0.17-res.yml

cbb8fc885ad327b13e71e4a4357884d1723e0a212557cdd85798d5f74334e01c  qtum-0.17.3-osx-unsigned.dmg
e5e1711d48366ae198e06a3d493c6e99825777262a21ddcccb30ab14b4d1ac3c  qtum-0.17.3-osx-unsigned.tar.gz
f7ab57be3ba95b39e055ae3924c78f16ee2a84998c0164080b87241a14a038f2  qtum-0.17.3-osx64.tar.gz
fa2766a73cfcea477e18d89c27067af690f5dd7d4feae19862b1f5740d8a920d  src/qtum-0.17.3.tar.gz
c12119d4f169cb4e13bdee4d7611e77d09cf7be3261f81a36cc4721f336d48e2  qtum-osx-0.17-res.yml


```",83774906
902,False,False,2019-02-21T22:32:05Z,2019-02-22T01:37:53Z,"About Qtum and Mainnet Ignition
-------------------------------

Qtum is a decentralized blockchain project built on Bitcoin's UTXO model, with support for Ethereum Virtual Machine based smart contracts, and secured by a proof of stake consensus model. It achieves this through the revolutionary Account Abstraction Layer which allows the EVM to communicate with Qtum's Bitcoin-like UTXO blockchain. For more general information about Qtum as well as links to join our community, go to https://qtum.org

Welcome to the Qtum Ignition Main Network. This is the main network where the tokens hold value and should be guarded very carefully. There will be a testnet setup soon for developers, in the meantime you can use `-regtest` mode for testing needs. We will announce details about the token swap from QTUM ERC20 coins to QTUM mainnet tokens soon, watch our [website](https://qtum.org) for details about that.  

The major features implemented in Qtum Ignition include:

1. The Ethereum Virtual Machine, which allows for compatibility with most existing Solidity based smart contracts.
2. The Smart Staking Protocol is complete, which is an optimized Proof of Stake implementation designed for a smart contract platform (however, smart contracts can not participate in staking yet).
3. An improved smart contract GUI has been implemented that can be used for creating contracts, sending data and Qtum to them, and checking their status by executing them locally, The GUI also offers easy QRC20 tokens management. 
4. Regtest mode, which is ideal for developers who wish to create their own private blockchain. It is tuned specifically to make development easier. It will stake blocks automatically every 30 seconds, and can generate proof-of-work blocks instantly as needed.
5. The Decentralized Governance Protocol is completely implemented and functional, which allows certain network parameters to be modified without a fork.

For more technical information for how to start developing with Qtum please read the [Guide](https://github.com/qtumproject/qtum/blob/master/doc/sparknet-guide.md) and also see this tutorial for deploying a simple [faucet smart contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet) (it hasn't yet been updated for Mainnet for obvious reasons, but all the instructions are the same and you can try them in regtest mode)

Note: Qtum Core is considered beta software. We make no warranties or guarantees of its security or stability.

Update History
--------------
* v0.17.2 - Recommended update - Bug fixes
	* Update ZMQ version to 4.3.1 ([CVE-2019-6250](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-6250))
	* Change the behavior of the EVM's event emitter to match ethereum's behavior in some cases.
	* Fix a bug where the staking icon would not show accurate information.
	* Fix a bug where compilation would fail if the system has secp256k1 library already installed.
	* Fix a minor typo in Qt wallet.
* v0.17.1 - Upgrade Qtum core to bitcoin core 0.17.1 plus other improvements and bug fixes
	* Upgrade Qtum core to bitcoin core 0.17.1 including partially signed transactions support, external wallet files and more. Check bitcoin [0.17.0](https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.17.0.md) and [0.17.1](https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.17.1.md) release notes for more details.	
	* Fix a bug which allowed using P2SH addresses as transaction sender in RPC interface, which caused that transaction to be rejected.
	* Fix an issue which prevented the correct logs to be printed when a state divergence was detected.
	* Prioritize create contract transactions over send to contract ones when staking.
	* Fix a bug which allowed node's time manipulation in some cases.
	* Fix a bug which prevented some EVM globals to be returned correctly when using `callcontract` RPC call.
	* Fix a bug which caused fee estimation to be excessively high in some cases.
	* Fix Solidity compiler link in the GUI wallet.
	* Make `getaccountinfo` RPC call help message clearer.
	* Improve the way encrypted wallet related RPC calls help messages were displayed.
	* Fix a bug that caused build description to be inaccurate.
* v0.16.2 - Recommended update - Improved network security and bug fixes
	* Implement network spam protection
	* Only request blocks from peers when their chainwork is strictly greater than the current tip
	* Add extra header checks for PoS timestamp, block indexes, signature type (LowS), synchronized and rolling checkpoints.
	* Add recent checkpoints
	* Update nMinimumChainWork, defaultAssumeValid and chainTxData
	* Update BLOCK\_CHAIN\_SIZE
	* Fix failing Qt tests in `make check` on OSX Mojave
	* Fix getblocktemplate rpc call for PoS blocks
	* Fix help messages for walletpassphrase and getnetworkhashps rpc calls
* v0.16.1 - Mandatory Update - Critical bug fix
	* Fix an upstream bitcoin critical bug, more info: [CVE-2018-17144](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-17144)
* v0.16.0 - Upgrade Qtum core to bitcoin core 0.16 and bug fixes
	* Upgrade Qtum core to bitcoin core 0.16 including segwit wallet, bech32 addresses, HD-wallets by default and [more](https://bitcoin.org/en/release/v0.16.0#notable-changes)
	* Fix a bug where contract transactions with no change would fail in some cases
	* Fix a display bug where multiple logs would not show corretly in Qt wallet
	* Update gitian build scripts to support ubuntu bionic as building host
* v0.15.3 - Recommended update - Bug fix
	* Fix a bug with `searchlogs` and `waitforlogs` rpc calls that caused duplicacte logs to show in some cases
	* Add support for building with boost 1.67 
* v0.15.2 - Recommended update - Improved seeding and bug fixes
	* Fix a staker halving subsidy calculation bug
	* Fix some translations errors and typos
	* Add Support for openssl 1.1
	* Fix CVE-2018-12356 by hardening the regex
	* Fix a python tests bug that caused bulk running of tests to fail
	* Add static seeds
	* Add new dns seed nodes
	* Update copyright year
* v0.15.1 - Upgrade Qtum core to bitcoin core 0.15.1 and bug fixes
    * Upgrade Qtum core code to bitcoin core 0.15.1 with important performance improvments and other features, read more about bitcoin core [0.15.0](https://bitcoin.org/en/release/v0.15.0) and [0.15.1](https://bitcoin.org/en/release/v0.15.1)
    * Fix a bug with reindexing when the data directory is empty
    * Prevent sending QRC20 tokens to P2SH Qtum addresses in the Qt wallet
    * Restore JS number as string support for `callcontract` and `sendtocontract` rpc calls
    * Fix a bug where the wrong block hash would be stored in the transaction receipt for miners with `-logevents` enabled
* v0.14.16 - Improvments and Bug fixes
    * Fixed a bug where transactions with low fees would get stuck in the local mempool.
    * Fix a bug with clearing cache of StorageResults
    * Add contract support to ""createrawtransaction"" rpc call
    * Add sender support to ""sendtoaddress"" rpc call
* v0.14.15 - Recommended Update
    * Add EVM global variables to callcontract
    * Update gitian build script
    * Update CentOS build instructions
    * Add exception data to TransactionReceipt
    * Fixed a bug where the gas price could not be parsed correctly on certain platforms (reported by APIS)
    * Fixed a bug where the logs were not reverted on disconnect block in certain cases
* v0.14.14 - Mandatory Update
    * New Qt GUI
    * Fix Qt wallet freeze when syncing from scratch with `-logevents` or `-reindex`
    * Fix a bug with cacheUTXO (hardfork at block 100000 in mainnet, 84500 in testnet)
    * Add update checking functionality to Qt wallet
    * Fix a bug in token transfers history dates
    * Fix a bug with searchlogs rpc call
    * Add an extra check when adding token addresses
    * Fix compatibility with boost 1.66 
    * Add checkpoints
    * Update nMinimumChainWork and defaultAssumeValid chain params
    * Add minmempoolgaslimit startup argument
    * Add Gitian build signatures
* v0.14.13 - Mandatory Update
    * Fix a callcontract bug which in very specific cases could cause the node to fail to sync the blockchain
    * Add ability to save and restore contract addresses and ABI data
    * Make the token confirmation view data correct
* v0.14.12 - Recommended Update
    * Added option to disable change address usage
    * Fixed bug where heavy RPC usage could cause the wallet to crash
* v0.14.11 - Optional Update
    * Changed our versioning scheme to be consistent and avoid the two version number confusion
    * Add feature to restore wallet in the Qt wallet
    * Add new RPC call ""waitforlogs"" that is particularly useful for Dapp developers
    * Add long-polling support to the gettransaction RPC call
* v1.1.4 - Recommended update
    * Fixed a bug that would cause syncing to stop
    * Fixed a bug that would cause the wallet to crash when using -logevents
* v1.1.3 - Highly recommended update
    * Fixed a bug that caused contact addresses to show in receive token address dropdown
* v1.1.2 - Optional update, but recommended if using QRC tokens
    * Fixed a bug with token transactions where the transaction ID displayed was incorrect in the Qt wallet
    * Allow adding 0 balance addresses as the token receiver in the Qt wallet
* v1.1.1: When sending to contracts, the sender address is now the default change address to reduce confusion; fix -salvagewallet so it works with token transactions
* v1.1.0: Add GUI support Qtum QRC tokens, allowing full management of tokens on the Qtum blockchain from the Qt wallet
    * Sending to a contract no longer requires ABI data, allowing easy participation in simple crowdsale contracts
* v1.0.4: Fix bug where certain circumstances when staking could cause the displayed balance to be inaccurate until completely redownloading the blockchain.
* v1.0.3: Fix staker bug that reported false messages; slightly increases staking performance; optimize staker parameters; fix white send button in GUI
* v1.0.2: Various UI fixes, minor gas overflow consensus fix, per-txout exploit fix, testnet mode setup and functioning
* v1.0.1: Fixed network magic bytes and minimum version to ensure the main network does not conflict with the Skynet network
* v1.0: Initial release

Reindex Required When Upgrading from v1.0.1
----------------------------------------------

When you first start the Qtum 1.0.2 GUI wallet after using Qtum v1.0.1 it will prompt you that it must reindex the database. This is normal and is a result of switching our internal database format from per-transaction to per-txout. If you use `qtumd -daemon` it will silently fail to start. You need to use `qtumd -daemon -reindex` in this case. 

Qtum Documentation and Usage Resources
---------------

Basic usage resources:

* [Official Qtum Usage Guide](https://github.com/qtumproject/qtum/wiki/Qtum-Wallet-Tutorial)
* [Unofficial Qtum staking tutorial](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtum-qt)
* [Unofficial Qtum staking tutorial on Raspberry Pi](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtumd-on-a-raspberry-pi-3)
* [Unofficial guide for keeping your wallet safe](https://steemit.com/qtum/@cryptominder/encrypting-backing-up-and-restoring-your-qtum-wallet)
* [Block explorer](https://explorer.qtum.org)
* [Unofficial block explorer](https://qtumexplorer.io/)
* [Unofficial Raspberry Pi Web UI](https://github.com/rpiwalletui/qtum-ui)

Development resources:

* [Deploying a custom token to Qtum](https://blog.qtum.org/qtum-custom-token-walkthrough-467d725fa27d)
* [Early example faucet contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet)
* [Unofficial Qtum Hello World tutorial](https://steemit.com/qtum/@cryptominder/quantum-qtum-blockchain-developer-tutorial-hello-world)

General Info about Qtum:

* [Mainnet event AMA](https://www.reddit.com/r/Qtum/comments/6zs8t0/official_qtum_ama_thread_starts_at_10pm_beijing/)
* [Qtum's PoS vs CASPER](https://www.reddit.com/r/Qtum/comments/788oa5/qtums_pos_vs_casper_and_the_nothingatstake_problem/)
* [Technical article explaining Qtum's PoS model in depth](http://earlz.net/view/2017/07/27/1904/the-missing-explanation-of-proof-of-stake-version)
* [Unofficial What is Qtum article](https://storeofvalue.github.io/posts/what-is-qtum-without-the-bullshit/)

#### Build Qtum Core

If you want to build it from source, it's recommended to follow the specific [""build"" documentation](https://github.com/qtumproject/qtum/tree/testnet-2/doc) for your platform. But mostly it boils down to the following:

1. Clone the qtum source code and cd into `qtum`

        git clone --recursive https://github.com/qtumproject/qtum.git
        cd qtum


2.  Build qtum-core:

    Configure and build the headless qtum binaries as well as the GUI (if Qt is found).

    You can disable the GUI build by passing `--without-gui` to configure.

        ./autogen.sh
        ./configure
        make

3.  It is recommended to build and run the unit tests to ensure everything is working correctly:

        make check


If you encounter an error like:

> make[2]: *** No rule to make target ‘cpp-ethereum/utils/libscrypt/b64.c’, needed by ‘cpp-ethereum/utils/libscrypt/libbitcoinconsensus_la-b64.lo’.  Stop.

Then you did not checkout the cpp-ethereum submodule for Qtum. To do that, simply:

    cd qtum
    git submodule update --init --recursive

Validate and Reproduce Binaries
---------------------------------

Qtum uses a tool called Gitian to make reproducible builds that can be verified by anyone. Instructions on setting up a Gitian VM and building Qtum are provided [in doc/gitian-building.md](https://github.com/qtumproject/qtum/blob/master/doc/gitian-building.md)

Community Resources
---------

Make sure to check out these resources as well for more information and to keep up to date with all the latest news about Qtum. At least 1 developer is always around, so if you're developing on Qtum and need help, we'd love to welcome you to our community.  

* [/r/Qtum on Reddit](https://www.reddit.com/r/Qtum/)
* [Qtum Telegram Group](https://t.me/joinchat/D5oBaw29NeOdpw6qqqf2lw)
* [@QtumOfficial on Twitter](https://mobile.twitter.com/qtumofficial)
* [Qtum on Facebook](https://www.facebook.com/QtumOfficial/)
* [Qtum Forum](https://forum.qtum.org/)
* [Qtum.org](https://qtum.org/en/)


Qtum Smart Contract Limitations
-----------

* EVM smart contracts can not receive coins from or send coins to any address type other than pay-to-pubkeyhash (starts with Q) addresses. This is due to a limitation in the EVM
* Contracts are not allowed to create contracts with an initial endowment of coins. The contract must first be created, and then be sent coins in a separate transaction. Humans are also not allowed to create contracts with an initial endowment of coins.
* Although all of the infrastructure is present, Qtum Core does not currently parse Solidity event data. You must parse this yourself using either `searchlogs` or `-record-log-opcodes` features.
* It is not possible to send a contract coins without also executing the contract. This is also the case of Ethereum. This was promised in earlier discussions and technically does work, but due to lack of time for testing this feature was disabled. We hope to reenable this feature with release of the x86 virtual machine in 2018.
* In Qtum there can be multiple addresses used to create a proof-of-stake block. However, the EVM can only see the first output using the `coinbase` operation in Solidity (this address is also the one registered for the continuous staker rewards after 500 blocks). 

Hash Validation
----------------

```

If you would like to validate that the binaries you download are exactly the same as those provided and built by the Qtum team, then you can compare your binaries to the following sha256sum hashes:

1f7973cb80ec5f065fc4cdeef0c2f164e1c48d12f519fa9f018dd668d08384e7  qtum-0.17.2-aarch64-linux-gnu-debug.tar.gz
1faecfcc70e1d730d444d1547dffa25326effecf14aa0305eca0e1ff988671dc  qtum-0.17.2-aarch64-linux-gnu.tar.gz
49280f1bf3e36c93b0b9d95eb3c39f1f17aaba49078a73587430fcc7f8baceb3  qtum-0.17.2-arm-linux-gnueabihf-debug.tar.gz
fefb601068a08cd15f7dce10f4eb4bcf7b84c1c964d2f66398151a3805cc0749  qtum-0.17.2-arm-linux-gnueabihf.tar.gz
968905717443e87c62dbcf12473ef70c0d6db92b5610394f839815aa95a913d0  qtum-0.17.2-i686-pc-linux-gnu-debug.tar.gz
0ea1a2790d1dc6bad71ebf25884f9ba0036ece6bbbfe4072c75db1f4c9793aa2  qtum-0.17.2-i686-pc-linux-gnu.tar.gz
2ae68455a7bf18f8667d741cd349bcae7609a65bd40bbbbb597dba9fa73c0fb7  qtum-0.17.2-x86_64-linux-gnu-debug.tar.gz
f51926bf704c541e3ead5e5a14da6a4807cb7b761c23830aa37f044824e4fb33  qtum-0.17.2-x86_64-linux-gnu.tar.gz
5fced0980d22d30a3a117ace75aec82581d90b56c12cea010e8fd25b29028290  src/qtum-0.17.2.tar.gz
dd31d1a338ce6fd8a312e8db0f4e4df7c24614decf51b64141c84b50018b62d5  qtum-linux-0.17-res.yml

ccef1d157682caf4794a4e552338f4cf7502ac1f380f261ba64213e8f2090b6a  qtum-0.17.2-win-unsigned.tar.gz
b82b329feac7324a27cbbfd408c2d3677e9ed73fb32ac9c44d37e0deae084f1f  qtum-0.17.2-win32-debug.zip
81aab1406d30da541c11f59126b4c5f992b3602377002e22cd6433ec71cc5dba  qtum-0.17.2-win32-setup-unsigned.exe
0fe927cf1d661509adeb5655203627e4df637673a9ef9af8df738cf3e57e9435  qtum-0.17.2-win32.zip
dbf671b05d4f9f69eaa5ca4b76eb3517248093db0a1b74165426979f339ed4c8  qtum-0.17.2-win64-debug.zip
089ee282420092148c4912d1650c93d8b4e775827f1417f306fc16192f6d1e0b  qtum-0.17.2-win64-setup-unsigned.exe
7af479f138738364a6da191be01df84eacd1c395c43ec407b5972fecbcbd0636  qtum-0.17.2-win64.zip
5fced0980d22d30a3a117ace75aec82581d90b56c12cea010e8fd25b29028290  src/qtum-0.17.2.tar.gz
2af7c87aa40073277f0ab005a2a0a051aa5b92188068d88ac548266716df2780  qtum-win-0.17-res.yml

90c1f2e5c2f66c2b101826c4ce4dd02ad52bf5510b61aa97e4df7bc366b6133c  qtum-0.17.2-osx-unsigned.dmg
c3a1b51af70b3f0c10ca69f6541329742d6c3160624bd6708046e08c62ae9515  qtum-0.17.2-osx-unsigned.tar.gz
3ccf5c86790e3839b6f5026d5cbeebed98b93f4efc3dbd3866a5d45efb1cba02  qtum-0.17.2-osx64.tar.gz
5fced0980d22d30a3a117ace75aec82581d90b56c12cea010e8fd25b29028290  src/qtum-0.17.2.tar.gz
7ae172ad8da4cf9aacc8beed0bb2132540e64921c71ac1beacd8e5e2c376b65e  qtum-osx-0.17-res.yml


```",83774906
903,False,False,2019-01-29T17:23:04Z,2019-01-29T18:43:02Z,"About Qtum and Mainnet Ignition
-------------------------------

Qtum is a decentralized blockchain project built on Bitcoin's UTXO model, with support for Ethereum Virtual Machine based smart contracts, and secured by a proof of stake consensus model. It achieves this through the revolutionary Account Abstraction Layer which allows the EVM to communicate with Qtum's Bitcoin-like UTXO blockchain. For more general information about Qtum as well as links to join our community, go to https://qtum.org

Welcome to the Qtum Ignition Main Network. This is the main network where the tokens hold value and should be guarded very carefully. There will be a testnet setup soon for developers, in the meantime you can use `-regtest` mode for testing needs. We will announce details about the token swap from QTUM ERC20 coins to QTUM mainnet tokens soon, watch our [website](https://qtum.org) for details about that.  

The major features implemented in Qtum Ignition include:

1. The Ethereum Virtual Machine, which allows for compatibility with most existing Solidity based smart contracts.
2. The Smart Staking Protocol is complete, which is an optimized Proof of Stake implementation designed for a smart contract platform (however, smart contracts can not participate in staking yet).
3. An improved smart contract GUI has been implemented that can be used for creating contracts, sending data and Qtum to them, and checking their status by executing them locally, The GUI also offers easy QRC20 tokens management. 
4. Regtest mode, which is ideal for developers who wish to create their own private blockchain. It is tuned specifically to make development easier. It will stake blocks automatically every 30 seconds, and can generate proof-of-work blocks instantly as needed.
5. The Decentralized Governance Protocol is completely implemented and functional, which allows certain network parameters to be modified without a fork.

For more technical information for how to start developing with Qtum please read the [Guide](https://github.com/qtumproject/qtum/blob/master/doc/sparknet-guide.md) and also see this tutorial for deploying a simple [faucet smart contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet) (it hasn't yet been updated for Mainnet for obvious reasons, but all the instructions are the same and you can try them in regtest mode)

Note: Qtum Core is considered beta software. We make no warranties or guarantees of its security or stability.

Update History
--------------
* v0.17.1 - Upgrade Qtum core to bitcoin core 0.17.1 plus other improvements and bug fixes
	* Upgrade Qtum core to bitcoin core 0.17.1 including partially signed transactions support, external wallet files and more. Check bitcoin [0.17.0](https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.17.0.md) and [0.17.1](https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.17.1.md) release notes for more details.	
	* Fix a bug which allowed using P2SH addresses as transaction sender in RPC interface, which caused that transaction to be rejected.
	* Fix an issue which prevented the correct logs to be printed when a state divergence was detected.
	* Prioritize create contract transactions over send to contract ones when staking.
	* Fix a bug which allowed node's time manipulation in some cases.
	* Fix a bug which prevented some EVM globals to be returned correctly when using `callcontract` RPC call.
	* Fix a bug which caused fee estimation to be excessively high in some cases.
	* Fix Solidity compiler link in the GUI wallet.
	* Make `getaccountinfo` RPC call help message clearer.
	* Improve the way encrypted wallet related RPC calls help messages were displayed.
	* Fix a bug that caused build description to be inaccurate.
* v0.16.2 - Recommended update - Improved network security and bug fixes
	* Implement network spam protection
	* Only request blocks from peers when their chainwork is strictly greater than the current tip
	* Add extra header checks for PoS timestamp, block indexes, signature type (LowS), synchronized and rolling checkpoints.
	* Add recent checkpoints
	* Update nMinimumChainWork, defaultAssumeValid and chainTxData
	* Update BLOCK\_CHAIN\_SIZE
	* Fix failing Qt tests in `make check` on OSX Mojave
	* Fix getblocktemplate rpc call for PoS blocks
	* Fix help messages for walletpassphrase and getnetworkhashps rpc calls
* v0.16.1 - Mandatory Update - Critical bug fix
	* Fix an upstream bitcoin critical bug, more info: [CVE-2018-17144](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-17144)
* v0.16.0 - Upgrade Qtum core to bitcoin core 0.16 and bug fixes
	* Upgrade Qtum core to bitcoin core 0.16 including segwit wallet, bech32 addresses, HD-wallets by default and [more](https://bitcoin.org/en/release/v0.16.0#notable-changes)
	* Fix a bug where contract transactions with no change would fail in some cases
	* Fix a display bug where multiple logs would not show corretly in Qt wallet
	* Update gitian build scripts to support ubuntu bionic as building host
* v0.15.3 - Recommended update - Bug fix
	* Fix a bug with `searchlogs` and `waitforlogs` rpc calls that caused duplicacte logs to show in some cases
	* Add support for building with boost 1.67 
* v0.15.2 - Recommended update - Improved seeding and bug fixes
	* Fix a staker halving subsidy calculation bug
	* Fix some translations errors and typos
	* Add Support for openssl 1.1
	* Fix CVE-2018-12356 by hardening the regex
	* Fix a python tests bug that caused bulk running of tests to fail
	* Add static seeds
	* Add new dns seed nodes
	* Update copyright year
* v0.15.1 - Upgrade Qtum core to bitcoin core 0.15.1 and bug fixes
    * Upgrade Qtum core code to bitcoin core 0.15.1 with important performance improvments and other features, read more about bitcoin core [0.15.0](https://bitcoin.org/en/release/v0.15.0) and [0.15.1](https://bitcoin.org/en/release/v0.15.1)
    * Fix a bug with reindexing when the data directory is empty
    * Prevent sending QRC20 tokens to P2SH Qtum addresses in the Qt wallet
    * Restore JS number as string support for `callcontract` and `sendtocontract` rpc calls
    * Fix a bug where the wrong block hash would be stored in the transaction receipt for miners with `-logevents` enabled
* v0.14.16 - Improvments and Bug fixes
    * Fixed a bug where transactions with low fees would get stuck in the local mempool.
    * Fix a bug with clearing cache of StorageResults
    * Add contract support to ""createrawtransaction"" rpc call
    * Add sender support to ""sendtoaddress"" rpc call
* v0.14.15 - Recommended Update
    * Add EVM global variables to callcontract
    * Update gitian build script
    * Update CentOS build instructions
    * Add exception data to TransactionReceipt
    * Fixed a bug where the gas price could not be parsed correctly on certain platforms (reported by APIS)
    * Fixed a bug where the logs were not reverted on disconnect block in certain cases
* v0.14.14 - Mandatory Update
    * New Qt GUI
    * Fix Qt wallet freeze when syncing from scratch with `-logevents` or `-reindex`
    * Fix a bug with cacheUTXO (hardfork at block 100000 in mainnet, 84500 in testnet)
    * Add update checking functionality to Qt wallet
    * Fix a bug in token transfers history dates
    * Fix a bug with searchlogs rpc call
    * Add an extra check when adding token addresses
    * Fix compatibility with boost 1.66 
    * Add checkpoints
    * Update nMinimumChainWork and defaultAssumeValid chain params
    * Add minmempoolgaslimit startup argument
    * Add Gitian build signatures
* v0.14.13 - Mandatory Update
    * Fix a callcontract bug which in very specific cases could cause the node to fail to sync the blockchain
    * Add ability to save and restore contract addresses and ABI data
    * Make the token confirmation view data correct
* v0.14.12 - Recommended Update
    * Added option to disable change address usage
    * Fixed bug where heavy RPC usage could cause the wallet to crash
* v0.14.11 - Optional Update
    * Changed our versioning scheme to be consistent and avoid the two version number confusion
    * Add feature to restore wallet in the Qt wallet
    * Add new RPC call ""waitforlogs"" that is particularly useful for Dapp developers
    * Add long-polling support to the gettransaction RPC call
* v1.1.4 - Recommended update
    * Fixed a bug that would cause syncing to stop
    * Fixed a bug that would cause the wallet to crash when using -logevents
* v1.1.3 - Highly recommended update
    * Fixed a bug that caused contact addresses to show in receive token address dropdown
* v1.1.2 - Optional update, but recommended if using QRC tokens
    * Fixed a bug with token transactions where the transaction ID displayed was incorrect in the Qt wallet
    * Allow adding 0 balance addresses as the token receiver in the Qt wallet
* v1.1.1: When sending to contracts, the sender address is now the default change address to reduce confusion; fix -salvagewallet so it works with token transactions
* v1.1.0: Add GUI support Qtum QRC tokens, allowing full management of tokens on the Qtum blockchain from the Qt wallet
    * Sending to a contract no longer requires ABI data, allowing easy participation in simple crowdsale contracts
* v1.0.4: Fix bug where certain circumstances when staking could cause the displayed balance to be inaccurate until completely redownloading the blockchain.
* v1.0.3: Fix staker bug that reported false messages; slightly increases staking performance; optimize staker parameters; fix white send button in GUI
* v1.0.2: Various UI fixes, minor gas overflow consensus fix, per-txout exploit fix, testnet mode setup and functioning
* v1.0.1: Fixed network magic bytes and minimum version to ensure the main network does not conflict with the Skynet network
* v1.0: Initial release

Reindex Required When Upgrading from v1.0.1
----------------------------------------------

When you first start the Qtum 1.0.2 GUI wallet after using Qtum v1.0.1 it will prompt you that it must reindex the database. This is normal and is a result of switching our internal database format from per-transaction to per-txout. If you use `qtumd -daemon` it will silently fail to start. You need to use `qtumd -daemon -reindex` in this case. 

Qtum Documentation and Usage Resources
---------------

Basic usage resources:

* [Official Qtum Usage Guide](https://github.com/qtumproject/qtum/wiki/Qtum-Wallet-Tutorial)
* [Unofficial Qtum staking tutorial](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtum-qt)
* [Unofficial Qtum staking tutorial on Raspberry Pi](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtumd-on-a-raspberry-pi-3)
* [Unofficial guide for keeping your wallet safe](https://steemit.com/qtum/@cryptominder/encrypting-backing-up-and-restoring-your-qtum-wallet)
* [Block explorer](https://explorer.qtum.org)
* [Unofficial block explorer](https://qtumexplorer.io/)
* [Unofficial Raspberry Pi Web UI](https://github.com/rpiwalletui/qtum-ui)

Development resources:

* [Deploying a custom token to Qtum](https://blog.qtum.org/qtum-custom-token-walkthrough-467d725fa27d)
* [Early example faucet contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet)
* [Unofficial Qtum Hello World tutorial](https://steemit.com/qtum/@cryptominder/quantum-qtum-blockchain-developer-tutorial-hello-world)

General Info about Qtum:

* [Mainnet event AMA](https://www.reddit.com/r/Qtum/comments/6zs8t0/official_qtum_ama_thread_starts_at_10pm_beijing/)
* [Qtum's PoS vs CASPER](https://www.reddit.com/r/Qtum/comments/788oa5/qtums_pos_vs_casper_and_the_nothingatstake_problem/)
* [Technical article explaining Qtum's PoS model in depth](http://earlz.net/view/2017/07/27/1904/the-missing-explanation-of-proof-of-stake-version)
* [Unofficial What is Qtum article](https://storeofvalue.github.io/posts/what-is-qtum-without-the-bullshit/)

#### Build Qtum Core

If you want to build it from source, it's recommended to follow the specific [""build"" documentation](https://github.com/qtumproject/qtum/tree/testnet-2/doc) for your platform. But mostly it boils down to the following:

1. Clone the qtum source code and cd into `qtum`

        git clone --recursive https://github.com/qtumproject/qtum.git
        cd qtum


2.  Build qtum-core:

    Configure and build the headless qtum binaries as well as the GUI (if Qt is found).

    You can disable the GUI build by passing `--without-gui` to configure.

        ./autogen.sh
        ./configure
        make

3.  It is recommended to build and run the unit tests to ensure everything is working correctly:

        make check


If you encounter an error like:

> make[2]: *** No rule to make target ‘cpp-ethereum/utils/libscrypt/b64.c’, needed by ‘cpp-ethereum/utils/libscrypt/libbitcoinconsensus_la-b64.lo’.  Stop.

Then you did not checkout the cpp-ethereum submodule for Qtum. To do that, simply:

    cd qtum
    git submodule update --init --recursive

Validate and Reproduce Binaries
---------------------------------

Qtum uses a tool called Gitian to make reproducible builds that can be verified by anyone. Instructions on setting up a Gitian VM and building Qtum are provided [in doc/gitian-building.md](https://github.com/qtumproject/qtum/blob/master/doc/gitian-building.md)

Community Resources
---------

Make sure to check out these resources as well for more information and to keep up to date with all the latest news about Qtum. At least 1 developer is always around, so if you're developing on Qtum and need help, we'd love to welcome you to our community.  

* [/r/Qtum on Reddit](https://www.reddit.com/r/Qtum/)
* [Qtum Telegram Group](https://t.me/joinchat/D5oBaw29NeOdpw6qqqf2lw)
* [@QtumOfficial on Twitter](https://mobile.twitter.com/qtumofficial)
* [Qtum on Facebook](https://www.facebook.com/QtumOfficial/)
* [Qtum Forum](https://forum.qtum.org/)
* [Qtum.org](https://qtum.org/en/)


Qtum Smart Contract Limitations
-----------

* EVM smart contracts can not receive coins from or send coins to any address type other than pay-to-pubkeyhash (starts with Q) addresses. This is due to a limitation in the EVM
* Contracts are not allowed to create contracts with an initial endowment of coins. The contract must first be created, and then be sent coins in a separate transaction. Humans are also not allowed to create contracts with an initial endowment of coins.
* Although all of the infrastructure is present, Qtum Core does not currently parse Solidity event data. You must parse this yourself using either `searchlogs` or `-record-log-opcodes` features.
* It is not possible to send a contract coins without also executing the contract. This is also the case of Ethereum. This was promised in earlier discussions and technically does work, but due to lack of time for testing this feature was disabled. We hope to reenable this feature with release of the x86 virtual machine in 2018.
* In Qtum there can be multiple addresses used to create a proof-of-stake block. However, the EVM can only see the first output using the `coinbase` operation in Solidity (this address is also the one registered for the continuous staker rewards after 500 blocks). 

Hash Validation
----------------

```

If you would like to validate that the binaries you download are exactly the same as those provided and built by the Qtum team, then you can compare your binaries to the following sha256sum hashes:

5db1f8e81a04316b8cb31ff9b6b29a8735d9b67029fcfc8fc05a7cbbeee5a48a  qtum-0.17.1-aarch64-linux-gnu-debug.tar.gz
982a7aa456719d071b1ccd247ecaa0666584cd30a92d3d4ffb62228727820ce7  qtum-0.17.1-aarch64-linux-gnu.tar.gz
d5fe585e05c3df986628e41d9d42e0a83613d19aa4ebe256342327ecd6085808  qtum-0.17.1-arm-linux-gnueabihf-debug.tar.gz
532dbefca6ad63279cc1c44295bbf2a197ef93beae02ce9720e645a7ae18a619  qtum-0.17.1-arm-linux-gnueabihf.tar.gz
2c1df2ddb11d7daa1179c47959e9e01d722397ad47cd45f3d6100a06555dbca5  qtum-0.17.1-i686-pc-linux-gnu-debug.tar.gz
b13a7156ac80ddbd3b4305cb218a0fc18078a836cba288c5c386587c5b3c3c94  qtum-0.17.1-i686-pc-linux-gnu.tar.gz
f76d22d8cb8846c9ea106fd6ac1e646b72d3b88294db5e2d196758f531cfc42a  qtum-0.17.1-x86_64-linux-gnu-debug.tar.gz
4e803902f5f0fa1d078d11a314c09f1490a55edb2d09b7f7418541ee9259c273  qtum-0.17.1-x86_64-linux-gnu.tar.gz
48aed97cb1698991fc7a5c1ceae77932c7874f55a7113abdaaac1ad5c16978a5  src/qtum-0.17.1.tar.gz
ad93ac40af12b405e7bcf424216b7912890a48a5f3caf9c4fe9e51c085c3a54c  qtum-linux-0.17-res.yml

79bb5b6f07663caa5555314683c22edbd27d2556dacf9a14d9e1bca83efffcf5  qtum-0.17.1-win-unsigned.tar.gz
53467a6003643bc53f5277000071aea9013edd7e64029aad9d1a11ac9fc38660  qtum-0.17.1-win32-debug.zip
6570639f44015f3c959c64e876b28bb4390c6fed5ce2b5695b037b1caed5c9df  qtum-0.17.1-win32-setup-unsigned.exe
7fb2979075491eee2c7c092caf81d670607a51d618b66b6a71521d2faa912129  qtum-0.17.1-win32.zip
65691fcbcde9f9aaa354ac10197ace471d05b927b478b984998379b04607c96c  qtum-0.17.1-win64-debug.zip
f53bdcee97a594db4f69dfb72ec9157d848a553f02e7fa92b191342a068d8cb7  qtum-0.17.1-win64-setup-unsigned.exe
a60449a1f486c4d6165e68e7c92315b830839874660122c801e37d487452806e  qtum-0.17.1-win64.zip
48aed97cb1698991fc7a5c1ceae77932c7874f55a7113abdaaac1ad5c16978a5  src/qtum-0.17.1.tar.gz
1cb84a794e0c086b785d04f5b78f63e03df0d8b80d2a3a8be3f7c0dbb3f2869b  qtum-win-0.17-res.yml

2881ee1df27a039a1be723ae431e29aaefe7e1d640cdf603b2238eb8724f131f  qtum-0.17.1-osx-unsigned.dmg
de3d225a129c2f5e66174fdcadcb6350d8507f1dfd77f70cd81163f5146f8e3d  qtum-0.17.1-osx-unsigned.tar.gz
4551c0f00518fcb73b4d2ed6bcdcbeb71bdea11ebff096e6db7d5b91671d32a4  qtum-0.17.1-osx64.tar.gz
48aed97cb1698991fc7a5c1ceae77932c7874f55a7113abdaaac1ad5c16978a5  src/qtum-0.17.1.tar.gz
9abd79ff00d86aabcabf7a972ac7beb0d66945c492144c57dee84a35ce723b09  qtum-osx-0.17-res.yml

```",83774906
904,False,False,2018-11-15T21:22:46Z,2018-11-15T23:30:42Z,"About Qtum and Mainnet Ignition
-------------------------------

Qtum is a decentralized blockchain project built on Bitcoin's UTXO model, with support for Ethereum Virtual Machine based smart contracts, and secured by a proof of stake consensus model. It achieves this through the revolutionary Account Abstraction Layer which allows the EVM to communicate with Qtum's Bitcoin-like UTXO blockchain. For more general information about Qtum as well as links to join our community, go to https://qtum.org

Welcome to the Qtum Ignition Main Network. This is the main network where the tokens hold value and should be guarded very carefully. There will be a testnet setup soon for developers, in the meantime you can use `-regtest` mode for testing needs. We will announce details about the token swap from QTUM ERC20 coins to QTUM mainnet tokens soon, watch our [website](https://qtum.org) for details about that.  

The major features implemented in Qtum Ignition include:

1. The Ethereum Virtual Machine, which allows for compatibility with most existing Solidity based smart contracts.
2. The Smart Staking Protocol is complete, which is an optimized Proof of Stake implementation designed for a smart contract platform (however, smart contracts can not participate in staking yet).
3. An early and basic smart contract GUI has been implemented that can be used for creating contracts, sending data and Qtum to them, and checking their status by executing them locally. This functionality is similar to Mist's UI right now, but it is still an early version. We will be working on this more to improve it. 
4. Regtest mode, which is ideal for developers who wish to create their own private blockchain. It is tuned specifically to make development easier. It will stake blocks automatically every 30 seconds, and can generate proof-of-work blocks instantly as needed.
5. The Decentralized Governance Protocol is completely implemented and functional, which allows certain network parameters to be modified without a fork.

For more technical information for how to start developing with Qtum please read the [Guide](https://github.com/qtumproject/qtum/blob/master/doc/sparknet-guide.md) and also see this tutorial for deploying a simple [faucet smart contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet) (it hasn't yet been updated for Mainnet for obvious reasons, but all the instructions are the same and you can try them in regtest mode)

Note: Qtum Core is considered beta software. We make no warranties or guarantees of its security or stability.

Update History
--------------
* v0.16.2 - Recommended update - Improved network security and bug fixes
	* Implement network spam protection
	* Only request blocks from peers when their chainwork is strictly greater than the current tip
	* Add extra header checks for PoS timestamp, block indexes, signature type (LowS), synchronized and rolling checkpoints.
	* Add recent checkpoints
	* Update nMinimumChainWork, defaultAssumeValid and chainTxData
	* Update BLOCK\_CHAIN\_SIZE
	* Fix failing Qt tests in `make check` on OSX Mojave
	* Fix getblocktemplate rpc call for PoS blocks
	* Fix help messages for walletpassphrase and getnetworkhashps rpc calls
* v0.16.1 - Mandatory Update - Critical bug fix
	* Fix an upstream bitcoin critical bug, more info: [CVE-2018-17144](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-17144)
* v0.16.0 - Upgrade Qtum core to bitcoin core 0.16 and bug fixes
	* Upgrade Qtum core to bitcoin core 0.16 including segwit wallet, bech32 addresses, HD-wallets by default and [more](https://bitcoin.org/en/release/v0.16.0#notable-changes)
	* Fix a bug where contract transactions with no change would fail in some cases
	* Fix a display bug where multiple logs would not show corretly in Qt wallet
	* Update gitian build scripts to support ubuntu bionic as building host
* v0.15.3 - Recommended update - Bug fix
	* Fix a bug with `searchlogs` and `waitforlogs` rpc calls that caused duplicacte logs to show in some cases
	* Add support for building with boost 1.67 
* v0.15.2 - Recommended update - Improved seeding and bug fixes
	* Fix a staker halving subsidy calculation bug
	* Fix some translations errors and typos
	* Add Support for openssl 1.1
	* Fix CVE-2018-12356 by hardening the regex
	* Fix a python tests bug that caused bulk running of tests to fail
	* Add static seeds
	* Add new dns seed nodes
	* Update copyright year
* v0.15.1 - Upgrade Qtum core to bitcoin core 0.15.1 and bug fixes
    * Upgrade Qtum core code to bitcoin core 0.15.1 with important performance improvments and other features, read more about bitcoin core [0.15.0](https://bitcoin.org/en/release/v0.15.0) and [0.15.1](https://bitcoin.org/en/release/v0.15.1)
    * Fix a bug with reindexing when the data directory is empty
    * Prevent sending QRC20 tokens to P2SH Qtum addresses in the Qt wallet
    * Restore JS number as string support for `callcontract` and `sendtocontract` rpc calls
    * Fix a bug where the wrong block hash would be stored in the transaction receipt for miners with `-logevents` enabled
* v0.14.16 - Improvments and Bug fixes
    * Fixed a bug where transactions with low fees would get stuck in the local mempool.
    * Fix a bug with clearing cache of StorageResults
    * Add contract support to ""createrawtransaction"" rpc call
    * Add sender support to ""sendtoaddress"" rpc call
* v0.14.15 - Recommended Update
    * Add EVM global variables to callcontract
    * Update gitian build script
    * Update CentOS build instructions
    * Add exception data to TransactionReceipt
    * Fixed a bug where the gas price could not be parsed correctly on certain platforms (reported by APIS)
    * Fixed a bug where the logs were not reverted on disconnect block in certain cases
* v0.14.14 - Mandatory Update
    * New Qt GUI
    * Fix Qt wallet freeze when syncing from scratch with `-logevents` or `-reindex`
    * Fix a bug with cacheUTXO (hardfork at block 100000 in mainnet, 84500 in testnet)
    * Add update checking functionality to Qt wallet
    * Fix a bug in token transfers history dates
    * Fix a bug with searchlogs rpc call
    * Add an extra check when adding token addresses
    * Fix compatibility with boost 1.66 
    * Add checkpoints
    * Update nMinimumChainWork and defaultAssumeValid chain params
    * Add minmempoolgaslimit startup argument
    * Add Gitian build signatures
* v0.14.13 - Mandatory Update
    * Fix a callcontract bug which in very specific cases could cause the node to fail to sync the blockchain
    * Add ability to save and restore contract addresses and ABI data
    * Make the token confirmation view data correct
* v0.14.12 - Recommended Update
    * Added option to disable change address usage
    * Fixed bug where heavy RPC usage could cause the wallet to crash
* v0.14.11 - Optional Update
    * Changed our versioning scheme to be consistent and avoid the two version number confusion
    * Add feature to restore wallet in the Qt wallet
    * Add new RPC call ""waitforlogs"" that is particularly useful for Dapp developers
    * Add long-polling support to the gettransaction RPC call
* v1.1.4 - Recommended update
    * Fixed a bug that would cause syncing to stop
    * Fixed a bug that would cause the wallet to crash when using -logevents
* v1.1.3 - Highly recommended update
    * Fixed a bug that caused contact addresses to show in receive token address dropdown
* v1.1.2 - Optional update, but recommended if using QRC tokens
    * Fixed a bug with token transactions where the transaction ID displayed was incorrect in the Qt wallet
    * Allow adding 0 balance addresses as the token receiver in the Qt wallet
* v1.1.1: When sending to contracts, the sender address is now the default change address to reduce confusion; fix -salvagewallet so it works with token transactions
* v1.1.0: Add GUI support Qtum QRC tokens, allowing full management of tokens on the Qtum blockchain from the Qt wallet
    * Sending to a contract no longer requires ABI data, allowing easy participation in simple crowdsale contracts
* v1.0.4: Fix bug where certain circumstances when staking could cause the displayed balance to be inaccurate until completely redownloading the blockchain.
* v1.0.3: Fix staker bug that reported false messages; slightly increases staking performance; optimize staker parameters; fix white send button in GUI
* v1.0.2: Various UI fixes, minor gas overflow consensus fix, per-txout exploit fix, testnet mode setup and functioning
* v1.0.1: Fixed network magic bytes and minimum version to ensure the main network does not conflict with the Skynet network
* v1.0: Initial release

Reindex Required When Upgrading from v1.0.1
----------------------------------------------

When you first start the Qtum 1.0.2 GUI wallet after using Qtum v1.0.1 it will prompt you that it must reindex the database. This is normal and is a result of switching our internal database format from per-transaction to per-txout. If you use `qtumd -daemon` it will silently fail to start. You need to use `qtumd -daemon -reindex` in this case. 

Qtum Documentation and Usage Resources
---------------

Basic usage resources:

* [Official Qtum Usage Guide](https://github.com/qtumproject/qtum/wiki/Qtum-Wallet-Tutorial)
* [Unofficial Qtum staking tutorial](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtum-qt)
* [Unofficial Qtum staking tutorial on Raspberry Pi](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtumd-on-a-raspberry-pi-3)
* [Unofficial guide for keeping your wallet safe](https://steemit.com/qtum/@cryptominder/encrypting-backing-up-and-restoring-your-qtum-wallet)
* [Block explorer](https://explorer.qtum.org)
* [Unofficial block explorer](https://qtumexplorer.io/)
* [Unofficial Raspberry Pi Web UI](https://github.com/rpiwalletui/qtum-ui)

Development resources:

* [Deploying a custom token to Qtum](https://blog.qtum.org/qtum-custom-token-walkthrough-467d725fa27d)
* [Early example faucet contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet)
* [Unofficial Qtum Hello World tutorial](https://steemit.com/qtum/@cryptominder/quantum-qtum-blockchain-developer-tutorial-hello-world)

General Info about Qtum:

* [Mainnet event AMA](https://www.reddit.com/r/Qtum/comments/6zs8t0/official_qtum_ama_thread_starts_at_10pm_beijing/)
* [Qtum's PoS vs CASPER](https://www.reddit.com/r/Qtum/comments/788oa5/qtums_pos_vs_casper_and_the_nothingatstake_problem/)
* [Technical article explaining Qtum's PoS model in depth](http://earlz.net/view/2017/07/27/1904/the-missing-explanation-of-proof-of-stake-version)
* [Unofficial What is Qtum article](https://storeofvalue.github.io/posts/what-is-qtum-without-the-bullshit/)

#### Build Qtum Core

If you want to build it from source, it's recommended to follow the specific [""build"" documentation](https://github.com/qtumproject/qtum/tree/testnet-2/doc) for your platform. But mostly it boils down to the following:

1. Clone the qtum source code and cd into `qtum`

        git clone --recursive https://github.com/qtumproject/qtum.git
        cd qtum


2.  Build qtum-core:

    Configure and build the headless qtum binaries as well as the GUI (if Qt is found).

    You can disable the GUI build by passing `--without-gui` to configure.

        ./autogen.sh
        ./configure
        make

3.  It is recommended to build and run the unit tests to ensure everything is working correctly:

        make check


If you encounter an error like:

> make[2]: *** No rule to make target ‘cpp-ethereum/utils/libscrypt/b64.c’, needed by ‘cpp-ethereum/utils/libscrypt/libbitcoinconsensus_la-b64.lo’.  Stop.

Then you did not checkout the cpp-ethereum submodule for Qtum. To do that, simply:

    cd qtum
    git submodule update --init --recursive

Validate and Reproduce Binaries
---------------------------------

Qtum uses a tool called Gitian to make reproducible builds that can be verified by anyone. Instructions on setting up a Gitian VM and building Qtum are provided [in doc/gitian-building.md](https://github.com/qtumproject/qtum/blob/master/doc/gitian-building.md)

Community Resources
---------

Make sure to check out these resources as well for more information and to keep up to date with all the latest news about Qtum. At least 1 developer is always around, so if you're developing on Qtum and need help, we'd love to welcome you to our community.  

* [/r/Qtum on Reddit](https://www.reddit.com/r/Qtum/)
* [Qtum Telegram Group](https://t.me/joinchat/D5oBaw29NeOdpw6qqqf2lw)
* [@QtumOfficial on Twitter](https://mobile.twitter.com/qtumofficial)
* [Qtum on Facebook](https://www.facebook.com/QtumOfficial/)
* [Qtum Forum](https://forum.qtum.org/)
* [Qtum.org](https://qtum.org/en/)


Qtum Smart Contract Limitations
-----------

* EVM smart contracts can not receive coins from or send coins to any address type other than pay-to-pubkeyhash (starts with Q) addresses. This is due to a limitation in the EVM
* Contracts are not allowed to create contracts with an initial endowment of coins. The contract must first be created, and then be sent coins in a separate transaction. Humans are also not allowed to create contracts with an initial endowment of coins.
* Although all of the infrastructure is present, Qtum Core does not currently parse Solidity event data. You must parse this yourself using either `searchlogs` or `-record-log-opcodes` features.
* It is not possible to send a contract coins without also executing the contract. This is also the case of Ethereum. This was promised in earlier discussions and technically does work, but due to lack of time for testing this feature was disabled. We hope to reenable this feature with release of the x86 virtual machine in 2018.
* In Qtum there can be multiple addresses used to create a proof-of-stake block. However, the EVM can only see the first output using the `coinbase` operation in Solidity (this address is also the one registered for the continuous staker rewards after 500 blocks). 

Hash Validation
----------------

```

If you would like to validate that the binaries you download are exactly the same as those provided and built by the Qtum team, then you can compare your binaries to the following sha256sum hashes:

ac8f37b350a3f1d27cacae1b561b85accef0162a4e5081d56decc036c3de9d17  qtum-0.16.2-aarch64-linux-gnu-debug.tar.gz
074b803872ffd19939dd12f0fcec8d80f1b2b76a1c94b80c55127ea60e7eccb1  qtum-0.16.2-aarch64-linux-gnu.tar.gz
2cd311db19a406923b3552a19697fed42978f0fa8ab6acfd7f42574c4d6873a2  qtum-0.16.2-arm-linux-gnueabihf-debug.tar.gz
4b3c9d130036556e88a4532ffd22bf2376eb32484873b11c4ccf8da62c30fe1a  qtum-0.16.2-arm-linux-gnueabihf.tar.gz
702a1475e4bf93f5bd96fb47e0d90c2629de84dec2a02465ba31744fcd7e8f7e  qtum-0.16.2-i686-pc-linux-gnu-debug.tar.gz
7b4caa1692359a7646e6c8e7608f51e494765d14ee21e0e6bcbcf825ec49cb26  qtum-0.16.2-i686-pc-linux-gnu.tar.gz
91c76af38e9bcb60112c9b824fa32e96c8494cb36f37561a2ec5f48a0bfda3e3  qtum-0.16.2-x86_64-linux-gnu-debug.tar.gz
7be07fb113ad483c7c43086057e92f3404f749325e2c1366959a35fcc68ea06f  qtum-0.16.2-x86_64-linux-gnu.tar.gz
217c26a443b9900caf44743bc26d5c0a5f556c056709b5cf896a6bdc3f5d6734  src/qtum-0.16.2.tar.gz
93c5ea3300d4ef9bc4756e85723e0f908ba4549ac57a81d22ff6f284a86d5c1c  qtum-linux-0.16-res.yml

bfbc3f8c31844e782034e75e2f66c28bc5a8f96f3cb1435c615bbfe36a7e83a5  qtum-0.16.2-win-unsigned.tar.gz
cde0e2a7548e618f704003b165d033849e2abf96a8880089091678231c2ac444  qtum-0.16.2-win32-debug.zip
d0fbe24b0b09feb109da7907f6ef356938d7c35da6d08ef2bf209c08e8aca98c  qtum-0.16.2-win32-setup-unsigned.exe
781c22ed648d9dbcc24a71c7e67598de52582f1f0cdeb7fc73e63bf7be94051c  qtum-0.16.2-win32.zip
cd4ba7c43f2b4e5a0beba1e87ec93fce38397afd977f4256ab08bf7a4a04b7ca  qtum-0.16.2-win64-debug.zip
bbe820c19d5567daef7215d9d7f8a8c14a17c92f8f8f705cf63673935ffb21f5  qtum-0.16.2-win64-setup-unsigned.exe
805bc93326b366073bf310f3cc729e3d302a9191d492144ad3aba58d837fc6fa  qtum-0.16.2-win64.zip
b4c6b0de4c8ccb4c56ebba59e8fb189608df414f836011888fc4809eef902b3a  src/qtum-0.16.2.tar.gz
757939b3f0a9339805c5ef0f4daefa7069267dc20e3447948ddf727ebb25c21f  qtum-win-0.16-res.yml

2748be76522fe4b14781ca21c5ae9c58fca95a3e0423f83e5c2f8f9b16b49330  qtum-0.16.2-osx-unsigned.dmg
eee7c2405eabbe741e38496bc0a58bfd41bd22975fca0b52543b697c96fea294  qtum-0.16.2-osx-unsigned.tar.gz
d762a4159967b0a44df80326986ae3a58af2ce37190ea41be2a1527cc951eaf4  qtum-0.16.2-osx64.tar.gz
b4c6b0de4c8ccb4c56ebba59e8fb189608df414f836011888fc4809eef902b3a  src/qtum-0.16.2.tar.gz
bcb2ec4badab2f5a0168c285090808a6f5d2d51f78a2adf4efe235eccbe10dea  qtum-osx-0.16-res.yml


```",83774906
905,False,False,2018-09-20T14:14:38Z,2018-09-20T16:08:53Z,"About Qtum and Mainnet Ignition
-------------------------------

Qtum is a decentralized blockchain project built on Bitcoin's UTXO model, with support for Ethereum Virtual Machine based smart contracts, and secured by a proof of stake consensus model. It achieves this through the revolutionary Account Abstraction Layer which allows the EVM to communicate with Qtum's Bitcoin-like UTXO blockchain. For more general information about Qtum as well as links to join our community, go to https://qtum.org

Welcome to the Qtum Ignition Main Network. This is the main network where the tokens hold value and should be guarded very carefully. There will be a testnet setup soon for developers, in the meantime you can use `-regtest` mode for testing needs. We will announce details about the token swap from QTUM ERC20 coins to QTUM mainnet tokens soon, watch our [website](https://qtum.org) for details about that.  

The major features implemented in Qtum Ignition include:

1. The Ethereum Virtual Machine, which allows for compatibility with most existing Solidity based smart contracts.
2. The Smart Staking Protocol is complete, which is an optimized Proof of Stake implementation designed for a smart contract platform (however, smart contracts can not participate in staking yet).
3. An early and basic smart contract GUI has been implemented that can be used for creating contracts, sending data and Qtum to them, and checking their status by executing them locally. This functionality is similar to Mist's UI right now, but it is still an early version. We will be working on this more to improve it. 
4. Regtest mode, which is ideal for developers who wish to create their own private blockchain. It is tuned specifically to make development easier. It will stake blocks automatically every 30 seconds, and can generate proof-of-work blocks instantly as needed.
5. The Decentralized Governance Protocol is completely implemented and functional, which allows certain network parameters to be modified without a fork.

For more technical information for how to start developing with Qtum please read the [Guide](https://github.com/qtumproject/qtum/blob/master/doc/sparknet-guide.md) and also see this tutorial for deploying a simple [faucet smart contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet) (it hasn't yet been updated for Mainnet for obvious reasons, but all the instructions are the same and you can try them in regtest mode)

Note: Qtum Core is considered beta software. We make no warranties or guarantees of its security or stability.

Update History
--------------
* v0.16.1 - Mandatory Update - Critical bug fix
	* Fix an upstream bitcoin critical bug, more info: [CVE-2018-17144](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-17144)
* v0.16.0 - Upgrade Qtum core to bitcoin core 0.16 and bug fixes
	* Upgrade Qtum core to bitcoin core 0.16 including segwit wallet, bech32 addresses, HD-wallets by default and [more](https://bitcoin.org/en/release/v0.16.0#notable-changes)
	* Fix a bug where contract transactions with no change would fail in some cases
	* Fix a display bug where multiple logs would not show corretly in Qt wallet
	* Update gitian build scripts to support ubuntu bionic as building host
* v0.15.3 - Recommended update - Bug fix
	* Fix a bug with `searchlogs` and `waitforlogs` rpc calls that caused duplicacte logs to show in some cases
	* Add support for building with boost 1.67 
* v0.15.2 - Recommended update - Improved seeding and bug fixes
	* Fix a staker halving subsidy calculation bug
	* Fix some translations errors and typos
	* Add Support for openssl 1.1
	* Fix CVE-2018-12356 by hardening the regex
	* Fix a python tests bug that caused bulk running of tests to fail
	* Add static seeds
	* Add new dns seed nodes
	* Update copyright year
* v0.15.1 - Upgrade Qtum core to bitcoin core 0.15.1 and bug fixes
    * Upgrade Qtum core code to bitcoin core 0.15.1 with important performance improvments and other features, read more about bitcoin core [0.15.0](https://bitcoin.org/en/release/v0.15.0) and [0.15.1](https://bitcoin.org/en/release/v0.15.1)
    * Fix a bug with reindexing when the data directory is empty
    * Prevent sending QRC20 tokens to P2SH Qtum addresses in the Qt wallet
    * Restore JS number as string support for `callcontract` and `sendtocontract` rpc calls
    * Fix a bug where the wrong block hash would be stored in the transaction receipt for miners with `-logevents` enabled
* v0.14.16 - Improvments and Bug fixes
    * Fixed a bug where transactions with low fees would get stuck in the local mempool.
    * Fix a bug with clearing cache of StorageResults
    * Add contract support to ""createrawtransaction"" rpc call
    * Add sender support to ""sendtoaddress"" rpc call
* v0.14.15 - Recommended Update
    * Add EVM global variables to callcontract
    * Update gitian build script
    * Update CentOS build instructions
    * Add exception data to TransactionReceipt
    * Fixed a bug where the gas price could not be parsed correctly on certain platforms (reported by APIS)
    * Fixed a bug where the logs were not reverted on disconnect block in certain cases
* v0.14.14 - Mandatory Update
    * New Qt GUI
    * Fix Qt wallet freeze when syncing from scratch with `-logevents` or `-reindex`
    * Fix a bug with cacheUTXO (hardfork at block 100000 in mainnet, 84500 in testnet)
    * Add update checking functionality to Qt wallet
    * Fix a bug in token transfers history dates
    * Fix a bug with searchlogs rpc call
    * Add an extra check when adding token addresses
    * Fix compatibility with boost 1.66 
    * Add checkpoints
    * Update nMinimumChainWork and defaultAssumeValid chain params
    * Add minmempoolgaslimit startup argument
    * Add Gitian build signatures
* v0.14.13 - Mandatory Update
    * Fix a callcontract bug which in very specific cases could cause the node to fail to sync the blockchain
    * Add ability to save and restore contract addresses and ABI data
    * Make the token confirmation view data correct
* v0.14.12 - Recommended Update
    * Added option to disable change address usage
    * Fixed bug where heavy RPC usage could cause the wallet to crash
* v0.14.11 - Optional Update
    * Changed our versioning scheme to be consistent and avoid the two version number confusion
    * Add feature to restore wallet in the Qt wallet
    * Add new RPC call ""waitforlogs"" that is particularly useful for Dapp developers
    * Add long-polling support to the gettransaction RPC call
* v1.1.4 - Recommended update
    * Fixed a bug that would cause syncing to stop
    * Fixed a bug that would cause the wallet to crash when using -logevents
* v1.1.3 - Highly recommended update
    * Fixed a bug that caused contact addresses to show in receive token address dropdown
* v1.1.2 - Optional update, but recommended if using QRC tokens
    * Fixed a bug with token transactions where the transaction ID displayed was incorrect in the Qt wallet
    * Allow adding 0 balance addresses as the token receiver in the Qt wallet
* v1.1.1: When sending to contracts, the sender address is now the default change address to reduce confusion; fix -salvagewallet so it works with token transactions
* v1.1.0: Add GUI support Qtum QRC tokens, allowing full management of tokens on the Qtum blockchain from the Qt wallet
    * Sending to a contract no longer requires ABI data, allowing easy participation in simple crowdsale contracts
* v1.0.4: Fix bug where certain circumstances when staking could cause the displayed balance to be inaccurate until completely redownloading the blockchain.
* v1.0.3: Fix staker bug that reported false messages; slightly increases staking performance; optimize staker parameters; fix white send button in GUI
* v1.0.2: Various UI fixes, minor gas overflow consensus fix, per-txout exploit fix, testnet mode setup and functioning
* v1.0.1: Fixed network magic bytes and minimum version to ensure the main network does not conflict with the Skynet network
* v1.0: Initial release

Reindex Required When Upgrading from v1.0.1
----------------------------------------------

When you first start the Qtum 1.0.2 GUI wallet after using Qtum v1.0.1 it will prompt you that it must reindex the database. This is normal and is a result of switching our internal database format from per-transaction to per-txout. If you use `qtumd -daemon` it will silently fail to start. You need to use `qtumd -daemon -reindex` in this case. 

Qtum Documentation and Usage Resources
---------------

Basic usage resources:

* [Official Qtum Usage Guide](https://github.com/qtumproject/qtum/wiki/Qtum-Wallet-Tutorial)
* [Unofficial Qtum staking tutorial](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtum-qt)
* [Unofficial Qtum staking tutorial on Raspberry Pi](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtumd-on-a-raspberry-pi-3)
* [Unofficial guide for keeping your wallet safe](https://steemit.com/qtum/@cryptominder/encrypting-backing-up-and-restoring-your-qtum-wallet)
* [Block explorer](https://explorer.qtum.org)
* [Unofficial block explorer](https://qtumexplorer.io/)
* [Unofficial Raspberry Pi Web UI](https://github.com/rpiwalletui/qtum-ui)

Development resources:

* [Deploying a custom token to Qtum](https://blog.qtum.org/qtum-custom-token-walkthrough-467d725fa27d)
* [Early example faucet contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet)
* [Unofficial Qtum Hello World tutorial](https://steemit.com/qtum/@cryptominder/quantum-qtum-blockchain-developer-tutorial-hello-world)

General Info about Qtum:

* [Mainnet event AMA](https://www.reddit.com/r/Qtum/comments/6zs8t0/official_qtum_ama_thread_starts_at_10pm_beijing/)
* [Qtum's PoS vs CASPER](https://www.reddit.com/r/Qtum/comments/788oa5/qtums_pos_vs_casper_and_the_nothingatstake_problem/)
* [Technical article explaining Qtum's PoS model in depth](http://earlz.net/view/2017/07/27/1904/the-missing-explanation-of-proof-of-stake-version)
* [Unofficial What is Qtum article](https://storeofvalue.github.io/posts/what-is-qtum-without-the-bullshit/)

#### Build Qtum Core

If you want to build it from source, it's recommended to follow the specific [""build"" documentation](https://github.com/qtumproject/qtum/tree/testnet-2/doc) for your platform. But mostly it boils down to the following:

1. Clone the qtum source code and cd into `qtum`

        git clone --recursive https://github.com/qtumproject/qtum.git
        cd qtum


2.  Build qtum-core:

    Configure and build the headless qtum binaries as well as the GUI (if Qt is found).

    You can disable the GUI build by passing `--without-gui` to configure.

        ./autogen.sh
        ./configure
        make

3.  It is recommended to build and run the unit tests to ensure everything is working correctly:

        make check


If you encounter an error like:

> make[2]: *** No rule to make target ‘cpp-ethereum/utils/libscrypt/b64.c’, needed by ‘cpp-ethereum/utils/libscrypt/libbitcoinconsensus_la-b64.lo’.  Stop.

Then you did not checkout the cpp-ethereum submodule for Qtum. To do that, simply:

    cd qtum
    git submodule update --init --recursive

Validate and Reproduce Binaries
---------------------------------

Qtum uses a tool called Gitian to make reproducible builds that can be verified by anyone. Instructions on setting up a Gitian VM and building Qtum are provided [in doc/gitian-building.md](https://github.com/qtumproject/qtum/blob/master/doc/gitian-building.md)

Community Resources
---------

Make sure to check out these resources as well for more information and to keep up to date with all the latest news about Qtum. At least 1 developer is always around, so if you're developing on Qtum and need help, we'd love to welcome you to our community.  

* [/r/Qtum on Reddit](https://www.reddit.com/r/Qtum/)
* [Qtum Telegram Group](https://t.me/joinchat/D5oBaw29NeOdpw6qqqf2lw)
* [@QtumOfficial on Twitter](https://mobile.twitter.com/qtumofficial)
* [Qtum on Facebook](https://www.facebook.com/QtumOfficial/)
* [Qtum Forum](https://forum.qtum.org/)
* [Qtum.org](https://qtum.org/en/)


Qtum Smart Contract Limitations
-----------

* EVM smart contracts can not receive coins from or send coins to any address type other than pay-to-pubkeyhash (starts with Q) addresses. This is due to a limitation in the EVM
* Contracts are not allowed to create contracts with an initial endowment of coins. The contract must first be created, and then be sent coins in a separate transaction. Humans are also not allowed to create contracts with an initial endowment of coins.
* Although all of the infrastructure is present, Qtum Core does not currently parse Solidity event data. You must parse this yourself using either `searchlogs` or `-record-log-opcodes` features.
* It is not possible to send a contract coins without also executing the contract. This is also the case of Ethereum. This was promised in earlier discussions and technically does work, but due to lack of time for testing this feature was disabled. We hope to reenable this feature with release of the x86 virtual machine in 2018.
* In Qtum there can be multiple addresses used to create a proof-of-stake block. However, the EVM can only see the first output using the `coinbase` operation in Solidity (this address is also the one registered for the continuous staker rewards after 500 blocks). 

Hash Validation
----------------

```

If you would like to validate that the binaries you download are exactly the same as those provided and built by the Qtum team, then you can compare your binaries to the following sha256sum hashes:

94278294368f5d72a5f78ffbf596b0a79fa526489aaa07eeec98b1195248fb9b  qtum-0.16.1-aarch64-linux-gnu-debug.tar.gz
31c28caa3e43e99fef79f9de428c04c58323f89d4e67ef42efae11c005ba3039  qtum-0.16.1-aarch64-linux-gnu.tar.gz
07ca6b691b9c09c65cc3d50565834a1d34803f14464545ce474cbcdbab106f12  qtum-0.16.1-arm-linux-gnueabihf-debug.tar.gz
4755113f678b6aa63c43f35abe4c6135f7bde32dff57693ace48a570b9556e7f  qtum-0.16.1-arm-linux-gnueabihf.tar.gz
37aa995e9d5078a0f998b258ae5281e87960b2c63e93363712f0d9d72a8d0092  qtum-0.16.1-i686-pc-linux-gnu-debug.tar.gz
0886307da2738ba84082feda940978adcc7dc70ba074b206acc9298e9b437450  qtum-0.16.1-i686-pc-linux-gnu.tar.gz
80714497089f018b25f442e8832924b1039602576a1ba9d328b31620b68e912f  qtum-0.16.1-x86_64-linux-gnu-debug.tar.gz
a04613c40e269069cdea279039b42e3e0b50fbfd345416a5a6e39fddbc91ed8f  qtum-0.16.1-x86_64-linux-gnu.tar.gz
5ca228a918711e0a12aea7894c7cc64b0bbe16a8d2aa41406e6fe659173c96b8  src/qtum-0.16.1.tar.gz
6b69fcaffc58d856fb91ee52c7dc00bd6e3e0f40b646f14ba1e2dfa0017b8909  qtum-linux-0.16-res.yml


9ba8cbb123438eff236c8e2fbf9f22c5f1448e5ae72b6321303cecd05a6aacef  qtum-0.16.1-win-unsigned.tar.gz
74109333d15041952b2d615455824b74b4d5de553e99fe367050e983ab27ed9c  qtum-0.16.1-win32-debug.zip
a938fd5ded21f9188b615e8b579b6c8d131516fb0f65dfcf7d92756de6cef951  qtum-0.16.1-win32-setup-unsigned.exe
eb52fbad2d4a09eabf68b61d914499f697acba8ad8cd17a36ef63d9cf41df697  qtum-0.16.1-win32.zip
373aec0651d7e2dc85d773c2a6e666a4927afbdffff90feab0b9e8db9b3a550e  qtum-0.16.1-win64-debug.zip
5442b072eb659322066a3b94a39ce3b47869f1679a13fd0d7cb3153445d5983c  qtum-0.16.1-win64-setup-unsigned.exe
27344bfb88640735bb7820d68659126665543e7136157d415552078379f16495  qtum-0.16.1-win64.zip
f31c03e756f7c3a27b522a4389c05db8e96fe17fac9966c443fbe1e357a10f77  src/qtum-0.16.1.tar.gz
5c653086bdd13d4095a33bc9da8fd049572c62378cd447f481b3092fb791415e  qtum-win-0.16-res.yml


c24719037865808d093415685d9d5fec7e6f1cd69affdfb8a84fc47902526683  qtum-0.16.1-osx-unsigned.dmg
6843f4f6d8d16182f23dfac3ecc3334d16c2709184afbfeff2c75177bac69cf4  qtum-0.16.1-osx-unsigned.tar.gz
8529842501a85ff3e95a442276dbc598d59380b1a22023cd63dc807155b35c5d  qtum-0.16.1-osx64.tar.gz
f31c03e756f7c3a27b522a4389c05db8e96fe17fac9966c443fbe1e357a10f77  src/qtum-0.16.1.tar.gz
ab174f3b1cae27bca9e36763f7905a3ae455fafc47f73598026b22d1dce98d90  qtum-osx-0.16-res.yml


```",83774906
906,False,False,2018-09-13T05:39:30Z,2018-09-13T07:44:19Z,"About Qtum and Mainnet Ignition
-------------------------------

Qtum is a decentralized blockchain project built on Bitcoin's UTXO model, with support for Ethereum Virtual Machine based smart contracts, and secured by a proof of stake consensus model. It achieves this through the revolutionary Account Abstraction Layer which allows the EVM to communicate with Qtum's Bitcoin-like UTXO blockchain. For more general information about Qtum as well as links to join our community, go to https://qtum.org

Welcome to the Qtum Ignition Main Network. This is the main network where the tokens hold value and should be guarded very carefully. There will be a testnet setup soon for developers, in the meantime you can use `-regtest` mode for testing needs. We will announce details about the token swap from QTUM ERC20 coins to QTUM mainnet tokens soon, watch our [website](https://qtum.org) for details about that.  

The major features implemented in Qtum Ignition include:

1. The Ethereum Virtual Machine, which allows for compatibility with most existing Solidity based smart contracts.
2. The Smart Staking Protocol is complete, which is an optimized Proof of Stake implementation designed for a smart contract platform (however, smart contracts can not participate in staking yet).
3. An early and basic smart contract GUI has been implemented that can be used for creating contracts, sending data and Qtum to them, and checking their status by executing them locally. This functionality is similar to Mist's UI right now, but it is still an early version. We will be working on this more to improve it. 
4. Regtest mode, which is ideal for developers who wish to create their own private blockchain. It is tuned specifically to make development easier. It will stake blocks automatically every 30 seconds, and can generate proof-of-work blocks instantly as needed.
5. The Decentralized Governance Protocol is completely implemented and functional, which allows certain network parameters to be modified without a fork.

For more technical information for how to start developing with Qtum please read the [Guide](https://github.com/qtumproject/qtum/blob/master/doc/sparknet-guide.md) and also see this tutorial for deploying a simple [faucet smart contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet) (it hasn't yet been updated for Mainnet for obvious reasons, but all the instructions are the same and you can try them in regtest mode)

Note: Qtum Core is considered beta software. We make no warranties or guarantees of its security or stability.

Update History
--------------
* v0.16.0 - Upgrade Qtum core to bitcoin core 0.16 and bug fixes
	* Upgrade Qtum core to bitcoin core 0.16 including segwit wallet, bech32 addresses, HD-wallets by default and [more](https://bitcoin.org/en/release/v0.16.0#notable-changes)
	* Fix a bug where contract transactions with no change would fail in some cases
	* Fix a display bug where multiple logs would not show corretly in Qt wallet
	* Update gitian build scripts to support ubuntu bionic as building host
* v0.15.3 - Recommended update - Bug fix
	* Fix a bug with `searchlogs` and `waitforlogs` rpc calls that caused duplicacte logs to show in some cases
	* Add support for building with boost 1.67 
* v0.15.2 - Recommended update - Improved seeding and bug fixes
	* Fix a staker halving subsidy calculation bug
	* Fix some translations errors and typos
	* Add Support for openssl 1.1
	* Fix CVE-2018-12356 by hardening the regex
	* Fix a python tests bug that caused bulk running of tests to fail
	* Add static seeds
	* Add new dns seed nodes
	* Update copyright year
* v0.15.1 - Upgrade Qtum core to bitcoin core 0.15.1 and bug fixes
    * Upgrade Qtum core code to bitcoin core 0.15.1 with important performance improvments and other features, read more about bitcoin core [0.15.0](https://bitcoin.org/en/release/v0.15.0) and [0.15.1](https://bitcoin.org/en/release/v0.15.1)
    * Fix a bug with reindexing when the data directory is empty
    * Prevent sending QRC20 tokens to P2SH Qtum addresses in the Qt wallet
    * Restore JS number as string support for `callcontract` and `sendtocontract` rpc calls
    * Fix a bug where the wrong block hash would be stored in the transaction receipt for miners with `-logevents` enabled
* v0.14.16 - Improvments and Bug fixes
    * Fixed a bug where transactions with low fees would get stuck in the local mempool.
    * Fix a bug with clearing cache of StorageResults
    * Add contract support to ""createrawtransaction"" rpc call
    * Add sender support to ""sendtoaddress"" rpc call
* v0.14.15 - Recommended Update
    * Add EVM global variables to callcontract
    * Update gitian build script
    * Update CentOS build instructions
    * Add exception data to TransactionReceipt
    * Fixed a bug where the gas price could not be parsed correctly on certain platforms (reported by APIS)
    * Fixed a bug where the logs were not reverted on disconnect block in certain cases
* v0.14.14 - Mandatory Update
    * New Qt GUI
    * Fix Qt wallet freeze when syncing from scratch with `-logevents` or `-reindex`
    * Fix a bug with cacheUTXO (hardfork at block 100000 in mainnet, 84500 in testnet)
    * Add update checking functionality to Qt wallet
    * Fix a bug in token transfers history dates
    * Fix a bug with searchlogs rpc call
    * Add an extra check when adding token addresses
    * Fix compatibility with boost 1.66 
    * Add checkpoints
    * Update nMinimumChainWork and defaultAssumeValid chain params
    * Add minmempoolgaslimit startup argument
    * Add Gitian build signatures
* v0.14.13 - Mandatory Update
    * Fix a callcontract bug which in very specific cases could cause the node to fail to sync the blockchain
    * Add ability to save and restore contract addresses and ABI data
    * Make the token confirmation view data correct
* v0.14.12 - Recommended Update
    * Added option to disable change address usage
    * Fixed bug where heavy RPC usage could cause the wallet to crash
* v0.14.11 - Optional Update
    * Changed our versioning scheme to be consistent and avoid the two version number confusion
    * Add feature to restore wallet in the Qt wallet
    * Add new RPC call ""waitforlogs"" that is particularly useful for Dapp developers
    * Add long-polling support to the gettransaction RPC call
* v1.1.4 - Recommended update
    * Fixed a bug that would cause syncing to stop
    * Fixed a bug that would cause the wallet to crash when using -logevents
* v1.1.3 - Highly recommended update
    * Fixed a bug that caused contact addresses to show in receive token address dropdown
* v1.1.2 - Optional update, but recommended if using QRC tokens
    * Fixed a bug with token transactions where the transaction ID displayed was incorrect in the Qt wallet
    * Allow adding 0 balance addresses as the token receiver in the Qt wallet
* v1.1.1: When sending to contracts, the sender address is now the default change address to reduce confusion; fix -salvagewallet so it works with token transactions
* v1.1.0: Add GUI support Qtum QRC tokens, allowing full management of tokens on the Qtum blockchain from the Qt wallet
    * Sending to a contract no longer requires ABI data, allowing easy participation in simple crowdsale contracts
* v1.0.4: Fix bug where certain circumstances when staking could cause the displayed balance to be inaccurate until completely redownloading the blockchain.
* v1.0.3: Fix staker bug that reported false messages; slightly increases staking performance; optimize staker parameters; fix white send button in GUI
* v1.0.2: Various UI fixes, minor gas overflow consensus fix, per-txout exploit fix, testnet mode setup and functioning
* v1.0.1: Fixed network magic bytes and minimum version to ensure the main network does not conflict with the Skynet network
* v1.0: Initial release

Reindex Required When Upgrading from v1.0.1
----------------------------------------------

When you first start the Qtum 1.0.2 GUI wallet after using Qtum v1.0.1 it will prompt you that it must reindex the database. This is normal and is a result of switching our internal database format from per-transaction to per-txout. If you use `qtumd -daemon` it will silently fail to start. You need to use `qtumd -daemon -reindex` in this case. 

Qtum Documentation and Usage Resources
---------------

Basic usage resources:

* [Official Qtum Usage Guide](https://github.com/qtumproject/qtum/wiki/Qtum-Wallet-Tutorial)
* [Unofficial Qtum staking tutorial](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtum-qt)
* [Unofficial Qtum staking tutorial on Raspberry Pi](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtumd-on-a-raspberry-pi-3)
* [Unofficial guide for keeping your wallet safe](https://steemit.com/qtum/@cryptominder/encrypting-backing-up-and-restoring-your-qtum-wallet)
* [Block explorer](https://explorer.qtum.org)
* [Unofficial block explorer](https://qtumexplorer.io/)
* [Unofficial Raspberry Pi Web UI](https://github.com/rpiwalletui/qtum-ui)

Development resources:

* [Deploying a custom token to Qtum](https://blog.qtum.org/qtum-custom-token-walkthrough-467d725fa27d)
* [Early example faucet contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet)
* [Unofficial Qtum Hello World tutorial](https://steemit.com/qtum/@cryptominder/quantum-qtum-blockchain-developer-tutorial-hello-world)

General Info about Qtum:

* [Mainnet event AMA](https://www.reddit.com/r/Qtum/comments/6zs8t0/official_qtum_ama_thread_starts_at_10pm_beijing/)
* [Qtum's PoS vs CASPER](https://www.reddit.com/r/Qtum/comments/788oa5/qtums_pos_vs_casper_and_the_nothingatstake_problem/)
* [Technical article explaining Qtum's PoS model in depth](http://earlz.net/view/2017/07/27/1904/the-missing-explanation-of-proof-of-stake-version)
* [Unofficial What is Qtum article](https://storeofvalue.github.io/posts/what-is-qtum-without-the-bullshit/)

#### Build Qtum Core

If you want to build it from source, it's recommended to follow the specific [""build"" documentation](https://github.com/qtumproject/qtum/tree/testnet-2/doc) for your platform. But mostly it boils down to the following:

1. Clone the qtum source code and cd into `qtum`

        git clone --recursive https://github.com/qtumproject/qtum.git
        cd qtum


2.  Build qtum-core:

    Configure and build the headless qtum binaries as well as the GUI (if Qt is found).

    You can disable the GUI build by passing `--without-gui` to configure.

        ./autogen.sh
        ./configure
        make

3.  It is recommended to build and run the unit tests to ensure everything is working correctly:

        make check


If you encounter an error like:

> make[2]: *** No rule to make target ‘cpp-ethereum/utils/libscrypt/b64.c’, needed by ‘cpp-ethereum/utils/libscrypt/libbitcoinconsensus_la-b64.lo’.  Stop.

Then you did not checkout the cpp-ethereum submodule for Qtum. To do that, simply:

    cd qtum
    git submodule update --init --recursive

Validate and Reproduce Binaries
---------------------------------

Qtum uses a tool called Gitian to make reproducible builds that can be verified by anyone. Instructions on setting up a Gitian VM and building Qtum are provided [in doc/gitian-building.md](https://github.com/qtumproject/qtum/blob/master/doc/gitian-building.md)

Community Resources
---------

Make sure to check out these resources as well for more information and to keep up to date with all the latest news about Qtum. At least 1 developer is always around, so if you're developing on Qtum and need help, we'd love to welcome you to our community.  

* [/r/Qtum on Reddit](https://www.reddit.com/r/Qtum/)
* [Qtum Telegram Group](https://t.me/joinchat/D5oBaw29NeOdpw6qqqf2lw)
* [@QtumOfficial on Twitter](https://mobile.twitter.com/qtumofficial)
* [Qtum on Facebook](https://www.facebook.com/QtumOfficial/)
* [Qtum Forum](https://forum.qtum.org/)
* [Qtum.org](https://qtum.org/en/)


Qtum Smart Contract Limitations
-----------

* EVM smart contracts can not receive coins from or send coins to any address type other than pay-to-pubkeyhash (starts with Q) addresses. This is due to a limitation in the EVM
* Contracts are not allowed to create contracts with an initial endowment of coins. The contract must first be created, and then be sent coins in a separate transaction. Humans are also not allowed to create contracts with an initial endowment of coins.
* Although all of the infrastructure is present, Qtum Core does not currently parse Solidity event data. You must parse this yourself using either `searchlogs` or `-record-log-opcodes` features.
* It is not possible to send a contract coins without also executing the contract. This is also the case of Ethereum. This was promised in earlier discussions and technically does work, but due to lack of time for testing this feature was disabled. We hope to reenable this feature with release of the x86 virtual machine in 2018.
* In Qtum there can be multiple addresses used to create a proof-of-stake block. However, the EVM can only see the first output using the `coinbase` operation in Solidity (this address is also the one registered for the continuous staker rewards after 500 blocks). 

Hash Validation
----------------

```

If you would like to validate that the binaries you download are exactly the same as those provided and built by the Qtum team, then you can compare your binaries to the following sha256sum hashes:

c2ec20b370673e8aacdb3bde09b5cce8e3badc0e6cb72de586b685aee8ebe259  qtum-0.16.0-aarch64-linux-gnu-debug.tar.gz
872e302af7c8aa951ba0691c203bdc73337d856a3980379b79f14ab28586d14a  qtum-0.16.0-aarch64-linux-gnu.tar.gz
5ff954f3adc27a37f868b2e3562a8101a524f403b6078d656b7bc4d17b62a1e7  qtum-0.16.0-arm-linux-gnueabihf-debug.tar.gz
36dce83f1cc029986232f745107707f1036bc30ef894c67cb0f24ed702997cbb  qtum-0.16.0-arm-linux-gnueabihf.tar.gz
45e1cc279a629155ab14674e1a3e5e5d52eebedef3049ad2a1c41d3c324e2e13  qtum-0.16.0-i686-pc-linux-gnu-debug.tar.gz
457ebfb7c47ea2bdd6c39a40f026c44a86acf893a8e0264b892224675c488c69  qtum-0.16.0-i686-pc-linux-gnu.tar.gz
b64c61687dc2e110912c0ff436d4603e37cfadbb16b4f2829e3e3d7829451adc  qtum-0.16.0-x86_64-linux-gnu-debug.tar.gz
74d1ba262228da6c67c66a300b5958005b1a1a24b1cb2842adcde43e18a17d14  qtum-0.16.0-x86_64-linux-gnu.tar.gz
7f44ee6a79a926a132436b78651f0f88bd027e58fe3a61abf4fb64a64bf619a5  src/qtum-0.16.0.tar.gz
6ad3d74e4182edca44953b525fcca7d77f9f453a9d20c378b2c137bdcf48ed03  qtum-linux-0.16-res.yml

a611f292a3a8b998f2026d2a50ee5f38392c54d79c261d1fdc36b05ae3a0ccad  qtum-0.16.0-win-unsigned.tar.gz
101ff28c3185609f80e720b7a459c62350dcdc0836b8374faf2018bc132574ed  qtum-0.16.0-win32-debug.zip
5aec9e0167bda6d0cacdbf06767df0664fa79ea5d032f8723f25c23e4c393d76  qtum-0.16.0-win32-setup-unsigned.exe
05be6987402b23cd3f30f9953e3d364651e3ab283b9c165e2499819a13a3c63d  qtum-0.16.0-win32.zip
61a9e06a59334f51f8c2313feed4f42d25c0297fa6d998c02f2645947c08fe64  qtum-0.16.0-win64-debug.zip
02f71f3f2397a446476c0df624c28dda9b70272d5db34a954edbe1072ee37d4e  qtum-0.16.0-win64-setup-unsigned.exe
bc750094105b772ff4545043147fd91938d7eea2ee3b914dee6f7e94753ee3e3  qtum-0.16.0-win64.zip
7d9c89e3dfc2de474268cf324beae1dc7a66bab92057d26e9aeaf846d29ddddf  src/qtum-0.16.0.tar.gz
094cb15c4b580adb6444e95b7ec55bebb099b2f4778636d3c131db9703813914  qtum-win-0.16-res.yml

ce359262f11e7bdd76aad78e6ad84be3f5ebadae2ad02c81695b0435579fc2a6  qtum-0.16.0-osx-unsigned.dmg
cc9ff41c9751e70dd5891bc6f7452d3509e8e957442d156569387f9ed523159a  qtum-0.16.0-osx-unsigned.tar.gz
f5f3be285f96dccdc5425eea8326cff75cc5b0023760c615f8bb016b9b68ef70  qtum-0.16.0-osx64.tar.gz
7d9c89e3dfc2de474268cf324beae1dc7a66bab92057d26e9aeaf846d29ddddf  src/qtum-0.16.0.tar.gz
e9c982ba306f2af702bb985afeb54bce8282ef24cce12dca381074ca02706194  qtum-osx-0.16-res.yml

```",83774906
907,False,False,2018-08-06T23:58:21Z,2018-08-07T01:57:10Z,"About Qtum and Mainnet Ignition
-------------------------------

Qtum is a decentralized blockchain project built on Bitcoin's UTXO model, with support for Ethereum Virtual Machine based smart contracts, and secured by a proof of stake consensus model. It achieves this through the revolutionary Account Abstraction Layer which allows the EVM to communicate with Qtum's Bitcoin-like UTXO blockchain. For more general information about Qtum as well as links to join our community, go to https://qtum.org

Welcome to the Qtum Ignition Main Network. This is the main network where the tokens hold value and should be guarded very carefully. There will be a testnet setup soon for developers, in the meantime you can use `-regtest` mode for testing needs. We will announce details about the token swap from QTUM ERC20 coins to QTUM mainnet tokens soon, watch our [website](https://qtum.org) for details about that.  

The major features implemented in Qtum Ignition include:

1. The Ethereum Virtual Machine, which allows for compatibility with most existing Solidity based smart contracts.
2. The Smart Staking Protocol is complete, which is an optimized Proof of Stake implementation designed for a smart contract platform (however, smart contracts can not participate in staking yet).
3. An early and basic smart contract GUI has been implemented that can be used for creating contracts, sending data and Qtum to them, and checking their status by executing them locally. This functionality is similar to Mist's UI right now, but it is still an early version. We will be working on this more to improve it. 
4. Regtest mode, which is ideal for developers who wish to create their own private blockchain. It is tuned specifically to make development easier. It will stake blocks automatically every 30 seconds, and can generate proof-of-work blocks instantly as needed.
5. The Decentralized Governance Protocol is completely implemented and functional, which allows certain network parameters to be modified without a fork.

For more technical information for how to start developing with Qtum please read the [Guide](https://github.com/qtumproject/qtum/blob/master/doc/sparknet-guide.md) and also see this tutorial for deploying a simple [faucet smart contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet) (it hasn't yet been updated for Mainnet for obvious reasons, but all the instructions are the same and you can try them in regtest mode)

Note: Qtum Core is considered beta software. We make no warranties or guarantees of its security or stability.

Update History
--------------
* v0.15.3 - Recommended update - Bug fix
	* Fix a bug with `searchlogs` and `waitforlogs` rpc calls that caused duplicacte logs to show in some cases
	* Add support for building with boost 1.67 
* v0.15.2 - Recommended update - Improved seeding and bug fixes
	* Fix a staker halving subsidy calculation bug
	* Fix some translations errors and typos
	* Add Support for openssl 1.1
	* Fix CVE-2018-12356 by hardening the regex
	* Fix a python tests bug that caused bulk running of tests to fail
	* Add static seeds
	* Add new dns seed nodes
	* Update copyright year
* v0.15.1 - Upgrade Qtum core to bitcoin core 0.15.1 and bug fixes
    * Upgrade Qtum core code to bitcoin core 0.15.1 with important performance improvments and other features, read more about bitcoin core [0.15.0](https://bitcoin.org/en/release/v0.15.0) and [0.15.1](https://bitcoin.org/en/release/v0.15.1)
    * Fix a bug with reindexing when the data directory is empty
    * Prevent sending QRC20 tokens to P2SH Qtum addresses in the Qt wallet
    * Restore JS number as string support for `callcontract` and `sendtocontract` rpc calls
    * Fix a bug where the wrong block hash would be stored in the transaction receipt for miners with `-logevents` enabled
* v0.14.16 - Improvments and Bug fixes
    * Fixed a bug where transactions with low fees would get stuck in the local mempool.
    * Fix a bug with clearing cache of StorageResults
    * Add contract support to ""createrawtransaction"" rpc call
    * Add sender support to ""sendtoaddress"" rpc call
* v0.14.15 - Recommended Update
    * Add EVM global variables to callcontract
    * Update gitian build script
    * Update CentOS build instructions
    * Add exception data to TransactionReceipt
    * Fixed a bug where the gas price could not be parsed correctly on certain platforms (reported by APIS)
    * Fixed a bug where the logs were not reverted on disconnect block in certain cases
* v0.14.14 - Mandatory Update
    * New Qt GUI
    * Fix Qt wallet freeze when syncing from scratch with `-logevents` or `-reindex`
    * Fix a bug with cacheUTXO (hardfork at block 100000 in mainnet, 84500 in testnet)
    * Add update checking functionality to Qt wallet
    * Fix a bug in token transfers history dates
    * Fix a bug with searchlogs rpc call
    * Add an extra check when adding token addresses
    * Fix compatibility with boost 1.66 
    * Add checkpoints
    * Update nMinimumChainWork and defaultAssumeValid chain params
    * Add minmempoolgaslimit startup argument
    * Add Gitian build signatures
* v0.14.13 - Mandatory Update
    * Fix a callcontract bug which in very specific cases could cause the node to fail to sync the blockchain
    * Add ability to save and restore contract addresses and ABI data
    * Make the token confirmation view data correct
* v0.14.12 - Recommended Update
    * Added option to disable change address usage
    * Fixed bug where heavy RPC usage could cause the wallet to crash
* v0.14.11 - Optional Update
    * Changed our versioning scheme to be consistent and avoid the two version number confusion
    * Add feature to restore wallet in the Qt wallet
    * Add new RPC call ""waitforlogs"" that is particularly useful for Dapp developers
    * Add long-polling support to the gettransaction RPC call
* v1.1.4 - Recommended update
    * Fixed a bug that would cause syncing to stop
    * Fixed a bug that would cause the wallet to crash when using -logevents
* v1.1.3 - Highly recommended update
    * Fixed a bug that caused contact addresses to show in receive token address dropdown
* v1.1.2 - Optional update, but recommended if using QRC tokens
    * Fixed a bug with token transactions where the transaction ID displayed was incorrect in the Qt wallet
    * Allow adding 0 balance addresses as the token receiver in the Qt wallet
* v1.1.1: When sending to contracts, the sender address is now the default change address to reduce confusion; fix -salvagewallet so it works with token transactions
* v1.1.0: Add GUI support Qtum QRC tokens, allowing full management of tokens on the Qtum blockchain from the Qt wallet
    * Sending to a contract no longer requires ABI data, allowing easy participation in simple crowdsale contracts
* v1.0.4: Fix bug where certain circumstances when staking could cause the displayed balance to be inaccurate until completely redownloading the blockchain.
* v1.0.3: Fix staker bug that reported false messages; slightly increases staking performance; optimize staker parameters; fix white send button in GUI
* v1.0.2: Various UI fixes, minor gas overflow consensus fix, per-txout exploit fix, testnet mode setup and functioning
* v1.0.1: Fixed network magic bytes and minimum version to ensure the main network does not conflict with the Skynet network
* v1.0: Initial release

Reindex Required When Upgrading from v1.0.1
----------------------------------------------

When you first start the Qtum 1.0.2 GUI wallet after using Qtum v1.0.1 it will prompt you that it must reindex the database. This is normal and is a result of switching our internal database format from per-transaction to per-txout. If you use `qtumd -daemon` it will silently fail to start. You need to use `qtumd -daemon -reindex` in this case. 

Qtum Documentation and Usage Resources
---------------

Basic usage resources:

* [Official Qtum Usage Guide](https://github.com/qtumproject/qtum/wiki/Qtum-Wallet-Tutorial)
* [Unofficial Qtum staking tutorial](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtum-qt)
* [Unofficial Qtum staking tutorial on Raspberry Pi](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtumd-on-a-raspberry-pi-3)
* [Unofficial guide for keeping your wallet safe](https://steemit.com/qtum/@cryptominder/encrypting-backing-up-and-restoring-your-qtum-wallet)
* [Block explorer](https://explorer.qtum.org)
* [Unofficial block explorer](https://qtumexplorer.io/)
* [Unofficial Raspberry Pi Web UI](https://github.com/rpiwalletui/qtum-ui)

Development resources:

* [Deploying a custom token to Qtum](https://blog.qtum.org/qtum-custom-token-walkthrough-467d725fa27d)
* [Early example faucet contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet)
* [Unofficial Qtum Hello World tutorial](https://steemit.com/qtum/@cryptominder/quantum-qtum-blockchain-developer-tutorial-hello-world)

General Info about Qtum:

* [Mainnet event AMA](https://www.reddit.com/r/Qtum/comments/6zs8t0/official_qtum_ama_thread_starts_at_10pm_beijing/)
* [Qtum's PoS vs CASPER](https://www.reddit.com/r/Qtum/comments/788oa5/qtums_pos_vs_casper_and_the_nothingatstake_problem/)
* [Technical article explaining Qtum's PoS model in depth](http://earlz.net/view/2017/07/27/1904/the-missing-explanation-of-proof-of-stake-version)
* [Unofficial What is Qtum article](https://storeofvalue.github.io/posts/what-is-qtum-without-the-bullshit/)

#### Build Qtum Core

If you want to build it from source, it's recommended to follow the specific [""build"" documentation](https://github.com/qtumproject/qtum/tree/testnet-2/doc) for your platform. But mostly it boils down to the following:

1. Clone the qtum source code and cd into `qtum`

        git clone --recursive https://github.com/qtumproject/qtum.git
        cd qtum


2.  Build qtum-core:

    Configure and build the headless qtum binaries as well as the GUI (if Qt is found).

    You can disable the GUI build by passing `--without-gui` to configure.

        ./autogen.sh
        ./configure
        make

3.  It is recommended to build and run the unit tests to ensure everything is working correctly:

        make check


If you encounter an error like:

> make[2]: *** No rule to make target ‘cpp-ethereum/utils/libscrypt/b64.c’, needed by ‘cpp-ethereum/utils/libscrypt/libbitcoinconsensus_la-b64.lo’.  Stop.

Then you did not checkout the cpp-ethereum submodule for Qtum. To do that, simply:

    cd qtum
    git submodule update --init --recursive

Validate and Reproduce Binaries
---------------------------------

Qtum uses a tool called Gitian to make reproducible builds that can be verified by anyone. Instructions on setting up a Gitian VM and building Qtum are provided [in doc/gitian-building.md](https://github.com/qtumproject/qtum/blob/master/doc/gitian-building.md)

Community Resources
---------

Make sure to check out these resources as well for more information and to keep up to date with all the latest news about Qtum. At least 1 developer is always around, so if you're developing on Qtum and need help, we'd love to welcome you to our community.  

* [/r/Qtum on Reddit](https://www.reddit.com/r/Qtum/)
* [Qtum Telegram Group](https://t.me/joinchat/D5oBaw29NeOdpw6qqqf2lw)
* [@QtumOfficial on Twitter](https://mobile.twitter.com/qtumofficial)
* [Qtum on Facebook](https://www.facebook.com/QtumOfficial/)
* [Qtum Forum](https://forum.qtum.org/)
* [Qtum.org](https://qtum.org/en/)


Qtum Smart Contract Limitations
-----------

* EVM smart contracts can not receive coins from or send coins to any address type other than pay-to-pubkeyhash (starts with Q) addresses. This is due to a limitation in the EVM
* Contracts are not allowed to create contracts with an initial endowment of coins. The contract must first be created, and then be sent coins in a separate transaction. Humans are also not allowed to create contracts with an initial endowment of coins.
* Although all of the infrastructure is present, Qtum Core does not currently parse Solidity event data. You must parse this yourself using either `searchlogs` or `-record-log-opcodes` features.
* It is not possible to send a contract coins without also executing the contract. This is also the case of Ethereum. This was promised in earlier discussions and technically does work, but due to lack of time for testing this feature was disabled. We hope to reenable this feature with release of the x86 virtual machine in 2018.
* In Qtum there can be multiple addresses used to create a proof-of-stake block. However, the EVM can only see the first output using the `coinbase` operation in Solidity (this address is also the one registered for the continuous staker rewards after 500 blocks). 

Hash Validation
----------------

```

If you would like to validate that the binaries you download are exactly the same as those provided and built by the Qtum team, then you can compare your binaries to the following sha256sum hashes:

466d1c7475fd1fa546be6821ba857a3021935d6cd206dd4af9aa27835c0a26ee  qtum-0.15.3-osx-unsigned.dmg
b6a6b6149c1f100541d986bf2a75b5934801d0aa60c2b76b1ac467377053e371  qtum-0.15.3-osx-unsigned.tar.gz
2dd207da2fe852064af7cf0ce0ab0b226a891621382e159f37cbfae7184da712  qtum-0.15.3-osx64.tar.gz
30e1bc1c3254e0746173530d099c2bfa3a961d2b04ac2ed14c494eba57126130  src/qtum-0.15.3.tar.gz
398e4924c9d2f0ee0a63c356a2089a3612a11cb31211da22d89d8e52d740b467  qtum-osx-0.15-res.yml

a8f2e5c298fc56af3dc2801215e48f6ea0e105d7d7711d36c79c3279b3676c60  qtum-0.15.3-win-unsigned.tar.gz
7a34cefc5164ae4422daae1c13e7439b0b26edc7dbe78ed4cf5d61b22d53b346  qtum-0.15.3-win32-debug.zip
2ca6b552cc29be67242131da69f9bfb7ea3c590b36c1373bebef31e308be0bfd  qtum-0.15.3-win32-setup-unsigned.exe
4bc83add115918efe24b64bd895813b8d2fd7e1ca8d98ae357e15d15d54ebdf8  qtum-0.15.3-win32.zip
b6970eb34553fe32f6319506a09d84b3df772b2ebdb3d67e5990c0785b638271  qtum-0.15.3-win64-debug.zip
47172f5931a7f203da726f1c894cfa89c751574f83881ccf23533262d01bd820  qtum-0.15.3-win64-setup-unsigned.exe
01a86dd5ce22aab63264421dade0d510aa3e00524c28ce61349895277d5fa510  qtum-0.15.3-win64.zip
86c7694d0661d2f846d863be2b8413b395285fef3dbd646c933f6e71013b5e99  src/qtum-0.15.3.tar.gz
0e2cb6e515325a05ad73ccc5d91c8386e10fe626626bc426ed29f9155d8cd134  qtum-win-0.15-res.yml

7bb0a42b64f830514d5a99aef7623282b168567629f06cc3eaedfca15e35a2a7  qtum-0.15.3-aarch64-linux-gnu-debug.tar.gz
414e8c4c8d4e2e205be6e0c10c83997ed18f81e499a955f0a269055f09807047  qtum-0.15.3-aarch64-linux-gnu.tar.gz
55eb038c19b45d0f6b18e2ffbc55611466729dde64fb57ac2408498ff5fe5551  qtum-0.15.3-arm-linux-gnueabihf-debug.tar.gz
f90d9c1d709ca7726cf0829d7254650c40351b3d2f49884e788eb9675c18886b  qtum-0.15.3-arm-linux-gnueabihf.tar.gz
3ce97a1593a11d2d0de9fd99d82dc628cdb02e72b38ea60ee1b42ff6a6807587  qtum-0.15.3-i686-pc-linux-gnu-debug.tar.gz
aa84a7b202db4a5ce94475f2eb644b6e9fe86407b6ae55ad31a1b5b0cea02738  qtum-0.15.3-i686-pc-linux-gnu.tar.gz
f054c182355d5abc5f5e5a14a3fee8caa88d8717deffb23296de310ceda2b975  qtum-0.15.3-x86_64-linux-gnu-debug.tar.gz
86289fd427979753175a90779c495db76ed2f10a783b6b400f75b05b868a64e3  qtum-0.15.3-x86_64-linux-gnu.tar.gz
30e1bc1c3254e0746173530d099c2bfa3a961d2b04ac2ed14c494eba57126130  src/qtum-0.15.3.tar.gz
71dd18812a62df1f7f24760fa908279c6165ab0c674a130da880a70a35344f2c  qtum-linux-0.15-res.yml


```",83774906
908,False,False,2018-06-20T22:22:08Z,2018-06-21T01:00:20Z,"About Qtum and Mainnet Ignition
-------------------------------

Qtum is a decentralized blockchain project built on Bitcoin's UTXO model, with support for Ethereum Virtual Machine based smart contracts, and secured by a proof of stake consensus model. It achieves this through the revolutionary Account Abstraction Layer which allows the EVM to communicate with Qtum's Bitcoin-like UTXO blockchain. For more general information about Qtum as well as links to join our community, go to https://qtum.org

Welcome to the Qtum Ignition Main Network. This is the main network where the tokens hold value and should be guarded very carefully. There will be a testnet setup soon for developers, in the meantime you can use `-regtest` mode for testing needs. We will announce details about the token swap from QTUM ERC20 coins to QTUM mainnet tokens soon, watch our [website](https://qtum.org) for details about that.  

The major features implemented in Qtum Ignition include:

1. The Ethereum Virtual Machine, which allows for compatibility with most existing Solidity based smart contracts.
2. The Smart Staking Protocol is complete, which is an optimized Proof of Stake implementation designed for a smart contract platform (however, smart contracts can not participate in staking yet).
3. An early and basic smart contract GUI has been implemented that can be used for creating contracts, sending data and Qtum to them, and checking their status by executing them locally. This functionality is similar to Mist's UI right now, but it is still an early version. We will be working on this more to improve it. 
4. Regtest mode, which is ideal for developers who wish to create their own private blockchain. It is tuned specifically to make development easier. It will stake blocks automatically every 30 seconds, and can generate proof-of-work blocks instantly as needed.
5. The Decentralized Governance Protocol is completely implemented and functional, which allows certain network parameters to be modified without a fork.

For more technical information for how to start developing with Qtum please read the [Guide](https://github.com/qtumproject/qtum/blob/master/doc/sparknet-guide.md) and also see this tutorial for deploying a simple [faucet smart contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet) (it hasn't yet been updated for Mainnet for obvious reasons, but all the instructions are the same and you can try them in regtest mode)

Note: Qtum Core is considered beta software. We make no warranties or guarantees of its security or stability.

Update History
--------------
* v0.15.2 - Recommended update - Improved seeding and bug fixes
	* Fix a staker halving subsidy calculation bug
	* Fix some translations errors and typos
	* Add Support for openssl 1.1
	* Fix CVE-2018-12356 by hardening the regex
	* Fix a python tests bug that caused bulk running of tests to fail
	* Add static seeds
	* Add new dns seed nodes
	* Update copyright year
* v0.15.1 - Upgrade Qtum core to bitcoin core 0.15.1 and bug fixes
    * Upgrade Qtum core code to bitcoin core 0.15.1 with important performance improvments and other features, read more about bitcoin core [0.15.0](https://bitcoin.org/en/release/v0.15.0) and [0.15.1](https://bitcoin.org/en/release/v0.15.1)
    * Fix a bug with reindexing when the data directory is empty
    * Prevent sending QRC20 tokens to P2SH Qtum addresses in the Qt wallet
    * Restore JS number as string support for `callcontract` and `sendtocontract` rpc calls
    * Fix a bug where the wrong block hash would be stored in the transaction receipt for miners with `-logevents` enabled
* v0.14.16 - Improvments and Bug fixes
    * Fixed a bug where transactions with low fees would get stuck in the local mempool.
    * Fix a bug with clearing cache of StorageResults
    * Add contract support to ""createrawtransaction"" rpc call
    * Add sender support to ""sendtoaddress"" rpc call
* v0.14.15 - Recommended Update
    * Add EVM global variables to callcontract
    * Update gitian build script
    * Update CentOS build instructions
    * Add exception data to TransactionReceipt
    * Fixed a bug where the gas price could not be parsed correctly on certain platforms (reported by APIS)
    * Fixed a bug where the logs were not reverted on disconnect block in certain cases
* v0.14.14 - Mandatory Update
    * New Qt GUI
    * Fix Qt wallet freeze when syncing from scratch with `-logevents` or `-reindex`
    * Fix a bug with cacheUTXO (hardfork at block 100000 in mainnet, 84500 in testnet)
    * Add update checking functionality to Qt wallet
    * Fix a bug in token transfers history dates
    * Fix a bug with searchlogs rpc call
    * Add an extra check when adding token addresses
    * Fix compatibility with boost 1.66 
    * Add checkpoints
    * Update nMinimumChainWork and defaultAssumeValid chain params
    * Add minmempoolgaslimit startup argument
    * Add Gitian build signatures
* v0.14.13 - Mandatory Update
    * Fix a callcontract bug which in very specific cases could cause the node to fail to sync the blockchain
    * Add ability to save and restore contract addresses and ABI data
    * Make the token confirmation view data correct
* v0.14.12 - Recommended Update
    * Added option to disable change address usage
    * Fixed bug where heavy RPC usage could cause the wallet to crash
* v0.14.11 - Optional Update
    * Changed our versioning scheme to be consistent and avoid the two version number confusion
    * Add feature to restore wallet in the Qt wallet
    * Add new RPC call ""waitforlogs"" that is particularly useful for Dapp developers
    * Add long-polling support to the gettransaction RPC call
* v1.1.4 - Recommended update
    * Fixed a bug that would cause syncing to stop
    * Fixed a bug that would cause the wallet to crash when using -logevents
* v1.1.3 - Highly recommended update
    * Fixed a bug that caused contact addresses to show in receive token address dropdown
* v1.1.2 - Optional update, but recommended if using QRC tokens
    * Fixed a bug with token transactions where the transaction ID displayed was incorrect in the Qt wallet
    * Allow adding 0 balance addresses as the token receiver in the Qt wallet
* v1.1.1: When sending to contracts, the sender address is now the default change address to reduce confusion; fix -salvagewallet so it works with token transactions
* v1.1.0: Add GUI support Qtum QRC tokens, allowing full management of tokens on the Qtum blockchain from the Qt wallet
    * Sending to a contract no longer requires ABI data, allowing easy participation in simple crowdsale contracts
* v1.0.4: Fix bug where certain circumstances when staking could cause the displayed balance to be inaccurate until completely redownloading the blockchain.
* v1.0.3: Fix staker bug that reported false messages; slightly increases staking performance; optimize staker parameters; fix white send button in GUI
* v1.0.2: Various UI fixes, minor gas overflow consensus fix, per-txout exploit fix, testnet mode setup and functioning
* v1.0.1: Fixed network magic bytes and minimum version to ensure the main network does not conflict with the Skynet network
* v1.0: Initial release

Reindex Required When Upgrading from v1.0.1
----------------------------------------------

When you first start the Qtum 1.0.2 GUI wallet after using Qtum v1.0.1 it will prompt you that it must reindex the database. This is normal and is a result of switching our internal database format from per-transaction to per-txout. If you use `qtumd -daemon` it will silently fail to start. You need to use `qtumd -daemon -reindex` in this case. 

Qtum Documentation and Usage Resources
---------------

Basic usage resources:

* [Official Qtum Usage Guide](https://github.com/qtumproject/qtum/wiki/Qtum-Wallet-Tutorial)
* [Unofficial Qtum staking tutorial](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtum-qt)
* [Unofficial Qtum staking tutorial on Raspberry Pi](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtumd-on-a-raspberry-pi-3)
* [Unofficial guide for keeping your wallet safe](https://steemit.com/qtum/@cryptominder/encrypting-backing-up-and-restoring-your-qtum-wallet)
* [Block explorer](https://explorer.qtum.org)
* [Unofficial block explorer](https://qtumexplorer.io/)
* [Unofficial Raspberry Pi Web UI](https://github.com/rpiwalletui/qtum-ui)

Development resources:

* [Deploying a custom token to Qtum](https://blog.qtum.org/qtum-custom-token-walkthrough-467d725fa27d)
* [Early example faucet contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet)
* [Unofficial Qtum Hello World tutorial](https://steemit.com/qtum/@cryptominder/quantum-qtum-blockchain-developer-tutorial-hello-world)

General Info about Qtum:

* [Mainnet event AMA](https://www.reddit.com/r/Qtum/comments/6zs8t0/official_qtum_ama_thread_starts_at_10pm_beijing/)
* [Qtum's PoS vs CASPER](https://www.reddit.com/r/Qtum/comments/788oa5/qtums_pos_vs_casper_and_the_nothingatstake_problem/)
* [Technical article explaining Qtum's PoS model in depth](http://earlz.net/view/2017/07/27/1904/the-missing-explanation-of-proof-of-stake-version)
* [Unofficial What is Qtum article](https://storeofvalue.github.io/posts/what-is-qtum-without-the-bullshit/)

Quickstart
----------

The easiest way to get started with Qtum is to simply download the binaries below. To give a brief breakdown of the different versions available: 

#### Windows

* [qtum-0.14.16-win64.zip](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.16/qtum-0.14.16-win64.zip) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using Windows.
* [qtum-0.14.16-win64-setup-unsigned.exe](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.16/qtum-0.14.16-win64-setup-unsigned.exe) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using Windows. This includes an installer and will install Qtum system wide.
* [qtum-0.14.16-win32.zip](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.16/qtum-0.14.16-win32.zip) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 machines using Windows. If you have an older Windows computer and don't care about installing Qtum system-wide, 
* [qtum-0.14.16-win32-setup-unsigned.exe](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.16/qtum-0.14.16-win32-setup-unsigned.exe) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 machines using Windows. This includes an installer and will install Qtum system wide. If you have an older Windows computer and want to install Qtum then this is for you.

#### OSX

* [qtum-0.14.16-osx64.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.16/qtum-0.14.16-osx64.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using OSX. If you use a modern Mac and want development tools, this is what you want; we do not support older 32bit or PowerPC based Macs.
* [qtum-0.14.16-osx-unsigned.dmg](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.16/qtum-0.14.16-osx-unsigned.dmg) - A version of Qtum-Qt built for 64bit x86 machines using OSX in a .DMG installable format. If you use a modern Mac and aren't a developer, this is what you want; we do not support older 32bit or PowerPC based Macs.

#### Linux

* [qtum-0.14.16-i686-pc-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.16/qtum-0.14.16-i686-pc-linux-gnu.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 PC platforms running Linux. This is probably what you want for older computers running Linux
* [qtum-0.14.16-x86_64-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.16/qtum-0.14.16-x86_64-linux-gnu.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 PC platforms running Linux. This is probably what you want for any modern PC or server running Linux
* [qtum-0.14.16-arm-linux-gnueabihf.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.16/qtum-0.14.16-arm-linux-gnueabihf.tar.gz) - A version of qtumd and qtum-cli built for 32bit ARM platforms using Linux. This includes the Raspberry Pi and many of it's clones
* [qtum-0.14.16-aarch64-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.16/qtum-0.14.16-aarch64-linux-gnu.tar.gz) - A version of qtumd and qtum-cli built for 64bit ARM platforms using Linux

Below in the full list of binaries, there are also versions that include debug symbols. These are useful for developers, but will run slower and are significantly larger to download. 

#### Build Qtum Core

If you want to build it from source, it's recommended to follow the specific [""build"" documentation](https://github.com/qtumproject/qtum/tree/testnet-2/doc) for your platform. But mostly it boils down to the following:

1. Clone the qtum source code and cd into `qtum`

        git clone --recursive https://github.com/qtumproject/qtum.git
        cd qtum


2.  Build qtum-core:

    Configure and build the headless qtum binaries as well as the GUI (if Qt is found).

    You can disable the GUI build by passing `--without-gui` to configure.

        ./autogen.sh
        ./configure
        make

3.  It is recommended to build and run the unit tests to ensure everything is working correctly:

        make check


If you encounter an error like:

> make[2]: *** No rule to make target ‘cpp-ethereum/utils/libscrypt/b64.c’, needed by ‘cpp-ethereum/utils/libscrypt/libbitcoinconsensus_la-b64.lo’.  Stop.

Then you did not checkout the cpp-ethereum submodule for Qtum. To do that, simply:

    cd qtum
    git submodule update --init --recursive

Validate and Reproduce Binaries
---------------------------------

Qtum uses a tool called Gitian to make reproducible builds that can be verified by anyone. Instructions on setting up a Gitian VM and building Qtum are provided [in doc/gitian-building.md](https://github.com/qtumproject/qtum/blob/master/doc/gitian-building.md)

Community Resources
---------

Make sure to check out these resources as well for more information and to keep up to date with all the latest news about Qtum. At least 1 developer is always around, so if you're developing on Qtum and need help, we'd love to welcome you to our community.  

* [/r/Qtum on Reddit](https://www.reddit.com/r/Qtum/)
* [Qtum Telegram Group](https://t.me/joinchat/D5oBaw29NeOdpw6qqqf2lw)
* [@QtumOfficial on Twitter](https://mobile.twitter.com/qtumofficial)
* [Qtum on Facebook](https://www.facebook.com/QtumOfficial/)
* [Qtum Forum](https://forum.qtum.org/)
* [Qtum.org](https://qtum.org/en/)


Qtum Smart Contract Limitations
-----------

* EVM smart contracts can not receive coins from or send coins to any address type other than pay-to-pubkeyhash (starts with Q) addresses. This is due to a limitation in the EVM
* Contracts are not allowed to create contracts with an initial endowment of coins. The contract must first be created, and then be sent coins in a separate transaction. Humans are also not allowed to create contracts with an initial endowment of coins.
* Although all of the infrastructure is present, Qtum Core does not currently parse Solidity event data. You must parse this yourself using either `searchlogs` or `-record-log-opcodes` features.
* It is not possible to send a contract coins without also executing the contract. This is also the case of Ethereum. This was promised in earlier discussions and technically does work, but due to lack of time for testing this feature was disabled. We hope to reenable this feature with release of the x86 virtual machine in 2018.
* In Qtum there can be multiple addresses used to create a proof-of-stake block. However, the EVM can only see the first output using the `coinbase` operation in Solidity (this address is also the one registered for the continuous staker rewards after 500 blocks). 

Hash Validation
----------------

```

If you would like to validate that the binaries you download are exactly the same as those provided and built by the Qtum team, then you can compare your binaries to the following sha256sum hashes:

ff3596f35ecbb4860e6cfae1e5dbb0250d3bd9d02229fb70b79713e3dfb464e6  qtum-0.15.2-osx-unsigned.dmg
d7743f125bdfcbacb0fdb91e56c201830bc811beca00933bb12a7df4bfcd6170  qtum-0.15.2-osx-unsigned.tar.gz
59c19cb01fffb7d3d8322ce661c13e39e52dd7234cd64d1dcda3bd824e5e20a7  qtum-0.15.2-osx64.tar.gz
4997afd7234dba6ddefd6095de5896af31dc8bc34e42e9230ac0dfa60e0e335e  src/qtum-0.15.2.tar.gz
0802d2758deae068fe15f9b00cf6dda3ead07db871d5a5d01ce266e32cc60fcb  qtum-osx-0.15-res.yml

1f2f2fc3419ad62ae6acd419e923c233c4b60230f5cd57047c7f3e76ed2c3225  qtum-0.15.2-win-unsigned.tar.gz
b38f58c1302b4bba87885df0cc69a742e5fa4da5a9fbedbf334e48992612e849  qtum-0.15.2-win32-debug.zip
a7ed7e407909002988aa373573221775635053596f81e67437e96e2cf0e790c1  qtum-0.15.2-win32-setup-unsigned.exe
76c7167d950c1358f0f30974a2a630886e857437006a0ef085c0517c13ce9e9b  qtum-0.15.2-win32.zip
c5bede598250a0df1ae1e660cf53b7636dc8854b55ddeab5234f4260512bb573  qtum-0.15.2-win64-debug.zip
eba9deed892b53184e8314d89a887d47cb81575253c454ac602dd30cfebb663e  qtum-0.15.2-win64-setup-unsigned.exe
67daef12f795176e1be03f79c2da236bb970ff9ab3b6ae8409f0de6122868105  qtum-0.15.2-win64.zip
e5c64c20a9f4a0c475a3a4d8092a6419c9016b2a7d9ca7beb5ffea5e50cb841a  src/qtum-0.15.2.tar.gz
a5aa0a87511a190a8b78d4e6939c4285c30e8f9d194399b7a9a878c1589b87e4  qtum-win-0.15-res.yml

4b034ded5df6ce044d3274e00070a848b514d48ff098a457827306d84f605cd2  qtum-0.15.2-aarch64-linux-gnu-debug.tar.gz
00a7a4b3fc991e30f1fbf6c90da2eb1e7c7bce2294459524a98922fd0972f7fe  qtum-0.15.2-aarch64-linux-gnu.tar.gz
dffc9f2723a47a4247158feb658df3947e276473860a06941bbd37a1785b60cc  qtum-0.15.2-arm-linux-gnueabihf-debug.tar.gz
eab3b82b718053e543f834c8866d8f37da9f76c64de212cfe9721bc94a5dd5dd  qtum-0.15.2-arm-linux-gnueabihf.tar.gz
80a02a6ada95154e5a11902ed6f7934974dacba2e82b1cef60882964920f0324  qtum-0.15.2-i686-pc-linux-gnu-debug.tar.gz
83cc859f6e65690bd6133c64684ab71c6118e5398492ffa300156defbd72d948  qtum-0.15.2-i686-pc-linux-gnu.tar.gz
2d428f3537e8e9e73241e8c441fbf9d2f3320697c1cda5745be2c7fae7c778a1  qtum-0.15.2-x86_64-linux-gnu-debug.tar.gz
25cc7cec21029afc1eaec5e154a230f2337910e266a56fbd810d95de98115309  qtum-0.15.2-x86_64-linux-gnu.tar.gz
4997afd7234dba6ddefd6095de5896af31dc8bc34e42e9230ac0dfa60e0e335e  src/qtum-0.15.2.tar.gz
9d851119aef9cc349d95dc528abe5e3d70b462dac4c2c551c2f98cceb768ed5d  qtum-linux-0.15-res.yml


```",83774906
909,False,False,2018-05-25T14:10:24Z,2018-05-25T17:45:27Z,"About Qtum and Mainnet Ignition
-------------------------------

Qtum is a decentralized blockchain project built on Bitcoin's UTXO model, with support for Ethereum Virtual Machine based smart contracts, and secured by a proof of stake consensus model. It achieves this through the revolutionary Account Abstraction Layer which allows the EVM to communicate with Qtum's Bitcoin-like UTXO blockchain. For more general information about Qtum as well as links to join our community, go to https://qtum.org

Welcome to the Qtum Ignition Main Network. This is the main network where the tokens hold value and should be guarded very carefully. There will be a testnet setup soon for developers, in the meantime you can use `-regtest` mode for testing needs. We will announce details about the token swap from QTUM ERC20 coins to QTUM mainnet tokens soon, watch our [website](https://qtum.org) for details about that.  

The major features implemented in Qtum Ignition include:

1. The Ethereum Virtual Machine, which allows for compatibility with most existing Solidity based smart contracts.
2. The Smart Staking Protocol is complete, which is an optimized Proof of Stake implementation designed for a smart contract platform (however, smart contracts can not participate in staking yet).
3. An early and basic smart contract GUI has been implemented that can be used for creating contracts, sending data and Qtum to them, and checking their status by executing them locally. This functionality is similar to Mist's UI right now, but it is still an early version. We will be working on this more to improve it. 
4. Regtest mode, which is ideal for developers who wish to create their own private blockchain. It is tuned specifically to make development easier. It will stake blocks automatically every 30 seconds, and can generate proof-of-work blocks instantly as needed.
5. The Decentralized Governance Protocol is completely implemented and functional, which allows certain network parameters to be modified without a fork.

For more technical information for how to start developing with Qtum please read the [Guide](https://github.com/qtumproject/qtum/blob/master/doc/sparknet-guide.md) and also see this tutorial for deploying a simple [faucet smart contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet) (it hasn't yet been updated for Mainnet for obvious reasons, but all the instructions are the same and you can try them in regtest mode)

Note: Qtum Core is considered beta software. We make no warranties or guarantees of its security or stability.

Update History
--------------
* v0.15.1 - Upgrade Qtum core to bitcoin core 0.15.1 and bug fixes
    * Upgrade Qtum core code to bitcoin core 0.15.1 with important performance improvments and other features, read more about bitcoin core [0.15.0](https://bitcoin.org/en/release/v0.15.0) and [0.15.1](https://bitcoin.org/en/release/v0.15.1)
    * Fix a bug with reindexing when the data directory is empty
    * Prevent sending QRC20 tokens to P2SH Qtum addresses in the Qt wallet
    * Restore JS number as string support for `callcontract` and `sendtocontract` rpc calls
    * Fix a bug where the wrong block hash would be stored in the transaction receipt for miners with `-logevents` enabled
* v0.14.16 - Improvments and Bug fixes
    * Fixed a bug where transactions with low fees would get stuck in the local mempool.
    * Fix a bug with clearing cache of StorageResults
    * Add contract support to ""createrawtransaction"" rpc call
    * Add sender support to ""sendtoaddress"" rpc call
* v0.14.15 - Recommended Update
    * Add EVM global variables to callcontract
    * Update gitian build script
    * Update CentOS build instructions
    * Add exception data to TransactionReceipt
    * Fixed a bug where the gas price could not be parsed correctly on certain platforms (reported by APIS)
    * Fixed a bug where the logs were not reverted on disconnect block in certain cases
* v0.14.14 - Mandatory Update
    * New Qt GUI
    * Fix Qt wallet freeze when syncing from scratch with `-logevents` or `-reindex`
    * Fix a bug with cacheUTXO (hardfork at block 100000 in mainnet, 84500 in testnet)
    * Add update checking functionality to Qt wallet
    * Fix a bug in token transfers history dates
    * Fix a bug with searchlogs rpc call
    * Add an extra check when adding token addresses
    * Fix compatibility with boost 1.66 
    * Add checkpoints
    * Update nMinimumChainWork and defaultAssumeValid chain params
    * Add minmempoolgaslimit startup argument
    * Add Gitian build signatures
* v0.14.13 - Mandatory Update
    * Fix a callcontract bug which in very specific cases could cause the node to fail to sync the blockchain
    * Add ability to save and restore contract addresses and ABI data
    * Make the token confirmation view data correct
* v0.14.12 - Recommended Update
    * Added option to disable change address usage
    * Fixed bug where heavy RPC usage could cause the wallet to crash
* v0.14.11 - Optional Update
    * Changed our versioning scheme to be consistent and avoid the two version number confusion
    * Add feature to restore wallet in the Qt wallet
    * Add new RPC call ""waitforlogs"" that is particularly useful for Dapp developers
    * Add long-polling support to the gettransaction RPC call
* v1.1.4 - Recommended update
    * Fixed a bug that would cause syncing to stop
    * Fixed a bug that would cause the wallet to crash when using -logevents
* v1.1.3 - Highly recommended update
    * Fixed a bug that caused contact addresses to show in receive token address dropdown
* v1.1.2 - Optional update, but recommended if using QRC tokens
    * Fixed a bug with token transactions where the transaction ID displayed was incorrect in the Qt wallet
    * Allow adding 0 balance addresses as the token receiver in the Qt wallet
* v1.1.1: When sending to contracts, the sender address is now the default change address to reduce confusion; fix -salvagewallet so it works with token transactions
* v1.1.0: Add GUI support Qtum QRC tokens, allowing full management of tokens on the Qtum blockchain from the Qt wallet
    * Sending to a contract no longer requires ABI data, allowing easy participation in simple crowdsale contracts
* v1.0.4: Fix bug where certain circumstances when staking could cause the displayed balance to be inaccurate until completely redownloading the blockchain.
* v1.0.3: Fix staker bug that reported false messages; slightly increases staking performance; optimize staker parameters; fix white send button in GUI
* v1.0.2: Various UI fixes, minor gas overflow consensus fix, per-txout exploit fix, testnet mode setup and functioning
* v1.0.1: Fixed network magic bytes and minimum version to ensure the main network does not conflict with the Skynet network
* v1.0: Initial release

Reindex Required When Upgrading from v1.0.1
----------------------------------------------

When you first start the Qtum 1.0.2 GUI wallet after using Qtum v1.0.1 it will prompt you that it must reindex the database. This is normal and is a result of switching our internal database format from per-transaction to per-txout. If you use `qtumd -daemon` it will silently fail to start. You need to use `qtumd -daemon -reindex` in this case. 

Qtum Documentation and Usage Resources
---------------

Basic usage resources:

* [Official Qtum Usage Guide](https://github.com/qtumproject/qtum/wiki/Qtum-Wallet-Tutorial)
* [Unofficial Qtum staking tutorial](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtum-qt)
* [Unofficial Qtum staking tutorial on Raspberry Pi](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtumd-on-a-raspberry-pi-3)
* [Unofficial guide for keeping your wallet safe](https://steemit.com/qtum/@cryptominder/encrypting-backing-up-and-restoring-your-qtum-wallet)
* [Block explorer](https://explorer.qtum.org)
* [Unofficial block explorer](https://qtumexplorer.io/)
* [Unofficial Raspberry Pi Web UI](https://github.com/rpiwalletui/qtum-ui)

Development resources:

* [Deploying a custom token to Qtum](https://blog.qtum.org/qtum-custom-token-walkthrough-467d725fa27d)
* [Early example faucet contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet)
* [Unofficial Qtum Hello World tutorial](https://steemit.com/qtum/@cryptominder/quantum-qtum-blockchain-developer-tutorial-hello-world)

General Info about Qtum:

* [Mainnet event AMA](https://www.reddit.com/r/Qtum/comments/6zs8t0/official_qtum_ama_thread_starts_at_10pm_beijing/)
* [Qtum's PoS vs CASPER](https://www.reddit.com/r/Qtum/comments/788oa5/qtums_pos_vs_casper_and_the_nothingatstake_problem/)
* [Technical article explaining Qtum's PoS model in depth](http://earlz.net/view/2017/07/27/1904/the-missing-explanation-of-proof-of-stake-version)
* [Unofficial What is Qtum article](https://storeofvalue.github.io/posts/what-is-qtum-without-the-bullshit/)

Quickstart
----------

The easiest way to get started with Qtum is to simply download the binaries below. To give a brief breakdown of the different versions available: 

#### Windows

* [qtum-0.14.16-win64.zip](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.16/qtum-0.14.16-win64.zip) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using Windows.
* [qtum-0.14.16-win64-setup-unsigned.exe](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.16/qtum-0.14.16-win64-setup-unsigned.exe) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using Windows. This includes an installer and will install Qtum system wide.
* [qtum-0.14.16-win32.zip](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.16/qtum-0.14.16-win32.zip) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 machines using Windows. If you have an older Windows computer and don't care about installing Qtum system-wide, 
* [qtum-0.14.16-win32-setup-unsigned.exe](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.16/qtum-0.14.16-win32-setup-unsigned.exe) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 machines using Windows. This includes an installer and will install Qtum system wide. If you have an older Windows computer and want to install Qtum then this is for you.

#### OSX

* [qtum-0.14.16-osx64.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.16/qtum-0.14.16-osx64.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using OSX. If you use a modern Mac and want development tools, this is what you want; we do not support older 32bit or PowerPC based Macs.
* [qtum-0.14.16-osx-unsigned.dmg](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.16/qtum-0.14.16-osx-unsigned.dmg) - A version of Qtum-Qt built for 64bit x86 machines using OSX in a .DMG installable format. If you use a modern Mac and aren't a developer, this is what you want; we do not support older 32bit or PowerPC based Macs.

#### Linux

* [qtum-0.14.16-i686-pc-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.16/qtum-0.14.16-i686-pc-linux-gnu.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 PC platforms running Linux. This is probably what you want for older computers running Linux
* [qtum-0.14.16-x86_64-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.16/qtum-0.14.16-x86_64-linux-gnu.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 PC platforms running Linux. This is probably what you want for any modern PC or server running Linux
* [qtum-0.14.16-arm-linux-gnueabihf.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.16/qtum-0.14.16-arm-linux-gnueabihf.tar.gz) - A version of qtumd and qtum-cli built for 32bit ARM platforms using Linux. This includes the Raspberry Pi and many of it's clones
* [qtum-0.14.16-aarch64-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.16/qtum-0.14.16-aarch64-linux-gnu.tar.gz) - A version of qtumd and qtum-cli built for 64bit ARM platforms using Linux

Below in the full list of binaries, there are also versions that include debug symbols. These are useful for developers, but will run slower and are significantly larger to download. 

#### Build Qtum Core

If you want to build it from source, it's recommended to follow the specific [""build"" documentation](https://github.com/qtumproject/qtum/tree/testnet-2/doc) for your platform. But mostly it boils down to the following:

1. Clone the qtum source code and cd into `qtum`

        git clone --recursive https://github.com/qtumproject/qtum.git
        cd qtum


2.  Build qtum-core:

    Configure and build the headless qtum binaries as well as the GUI (if Qt is found).

    You can disable the GUI build by passing `--without-gui` to configure.

        ./autogen.sh
        ./configure
        make

3.  It is recommended to build and run the unit tests to ensure everything is working correctly:

        make check


If you encounter an error like:

> make[2]: *** No rule to make target ‘cpp-ethereum/utils/libscrypt/b64.c’, needed by ‘cpp-ethereum/utils/libscrypt/libbitcoinconsensus_la-b64.lo’.  Stop.

Then you did not checkout the cpp-ethereum submodule for Qtum. To do that, simply:

    cd qtum
    git submodule update --init --recursive

Validate and Reproduce Binaries
---------------------------------

Qtum uses a tool called Gitian to make reproducible builds that can be verified by anyone. Instructions on setting up a Gitian VM and building Qtum are provided [in doc/gitian-building.md](https://github.com/qtumproject/qtum/blob/master/doc/gitian-building.md)

Community Resources
---------

Make sure to check out these resources as well for more information and to keep up to date with all the latest news about Qtum. At least 1 developer is always around, so if you're developing on Qtum and need help, we'd love to welcome you to our community.  

* [/r/Qtum on Reddit](https://www.reddit.com/r/Qtum/)
* [Qtum Telegram Group](https://t.me/joinchat/D5oBaw29NeOdpw6qqqf2lw)
* [@QtumOfficial on Twitter](https://mobile.twitter.com/qtumofficial)
* [Qtum on Facebook](https://www.facebook.com/QtumOfficial/)
* [Qtum Forum](https://forum.qtum.org/)
* [Qtum.org](https://qtum.org/en/)


Qtum Smart Contract Limitations
-----------

* EVM smart contracts can not receive coins from or send coins to any address type other than pay-to-pubkeyhash (starts with Q) addresses. This is due to a limitation in the EVM
* Contracts are not allowed to create contracts with an initial endowment of coins. The contract must first be created, and then be sent coins in a separate transaction. Humans are also not allowed to create contracts with an initial endowment of coins.
* Although all of the infrastructure is present, Qtum Core does not currently parse Solidity event data. You must parse this yourself using either `searchlogs` or `-record-log-opcodes` features.
* It is not possible to send a contract coins without also executing the contract. This is also the case of Ethereum. This was promised in earlier discussions and technically does work, but due to lack of time for testing this feature was disabled. We hope to reenable this feature with release of the x86 virtual machine in 2018.
* In Qtum there can be multiple addresses used to create a proof-of-stake block. However, the EVM can only see the first output using the `coinbase` operation in Solidity (this address is also the one registered for the continuous staker rewards after 500 blocks). 

Hash Validation
----------------

```

If you would like to validate that the binaries you download are exactly the same as those provided and built by the Qtum team, then you can compare your binaries to the following sha256sum hashes:

6b9fd3d7540a2ac8d9c4d663cb6b3825709f662e7cdda4bc2126bd2f16e77ddc  qtum-0.15.1-osx-unsigned.dmg
5816f034afc97d8044ea3258f28c2dc683617f56a7318df8fec2a06b2f40eb92  qtum-0.15.1-osx-unsigned.tar.gz
7c8d354bedc68e00c9f95cbf8dd074155813f76ccc45897eead069b6a9bdb44a  qtum-0.15.1-osx64.tar.gz
eb01738f50b176e7ce5cbfe3c6f8eb0422465b6ebb5a0f89a7b67a9b32a4f31e  src/qtum-0.15.1.tar.gz
9458c6c1bbb3658a1df737e42d024b0557980a0e6feba0c376555134bd6895e8  qtum-osx-0.15-res.yml

9c24c3707e58b1eab778052e6aeabe02f4bb50f10865e1115e90933e4dacc6d6  qtum-0.15.1-win-unsigned.tar.gz
764f490f666762d1a0a86307e021ceaca992500e6ae567dab0918020eb1e4bd2  qtum-0.15.1-win32-debug.zip
7fa4c9db809ff8846d47e28acc5bc9c5333eb18d3cd153cc592ec61119b0818c  qtum-0.15.1-win32-setup-unsigned.exe
aab23440b33b9fa98c89c5eca8c6d28604052565157e22fbd76a5d73485f513e  qtum-0.15.1-win32.zip
d98664ed75770b688d9819299aa51f051861c629220894eb18e5b5963d99643e  qtum-0.15.1-win64-debug.zip
ce2f6af9c7903eff438b9c65962296dc8e04cb0b714d1e8243e3893bcd4dfea8  qtum-0.15.1-win64-setup-unsigned.exe
586fd942e64198806d733459c7457a4c360e6910765c8e5465c4519ba6853e85  qtum-0.15.1-win64.zip
ddf19a98a6528b614eb8120330a29ce0044c5e8a67b62158a1ac4c86418f0553  src/qtum-0.15.1.tar.gz
d4b5422c8694c93ac6c7a80a896774dd2011f607a9434e146bc0e6b07166ecf7  qtum-win-0.15-res.yml

32296f601de1add111f1991325636cab41aa4e976a9d5a5345d8982b8e515059  qtum-0.15.1-aarch64-linux-gnu-debug.tar.gz
f60a5b29bc9c145185de8f330c26b0adc7db7a1389142ec65015fee08e96a1d8  qtum-0.15.1-aarch64-linux-gnu.tar.gz
49dd806e53b517ebffd99d3c6aa4cf81b108a3bc9ad4b38cb6d0271240435e46  qtum-0.15.1-arm-linux-gnueabihf-debug.tar.gz
ea7f2387c44960ab4a76f10a5127305df0f579cfac653a32f9007b3c46132e91  qtum-0.15.1-arm-linux-gnueabihf.tar.gz
117e4013e24db323afacd9df03237551f9f45affa4b11edf9c7a93a5b0b96330  qtum-0.15.1-i686-pc-linux-gnu-debug.tar.gz
09032e9b83eaf7e408106e5ac86a6e7e9562d123a339692a87bbc83f25347b02  qtum-0.15.1-i686-pc-linux-gnu.tar.gz
9f08826caf5a11b07ab274e07e66869ce6141c49e0444b03f34635e95bf7b937  qtum-0.15.1-x86_64-linux-gnu-debug.tar.gz
9667475f686b5a6782e71ec920b6f9791f144cacde3a87dee987e0605f170808  qtum-0.15.1-x86_64-linux-gnu.tar.gz
eb01738f50b176e7ce5cbfe3c6f8eb0422465b6ebb5a0f89a7b67a9b32a4f31e  src/qtum-0.15.1.tar.gz
871bde7bfd9c3a02389e4dae69113958680c69aa22a2a3275c0b7d995eadc3d5  qtum-linux-0.15-res.yml


```",83774906
910,False,False,2018-04-03T05:39:13Z,2018-04-03T08:50:44Z,"About Qtum and Mainnet Ignition
-------------------------------

Qtum is a decentralized blockchain project built on Bitcoin's UTXO model, with support for Ethereum Virtual Machine based smart contracts, and secured by a proof of stake consensus model. It achieves this through the revolutionary Account Abstraction Layer which allows the EVM to communicate with Qtum's Bitcoin-like UTXO blockchain. For more general information about Qtum as well as links to join our community, go to https://qtum.org

Welcome to the Qtum Ignition Main Network. This is the main network where the tokens hold value and should be guarded very carefully. There will be a testnet setup soon for developers, in the meantime you can use `-regtest` mode for testing needs. We will announce details about the token swap from QTUM ERC20 coins to QTUM mainnet tokens soon, watch our [website](https://qtum.org) for details about that.  

The major features implemented in Qtum Ignition include:

1. The Ethereum Virtual Machine, which allows for compatibility with most existing Solidity based smart contracts.
2. The Smart Staking Protocol is complete, which is an optimized Proof of Stake implementation designed for a smart contract platform (however, smart contracts can not participate in staking yet).
3. An early and basic smart contract GUI has been implemented that can be used for creating contracts, sending data and Qtum to them, and checking their status by executing them locally. This functionality is similar to Mist's UI right now, but it is still an early version. We will be working on this more to improve it. 
4. Regtest mode, which is ideal for developers who wish to create their own private blockchain. It is tuned specifically to make development easier. It will stake blocks automatically every 30 seconds, and can generate proof-of-work blocks instantly as needed.
5. The Decentralized Governance Protocol is completely implemented and functional, which allows certain network parameters to be modified without a fork.

For more technical information for how to start developing with Qtum please read the [Guide](https://github.com/qtumproject/qtum/blob/master/doc/sparknet-guide.md) and also see this tutorial for deploying a simple [faucet smart contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet) (it hasn't yet been updated for Mainnet for obvious reasons, but all the instructions are the same and you can try them in regtest mode)

Note: Qtum Core is considered beta software. We make no warranties or guarantees of its security or stability.

Update History
--------------
* v0.14.16 - Improvments and Bug fixes
    * Fixed a bug where transactions with low fees would get stuck in the local mempool.
    * Fix a bug with clearing cache of StorageResults
    * Add contract support to ""createrawtransaction"" rpc call
    * Add sender support to ""sendtoaddress"" rpc call
* v0.14.15 - Recommended Update
    * Add EVM global variables to callcontract
    * Update gitian build script
    * Update CentOS build instructions
    * Add exception data to TransactionReceipt
    * Fixed a bug where the gas price could not be parsed correctly on certain platforms (reported by APIS)
    * Fixed a bug where the logs were not reverted on disconnect block in certain cases
* v0.14.14 - Mandatory Update
    * New Qt GUI
    * Fix Qt wallet freeze when syncing from scratch with `-logevents` or `-reindex`
    * Fix a bug with cacheUTXO (hardfork at block 100000 in mainnet, 84500 in testnet)
    * Add update checking functionality to Qt wallet
    * Fix a bug in token transfers history dates
    * Fix a bug with searchlogs rpc call
    * Add an extra check when adding token addresses
    * Fix compatibility with boost 1.66 
    * Add checkpoints
    * Update nMinimumChainWork and defaultAssumeValid chain params
    * Add minmempoolgaslimit startup argument
    * Add Gitian build signatures
* v0.14.13 - Mandatory Update
    * Fix a callcontract bug which in very specific cases could cause the node to fail to sync the blockchain
    * Add ability to save and restore contract addresses and ABI data
    * Make the token confirmation view data correct
* v0.14.12 - Recommended Update
    * Added option to disable change address usage
    * Fixed bug where heavy RPC usage could cause the wallet to crash
* v0.14.11 - Optional Update
    * Changed our versioning scheme to be consistent and avoid the two version number confusion
    * Add feature to restore wallet in the Qt wallet
    * Add new RPC call ""waitforlogs"" that is particularly useful for Dapp developers
    * Add long-polling support to the gettransaction RPC call
* v1.1.4 - Recommended update
    * Fixed a bug that would cause syncing to stop
    * Fixed a bug that would cause the wallet to crash when using -logevents
* v1.1.3 - Highly recommended update
    * Fixed a bug that caused contact addresses to show in receive token address dropdown
* v1.1.2 - Optional update, but recommended if using QRC tokens
    * Fixed a bug with token transactions where the transaction ID displayed was incorrect in the Qt wallet
    * Allow adding 0 balance addresses as the token receiver in the Qt wallet
* v1.1.1: When sending to contracts, the sender address is now the default change address to reduce confusion; fix -salvagewallet so it works with token transactions
* v1.1.0: Add GUI support Qtum QRC tokens, allowing full management of tokens on the Qtum blockchain from the Qt wallet
    * Sending to a contract no longer requires ABI data, allowing easy participation in simple crowdsale contracts
* v1.0.4: Fix bug where certain circumstances when staking could cause the displayed balance to be inaccurate until completely redownloading the blockchain.
* v1.0.3: Fix staker bug that reported false messages; slightly increases staking performance; optimize staker parameters; fix white send button in GUI
* v1.0.2: Various UI fixes, minor gas overflow consensus fix, per-txout exploit fix, testnet mode setup and functioning
* v1.0.1: Fixed network magic bytes and minimum version to ensure the main network does not conflict with the Skynet network
* v1.0: Initial release

Reindex Required When Upgrading from v1.0.1
----------------------------------------------

When you first start the Qtum 1.0.2 GUI wallet after using Qtum v1.0.1 it will prompt you that it must reindex the database. This is normal and is a result of switching our internal database format from per-transaction to per-txout. If you use `qtumd -daemon` it will silently fail to start. You need to use `qtumd -daemon -reindex` in this case. 

Qtum Documentation and Usage Resources
---------------

Basic usage resources:

* [Official Qtum Usage Guide](https://github.com/qtumproject/qtum/wiki/Qtum-Wallet-Tutorial)
* [Unofficial Qtum staking tutorial](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtum-qt)
* [Unofficial Qtum staking tutorial on Raspberry Pi](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtumd-on-a-raspberry-pi-3)
* [Unofficial guide for keeping your wallet safe](https://steemit.com/qtum/@cryptominder/encrypting-backing-up-and-restoring-your-qtum-wallet)
* [Block explorer](https://explorer.qtum.org)
* [Unofficial block explorer](https://qtumexplorer.io/)
* [Unofficial Raspberry Pi Web UI](https://github.com/rpiwalletui/qtum-ui)

Development resources:

* [Deploying a custom token to Qtum](https://blog.qtum.org/qtum-custom-token-walkthrough-467d725fa27d)
* [Early example faucet contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet)
* [Unofficial Qtum Hello World tutorial](https://steemit.com/qtum/@cryptominder/quantum-qtum-blockchain-developer-tutorial-hello-world)

General Info about Qtum:

* [Mainnet event AMA](https://www.reddit.com/r/Qtum/comments/6zs8t0/official_qtum_ama_thread_starts_at_10pm_beijing/)
* [Qtum's PoS vs CASPER](https://www.reddit.com/r/Qtum/comments/788oa5/qtums_pos_vs_casper_and_the_nothingatstake_problem/)
* [Technical article explaining Qtum's PoS model in depth](http://earlz.net/view/2017/07/27/1904/the-missing-explanation-of-proof-of-stake-version)
* [Unofficial What is Qtum article](https://storeofvalue.github.io/posts/what-is-qtum-without-the-bullshit/)

Quickstart
----------

The easiest way to get started with Qtum is to simply download the binaries below. To give a brief breakdown of the different versions available: 

#### Windows

* [qtum-0.14.16-win64.zip](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.16/qtum-0.14.16-win64.zip) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using Windows.
* [qtum-0.14.16-win64-setup-unsigned.exe](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.16/qtum-0.14.16-win64-setup-unsigned.exe) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using Windows. This includes an installer and will install Qtum system wide.
* [qtum-0.14.16-win32.zip](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.16/qtum-0.14.16-win32.zip) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 machines using Windows. If you have an older Windows computer and don't care about installing Qtum system-wide, 
* [qtum-0.14.16-win32-setup-unsigned.exe](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.16/qtum-0.14.16-win32-setup-unsigned.exe) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 machines using Windows. This includes an installer and will install Qtum system wide. If you have an older Windows computer and want to install Qtum then this is for you.

#### OSX

* [qtum-0.14.16-osx64.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.16/qtum-0.14.16-osx64.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using OSX. If you use a modern Mac and want development tools, this is what you want; we do not support older 32bit or PowerPC based Macs.
* [qtum-0.14.16-osx-unsigned.dmg](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.16/qtum-0.14.16-osx-unsigned.dmg) - A version of Qtum-Qt built for 64bit x86 machines using OSX in a .DMG installable format. If you use a modern Mac and aren't a developer, this is what you want; we do not support older 32bit or PowerPC based Macs.

#### Linux

* [qtum-0.14.16-i686-pc-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.16/qtum-0.14.16-i686-pc-linux-gnu.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 PC platforms running Linux. This is probably what you want for older computers running Linux
* [qtum-0.14.16-x86_64-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.16/qtum-0.14.16-x86_64-linux-gnu.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 PC platforms running Linux. This is probably what you want for any modern PC or server running Linux
* [qtum-0.14.16-arm-linux-gnueabihf.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.16/qtum-0.14.16-arm-linux-gnueabihf.tar.gz) - A version of qtumd and qtum-cli built for 32bit ARM platforms using Linux. This includes the Raspberry Pi and many of it's clones
* [qtum-0.14.16-aarch64-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.16/qtum-0.14.16-aarch64-linux-gnu.tar.gz) - A version of qtumd and qtum-cli built for 64bit ARM platforms using Linux

Below in the full list of binaries, there are also versions that include debug symbols. These are useful for developers, but will run slower and are significantly larger to download. 

#### Build Qtum Core

If you want to build it from source, it's recommended to follow the specific [""build"" documentation](https://github.com/qtumproject/qtum/tree/testnet-2/doc) for your platform. But mostly it boils down to the following:

1. Clone the qtum source code and cd into `qtum`

        git clone --recursive https://github.com/qtumproject/qtum.git
        cd qtum


2.  Build qtum-core:

    Configure and build the headless qtum binaries as well as the GUI (if Qt is found).

    You can disable the GUI build by passing `--without-gui` to configure.

        ./autogen.sh
        ./configure
        make

3.  It is recommended to build and run the unit tests to ensure everything is working correctly:

        make check


If you encounter an error like:

> make[2]: *** No rule to make target ‘cpp-ethereum/utils/libscrypt/b64.c’, needed by ‘cpp-ethereum/utils/libscrypt/libbitcoinconsensus_la-b64.lo’.  Stop.

Then you did not checkout the cpp-ethereum submodule for Qtum. To do that, simply:

    cd qtum
    git submodule update --init --recursive

Validate and Reproduce Binaries
---------------------------------

Qtum uses a tool called Gitian to make reproducible builds that can be verified by anyone. Instructions on setting up a Gitian VM and building Qtum are provided [in doc/gitian-building.md](https://github.com/qtumproject/qtum/blob/master/doc/gitian-building.md)

Community Resources
---------

Make sure to check out these resources as well for more information and to keep up to date with all the latest news about Qtum. At least 1 developer is always around, so if you're developing on Qtum and need help, we'd love to welcome you to our community.  

* [/r/Qtum on Reddit](https://www.reddit.com/r/Qtum/)
* [Qtum Telegram Group](https://t.me/joinchat/D5oBaw29NeOdpw6qqqf2lw)
* [@QtumOfficial on Twitter](https://mobile.twitter.com/qtumofficial)
* [Qtum on Facebook](https://www.facebook.com/QtumOfficial/)
* [Qtum Forum](https://forum.qtum.org/)
* [Qtum.org](https://qtum.org/en/)


Qtum Smart Contract Limitations
-----------

* EVM smart contracts can not receive coins from or send coins to any address type other than pay-to-pubkeyhash (starts with Q) addresses. This is due to a limitation in the EVM
* Contracts are not allowed to create contracts with an initial endowment of coins. The contract must first be created, and then be sent coins in a separate transaction. Humans are also not allowed to create contracts with an initial endowment of coins.
* Although all of the infrastructure is present, Qtum Core does not currently parse Solidity event data. You must parse this yourself using either `searchlogs` or `-record-log-opcodes` features.
* It is not possible to send a contract coins without also executing the contract. This is also the case of Ethereum. This was promised in earlier discussions and technically does work, but due to lack of time for testing this feature was disabled. We hope to reenable this feature with release of the x86 virtual machine in 2018.
* In Qtum there can be multiple addresses used to create a proof-of-stake block. However, the EVM can only see the first output using the `coinbase` operation in Solidity (this address is also the one registered for the continuous staker rewards after 500 blocks). 

Hash Validation
----------------

```

If you would like to validate that the binaries you download are exactly the same as those provided and built by the Qtum team, then you can compare your binaries to the following sha256sum hashes:

fb0043ccfd64a6ab6b17f3b76f8c2001c161879306fc8b79229191f432df4d10  qtum-0.14.16-osx-unsigned.dmg
c8d946aa1d47146724f5fcb7945674424170102c639dd84ca113db9a78948563  qtum-0.14.16-osx-unsigned.tar.gz
0d11bf7c15694eb0ce429c9a4e9032020d4530f4b10dc9b23f5998fece3fe9b0  qtum-0.14.16-osx64.tar.gz
5d621c1dbe3086fade0fb40f5bba0bb7b7b4405423a95b875990269168fc022d  src/qtum-0.14.16.tar.gz
e41c006e64a1ad82c083598a1df168b7b08cded5d4813a554da109c3c1f2a81f  qtum-osx-0.14-res.yml

bf823903871e5732810ff6a02b73fef867bfe48574c1e29e92dc201902ebd7b9  qtum-0.14.16-aarch64-linux-gnu-debug.tar.gz
c7cd750f3ada4e4024a4d95c89bc75c16c95aa1faa94dd282a79c0cdbdc50363  qtum-0.14.16-aarch64-linux-gnu.tar.gz
f9d43ad5d50e156287f161a07589dcf047fc3125ce40d9f51007a541eb10c1b8  qtum-0.14.16-arm-linux-gnueabihf-debug.tar.gz
cbf88206bfff102fe3c440357a2b533460a0c75176c3bed4071daea85130d877  qtum-0.14.16-arm-linux-gnueabihf.tar.gz
b8caeadab66096eda1b8a95411ce6403dc4cc7c60e8ddd33c7c3e94f81a25e38  qtum-0.14.16-i686-pc-linux-gnu-debug.tar.gz
57f4a98c9c5053baa7029eaafa14d5080c8a566960efca372fa607dee7c42234  qtum-0.14.16-i686-pc-linux-gnu.tar.gz
a740adea6ee5148dc357f91493a70adc09faedda8ebe9e1401e73fedda9a029d  qtum-0.14.16-x86_64-linux-gnu-debug.tar.gz
3b77a798aa846fa14fd5eb677161e94ae8f41ea8fcb760356cdab129bb5e065f  qtum-0.14.16-x86_64-linux-gnu.tar.gz
5d621c1dbe3086fade0fb40f5bba0bb7b7b4405423a95b875990269168fc022d  src/qtum-0.14.16.tar.gz
e766dc418e8aa48c767f54ff80725eed8a61265a4f19c965229e435df85656f9  qtum-linux-0.14-res.yml

e9cd6ed753eb0bf83b0a083dc0cbb1ddf9794a8fb963a37677b9b2377bd7826f  qtum-0.14.16-win-unsigned.tar.gz
7476ae4f9124f6bd72165e33b6232fab1be5852581c831d235cd70f439fb5af0  qtum-0.14.16-win32-debug.zip
e9d6c499f47a9a847a22809262cde1ffdb9c840c03d9ecf814564792119b6a87  qtum-0.14.16-win32-setup-unsigned.exe
7e5a6947c18d1216a7d864da66be16b9526c2f5f857e983be0eccde8d4e5196a  qtum-0.14.16-win32.zip
ec05a3668ea88666efb3f31e2c4697f02d8744d80d0b71573bf03e1111a5d082  qtum-0.14.16-win64-debug.zip
620f2bdfd496748f1ed8b62289fc35543370f6177d4510b6a7b73b991e1c1121  qtum-0.14.16-win64-setup-unsigned.exe
c525893ddfd0d803b8eff8b5b5aa4547ad120087cd009dfc8f4791f94560d9b3  qtum-0.14.16-win64.zip
55f106ba2428aad868dd5103f8ebd435f650e9abeee24ef64c1ef3acb580be15  src/qtum-0.14.16.tar.gz
7057cd3e1920b91738cc896bb4d858ffff064a44080616c1a27d14d36cb481c8  qtum-win-0.14-res.yml


```",83774906
911,False,False,2018-02-24T07:51:44Z,2018-02-24T18:36:17Z,"About Qtum and Mainnet Ignition
-------------------------------

Qtum is a decentralized blockchain project built on Bitcoin's UTXO model, with support for Ethereum Virtual Machine based smart contracts, and secured by a proof of stake consensus model. It achieves this through the revolutionary Account Abstraction Layer which allows the EVM to communicate with Qtum's Bitcoin-like UTXO blockchain. For more general information about Qtum as well as links to join our community, go to https://qtum.org

Welcome to the Qtum Ignition Main Network. This is the main network where the tokens hold value and should be guarded very carefully. There will be a testnet setup soon for developers, in the meantime you can use `-regtest` mode for testing needs. We will announce details about the token swap from QTUM ERC20 coins to QTUM mainnet tokens soon, watch our [website](https://qtum.org) for details about that.  

The major features implemented in Qtum Ignition include:

1. The Ethereum Virtual Machine, which allows for compatibility with most existing Solidity based smart contracts.
2. The Smart Staking Protocol is complete, which is an optimized Proof of Stake implementation designed for a smart contract platform (however, smart contracts can not participate in staking yet).
3. An early and basic smart contract GUI has been implemented that can be used for creating contracts, sending data and Qtum to them, and checking their status by executing them locally. This functionality is similar to Mist's UI right now, but it is still an early version. We will be working on this more to improve it. 
4. Regtest mode, which is ideal for developers who wish to create their own private blockchain. It is tuned specifically to make development easier. It will stake blocks automatically every 30 seconds, and can generate proof-of-work blocks instantly as needed.
5. The Decentralized Governance Protocol is completely implemented and functional, which allows certain network parameters to be modified without a fork.

For more technical information for how to start developing with Qtum please read the [Guide](https://github.com/qtumproject/qtum/blob/master/doc/sparknet-guide.md) and also see this tutorial for deploying a simple [faucet smart contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet) (it hasn't yet been updated for Mainnet for obvious reasons, but all the instructions are the same and you can try them in regtest mode)

Note: Qtum Core is considered beta software. We make no warranties or guarantees of its security or stability.

Update History
--------------

* v0.14.15 - Recommended Update
    * Add EVM global variables to callcontract
    * Update gitian build script
    * Update CentOS build instructions
    * Add exception data to TransactionReceipt
    * Fixed a bug where the gas price could not be parsed correctly on certain platforms (reported by APIS)
    * Fixed a bug where the logs were not reverted on disconnect block in certain cases
* v0.14.14 - Mandatory Update
    * New Qt GUI
    * Fix Qt wallet freeze when syncing from scratch with `-logevents` or `-reindex`
    * Fix a bug with cacheUTXO (hardfork at block 100000 in mainnet, 84500 in testnet)
    * Add update checking functionality to Qt wallet
    * Fix a bug in token transfers history dates
    * Fix a bug with searchlogs rpc call
    * Add an extra check when adding token addresses
    * Fix compatibility with boost 1.66 
    * Add checkpoints
    * Update nMinimumChainWork and defaultAssumeValid chain params
    * Add minmempoolgaslimit startup argument
    * Add Gitian build signatures
* v0.14.13 - Mandatory Update
    * Fix a callcontract bug which in very specific cases could cause the node to fail to sync the blockchain
    * Add ability to save and restore contract addresses and ABI data
    * Make the token confirmation view data correct
* v0.14.12 - Recommended Update
    * Added option to disable change address usage
    * Fixed bug where heavy RPC usage could cause the wallet to crash
* v0.14.11 - Optional Update
    * Changed our versioning scheme to be consistent and avoid the two version number confusion
    * Add feature to restore wallet in the Qt wallet
    * Add new RPC call ""waitforlogs"" that is particularly useful for Dapp developers
    * Add long-polling support to the gettransaction RPC call
* v1.1.4 - Recommended update
    * Fixed a bug that would cause syncing to stop
    * Fixed a bug that would cause the wallet to crash when using -logevents
* v1.1.3 - Highly recommended update
    * Fixed a bug that caused contact addresses to show in receive token address dropdown
* v1.1.2 - Optional update, but recommended if using QRC tokens
    * Fixed a bug with token transactions where the transaction ID displayed was incorrect in the Qt wallet
    * Allow adding 0 balance addresses as the token receiver in the Qt wallet
* v1.1.1: When sending to contracts, the sender address is now the default change address to reduce confusion; fix -salvagewallet so it works with token transactions
* v1.1.0: Add GUI support Qtum QRC tokens, allowing full management of tokens on the Qtum blockchain from the Qt wallet
    * Sending to a contract no longer requires ABI data, allowing easy participation in simple crowdsale contracts
* v1.0.4: Fix bug where certain circumstances when staking could cause the displayed balance to be inaccurate until completely redownloading the blockchain.
* v1.0.3: Fix staker bug that reported false messages; slightly increases staking performance; optimize staker parameters; fix white send button in GUI
* v1.0.2: Various UI fixes, minor gas overflow consensus fix, per-txout exploit fix, testnet mode setup and functioning
* v1.0.1: Fixed network magic bytes and minimum version to ensure the main network does not conflict with the Skynet network
* v1.0: Initial release

Reindex Required When Upgrading from v1.0.1
----------------------------------------------

When you first start the Qtum 1.0.2 GUI wallet after using Qtum v1.0.1 it will prompt you that it must reindex the database. This is normal and is a result of switching our internal database format from per-transaction to per-txout. If you use `qtumd -daemon` it will silently fail to start. You need to use `qtumd -daemon -reindex` in this case. 

Qtum Documentation and Usage Resources
---------------

Basic usage resources:

* [Official Qtum Usage Guide](https://github.com/qtumproject/qtum/wiki/Qtum-Wallet-Tutorial)
* [Unofficial Qtum staking tutorial](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtum-qt)
* [Unofficial Qtum staking tutorial on Raspberry Pi](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtumd-on-a-raspberry-pi-3)
* [Unofficial guide for keeping your wallet safe](https://steemit.com/qtum/@cryptominder/encrypting-backing-up-and-restoring-your-qtum-wallet)
* [Block explorer](https://explorer.qtum.org)
* [Unofficial block explorer](https://qtumexplorer.io/)
* [Unofficial Raspberry Pi Web UI](https://github.com/rpiwalletui/qtum-ui)

Development resources:

* [Deploying a custom token to Qtum](https://blog.qtum.org/qtum-custom-token-walkthrough-467d725fa27d)
* [Early example faucet contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet)
* [Unofficial Qtum Hello World tutorial](https://steemit.com/qtum/@cryptominder/quantum-qtum-blockchain-developer-tutorial-hello-world)

General Info about Qtum:

* [Mainnet event AMA](https://www.reddit.com/r/Qtum/comments/6zs8t0/official_qtum_ama_thread_starts_at_10pm_beijing/)
* [Qtum's PoS vs CASPER](https://www.reddit.com/r/Qtum/comments/788oa5/qtums_pos_vs_casper_and_the_nothingatstake_problem/)
* [Technical article explaining Qtum's PoS model in depth](http://earlz.net/view/2017/07/27/1904/the-missing-explanation-of-proof-of-stake-version)
* [Unofficial What is Qtum article](https://storeofvalue.github.io/posts/what-is-qtum-without-the-bullshit/)

Quickstart
----------

The easiest way to get started with Qtum is to simply download the binaries below. To give a brief breakdown of the different versions available: 

#### Windows

* [qtum-0.14.15-win64.zip](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.15/qtum-0.14.15-win64.zip) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using Windows.
* [qtum-0.14.15-win64-setup-unsigned.exe](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.15/qtum-0.14.15-win64-setup-unsigned.exe) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using Windows. This includes an installer and will install Qtum system wide.
* [qtum-0.14.15-win32.zip](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.15/qtum-0.14.15-win32.zip) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 machines using Windows. If you have an older Windows computer and don't care about installing Qtum system-wide, 
* [qtum-0.14.15-win32-setup-unsigned.exe](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.15/qtum-0.14.15-win32-setup-unsigned.exe) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 machines using Windows. This includes an installer and will install Qtum system wide. If you have an older Windows computer and want to install Qtum then this is for you.

#### OSX

* [qtum-0.14.15-osx64.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.15/qtum-0.14.15-osx64.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using OSX. If you use a modern Mac and want development tools, this is what you want; we do not support older 32bit or PowerPC based Macs.
* [qtum-0.14.15-osx-unsigned.dmg](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.15/qtum-0.14.15-osx-unsigned.dmg) - A version of Qtum-Qt built for 64bit x86 machines using OSX in a .DMG installable format. If you use a modern Mac and aren't a developer, this is what you want; we do not support older 32bit or PowerPC based Macs.

#### Linux

* [qtum-0.14.15-i686-pc-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.15/qtum-0.14.15-i686-pc-linux-gnu.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 PC platforms running Linux. This is probably what you want for older computers running Linux
* [qtum-0.14.15-x86_64-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.15/qtum-0.14.15-x86_64-linux-gnu.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 PC platforms running Linux. This is probably what you want for any modern PC or server running Linux
* [qtum-0.14.15-arm-linux-gnueabihf.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.15/qtum-0.14.15-arm-linux-gnueabihf.tar.gz) - A version of qtumd and qtum-cli built for 32bit ARM platforms using Linux. This includes the Raspberry Pi and many of it's clones
* [qtum-0.14.15-aarch64-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.15/qtum-0.14.15-aarch64-linux-gnu.tar.gz) - A version of qtumd and qtum-cli built for 64bit ARM platforms using Linux

Below in the full list of binaries, there are also versions that include debug symbols. These are useful for developers, but will run slower and are significantly larger to download. 

#### Build Qtum Core

If you want to build it from source, it's recommended to follow the specific [""build"" documentation](https://github.com/qtumproject/qtum/tree/testnet-2/doc) for your platform. But mostly it boils down to the following:

1. Clone the qtum source code and cd into `qtum`

        git clone --recursive https://github.com/qtumproject/qtum.git
        cd qtum


2.  Build qtum-core:

    Configure and build the headless qtum binaries as well as the GUI (if Qt is found).

    You can disable the GUI build by passing `--without-gui` to configure.

        ./autogen.sh
        ./configure
        make

3.  It is recommended to build and run the unit tests to ensure everything is working correctly:

        make check


If you encounter an error like:

> make[2]: *** No rule to make target ‘cpp-ethereum/utils/libscrypt/b64.c’, needed by ‘cpp-ethereum/utils/libscrypt/libbitcoinconsensus_la-b64.lo’.  Stop.

Then you did not checkout the cpp-ethereum submodule for Qtum. To do that, simply:

    cd qtum
    git submodule update --init --recursive

Validate and Reproduce Binaries
---------------------------------

Qtum uses a tool called Gitian to make reproducible builds that can be verified by anyone. Instructions on setting up a Gitian VM and building Qtum are provided [in doc/gitian-building.md](https://github.com/qtumproject/qtum/blob/master/doc/gitian-building.md)

Community Resources
---------

Make sure to check out these resources as well for more information and to keep up to date with all the latest news about Qtum. At least 1 developer is always around, so if you're developing on Qtum and need help, we'd love to welcome you to our community.  

* [/r/Qtum on Reddit](https://www.reddit.com/r/Qtum/)
* [Qtum Telegram Group](https://t.me/joinchat/D5oBaw29NeOdpw6qqqf2lw)
* [@QtumOfficial on Twitter](https://mobile.twitter.com/qtumofficial)
* [Qtum on Facebook](https://www.facebook.com/QtumOfficial/)
* [Qtum Forum](https://forum.qtum.org/)
* [Qtum.org](https://qtum.org/en/)


Qtum Smart Contract Limitations
-----------

* EVM smart contracts can not receive coins from or send coins to any address type other than pay-to-pubkeyhash (starts with Q) addresses. This is due to a limitation in the EVM
* Contracts are not allowed to create contracts with an initial endowment of coins. The contract must first be created, and then be sent coins in a separate transaction. Humans are also not allowed to create contracts with an initial endowment of coins.
* Although all of the infrastructure is present, Qtum Core does not currently parse Solidity event data. You must parse this yourself using either `searchlogs` or `-record-log-opcodes` features.
* It is not possible to send a contract coins without also executing the contract. This is also the case of Ethereum. This was promised in earlier discussions and technically does work, but due to lack of time for testing this feature was disabled. We hope to reenable this feature with release of the x86 virtual machine in 2018.
* In Qtum there can be multiple addresses used to create a proof-of-stake block. However, the EVM can only see the first output using the `coinbase` operation in Solidity (this address is also the one registered for the continuous staker rewards after 500 blocks). 

Hash Validation
----------------

```
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

If you would like to validate that the binaries you download are exactly the same as those provided and built by the Qtum team, then you can compare your binaries to the following sha256sum hashes:

2b2ee97aa6e5716ff8f6bb0539fb551ccfe768070225b95822c33b9263a2d8ab  qtum-0.14.15-osx-unsigned.dmg
ad99fffb0032996ed939b7221587936311cd45813ef355c1819d5e4dbafb8bfb  qtum-0.14.15-osx-unsigned.tar.gz
0118de6e0021c3a4087a9d408b937dedb1743ca7f3b79b0abc0da812eb9c0003  qtum-0.14.15-osx64.tar.gz
f7adccfeb1f3d160e12b1f121a2b11c687bbb89c6e0dfb55f19a1875d529ab9a  src/qtum-0.14.15.tar.gz
127059a716f56d09e9b09009a2ec98731cbf0fd6a5378c29928bc13829a71ac3  qtum-osx-0.14-res.yml

b73be79a0e26e36bbc0b4fb8707541c7d3e775b6b0c2df78664c945e9b1f0724  qtum-0.14.15-aarch64-linux-gnu-debug.tar.gz
38a8ef0a43d5464f70c2278d6c3087712aa1dda27a9014ecb68f0de5cf05e9c8  qtum-0.14.15-aarch64-linux-gnu.tar.gz
45fcf7f08e432f9de5daf81bea0ab21bbc5a91f3b44d26578a666dab0a474b78  qtum-0.14.15-arm-linux-gnueabihf-debug.tar.gz
6aedaddc8356aee6da96f8c8ad268a5d172a72ff9e1897936dd4fa9c363589b9  qtum-0.14.15-arm-linux-gnueabihf.tar.gz
8da41bcbba9e0d3057365f3bfe11f60992bc3600fd6e0a5f1051ec360453e960  qtum-0.14.15-i686-pc-linux-gnu-debug.tar.gz
4d138562a6930d57e89382c91f899912fed73b3b076a9eac54899c2c89c32db8  qtum-0.14.15-i686-pc-linux-gnu.tar.gz
33b8646cf26008b0954fc152bfe14ceee2e8bb874ec072b9540e4c01295cdb81  qtum-0.14.15-x86_64-linux-gnu-debug.tar.gz
00e81a7ab8a8d8a17fbfb0e0b70e425d6057b71b8139357d8ea65e8b9b8f577b  qtum-0.14.15-x86_64-linux-gnu.tar.gz
f7adccfeb1f3d160e12b1f121a2b11c687bbb89c6e0dfb55f19a1875d529ab9a  src/qtum-0.14.15.tar.gz
5e4a25188225eb86d20f06f57fe9e372d7be9c4d1a75e49ae280770019828f00  qtum-linux-0.14-res.yml

6c206976eee01b3cc042ac6c6dc39e17b813886a0d35574ec041302eb74a94f7  qtum-0.14.15-win-unsigned.tar.gz
3a3a77f91a09a64265b5ed65654a59160ca18e476f215b7113da31921fe84c6c  qtum-0.14.15-win32-debug.zip
b0011c8e292165e7fe666535d7dd360d2658d58149df2f93da28472d17344e80  qtum-0.14.15-win32-setup-unsigned.exe
63f6a4a1d3efc292f9ca1be15f9ab92dd9ebdf20b31290d8d6ef3fd85fdcb8f5  qtum-0.14.15-win32.zip
135ed29e378fec9fd6bd47dd4d426340e1b2e2823b1a998d73ba7ffc49d6a22b  qtum-0.14.15-win64-debug.zip
2c9818641c518eb6a86558efc1818eee599f0c123c1646b1e3b474c5771e6c57  qtum-0.14.15-win64-setup-unsigned.exe
a726ba2f04bfcb431ba0de4ccedd645ae3901d0e78e945db1c1492d0d9d5e2b7  qtum-0.14.15-win64.zip
d24e348484ee762701278d0488c87c595aa9d6e36f1ec10ff6674fdee3fd3479  src/qtum-0.14.15.tar.gz
6a8689f39df7ee6b9a592b7ea3bdf7dbaca105b577a9fa94f78a520465b6f6c4  qtum-win-0.14-res.yml

You can validate this message is from Earlz at https://keybase.io/verify
-----BEGIN PGP SIGNATURE-----
Version: Keybase OpenPGP v2.0.76
Comment: https://keybase.io/crypto

wsFcBAABCgAGBQJakav0AAoJEAKXMK2l7Ra+sjMQAKECHkLD27yV2UzQM8Yi/eBC
a+o5ynUox7mFeJa81cby8zZa/WusR1QW/JUYDlGDZsOdH/yuVwVLiN3Q23+FD/W6
ErTvujzpytP2r44XJ76bQirZkaGhMOvj2ym5tlifAIqbh4x2dKzMyaNdUKxwnl0f
TxK60GgxFwOFkMVVRBNBUPCDUvK3PlWr6Kg5WMcLQfEOdTqJOfZr8vwYtyie3TrY
BfoyqOlKE3iOppy+PQcWScxNcGyajCgUuhulRFe6fbDv/hWbls7zK1MLyLHj1HW1
JbEY9QKnAUK0kXhtCwIV88hAX70x6N347ProvVGMqKtZ+aEBfcIYjTcgaVvlhOfL
Z25lQF0NGLTAUnyiRAQA8Hyt/Ya56W/90zCKc1/+uxemqQmQimFmDEplJE5q0553
WdbDoY7m4eazsKcnN1klixZwRVmPhdJMeY5BRuP+tmmv/ALBbikXZSuTzC6o/Z35
3AerPmirz06f1+cDQY9KygKpeqHK8CSH4vxDxsalZjJlNsYPUgij8XNYy/66DxNK
mxwMcnN4L8nv1hqDoVdDY1wZW9eq5M+8PMKBoB1p3tZxux8/mYs+iWUf9SKaBk47
BnVhdqes4EbduzvtmPQakHXiZTt/Ck51YF415hpER/Cwgtz3mmjAUFVhzyGVdnp0
gWmOn0octmyCoj6s97+W
=72jT
-----END PGP SIGNATURE-----

```
",83774906
912,False,False,2018-02-04T22:52:55Z,2018-02-05T08:26:25Z,"Update History
--------------
* v0.14.14 - Mandatory Update
	* New Qt GUI
	* Fix Qt wallet freeze when syncing from scratch with `-logevents` or `-reindex`
	* Fix a bug with cacheUTXO (hardfork at block 100000 in mainnet, 84500 in testnet)
	* Add update checking functionality to Qt wallet
	* Fix a bug in token transfers history dates
	* Fix a bug with searchlogs rpc call
	* Add an extra check when adding token addresses
	* Fix compatibility with boost 1.66 
	* Add checkpoints
	* Update nMinimumChainWork and defaultAssumeValid chain params
	* Add minmempoolgaslimit startup argument
	* Add Gitian build signatures
* v0.14.13 - Mandatory Update
    * Fix a callcontract bug which in very specific cases could cause the node to fail to sync the blockchain
    * Add ability to save and restore contract addresses and ABI data
    * Make the token confirmation view data correct
* v0.14.12 - Recommended Update
    * Added option to disable change address usage
    * Fixed bug where heavy RPC usage could cause the wallet to crash
* v0.14.11 - Optional Update
    * Changed our versioning scheme to be consistent and avoid the two version number confusion
    * Add feature to restore wallet in the Qt wallet
    * Add new RPC call ""waitforlogs"" that is particularly useful for Dapp developers
    * Add long-polling support to the gettransaction RPC call
* v1.1.4 - Recommended update
    * Fixed a bug that would cause syncing to stop
    * Fixed a bug that would cause the wallet to crash when using -logevents
* v1.1.3 - Highly recommended update
    * Fixed a bug that caused contact addresses to show in receive token address dropdown
* v1.1.2 - Optional update, but recommended if using QRC tokens
    * Fixed a bug with token transactions where the transaction ID displayed was incorrect in the Qt wallet
    * Allow adding 0 balance addresses as the token receiver in the Qt wallet
* v1.1.1: When sending to contracts, the sender address is now the default change address to reduce confusion; fix -salvagewallet so it works with token transactions
* v1.1.0: Add GUI support Qtum QRC tokens, allowing full management of tokens on the Qtum blockchain from the Qt wallet
    * Sending to a contract no longer requires ABI data, allowing easy participation in simple crowdsale contracts
* v1.0.4: Fix bug where certain circumstances when staking could cause the displayed balance to be inaccurate until completely redownloading the blockchain.
* v1.0.3: Fix staker bug that reported false messages; slightly increases staking performance; optimize staker parameters; fix white send button in GUI
* v1.0.2: Various UI fixes, minor gas overflow consensus fix, per-txout exploit fix, testnet mode setup and functioning
* v1.0.1: Fixed network magic bytes and minimum version to ensure the main network does not conflict with the Skynet network
* v1.0: Initial release

Validate and Reproduce Binaries
---------------------------------

Qtum uses a tool called Gitian to make reproducible builds that can be verified by anyone. Instructions on setting up a Gitian VM and building Qtum are provided [in doc/gitian-building.md](https://github.com/qtumproject/qtum/blob/master/doc/gitian-building.md)


Hash Validation
----------------

```
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

f888c4a55d2870ac801b34effd6802cc2180400b13067659154bc517d17214dc  qtum-0.14.14-aarch64-linux-gnu-debug.tar.gz
7a8e77482fea09510090c07bfe9185964eb5c6c54d64fa4e6674eb5d869b819d  qtum-0.14.14-aarch64-linux-gnu.tar.gz
9f706b2569b7346c2a1b966eaae8462f4f939b785271278ca86c4abde59a32be  qtum-0.14.14-arm-linux-gnueabihf-debug.tar.gz
618c9e36bfe7f207e92bbec29423f863fc4f0acd4d85d29fd18ad10cc2a8aac8  qtum-0.14.14-arm-linux-gnueabihf.tar.gz
99906b9f459dd803bbe74fa1289dab4a58252aec134c3c035a70efb593da53e7  qtum-0.14.14-i686-pc-linux-gnu-debug.tar.gz
da5c78cc24aaab0842b30dc8f2128034e3d10f7243415c01ab5267fd47dcefcc  qtum-0.14.14-i686-pc-linux-gnu.tar.gz
dd77ff7a4f1f32e11713c9054ec6cc6627e1ae82b42119d06da1c7c175dedc53  qtum-0.14.14-x86_64-linux-gnu-debug.tar.gz
ac5c959139bfa40826ffa5631e23d7a5aec9c7455dfd5f6134f69eeb8d6de683  qtum-0.14.14-x86_64-linux-gnu.tar.gz

d4b3542b1c8388647747ddfdb642a14b40381172768308984829601f133124fe  qtum-0.14.14-osx-unsigned.dmg
4fd99775afbc86838e1ba4aaee91275e46e7e374b5e9d4a1af09ecb5f9e4cc94  qtum-0.14.14-osx-unsigned.tar.gz
f916ffb8b85a436b6bde7d4c58af5d8636cb2e1cc6e341af90abcb9c116a3e9b  qtum-0.14.14-osx64.tar.gz

9cd24e078bce2e836db5b0de43810d06134e4d0c94b820d42a35ceb2faabb5eb  qtum-0.14.14-win-unsigned.tar.gz
1a247ab8296ccabd7c947fa6885293d1d0c4be2bf34e923dd4fe0cac118ccc6e  qtum-0.14.14-win32-debug.zip
a9a71be2969e0f4c3bde97c90f33ada46b221783b8eb165390c582ee9ce12cec  qtum-0.14.14-win32-setup-unsigned.exe
fd0bbfa39b0a154b0d460a94cd0541b205ad00e05d3a5c59133ad0e2091ff7f5  qtum-0.14.14-win32.zip
0893c6d3326f3b8252c0a739fa0bf757d1219ca3844e8822ce6ff8fc725e9af1  qtum-0.14.14-win64-debug.zip
78286f1fdbdb8b9758aef3981bdbe06c600d63fc00da5e321987b5fadea2db9e  qtum-0.14.14-win64-setup-unsigned.exe
31a2bd7454a0499e345c8f40d61e481edbded53adc5f582cfbbdc68884fa8cfa  qtum-0.14.14-win64.zip

If you would like to validate that the binaries you download are exactly the same as those provided and built by the Qtum team, then you can compare your binaries to the following sha256sum hashes:


```
",83774906
913,False,False,2018-01-07T00:16:03Z,2018-01-08T14:55:40Z,"About Qtum and Mainnet Ignition
-------------------------------

Qtum is a decentralized blockchain project built on Bitcoin's UTXO model, with support for Ethereum Virtual Machine based smart contracts, and secured by a proof of stake consensus model. It achieves this through the revolutionary Account Abstraction Layer which allows the EVM to communicate with Qtum's Bitcoin-like UTXO blockchain. For more general information about Qtum as well as links to join our community, go to https://qtum.org

Welcome to the Qtum Ignition Main Network. This is the main network where the tokens hold value and should be guarded very carefully. There will be a testnet setup soon for developers, in the meantime you can use `-regtest` mode for testing needs. We will announce details about the token swap from QTUM ERC20 coins to QTUM mainnet tokens soon, watch our [website](https://qtum.org) for details about that.  

The major features implemented in Qtum Ignition include:

1. The Ethereum Virtual Machine, which allows for compatibility with most existing Solidity based smart contracts.
2. The Smart Staking Protocol is complete, which is an optimized Proof of Stake implementation designed for a smart contract platform (however, smart contracts can not participate in staking yet).
3. An early and basic smart contract GUI has been implemented that can be used for creating contracts, sending data and Qtum to them, and checking their status by executing them locally. This functionality is similar to Mist's UI right now, but it is still an early version. We will be working on this more to improve it. 
4. Regtest mode, which is ideal for developers who wish to create their own private blockchain. It is tuned specifically to make development easier. It will stake blocks automatically every 30 seconds, and can generate proof-of-work blocks instantly as needed.
5. The Decentralized Governance Protocol is completely implemented and functional, which allows certain network parameters to be modified without a fork.

For more technical information for how to start developing with Qtum please read the [Guide](https://github.com/qtumproject/qtum/blob/master/doc/sparknet-guide.md) and also see this tutorial for deploying a simple [faucet smart contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet) (it hasn't yet been updated for Mainnet for obvious reasons, but all the instructions are the same and you can try them in regtest mode)

Note: Qtum Core is considered beta software. We make no warranties or guarantees of its security or stability.

Update History
--------------

* v0.14.13 - Mandatory Update
    * Fix a callcontract bug which in very specific cases could cause the node to fail to sync the blockchain
    * Add ability to save and restore contract addresses and ABI data
    * Make the token confirmation view data correct
* v0.14.12 - Recommended Update
    * Added option to disable change address usage
    * Fixed bug where heavy RPC usage could cause the wallet to crash
* v0.14.11 - Optional Update
    * Changed our versioning scheme to be consistent and avoid the two version number confusion
    * Add feature to restore wallet in the Qt wallet
    * Add new RPC call ""waitforlogs"" that is particularly useful for Dapp developers
    * Add long-polling support to the gettransaction RPC call
* v1.1.4 - Recommended update
    * Fixed a bug that would cause syncing to stop
    * Fixed a bug that would cause the wallet to crash when using -logevents
* v1.1.3 - Highly recommended update
    * Fixed a bug that caused contact addresses to show in receive token address dropdown
* v1.1.2 - Optional update, but recommended if using QRC tokens
    * Fixed a bug with token transactions where the transaction ID displayed was incorrect in the Qt wallet
    * Allow adding 0 balance addresses as the token receiver in the Qt wallet
* v1.1.1: When sending to contracts, the sender address is now the default change address to reduce confusion; fix -salvagewallet so it works with token transactions
* v1.1.0: Add GUI support Qtum QRC tokens, allowing full management of tokens on the Qtum blockchain from the Qt wallet
    * Sending to a contract no longer requires ABI data, allowing easy participation in simple crowdsale contracts
* v1.0.4: Fix bug where certain circumstances when staking could cause the displayed balance to be inaccurate until completely redownloading the blockchain.
* v1.0.3: Fix staker bug that reported false messages; slightly increases staking performance; optimize staker parameters; fix white send button in GUI
* v1.0.2: Various UI fixes, minor gas overflow consensus fix, per-txout exploit fix, testnet mode setup and functioning
* v1.0.1: Fixed network magic bytes and minimum version to ensure the main network does not conflict with the Skynet network
* v1.0: Initial release

Reindex Required When Upgrading from v1.0.1
----------------------------------------------

When you first start the Qtum 1.0.2 GUI wallet after using Qtum v1.0.1 it will prompt you that it must reindex the database. This is normal and is a result of switching our internal database format from per-transaction to per-txout. If you use `qtumd -daemon` it will silently fail to start. You need to use `qtumd -daemon -reindex` in this case. 

Qtum Documentation and Usage Resources
---------------

Basic usage resources:

* [Official Qtum Usage Guide](https://github.com/qtumproject/qtum/wiki/Qtum-Wallet-Tutorial)
* [Unofficial Qtum staking tutorial](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtum-qt)
* [Unofficial Qtum staking tutorial on Raspberry Pi](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtumd-on-a-raspberry-pi-3)
* [Unofficial guide for keeping your wallet safe](https://steemit.com/qtum/@cryptominder/encrypting-backing-up-and-restoring-your-qtum-wallet)
* [Block explorer](https://explorer.qtum.org)
* [Unofficial block explorer](https://qtumexplorer.io/)
* [Unofficial Raspberry Pi Web UI](https://github.com/rpiwalletui/qtum-ui)

Development resources:

* [Deploying a custom token to Qtum](https://blog.qtum.org/qtum-custom-token-walkthrough-467d725fa27d)
* [Early example faucet contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet)
* [Unofficial Qtum Hello World tutorial](https://steemit.com/qtum/@cryptominder/quantum-qtum-blockchain-developer-tutorial-hello-world)

General Info about Qtum:

* [Mainnet event AMA](https://www.reddit.com/r/Qtum/comments/6zs8t0/official_qtum_ama_thread_starts_at_10pm_beijing/)
* [Qtum's PoS vs CASPER](https://www.reddit.com/r/Qtum/comments/788oa5/qtums_pos_vs_casper_and_the_nothingatstake_problem/)
* [Technical article explaining Qtum's PoS model in depth](http://earlz.net/view/2017/07/27/1904/the-missing-explanation-of-proof-of-stake-version)
* [Unofficial What is Qtum article](https://storeofvalue.github.io/posts/what-is-qtum-without-the-bullshit/)

Quickstart
----------

The easiest way to get started with Qtum is to simply download the binaries below. To give a brief breakdown of the different versions available: 

#### Windows

* [qtum-0.14.13-win64.zip](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.13/qtum-0.14.13-win64.zip) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using Windows.
* [qtum-0.14.13-win64-setup-unsigned.exe](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.13/qtum-0.14.13-win64-setup-unsigned.exe) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using Windows. This includes an installer and will install Qtum system wide.
* [qtum-0.14.13-win32.zip](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.13/qtum-0.14.13-win32.zip) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 machines using Windows. If you have an older Windows computer and don't care about installing Qtum system-wide, 
* [qtum-0.14.13-win32-setup-unsigned.exe](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.13/qtum-0.14.13-win32-setup-unsigned.exe) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 machines using Windows. This includes an installer and will install Qtum system wide. If you have an older Windows computer and want to install Qtum then this is for you.

#### OSX

* [qtum-0.14.13-osx64.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.13/qtum-0.14.13-osx64.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using OSX. If you use a modern Mac and want development tools, this is what you want; we do not support older 32bit or PowerPC based Macs.
* [qtum-0.14.13-osx-unsigned.dmg](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.13/qtum-0.14.13-osx-unsigned.dmg) - A version of Qtum-Qt built for 64bit x86 machines using OSX in a .DMG installable format. If you use a modern Mac and aren't a developer, this is what you want; we do not support older 32bit or PowerPC based Macs.

#### Linux

* [qtum-0.14.13-i686-pc-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.13/qtum-0.14.13-i686-pc-linux-gnu.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 PC platforms running Linux. This is probably what you want for older computers running Linux
* [qtum-0.14.13-x86_64-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.13/qtum-0.14.13-x86_64-linux-gnu.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 PC platforms running Linux. This is probably what you want for any modern PC or server running Linux
* [qtum-0.14.13-arm-linux-gnueabihf.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.13/qtum-0.14.13-arm-linux-gnueabihf.tar.gz) - A version of qtumd and qtum-cli built for 32bit ARM platforms using Linux. This includes the Raspberry Pi and many of it's clones
* [qtum-0.14.13-aarch64-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.13/qtum-0.14.13-aarch64-linux-gnu.tar.gz) - A version of qtumd and qtum-cli built for 64bit ARM platforms using Linux

Below in the full list of binaries, there are also versions that include debug symbols. These are useful for developers, but will run slower and are significantly larger to download. 

#### Build Qtum Core

If you want to build it from source, it's recommended to follow the specific [""build"" documentation](https://github.com/qtumproject/qtum/tree/testnet-2/doc) for your platform. But mostly it boils down to the following:

1. Clone the qtum source code and cd into `qtum`

        git clone --recursive https://github.com/qtumproject/qtum.git
        cd qtum


2.  Build qtum-core:

    Configure and build the headless qtum binaries as well as the GUI (if Qt is found).

    You can disable the GUI build by passing `--without-gui` to configure.

        ./autogen.sh
        ./configure
        make

3.  It is recommended to build and run the unit tests to ensure everything is working correctly:

        make check


If you encounter an error like:

> make[2]: *** No rule to make target ‘cpp-ethereum/utils/libscrypt/b64.c’, needed by ‘cpp-ethereum/utils/libscrypt/libbitcoinconsensus_la-b64.lo’.  Stop.

Then you did not checkout the cpp-ethereum submodule for Qtum. To do that, simply:

    cd qtum
    git submodule update --init --recursive

Validate and Reproduce Binaries
---------------------------------

Qtum uses a tool called Gitian to make reproducible builds that can be verified by anyone. Instructions on setting up a Gitian VM and building Qtum are provided [in doc/gitian-building.md](https://github.com/qtumproject/qtum/blob/master/doc/gitian-building.md)

Community Resources
---------

Make sure to check out these resources as well for more information and to keep up to date with all the latest news about Qtum. At least 1 developer is always around, so if you're developing on Qtum and need help, we'd love to welcome you to our community.  

* [/r/Qtum on Reddit](https://www.reddit.com/r/Qtum/)
* [Qtum Telegram Group](https://t.me/joinchat/D5oBaw29NeOdpw6qqqf2lw)
* [@QtumOfficial on Twitter](https://mobile.twitter.com/qtumofficial)
* [Qtum on Facebook](https://www.facebook.com/QtumOfficial/)
* [Qtum Forum](https://forum.qtum.org/)
* [Qtum.org](https://qtum.org/en/)


Qtum Smart Contract Limitations
-----------

* EVM smart contracts can not receive coins from or send coins to any address type other than pay-to-pubkeyhash (starts with Q) addresses. This is due to a limitation in the EVM
* Contracts are not allowed to create contracts with an initial endowment of coins. The contract must first be created, and then be sent coins in a separate transaction. Humans are also not allowed to create contracts with an initial endowment of coins.
* Although all of the infrastructure is present, Qtum Core does not currently parse Solidity event data. You must parse this yourself using either `searchlogs` or `-record-log-opcodes` features.
* It is not possible to send a contract coins without also executing the contract. This is also the case of Ethereum. This was promised in earlier discussions and technically does work, but due to lack of time for testing this feature was disabled. We hope to reenable this feature with release of the x86 virtual machine in 2018.
* In Qtum there can be multiple addresses used to create a proof-of-stake block. However, the EVM can only see the first output using the `coinbase` operation in Solidity (this address is also the one registered for the continuous staker rewards after 500 blocks). 

Hash Validation
----------------

```
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

If you would like to validate that the binaries you download are exactly the same as those provided and built by the Qtum team, then you can compare your binaries to the following sha256sum hashes:

571a7648490463e62a97f06204627e784478552b20f3f0a303ad15c2c4635a15  qtum-0.14.13-osx-unsigned.dmg
b9687b432a7dd09345ce88c2823b9af455ced913e4ee21d115a9094b17bf45fd  qtum-0.14.13-osx-unsigned.tar.gz
d45b49c6fda135a3f02b5bda476eceb7eff65f2f4410b1a45955d366a3730ba6  qtum-0.14.13-osx64.tar.gz
22dbff8a3ee7641d5c2c8ebb6b58db8bbdc2004c6a576a3d79042b91377b986b  src/qtum-0.14.13.tar.gz
deb93118d329351d074447d52e6e49a3cdc10a6f78836aea2a883bd6250ddfad  qtum-osx-0.14-res.yml

e3c377fbf76ee4cbc5a288e5df5765558a65b7000d093a62fbb35ef0d796ba49  qtum-0.14.13-aarch64-linux-gnu-debug.tar.gz
8ab36d66457fc0f22b1a161cffdfe07a16a409c0d1ce167ddf1347fc0e6ba03c  qtum-0.14.13-aarch64-linux-gnu.tar.gz
16e392698cddfbdddf24a3f0b87bbaf5552a1d2e508f34ea202417d839eb89d6  qtum-0.14.13-arm-linux-gnueabihf-debug.tar.gz
f0675c1e57b84466559ca4996dcf7bda06fb316f4ba24178440d0d6c86d92e01  qtum-0.14.13-arm-linux-gnueabihf.tar.gz
2889e73603913157403a4994c53fa39b123394f007cc4ed258fb2b4f31156a62  qtum-0.14.13-i686-pc-linux-gnu-debug.tar.gz
030dbbf3a337ef61daab4da6fba51fa2352199cf8c7434983d286cb9de050bdc  qtum-0.14.13-i686-pc-linux-gnu.tar.gz
a1f8614386fab0016e9920a7f3eb5a858890bfb6c1a12fe46d8bc4c12008897f  qtum-0.14.13-x86_64-linux-gnu-debug.tar.gz
6806995a5d03fbae31a0b62a1808c4a84567d276020702d20798d8303f0a39e2  qtum-0.14.13-x86_64-linux-gnu.tar.gz
22dbff8a3ee7641d5c2c8ebb6b58db8bbdc2004c6a576a3d79042b91377b986b  src/qtum-0.14.13.tar.gz
36d54f64e80eccab5579349ce2d534ce438d205bdd4a1b85da6409d37e7e3a3c  qtum-linux-0.14-res.yml

e00701b16c2ecd12bbef61b8659a52ba6a1f5afea462add2cd7317e1af94929f  qtum-0.14.13-win-unsigned.tar.gz
ecfd1d334dd8a2a237562ad62987bfe26ac29f4774eeaaa9f8b0e4bad3f3b47d  qtum-0.14.13-win32-debug.zip
f1f2e21aaa19e9e976ca9b7715975f275e305f0d76b6e46e4c80716446922a40  qtum-0.14.13-win32-setup-unsigned.exe
724b130c20f4ba555396e016e7cd4263af72107048e9d0e48e6b83e9f41e2773  qtum-0.14.13-win32.zip
4135b40260b428781b8995edf26eb31a1c69fa97617e7f0e25bb70e4da973484  qtum-0.14.13-win64-debug.zip
f5430df396358be17a3c0d4409bf6907b243f77e776ef2e2fdcf4abae49952dd  qtum-0.14.13-win64-setup-unsigned.exe
4238e3f89467903238c121d42cfea58dab9cf8ec4b4be3e5057e0df925370ca6  qtum-0.14.13-win64.zip
e77af7c34070de2961be78acf150fb64d5f49acfd7f8448e81a585cc0559053f  src/qtum-0.14.13.tar.gz
5930f5d32eadb91631112ad8ff114b741147500e29665addfe99375853b55c6b  qtum-win-0.14-res.yml

VirusTotal reports at time of release:

* win32 installer: https://www.virustotal.com/#/file/f1f2e21aaa19e9e976ca9b7715975f275e305f0d76b6e46e4c80716446922a40/detection
Kaspersky and ZoneAlarm reports ""HEUR:Trojan.Win32.Generic""
Ikarus reports ""Trojan.MSIL.Disfa""
* win64 installer: https://www.virustotal.com/#/file/f5430df396358be17a3c0d4409bf6907b243f77e776ef2e2fdcf4abae49952dd/detection
Kaspersky and ZoneAlarm reports ""HEUR:Trojan.Win32.Generic""
Rising reports ""Trojan.Disfa!8.5AE (TFE:5:mIYYCQXiMLI)""
* win32 zip: https://www.virustotal.com/#/file/724b130c20f4ba555396e016e7cd4263af72107048e9d0e48e6b83e9f41e2773/detection
Kaspersky and ZoneAlarm reports ""HEUR:Trojan.Win32.Generic""
Ikarus reports ""Trojan.MSIL.Disfa""
AhnLab-V3 reports ""Unwanted/Win32.CoinMiner.C2332518""
* win64 zip: https://www.virustotal.com/#/file/4238e3f89467903238c121d42cfea58dab9cf8ec4b4be3e5057e0df925370ca6/detection
Kaspersky and ZoneAlarm reports ""HEUR:Trojan.Win32.Generic""
AhnLab-V3 reports ""Unwanted/Win32.CoinMiner.C2332518""
Rising reports ""Trojan.Disfa!8.5AE (TFE:5:mIYYCQXiMLI)""



You can validate this message is from Earlz at https://keybase.io/verify
-----BEGIN PGP SIGNATURE-----
Version: Keybase OpenPGP v2.0.76
Comment: https://keybase.io/crypto

wsFcBAABCgAGBQJaUZRnAAoJEAKXMK2l7Ra+fkYP/1l9NShcfn2lO2kC5l55p/hy
ZrTmcRJPntBCJx5B8x13QjzGB9FdY250Cf2oSh6Wx3nHMy+a2lNq+h7N462clupR
tCe0aiJD0iC27ate181y1Ycxik/44gjLKfQtydUSyVgxclHclWiyqmRdO4g0sKcj
foOvWbLA6sT3qt6AbzYR8ICd/PHW9a8PKCqRZj0123bIKLZuLycvJNVxsk9gWiOn
Mo19N0wzx+jyg3qEtJ49LcLOhtjZZrMJhhGMLojf65zPrKk5dnXj4xJ56pahnkg8
VEcWI9/IPIGF568/D7VLETznbbmSHtbYbdhI3B65AqowOwhXVz5AADwgUhunlvfs
Q0dyDFxLSiSyb+JPN75+gugADW2K/k8a9jQgt3ugbSTLYXNlNpSPZvmDBdyrw/IZ
mg81yIDAUn3q0b7TLFvJH38iYl3lVh6oSeTE/2thwEZowZnRFU0w8+56orgxXB/6
+AjicNp8OTtjSk68SSfFxJybS41ZRSE44XcNfsGGz7eV7xg1mJ9qEt0aNlaEwpZD
RauXPhHOpDET05wEvBmmoPmiRAQSNGpKzRBcSkhikfLt7Cg/ZSPuzUj66HANYmsq
487WZyEKEtUnZYGOnxeg9ClIlTRjW97W+JmoewSid2KlEl/j1U1wic4Va1weiIj5
3bpS1hcMNsGs55yREJh7
=6p8l
-----END PGP SIGNATURE-----
```
",83774906
914,False,False,2017-12-20T16:44:03Z,2017-12-20T21:53:02Z,"About Qtum and Mainnet Ignition
-------------------------------

Qtum is a decentralized blockchain project built on Bitcoin's UTXO model, with support for Ethereum Virtual Machine based smart contracts, and secured by a proof of stake consensus model. It achieves this through the revolutionary Account Abstraction Layer which allows the EVM to communicate with Qtum's Bitcoin-like UTXO blockchain. For more general information about Qtum as well as links to join our community, go to https://qtum.org

Welcome to the Qtum Ignition Main Network. This is the main network where the tokens hold value and should be guarded very carefully. There will be a testnet setup soon for developers, in the meantime you can use `-regtest` mode for testing needs. We will announce details about the token swap from QTUM ERC20 coins to QTUM mainnet tokens soon, watch our [website](https://qtum.org) for details about that.  

The major features implemented in Qtum Ignition include:

1. The Ethereum Virtual Machine, which allows for compatibility with most existing Solidity based smart contracts.
2. The Smart Staking Protocol is complete, which is an optimized Proof of Stake implementation designed for a smart contract platform (however, smart contracts can not participate in staking yet).
3. An early and basic smart contract GUI has been implemented that can be used for creating contracts, sending data and Qtum to them, and checking their status by executing them locally. This functionality is similar to Mist's UI right now, but it is still an early version. We will be working on this more to improve it. 
4. Regtest mode, which is ideal for developers who wish to create their own private blockchain. It is tuned specifically to make development easier. It will stake blocks automatically every 30 seconds, and can generate proof-of-work blocks instantly as needed.
5. The Decentralized Governance Protocol is completely implemented and functional, which allows certain network parameters to be modified without a fork.

For more technical information for how to start developing with Qtum please read the [Guide](https://github.com/qtumproject/qtum/blob/master/doc/sparknet-guide.md) and also see this tutorial for deploying a simple [faucet smart contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet) (it hasn't yet been updated for Mainnet for obvious reasons, but all the instructions are the same and you can try them in regtest mode)

Note: Qtum Core is considered beta software. We make no warranties or guarantees of its security or stability.

Update History
--------------

* v0.14.12 - Recommended Update
    * Added option to disable change address usage
    * Fixed bug where heavy RPC usage could cause the wallet to crash
* v0.14.11 - Optional Update
    * Changed our versioning scheme to be consistent and avoid the two version number confusion
    * Add feature to restore wallet in the Qt wallet
    * Add new RPC call ""waitforlogs"" that is particularly useful for Dapp developers
    * Add long-polling support to the gettransaction RPC call
* v1.1.4 - Recommended update
    * Fixed a bug that would cause syncing to stop
    * Fixed a bug that would cause the wallet to crash when using -logevents
* v1.1.3 - Highly recommended update
    * Fixed a bug that caused contact addresses to show in receive token address dropdown
* v1.1.2 - Optional update, but recommended if using QRC tokens
    * Fixed a bug with token transactions where the transaction ID displayed was incorrect in the Qt wallet
    * Allow adding 0 balance addresses as the token receiver in the Qt wallet
* v1.1.1: When sending to contracts, the sender address is now the default change address to reduce confusion; fix -salvagewallet so it works with token transactions
* v1.1.0: Add GUI support Qtum QRC tokens, allowing full management of tokens on the Qtum blockchain from the Qt wallet
    * Sending to a contract no longer requires ABI data, allowing easy participation in simple crowdsale contracts
* v1.0.4: Fix bug where certain circumstances when staking could cause the displayed balance to be inaccurate until completely redownloading the blockchain.
* v1.0.3: Fix staker bug that reported false messages; slightly increases staking performance; optimize staker parameters; fix white send button in GUI
* v1.0.2: Various UI fixes, minor gas overflow consensus fix, per-txout exploit fix, testnet mode setup and functioning
* v1.0.1: Fixed network magic bytes and minimum version to ensure the main network does not conflict with the Skynet network
* v1.0: Initial release

Reindex Required When Upgrading from v1.0.1
----------------------------------------------

When you first start the Qtum 1.0.2 GUI wallet after using Qtum v1.0.1 it will prompt you that it must reindex the database. This is normal and is a result of switching our internal database format from per-transaction to per-txout. If you use `qtumd -daemon` it will silently fail to start. You need to use `qtumd -daemon -reindex` in this case. 

Qtum Documentation and Usage Resources
---------------

Basic usage resources:

* [Official Qtum Usage Guide](https://github.com/qtumproject/qtum/wiki/Qtum-Wallet-Tutorial)
* [Unofficial Qtum staking tutorial](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtum-qt)
* [Unofficial Qtum staking tutorial on Raspberry Pi](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtumd-on-a-raspberry-pi-3)
* [Unofficial guide for keeping your wallet safe](https://steemit.com/qtum/@cryptominder/encrypting-backing-up-and-restoring-your-qtum-wallet)
* [Block explorer](https://explorer.qtum.org)
* [Unofficial block explorer](https://qtumexplorer.io/)
* [Unofficial Raspberry Pi Web UI](https://github.com/rpiwalletui/qtum-ui)

Development resources:

* [Deploying a custom token to Qtum](https://blog.qtum.org/qtum-custom-token-walkthrough-467d725fa27d)
* [Early example faucet contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet)
* [Unofficial Qtum Hello World tutorial](https://steemit.com/qtum/@cryptominder/quantum-qtum-blockchain-developer-tutorial-hello-world)

General Info about Qtum:

* [Mainnet event AMA](https://www.reddit.com/r/Qtum/comments/6zs8t0/official_qtum_ama_thread_starts_at_10pm_beijing/)
* [Qtum's PoS vs CASPER](https://www.reddit.com/r/Qtum/comments/788oa5/qtums_pos_vs_casper_and_the_nothingatstake_problem/)
* [Technical article explaining Qtum's PoS model in depth](http://earlz.net/view/2017/07/27/1904/the-missing-explanation-of-proof-of-stake-version)
* [Unofficial What is Qtum article](https://storeofvalue.github.io/posts/what-is-qtum-without-the-bullshit/)

Quickstart
----------

The easiest way to get started with Qtum is to simply download the binaries below. To give a brief breakdown of the different versions available: 

#### Windows

* [qtum-0.14.12-win64.zip](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.12/qtum-0.14.12-win64.zip) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using Windows.
* [qtum-0.14.12-win64-setup-unsigned.exe](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.12/qtum-0.14.12-win64-setup-unsigned.exe) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using Windows. This includes an installer and will install Qtum system wide.
* [qtum-0.14.12-win32.zip](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.12/qtum-0.14.12-win32.zip) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 machines using Windows. If you have an older Windows computer and don't care about installing Qtum system-wide, 
* [qtum-0.14.12-win32-setup-unsigned.exe](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.12/qtum-0.14.12-win32-setup-unsigned.exe) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 machines using Windows. This includes an installer and will install Qtum system wide. If you have an older Windows computer and want to install Qtum then this is for you.

#### OSX

* [qtum-0.14.12-osx64.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.12/qtum-0.14.12-osx64.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using OSX. If you use a modern Mac and want development tools, this is what you want; we do not support older 32bit or PowerPC based Macs.
* [qtum-0.14.12-osx-unsigned.dmg](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.12/qtum-0.14.12-osx-unsigned.dmg) - A version of Qtum-Qt built for 64bit x86 machines using OSX in a .DMG installable format. If you use a modern Mac and aren't a developer, this is what you want; we do not support older 32bit or PowerPC based Macs.

#### Linux

* [qtum-0.14.12-i686-pc-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.12/qtum-0.14.12-i686-pc-linux-gnu.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 PC platforms running Linux. This is probably what you want for older computers running Linux
* [qtum-0.14.12-x86_64-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.12/qtum-0.14.12-x86_64-linux-gnu.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 PC platforms running Linux. This is probably what you want for any modern PC or server running Linux
* [qtum-0.14.12-arm-linux-gnueabihf.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.12/qtum-0.14.12-arm-linux-gnueabihf.tar.gz) - A version of qtumd and qtum-cli built for 32bit ARM platforms using Linux. This includes the Raspberry Pi and many of it's clones
* [qtum-0.14.12-aarch64-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.12/qtum-0.14.12-aarch64-linux-gnu.tar.gz) - A version of qtumd and qtum-cli built for 64bit ARM platforms using Linux

Below in the full list of binaries, there are also versions that include debug symbols. These are useful for developers, but will run slower and are significantly larger to download. 

#### Build Qtum Core

If you want to build it from source, it's recommended to follow the specific [""build"" documentation](https://github.com/qtumproject/qtum/tree/testnet-2/doc) for your platform. But mostly it boils down to the following:

1. Clone the qtum source code and cd into `qtum`

        git clone --recursive https://github.com/qtumproject/qtum.git
        cd qtum


2.  Build qtum-core:

    Configure and build the headless qtum binaries as well as the GUI (if Qt is found).

    You can disable the GUI build by passing `--without-gui` to configure.

        ./autogen.sh
        ./configure
        make

3.  It is recommended to build and run the unit tests to ensure everything is working correctly:

        make check


If you encounter an error like:

> make[2]: *** No rule to make target ‘cpp-ethereum/utils/libscrypt/b64.c’, needed by ‘cpp-ethereum/utils/libscrypt/libbitcoinconsensus_la-b64.lo’.  Stop.

Then you did not checkout the cpp-ethereum submodule for Qtum. To do that, simply:

    cd qtum
    git submodule update --init --recursive

Validate and Reproduce Binaries
---------------------------------

Qtum uses a tool called Gitian to make reproducible builds that can be verified by anyone. Instructions on setting up a Gitian VM and building Qtum are provided [in doc/gitian-building.md](https://github.com/qtumproject/qtum/blob/master/doc/gitian-building.md)

Community Resources
---------

Make sure to check out these resources as well for more information and to keep up to date with all the latest news about Qtum. At least 1 developer is always around, so if you're developing on Qtum and need help, we'd love to welcome you to our community.  

* [/r/Qtum on Reddit](https://www.reddit.com/r/Qtum/)
* [Qtum Telegram Group](https://t.me/joinchat/D5oBaw29NeOdpw6qqqf2lw)
* [@QtumOfficial on Twitter](https://mobile.twitter.com/qtumofficial)
* [Qtum on Facebook](https://www.facebook.com/QtumOfficial/)
* [Qtum Forum](https://forum.qtum.org/)
* [Qtum.org](https://qtum.org/en/)


Qtum Smart Contract Limitations
-----------

* EVM smart contracts can not receive coins from or send coins to any address type other than pay-to-pubkeyhash (starts with Q) addresses. This is due to a limitation in the EVM
* Contracts are not allowed to create contracts with an initial endowment of coins. The contract must first be created, and then be sent coins in a separate transaction. Humans are also not allowed to create contracts with an initial endowment of coins.
* Although all of the infrastructure is present, Qtum Core does not currently parse Solidity event data. You must parse this yourself using either `searchlogs` or `-record-log-opcodes` features.
* It is not possible to send a contract coins without also executing the contract. This is also the case of Ethereum. This was promised in earlier discussions and technically does work, but due to lack of time for testing this feature was disabled. We hope to reenable this feature with release of the x86 virtual machine in 2018.
* In Qtum there can be multiple addresses used to create a proof-of-stake block. However, the EVM can only see the first output using the `coinbase` operation in Solidity (this address is also the one registered for the continuous staker rewards after 500 blocks). 

Hash Validation
----------------

```
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

If you would like to validate that the binaries you download are exactly the same as those provided and built by the Qtum team, then you can compare your binaries to the following sha256sum hashes:

3f200d9fc2edfb188b0d191505fb4750a36c199f4002fbfd5639ee43b725d6b9  qtum-0.14.12-osx-unsigned.dmg 
be50c3623d4f1e9423ed2b84419fa7d293a3931ee429ce3ada1efe4a81d19658  qtum-0.14.12-osx-unsigned.tar.gz 
9c79a465cd2e1e0a61940e217e98d7be88369b1a6b7259064c8f63abc4b5367d  qtum-0.14.12-osx64.tar.gz 
32df22b9cca3442cee6b0c933347ea8ba103ef3aaa2a37693e9975dd7020f88f  src/qtum-0.14.12.tar.gz 
aa88cfb81090276c9b6569fbda0a213475f71f380629becceb658ccffef6ecc5  qtum-osx-0.14-res.yml 

2b20f263d5c63902a8f1748a2b05a2e2e05f8a3b7d32a04291bc3846dc3a53b7  qtum-0.14.12-aarch64-linux-gnu-debug.tar.gz
dcc5fda0f54e180fdf8029442623c45c85d7de08fc9633b5769a632971be4806  qtum-0.14.12-aarch64-linux-gnu.tar.gz
fa33f5ee5bac3d1225449d62173e73c4cc456de1b46c9c24d84cd539f8e6a0ee  qtum-0.14.12-arm-linux-gnueabihf-debug.tar.gz
57701254f2b3f7eb5fe7619f2e614c90f739eee7aa3ab74603c06da11b74fdca  qtum-0.14.12-arm-linux-gnueabihf.tar.gz
ed27f7a55183069a43fd3fddd6f0706652de565acd36c76ff573a9fecbb802c8  qtum-0.14.12-i686-pc-linux-gnu-debug.tar.gz
f329d0c5766977bbf4079e34bef710eb87fa9ebb076f089e534b03137fc39aad  qtum-0.14.12-i686-pc-linux-gnu.tar.gz
1a48b980aac389282d232cd7769c7297f4afe251ef9c8bb0ee847d33c6a53010  qtum-0.14.12-x86_64-linux-gnu-debug.tar.gz
5ccf9dd08327522fcc0d58ae5b53de6851d881c10967009048126eee07d5586b  qtum-0.14.12-x86_64-linux-gnu.tar.gz
32df22b9cca3442cee6b0c933347ea8ba103ef3aaa2a37693e9975dd7020f88f  src/qtum-0.14.12.tar.gz
3e724f5d2e810a2c2f2d3920ccf649ff02936a1df038f694dca0d1466b261605  qtum-linux-0.14-res.yml

7ad107cfea42a9bd2e467c3c324865fb9aeb2a6cbb1222a98f007b60ee1626cd  qtum-0.14.12-win-unsigned.tar.gz 
aa9a415041b9de6144b9fecfc425e8c8176095f3953c4e2b3004720867129752  qtum-0.14.12-win32-debug.zip 
881742ab8ab75c785499bc906be8328e9c4db62ca017259bfaf974d58c812a37  qtum-0.14.12-win32-setup-unsigned.exe 
4368fcc9cdc78b7020d68d5d61e00bd193ccd11c381d4c42947d17692249c431  qtum-0.14.12-win32.zip 
6648e27e99a1600727bd9a309bc24266f95059207ab37b3465adaf48b5b6157d  qtum-0.14.12-win64-debug.zip 
add6b0ac97d47b2f18a93968685d8e070cd3533944e4cb64ef99e7debf44e468  qtum-0.14.12-win64-setup-unsigned.exe 
0485822fcd2c5018ea024a8397467a3a8025014f139167d70ee03a15d655ada1  qtum-0.14.12-win64.zip 
a1076654cfe2c8269a577d614f542d3a913683b9cda0afe8db69310c223cd6fa  src/qtum-0.14.12.tar.gz 
7147d5cc17a48dcae7d11395ce82746e7908cb7029692a4bb8518550e92436cd  qtum-win-0.14-res.yml 

VirusTotal reports at time of release:

* win32 installer: https://www.virustotal.com/#/file/881742ab8ab75c785499bc906be8328e9c4db62ca017259bfaf974d58c812a37/detection
Kaspersky and ZoneAlarm reports ""HEUR:Trojan.Win32.Generic""
Ikarus reports ""Trojan.MSIL.Disfa""
Cylance reports ""Unsafe""
* win64 installer: https://www.virustotal.com/#/file/add6b0ac97d47b2f18a93968685d8e070cd3533944e4cb64ef99e7debf44e468/detection
Kaspersky and ZoneAlarm reports ""HEUR:Trojan.Win32.Generic""
* win32 zip: https://www.virustotal.com/#/file/4368fcc9cdc78b7020d68d5d61e00bd193ccd11c381d4c42947d17692249c431/detection
Kaspersky and ZoneAlarm reports ""HEUR:Trojan.Win32.Generic""
Ikarus reports ""Trojan.MSIL.Disfa""
* win64 zip: https://www.virustotal.com/#/file/0485822fcd2c5018ea024a8397467a3a8025014f139167d70ee03a15d655ada1/detection
Kaspersky and ZoneAlarm reports ""HEUR:Trojan.Win32.Generic""


You can validate this message is from Earlz at https://keybase.io/verify
-----BEGIN PGP SIGNATURE-----
Version: Keybase OpenPGP v2.0.76
Comment: https://keybase.io/crypto

wsFcBAABCgAGBQJaOttqAAoJEAKXMK2l7Ra+gwQP/Az+KEi/ZCXucsLk9P7IscX3
gzbalNsHYdzr5D69OvGL7dLKDzwBt2QcenQ/m2/AzeNJvj/qlcZLj8cNGVrwNk8l
nKXBdE8mYp+roGm4cQnfZeZQL86K7hw1GHboHkEMiNmGK8HRIuMZI9RpdwHjxS0H
75YESBnu7EwANCARJ9g/fgRBja7cr+W7WqgD+7nm60Vokx51HiYw4J5/NGa0TjQj
Y86MLkFofo/8XlleTCLwbwD4t3R7CbRfh1gDslvEcqDXhgPi2tTQxtZh1al1Q9oQ
bJlZIhqnsLPg5lIDapGhq82usJ76PZQ+axZCm6B30C//solcCRP0+PiY4RiSFMBM
OImkIsERO+KD9PEGtTvXt3K+JHAhXd3/m5pciiAZ6ZkSiSg35SJr43GisVJPXVDZ
s0xx6kCMZyp5/nDHuIRwZyxplnvOUFuaCTMhDIDn7WgdhOeWawpdZIQKfZsf4wFP
QoxKnJD2nmSmSVLnV5yw6DYSN4tBWUeW/8bIfy9bbwCpbbDA7oA96NStPv8OMFov
SIU8+JG9BvtLvM91IsM7jotk+Wmlx/h8Ha06Tn/F3aCWZi0tlpQs3AwDwC6DywPr
IWLg+7DwFhKe2vx3KzghGGrrLHKU9JmSan2MzE1HJ7HggRAJbZKD26SivO04qCi9
EhsLrKNFFvKWZAHGOUgr
=ihNI
-----END PGP SIGNATURE-----
```
",83774906
915,False,False,2017-12-12T18:32:46Z,2017-12-20T22:00:36Z,"About Qtum and Mainnet Ignition
-------------------------------

Qtum is a decentralized blockchain project built on Bitcoin's UTXO model, with support for Ethereum Virtual Machine based smart contracts, and secured by a proof of stake consensus model. It achieves this through the revolutionary Account Abstraction Layer which allows the EVM to communicate with Qtum's Bitcoin-like UTXO blockchain. For more general information about Qtum as well as links to join our community, go to https://qtum.org

Welcome to the Qtum Ignition Main Network. This is the main network where the tokens hold value and should be guarded very carefully. There will be a testnet setup soon for developers, in the meantime you can use `-regtest` mode for testing needs. We will announce details about the token swap from QTUM ERC20 coins to QTUM mainnet tokens soon, watch our [website](https://qtum.org) for details about that.  

The major features implemented in Qtum Ignition include:

1. The Ethereum Virtual Machine, which allows for compatibility with most existing Solidity based smart contracts.
2. The Smart Staking Protocol is complete, which is an optimized Proof of Stake implementation designed for a smart contract platform (however, smart contracts can not participate in staking yet).
3. An early and basic smart contract GUI has been implemented that can be used for creating contracts, sending data and Qtum to them, and checking their status by executing them locally. This functionality is similar to Mist's UI right now, but it is still an early version. We will be working on this more to improve it. 
4. Regtest mode, which is ideal for developers who wish to create their own private blockchain. It is tuned specifically to make development easier. It will stake blocks automatically every 30 seconds, and can generate proof-of-work blocks instantly as needed.
5. The Decentralized Governance Protocol is completely implemented and functional, which allows certain network parameters to be modified without a fork.

For more technical information for how to start developing with Qtum please read the [Guide](https://github.com/qtumproject/qtum/blob/master/doc/sparknet-guide.md) and also see this tutorial for deploying a simple [faucet smart contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet) (it hasn't yet been updated for Mainnet for obvious reasons, but all the instructions are the same and you can try them in regtest mode)

Note: Qtum Core is considered beta software. We make no warranties or guarantees of its security or stability.

Update History
--------------

* v0.14.11 - Optional Update
    * Changed our versioning scheme to be consistent and avoid the two version number confusion
    * Add feature to restore wallet in the Qt wallet
    * Add new RPC call ""waitforlogs"" that is particularly useful for Dapp developers
    * Add long-polling support to the gettransaction RPC call
* v1.1.4 - Recommended update
    * Fixed a bug that would cause syncing to stop
    * Fixed a bug that would cause the wallet to crash when using -logevents
* v1.1.3 - Highly recommended update
    * Fixed a bug that caused contact addresses to show in receive token address dropdown
* v1.1.2 - Optional update, but recommended if using QRC tokens
    * Fixed a bug with token transactions where the transaction ID displayed was incorrect in the Qt wallet
    * Allow adding 0 balance addresses as the token receiver in the Qt wallet
* v1.1.1: When sending to contracts, the sender address is now the default change address to reduce confusion; fix -salvagewallet so it works with token transactions
* v1.1.0: Add GUI support Qtum QRC tokens, allowing full management of tokens on the Qtum blockchain from the Qt wallet
    * Sending to a contract no longer requires ABI data, allowing easy participation in simple crowdsale contracts
* v1.0.4: Fix bug where certain circumstances when staking could cause the displayed balance to be inaccurate until completely redownloading the blockchain.
* v1.0.3: Fix staker bug that reported false messages; slightly increases staking performance; optimize staker parameters; fix white send button in GUI
* v1.0.2: Various UI fixes, minor gas overflow consensus fix, per-txout exploit fix, testnet mode setup and functioning
* v1.0.1: Fixed network magic bytes and minimum version to ensure the main network does not conflict with the Skynet network
* v1.0: Initial release

Reindex Required When Upgrading from v1.0.1
----------------------------------------------

When you first start the Qtum 1.0.2 GUI wallet after using Qtum v1.0.1 it will prompt you that it must reindex the database. This is normal and is a result of switching our internal database format from per-transaction to per-txout. If you use `qtumd -daemon` it will silently fail to start. You need to use `qtumd -daemon -reindex` in this case. 

Qtum Documentation and Usage Resources
---------------

Basic usage resources:

* [Official Qtum Usage Guide](https://github.com/qtumproject/qtum/wiki/Qtum-Wallet-Tutorial)
* [Unofficial Qtum staking tutorial](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtum-qt)
* [Unofficial Qtum staking tutorial on Raspberry Pi](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtumd-on-a-raspberry-pi-3)
* [Unofficial guide for keeping your wallet safe](https://steemit.com/qtum/@cryptominder/encrypting-backing-up-and-restoring-your-qtum-wallet)
* [Block explorer](https://explorer.qtum.org)
* [Unofficial block explorer](https://qtumexplorer.io/)
* [Unofficial Raspberry Pi Web UI](https://github.com/rpiwalletui/qtum-ui)

Development resources:

* [Deploying a custom token to Qtum](https://blog.qtum.org/qtum-custom-token-walkthrough-467d725fa27d)
* [Early example faucet contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet)
* [Unofficial Qtum Hello World tutorial](https://steemit.com/qtum/@cryptominder/quantum-qtum-blockchain-developer-tutorial-hello-world)

General Info about Qtum:

* [Mainnet event AMA](https://www.reddit.com/r/Qtum/comments/6zs8t0/official_qtum_ama_thread_starts_at_10pm_beijing/)
* [Qtum's PoS vs CASPER](https://www.reddit.com/r/Qtum/comments/788oa5/qtums_pos_vs_casper_and_the_nothingatstake_problem/)
* [Technical article explaining Qtum's PoS model in depth](http://earlz.net/view/2017/07/27/1904/the-missing-explanation-of-proof-of-stake-version)
* [Unofficial What is Qtum article](https://storeofvalue.github.io/posts/what-is-qtum-without-the-bullshit/)

Quickstart
----------

The easiest way to get started with Qtum is to simply download the binaries below. To give a brief breakdown of the different versions available: 

#### Windows

* [qtum-0.14.11-win64.zip](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.11/qtum-0.14.11-win64.zip) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using Windows.
* [qtum-0.14.11-win64-setup-unsigned.exe](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.11/qtum-0.14.11-win64-setup-unsigned.exe) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using Windows. This includes an installer and will install Qtum system wide.
* [qtum-0.14.11-win32.zip](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.11/qtum-0.14.11-win32.zip) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 machines using Windows. If you have an older Windows computer and don't care about installing Qtum system-wide, 
* [qtum-0.14.11-win32-setup-unsigned.exe](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.11/qtum-0.14.11-win32-setup-unsigned.exe) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 machines using Windows. This includes an installer and will install Qtum system wide. If you have an older Windows computer and want to install Qtum then this is for you.

#### OSX

* [qtum-0.14.11-osx64.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.11/qtum-0.14.11-osx64.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using OSX. If you use a modern Mac and want development tools, this is what you want; we do not support older 32bit or PowerPC based Macs.
* [qtum-0.14.11-osx-unsigned.dmg](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.11/qtum-0.14.11-osx-unsigned.dmg) - A version of Qtum-Qt built for 64bit x86 machines using OSX in a .DMG installable format. If you use a modern Mac and aren't a developer, this is what you want; we do not support older 32bit or PowerPC based Macs.

#### Linux

* [qtum-0.14.11-i686-pc-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.11/qtum-0.14.11-i686-pc-linux-gnu.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 PC platforms running Linux. This is probably what you want for older computers running Linux
* [qtum-0.14.11-x86_64-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.11/qtum-0.14.11-x86_64-linux-gnu.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 PC platforms running Linux. This is probably what you want for any modern PC or server running Linux
* [qtum-0.14.11-arm-linux-gnueabihf.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.11/qtum-0.14.11-arm-linux-gnueabihf.tar.gz) - A version of qtumd and qtum-cli built for 32bit ARM platforms using Linux. This includes the Raspberry Pi and many of it's clones
* [qtum-0.14.11-aarch64-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v0.14.11/qtum-0.14.11-aarch64-linux-gnu.tar.gz) - A version of qtumd and qtum-cli built for 64bit ARM platforms using Linux

Below in the full list of binaries, there are also versions that include debug symbols. These are useful for developers, but will run slower and are significantly larger to download. 

#### Build Qtum Core

If you want to build it from source, it's recommended to follow the specific [""build"" documentation](https://github.com/qtumproject/qtum/tree/testnet-2/doc) for your platform. But mostly it boils down to the following:

1. Clone the qtum source code and cd into `qtum`

        git clone --recursive https://github.com/qtumproject/qtum.git
        cd qtum


2.  Build qtum-core:

    Configure and build the headless qtum binaries as well as the GUI (if Qt is found).

    You can disable the GUI build by passing `--without-gui` to configure.

        ./autogen.sh
        ./configure
        make

3.  It is recommended to build and run the unit tests to ensure everything is working correctly:

        make check


If you encounter an error like:

> make[2]: *** No rule to make target ‘cpp-ethereum/utils/libscrypt/b64.c’, needed by ‘cpp-ethereum/utils/libscrypt/libbitcoinconsensus_la-b64.lo’.  Stop.

Then you did not checkout the cpp-ethereum submodule for Qtum. To do that, simply:

    cd qtum
    git submodule update --init --recursive

Validate and Reproduce Binaries
---------------------------------

Qtum uses a tool called Gitian to make reproducible builds that can be verified by anyone. Instructions on setting up a Gitian VM and building Qtum are provided [in doc/gitian-building.md](https://github.com/qtumproject/qtum/blob/master/doc/gitian-building.md)

Community Resources
---------

Make sure to check out these resources as well for more information and to keep up to date with all the latest news about Qtum. At least 1 developer is always around, so if you're developing on Qtum and need help, we'd love to welcome you to our community.  

* [/r/Qtum on Reddit](https://www.reddit.com/r/Qtum/)
* [Qtum Telegram Group](https://t.me/joinchat/D5oBaw29NeOdpw6qqqf2lw)
* [@QtumOfficial on Twitter](https://mobile.twitter.com/qtumofficial)
* [Qtum on Facebook](https://www.facebook.com/QtumOfficial/)
* [Qtum Forum](https://forum.qtum.org/)
* [Qtum.org](https://qtum.org/en/)


Qtum Smart Contract Limitations
-----------

* EVM smart contracts can not receive coins from or send coins to any address type other than pay-to-pubkeyhash (starts with Q) addresses. This is due to a limitation in the EVM
* Contracts are not allowed to create contracts with an initial endowment of coins. The contract must first be created, and then be sent coins in a separate transaction. Humans are also not allowed to create contracts with an initial endowment of coins.
* Although all of the infrastructure is present, Qtum Core does not currently parse Solidity event data. You must parse this yourself using either `searchlogs` or `-record-log-opcodes` features.
* It is not possible to send a contract coins without also executing the contract. This is also the case of Ethereum. This was promised in earlier discussions and technically does work, but due to lack of time for testing this feature was disabled. We hope to reenable this feature with release of the x86 virtual machine in 2018.
* In Qtum there can be multiple addresses used to create a proof-of-stake block. However, the EVM can only see the first output using the `coinbase` operation in Solidity (this address is also the one registered for the continuous staker rewards after 500 blocks). 

Hash Validation
----------------

```
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

If you would like to validate that the binaries you download are exactly the same as those provided and built by the Qtum team, then you can compare your binaries to the following sha256sum hashes:

9b656b92b3e63166a29218abca7603d0fac8d46d980b7ebcdcf597e36f442352  qtum-0.14.11-osx-unsigned.dmg
da9953d39f7ab578d4273b15c5fe76be3d2ea7761a690e7e5257dbb937dde678  qtum-0.14.11-osx-unsigned.tar.gz
18ac0c65d723328775daf9117fa94c9857e6f65c3b570bc6c4d8df1e58f0a6ff  qtum-0.14.11-osx64.tar.gz
db2824f6d548f30dab4ea7d8a7d4997a3b4c6ced7430d65a2347eecd9839a557  src/qtum-0.14.11.tar.gz
2abe387460d6e0ef323a1d814216d346ba26e1cc645add7868bdd587ed32b851  qtum-osx-0.14-res.yml

202d97db33c484c142e46af9bc6bc88b2c147ee1ca6467cdf3ec9b5f291c7354  qtum-0.14.11-aarch64-linux-gnu-debug.tar.gz
89d0afae3580f91c6cf2e6c85473925203928bdee0e76496e57a31b250d02df8  qtum-0.14.11-aarch64-linux-gnu.tar.gz
6ab2d589941508adeec5854f17daf30c7b8a0f43015ddb554a704082127b69f0  qtum-0.14.11-arm-linux-gnueabihf-debug.tar.gz
dd4a97a0cabd7215029313d85e0b01efdfad632a44116e0031f2ff8a4dde596e  qtum-0.14.11-arm-linux-gnueabihf.tar.gz
1eeee104ef84334ee276b3d228d736ef8556e6964eeed532c8413074c6584a4f  qtum-0.14.11-i686-pc-linux-gnu-debug.tar.gz
4f9bfd1c205a700c3924647df3a7a8afd6e9f5c9b89f21aa9d974169acafe22d  qtum-0.14.11-i686-pc-linux-gnu.tar.gz
123d189a04492b495f2d69c4311ae4c06b3eaa830fb3c2c5521dea15079768ab  qtum-0.14.11-x86_64-linux-gnu-debug.tar.gz
6b434a70656f3a1a95021b97209d6b485e32948c757ad0cadaac0e45995359df  qtum-0.14.11-x86_64-linux-gnu.tar.gz
db2824f6d548f30dab4ea7d8a7d4997a3b4c6ced7430d65a2347eecd9839a557  src/qtum-0.14.11.tar.gz
b571d7fb92c0c5b6a1b37ba1660163550edae509b0a524921a3707f5603a9aa3  qtum-linux-0.14-res.yml

33ef7ded8a060e01bcd5ac4fac619c67d29ca9fd45c238015ba534f27949aac5  qtum-0.14.11-win-unsigned.tar.gz
872327e280c8dc9e65c38ae06b59a22bcff5cf21df48b825ed5e5afbac6a4981  qtum-0.14.11-win32-debug.zip
2250938417681f1f6b119f14b08973defb395481bb1b6c65753c1a2272a8a00a  qtum-0.14.11-win32-setup-unsigned.exe
5647d2a01892a3cafcc169203cfc83d2a2541f20f5ef2f90042ae9182f683dd9  qtum-0.14.11-win32.zip
0860c06796f0ffdfad498eba7586684dbf38bd4af26ae8b305b8d90f7e6808b4  qtum-0.14.11-win64-debug.zip
29c24b5ea68257e5ffe29cb43cd184916a340c7b570d699207bd721978fc95be  qtum-0.14.11-win64-setup-unsigned.exe
f43e8ad60fcde9ba6d0990fc4718b2d96ea1860a1fc5d225baf7ae64c95e8b5b  qtum-0.14.11-win64.zip
d783d6ac106b2096d1a2c5b950f2e1ccf371ec0622aa7b4904a3aa3a9062378b  src/qtum-0.14.11.tar.gz
26e76937e92afe48d3884da65f8bddc451a9bcf15fb7a571fb68a5b8894a58db  qtum-win-0.14-res.yml

In addition, as of the time of this writing, VirusTotal detects 2 false positives on all 32-bit and 64-bit Windows files labeled ""HEUR:Trojan.Win32.Generic"" from vendors Kaspersky and ZoneAlarm.

installer win32: https://www.virustotal.com/#/file/2250938417681f1f6b119f14b08973defb395481bb1b6c65753c1a2272a8a00a/detection

installer win64 https://www.virustotal.com/#/file/29c24b5ea68257e5ffe29cb43cd184916a340c7b570d699207bd721978fc95be/detection

zip win32 https://www.virustotal.com/#/file/5647d2a01892a3cafcc169203cfc83d2a2541f20f5ef2f90042ae9182f683dd9/detection

zip win64 https://www.virustotal.com/#/file/f43e8ad60fcde9ba6d0990fc4718b2d96ea1860a1fc5d225baf7ae64c95e8b5b/detection

You can validate this message is from Earlz at https://keybase.io/verify
-----BEGIN PGP SIGNATURE-----
Version: Keybase OpenPGP v2.0.76
Comment: https://keybase.io/crypto

wsFcBAABCgAGBQJaMGfYAAoJEAKXMK2l7Ra+W6YQAIxZmpF6J8AEPTngJCPdyEiP
oq3e33iS9uHg6ubHaVDgv/xZltPKaEC/I/ytELaY4F+npXVSm0HiEAY2pAZWAvBF
/OH0JsJmDsGimQl/kEBQD57WS0ODKiPZ5Yxny+M1FPhZYwqlKt8wNs6x6oUeMX3g
MUX7XqvuB7+G7E28pmFqtzMzJwU3F5Md8c4gFNrxAVgFdf+LEzoONySsfadiSBYy
kpkoXVNcR2C7FwWdnSUCJFq91qe3pusjK5uOgQImg5I6vuS/gLtib+ZBf7l1ZiwB
0FK8sR/P0otSC53Obv56NlNJD0Qj/3OgO9/PZ/IavvuDLeOIoyvwumMks9VK2lnL
pt8DmxW38CbgcAYRPTLBFJX2CHOmVk35VDKu2DH1R+gumqtPSbPMTWDhgG4DYo/3
01Xtc64HKk+OkBzb8BKgZuYTk1t+JCqH96Ek476uMtWta8i12gztjLVuDZc2Ktgx
EpGoJydT20sYAnEnJ/3ICI+PTlhYKYdOyQZPrK6ZusxpT1mqNsI9Hb5qmBCydGam
oWulJp5KC+iJAIuhdkvA0gU570YprYQMz6hR8RQmXnln7n66U7sO8cV7WgWZyOMr
vUFNjMze153+r2XclJqUkgy96ZgYFTZzBIvqd+exnBhN1Vr8sg4ZcQmHAqCgfjFj
+pZH3rS0AqetT7eMl6Kb
=hglx
-----END PGP SIGNATURE-----
```",83774906
916,False,False,2017-12-04T20:37:10Z,2017-12-05T00:00:39Z,"About Qtum and Mainnet Ignition
-------------------------------

Qtum is a decentralized blockchain project built on Bitcoin's UTXO model, with support for Ethereum Virtual Machine based smart contracts, and secured by a proof of stake consensus model. It achieves this through the revolutionary Account Abstraction Layer which allows the EVM to communicate with Qtum's Bitcoin-like UTXO blockchain. For more general information about Qtum as well as links to join our community, go to https://qtum.org

Welcome to the Qtum Ignition Main Network. This is the main network where the tokens hold value and should be guarded very carefully. There will be a testnet setup soon for developers, in the meantime you can use `-regtest` mode for testing needs. We will announce details about the token swap from QTUM ERC20 coins to QTUM mainnet tokens soon, watch our [website](https://qtum.org) for details about that.  

The major features implemented in Qtum Ignition include:

1. The Ethereum Virtual Machine, which allows for compatibility with most existing Solidity based smart contracts.
2. The Smart Staking Protocol is complete, which is an optimized Proof of Stake implementation designed for a smart contract platform (however, smart contracts can not participate in staking yet).
3. An early and basic smart contract GUI has been implemented that can be used for creating contracts, sending data and Qtum to them, and checking their status by executing them locally. This functionality is similar to Mist's UI right now, but it is still an early version. We will be working on this more to improve it. 
4. Regtest mode, which is ideal for developers who wish to create their own private blockchain. It is tuned specifically to make development easier. It will stake blocks automatically every 30 seconds, and can generate proof-of-work blocks instantly as needed.
5. The Decentralized Governance Protocol is completely implemented and functional, which allows certain network parameters to be modified without a fork.

For more technical information for how to start developing with Qtum please read the [Guide](https://github.com/qtumproject/qtum/blob/master/doc/sparknet-guide.md) and also see this tutorial for deploying a simple [faucet smart contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet) (it hasn't yet been updated for Mainnet for obvious reasons, but all the instructions are the same and you can try them in regtest mode)

Note: Qtum Core is considered beta software. We make no warranties or guarantees of its security or stability.

Update History
--------------

* v1.1.4 - Recommended update
    * Fixed a bug that would cause syncing to stop
    * Fixed a bug that would cause the wallet to crash when using -logevents
* v1.1.3 - Highly recommended update
    * Fixed a bug that caused contact addresses to show in receive token address dropdown
* v1.1.2 - Optional update, but recommended if using QRC tokens
    * Fixed a bug with token transactions where the transaction ID displayed was incorrect in the Qt wallet
    * Allow adding 0 balance addresses as the token receiver in the Qt wallet
* v1.1.1: When sending to contracts, the sender address is now the default change address to reduce confusion; fix -salvagewallet so it works with token transactions
* v1.1.0: Add GUI support Qtum QRC tokens, allowing full management of tokens on the Qtum blockchain from the Qt wallet
    * Sending to a contract no longer requires ABI data, allowing easy participation in simple crowdsale contracts
* v1.0.4: Fix bug where certain circumstances when staking could cause the displayed balance to be inaccurate until completely redownloading the blockchain.
* v1.0.3: Fix staker bug that reported false messages; slightly increases staking performance; optimize staker parameters; fix white send button in GUI
* v1.0.2: Various UI fixes, minor gas overflow consensus fix, per-txout exploit fix, testnet mode setup and functioning
* v1.0.1: Fixed network magic bytes and minimum version to ensure the main network does not conflict with the Skynet network
* v1.0: Initial release

Reindex Required When Upgrading from v1.0.1
----------------------------------------------

When you first start the Qtum 1.0.2 GUI wallet after using Qtum v1.0.1 it will prompt you that it must reindex the database. This is normal and is a result of switching our internal database format from per-transaction to per-txout. If you use `qtumd -daemon` it will silently fail to start. You need to use `qtumd -daemon -reindex` in this case. 

Qtum Documentation and Usage Resources
---------------

Basic usage resources:

* [Official Qtum Usage Guide](https://github.com/qtumproject/qtum/wiki/Qtum-Wallet-Tutorial)
* [Unofficial Qtum staking tutorial](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtum-qt)
* [Unofficial Qtum staking tutorial on Raspberry Pi](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtumd-on-a-raspberry-pi-3)
* [Unofficial guide for keeping your wallet safe](https://steemit.com/qtum/@cryptominder/encrypting-backing-up-and-restoring-your-qtum-wallet)
* [Block explorer](https://explorer.qtum.org)
* [Unofficial block explorer](https://qtumexplorer.io/)
* [Unofficial Raspberry Pi Web UI](https://github.com/rpiwalletui/qtum-ui)

Development resources:

* [Deploying a custom token to Qtum](https://blog.qtum.org/qtum-custom-token-walkthrough-467d725fa27d)
* [Early example faucet contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet)
* [Unofficial Qtum Hello World tutorial](https://steemit.com/qtum/@cryptominder/quantum-qtum-blockchain-developer-tutorial-hello-world)

General Info about Qtum:

* [Mainnet event AMA](https://www.reddit.com/r/Qtum/comments/6zs8t0/official_qtum_ama_thread_starts_at_10pm_beijing/)
* [Qtum's PoS vs CASPER](https://www.reddit.com/r/Qtum/comments/788oa5/qtums_pos_vs_casper_and_the_nothingatstake_problem/)
* [Technical article explaining Qtum's PoS model in depth](http://earlz.net/view/2017/07/27/1904/the-missing-explanation-of-proof-of-stake-version)
* [Unofficial What is Qtum article](https://storeofvalue.github.io/posts/what-is-qtum-without-the-bullshit/)

Quickstart
----------

The easiest way to get started with Qtum is to simply download the binaries below. To give a brief breakdown of the different versions available: 

#### Windows

* [qtum-0.14.10-win64.zip](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.4/qtum-0.14.10-win64.zip) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using Windows.
* [qtum-0.14.10-win64-setup-unsigned.exe](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.4/qtum-0.14.10-win64-setup-unsigned.exe) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using Windows. This includes an installer and will install Qtum system wide.
* [qtum-0.14.10-win32.zip](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.4/qtum-0.14.10-win32.zip) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 machines using Windows. If you have an older Windows computer and don't care about installing Qtum system-wide, 
* [qtum-0.14.10-win32-setup-unsigned.exe](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.4/qtum-0.14.10-win32-setup-unsigned.exe) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 machines using Windows. This includes an installer and will install Qtum system wide. If you have an older Windows computer and want to install Qtum then this is for you.

#### OSX

* [qtum-0.14.10-osx64.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.4/qtum-0.14.10-osx64.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using OSX. If you use a modern Mac and want development tools, this is what you want; we do not support older 32bit or PowerPC based Macs.
* [qtum-0.14.10-osx-unsigned.dmg](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.4/qtum-0.14.10-osx-unsigned.dmg) - A version of Qtum-Qt built for 64bit x86 machines using OSX in a .DMG installable format. If you use a modern Mac and aren't a developer, this is what you want; we do not support older 32bit or PowerPC based Macs.

#### Linux

* [qtum-0.14.10-i686-pc-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.4/qtum-0.14.10-i686-pc-linux-gnu.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 PC platforms running Linux. This is probably what you want for older computers running Linux
* [qtum-0.14.10-x86_64-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.4/qtum-0.14.10-x86_64-linux-gnu.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 PC platforms running Linux. This is probably what you want for any modern PC or server running Linux
* [qtum-0.14.10-arm-linux-gnueabihf.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.4/qtum-0.14.10-arm-linux-gnueabihf.tar.gz) - A version of qtumd and qtum-cli built for 32bit ARM platforms using Linux. This includes the Raspberry Pi and many of it's clones
* [qtum-0.14.10-aarch64-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.4/qtum-0.14.10-aarch64-linux-gnu.tar.gz) - A version of qtumd and qtum-cli built for 64bit ARM platforms using Linux

Below in the full list of binaries, there are also versions that include debug symbols. These are useful for developers, but will run slower and are significantly larger to download. 

#### Build Qtum Core

If you want to build it from source, it's recommended to follow the specific [""build"" documentation](https://github.com/qtumproject/qtum/tree/testnet-2/doc) for your platform. But mostly it boils down to the following:

1. Clone the qtum source code and cd into `qtum`

        git clone --recursive https://github.com/qtumproject/qtum.git
        cd qtum


2.  Build qtum-core:

    Configure and build the headless qtum binaries as well as the GUI (if Qt is found).

    You can disable the GUI build by passing `--without-gui` to configure.

        ./autogen.sh
        ./configure
        make

3.  It is recommended to build and run the unit tests to ensure everything is working correctly:

        make check


If you encounter an error like:

> make[2]: *** No rule to make target ‘cpp-ethereum/utils/libscrypt/b64.c’, needed by ‘cpp-ethereum/utils/libscrypt/libbitcoinconsensus_la-b64.lo’.  Stop.

Then you did not checkout the cpp-ethereum submodule for Qtum. To do that, simply:

    cd qtum
    git submodule update --init --recursive

Validate and Reproduce Binaries
---------------------------------

Qtum uses a tool called Gitian to make reproducible builds that can be verified by anyone. Instructions on setting up a Gitian VM and building Qtum are provided [in doc/gitian-building.md](https://github.com/qtumproject/qtum/blob/master/doc/gitian-building.md)

Community Resources
---------

Make sure to check out these resources as well for more information and to keep up to date with all the latest news about Qtum. At least 1 developer is always around, so if you're developing on Qtum and need help, we'd love to welcome you to our community.  

* [/r/Qtum on Reddit](https://www.reddit.com/r/Qtum/)
* [Qtum Telegram Group](https://t.me/joinchat/D5oBaw29NeOdpw6qqqf2lw)
* [@QtumOfficial on Twitter](https://mobile.twitter.com/qtumofficial)
* [Qtum on Facebook](https://www.facebook.com/QtumOfficial/)
* [Qtum Forum](https://forum.qtum.org/)
* [Qtum.org](https://qtum.org/en/)


Qtum Smart Contract Limitations
-----------

* EVM smart contracts can not receive coins from or send coins to any address type other than pay-to-pubkeyhash (starts with Q) addresses. This is due to a limitation in the EVM
* Contracts are not allowed to create contracts with an initial endowment of coins. The contract must first be created, and then be sent coins in a separate transaction. Humans are also not allowed to create contracts with an initial endowment of coins.
* Although all of the infrastructure is present, Qtum Core does not currently parse Solidity event data. You must parse this yourself using either `searchlogs` or `-record-log-opcodes` features.
* It is not possible to send a contract coins without also executing the contract. This is also the case of Ethereum. This was promised in earlier discussions and technically does work, but due to lack of time for testing this feature was disabled. We hope to reenable this feature with release of the x86 virtual machine in 2018.
* In Qtum there can be multiple addresses used to create a proof-of-stake block. However, the EVM can only see the first output using the `coinbase` operation in Solidity (this address is also the one registered for the continuous staker rewards after 500 blocks). 

Hash Validation
----------------

```
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

If you would like to validate that the binaries you download are exactly the same as those provided and built by the Qtum team, then you can compare your binaries to the following sha256sum hashes:

7d80c7a78f31820a99fa3fd388cc9ae505894b434a5810b7950f0258448f385a  qtum-0.14.10-osx-unsigned.dmg 
9dc34819ed8996906c46a807d872ac2fa053d7f508cde5ee1cca1ed1cac1d49b  qtum-0.14.10-osx-unsigned.tar.gz 
a6e45b6de088a741e3b5bbc6fe21d1739355ce0d7bb2b5ae32957043d49406dc  qtum-0.14.10-osx64.tar.gz 
c6ea89eed1a3e4735a36c3d30eb7504ff9b48fde1a4485222cc81509d2526c01  src/qtum-0.14.10.tar.gz 
26e6468cd06ce84c91932dd3627a884baaa73ca6eacaa19fe8677ceeb4ea95b6  qtum-osx-0.14-res.yml 

ddcd077a95de8016396b131eba8fde1c04576eb1987215e3aff796a6ad0018f2  qtum-0.14.10-aarch64-linux-gnu-debug.tar.gz
4bcd3b5fc5e26deaab08b21f5c721e0cb983b110e8c2253180459d5fc77628ca  qtum-0.14.10-aarch64-linux-gnu.tar.gz
b11f122b98c2813992b77b2dca84feaea93c31e95d0d209293d5345416ab5c0d  qtum-0.14.10-arm-linux-gnueabihf-debug.tar.gz
996819e47fc6db09b989ec2f7aff5b8bcf14903b6279548f040c41f1fe94cf87  qtum-0.14.10-arm-linux-gnueabihf.tar.gz
8439f1dd8acddfa567e4bdc43717ffcd82cfa911ab6734775ef207be408bc401  qtum-0.14.10-i686-pc-linux-gnu-debug.tar.gz
a6855ad8cdb4d67e0224376f16abd4c37c3c37b00db449371773fa7e8caa3fe3  qtum-0.14.10-i686-pc-linux-gnu.tar.gz
9f23b28e2c02488f97f07eda4318af46a2414d1c2881bbcaaecfc5f2133a10f0  qtum-0.14.10-x86_64-linux-gnu-debug.tar.gz
76e3326086c3209c938a216b455a86d0bc10f6f667cefa3a19ab367d3b784f4f  qtum-0.14.10-x86_64-linux-gnu.tar.gz
c6ea89eed1a3e4735a36c3d30eb7504ff9b48fde1a4485222cc81509d2526c01  src/qtum-0.14.10.tar.gz
cfe96bad26dc48609c722583d0ae18bab0ebb53436bf6845e5bb7cc5d4188187  qtum-linux-0.14-res.yml

43756f9f471f28d2e9d51610adb114c909360df3c0f4a5adde124541ef22fd62  qtum-0.14.10-win-unsigned.tar.gz 
0509f270098c613331da83ee72477c5db0f912e33babd2a534a526e0311f3ddd  qtum-0.14.10-win32-debug.zip 
06dbc7d464aeaed3510c3d5c23c0850d7e254037defdb0b7011f7711b2efc4b6  qtum-0.14.10-win32-setup-unsigned.exe 
5435f65bb7ad249f978a5a88ef5a630e02ae4639a72d096cd3f070cbdde9cafc  qtum-0.14.10-win32.zip 
8075b3d33b5fa01f006de7172b4b113cc7d1a0b4bc567331274fecd628a2fee7  qtum-0.14.10-win64-debug.zip 
f4d13a89c26a29194139c7b244d89e252dd3004f42d62784fe14b6fc48c646ea  qtum-0.14.10-win64-setup-unsigned.exe 
8a8c4b4affe662c90da23097c105f070ccd147be92a1e90669e1f14a4ff146a9  qtum-0.14.10-win64.zip 
20e927279b955a545d693502938ab79a46773388bb85de98e8862949daefbeee  src/qtum-0.14.10.tar.gz 
610296baec0beee09839893d75240ee0a15305708d6d4786ac326a9381c0a148  qtum-win-0.14-res.yml 

In addition, as of the time of this writing, VirusTotal detects 2 false positives on all 32-bit Windows files, and 2 false positives on all 64-bit Windows files. Both 32-bit and 64-bit have false positives  labeled ""HEUR:Trojan.Win32.Generic"" from Kaspersky and ZoneAlarm. Only the 32-bit installer has another false positive labeled ""Win32.Trojan.WisdomEyes.16070401.95"" from Baidu.

installer win32: https://www.virustotal.com/#/file/06dbc7d464aeaed3510c3d5c23c0850d7e254037defdb0b7011f7711b2efc4b6/detection

installer win64 https://www.virustotal.com/#/file/f4d13a89c26a29194139c7b244d89e252dd3004f42d62784fe14b6fc48c646ea/detection

zip win32 https://www.virustotal.com/#/file/5435f65bb7ad249f978a5a88ef5a630e02ae4639a72d096cd3f070cbdde9cafc/detection

zip win64 https://www.virustotal.com/#/file/8a8c4b4affe662c90da23097c105f070ccd147be92a1e90669e1f14a4ff146a9/detection

You can validate this message is from Earlz at https://keybase.io/verify
-----BEGIN PGP SIGNATURE-----
Version: Keybase OpenPGP v2.0.76
Comment: https://keybase.io/crypto

wsFcBAABCgAGBQJaJd7tAAoJEAKXMK2l7Ra+bu4P+QEduZw0mlf3/v4P7I4sfCwB
eCK8ADAkejF5LGBMfpyrXyfsiI3YsnQl9coxqxifb1NJbcOj8/4IykOZct3SREA0
7XqKb/N36Y2BMSUYZ7etgj7ShOwcTeyX8/LFcu6UeZvfkElhk7/lPOGTEE7MVQ0G
dbG8vFkOm3Dt5gv6SYi9rP9959017+NsfiwmWdanmCfe+XrWC/a4qb+8doCKfhI3
hMrGWRH/P/gW5OOkQG4fdyUz4Chspb7m8qjiugwTYm/8XBENhecnZHRA96J6sXT2
d01O5sywJ+IsQ304sycTAYYJ4yIOyvjBO/nYssQSgQkPb7SG2Z9mOiSqn2dp8zhp
+p74OrL4CpQ/KxbuiN6U2yIlm+fe0vc04Md2T2G1E9rtr+GjwR2DGZ3Qx6IO33gc
av4uIowmMUsWMhNjDhbDsNziz6ggwWhEX/61ZzKcCbgBS2lWqzHu+x4drdNFzKvb
5OTudwg10LcdoUcxpgSu84RVqSCPIkABMqP+gXfCKtb81k2tlfa4P9S3XpROhWkA
eXTThW7g6IxYjeYrAs7jCToo6GQWAY0eU49PS8Cin4MTC3N/knIgM7Bk5RUfZrFv
vAoW19magUymzavHx6hmjjAEN0W1WpWCCq0EzoUKaekq9zaQQQRgHrsMzknu1vT+
Ejk4AzyMET9tEhrDQAKj
=XDkj
-----END PGP SIGNATURE-----
```",83774906
917,False,False,2017-11-28T17:35:55Z,2017-11-29T00:55:06Z,"About Qtum and Mainnet Ignition
-------------------------------

Qtum is a decentralized blockchain project built on Bitcoin's UTXO model, with support for Ethereum Virtual Machine based smart contracts, and secured by a proof of stake consensus model. It achieves this through the revolutionary Account Abstraction Layer which allows the EVM to communicate with Qtum's Bitcoin-like UTXO blockchain. For more general information about Qtum as well as links to join our community, go to https://qtum.org

Welcome to the Qtum Ignition Main Network. This is the main network where the tokens hold value and should be guarded very carefully. There will be a testnet setup soon for developers, in the meantime you can use `-regtest` mode for testing needs. We will announce details about the token swap from QTUM ERC20 coins to QTUM mainnet tokens soon, watch our [website](https://qtum.org) for details about that.  

The major features implemented in Qtum Ignition include:

1. The Ethereum Virtual Machine, which allows for compatibility with most existing Solidity based smart contracts.
2. The Smart Staking Protocol is complete, which is an optimized Proof of Stake implementation designed for a smart contract platform (however, smart contracts can not participate in staking yet).
3. An early and basic smart contract GUI has been implemented that can be used for creating contracts, sending data and Qtum to them, and checking their status by executing them locally. This functionality is similar to Mist's UI right now, but it is still an early version. We will be working on this more to improve it. 
4. Regtest mode, which is ideal for developers who wish to create their own private blockchain. It is tuned specifically to make development easier. It will stake blocks automatically every 30 seconds, and can generate proof-of-work blocks instantly as needed.
5. The Decentralized Governance Protocol is completely implemented and functional, which allows certain network parameters to be modified without a fork.

For more technical information for how to start developing with Qtum please read the [Guide](https://github.com/qtumproject/qtum/blob/master/doc/sparknet-guide.md) and also see this tutorial for deploying a simple [faucet smart contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet) (it hasn't yet been updated for Mainnet for obvious reasons, but all the instructions are the same and you can try them in regtest mode)

Note: Qtum Core is considered beta software. We make no warranties or guarantees of its security or stability.

Update History
--------------

* v1.1.3 - Highly recommended update
    * Fixed a bug that caused contact addresses to show in receive token address dropdown
* v1.1.2 - Optional update, but recommended if using QRC tokens
    * Fixed a bug with token transactions where the transaction ID displayed was incorrect in the Qt wallet
    * Allow adding 0 balance addresses as the token receiver in the Qt wallet
* v1.1.1: When sending to contracts, the sender address is now the default change address to reduce confusion; fix -salvagewallet so it works with token transactions
* v1.1.0: Add GUI support Qtum QRC tokens, allowing full management of tokens on the Qtum blockchain from the Qt wallet
    * Sending to a contract no longer requires ABI data, allowing easy participation in simple crowdsale contracts
* v1.0.4: Fix bug where certain circumstances when staking could cause the displayed balance to be inaccurate until completely redownloading the blockchain.
* v1.0.3: Fix staker bug that reported false messages; slightly increases staking performance; optimize staker parameters; fix white send button in GUI
* v1.0.2: Various UI fixes, minor gas overflow consensus fix, per-txout exploit fix, testnet mode setup and functioning
* v1.0.1: Fixed network magic bytes and minimum version to ensure the main network does not conflict with the Skynet network
* v1.0: Initial release

Reindex Required When Upgrading from v1.0.1
----------------------------------------------

When you first start the Qtum 1.0.2 GUI wallet after using Qtum v1.0.1 it will prompt you that it must reindex the database. This is normal and is a result of switching our internal database format from per-transaction to per-txout. If you use `qtumd -daemon` it will silently fail to start. You need to use `qtumd -daemon -reindex` in this case. 

Qtum Documentation and Usage Resources
---------------

Basic usage resources:

* [Official Qtum Usage Guide](https://github.com/qtumproject/qtum/wiki/Qtum-Wallet-Tutorial)
* [Unofficial Qtum staking tutorial](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtum-qt)
* [Unofficial Qtum staking tutorial on Raspberry Pi](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtumd-on-a-raspberry-pi-3)
* [Unofficial guide for keeping your wallet safe](https://steemit.com/qtum/@cryptominder/encrypting-backing-up-and-restoring-your-qtum-wallet)
* [Block explorer](https://explorer.qtum.org)
* [Unofficial block explorer](https://qtumexplorer.io/)
* [Unofficial Raspberry Pi Web UI](https://github.com/rpiwalletui/qtum-ui)

Development resources:

* [Deploying a custom token to Qtum](https://blog.qtum.org/qtum-custom-token-walkthrough-467d725fa27d)
* [Early example faucet contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet)
* [Unofficial Qtum Hello World tutorial](https://steemit.com/qtum/@cryptominder/quantum-qtum-blockchain-developer-tutorial-hello-world)

General Info about Qtum:

* [Mainnet event AMA](https://www.reddit.com/r/Qtum/comments/6zs8t0/official_qtum_ama_thread_starts_at_10pm_beijing/)
* [Qtum's PoS vs CASPER](https://www.reddit.com/r/Qtum/comments/788oa5/qtums_pos_vs_casper_and_the_nothingatstake_problem/)
* [Technical article explaining Qtum's PoS model in depth](http://earlz.net/view/2017/07/27/1904/the-missing-explanation-of-proof-of-stake-version)
* [Unofficial What is Qtum article](https://storeofvalue.github.io/posts/what-is-qtum-without-the-bullshit/)

Quickstart
----------

The easiest way to get started with Qtum is to simply download the binaries below. To give a brief breakdown of the different versions available: 

#### Windows

* [qtum-0.14.9-win64.zip](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.3/qtum-0.14.9-win64.zip) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using Windows.
* [qtum-0.14.9-win64-setup-unsigned.exe](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.3/qtum-0.14.9-win64-setup-unsigned.exe) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using Windows. This includes an installer and will install Qtum system wide.
* [qtum-0.14.9-win32.zip](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.3/qtum-0.14.9-win32.zip) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 machines using Windows. If you have an older Windows computer and don't care about installing Qtum system-wide, 
* [qtum-0.14.9-win32-setup-unsigned.exe](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.3/qtum-0.14.9-win32-setup-unsigned.exe) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 machines using Windows. This includes an installer and will install Qtum system wide. If you have an older Windows computer and want to install Qtum then this is for you.

#### OSX

* [qtum-0.14.9-osx64.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.3/qtum-0.14.9-osx64.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using OSX. If you use a modern Mac and want development tools, this is what you want; we do not support older 32bit or PowerPC based Macs.
* [qtum-0.14.9-osx-unsigned.dmg](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.3/qtum-0.14.9-osx-unsigned.dmg) - A version of Qtum-Qt built for 64bit x86 machines using OSX in a .DMG installable format. If you use a modern Mac and aren't a developer, this is what you want; we do not support older 32bit or PowerPC based Macs.

#### Linux

* [qtum-0.14.9-i686-pc-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.3/qtum-0.14.9-i686-pc-linux-gnu.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 PC platforms running Linux. This is probably what you want for older computers running Linux
* [qtum-0.14.9-x86_64-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.3/qtum-0.14.9-x86_64-linux-gnu.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 PC platforms running Linux. This is probably what you want for any modern PC or server running Linux
* [qtum-0.14.9-arm-linux-gnueabihf.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.3/qtum-0.14.9-arm-linux-gnueabihf.tar.gz) - A version of qtumd and qtum-cli built for 32bit ARM platforms using Linux. This includes the Raspberry Pi and many of it's clones
* [qtum-0.14.9-aarch64-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.3/qtum-0.14.9-aarch64-linux-gnu.tar.gz) - A version of qtumd and qtum-cli built for 64bit ARM platforms using Linux

Below in the full list of binaries, there are also versions that include debug symbols. These are useful for developers, but will run slower and are significantly larger to download. 

#### Build Qtum Core

If you want to build it from source, it's recommended to follow the specific [""build"" documentation](https://github.com/qtumproject/qtum/tree/testnet-2/doc) for your platform. But mostly it boils down to the following:

1. Clone the qtum source code and cd into `qtum`

        git clone --recursive https://github.com/qtumproject/qtum.git
        cd qtum


2.  Build qtum-core:

    Configure and build the headless qtum binaries as well as the GUI (if Qt is found).

    You can disable the GUI build by passing `--without-gui` to configure.

        ./autogen.sh
        ./configure
        make

3.  It is recommended to build and run the unit tests to ensure everything is working correctly:

        make check


If you encounter an error like:

> make[2]: *** No rule to make target ‘cpp-ethereum/utils/libscrypt/b64.c’, needed by ‘cpp-ethereum/utils/libscrypt/libbitcoinconsensus_la-b64.lo’.  Stop.

Then you did not checkout the cpp-ethereum submodule for Qtum. To do that, simply:

    cd qtum
    git submodule update --init --recursive

Validate and Reproduce Binaries
---------------------------------

Qtum uses a tool called Gitian to make reproducible builds that can be verified by anyone. Instructions on setting up a Gitian VM and building Qtum are provided [in doc/gitian-building.md](https://github.com/qtumproject/qtum/blob/master/doc/gitian-building.md)

Community Resources
---------

Make sure to check out these resources as well for more information and to keep up to date with all the latest news about Qtum. At least 1 developer is always around, so if you're developing on Qtum and need help, we'd love to welcome you to our community.  

* [/r/Qtum on Reddit](https://www.reddit.com/r/Qtum/)
* [Qtum Telegram Group](https://t.me/joinchat/D5oBaw29NeOdpw6qqqf2lw)
* [@QtumOfficial on Twitter](https://mobile.twitter.com/qtumofficial)
* [Qtum on Facebook](https://www.facebook.com/QtumOfficial/)
* [Qtum Forum](https://forum.qtum.org/)
* [Qtum.org](https://qtum.org/en/)


Qtum Smart Contract Limitations
-----------

* EVM smart contracts can not receive coins from or send coins to any address type other than pay-to-pubkeyhash (starts with Q) addresses. This is due to a limitation in the EVM
* Contracts are not allowed to create contracts with an initial endowment of coins. The contract must first be created, and then be sent coins in a separate transaction. Humans are also not allowed to create contracts with an initial endowment of coins.
* Although all of the infrastructure is present, Qtum Core does not currently parse Solidity event data. You must parse this yourself using either `searchlogs` or `-record-log-opcodes` features.
* It is not possible to send a contract coins without also executing the contract. This is also the case of Ethereum. This was promised in earlier discussions and technically does work, but due to lack of time for testing this feature was disabled. We hope to reenable this feature with release of the x86 virtual machine in 2018.
* In Qtum there can be multiple addresses used to create a proof-of-stake block. However, the EVM can only see the first output using the `coinbase` operation in Solidity (this address is also the one registered for the continuous staker rewards after 500 blocks). 

Hash Validation
----------------

```
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

If you would like to validate that the binaries you download are exactly the same as those provided and built by the Qtum team, then you can compare your binaries to the following sha256sum hashes:

73598fba4975982a7884d41228eec9a9152256284cf9b2d596680924d84a5ad4  qtum-0.14.9-osx-unsigned.dmg
45a6a3306957a9bc1fe029e6883892b8db4b4f7772309317ce071f43b6e26692  qtum-0.14.9-osx-unsigned.tar.gz
26d38eb7f0530c19e2b741e37badb2ad727a27988e33477513b780cd4dab83b9  qtum-0.14.9-osx64.tar.gz
c3bc06f157b841b570ae6d9a101df457018f659b54668c8f8312aad9ac890ce5  src/qtum-0.14.9.tar.gz
8989d503b96677036ec0b77471aa244f054fe1cdceaf4308adec9ae9ae100c9e  qtum-osx-0.14-res.yml

b2b921ede8d3ddcb116f74afa22fc4c03b25deccb6b229cfd87727dde4f98098  qtum-0.14.9-aarch64-linux-gnu-debug.tar.gz 
28dca1df9b3fef1e2efcea5e3e3bdb4fd12c44cf2daf906e2f11a3c5680b3ec0  qtum-0.14.9-aarch64-linux-gnu.tar.gz 
5177e144f19070102634462d4b7b0ec4aac0170c6340f859469e5594f976eff9  qtum-0.14.9-arm-linux-gnueabihf-debug.tar.gz 
ca8a9f5212d874a008598dbd33af458c9f021ec9d5543ad47070dd195d4f1d26  qtum-0.14.9-arm-linux-gnueabihf.tar.gz 
35dc10292e941a9ec7f9c3163956d0e44b5d24d1bbe6ddc77727eb04059f136e  qtum-0.14.9-i686-pc-linux-gnu-debug.tar.gz 
15a018c5a7935ebb9e5df43c6df35ab305da225ff7aff0bc2d2b8fd56277b7a6  qtum-0.14.9-i686-pc-linux-gnu.tar.gz 
215a0dc89761317905df1b1abc292728d06acfbfad6a739f8c2dd2d947324c13  qtum-0.14.9-x86_64-linux-gnu-debug.tar.gz 
da14fb65a4309ef7e0bd4c93d0cdd156d01e9f4774db481b46103275a8a19ce0  qtum-0.14.9-x86_64-linux-gnu.tar.gz 
c3bc06f157b841b570ae6d9a101df457018f659b54668c8f8312aad9ac890ce5  src/qtum-0.14.9.tar.gz 
5d45dd739ed7cce060d06ef29c9c5f641db5c034331b07142a475cf7ec5ba1ca  qtum-linux-0.14-res.yml 

226859486a1c521d9f2a3361da5c6efe3223be162406d774edcefeeb8474f7af  qtum-0.14.9-win-unsigned.tar.gz
03d2d9ebdad88c0523d751be0cd71b040ef8e4d1af88dfb7dd6bf84f3860b76c  qtum-0.14.9-win32-debug.zip
7a4033e3f153c559b677ff7908e1b882b289fa4e8e36a17845bc9eab3f176cd0  qtum-0.14.9-win32-setup-unsigned.exe
37eded1f20a41e20767d0dfdd24a7f1b57fa21de8be4ea047130ff7e5ef7b695  qtum-0.14.9-win32.zip
bf4d24f8b010b4bb229c71805621435e8feabb7d0e385f9184657bb595438d94  qtum-0.14.9-win64-debug.zip
b7ba60cdfd1094656aee15ec34c489f3b2f73a95bb4ea82e7b6f303917d305a9  qtum-0.14.9-win64-setup-unsigned.exe
f93823de377b33d820d1039ce6087e5882ed09919d010120d16ccd2ed4ed604a  qtum-0.14.9-win64.zip
c019236d7d46fab2035cc37550b8cb5978b45ca96e46fae81de9e49de56c5a38  src/qtum-0.14.9.tar.gz
57a021244316250aa036b40f6915f3c99fa1cd89d8ff417912ff5a91ef0005e7  qtum-win-0.14-res.yml

In addition, as of the time of this writing, VirusTotal detects 2 false positives on all 32-bit Windows files, and 2 false positives on all 64-bit Windows files. Both 32-bit and 64-bit have false positives  labeled ""HEUR:Trojan.Win32.Generic"" from Kaspersky and ZoneAlarm. Only 32-bit has another false positive labeled ""Trojan/Win32.AGeneric"" from Antiy-AVL.

installer win32: https://www.virustotal.com/#/file/37eded1f20a41e20767d0dfdd24a7f1b57fa21de8be4ea047130ff7e5ef7b695/detection

installer win64 https://www.virustotal.com/#/file/b7ba60cdfd1094656aee15ec34c489f3b2f73a95bb4ea82e7b6f303917d305a9/detection

zip win32 https://www.virustotal.com/#/file/37eded1f20a41e20767d0dfdd24a7f1b57fa21de8be4ea047130ff7e5ef7b695/detection

zip win64 https://www.virustotal.com/#/file/f93823de377b33d820d1039ce6087e5882ed09919d010120d16ccd2ed4ed604a/detection

You can validate this message is from Earlz at https://keybase.io/verify
-----BEGIN PGP SIGNATURE-----
Version: Keybase OpenPGP v2.0.76
Comment: https://keybase.io/crypto

wsFcBAABCgAGBQJaHfwnAAoJEAKXMK2l7Ra+hQAQAKMOrso6XyPm/33GnbUsASem
pCqeo+47tGHKAYQEHWQvMQwxLyPAQRRJjRk4Iz1TlgV5pgf9n/eaSWXPotwD7ZwM
j60wAWKoxDsUgu+wls5Pmq/iD++i3DVGy7WyH5M0oWOWf8st60CxWhn3dKyEE/b2
nw8gz4AQqOgn0NQNicJWrVGEZAyY8EDhNIfHIkEpH9sxov+uedxZy4++B/hhaUj1
Zsmp2bius+31fUHpedIloCvX4liX+ZCuJf6WsC7Gm7nUApFJMhqkBvH6XkjS8G5S
Qq9AdDgm1IZHpyDVww/bUu7RmLpmWBDW3I8wnSAr24z8x2WVzbR+/CIdJQHOOH8U
p2EbjCVH44RoROLwqXZQztX92AxpyKnwLeIPgPRlRXBGii8pPK81sPMthloIZsUR
L/PgqHBh0J7md+C4WC+S2jTZPr/XC+7Gs5JpisLVlK3tSlJU8+6tC1zkv6ir5dXB
X2Uuq/xtt6OQDOSbuNfbNJy88921Ab/apjwhF8W9vXIe3F1bEWpe/Wy76UiTSvQG
AGRu+Ic13Xot4+lVJNYLY0aYPm9rijXMArm5zEbCCdk4h+Hx+v0E3GWNUz8ZCHVC
Nn64RJWp8gdXxaj2ahBG9Np8CWKwwoEcaQ1IeOGTDza9T5INm9z6pI9PJIHp+zv9
frtx4BpzzzCoJK6ybXiM
=9nc/
-----END PGP SIGNATURE-----

```",83774906
918,False,False,2017-11-16T21:03:48Z,2017-11-16T23:41:55Z,"About Qtum and Mainnet Ignition
-------------------------------

Qtum is a decentralized blockchain project built on Bitcoin's UTXO model, with support for Ethereum Virtual Machine based smart contracts, and secured by a proof of stake consensus model. It achieves this through the revolutionary Account Abstraction Layer which allows the EVM to communicate with Qtum's Bitcoin-like UTXO blockchain. For more general information about Qtum as well as links to join our community, go to https://qtum.org

Welcome to the Qtum Ignition Main Network. This is the main network where the tokens hold value and should be guarded very carefully. There will be a testnet setup soon for developers, in the meantime you can use `-regtest` mode for testing needs. We will announce details about the token swap from QTUM ERC20 coins to QTUM mainnet tokens soon, watch our [website](https://qtum.org) for details about that.  

The major features implemented in Qtum Ignition include:

1. The Ethereum Virtual Machine, which allows for compatibility with most existing Solidity based smart contracts.
2. The Smart Staking Protocol is complete, which is an optimized Proof of Stake implementation designed for a smart contract platform (however, smart contracts can not participate in staking yet).
3. An early and basic smart contract GUI has been implemented that can be used for creating contracts, sending data and Qtum to them, and checking their status by executing them locally. This functionality is similar to Mist's UI right now, but it is still an early version. We will be working on this more to improve it. 
4. Regtest mode, which is ideal for developers who wish to create their own private blockchain. It is tuned specifically to make development easier. It will stake blocks automatically every 30 seconds, and can generate proof-of-work blocks instantly as needed.
5. The Decentralized Governance Protocol is completely implemented and functional, which allows certain network parameters to be modified without a fork.

For more technical information for how to start developing with Qtum please read the [Guide](https://github.com/qtumproject/qtum/blob/master/doc/sparknet-guide.md) and also see this tutorial for deploying a simple [faucet smart contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet) (it hasn't yet been updated for Mainnet for obvious reasons, but all the instructions are the same and you can try them in regtest mode)

Note: Qtum Core is considered beta software. We make no warranties or guarantees of its security or stability.

Update History
--------------

* v1.1.2 - Optional update, but recommended if using QRC tokens
    * Fixed a bug with token transactions where the transaction ID displayed was incorrect in the Qt wallet
    * Allow adding 0 balance addresses as the token receiver in the Qt wallet
* v1.1.1: When sending to contracts, the sender address is now the default change address to reduce confusion; fix -salvagewallet so it works with token transactions
* v1.1.0: Add GUI support Qtum QRC tokens, allowing full management of tokens on the Qtum blockchain from the Qt wallet
    * Sending to a contract no longer requires ABI data, allowing easy participation in simple crowdsale contracts
* v1.0.4: Fix bug where certain circumstances when staking could cause the displayed balance to be inaccurate until completely redownloading the blockchain.
* v1.0.3: Fix staker bug that reported false messages; slightly increases staking performance; optimize staker parameters; fix white send button in GUI
* v1.0.2: Various UI fixes, minor gas overflow consensus fix, per-txout exploit fix, testnet mode setup and functioning
* v1.0.1: Fixed network magic bytes and minimum version to ensure the main network does not conflict with the Skynet network
* v1.0: Initial release

Reindex Required When Upgrading from v1.0.1
----------------------------------------------

When you first start the Qtum 1.0.2 GUI wallet after using Qtum v1.0.1 it will prompt you that it must reindex the database. This is normal and is a result of switching our internal database format from per-transaction to per-txout. If you use `qtumd -daemon` it will silently fail to start. You need to use `qtumd -daemon -reindex` in this case. 

Qtum Documentation and Usage Resources
---------------

Basic usage resources:

* [Official Qtum Usage Guide](https://github.com/qtumproject/qtum/wiki/Qtum-Wallet-Tutorial)
* [Unofficial Qtum staking tutorial](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtum-qt)
* [Unofficial Qtum staking tutorial on Raspberry Pi](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtumd-on-a-raspberry-pi-3)
* [Unofficial guide for keeping your wallet safe](https://steemit.com/qtum/@cryptominder/encrypting-backing-up-and-restoring-your-qtum-wallet)
* [Block explorer](https://explorer.qtum.org)
* [Unofficial block explorer](https://qtumexplorer.io/)

Development resources:

* [Deploying a custom token to Qtum](https://blog.qtum.org/qtum-custom-token-walkthrough-467d725fa27d)
* [Early example faucet contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet)
* [Unofficial Qtum Hello World tutorial](https://steemit.com/qtum/@cryptominder/quantum-qtum-blockchain-developer-tutorial-hello-world)

General Info about Qtum:

* [Mainnet event AMA](https://www.reddit.com/r/Qtum/comments/6zs8t0/official_qtum_ama_thread_starts_at_10pm_beijing/)
* [Qtum's PoS vs CASPER](https://www.reddit.com/r/Qtum/comments/788oa5/qtums_pos_vs_casper_and_the_nothingatstake_problem/)
* [Technical article explaining Qtum's PoS model in depth](http://earlz.net/view/2017/07/27/1904/the-missing-explanation-of-proof-of-stake-version)
* [Unofficial What is Qtum article](https://storeofvalue.github.io/posts/what-is-qtum-without-the-bullshit/)

Quickstart
----------

The easiest way to get started with Qtum is to simply download the binaries below. To give a brief breakdown of the different versions available: 

#### Windows

* [qtum-0.14.8-win64.zip](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.2/qtum-0.14.8-win64.zip) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using Windows.
* [qtum-0.14.8-win64-setup-unsigned.exe](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.2/qtum-0.14.8-win64-setup-unsigned.exe) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using Windows. This includes an installer and will install Qtum system wide.
* [qtum-0.14.8-win32.zip](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.2/qtum-0.14.8-win32.zip) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 machines using Windows. If you have an older Windows computer and don't care about installing Qtum system-wide, 
* [qtum-0.14.8-win32-setup-unsigned.exe](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.2/qtum-0.14.8-win32-setup-unsigned.exe) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 machines using Windows. This includes an installer and will install Qtum system wide. If you have an older Windows computer and want to install Qtum then this is for you.

#### OSX

* [qtum-0.14.8-osx64.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.2/qtum-0.14.8-osx64.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using OSX. If you use a modern Mac and want development tools, this is what you want; we do not support older 32bit or PowerPC based Macs.
* [qtum-0.14.8-osx-unsigned.dmg](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.2/qtum-0.14.8-osx-unsigned.dmg) - A version of Qtum-Qt built for 64bit x86 machines using OSX in a .DMG installable format. If you use a modern Mac and aren't a developer, this is what you want; we do not support older 32bit or PowerPC based Macs.

#### Linux

* [qtum-0.14.8-i686-pc-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.2/qtum-0.14.8-i686-pc-linux-gnu.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 PC platforms running Linux. This is probably what you want for older computers running Linux
* [qtum-0.14.8-x86_64-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.2/qtum-0.14.8-x86_64-linux-gnu.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 PC platforms running Linux. This is probably what you want for any modern PC or server running Linux
* [qtum-0.14.8-arm-linux-gnueabihf.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.2/qtum-0.14.8-arm-linux-gnueabihf.tar.gz) - A version of qtumd and qtum-cli built for 32bit ARM platforms using Linux. This includes the Raspberry Pi and many of it's clones
* [qtum-0.14.8-aarch64-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.2/qtum-0.14.8-aarch64-linux-gnu.tar.gz) - A version of qtumd and qtum-cli built for 64bit ARM platforms using Linux

Below in the full list of binaries, there are also versions that include debug symbols. These are useful for developers, but will run slower and are significantly larger to download. 

#### Build Qtum Core

If you want to build it from source, it's recommended to follow the specific [""build"" documentation](https://github.com/qtumproject/qtum/tree/testnet-2/doc) for your platform. But mostly it boils down to the following:

1. Clone the qtum source code and cd into `qtum`

        git clone --recursive https://github.com/qtumproject/qtum.git
        cd qtum


2.  Build qtum-core:

    Configure and build the headless qtum binaries as well as the GUI (if Qt is found).

    You can disable the GUI build by passing `--without-gui` to configure.

        ./autogen.sh
        ./configure
        make

3.  It is recommended to build and run the unit tests to ensure everything is working correctly:

        make check


If you encounter an error like:

> make[2]: *** No rule to make target ‘cpp-ethereum/utils/libscrypt/b64.c’, needed by ‘cpp-ethereum/utils/libscrypt/libbitcoinconsensus_la-b64.lo’.  Stop.

Then you did not checkout the cpp-ethereum submodule for Qtum. To do that, simply:

    cd qtum
    git submodule update --init --recursive

Validate and Reproduce Binaries
---------------------------------

Qtum uses a tool called Gitian to make reproducible builds that can be verified by anyone. Instructions on setting up a Gitian VM and building Qtum are provided [in doc/gitian-building.md](https://github.com/qtumproject/qtum/blob/master/doc/gitian-building.md)

Community Resources
---------

Make sure to check out these resources as well for more information and to keep up to date with all the latest news about Qtum. At least 1 developer is always around, so if you're developing on Qtum and need help, we'd love to welcome you to our community.  

* [/r/Qtum on Reddit](https://www.reddit.com/r/Qtum/)
* [Qtum Telegram Group](https://t.me/joinchat/D5oBaw29NeOdpw6qqqf2lw)
* [@QtumOfficial on Twitter](https://mobile.twitter.com/qtumofficial)
* [Qtum on Facebook](https://www.facebook.com/QtumOfficial/)
* [Qtum Forum](https://forum.qtum.org/)
* [Qtum.org](https://qtum.org/en/)


Qtum Smart Contract Limitations
-----------

* EVM smart contracts can not receive coins from or send coins to any address type other than pay-to-pubkeyhash (starts with Q) addresses. This is due to a limitation in the EVM
* Contracts are not allowed to create contracts with an initial endowment of coins. The contract must first be created, and then be sent coins in a separate transaction. Humans are also not allowed to create contracts with an initial endowment of coins.
* Although all of the infrastructure is present, Qtum Core does not currently parse Solidity event data. You must parse this yourself using either `searchlogs` or `-record-log-opcodes` features.
* It is not possible to send a contract coins without also executing the contract. This is also the case of Ethereum. This was promised in earlier discussions and technically does work, but due to lack of time for testing this feature was disabled. We hope to reenable this feature with release of the x86 virtual machine in 2018.
* In Qtum there can be multiple addresses used to create a proof-of-stake block. However, the EVM can only see the first output using the `coinbase` operation in Solidity (this address is also the one registered for the continuous staker rewards after 500 blocks). 

Hash Validation
----------------

```
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

If you would like to validate that the binaries you download are exactly the same as those provided and built by the Qtum team, then you can compare your binaries to the following sha256sum hashes:

8b3154f78567b0656e65a27035a97d97a800744dacefae0c6cc286c6866e34a4  qtum-0.14.8-osx-unsigned.dmg
c855987b4bb16a333622a1f5b185573c780512789997f9c628a8c06bfae26eb1  qtum-0.14.8-osx-unsigned.tar.gz
10f4c5574ca900e2134dca9ac8880d5ae0f82ec08c4f9aea88da3937c7a08edb  qtum-0.14.8-osx64.tar.gz
edfd26416545caea73c73c62e6326690fa5a239fcbe66300bd42cdf010dd0cb8  src/qtum-0.14.8.tar.gz
1887a60f01571c1156028dd9b7c3316c387517d7177bdb2d870c0458ac28781d  qtum-osx-0.14-res.yml

1683f03a3448862cae1bcb0069e06b3b7c9805c90e7d43f64b28b78f2d243cb1  qtum-0.14.8-aarch64-linux-gnu-debug.tar.gz 
3ea7fd8a049ac5e6fb86e75944ccd5bf0dec62ae7cbc0caaa92d6e28b7233d5f  qtum-0.14.8-aarch64-linux-gnu.tar.gz 
5ef4a469aedd210cdf855155e6f389aacd890ee2cd9309682f01f9a6e60c62c2  qtum-0.14.8-arm-linux-gnueabihf-debug.tar.gz 
fe60a3c82116c98fa25bb6dc203ff6211c26bb4977fa4d3df5290a42b9ecc446  qtum-0.14.8-arm-linux-gnueabihf.tar.gz 
49b7c64c7b3efa598980feb5442823871208de41a57caf4b124639d4962e4270  qtum-0.14.8-i686-pc-linux-gnu-debug.tar.gz 
86151f07bebcc044780a1b8f7035d4fe344d4f330040b9b6f55bee5f95434974  qtum-0.14.8-i686-pc-linux-gnu.tar.gz 
f0ec5d129183bb94d4a06b411b648d0948e55eb1b4c1b117afcde4fd75d2aaed  qtum-0.14.8-x86_64-linux-gnu-debug.tar.gz 
a94a5e61473eb83a90e34bae29b1d44af8ed966cac09003148778aa63a46e081  qtum-0.14.8-x86_64-linux-gnu.tar.gz 
edfd26416545caea73c73c62e6326690fa5a239fcbe66300bd42cdf010dd0cb8  src/qtum-0.14.8.tar.gz 
e940134ac98546638fac8f6a3dc5b006ef1a9ed8f1255e1457f4ffd0e6e10de3  qtum-linux-0.14-res.yml 

274c4653cacf2c9519d0fed6e60e121649ad9311570c4300349c1639926f2433  qtum-0.14.8-win-unsigned.tar.gz
9f910b6f6116eba4530ff86461d9b692725bddce19d3732632d1e25a55e07d29  qtum-0.14.8-win32-debug.zip
2c79d901f503ed110ce46453e1ca06db2a62d266fcbf847e33b102dacfeaa6c5  qtum-0.14.8-win32-setup-unsigned.exe
93ffe9cce42ba2aa104249f5b20de17e9fa95c36f68b8909aefb071151f9be46  qtum-0.14.8-win32.zip
9ba4aad9dfd38db2a853b1f30b683db8b701b665b3d3776e9a377483dad29919  qtum-0.14.8-win64-debug.zip
8f3b4c4e138b81b7bc91cf213dd29a311cc3ca5999b5b80b95a0373b8746ce90  qtum-0.14.8-win64-setup-unsigned.exe
61ea512e630bc9a8783488188460ab176d5ec967d8def2438b9ecc3dccf58d13  qtum-0.14.8-win64.zip
a7d1d7a038b3b85f48de56c4f283bf0eb0ee621c6d5d53f3584c0f7398e32fcd  src/qtum-0.14.8.tar.gz
ce46c4471d174d7983dcff15d2a289ca6111bc6709d8cd16f0e700ad110ff5dc  qtum-win-0.14-res.yml

In addition, as of the time of this writing, VirusTotal detects 2 false positives on all of the windows files. These false positives are labeled ""HEUR:Trojan.Win32.Generic"" and are from Kaspersky and ZoneAlarm.

installer win32: https://www.virustotal.com/#/file/2c79d901f503ed110ce46453e1ca06db2a62d266fcbf847e33b102dacfeaa6c5/detection

installer win64 https://www.virustotal.com/#/file/8f3b4c4e138b81b7bc91cf213dd29a311cc3ca5999b5b80b95a0373b8746ce90/detection

zip win32 https://www.virustotal.com/#/file/93ffe9cce42ba2aa104249f5b20de17e9fa95c36f68b8909aefb071151f9be46/detection

zip win64 https://www.virustotal.com/#/file/61ea512e630bc9a8783488188460ab176d5ec967d8def2438b9ecc3dccf58d13/detection

You can validate this message is from Earlz at https://keybase.io/verify
-----BEGIN PGP SIGNATURE-----
Version: Keybase OpenPGP v2.0.76
Comment: https://keybase.io/crypto

wsFcBAABCgAGBQJaDiJ5AAoJEAKXMK2l7Ra+Li4P/0qO2DWNtsch85NYA6V6Jer5
xQPGqIrU1cd0FA6LhVXzuGAYuSBwGTcu4IOgkjV9Z86aGA2/4N95cn5H+ZROqFaP
2cmxah+YgxfjLSPu0Wmn9hrfBL8a71ggc7zEOOoaRz6H9u6Utj94iazMDx1Mb5SD
5fxmIxCLajbDduHqQTz9wVJUnXL3FWD5WAQ454yIzTRAxXdZ3SD9BcGwiX3zQ4VM
82pcOgjxnP3FvS20rTFIyViXGAN0CcrXtZa+Co32cpBufKim+LvVgHUm0maa0kKz
kwPbs8TYssnVP/IIGr3TkdtY+nAbqQvVzcjVlA7A1L6jobe41LCyGuYtDPGh0Dsi
yb2ba+g0SX+vyUyJJHkZrFfwIimgLPpAfGAA2/KuJj+YYK/LBw4Z9T1h/6yQWPWW
N8p9jQtG/nTFXue5xAiksYtIxWwtnKkNEtMIeddfn9Vox2emqEXEDEoqTbTYHkKa
/JnK40mkyJ1C52PD53avqUpQeTydAmzWU3f5sQB3S2iSvU4aaEW6wt4OeYNFMARH
W6CNn2L+oXJz1Uf7biQefaq1hvP80bJiecNb+KAAr3OMtUJWv5oiFsZIttAp0qmn
M3LLPQn5vsoWlI5WQ/kLSu4hT9JUfGAOmkeByh1MIE8oH/1mxEgr5L/ORFBHTzZw
uUJSvqQmmG6COhcIkqrz
=eBNe
-----END PGP SIGNATURE-----
```",83774906
919,False,False,2017-11-06T16:25:17Z,2017-11-07T17:11:08Z,"About Qtum and Mainnet Ignition
-------------------------------

Qtum is a decentralized blockchain project built on Bitcoin's UTXO model, with support for Ethereum Virtual Machine based smart contracts, and secured by a proof of stake consensus model. It achieves this through the revolutionary Account Abstraction Layer which allows the EVM to communicate with Qtum's Bitcoin-like UTXO blockchain. For more general information about Qtum as well as links to join our community, go to https://qtum.org

Welcome to the Qtum Ignition Main Network. This is the main network where the tokens hold value and should be guarded very carefully. There will be a testnet setup soon for developers, in the meantime you can use `-regtest` mode for testing needs. We will announce details about the token swap from QTUM ERC20 coins to QTUM mainnet tokens soon, watch our [website](https://qtum.org) for details about that.  

The major features implemented in Qtum Ignition include:

1. The Ethereum Virtual Machine, which allows for compatibility with most existing Solidity based smart contracts.
2. The Smart Staking Protocol is complete, which is an optimized Proof of Stake implementation designed for a smart contract platform (however, smart contracts can not participate in staking yet).
3. An early and basic smart contract GUI has been implemented that can be used for creating contracts, sending data and Qtum to them, and checking their status by executing them locally. This functionality is similar to Mist's UI right now, but it is still an early version. We will be working on this more to improve it. 
4. Regtest mode, which is ideal for developers who wish to create their own private blockchain. It is tuned specifically to make development easier. It will stake blocks automatically every 30 seconds, and can generate proof-of-work blocks instantly as needed.
5. The Decentralized Governance Protocol is completely implemented and functional, which allows certain network parameters to be modified without a fork.

For more technical information for how to start developing with Qtum please read the [Guide](https://github.com/qtumproject/qtum/blob/master/doc/sparknet-guide.md) and also see this tutorial for deploying a simple [faucet smart contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet) (it hasn't yet been updated for Mainnet for obvious reasons, but all the instructions are the same and you can try them in regtest mode)

Note: Qtum Core is considered beta software. We make no warranties or guarantees of its security or stability.

Update History
--------------

* v1.1.1: When sending to contracts, the sender address is now the default change address to reduce confusion; fix -salvagewallet so it works with token transactions
* v1.1.0: Add GUI support Qtum QRC tokens, allowing full management of tokens on the Qtum blockchain from the Qt wallet
    * Sending to a contract no longer requires ABI data, allowing easy participation in simple crowdsale contracts
* v1.0.4: Fix bug where certain circumstances when staking could cause the displayed balance to be inaccurate until completely redownloading the blockchain.
* v1.0.3: Fix staker bug that reported false messages; slightly increases staking performance; optimize staker parameters; fix white send button in GUI
* v1.0.2: Various UI fixes, minor gas overflow consensus fix, per-txout exploit fix, testnet mode setup and functioning
* v1.0.1: Fixed network magic bytes and minimum version to ensure the main network does not conflict with the Skynet network
* v1.0: Initial release

Reindex Required When Upgrading from v1.0.1
----------------------------------------------

When you first start the Qtum 1.0.2 GUI wallet after using Qtum v1.0.1 it will prompt you that it must reindex the database. This is normal and is a result of switching our internal database format from per-transaction to per-txout. If you use `qtumd -daemon` it will silently fail to start. You need to use `qtumd -daemon -reindex` in this case. 

Qtum Documentation and Usage Resources
---------------

Basic usage resources:

* [Official Qtum Usage Guide](https://github.com/qtumproject/qtum/wiki/Qtum-Wallet-Tutorial)
* [Unofficial Qtum staking tutorial](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtum-qt)
* [Unofficial Qtum staking tutorial on Raspberry Pi](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtumd-on-a-raspberry-pi-3)
* [Unofficial guide for keeping your wallet safe](https://steemit.com/qtum/@cryptominder/encrypting-backing-up-and-restoring-your-qtum-wallet)
* [Block explorer](https://explorer.qtum.org)
* [Unofficial block explorer](https://qtumexplorer.io/)

Development resources:

* [Deploying a custom token to Qtum](https://blog.qtum.org/qtum-custom-token-walkthrough-467d725fa27d)
* [Early example faucet contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet)
* [Unofficial Qtum Hello World tutorial](https://steemit.com/qtum/@cryptominder/quantum-qtum-blockchain-developer-tutorial-hello-world)

General Info about Qtum:

* [Mainnet event AMA](https://www.reddit.com/r/Qtum/comments/6zs8t0/official_qtum_ama_thread_starts_at_10pm_beijing/)
* [Qtum's PoS vs CASPER](https://www.reddit.com/r/Qtum/comments/788oa5/qtums_pos_vs_casper_and_the_nothingatstake_problem/)
* [Technical article explaining Qtum's PoS model in depth](http://earlz.net/view/2017/07/27/1904/the-missing-explanation-of-proof-of-stake-version)
* [Unofficial What is Qtum article](https://storeofvalue.github.io/posts/what-is-qtum-without-the-bullshit/)

Quickstart
----------

The easiest way to get started with Qtum is to simply download the binaries below. To give a brief breakdown of the different versions available: 

#### Windows

* [qtum-0.14.7-win64.zip](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.1/qtum-0.14.7-win64.zip) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using Windows.
* [qtum-0.14.7-win64-setup-unsigned.exe](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.1/qtum-0.14.7-win64-setup-unsigned.exe) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using Windows. This includes an installer and will install Qtum system wide.
* [qtum-0.14.7-win32.zip](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.1/qtum-0.14.7-win32.zip) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 machines using Windows. If you have an older Windows computer and don't care about installing Qtum system-wide, 
* [qtum-0.14.7-win32-setup-unsigned.exe](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.1/qtum-0.14.7-win32-setup-unsigned.exe) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 machines using Windows. This includes an installer and will install Qtum system wide. If you have an older Windows computer and want to install Qtum then this is for you.

#### OSX

* [qtum-0.14.7-osx64.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.1/qtum-0.14.7-osx64.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using OSX. If you use a modern Mac and want development tools, this is what you want; we do not support older 32bit or PowerPC based Macs.
* [qtum-0.14.7-osx-unsigned.dmg](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.1/qtum-0.14.7-osx-unsigned.dmg) - A version of Qtum-Qt built for 64bit x86 machines using OSX in a .DMG installable format. If you use a modern Mac and aren't a developer, this is what you want; we do not support older 32bit or PowerPC based Macs.

#### Linux

* [qtum-0.14.7-i686-pc-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.1/qtum-0.14.7-i686-pc-linux-gnu.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 PC platforms running Linux. This is probably what you want for older computers running Linux
* [qtum-0.14.7-x86_64-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.1/qtum-0.14.7-x86_64-linux-gnu.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 PC platforms running Linux. This is probably what you want for any modern PC or server running Linux
* [qtum-0.14.7-arm-linux-gnueabihf.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.1/qtum-0.14.7-arm-linux-gnueabihf.tar.gz) - A version of qtumd and qtum-cli built for 32bit ARM platforms using Linux. This includes the Raspberry Pi and many of it's clones
* [qtum-0.14.7-aarch64-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.1/qtum-0.14.7-aarch64-linux-gnu.tar.gz) - A version of qtumd and qtum-cli built for 64bit ARM platforms using Linux

Below in the full list of binaries, there are also versions that include debug symbols. These are useful for developers, but will run slower and are significantly larger to download. 

#### Build Qtum Core

If you want to build it from source, it's recommended to follow the specific [""build"" documentation](https://github.com/qtumproject/qtum/tree/testnet-2/doc) for your platform. But mostly it boils down to the following:

1. Clone the qtum source code and cd into `qtum`

        git clone --recursive https://github.com/qtumproject/qtum.git
        cd qtum


2.  Build qtum-core:

    Configure and build the headless qtum binaries as well as the GUI (if Qt is found).

    You can disable the GUI build by passing `--without-gui` to configure.

        ./autogen.sh
        ./configure
        make

3.  It is recommended to build and run the unit tests to ensure everything is working correctly:

        make check


If you encounter an error like:

> make[2]: *** No rule to make target ‘cpp-ethereum/utils/libscrypt/b64.c’, needed by ‘cpp-ethereum/utils/libscrypt/libbitcoinconsensus_la-b64.lo’.  Stop.

Then you did not checkout the cpp-ethereum submodule for Qtum. To do that, simply:

    cd qtum
    git submodule update --init --recursive

Validate and Reproduce Binaries
---------------------------------

Qtum uses a tool called Gitian to make reproducible builds that can be verified by anyone. Instructions on setting up a Gitian VM and building Qtum are provided [in doc/gitian-building.md](https://github.com/qtumproject/qtum/blob/master/doc/gitian-building.md)

Community Resources
---------

Make sure to check out these resources as well for more information and to keep up to date with all the latest news about Qtum. At least 1 developer is always around, so if you're developing on Qtum and need help, we'd love to welcome you to our community.  

* [/r/Qtum on Reddit](https://www.reddit.com/r/Qtum/)
* [Qtum Telegram Group](https://t.me/joinchat/D5oBaw29NeOdpw6qqqf2lw)
* [@QtumOfficial on Twitter](https://mobile.twitter.com/qtumofficial)
* [Qtum on Facebook](https://www.facebook.com/QtumOfficial/)
* [Qtum Forum](https://forum.qtum.org/)
* [Qtum.org](https://qtum.org/en/)


Qtum Smart Contract Limitations
-----------

* EVM smart contracts can not receive coins from or send coins to any address type other than pay-to-pubkeyhash (starts with Q) addresses. This is due to a limitation in the EVM
* Contracts are not allowed to create contracts with an initial endowment of coins. The contract must first be created, and then be sent coins in a separate transaction. Humans are also not allowed to create contracts with an initial endowment of coins.
* Although all of the infrastructure is present, Qtum Core does not currently parse Solidity event data. You must parse this yourself using either `searchlogs` or `-record-log-opcodes` features.
* It is not possible to send a contract coins without also executing the contract. This is also the case of Ethereum. This was promised in earlier discussions and technically does work, but due to lack of time for testing this feature was disabled. We hope to reenable this feature with release of the x86 virtual machine in 2018.
* In Qtum there can be multiple addresses used to create a proof-of-stake block. However, the EVM can only see the first output using the `coinbase` operation in Solidity (this address is also the one registered for the continuous staker rewards after 500 blocks). 

Hash Validation
----------------

```
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

If you would like to validate that the binaries you download are exactly the same as those provided and built by the Qtum team, then you can compare your binaries to the following sha256sum hashes:

b852c05722d2f2dc9139ab29c976487c5dc20047c72eb86173bae4680a5aff3b  qtum-0.14.7-osx-unsigned.dmg 
4e5a3b3da068835375370522b9fe0cd25cab87af56adbf924714403f92c85150  qtum-0.14.7-osx-unsigned.tar.gz 
54f28d3cf61d4f764e68ad4bb64fe03b9c757975cfa085c23e71414d4cd1301a  qtum-0.14.7-osx64.tar.gz 
a23747d3b59170e0a040a995108b1e4a0a947b06335903a199e4021aada6bc3d  src/qtum-0.14.7.tar.gz 
ecc13ada7fcccf470246e1d9488eeefeb1ceae0431c853cbf8e06a3b60430df6  qtum-osx-0.14-res.yml 

3929ae8b22e32b2f2d6d99e4ec6c654486ac3bc4c663b8054e5243923f504803  qtum-0.14.7-aarch64-linux-gnu-debug.tar.gz
9b29a0da81b7f3005240a83da9874d10002ed48ec759d57db97e9bc12a9c4eda  qtum-0.14.7-aarch64-linux-gnu.tar.gz
cbee2a21780f33624650e538c4f812d852283c86486f915e285d7455f53ba21a  qtum-0.14.7-arm-linux-gnueabihf-debug.tar.gz
22b885543d4231ca7f6d9c4c023fa2ecb9a44fb630c6cc05a395b21f0fc47f09  qtum-0.14.7-arm-linux-gnueabihf.tar.gz
2d58cc607339e19f805529860f927173ed5f9d503a4985fdeaf082ae0d4b44d0  qtum-0.14.7-i686-pc-linux-gnu-debug.tar.gz
283753c6f2c8e9848947e8211dffcb08ba9380ce3ab74728858d64239d48ecfb  qtum-0.14.7-i686-pc-linux-gnu.tar.gz
b465060bf0e714e4fca305529dc911eca518eb482f53dd652e51af6d5f48fa37  qtum-0.14.7-x86_64-linux-gnu-debug.tar.gz
f6c49a692734bf021b6c0a53ee32f745b71b7179466eaea98aa398db160a7797  qtum-0.14.7-x86_64-linux-gnu.tar.gz
a23747d3b59170e0a040a995108b1e4a0a947b06335903a199e4021aada6bc3d  src/qtum-0.14.7.tar.gz
ca422302c4e6d4ab5422acdd138d1eda368e68a229800688d2ed4c4b8c7c3435  qtum-linux-0.14-res.yml

aa7baae9a0710d884da0cae199eb1218644b68b51012d99749385a1436b08213  qtum-0.14.7-win-unsigned.tar.gz
850fc62b59d718691ca35501ded4fcf18c7c54fc863962cc68a8e7b735878f00  qtum-0.14.7-win32-debug.zip
8bc1c9b78063e618d2468623c831d8830238df772169f516a9e56808f2e42ef2  qtum-0.14.7-win32-setup-unsigned.exe
2843fe492f2281076338071ff4f04e9c633b17d9db1e56cf67e45de193044285  qtum-0.14.7-win32.zip
3cb46f26119e85915b681ad8bd99b3b4547cbf590e0d677742d34c31a214a8c9  qtum-0.14.7-win64-debug.zip
a642721f52abae5d95a4e644368a851f5e69454e0103d9593eabea75c27f6831  qtum-0.14.7-win64-setup-unsigned.exe
ac60106d970b8ff54bdaf592f2725c2fcdeb4967550643ea937dc3233af9087d  qtum-0.14.7-win64.zip
ed0e3c8506e9d80dcb443fa160c6bced2b7706c1f7cdd212f836301acf3ba3ff  src/qtum-0.14.7.tar.gz
10b5822b7e3ad878dc14e3cc2156daf63f8e8606e5570e4e73ca768214745612  qtum-win-0.14-res.yml

In addition, as of the time of this writing, VirusTotal detects 0 false positives on the Windows 32bit and 64bit zip files and win64 installer, and 1 false positive from 2 vendors on the Windows 32bit installer.

installer win32: https://www.virustotal.com/#/file/8bc1c9b78063e618d2468623c831d8830238df772169f516a9e56808f2e42ef2/detection 1 false positive (""HEUR:Trojan.Win32.Generic"" from Kaspersky and ZoneAlarm)

installer win64 https://www.virustotal.com/#/file/a642721f52abae5d95a4e644368a851f5e69454e0103d9593eabea75c27f6831/detection 0 false positives

zip win32 https://www.virustotal.com/#/file/2843fe492f2281076338071ff4f04e9c633b17d9db1e56cf67e45de193044285/detection 0 false positives

zip win64 https://www.virustotal.com/#/file/ac60106d970b8ff54bdaf592f2725c2fcdeb4967550643ea937dc3233af9087d/detection 0 false positives

You can validate this message is from Earlz at https://keybase.io/verify
-----BEGIN PGP SIGNATURE-----
Version: Keybase OpenPGP v2.0.76
Comment: https://keybase.io/crypto

wsFcBAABCgAGBQJaAPxLAAoJEAKXMK2l7Ra+CeIQAI7Fp957XjzIdzZPnIjF7Qdo
5LuPZxex7Q6n94td75xWM9fCU/TuFS4s5ze4XJiO3wEzPwwQ9V78lyWLGKOdX8EF
LwrSUdESaZCnt9iygAgJA2Ckmbds46o81hFb5QjgzKmu6MvlXslpadw12cElqla8
HS4Vobz7Vg5BG6cQfO2neJyIaUbx3915rQ1/v2QHSyYyuiHmfTo7qOY7Llr8qZq8
dAeaFm0hP4ro+CxbKjdkU89CApgtwINPRtGcrnv1rnnHnAcJlnz6qWkJOiNT7rVp
EnZ4J976h/4uPcEWWFJKd4AQzu1C7eWOEjMk6Ndd5PuFRyVFvY4X3s859FOeW0W0
D1ekMDUHvYKoEhUphKeKyjB+m7qU6gdr1OmGOMyYspDlfk5CRe24ObNeT4RVgW6y
v8GPQYTAyPcNYzC+StXxHFvTIGCiK7iiwj5qy0FgiIZgqRoOsLvJ1i85lQAiM62+
7Y3r2iKRY6sGgPkFwiknEAZLly164nBMDUuq8Io0Xv1ViQb17r8QpIUVkKmRAru7
/5gtNYiMFv9HLua4Tt8Qo0gdyDdNtt51l/rP7r5vOdkZuVfmAexEKztsoc2HTDeh
ibXyHrVI3DgeH0WIV2CNvlYoE1dkAOFUUlXzk/Y9BazHW/PsSMk3ma2dJkDNPDm+
ScxZUHP9h/9LgLj/tLSe
=PmzK
-----END PGP SIGNATURE-----
```",83774906
920,False,False,2017-11-03T16:01:32Z,2017-11-03T21:34:03Z,"About Qtum and Mainnet Ignition
-------------------------------

Qtum is a decentralized blockchain project built on Bitcoin's UTXO model, with support for Ethereum Virtual Machine based smart contracts, and secured by a proof of stake consensus model. It achieves this through the revolutionary Account Abstraction Layer which allows the EVM to communicate with Qtum's Bitcoin-like UTXO blockchain. For more general information about Qtum as well as links to join our community, go to https://qtum.org

Welcome to the Qtum Ignition Main Network. This is the main network where the tokens hold value and should be guarded very carefully. There will be a testnet setup soon for developers, in the meantime you can use `-regtest` mode for testing needs. We will announce details about the token swap from QTUM ERC20 coins to QTUM mainnet tokens soon, watch our [website](https://qtum.org) for details about that.  

The major features implemented in Qtum Ignition include:

1. The Ethereum Virtual Machine, which allows for compatibility with most existing Solidity based smart contracts.
2. The Smart Staking Protocol is complete, which is an optimized Proof of Stake implementation designed for a smart contract platform (however, smart contracts can not participate in staking yet).
3. An early and basic smart contract GUI has been implemented that can be used for creating contracts, sending data and Qtum to them, and checking their status by executing them locally. This functionality is similar to Mist's UI right now, but it is still an early version. We will be working on this more to improve it. 
4. Regtest mode, which is ideal for developers who wish to create their own private blockchain. It is tuned specifically to make development easier. It will stake blocks automatically every 30 seconds, and can generate proof-of-work blocks instantly as needed.
5. The Decentralized Governance Protocol is completely implemented and functional, which allows certain network parameters to be modified without a fork.

For more technical information for how to start developing with Qtum please read the [Guide](https://github.com/qtumproject/qtum/blob/master/doc/sparknet-guide.md) and also see this tutorial for deploying a simple [faucet smart contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet) (it hasn't yet been updated for Mainnet for obvious reasons, but all the instructions are the same and you can try them in regtest mode)

Note: Qtum Core is considered beta software. We make no warranties or guarantees of its security or stability.

Update History
--------------

* v1.1.0: Add GUI support Qtum QRC tokens, allowing full management of tokens on the Qtum blockchain from the Qt wallet
    * Sending to a contract no longer requires ABI data, allowing easy participation in simple crowdsale contracts
* v1.0.4: Fix bug where certain circumstances when staking could cause the displayed balance to be inaccurate until completely redownloading the blockchain.
* v1.0.3: Fix staker bug that reported false messages; slightly increases staking performance; optimize staker parameters; fix white send button in GUI
* v1.0.2: Various UI fixes, minor gas overflow consensus fix, per-txout exploit fix, testnet mode setup and functioning
* v1.0.1: Fixed network magic bytes and minimum version to ensure the main network does not conflict with the Skynet network
* v1.0: Initial release

Reindex Required When Upgrading from v1.0.1
----------------------------------------------

When you first start the Qtum 1.0.2 GUI wallet after using Qtum v1.0.1 it will prompt you that it must reindex the database. This is normal and is a result of switching our internal database format from per-transaction to per-txout. If you use `qtumd -daemon` it will silently fail to start. You need to use `qtumd -daemon -reindex` in this case. 

Qtum Documentation and Usage Resources
---------------

Basic usage resources:

* [Official Qtum Usage Guide](https://github.com/qtumproject/qtum/wiki/Qtum-Wallet-Tutorial)
* [Unofficial Qtum staking tutorial](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtum-qt)
* [Unofficial Qtum staking tutorial on Raspberry Pi](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtumd-on-a-raspberry-pi-3)
* [Unofficial guide for keeping your wallet safe](https://steemit.com/qtum/@cryptominder/encrypting-backing-up-and-restoring-your-qtum-wallet)
* [Block explorer](https://explorer.qtum.org)
* [Unofficial block explorer](https://qtumexplorer.io/)

Development resources:

* [Deploying a custom token to Qtum](https://blog.qtum.org/qtum-custom-token-walkthrough-467d725fa27d)
* [Early example faucet contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet)
* [Unofficial Qtum Hello World tutorial](https://steemit.com/qtum/@cryptominder/quantum-qtum-blockchain-developer-tutorial-hello-world)

General Info about Qtum:

* [Mainnet event AMA](https://www.reddit.com/r/Qtum/comments/6zs8t0/official_qtum_ama_thread_starts_at_10pm_beijing/)
* [Qtum's PoS vs CASPER](https://www.reddit.com/r/Qtum/comments/788oa5/qtums_pos_vs_casper_and_the_nothingatstake_problem/)
* [Technical article explaining Qtum's PoS model in depth](http://earlz.net/view/2017/07/27/1904/the-missing-explanation-of-proof-of-stake-version)
* [Unofficial What is Qtum article](https://storeofvalue.github.io/posts/what-is-qtum-without-the-bullshit/)

Quickstart
----------

The easiest way to get started with Qtum is to simply download the binaries below. To give a brief breakdown of the different versions available: 

#### Windows

* [qtum-0.14.6-win64.zip](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.0/qtum-0.14.6-win64.zip) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using Windows.
* [qtum-0.14.6-win64-setup-unsigned.exe](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.0/qtum-0.14.6-win64-setup-unsigned.exe) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using Windows. This includes an installer and will install Qtum system wide.
* [qtum-0.14.6-win32.zip](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.0/qtum-0.14.6-win32.zip) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 machines using Windows. If you have an older Windows computer and don't care about installing Qtum system-wide, 
* [qtum-0.14.6-win32-setup-unsigned.exe](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.0/qtum-0.14.6-win32-setup-unsigned.exe) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 machines using Windows. This includes an installer and will install Qtum system wide. If you have an older Windows computer and want to install Qtum then this is for you.

#### OSX

* [qtum-0.14.6-osx64.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.0/qtum-0.14.6-osx64.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using OSX. If you use a modern Mac and want development tools, this is what you want; we do not support older 32bit or PowerPC based Macs.
* [qtum-0.14.6-osx-unsigned.dmg](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.0/qtum-0.14.6-osx-unsigned.dmg) - A version of Qtum-Qt built for 64bit x86 machines using OSX in a .DMG installable format. If you use a modern Mac and aren't a developer, this is what you want; we do not support older 32bit or PowerPC based Macs.

#### Linux

* [qtum-0.14.6-i686-pc-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.0/qtum-0.14.6-i686-pc-linux-gnu.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 PC platforms running Linux. This is probably what you want for older computers running Linux
* [qtum-0.14.6-x86_64-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.0/qtum-0.14.6-x86_64-linux-gnu.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 PC platforms running Linux. This is probably what you want for any modern PC or server running Linux
* [qtum-0.14.6-arm-linux-gnueabihf.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.0/qtum-0.14.6-arm-linux-gnueabihf.tar.gz) - A version of qtumd and qtum-cli built for 32bit ARM platforms using Linux. This includes the Raspberry Pi and many of it's clones
* [qtum-0.14.6-aarch64-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.1.0/qtum-0.14.6-aarch64-linux-gnu.tar.gz) - A version of qtumd and qtum-cli built for 64bit ARM platforms using Linux

Below in the full list of binaries, there are also versions that include debug symbols. These are useful for developers, but will run slower and are significantly larger to download. 

#### Build Qtum Core

If you want to build it from source, it's recommended to follow the specific [""build"" documentation](https://github.com/qtumproject/qtum/tree/testnet-2/doc) for your platform. But mostly it boils down to the following:

1. Clone the qtum source code and cd into `qtum`

        git clone --recursive https://github.com/qtumproject/qtum.git
        cd qtum


2.  Build qtum-core:

    Configure and build the headless qtum binaries as well as the GUI (if Qt is found).

    You can disable the GUI build by passing `--without-gui` to configure.

        ./autogen.sh
        ./configure
        make

3.  It is recommended to build and run the unit tests to ensure everything is working correctly:

        make check


If you encounter an error like:

> make[2]: *** No rule to make target ‘cpp-ethereum/utils/libscrypt/b64.c’, needed by ‘cpp-ethereum/utils/libscrypt/libbitcoinconsensus_la-b64.lo’.  Stop.

Then you did not checkout the cpp-ethereum submodule for Qtum. To do that, simply:

    cd qtum
    git submodule update --init --recursive

Validate and Reproduce Binaries
---------------------------------

Qtum uses a tool called Gitian to make reproducible builds that can be verified by anyone. Instructions on setting up a Gitian VM and building Qtum are provided [in doc/gitian-building.md](https://github.com/qtumproject/qtum/blob/master/doc/gitian-building.md)

Community Resources
---------

Make sure to check out these resources as well for more information and to keep up to date with all the latest news about Qtum. At least 1 developer is always around, so if you're developing on Qtum and need help, we'd love to welcome you to our community.  

* [/r/Qtum on Reddit](https://www.reddit.com/r/Qtum/)
* [Qtum Telegram Group](https://t.me/joinchat/D5oBaw29NeOdpw6qqqf2lw)
* [@QtumOfficial on Twitter](https://mobile.twitter.com/qtumofficial)
* [Qtum on Facebook](https://www.facebook.com/QtumOfficial/)
* [Qtum Forum](https://forum.qtum.org/)
* [Qtum.org](https://qtum.org/en/)


Qtum Smart Contract Limitations
-----------

* EVM smart contracts can not receive coins from or send coins to any address type other than pay-to-pubkeyhash (starts with Q) addresses. This is due to a limitation in the EVM
* Contracts are not allowed to create contracts with an initial endowment of coins. The contract must first be created, and then be sent coins in a separate transaction. Humans are also not allowed to create contracts with an initial endowment of coins.
* Although all of the infrastructure is present, Qtum Core does not currently parse Solidity event data. You must parse this yourself using either `searchlogs` or `-record-log-opcodes` features.
* It is not possible to send a contract coins without also executing the contract. This is also the case of Ethereum. This was promised in earlier discussions and technically does work, but due to lack of time for testing this feature was disabled. We hope to reenable this feature with release of the x86 virtual machine in 2018.
* In Qtum there can be multiple addresses used to create a proof-of-stake block. However, the EVM can only see the first output using the `coinbase` operation in Solidity (this address is also the one registered for the continuous staker rewards after 500 blocks). 

Hash Validation
----------------

```
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

If you would like to validate that the binaries you download are exactly the same as those provided and built by the Qtum team, then you can compare your binaries to the following sha256sum hashes:

f969b3f59a8a62bed2419766580cf0a9849db141e5fb22adc538ba27dc26f2ba  qtum-0.14.6-osx-unsigned.dmg
143cc4dd0dc7c27d37f0577be90244c27d9bc774f1ad2f880cd6b2d2eff48db3  qtum-0.14.6-osx-unsigned.tar.gz
58de033b5f091de665e2d50e1c18adbf2867451c555e187582f36238b4dfcbfa  qtum-0.14.6-osx64.tar.gz
1a4f407ad165177a9950c33053778e44c5b1a1d5d913a8fcd27f7ada698087f8  src/qtum-0.14.6.tar.gz
9aac11978cf3aa1fa814885253fdb0c59b3d050113597786d07446929dc6b01a  qtum-osx-0.14-res.yml

2a404b42149dc1ef617b1d582e5690cb2d4cb386e4e4e6aa94fc412c8017ef41685  qtum-0.14.6-aarch64-linux-gnu-debug.tar.gz
8dae9d9a8bc38d18b53bafa1ac4a87c93b3308cea69c10558c04cbfe155249de  qtum-0.14.6-aarch64-linux-gnu.tar.gz
206a6b32953ebafa5cb26c435334fba780222a84860025953cefe623487614b1  qtum-0.14.6-arm-linux-gnueabihf-debug.tar.gz
1063aa207afa9bf61e4633a28d8ec8c3d2f72f8cc43e284f58346a8a96bf9970  qtum-0.14.6-arm-linux-gnueabihf.tar.gz
d2eb64462f63bd5e83a822103d0edb6d6be1ed2c1bc91ac26000dfffb42d0a1b  qtum-0.14.6-i686-pc-linux-gnu-debug.tar.gz
e1a8790e4810c6a999fa76119b319f4cffaa336f3716477b02b00f77b1182eaf  qtum-0.14.6-i686-pc-linux-gnu.tar.gz
b267fe4342610e17351528d1334a427092f1e36479cd68e63d7e76ccc21e7445  qtum-0.14.6-x86_64-linux-gnu-debug.tar.gz
35122c1a05745aad43b6044c83a9d93c0c0725b2461c40eab5afd5dd598cd4ae  qtum-0.14.6-x86_64-linux-gnu.tar.gz
1a4f407ad165177a9950c33053778e44c5b1a1d5d913a8fcd27f7ada698087f8  src/qtum-0.14.6.tar.gz
89484b7caa427959dfee542358489e7a1c50a840f286102af0a428e3cfd0891f  qtum-linux-0.14-res.yml

a1ebed92a95f69008116e55585deacea18279407bd6612664d1d349c4588a3a3  qtum-0.14.6-win-unsigned.tar.gz
818b32af02061c3c173b538701297018ba90c96a90d207837a7ee2071483ca39  qtum-0.14.6-win32-debug.zip
6c2d3d0bdb947cab3a3a4e360c007c25644ed58806edf42aa334af37431a664b  qtum-0.14.6-win32-setup-unsigned.exe
9b5ab577dd843da6195d0d0d78f4676a468e56d73936c774cdebd970f2d24a23  qtum-0.14.6-win32.zip
ce0e1d041a771bfd83a934208ca6fbc28f0cb5cbdc415d0d86d527c794900bb2  qtum-0.14.6-win64-debug.zip
28f5e68958eebb97499b6e150b922ede2cd6a80b4d385eeb19e073a38e066b33  qtum-0.14.6-win64-setup-unsigned.exe
715e65dc007a52d52dc1bb43a723cdd84a225d843c4c2786e8c402fdae3a0440  qtum-0.14.6-win64.zip
44c87b827304adef7febf9feaf39ef897eadaf42dbadf52e22be639dc47799a6  src/qtum-0.14.6.tar.gz
bb8f6868c07e0aab8a6d9fd0f096b4c2a4e13651baf1b958bd9fe8c631ea2574  qtum-win-0.14-res.yml

In addition, as of the time of this writing, VirusTotal detects 0 false positives on the Windows 32bit and 64bit zip files, and 1 false positive on the Windows 32bit and 64bit installer:

installer win32: https://www.virustotal.com/#/file/6c2d3d0bdb947cab3a3a4e360c007c25644ed58806edf42aa334af37431a664b/detection 1 false positive (""unsafe"" by Cylance)

installer win64 https://www.virustotal.com/#/file/28f5e68958eebb97499b6e150b922ede2cd6a80b4d385eeb19e073a38e066b33/detection 1 false positive (""unsafe"" by Cylance)

zip win32 https://www.virustotal.com/#/file/9b5ab577dd843da6195d0d0d78f4676a468e56d73936c774cdebd970f2d24a23/detection 0 false positives

zip win64 https://www.virustotal.com/#/file/715e65dc007a52d52dc1bb43a723cdd84a225d843c4c2786e8c402fdae3a0440/detection 0 false positives

You can validate this message is from Earlz at https://keybase.io/verify
-----BEGIN PGP SIGNATURE-----
Version: Keybase OpenPGP v2.0.76
Comment: https://keybase.io/crypto

wsFcBAABCgAGBQJZ/N9fAAoJEAKXMK2l7Ra+GIIP/R/wOpXWb9/H2q0XJEgH9hKd
RCtpzzNO+Qfbeg4gGLim2DRtfnlbvUnvXOCJSGMPDmUEc50e5r5saGwWLS0TYzQk
SfyIbgMEHwMTrOI3Ri8V8P+T1vQKoXB1A7hYZJw8RpKg0ymu148SykEye6mlLqXj
lon80axyE+qqphuGuDmnjvXCp1N7PifNCIZBTs5+G20By3j+1lcT6fL7+4aIDws4
P2dhQY3ZY6M4jPe7qp2LDCHZt/5foIcekaIZsg8foXVyVN5nPSq1v+SJLFpDrD18
0eF1xnxUeR1be1KJ7UfVOECHMLrwrWNhVlyYxgh03+qRg5Kx8KUK7yyyM5mg8wsO
SFZDWiA5LjiHDsggq7utOyejWZQDqC22Yv198ALDaG6b4BISw1XMYz+8rg3tOrac
cckMXLLQUdtYRpBPcXK3ItXFIOKbXFoQ+YMrHZrw780NAEEVWj0cKCa2JdCniRIP
uohzRMuG+4wyK6uP+uK7E/BBjWz98mqn75WRuZIkMxIYbyxClz9hwxpLewkCssAt
q5Z2/HP0xJDHDCFOYdsrwJzpN+HbQODqigzlf+Q97ukfJ8ZBcogPtyohh4oDJC2U
dIq5Jj2KuXQpMpi7F1CYG+Oy295p67cjSoDg2w73+QayjDSUdKs0yWiNxjtAYLYr
9iG+3V1xROLj+cm0N9KL
=+svp
-----END PGP SIGNATURE-----
```
",83774906
921,False,False,2017-10-30T21:02:04Z,2017-10-31T15:41:56Z,"About Qtum and Mainnet Ignition
-------------------------------

Qtum is a decentralized blockchain project built on Bitcoin's UTXO model, with support for Ethereum Virtual Machine based smart contracts, and secured by a proof of stake consensus model. It achieves this through the revolutionary Account Abstraction Layer which allows the EVM to communicate with Qtum's Bitcoin-like UTXO blockchain. For more general information about Qtum as well as links to join our community, go to https://qtum.org

Welcome to the Qtum Ignition Main Network. This is the main network where the tokens hold value and should be guarded very carefully. There will be a testnet setup soon for developers, in the meantime you can use `-regtest` mode for testing needs. We will announce details about the token swap from QTUM ERC20 coins to QTUM mainnet tokens soon, watch our [website](https://qtum.org) for details about that.  

The major features implemented in Qtum Ignition include:

1. The Ethereum Virtual Machine, which allows for compatibility with most existing Solidity based smart contracts.
2. The Smart Staking Protocol is complete, which is an optimized Proof of Stake implementation designed for a smart contract platform (however, smart contracts can not participate in staking yet).
3. An early and basic smart contract GUI has been implemented that can be used for creating contracts, sending data and Qtum to them, and checking their status by executing them locally. This functionality is similar to Mist's UI right now, but it is still an early version. We will be working on this more to improve it. 
4. Regtest mode, which is ideal for developers who wish to create their own private blockchain. It is tuned specifically to make development easier. It will stake blocks automatically every 30 seconds, and can generate proof-of-work blocks instantly as needed.
5. The Decentralized Governance Protocol is completely implemented and functional, which allows certain network parameters to be modified without a fork.

For more technical information for how to start developing with Qtum please read the [Guide](https://github.com/qtumproject/qtum/blob/master/doc/sparknet-guide.md) and also see this tutorial for deploying a simple [faucet smart contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet) (it hasn't yet been updated for Mainnet for obvious reasons, but all the instructions are the same and you can try them in regtest mode)

Note: Qtum Core is considered beta software. We make no warranties or guarantees of its security or stability.

Update History
--------------

* v1.0.4: Fix bug where certain circumstances when staking could cause the displayed balance to be inaccurate until completely redownloading the blockchain.
* v1.0.3: Fix staker bug that reported false messages; slightly increases staking performance; optimize staker parameters; fix white send button in GUI
* v1.0.2: Various UI fixes, minor gas overflow consensus fix, per-txout exploit fix, testnet mode setup and functioning
* v1.0.1: Fixed network magic bytes and minimum version to ensure the main network does not conflict with the Skynet network
* v1.0: Initial release

Reindex Required When Upgrading from v1.0.1
----------------------------------------------

When you first start the Qtum 1.0.2 GUI wallet after using Qtum v1.0.1 it will prompt you that it must reindex the database. This is normal and is a result of switching our internal database format from per-transaction to per-txout. If you use `qtumd -daemon` it will silently fail to start. You need to use `qtumd -daemon -reindex` in this case. 

Qtum Documentation and Usage Resources
---------------

Basic usage resources:

* [Official Qtum Usage Guide](https://github.com/qtumproject/qtum/wiki/Qtum-Wallet-Tutorial)
* [Unofficial Qtum staking tutorial](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtum-qt)
* [Unofficial Qtum staking tutorial on Raspberry Pi](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtumd-on-a-raspberry-pi-3)
* [Unofficial guide for keeping your wallet safe](https://steemit.com/qtum/@cryptominder/encrypting-backing-up-and-restoring-your-qtum-wallet)
* [Block explorer](https://explorer.qtum.org)
* [Unofficial block explorer](https://qtumexplorer.io/)

Development resources:

* [Deploying a custom token to Qtum](https://blog.qtum.org/qtum-custom-token-walkthrough-467d725fa27d)
* [Early example faucet contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet)
* [Unofficial Qtum Hello World tutorial](https://steemit.com/qtum/@cryptominder/quantum-qtum-blockchain-developer-tutorial-hello-world)

General Info about Qtum:

* [Mainnet event AMA](https://www.reddit.com/r/Qtum/comments/6zs8t0/official_qtum_ama_thread_starts_at_10pm_beijing/)
* [Qtum's PoS vs CASPER](https://www.reddit.com/r/Qtum/comments/788oa5/qtums_pos_vs_casper_and_the_nothingatstake_problem/)
* [Technical article explaining Qtum's PoS model in depth](http://earlz.net/view/2017/07/27/1904/the-missing-explanation-of-proof-of-stake-version)
* [Unofficial What is Qtum article](https://storeofvalue.github.io/posts/what-is-qtum-without-the-bullshit/)

Quickstart
----------

The easiest way to get started with Qtum is to simply download the binaries below. To give a brief breakdown of the different versions available: 

#### Windows

* [qtum-0.14.5-win64.zip](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.4/qtum-0.14.5-win64.zip) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using Windows.
* [qtum-0.14.5-win64-setup-unsigned.exe](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.4/qtum-0.14.5-win64-setup-unsigned.exe) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using Windows. This includes an installer and will install Qtum system wide.
* [qtum-0.14.5-win32.zip](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.4/qtum-0.14.5-win32.zip) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 machines using Windows. If you have an older Windows computer and don't care about installing Qtum system-wide, 
* [qtum-0.14.5-win32-setup-unsigned.exe](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.4/qtum-0.14.5-win32-setup-unsigned.exe) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 machines using Windows. This includes an installer and will install Qtum system wide. If you have an older Windows computer and want to install Qtum then this is for you.

#### OSX

* [qtum-0.14.5-osx64.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.4/qtum-0.14.5-osx64.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using OSX. If you use a modern Mac and want development tools, this is what you want; we do not support older 32bit or PowerPC based Macs.
* [qtum-0.14.5-osx-unsigned.dmg](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.4/qtum-0.14.5-osx-unsigned.dmg) - A version of Qtum-Qt built for 64bit x86 machines using OSX in a .DMG installable format. If you use a modern Mac and aren't a developer, this is what you want; we do not support older 32bit or PowerPC based Macs.

#### Linux

* [qtum-0.14.5-i686-pc-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.4/qtum-0.14.5-i686-pc-linux-gnu.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 PC platforms running Linux. This is probably what you want for older computers running Linux
* [qtum-0.14.5-x86_64-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.4/qtum-0.14.5-x86_64-linux-gnu.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 PC platforms running Linux. This is probably what you want for any modern PC or server running Linux
* [qtum-0.14.5-arm-linux-gnueabihf.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.4/qtum-0.14.5-arm-linux-gnueabihf.tar.gz) - A version of qtumd and qtum-cli built for 32bit ARM platforms using Linux. This includes the Raspberry Pi and many of it's clones
* [qtum-0.14.5-aarch64-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.4/qtum-0.14.5-aarch64-linux-gnu.tar.gz) - A version of qtumd and qtum-cli built for 64bit ARM platforms using Linux

Below in the full list of binaries, there are also versions that include debug symbols. These are useful for developers, but will run slower and are significantly larger to download. 

#### Build Qtum Core

If you want to build it from source, it's recommended to follow the specific [""build"" documentation](https://github.com/qtumproject/qtum/tree/testnet-2/doc) for your platform. But mostly it boils down to the following:

1. Clone the qtum source code and cd into `qtum`

        git clone --recursive https://github.com/qtumproject/qtum.git
        cd qtum


2.  Build qtum-core:

    Configure and build the headless qtum binaries as well as the GUI (if Qt is found).

    You can disable the GUI build by passing `--without-gui` to configure.

        ./autogen.sh
        ./configure
        make

3.  It is recommended to build and run the unit tests to ensure everything is working correctly:

        make check


If you encounter an error like:

> make[2]: *** No rule to make target ‘cpp-ethereum/utils/libscrypt/b64.c’, needed by ‘cpp-ethereum/utils/libscrypt/libbitcoinconsensus_la-b64.lo’.  Stop.

Then you did not checkout the cpp-ethereum submodule for Qtum. To do that, simply:

    cd qtum
    git submodule update --init --recursive

Validate and Reproduce Binaries
---------------------------------

Qtum uses a tool called Gitian to make reproducible builds that can be verified by anyone. Instructions on setting up a Gitian VM and building Qtum are provided [in doc/gitian-building.md](https://github.com/qtumproject/qtum/blob/master/doc/gitian-building.md)

Community Resources
---------

Make sure to check out these resources as well for more information and to keep up to date with all the latest news about Qtum. At least 1 developer is always around, so if you're developing on Qtum and need help, we'd love to welcome you to our community.  

* [/r/Qtum on Reddit](https://www.reddit.com/r/Qtum/)
* [Qtum Telegram Group](https://t.me/joinchat/D5oBaw29NeOdpw6qqqf2lw)
* [@QtumOfficial on Twitter](https://mobile.twitter.com/qtumofficial)
* [Qtum on Facebook](https://www.facebook.com/QtumOfficial/)
* [Qtum Forum](https://forum.qtum.org/)
* [Qtum.org](https://qtum.org/en/)


Qtum Smart Contract Limitations
-----------

* EVM smart contracts can not receive coins from or send coins to any address type other than pay-to-pubkeyhash (starts with Q) addresses. This is due to a limitation in the EVM
* Contracts are not allowed to create contracts with an initial endowment of coins. The contract must first be created, and then be sent coins in a separate transaction. Humans are also not allowed to create contracts with an initial endowment of coins.
* Although all of the infrastructure is present, Qtum Core does not currently parse Solidity event data. You must parse this yourself using either `searchlogs` or `-record-log-opcodes` features.
* It is not possible to send a contract coins without also executing the contract. This is also the case of Ethereum. This was promised in earlier discussions and technically does work, but due to lack of time for testing this feature was disabled. We hope to reenable this feature with release of the x86 virtual machine in 2018.
* In Qtum there can be multiple addresses used to create a proof-of-stake block. However, the EVM can only see the first output using the `coinbase` operation in Solidity (this address is also the one registered for the continuous staker rewards after 500 blocks). 

Hash Validation
----------------

```
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

If you would like to validate that the binaries you download are exactly the same as those provided and built by the Qtum team, then you can compare your binaries to the following sha256sum hashes:

191cea2e4d1e1e6eda48a2044352497503db864bcb9d37e82f54f0ac0993b5c1  qtum-0.14.5-osx-unsigned.dmg
0a07a7cf7b66dcc214c551825672aaf0055d5047b621c67e8d7113bbeb2a6d49  qtum-0.14.5-osx-unsigned.tar.gz
16865c934a79350f9378baf49fbce5ef482d9f5ea4e90ffdd4f200344032f062  qtum-0.14.5-osx64.tar.gz
3d056fdd4d19ac7e7323f933c98650bc787becd72d4aad8a495e3017cf686589  src/qtum-0.14.5.tar.gz
b8e1d0096b041fdbbda6b086321da1b61289147653ce7d525bfc2c398e33e7f0  qtum-osx-0.14-res.yml

2a4d502f9b914c021ef83fd10ccfc628369ce4bed3818ae9f078a4192c627380  qtum-0.14.5-aarch64-linux-gnu-debug.tar.gz
abc7f201f1621cc960a1dd8bb1fb60c7d50ac6a2a8e589c25183c687022d0a90  qtum-0.14.5-aarch64-linux-gnu.tar.gz
50e9c53284ae8a33f35b6db3ef88e91bdb433211a1bee7dffacdf8c68796a8b1  qtum-0.14.5-arm-linux-gnueabihf-debug.tar.gz
113d7b889f6a8112e0a0749c5570ed6f8e0425a71be1c9129f94b46027dd2b4b  qtum-0.14.5-arm-linux-gnueabihf.tar.gz
cd03398747c543eb298a342a98f709058f5a819c741fd9f0287f82915f5f97f3  qtum-0.14.5-i686-pc-linux-gnu-debug.tar.gz
c944edc6b0ae607ee0c1ae265c3690662c1341d71acd4be339786d0ed033381b  qtum-0.14.5-i686-pc-linux-gnu.tar.gz
91e181510e707f214c1a33a5801280b7ff2cfce35e58b5604adad2affceab5f7  qtum-0.14.5-x86_64-linux-gnu-debug.tar.gz
754dac3e4e719b88851281175e660708f502427a846a33778e3a5331aa06c576  qtum-0.14.5-x86_64-linux-gnu.tar.gz
3d056fdd4d19ac7e7323f933c98650bc787becd72d4aad8a495e3017cf686589  src/qtum-0.14.5.tar.gz
d27216322779b4305f62a9f2d1905c0fef0b8c6d13243e93bf1857116749fa8d  qtum-linux-0.14-res.yml

69b316b9d069f0374255496fcc28540279fc40725f7bb4211aa6a84682159618  qtum-0.14.5-win-unsigned.tar.gz
23874dfbf194945426529f6e9bd116908e10b345221c5e94693b700c6bc3321e  qtum-0.14.5-win32-debug.zip
856c4a85b53eff7c63787ab0498852e2f16af8088415e93ce5a534f719768fe2  qtum-0.14.5-win32-setup-unsigned.exe
6364f81877b8867d4fbf35cc28067b470ef8abc6d3d63d9eb58283ec3abac317  qtum-0.14.5-win32.zip
b8cc0d50513ebae0e3a591090c9f536c618a6434b5065b7fe5fba8053a2c8ede  qtum-0.14.5-win64-debug.zip
77a555d8d4ccf08b112b8424c562b214fbd94f352454235102ffe672d533aff4  qtum-0.14.5-win64-setup-unsigned.exe
3b89aef0e01af7d30424b3e5db15dde3da3f675eb731cef61304c5f8f5b8e90e  qtum-0.14.5-win64.zip
0f2b3338e9e941f60a02cc923767c36983c37104658327369bc72ae6ab5a18f0  src/qtum-0.14.5.tar.gz
448a1a2ddbee689492dc322ebd4b3bc3c3463ff628f310e9a7e45c00d3ed9cd8  qtum-win-0.14-res.yml

In addition, as of the time of this writing, VirusTotal detects 0 false positives on the Windows 32bit and 64bit zip files, 0 false positives on the Windows 32bit installer, and 1 false positive on the Windows 64bit installer:

installer win32: https://www.virustotal.com/#/file/856c4a85b53eff7c63787ab0498852e2f16af8088415e93ce5a534f719768fe2/detection 0 false positives.

installer win64 https://www.virustotal.com/#/file/3b89aef0e01af7d30424b3e5db15dde3da3f675eb731cef61304c5f8f5b8e90e/detection 1 false positive(AhnLab-V3 Trojan/MSIl.Disfa.C2221224)

zip win32 https://www.virustotal.com/#/file/6364f81877b8867d4fbf35cc28067b470ef8abc6d3d63d9eb58283ec3abac317/detection 0 false positives

zip win64 https://www.virustotal.com/#/file/77a555d8d4ccf08b112b8424c562b214fbd94f352454235102ffe672d533aff4/detection 0 false positives

You can validate this message is from Earlz at https://keybase.io/verify
-----BEGIN PGP SIGNATURE-----
Version: Keybase OpenPGP v2.0.76
Comment: https://keybase.io/crypto

wsFcBAABCgAGBQJZ9+jDAAoJEAKXMK2l7Ra+f4UP/3KrjsOYg7W3nAIstLLLwX2e
qJSCxRdSeKwNJghr4Z0UHQqqt0EHmurZc8MYc5c4PTdyzp8oUmxe/C5x4LGppP6B
mmUIh3+ffbrqApaWs43ar1J+E7ClgdqjVCHuu/hoBms+4yaRfviy6Xh1r+lUciWV
I0dQ7eGkn/7/ReSvepDBMUGP0z2QeXQQwpxoXBzkm0snrSHpTdEfJI3VLUo17U49
4RbrMPc3DNW6zMfXhISxYnRLq7nt/rEzxLM9cbn3oNsgjRU9b49A8OrqnH125FNq
6ufetYhEsscAOrWNpIPl+sNID7unGen7BzwGX0pC0F6f1GCXwJHLpo2r9ZBI19rH
eG+9fj4GfXGiQinCnaBsydni56lEALev7irNeaXsh4BUfq0OC45nSQ4EvXEqPq0l
tGCzKfB+S6CilNN6E3UT5PiB7pRBSV560lKSEjIqC4wOjc09SUyBuUzTJgb0RLdG
9+V8rhogX9xiBWmRZCbcbqrQxA02GgH2tD+nW+zT7Td2TuOjPgs3lvk07382+wQy
89Lnk9z3+mWy6ztMySow7cbokl7gf5e38U+NXEuBJrXHs8ODmOIzQWRUbUoHCXNh
xZmodXpmaXaY3BCPdpdgeB2V6Wb/5ZKIDqXn2Ql9+r52mrNd93F2mVIPXcmDS9vH
Ap3KyxYWxaOGfdxrI5MC
=WDoX
-----END PGP SIGNATURE-----

```
",83774906
922,False,False,2017-10-23T20:07:52Z,2017-10-24T16:53:06Z,"About Qtum and Mainnet Ignition
-------------------------------

Qtum is a decentralized blockchain project built on Bitcoin's UTXO model, with support for Ethereum Virtual Machine based smart contracts, and secured by a proof of stake consensus model. It achieves this through the revolutionary Account Abstraction Layer which allows the EVM to communicate with Qtum's Bitcoin-like UTXO blockchain. For more general information about Qtum as well as links to join our community, go to https://qtum.org

Welcome to the Qtum Ignition Main Network. This is the main network where the tokens hold value and should be guarded very carefully. There will be a testnet setup soon for developers, in the meantime you can use `-regtest` mode for testing needs. We will announce details about the token swap from QTUM ERC20 coins to QTUM mainnet tokens soon, watch our [website](https://qtum.org) for details about that.  

The major features implemented in Qtum Ignition include:

1. The Ethereum Virtual Machine, which allows for compatibility with most existing Solidity based smart contracts.
2. The Smart Staking Protocol is complete, which is an optimized Proof of Stake implementation designed for a smart contract platform (however, smart contracts can not participate in staking yet).
3. An early and basic smart contract GUI has been implemented that can be used for creating contracts, sending data and Qtum to them, and checking their status by executing them locally. This functionality is similar to Mist's UI right now, but it is still an early version. We will be working on this more to improve it. 
4. Regtest mode, which is ideal for developers who wish to create their own private blockchain. It is tuned specifically to make development easier. It will stake blocks automatically every 30 seconds, and can generate proof-of-work blocks instantly as needed.
5. The Decentralized Governance Protocol is completely implemented and functional, which allows certain network parameters to be modified without a fork.

For more technical information for how to start developing with Qtum please read the [Guide](https://github.com/qtumproject/qtum/blob/master/doc/sparknet-guide.md) and also see this tutorial for deploying a simple [faucet smart contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet) (it hasn't yet been updated for Mainnet for obvious reasons, but all the instructions are the same and you can try them in regtest mode)

Note: Qtum Core is considered beta software. We make no warranties or guarantees of its security or stability.

Update History
--------------

* v1.0.3: Fix staker bug that reported false messages; slightly increases staking performance; optimize staker parameters; fix white send button in GUI
* v1.0.2: Various UI fixes, minor gas overflow consensus fix, per-txout exploit fix, testnet mode setup and functioning
* v1.0.1: Fixed network magic bytes and minimum version to ensure the main network does not conflict with the Skynet network
* v1.0: Initial release

Reindex Required When Upgrading from v1.0.1
----------------------------------------------

When you first start the Qtum 1.0.2 GUI wallet after using Qtum v1.0.1 it will prompt you that it must reindex the database. This is normal and is a result of switching our internal database format from per-transaction to per-txout. If you use `qtumd -daemon` it will silently fail to start. You need to use `qtumd -daemon -reindex` in this case. 

Qtum Documentation and Usage Resources
---------------

Basic usage resources:

* [Official Qtum Usage Guide](https://github.com/qtumproject/qtum/wiki/Qtum-Wallet-Tutorial)
* [Unofficial Qtum staking tutorial](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtum-qt)
* [Unofficial Qtum staking tutorial on Raspberry Pi](https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtumd-on-a-raspberry-pi-3)
* [Unofficial guide for keeping your wallet safe](https://steemit.com/qtum/@cryptominder/encrypting-backing-up-and-restoring-your-qtum-wallet)
* [Block explorer](https://explorer.qtum.org)
* [Unofficial block explorer](https://qtumexplorer.io/)

Development resources:

* [Deploying a custom token to Qtum](https://blog.qtum.org/qtum-custom-token-walkthrough-467d725fa27d)
* [Early example faucet contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet)
* [Unofficial Qtum Hello World tutorial](https://steemit.com/qtum/@cryptominder/quantum-qtum-blockchain-developer-tutorial-hello-world)

General Info about Qtum:

* [Mainnet event AMA](https://www.reddit.com/r/Qtum/comments/6zs8t0/official_qtum_ama_thread_starts_at_10pm_beijing/)
* [Qtum's PoS vs CASPER](https://www.reddit.com/r/Qtum/comments/788oa5/qtums_pos_vs_casper_and_the_nothingatstake_problem/)
* [Technical article explaining Qtum's PoS model in depth](http://earlz.net/view/2017/07/27/1904/the-missing-explanation-of-proof-of-stake-version)
* [Unofficial What is Qtum article](https://storeofvalue.github.io/posts/what-is-qtum-without-the-bullshit/)

Quickstart
----------

The easiest way to get started with Qtum is to simply download the binaries below. To give a brief breakdown of the different versions available: 

#### Windows

* [qtum-0.14.4-win64.zip](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.3/qtum-0.14.4-win64.zip) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using Windows.
* [qtum-0.14.4-win64-setup-unsigned.exe](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.3/qtum-0.14.4-win64-setup-unsigned.exe) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using Windows. This includes an installer and will install Qtum system wide.
* [qtum-0.14.4-win32.zip](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.3/qtum-0.14.4-win32.zip) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 machines using Windows. If you have an older Windows computer and don't care about installing Qtum system-wide, 
* [qtum-0.14.4-win32-setup-unsigned.exe](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.3/qtum-0.14.4-win32-setup-unsigned.exe) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 machines using Windows. This includes an installer and will install Qtum system wide. If you have an older Windows computer and want to install Qtum then this is for you.

#### OSX

* [qtum-0.14.4-osx64.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.3/qtum-0.14.4-osx64.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using OSX. If you use a modern Mac and want development tools, this is what you want; we do not support older 32bit or PowerPC based Macs.
* [qtum-0.14.4-osx-unsigned.dmg](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.3/qtum-0.14.4-osx-unsigned.dmg) - A version of Qtum-Qt built for 64bit x86 machines using OSX in a .DMG installable format. If you use a modern Mac and aren't a developer, this is what you want; we do not support older 32bit or PowerPC based Macs.

#### Linux

* [qtum-0.14.4-i686-pc-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.3/qtum-0.14.4-i686-pc-linux-gnu.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 PC platforms running Linux. This is probably what you want for older computers running Linux
* [qtum-0.14.4-x86_64-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.3/qtum-0.14.4-x86_64-linux-gnu.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 PC platforms running Linux. This is probably what you want for any modern PC or server running Linux
* [qtum-0.14.4-arm-linux-gnueabihf.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.3/qtum-0.14.4-arm-linux-gnueabihf.tar.gz) - A version of qtumd and qtum-cli built for 32bit ARM platforms using Linux. This includes the Raspberry Pi and many of it's clones
* [qtum-0.14.4-aarch64-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.3/qtum-0.14.4-aarch64-linux-gnu.tar.gz) - A version of qtumd and qtum-cli built for 64bit ARM platforms using Linux

Below in the full list of binaries, there are also versions that include debug symbols. These are useful for developers, but will run slower and are significantly larger to download. 

#### Build Qtum Core

If you want to build it from source, it's recommended to follow the specific [""build"" documentation](https://github.com/qtumproject/qtum/tree/testnet-2/doc) for your platform. But mostly it boils down to the following:

1. Clone the qtum source code and cd into `qtum`

        git clone --recursive https://github.com/qtumproject/qtum.git
        cd qtum


2.  Build qtum-core:

    Configure and build the headless qtum binaries as well as the GUI (if Qt is found).

    You can disable the GUI build by passing `--without-gui` to configure.

        ./autogen.sh
        ./configure
        make

3.  It is recommended to build and run the unit tests to ensure everything is working correctly:

        make check


If you encounter an error like:

> make[2]: *** No rule to make target ‘cpp-ethereum/utils/libscrypt/b64.c’, needed by ‘cpp-ethereum/utils/libscrypt/libbitcoinconsensus_la-b64.lo’.  Stop.

Then you did not checkout the cpp-ethereum submodule for Qtum. To do that, simply:

    cd qtum
    git submodule update --init --recursive

Validate and Reproduce Binaries
---------------------------------

Qtum uses a tool called Gitian to make reproducible builds that can be verified by anyone. Instructions on setting up a Gitian VM and building Qtum are provided [in doc/gitian-building.md](https://github.com/qtumproject/qtum/blob/master/doc/gitian-building.md)

Community Resources
---------

Make sure to check out these resources as well for more information and to keep up to date with all the latest news about Qtum. At least 1 developer is always around, so if you're developing on Qtum and need help, we'd love to welcome you to our community.  

* [/r/Qtum on Reddit](https://www.reddit.com/r/Qtum/)
* [Qtum Telegram Group](https://t.me/joinchat/D5oBaw29NeOdpw6qqqf2lw)
* [@QtumOfficial on Twitter](https://mobile.twitter.com/qtumofficial)
* [Qtum on Facebook](https://www.facebook.com/QtumOfficial/)
* [Qtum Forum](https://forum.qtum.org/)
* [Qtum.org](https://qtum.org/en/)


Qtum Smart Contract Limitations
-----------

* EVM smart contracts can not receive coins from or send coins to any address type other than pay-to-pubkeyhash (starts with Q) addresses. This is due to a limitation in the EVM
* Contracts are not allowed to create contracts with an initial endowment of coins. The contract must first be created, and then be sent coins in a separate transaction. Humans are also not allowed to create contracts with an initial endowment of coins.
* Although all of the infrastructure is present, Qtum Core does not currently parse Solidity event data. You must parse this yourself using either `searchlogs` or `-record-log-opcodes` features.
* It is not possible to send a contract coins without also executing the contract. This is also the case of Ethereum. This was promised in earlier discussions and technically does work, but due to lack of time for testing this feature was disabled. We hope to reenable this feature with release of the x86 virtual machine in 2018.
* In Qtum there can be multiple addresses used to create a proof-of-stake block. However, the EVM can only see the first output using the `coinbase` operation in Solidity (this address is also the one registered for the continuous staker rewards after 500 blocks). 

Hash Validation
----------------

```
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

If you would like to validate that the binaries you download are exactly the same as those provided and built by the Qtum team, then you can compare your binaries to the following sha256sum hashes:

    48c54cddbdd28d386fe18c7cddc46cfc5d1877775488048d4d7932fd2b666111  qtum-0.14.4-osx-unsigned.dmg
    5b3f3306450037b8cbb7d10b4adbcfa675d889cf6b1ea23df0bd37dac89a374d  qtum-0.14.4-osx-unsigned.tar.gz
    c270743c35ad578aa204670ec12a20e85d85d68f950bd302582d16627764e659  qtum-0.14.4-osx64.tar.gz
    0767ef83a677aee4ecc63bcafe90b038fd75d6a0fbf09ebd91cc6c1beb2850a2  src/qtum-0.14.4.tar.gz
    4cfc7af2d8080ddea9f203812d8e7657c221b368d53fc5afdbc9d082db103c64  qtum-osx-0.14-res.yml

    6e16b09f1564d75e653297b0034b84098f1c5c00ba49ab3be26aabfacbd018aa  qtum-0.14.4-aarch64-linux-gnu-debug.tar.gz
    39acc0c9e422f55a0e830a84167522868edc2179036075f6dcaa0b0850d9c16f  qtum-0.14.4-aarch64-linux-gnu.tar.gz
    19edd1a5e3a239f210c5f4d1373de90aea86a6e9b6a4ec2b14e0f7c67a0df9bc  qtum-0.14.4-arm-linux-gnueabihf-debug.tar.gz
    fa0c212b2d883cf75a1337c8c5a457a42791442c0dc5d94bbaffec2951897247  qtum-0.14.4-arm-linux-gnueabihf.tar.gz
    3f67d2c5a02c98224ffa53c374ba31c5135cecb92c32ff29b2552eff525e7008  qtum-0.14.4-i686-pc-linux-gnu-debug.tar.gz
    6d30d803a767ce37d426336353d75fe643694fcd29b320cd15a958dff3a4d32a  qtum-0.14.4-i686-pc-linux-gnu.tar.gz
    eb2468fc5421ca855d87070f70b67ec7a84894a43c9ddd57dae2feea941e7957  qtum-0.14.4-x86_64-linux-gnu-debug.tar.gz
    e394c256aa2674249f20c089a788d7ff4c9f686b39ea0b51f3dcf0456f949a7a  qtum-0.14.4-x86_64-linux-gnu.tar.gz
    0767ef83a677aee4ecc63bcafe90b038fd75d6a0fbf09ebd91cc6c1beb2850a2  src/qtum-0.14.4.tar.gz
    391918756fb4e04269c8bc3d3570e16bdc2eb4c4e8a7cf8c49d3509d3fad5b5e  qtum-linux-0.14-res.yml

    79187553ee15aeedb6996edf7b27d4572cc76ce345c1c885939731bc2e38c009  qtum-0.14.4-win-unsigned.tar.gz
    d96fc6cc7a335dd4b4c24af304f93b0b2677cc1b45a00804bcd752f6886c0b34  qtum-0.14.4-win32-debug.zip
    ba5dd68eba70b665ad115641051f3da86c1bceb1ba94f76a45885c25d20aca2f  qtum-0.14.4-win32-setup-unsigned.exe
    7da28419dfa8944e24bf0b8ed6053df6a320516ea8982e3af714ff37fe448860  qtum-0.14.4-win32.zip
    bcc1d805758624251d24f35c382918f3ba7c3f2b4e38fca16414a42a9c81a777  qtum-0.14.4-win64-debug.zip
    f867cec706d2f6ac8ff1e1e5047e4b19a245c90d501b779de2727b2806e022fc  qtum-0.14.4-win64-setup-unsigned.exe
    efcfd2c7ffe61fb657c2aaa2a54d6bf5c9cd96a1318349cb2225e5a6c48d3409  qtum-0.14.4-win64.zip
    f6888b883e02679363fbdeb5248f1cd1af5ded347f3f408171cc50bf5815ac6b  src/qtum-0.14.4.tar.gz
    5792df3a3e8f183d9b9b04f71f1015a83abf6563276f806a7ad7f6c897919acf  qtum-win-0.14-res.yml

In addition, as of the time of this writing there is 0 false positives on the Windows 32bit and 64bit zip files, and 1 false positive on the Windows 32bit and 64bit installer files:

    installer win32: https://www.virustotal.com/#/file-analysis/OWZhY2Y1OTk5MDk2MmZhMjZlZTFhMGZiMDljZmViZGY6MTUwODg1Nzk4OQ== 1 false positive that we've reported to Rising AV

    installer win64 https://www.virustotal.com/#/file-analysis/NzFkNWEwY2EwMGVkNDc1ODJhMWViMjFhNWRjZWU3ZTQ6MTUwODg1ODEzMQ== 1 false positive (same as win32)

    zip win32 https://www.virustotal.com/#/file/7da28419dfa8944e24bf0b8ed6053df6a320516ea8982e3af714ff37fe448860/detection 0 false positives

    zip win64 https://www.virustotal.com/#/file-analysis/MGE1ZDU5MjQ4ZmM5NjI2NGNjMzNmYWY3NjIyZjk5YWQ6MTUwODg1ODE0Ng== 0 false positives

You can validate this message is from Earlz at https://keybase.io/verify
-----BEGIN PGP SIGNATURE-----
Version: Keybase OpenPGP v2.0.76
Comment: https://keybase.io/crypto

wsFcBAABCgAGBQJZ716uAAoJEAKXMK2l7Ra+TpgQAJrBjZuuHlCkpVcEDhkmccNK
FE6D9VZ3bTfw2+fu/PG6tZFgTxjBMC2zTLkyGmv11SnSw0q61c+YKJDaKiZvrz2Q
jAMHyL9T5Q9iRetAk3PHkKv7SXcApjdZY+LzOU9Htiwh5XSqfYnjJkAGqc+6xIux
NJRFP5fp3kSLVsoG/REZ3xD/ogjRc10oPolFcgkLmZyZhlCz7/GVsa32hBZ5cwvR
2soRH94Qp2kI3MvPi/4c40wHmUctOwwqZUOw++ZyG168Doz6reeebK70OBOaJKkl
LCnbjQMUD/zOeU9haRHQrLUvi9proDsizDFEiWQBINWOmnfrDy2sBSNPg1pbyGVU
ei4rBoXqieOz/4VusxKPzzpkDKgSbh094M+bjKZEECRs8PK2GzxYCb/sx4f4KYcr
NsfS2ekYE30cgkqV1KJDyLQfE7HCgWKto1R2+Y1/veTGNvyqwWBbNSw6/dNn1LDp
rmw/5RAZZN67dgBCmzf+v9nJr9YEVQoAK26tyx/ge6Tgc+WABqHtQm6EWtunactv
fUynkvY0iOrLTlPrJBL6yMBafc/dHOti3MabcU2B787yW1FwudmLEULzr/EZBjAl
PE/5j7VIU/54d1to50i8wQXb9kWWVfVdnuj4Oh0GUwo38G4gcXrdhm/Nc/qBiyic
LJYxm6pJzUAnF/qrV7XP
=g54m
-----END PGP SIGNATURE-----
```
",83774906
923,False,False,2017-10-03T17:37:52Z,2017-10-03T17:40:33Z,"Qtum is a decentralized blockchain project built on Bitcoin's UTXO model, with support for Ethereum Virtual Machine based smart contracts, and secured by a proof of stake consensus model. It achieves this through the revolutionary Account Abstraction Layer which allows the EVM to communicate with Qtum's Bitcoin-like UTXO blockchain. For more general information about Qtum as well as links to join our community, go to https://qtum.org

Welcome to the Qtum Ignition Main Network. This is the main network where the tokens hold value and should be guarded very carefully. There will be a testnet setup soon for developers, in the meantime you can use `-regtest` mode for testing needs. We will announce details about the token swap from QTUM ERC20 coins to QTUM mainnet tokens soon, watch our [website](https://qtum.org) for details about that.  

The major features implemented in Qtum Ignition include:

1. The Ethereum Virtual Machine, which allows for compatibility with most existing Solidity based smart contracts.
2. The Smart Staking Protocol is complete, which is an optimized Proof of Stake implementation designed for a smart contract platform (however, smart contracts can not participate in staking yet).
3. An early and basic smart contract GUI has been implemented that can be used for creating contracts, sending data and Qtum to them, and checking their status by executing them locally. This functionality is similar to Mist's UI right now, but it is still an early version. We will be working on this more to improve it. 
4. Regtest mode, which is ideal for developers who wish to create their own private blockchain. It is tuned specifically to make development easier. It will stake blocks automatically every 30 seconds, and can generate proof-of-work blocks instantly as needed.
5. The Decentralized Governance Protocol is completely implemented and functional, which allows certain network parameters to be modified without a fork.

For more technical information for how to start developing with Qtum please read the [Guide](https://github.com/qtumproject/qtum/blob/master/doc/sparknet-guide.md) and also see this tutorial for deploying a simple [faucet smart contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet) (it hasn't yet been updated for Mainnet for obvious reasons, but all the instructions are the same and you can try them in regtest mode)

Note: Qtum Core is considered beta software. We make no warranties or guarantees of its security or stability.

Reindex Required When Upgrading from v1.0.1
----------------------------------------------

When you first start the Qtum 1.0.2 GUI wallet after using Qtum v1.0.1 it will prompt you that it must reindex the database. This is normal and is a result of switching our internal database format from per-transaction to per-txout. If you use `qtumd -daemon` it will silently fail to start. You need to use `qtumd -daemon -reindex` in this case. 

Deleting the Sparknet and Skynet blockchain
--------------------------------

If you downloaded the Sparknet or Skynet wallet and ran it at some point, then most likely you have a copy of the Sparknet or Skynet blockchain on your computer. There is no value in keeping this and it is safe to delete. You simply need to delete the data directory you chose when you first ran Qtum. If you're not sure, then it is probably in the default location. This location depends on platform:

* On Linux: `~/.qtum`
* On OSX: `~/Library/Application Support/Qtum`
* On Windows: `%APPDATA%\Qtum` (copy and paste this into your Explorer address bar and it'll take you there)

If you get an error about ""unknown genesis block"" or something similar, then this is the problem and you need to delete the old blockchain. Make sure to not delete the file `wallet.dat` if you have any mainnet Qtum tokens stored in an address within it. (It's recommended to keep it and then resync and make sure your coins are safe, just in case)

Quickstart
----------

The easiest way to get started with Qtum is to simply download the binaries below. To give a brief breakdown of the different versions available: 

#### Windows

* [qtum-0.14.3-win64.zip](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.2/qtum-0.14.3-win64.zip) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using Windows.
* [qtum-0.14.3-win64-setup-unsigned.exe](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.2/qtum-0.14.3-win64-setup-unsigned.exe) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using Windows. This includes an installer and will install Qtum system wide.
* [qtum-0.14.3-win32.zip](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.2/qtum-0.14.3-win32.zip) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 machines using Windows. If you have an older Windows computer and don't care about installing Qtum system-wide, 
* [qtum-0.14.3-win32-setup-unsigned.exe](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.2/qtum-0.14.3-win32-setup-unsigned.exe) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 machines using Windows. This includes an installer and will install Qtum system wide. If you have an older Windows computer and want to install Qtum then this is for you.

#### OSX

* [qtum-0.14.3-osx64.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.2/qtum-0.14.3-osx64.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using OSX. If you use a modern Mac and want development tools, this is what you want; we do not support older 32bit or PowerPC based Macs.
* [qtum-0.14.3-osx-unsigned.dmg](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.2/qtum-0.14.3-osx-unsigned.dmg) - A version of Qtum-Qt built for 64bit x86 machines using OSX in a .DMG installable format. If you use a modern Mac and aren't a developer, this is what you want; we do not support older 32bit or PowerPC based Macs.

#### Linux

* [qtum-0.14.3-i686-pc-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.2/qtum-0.14.3-i686-pc-linux-gnu.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 PC platforms running Linux. This is probably what you want for older computers running Linux
* [qtum-0.14.3-x86_64-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.2/qtum-0.14.3-x86_64-linux-gnu.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 PC platforms running Linux. This is probably what you want for any modern PC or server running Linux
* [qtum-0.14.3-arm-linux-gnueabihf.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.2/qtum-0.14.3-arm-linux-gnueabihf.tar.gz) - A version of qtumd and qtum-cli built for 32bit ARM platforms using Linux. This includes the Raspberry Pi and many of it's clones
* [qtum-0.14.3-aarch64-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.2/qtum-0.14.3-aarch64-linux-gnu.tar.gz) - A version of qtumd and qtum-cli built for 64bit ARM platforms using Linux

Below in the full list of binaries, there are also versions that include debug symbols. These are useful for developers, but will run slower and are significantly larger to download. 


#### Build Qtum Core

If you want to build it from source, it's recommended to follow the specific [""build"" documentation](https://github.com/qtumproject/qtum/tree/testnet-2/doc) for your platform. But mostly it boils down to the following:

1. Clone the qtum source code and cd into `qtum`

        git clone --recursive https://github.com/qtumproject/qtum.git
        cd qtum


2.  Build qtum-core:

    Configure and build the headless qtum binaries as well as the GUI (if Qt is found).

    You can disable the GUI build by passing `--without-gui` to configure.

        ./autogen.sh
        ./configure
        make

3.  It is recommended to build and run the unit tests to ensure everything is working correctly:

        make check


If you encounter an error like:

> make[2]: *** No rule to make target ‘cpp-ethereum/utils/libscrypt/b64.c’, needed by ‘cpp-ethereum/utils/libscrypt/libbitcoinconsensus_la-b64.lo’.  Stop.

Then you did not checkout the cpp-ethereum submodule for Qtum. To do that, simply:

    cd qtum
    git submodule update --init --recursive


Resources
---------

Make sure to check out these resources as well for more information and to keep up to date with all the latest news about Qtum. At least 1 developer is always around, so if you're developing on Qtum and need help, we'd love to welcome you to our community.  

* [/r/Qtum on Reddit](https://www.reddit.com/r/Qtum/)
* [Qtum.org](https://qtum.org/en/)
* [@QtumOfficial on Twitter](https://mobile.twitter.com/qtumofficial)
* [Qtum on Facebook](https://www.facebook.com/QtumOfficial/)
* [Qtum Forum](https://forum.qtum.org/)
* [Block explorer](https://qtum.info)

Qtum Smart Contract Limitations
-----------

* EVM smart contracts can not receive coins from or send coins to any address type other than pay-to-pubkeyhash (starts with Q) addresses. This is due to a limitation in the EVM
* Contracts are not allowed to create contracts with an initial endowment of coins. The contract must first be created, and then be sent coins in a separate transaction. Humans are also not allowed to create contracts with an initial endowment of coins.
* Although all of the infrastructure is present, Qtum Core does not currently parse Solidity event data. You must parse this yourself using either `searchlogs` or `-record-log-opcodes` features.
* It is not possible to send a contract coins without also executing the contract. This is also the case of Ethereum. This was promised in earlier discussions and technically does work, but due to lack of time for testing this feature was disabled. We hope to reenable this feature with release of the x86 virtual machine in 2018.
* In Qtum there can be multiple addresses used to create a proof-of-stake block. However, the EVM can only see the first output using the `coinbase` operation in Solidity (this address is also the one registered for the continuous staker rewards after 500 blocks). 

Update History
--------------

* v1.0.2: Various UI fixes, minor gas overflow consensus fix, per-txout exploit fix, testnet mode setup and functioning
* v1.0.1: Fixed network magic bytes and minimum version to ensure the main network does not conflict with the Skynet network
* v1.0: Initial release

Hash Validation
----------------

```
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

If you would like to validate that the binaries you download are exactly the same as those provided and built by the Qtum team, then you can compare your binaries to the following sha256sum hashes:

    257656794419a0f91d31de7e322d0ac8ff345a75e3e264878b1a91a7e0be8313  qtum-0.14.3-osx64.tar.gz
    83f4b5fbbfe43d20efbc7a51ab3a532d9cb007f31ae14cb8e3b266d172ab0b16  qtum-0.14.3-osx-unsigned.dmg
    8cf2631aafbd87e2ef545093bfbcd643152a14da02e6a2bb3af9cf7ddc634418  qtum-0.14.3-osx-unsigned.tar.gz

    f942119fc035ae0a563914709e032d5b5c4048f0d2e95dda8bc02f5aab1f1cb1  qtum-0.14.3-aarch64-linux-gnu-debug.tar.gz
    f61f8e203552be4f549fc38df283be1dd9d29c14d807f3faa5ffd762ceeaf2a1  qtum-0.14.3-aarch64-linux-gnu.tar.gz
    54d13b9b966b60af6b979454243a64f8fb1afb3cbb8de838e3375ad7226c68ab  qtum-0.14.3-arm-linux-gnueabihf-debug.tar.gz
    50c93c64753a4629cc84a6cf29a1484a03de25a6f87fb2df4418dc4abe017766  qtum-0.14.3-arm-linux-gnueabihf.tar.gz
    9f7d6b5df606317416850f03441772d725447e38c59456f9540c70c393722506  qtum-0.14.3-i686-pc-linux-gnu-debug.tar.gz
    e034ad57685d59fac70ba928f8474077a7766ed3d373098eb652cefe00f3b0d2  qtum-0.14.3-i686-pc-linux-gnu.tar.gz
    3d17900bc99efafd07225326ba92e498824fd811d68fb882e42dcb97549c8117  qtum-0.14.3-x86_64-linux-gnu-debug.tar.gz
    822861abae8370dc4909e47a8bcc9d1e375c20ee7295f3a21e931cc4600ec83c  qtum-0.14.3-x86_64-linux-gnu.tar.gz

    08bf6f557e28166f45ad9f76e132bede665900023e9010b5d1b3701d619082df  qtum-0.14.3-win32-debug.zip
    34f59604c4e0015dc394fe0dd1f0ae7542f2d5887c90ae8021497e84d5c7adc4  qtum-0.14.3-win32-setup-unsigned.exe
    32a8be283f84ef5c6e0febdcd09e06d71728eebfb1f30daa93984e847e65b02b  qtum-0.14.3-win32.zip
    f7683deaca00783cccc1ad59f2567f2f8cccca7b9bda5bee2f1748aa11034880  qtum-0.14.3-win64-debug.zip
    736cfc1c7c72a0aa895877bce78dac32dd53441ef9c78a6da6019af80a65bc4b  qtum-0.14.3-win64.zip
    d7f5887c25734d8246a73b9190f4b469b8b28234d5343472d9754c32c0bc4b32  qtum-0.14.3-win64-setup-unsigned.exe

You can validate this message is from Earlz at https://keybase.io/verify
-----BEGIN PGP SIGNATURE-----
Version: Keybase OpenPGP v2.0.76
Comment: https://keybase.io/crypto

wsFcBAABCgAGBQJZ4h9sAAoJEAKXMK2l7Ra+yJsQAJ1NkOdQ8iMrYervUMIWTDz2
SOGeGP6D5MTw3i0Lt0o7FqJVRC+/r87xK3hnXhRg/Is2wuyC83VaUSV53QAVQxC9
5OWCADjVFW9R9PGbpZa3sQ8sK0LnQj/kFvi+47/CmuJHHDazgEYRw+GwvIi8Cy1/
+EA5mDmbIEgBx+prwyOc7qmiFrB53u9mqebbOHyEn6qaTOsgqJP2lWLaXJWJ6THS
CX4yV9wv2M7W7+FXv5MFcWw9tQoG5/YTnC/sI1bUTOwknbeOqsPgVgDEvc4sw+3z
igCgQOYnkHMUJE5bvcMihoSpZqSh5Fscrw+Id+R/sHO1Zyf/avkkNkJVn0v7uAbE
fdFfe6VCJf8ZuFrIjllJMb0I0MpeqZQnZ4nj/EBUpX92rAIBcFaPRdU+oH2plP4E
QaH3Gm/Fg0Z+o+Vp++pfMKxWfpPI5xg5sJ4lnA/vmBiS8AUdN0ULZvXcIKFoAqCZ
Yegnti227XcO02hm4A2fABjGjfEruEh0JPQ7ZeXyyyOKZZfH7WxcXaLDDs3WTeTJ
U+QukiBfFNFHuXdwcFCfddSOiWQqgXVc8zctPWjbXQEXdpFz2cw4eWnYmdfM5t/e
rU51wRlN+6wAoAyNZmfiesdgiWtjMOmT9c24muf3hjbN/9bsKmgn/a/Himc6PLe8
fqzEFc5jI15plCQ89h4R
=jUL/
-----END PGP SIGNATURE-----
```
",83774906
924,False,False,2017-09-13T02:38:46Z,2017-09-13T13:58:18Z,"Qtum is a decentralized blockchain project built on Bitcoin's UTXO model, with support for Ethereum Virtual Machine based smart contracts, and secured by a proof of stake consensus model. It achieves this through the revolutionary Account Abstraction Layer which allows the EVM to communicate with Qtum's Bitcoin-like UTXO blockchain. For more general information about Qtum as well as links to join our community, go to https://qtum.org

Welcome to the Qtum Ignition Main Network. This is the main network where the tokens hold value and should be guarded very carefully. There will be a testnet setup soon for developers, in the meantime you can use `-regtest` mode for testing needs. We will announce details about the token swap from QTUM ERC20 coins to QTUM mainnet tokens soon, watch our [website](https://qtum.org) for details about that.  

The major features implemented in Qtum Ignition include:

1. The Ethereum Virtual Machine, which allows for compatibility with most existing Solidity based smart contracts.
2. The Smart Staking Protocol is complete, which is an optimized Proof of Stake implementation designed for a smart contract platform (however, smart contracts can not participate in staking yet).
3. An early and basic smart contract GUI has been implemented that can be used for creating contracts, sending data and Qtum to them, and checking their status by executing them locally. This functionality is similar to Mist's UI right now, but it is still an early version. We will be working on this more to improve it. 
4. Regtest mode, which is ideal for developers who wish to create their own private blockchain. It is tuned specifically to make development easier. It will stake blocks automatically every 30 seconds, and can generate proof-of-work blocks instantly as needed.
5. The Decentralized Governance Protocol is completely implemented and functional, which allows certain network parameters to be modified without a fork.


For more technical information for how to start developing with Qtum please read the [Guide](https://github.com/qtumproject/qtum/blob/master/doc/sparknet-guide.md) and also see this tutorial for deploying a simple [faucet smart contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet) (it hasn't yet been updated for Mainnet for obvious reasons, but all the instructions are the same and you can try them in regtest mode)

Deleting the Sparknet and Skynet blockchain
--------------------------------

If you downloaded the Sparknet or Skynet wallet and ran it at some point, then most likely you have a copy of the Sparknet or Skynet blockchain on your computer. There is no value in keeping this and it is safe to delete. You simply need to delete the data directory you chose when you first ran Qtum. If you're not sure, then it is probably in the default location. This location depends on platform:

* On Linux: `~/.qtum`
* On OSX: `~/Library/Application Support/Qtum`
* On Windows: `%APPDATA%\Qtum` (copy and paste this into your Explorer address bar and it'll take you there)

If you get an error about ""unknown genesis block"" or something similar, then this is the problem and you need to delete the old blockchain. Make sure to not delete the file `wallet.dat` if you have any mainnet Qtum tokens stored in an address within it. (It's recommended to keep it and then resync and make sure your coins are safe, just in case)

Quickstart
----------

The easiest way to get started with Qtum is to simply download the binaries below. To give a brief breakdown of the different versions available: 

#### Windows

* [qtum-0.14.3-win32.zip](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.1/qtum-0.14.3-win32.zip) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 machines using Windows. If you have an older Windows computer and don't care about installing Qtum system-wide, 
* [qtum-0.14.3-win32-setup-unsigned.exe](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.1/qtum-0.14.3-win32-setup-unsigned.exe) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 machines using Windows. This includes an installer and will install Qtum system wide. If you have an older Windows computer and want to install Qtum then this is for you.

#### OSX

* [qtum-0.14.3-osx64.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.1/qtum-0.14.3-osx64.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using OSX. If you use a modern Mac and want development tools, this is what you want; we do not support older 32bit or PowerPC based Macs.
* [qtum-0.14.3-osx-unsigned.dmg](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.1/qtum-0.14.3-osx-unsigned.dmg) - A version of Qtum-Qt built for 64bit x86 machines using OSX in a .DMG installable format. If you use a modern Mac and aren't a developer, this is what you want; we do not support older 32bit or PowerPC based Macs.

#### Linux

* [qtum-0.14.3-i686-pc-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.1/qtum-0.14.3-i686-pc-linux-gnu.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 PC platforms running Linux. This is probably what you want for older computers running Linux
* [qtum-0.14.3-x86_64-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.1/qtum-0.14.3-x86_64-linux-gnu.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 PC platforms running Linux. This is probably what you want for any modern PC or server running Linux
* [qtum-0.14.3-arm-linux-gnueabihf.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.1/qtum-0.14.3-arm-linux-gnueabihf.tar.gz) - A version of qtumd and qtum-cli built for 32bit ARM platforms using Linux. This includes the Raspberry Pi and many of it's clones
* [qtum-0.14.3-aarch64-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/mainnet-ignition-v1.0.1/qtum-0.14.3-aarch64-linux-gnu.tar.gz) - A version of qtumd and qtum-cli built for 64bit ARM platforms using Linux

Below in the full list of binaries, there are also versions that include debug symbols. These are useful for developers, but will run slower and are significantly larger to download. 


#### Build Qtum Core

If you want to build it from source, it's recommended to follow the specific [""build"" documentation](https://github.com/qtumproject/qtum/tree/testnet-2/doc) for your platform. But mostly it boils down to the following:

1. Clone the qtum source code and cd into `qtum`

        git clone --recursive https://github.com/qtumproject/qtum.git
        cd qtum


2.  Build qtum-core:

    Configure and build the headless qtum binaries as well as the GUI (if Qt is found).

    You can disable the GUI build by passing `--without-gui` to configure.

        ./autogen.sh
        ./configure
        make

3.  It is recommended to build and run the unit tests to ensure everything is working correctly:

        make check


If you encounter an error like:

> make[2]: *** No rule to make target ‘cpp-ethereum/utils/libscrypt/b64.c’, needed by ‘cpp-ethereum/utils/libscrypt/libbitcoinconsensus_la-b64.lo’.  Stop.

Then you did not checkout the cpp-ethereum submodule for Qtum. To do that, simply:

    cd qtum
    git submodule update --init --recursive


Resources
---------

Make sure to check out these resources as well for more information and to keep up to date with all the latest news about Qtum. At least 1 developer is always around, so if you're developing on Qtum and need help, we'd love to welcome you to our community.  

* [/r/Qtum on Reddit](https://www.reddit.com/r/Qtum/)
* [Qtum.org](https://qtum.org/en/)
* [@QtumOfficial on Twitter](https://mobile.twitter.com/qtumofficial)
* [Qtum on Facebook](https://www.facebook.com/QtumOfficial/)
* [Qtum Forum](https://forum.qtum.org/)
* [Block explorer](https://qtum.info)

Qtum Smart Contract Limitations
-----------

* EVM smart contracts can not receive coins from or send coins to any address type other than pay-to-pubkeyhash (starts with Q) addresses. This is due to a limitation in the EVM
* Contracts are not allowed to create contracts with an initial endowment of coins. The contract must first be created, and then be sent coins in a separate transaction. Humans are also not allowed to create contracts with an initial endowment of coins.
* Although all of the infrastructure is present, Qtum Core does not currently parse Solidity event data. You must parse this yourself using either `searchlogs` or `-record-log-opcodes` features.
* It is not possible to send a contract coins without also executing the contract. This is also the case of Ethereum. This was promised in earlier discussions and technically does work, but due to lack of time for testing this feature was disabled. We hope to reenable this feature with release of the x86 virtual machine in 2018.
* In Qtum there can be multiple addresses used to create a proof-of-stake block. However, the EVM can only see the first output using the `coinbase` operation in Solidity (this address is also the one registered for the continuous staker rewards after 500 blocks). 

Qtum v1.0.1 Limitations/Bugs
---------------------

The only known bug at this time is the ""per-txout"" bug from Bitcoin which was demonstrated at the Breaking Bitcoin conference. This is nearly fixed, but requires a lot of testing since it is a large change to make at this point. We plan to have a v1.0.2 release soon with this bug fixed, as well as a completely setup `-testnet` mode with faucets etc. 

Update History
--------------

* v1.0.1: Fixed network magic bytes and minimum version to ensure the main network does not conflict with the Skynet network
* v1.0: Initial release
",83774906
925,False,False,2017-09-08T06:28:52Z,2017-09-08T06:31:42Z,"Dear Qtum Community,

We appreciate the support you have given us since we started this project in 2016. Since our March 2017 crowd sale, we have delivered a working proof-of-concept, followed up by two test networks. The sheer amount of work invested in this project has been immense. To date, there have been contributions from over 20 developers, totalling over 60,000 man hours. We have always delivered on time, therefore, we would like to announce that the Qtum main network is officially complete. 

This release includes a working Smart Contract and Decentralized Application platform, secured by a Proof-of-Stake consensus model. We have taken steps to ensure scalability is not a problem by introducing our Decentralized Governance Protocol. 

This does not mean development will slow down, on the contrary, we will continue to test new features and expand on our impressive technology stack. Please remember, we aim to deliver a truly decentralized blockchain platform, not a centralized database.

Over the next few weeks, we will explain how the ERC20 swap will take place. We ask that all Qtum holders safely store their tokens, and back up their private keys. We will contact exchanges and service providers and work with them to ensure that no one gets left behind during this swap process. We fully understand that people are busy, and cannot be on their computers every day, so we will make every effort to accommodate our community.

Sincerely,
The Qtum Team ",83774906
926,False,True,2017-08-25T22:28:41Z,2017-08-26T18:56:34Z,"Qtum is a decentralized blockchain project built on Bitcoin's UTXO model, but with support for Ethereum Virtual Machine based smart contracts. It achieves this through the revolutionary Account Abstraction Layer. For more general information about Qtum as well as links to join our community, go to https://qtum.org

Welcome to Qtum Skynet, the second public testnet for the Qtum blockchain. The previous testnet was named Sparknet. The testnet is only for testing, as such, its tokens hold no value and production applications should not yet be created on the testnet blockchain. All tokens aqcuired during the testnet will cease to exist when the mainnet is released which actually has tokens which hold value. The purpose of the public testnet is to allow developers to begin testing and developing applications, allow early adopters to see a preview of how the network will behave, and for the Qtum development team to run several load tests which are not directly comparable when done on a private and controlled network. 

Qtum Skynet will ideally have the same consensus features and parameters as the Qtum mainnet. We do not intend to add new consensus features during this period and the Skynet testnet should be a very realistic preview of how the mainnet network will function and behave. We will be added new non-consensus features such as new RPC commands, GUI features, and of course bug fixes and other things that make Qtum easier to use without modifying the blockchain protocol.

The major features and improvements implemented in Skynet include:

1. The Decentralized Governance Protocol is completely implemented and functional
2. The Smart Staking Protocol is complete to our specifications (Sparknet was missing a feature called MPoS which makes attacks more expensive to execute)
3. A very early and basic smart contract GUI has been implemented that can be used for creating contracts, sending data and Qtum to them, and checking their status by executing them locally
4. A great number of bug fixes and various improvements, including a bug fix to a performance problem which caused Sparknet nodes to sync extremely slowly as the blockchain grew larger
5. All Solidity operations for smart contracts behave as expected now. The only compatibility break is contracts are not allowed to create contracts with an initial endowment of coins. The contract must first be created and then sent coins in a separate transaction.

For more technical information for how to start developing with Qtum Skynet please read the [Guide](https://github.com/qtumproject/qtum/blob/testnet-2/doc/sparknet-guide.md) and also see this tutorial for deploying a simple [faucet smart contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet) (it hasn't yet been updated for Skynet, but all the instructions are the same)

Upgrading from Skynet v1.1 and below
-------------------------------------------

In Skynet v1.2 a change was made which requires reindexing the blockchain. This can be done by using the command line argument `-reindex` when running either Qtumd or Qtum-Qt. Instructions for using command line arguments with a program:

* [Windows](https://superuser.com/questions/747684/how-can-i-run-an-application-with-arguments-from-windows-explorer)
* [OSX](https://superuser.com/a/116237)

Alternatively, you can also follow the instructions below to delete the blockchain (but keep the `wallet.dat` file if you received any testnet Qtum) which will also accomplish the chain being reindexed.

Deleting the Sparknet blockchain
--------------------------------

If you downloaded the Sparknet wallet and ran it at some point, then most likely you have a copy of the Sparknet blockchain on your computer. There is no value in keeping this and it is safe to delete. You simply need to delete the data directory you chose when you first ran Qtum. If you're not sure, then it is probably in the default location. This location depends on platform:

* On Linux: `~/.qtum`
* On OSX: `~/Library/Application Support/Qtum`
* On Windows: `%APPDATA%\Qtum` (copy and paste this into your Explorer address bar and it'll take you there)

If you get an error about ""unknown genesis block"" or something similar, then this is the problem and you need to delete the old blockchain.

Quickstart
----------

The easiest way to get started with Qtum is to simply download the binaries below. To give a brief breakdown of the different versions available: 

#### Windows

* [qtum-0.14.2-win32.zip](https://github.com/qtumproject/qtum/releases/download/testnet-skynet-v1.2/qtum-0.14.2-win32.zip) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 machines using Windows. If you have an older Windows computer and don't care about installing Qtum system-wide, then this is for you. 
* [qtum-0.14.2-win64.zip](https://github.com/qtumproject/qtum/releases/download/testnet-skynet-v1.2/qtum-0.14.2-win64.zip) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using Windows. If you have a modern Windows computer and don't care about installing Qtum system-wide, then this is for you. 
* [qtum-0.14.2-win32-setup-unsigned.exe](https://github.com/qtumproject/qtum/releases/download/testnet-skynet-v1.2/qtum-0.14.2-win32-setup-unsigned.exe) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 machines using Windows. This includes an installer and will install Qtum system wide. If you have an older Windows computer and want to install Qtum then this is for you.
* [qtum-0.14.2-win64-setup-unsigned.exe](https://github.com/qtumproject/qtum/releases/download/testnet-skynet-v1.2/qtum-0.14.2-win64-setup-unsigned.exe) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using Windows. This includes an installer and will install Qtum system wide. If you have a modern Windows computer and want to install Qtum then this is for you.

#### OSX

* [qtum-0.14.2-osx64.tar.gz](https://github.com/qtumproject/qtum/releases/download/testnet-skynet-v1.2/qtum-0.14.2-osx64.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using OSX. If you use a modern Mac and want development tools, this is what you want; we do not support older 32bit or PowerPC based Macs.
* [qtum-0.14.2-osx-unsigned.dmg](https://github.com/qtumproject/qtum/releases/download/testnet-skynet-v1.2/qtum-0.14.2-osx-unsigned.dmg) - A version of Qtum-Qt built for 64bit x86 machines using OSX in a .DMG installable format. If you use a modern Mac and aren't a developer, this is what you want; we do not support older 32bit or PowerPC based Macs.

#### Linux

* [qtum-0.14.2-i686-pc-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/testnet-skynet-v1.2/qtum-0.14.2-i686-pc-linux-gnu.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 PC platforms running Linux. This is probably what you want for older computers running Linux
* [qtum-0.14.2-x86_64-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/testnet-skynet-v1.2/qtum-0.14.2-x86_64-linux-gnu.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 PC platforms running Linux. This is probably what you want for any modern PC or server running Linux
* [qtum-0.14.2-arm-linux-gnueabihf.tar.gz](https://github.com/qtumproject/qtum/releases/download/testnet-skynet-v1.2/qtum-0.14.2-arm-linux-gnueabihf.tar.gz) - A version of qtumd and qtum-cli built for 32bit ARM platforms using Linux. This includes the Raspberry Pi and many of it's clones
* [qtum-0.14.2-aarch64-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/testnet-skynet-v1.2/qtum-0.14.2-aarch64-linux-gnu.tar.gz) - A version of qtumd and qtum-cli built for 64bit ARM platforms using Linux

Below in the full list of binaries, there are also versions that include debug symbols. These are useful for developers, but will run slower and are significantly larger to download. 


#### Build Qtum Core

If you want to build it from source, it's recommended to follow the specific [""build"" documentation](https://github.com/qtumproject/qtum/tree/testnet-2/doc) for your platform. But mostly it boils down to the following:

1. Clone the qtum source code and cd into `qtum`

        git clone --recursive https://github.com/qtumproject/qtum.git
        cd qtum


2.  Build qtum-core:

    Configure and build the headless qtum binaries as well as the GUI (if Qt is found).

    You can disable the GUI build by passing `--without-gui` to configure.

        ./autogen.sh
        ./configure
        make

3.  It is recommended to build and run the unit tests to ensure everything is working correctly:

        make check


If you encounter an error like:

> make[2]: *** No rule to make target ‘cpp-ethereum/utils/libscrypt/b64.c’, needed by ‘cpp-ethereum/utils/libscrypt/libbitcoinconsensus_la-b64.lo’.  Stop.

Then you did not checkout the cpp-ethereum submodule for Qtum. To do that, simply:

    cd qtum
    git submodule update --init --recursive


Resources
---------

Make sure to check out these resources as well for more information and to keep up to date with all the latest news about Qtum. At least 1 developer is always around, so if you're developing on Qtum and need help, we'd love to welcome you to our community.  

* [/r/Qtum on Reddit](https://www.reddit.com/r/Qtum/)
* [Qtum.org](https://qtum.org/en/)
* [Slack chat room](https://qtumslack.herokuapp.com/)
* [@QtumOfficial on Twitter](https://mobile.twitter.com/qtumofficial)
* [Qtum on Facebook](https://www.facebook.com/QtumOfficial/)
* [Qtum Forum](https://forum.qtum.org/)
* Block explorer for Skynet (Coming soon!)
* Faucet for Skynet (Coming soon! Ask in our community in the meantime)

Update History
--------------

* v1.2: Fixed several minor consensus bugs and fixed some major staking bugs, as well as improved the GUI
* v1.1: Fixed a consensus-critical bug with how contract funds were managed in Skynet v1.0
* v1.0: Initial release",83774906
927,False,True,2017-08-17T13:24:05Z,2017-08-17T18:07:36Z,"Qtum is a decentralized blockchain project built on Bitcoin's UTXO model, but with support for Ethereum Virtual Machine based smart contracts. It achieves this through the revolutionary Account Abstraction Layer. For more general information about Qtum as well as links to join our community, go to https://qtum.org

Welcome to Qtum Skynet, the second public testnet for the Qtum blockchain. The previous testnet was named Sparknet. The testnet is only for testing, as such, its tokens hold no value and production applications should not yet be created on the testnet blockchain. All tokens aqcuired during the testnet will cease to exist when the mainnet is released which actually has tokens which hold value. The purpose of the public testnet is to allow developers to begin testing and developing applications, allow early adopters to see a preview of how the network will behave, and for the Qtum development team to run several load tests which are not directly comparable when done on a private and controlled network. 

Qtum Skynet will ideally have the same consensus features and parameters as the Qtum mainnet. We do not intend to add new consensus features during this period and the Skynet testnet should be a very realistic preview of how the mainnet network will function and behave. We will be added new non-consensus features such as new RPC commands, GUI features, and of course bug fixes and other things that make Qtum easier to use without modifying the blockchain protocol.

The major features and improvements implemented in Skynet include:

1. The Decentralized Governance Protocol is completely implemented and functional
2. The Smart Staking Protocol is complete to our specifications (Sparknet was missing a feature called MPoS which makes attacks more expensive to execute)
3. A very early and basic smart contract GUI has been implemented that can be used for creating contracts, sending data and Qtum to them, and checking their status by executing them locally
4. A great number of bug fixes and various improvements, including a bug fix to a performance problem which caused Sparknet nodes to sync extremely slowly as the blockchain grew larger
5. All Solidity operations for smart contracts behave as expected now. The only compatibility break is contracts are not allowed to create contracts with an initial endowment of coins. The contract must first be created and then sent coins in a separate transaction.

For more technical information for how to start developing with Qtum Skynet please read the [Guide](https://github.com/qtumproject/qtum/blob/testnet-2/doc/sparknet-guide.md) and also see this tutorial for deploying a simple [faucet smart contract](http://earlz.net/view/2017/06/30/2144/the-qtum-sparknet-faucet) (it hasn't yet been updated for Skynet, but all the instructions are the same)

Deleting the Sparknet blockchain
--------------------------------

If you downloaded the Sparknet wallet and ran it at some point, then most likely you have a copy of the Sparknet blockchain on your computer. There is no value in keeping this and it is safe to delete. You simply need to delete the data directory you chose when you first ran Qtum. If you're not sure, then it is probably in the default location. This location depends on platform:

* On Linux: `~/.qtum`
* On OSX: `~/Library/Application Support/Qtum`
* On Windows: `%APPDATA%\Qtum` (copy and paste this into your Explorer address bar and it'll take you there)

If you get an error about ""unknown genesis block"" or something similar, then this is the problem and you need to delete the old blockchain.

Quickstart
----------

The easiest way to get started with Qtum is to simply download the binaries below. To give a brief breakdown of the different versions available: 

#### Windows

* [qtum-0.14.0-win32.zip](https://github.com/qtumproject/qtum/releases/download/testnet-skynet-v1.1/qtum-0.14.0-win32.zip) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 machines using Windows. If you have an older Windows computer and don't care about installing Qtum system-wide, then this is for you. 
* [qtum-0.14.0-win64.zip](https://github.com/qtumproject/qtum/releases/download/testnet-skynet-v1.1/qtum-0.14.0-win64.zip) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using Windows. If you have a modern Windows computer and don't care about installing Qtum system-wide, then this is for you. 
* [qtum-0.14.0-win32-setup-unsigned.exe](https://github.com/qtumproject/qtum/releases/download/testnet-skynet-v1.1/qtum-0.14.0-win32-setup-unsigned.exe) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 machines using Windows. This includes an installer and will install Qtum system wide. If you have an older Windows computer and want to install Qtum then this is for you.
* [qtum-0.14.0-win64-setup-unsigned.exe](https://github.com/qtumproject/qtum/releases/download/testnet-skynet-v1.1/qtum-0.14.0-win64-setup-unsigned.exe) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using Windows. This includes an installer and will install Qtum system wide. If you have a modern Windows computer and want to install Qtum then this is for you.

#### OSX

* [qtum-0.14.0-osx64.tar.gz](https://github.com/qtumproject/qtum/releases/download/testnet-skynet-v1.1/qtum-0.14.0-osx64.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 machines using OSX. If you use a modern Mac and want development tools, this is what you want; we do not support older 32bit or PowerPC based Macs.
* [qtum-0.14.0-osx-unsigned.dmg](https://github.com/qtumproject/qtum/releases/download/testnet-skynet-v1.1/qtum-0.14.0-osx-unsigned.dmg) - A version of Qtum-Qt built for 64bit x86 machines using OSX in a .DMG installable format. If you use a modern Mac and aren't a developer, this is what you want; we do not support older 32bit or PowerPC based Macs.

#### Linux

* [qtum-0.14.0-i686-pc-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/testnet-skynet-v1.1/qtum-0.14.0-i686-pc-linux-gnu.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 32bit x86 PC platforms running Linux. This is probably what you want for older computers running Linux
* [qtum-0.14.0-x86_64-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/testnet-skynet-v1.1/qtum-0.14.0-x86_64-linux-gnu.tar.gz) - A version of Qtum-Qt, qtumd, and qtum-cli built for 64bit x86 PC platforms running Linux. This is probably what you want for any modern PC or server running Linux
* [qtum-0.14.0-arm-linux-gnueabihf.tar.gz](https://github.com/qtumproject/qtum/releases/download/testnet-skynet-v1.1/qtum-0.14.0-arm-linux-gnueabihf.tar.gz) - A version of qtumd and qtum-cli built for 32bit ARM platforms using Linux. This includes the Raspberry Pi and many of it's clones
* [qtum-0.14.0-aarch64-linux-gnu.tar.gz](https://github.com/qtumproject/qtum/releases/download/testnet-skynet-v1.1/qtum-0.14.0-aarch64-linux-gnu.tar.gz) - A version of qtumd and qtum-cli built for 64bit ARM platforms using Linux

Below in the full list of binaries, there are also versions that include debug symbols. These are useful for developers, but will run slower and are significantly larger to download. 


#### Build Qtum Core

If you want to build it from source, it's recommended to follow the specific [""build"" documentation](https://github.com/qtumproject/qtum/tree/testnet-2/doc) for your platform. But mostly it boils down to the following:

1. Clone the qtum source code and cd into `qtum`

        git clone --recursive https://github.com/qtumproject/qtum.git
        cd qtum


2.  Build qtum-core:

    Configure and build the headless qtum binaries as well as the GUI (if Qt is found).

    You can disable the GUI build by passing `--without-gui` to configure.

        ./autogen.sh
        ./configure
        make

3.  It is recommended to build and run the unit tests to ensure everything is working correctly:

        make check


If you encounter an error like:

> make[2]: *** No rule to make target ‘cpp-ethereum/utils/libscrypt/b64.c’, needed by ‘cpp-ethereum/utils/libscrypt/libbitcoinconsensus_la-b64.lo’.  Stop.

Then you did not checkout the cpp-ethereum submodule for Qtum. To do that, simply:

    cd qtum
    git submodule update --init --recursive


Resources
---------

Make sure to check out these resources as well for more information and to keep up to date with all the latest news about Qtum. At least 1 developer is always around, so if you're developing on Qtum and need help, we'd love to welcome you to our community.  

* [/r/Qtum on Reddit](https://www.reddit.com/r/Qtum/)
* [Qtum.org](https://qtum.org/en/)
* [Slack chat room](https://qtumslack.herokuapp.com/)
* [@QtumOfficial on Twitter](https://mobile.twitter.com/qtumofficial)
* [Qtum on Facebook](https://www.facebook.com/QtumOfficial/)
* [Qtum Forum](https://forum.qtum.org/)
* Block explorer for Skynet (Coming soon!)
* Faucet for Skynet (Coming soon! Ask in our community in the meantime)

Update History
--------------

* v1.1: Fixed a consensus-critical bug with how contract funds were managed in Skynet v1.0
* v1.0: Initial release",83774906
928,False,True,2017-08-15T18:56:28Z,2017-08-15T22:49:17Z,"This release was for v1.0, please see the new release page for Skynet v1.1: https://github.com/qtumproject/qtum/releases/tag/testnet-skynet-v1.1",83774906
929,False,True,2017-06-27T23:42:58Z,2017-06-28T01:09:22Z,"Qtum is a decentralized blockchain project built on Bitcoin's UTXO model, but with support for Ethereum Virtual Machine based smart contracts. It achieves this through the revolutionary Account Abstraction Layer. For more general information about Qtum as well as links to join our community, go to https://qtum.org

Welcome to Qtum Sparknet, the first public testnet for the Qtum blockchain. Sparknet is designed primarily for developers, and as such documentation at this point will be technical and suited more for developers. The mainnet is expected to be released in September and will be suited for the general public. Testnet tokens do not hold any value and should not be traded for any monetary instruments. The testnet can be reset or forked at anytime as deemed necessary for development. Sparknet does not include support for Mutualized Proof Of Stake, or for the Decentralized Governance Protocol. Both of these features are implemented, and their code is available on alternative branches (check the pull requests), but have not been tested and proven stable enough to include in this testnet. They will be implemented in the 2nd public testnet for Qtum.

For more technical information for how to start developing with Qtum Sparknet, please read the [Sparknet Guide](https://github.com/qtumproject/qtum/blob/testnet-1/doc/sparknet-guide.md)

Quickstart
----------
### Build on Ubuntu

    This is a quick start script for compiling Qtum on  Ubuntu


    sudo apt-get install build-essential libtool autotools-dev automake pkg-config libssl-dev libevent-dev bsdmainutils git cmake libboost-all-dev
    sudo apt-get install software-properties-common
    sudo add-apt-repository ppa:bitcoin/bitcoin
    sudo apt-get update
    sudo apt-get install libdb4.8-dev libdb4.8++-dev

    # If you want to build the Qt GUI:
    sudo apt-get install libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libprotobuf-dev protobuf-compiler

    git clone https://github.com/qtumproject/qtum
    cd qtum
    # Update cpp-ethereum submodule
    git submodule update --init --recursive 

    # Note autogen will prompt to install some more dependencies if needed
    ./autogen.sh
    ./configure 
    make -j2

### Build on OSX

The commands in this guide should be executed in a Terminal application.
The built-in one is located in `/Applications/Utilities/Terminal.app`.

#### Preparation

Install the OS X command line tools:

`xcode-select --install`

When the popup appears, click `Install`.

Then install [Homebrew](https://brew.sh).

#### Dependencies

    brew install cmake automake berkeley-db4 libtool boost --c++11 miniupnpc openssl pkg-config protobuf qt libevent

NOTE: Building with Qt4 is still supported, however, could result in a broken UI. Building with Qt5 is recommended.

#### Build Qtum Core

1. Clone the qtum source code and cd into `qtum`

        git clone --recursive https://github.com/qtumproject/qtum.git
        cd qtum
        git submodule update --init --recursive

2.  Build qtum-core:

    Configure and build the headless qtum binaries as well as the GUI (if Qt is found).

    You can disable the GUI build by passing `--without-gui` to configure.

        ./autogen.sh
        ./configure
        make

3.  It is recommended to build and run the unit tests:

        make check

### Run

Then you can either run the command-line daemon using `src/qtumd` and `src/qtum-cli`, or you can run the Qt GUI using `src/qt/qtum-qt`

2Gb of RAM is recommended for building Qtum. If you encounter internal compiler errors or out of memory errors in autogen, then you can modify the last line of autogen to be something like:

    make -j1

This will disable multicore building of some cpp-ethereum dependencies",83774906
