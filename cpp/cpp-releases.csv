,Draft,Prerelease,Created_at,Published_at,Details,Id
0,False,False,2020-03-24T11:33:04Z,2020-03-24T11:39:45Z,"![image](https://user-images.githubusercontent.com/12479470/77421678-34547c80-6e07-11ea-8eef-b03e466d212d.png)
",127407957
1,False,False,2020-03-16T13:43:15Z,2020-03-16T13:59:44Z,see： https://github.com/azl397985856/leetcode/blob/master/thinkings/slide-window.md,127407957
2,False,False,2020-01-22T07:36:22Z,2020-01-22T07:37:27Z,两道前缀树的题目,127407957
3,False,False,2020-01-06T10:40:50Z,2020-01-06T10:43:18Z,,127407957
4,False,False,2020-01-04T14:06:03Z,2020-01-04T14:10:27Z,,127407957
5,False,False,2020-01-03T02:19:38Z,2020-01-03T02:20:23Z,,127407957
6,False,False,2020-01-01T11:49:14Z,2020-01-01T11:49:58Z,,127407957
7,False,False,2020-01-01T10:36:16Z,2020-01-01T10:38:09Z,,127407957
8,False,False,2020-01-01T09:24:30Z,2020-01-01T09:26:34Z,,127407957
9,False,False,2019-11-11T07:12:29Z,2019-11-11T07:13:32Z,https://github.com/azl397985856/leetcode/pull/228,127407957
10,False,False,2019-10-22T11:57:49Z,2019-10-22T11:58:19Z,,127407957
11,False,False,2019-10-22T11:57:49Z,2019-10-22T11:58:04Z,,127407957
12,False,False,2019-10-14T05:48:14Z,2019-10-14T05:49:16Z,,127407957
13,False,False,2019-09-18T03:43:47Z,2019-09-18T03:44:18Z,,127407957
14,False,False,2019-09-16T08:44:08Z,2019-09-16T08:44:44Z,,127407957
15,False,False,2019-09-14T09:24:05Z,2019-09-14T09:24:35Z,,127407957
16,False,False,2019-09-13T06:52:31Z,2019-09-13T07:44:10Z,,127407957
17,False,False,2019-09-04T09:03:43Z,2019-09-04T09:04:17Z,,127407957
18,False,False,2019-09-03T01:48:17Z,2019-09-03T01:50:44Z,Add LC 25 reverse nodes in k group,127407957
19,False,False,2019-09-04T01:39:03Z,2019-09-04T01:40:28Z,,89247811
20,False,False,2019-05-16T13:13:15Z,2019-05-16T13:14:12Z,,89247811
21,False,False,2018-09-02T02:41:56Z,2018-09-02T02:42:57Z,,89247811
22,False,False,2018-03-24T16:30:06Z,2018-03-24T16:31:23Z,,89247811
23,False,False,2018-01-09T20:20:03Z,2018-01-09T20:20:39Z,,89247811
24,False,False,2017-11-03T22:01:01Z,2017-11-03T22:01:42Z,,89247811
25,False,True,2017-06-08T21:17:13Z,2017-10-31T22:03:24Z,,89247811
26,False,False,2017-09-20T03:37:27Z,2017-10-31T21:55:59Z,,89247811
27,False,False,2017-09-03T14:41:58Z,2017-10-31T21:54:44Z,,89247811
28,False,False,2017-07-11T19:27:03Z,2017-10-31T21:53:36Z,,89247811
29,False,True,2017-04-24T14:12:24Z,2017-10-31T21:50:18Z,,89247811
30,False,True,2017-05-10T20:43:47Z,2017-10-31T21:50:08Z,,89247811
31,False,False,2017-07-09T02:51:02Z,2017-10-31T21:49:39Z,,89247811
32,False,False,2019-08-05T17:34:58Z,2019-08-06T11:05:50Z,"This is a binary release of Infer for Linux and MacOS. To use it follow these [instructions](http://fbinfer.com/docs/getting-started.html).

#### Highlights:

* There’s a new  `--inefficient-keyset-iterator`  checker for finding inefficient uses of Java's keyset iterators that retrieve both key and value (on by default).
* Complete the set of Android thread annotations and Java nullability annotations. Updated artifacts are available on [Maven Central](https://search.maven.org/artifact/com.facebook.infer.annotation/infer-annotation/0.17.0/jar).
* `--starvation` is now on by default. This analysis catches problems with threads not being able to make progress due to locking issues, incorrect scheduling priorities, etc. For instance, on Android calling Future.get from a UiThread without a sensible timeout will be flagged as a starvation issue.
* New Objective-C linter for calls to `@optional` methods: `UNSAFE_CALL_TO_OPTIONAL_METHOD`, enabled by default.
* A new call-graph scheduler (`--call-graph-schedule`) improves performance of the analysis phase of Infer, especially when the number of files to analyze is less than available CPUs.
* A new flag `--oom-threshold` allows to throttle the analysis when the amount of free memory is below the provided threshold.
* New genrule based Buck/Java integration is much faster than the previous one, use with `--genrule-master-mode`.
* Infer’s internal clang is now in version 8.0.0.
* Update to javalib 3.1 provides better compatibility with Java 9 and Java 11. Refer to [their change log](https://github.com/javalib-team/javalib/blob/master/CHANGELOG) for more details.
* Infer can now be built and run on MacOS Mojave without fiddling with `SDKROOT` (although you still might need it with non-standard toolchain setup).
* [β] __Pulse__ is a new experimental lifetime analysis for C++, give it a try with `--pulse`. Beware that it doesn’t report much yet.
* `--ownership` checker was superseded by Pulse and removed.

... and many other fixes and improvements. For the full list of changes included see [here](https://github.com/facebook/infer/compare/v0.16.0...v0.17.0).

The facebook-clang-plugins version used for this release is https://github.com/facebook/facebook-clang-plugins/commit/9386890e42043d04f9
cd9e7b204cb525d4417c41.

The sha256 checksums of the tarballs are:

```
$ shasum -a 256 infer-*-v0.17.0.tar.xz
de972ba3043f18b29a8eff6cd7612e24f5ffaef038dc7949befeaf490931725e  infer-linux64-v0.17.0.tar.xz
1a3ef6fb51846ae63ffd7fde3b0255f75bab6157f5de1842606fa32988d101f8  infer-osx-v0.17.0.tar.xz
```",29857799
33,False,False,2019-04-23T12:04:32Z,2019-04-23T13:54:11Z,"This is a binary release of Infer for Linux and MacOS. To use it follow these [instructions](http://fbinfer.com/docs/getting-started.html).

It's been a long time since the previous release, here are some new features and improvements you can find in this new release:

Backend analyses:
- A brand new analysis to compute the runtime cost of methods and functions: passing `--cost` (off by default) to Infer will output a costs-report.json file describing, among others, the computational complexity of each function in the code using the big-O notation, eg `O(1)`, `O(list.length)`, ...
- The deadlock detection analysis has been ported to C++ and Objective-C and mainly focuses on self-deadlocks (taking a mutex twice). Activate with `--starvation` (off by default).
- The data race detector RacerD has been ported to Objective-C and detects races on fields protected by a C++ mutex. It reports ""Thread Safety Violation"" and ""GuardedBy Violation"" errors on Java and ""Lock Consistency Violation"" on C++ and Objective-C. Activate with `--racerd` (on by default).
- A progress bar is displayed while the analysis is running
- Countless improvements and tweaks, in particular in RacerD and in analyses for C++.

Frontends:
- Infer now ships with clang version 7.0.1
- Support for Java up to version 11

The sha256 checksums of the tarballs are:

```
$ shasum -a 256 infer-*-v0.16.0.tar.xz
435c415a9a22f41e7f2074b542b035b972a2a8c237d5490285d763bf333a817b  infer-linux64-v0.16.0.tar.xz
471f06c72754a45d73433623e8092bf9ea1315884b8ebff24d3f79f9a8b0380a  infer-osx-v0.16.0.tar.xz
```

The facebook-clang-plugins version used for this release is https://github.com/facebook/facebook-clang-plugins/commit/36266f6c86041896bed32ffec0637fefbc4463e0.",29857799
34,False,False,2018-06-04T15:25:40Z,2018-06-05T09:40:31Z,"This is a binary release of Infer for Linux and MacOS. To use it follow these [instructions](http://fbinfer.com/docs/getting-started.html).

Highlights:
- switch infer license to MIT
- publish binaries
- [clang] lots of improvements to the frontend

More changes in the [full list of changes](https://github.com/facebook/infer/compare/v0.14.0...v0.15.0).

The facebook-clang-plugins version used for this release is https://github.com/facebook/facebook-clang-plugins/commit/f31f7c9c28d8fb9b59c0dacc74a24e4bfe90a904.

The sha256 checksums of the tarballs are:

```
$ shasum -a 256 infer-*-v0.15.0.tar.xz
f6eb98162927735e8c545528bb5a472312e5defcf0761e43c07c73fe214cb18a  infer-linux64-v0.15.0.tar.xz
0f87b8fd68b62717b8c3c143aeaea38b5102435f80fff484cb570a51cf510f9c  infer-osx-v0.15.0.tar.xz
```
",29857799
35,False,False,2018-04-27T14:18:19Z,2018-04-30T10:25:40Z,"This is a source release of Infer packaged with pre-built binaries for clang and facebook-clang-plugins for Linux and MacOS. To use it follow these [instructions](http://fbinfer.com/docs/getting-started.html).

Highlights:
- New checker: `--ownership` detects a subset of use-after-free issues due to bad manual memory management. This is a rough prototype of Rust-style borrow checker for C++. (enabled by default, C++)
- New checker: `--uninit` detects uses of uninitialized values (enabled by default, C/C++/Objective-C)
- New checker: `--racerd` now also detects inconsistent lock usage in C++. Also improved the lock domain to reduce false positives for all languages.
- Improved C++ support: destructors are now properly translated; addresses and pointers are handled more precisely
- Improved retain cycles detection (Objective-C)
- Upgraded the internal clang to clang 7
- [internal] SQLite is being used to store some of infer's analysis artefacts instead of storing them in files on disk. This improves analysis speed and reduces load on the OS.

The sha256 checksums of the tarballs are:

```console
$ shasum -a 256 infer-*-v0.14.0.tar.xz
330b4bbb5fbf90c04d4c096ce0d8d713dac72925d68c0e1b55ab30e6d5201bcb  infer-linux64-v0.14.0.tar.xz
350767bc29acdcb86734a2009e97bdf2a3603db0fbf3f18c59fc07b416977021  infer-osx-v0.14.0.tar.xz
```",29857799
36,False,False,2018-02-02T15:18:01Z,2018-02-02T21:50:57Z,"This is a source release of Infer packaged with pre-built binaries for clang and facebook-clang-plugins for Linux and MacOS. To use it follow these [instructions](http://fbinfer.com/docs/getting-started.html).

This is a fix for the 0.13.0 release, whose build broke due to changes in opam.

The sha256 checksums of the tarballs are:

```
$ shasum -a 256 -p infer-*-v0.13.1.tar.xz
02ff3c49c83d3a4e967696f8818b1cffcb042c26eefbb2ba8d78c27244b5940c ?infer-linux64-v0.13.1.tar.xz
182ff5b76ff561408dc52b32611346e097098651a491fb8a0a453a1d098d4299 ?infer-osx-v0.13.1.tar.xz
```",29857799
37,False,False,2017-10-19T14:04:56Z,2017-10-19T14:36:02Z,"This is a source release of Infer packaged with pre-built binaries for clang and facebook-clang-plugins for Linux and MacOS. To use it follow these [instructions](http://fbinfer.com/docs/getting-started.html).


The main changes are:
- Infer now runs multiple checkers at the same time by default, including the biabduction analysis that was the previous and only default. In particular, we are pleased to introduce [RacerD](http://fbinfer.com/docs/racerd.html) for race detection in Java. The following checkers are activated by default: annotation reachability (Java), biabduction (C/C++/ObjC, Java), fragment retains view (Java), immutable cast (Java), liveness (C/C++/ObjC), printf args (Java), quandary (C/C++/ObjC, Java), RacerD (C/C++/ObjC, Java), SIOF (C/C++/ObjC). Each checker may report several issue types.
- Upgraded to clang 5.0
- Richer DSL for writing linters ([AL](http://fbinfer.com/docs/linters.html)), and a new default linter for `const` pointers in Objective-C
- Lots of perf improvements and bug fixes, and improved logging

Please note the following breaking changes:
- `-a eradicate` is now simply `--eradicate` and can run alongside other checkers
- `inferTraceBugs` is now the `explore` subcommand: `infer explore --help`
- infer now depends on sqlite

The sha256 checksums of the tarballs are:

```
$ shasum -a 256 -p infer-*-v0.13.0.tar.xz
79a7fe8b7a05ea2a685997d9188fef7319c7b3d72064f14dea7a5f23ec50efac ?infer-linux64-v0.13.0.tar.xz
1abec8df73581d35e018f81285197d82a6f3e6101c528fb8be14405765da155e ?infer-osx-v0.13.0.tar.xz
```",29857799
38,False,False,2017-08-30T17:27:25Z,2017-08-30T17:44:27Z,"This is a hotfix release to update infer's opam dependencies to cope with upgrades of cppo in opam (in particular, #718).

This is a source release of Infer packaged with pre-built binaries for clang and facebook-clang-plugins for Linux and MacOS. To use it follow these [instructions](http://fbinfer.com/docs/getting-started.html).

The sha256 checksums of the tarballs are:

```
$ shasum -a 256 -p infer-*-v0.12.1.tar.xz
d26dd519c19345530a92a6ae3f7058af3bd8ddfd7c2c945d116c6fd658be6c4 ?infer-linux64-v0.12.1.tar.xz
ce76b87bf4f70be594aaddc7402609af6338623fbb448dacca610e10bcb7c60a ?infer-osx-v0.12.1.tar.xz
```",29857799
39,False,False,2017-05-16T17:17:40Z,2017-05-17T16:40:18Z,"This is a source release of Infer packaged with pre-built binaries for clang and facebook-clang-plugins for Linux and MacOS. To use it follow these [instructions](http://fbinfer.com/docs/getting-started.html).

This introduces *subcommands* and man pages for all subcommands. If you are used to infer's command line already, here are some rough equivalences (the commands might not be completely equivalent in some cases):
- `infer [options] -- [build command]` becomes `infer run [options] -- [build command]`
- `infer` becomes `infer analyze`
- `infer -a capture [options] -- [build command]` becomes `infer capture [options] -- [build command]`
- `infer -a compile [options] -- [build command]` becomes `infer compile [options] -- [build command]`

The previous forms of invocations are still supported but may go away in future releases.

If you were using them, the internal binaries have disappeared and are replaced as follows:
- `InferPrint [options]` becomes `infer report [options]`
- `InferAnalyze [options]` becomes `infer analyze [options]`

See `man infer`, `man infer-capture`, `man infer-analyze`, etc. for more details, and let us know if anything is missing.

This release introduces **AL**, a language for writing linters against the clang AST. AL lets you check [syntactic properties](http://fbinfer.com/docs/linters-bug-types.html) of source code by traversing the AST of the program. Using the included domain-specific language (DSL), you can [write your own set of checks](http://fbinfer.com/docs/linters.html).

As usual, this release also includes lots of fixes and improvements. For the full list of changes included see [here](https://github.com/facebook/infer/compare/v0.11.0...v0.12.0).

The sha256 checksums of the tarballs are:

```
$ shasum -a 256 -p infer-*-v0.12.0.tar.xz
698c9ff83a23fb3d6ffa0d62d5394e691ad5e3352f27bf2d4105afdfd07cc201 ?infer-linux64-v0.12.0.tar.xz
3b97bcabf85af8feb8d6fd0b8622fe2b4fbf27fa215fab61e3a660b5435b6d21 ?infer-osx-v0.12.0.tar.xz
```
",29857799
40,False,False,2017-04-12T17:18:27Z,2017-04-12T19:21:43Z,"This is a source release of Infer packaged with pre-built binaries for clang and facebook-clang-plugins for Linux and MacOS. To use it follow these [instructions](http://fbinfer.com/docs/getting-started.html).

Highlights:
- [Java] ThreadSafety analyzer is now on by default; run it with `infer -a checkers ...`. This checker will try and detect races (unprotected concurrent accesses with at least one write) in classes bearing the `@ThreadSafe` annotation.
- Infer now builds using OCaml 4.04.0.

For the full list of changes included see [here](https://github.com/facebook/infer/compare/v0.10.0...v0.11.0).

The sha256 checksums of the tarballs are:

```sh
$ shasum -a 256 -p infer-*-v0.11.0.tar.xz
c2a893d66befc2652a28e9e6481f680fe863512f8c507b52616c5731878c22f0 ?infer-linux64-v0.11.0.tar.xz
0c435efa311cb70a79b5b8ae9cc4e714651e6653c5542a58cc624f2439d68e36 ?infer-osx-v0.11.0.tar.xz
```
",29857799
41,False,False,2017-02-22T10:48:24Z,2017-02-23T16:12:35Z,"This is a source release of Infer packaged with pre-built binaries for clang and facebook-clang-plugins for Linux and MacOS. To use it follow these [instructions](http://fbinfer.com/docs/getting-started.html).
- [Clang] C++ support.
- [Clang] Improved support for cmake and Xcode compilation databases. Use with `infer --compilation-database compile_commands.json` (for cmake and Buck), or with `infer --compilation-database-escaped compile_commands.json` (for xcbuild and xcpretty).
- [C++] New [SIOF Checker](http://fbinfer.com/docs/experimental-checkers.html).
- [iOS] New [linter for target SDK version](http://fbinfer.com/docs/linters-bug-types.html#UNAVAILABLE_API_IN_SUPPORTED_IOS_SDK). Use with `infer --iphoneos-target-sdk-version <min version you support> ...` or with `infer -a linters --iphoneos-target-sdk-version <min version you support> ...`.
- [Java] New [Thread Safety Checker](http://fbinfer.com/docs/experimental-checkers.html).
- [Java] Smarter analysis of dynamic dispatch.
- [Java] Improved Maven integration.
- [Java] `@SuppressWarnings` support removed. Use `@SuppressLint` instead. `android.annotation.SuppressLint` is only available on Android, but do let us know if that is an issue for you.

For the full list of changes included see [here](https://github.com/facebook/infer/compare/v0.9.4...v0.10.0).

The sha256 checksums of the tarballs are:

```
$ shasum -a 256 -p infer-*-v0.10.0.tar.xz
62287344459e2e467def603f97dac9cfb335a8f2852a51217696db948164780c ?infer-linux64-v0.10.0.tar.xz
6fdcfe52cee28f57a86e8cd80bf4cac7b2dda83a3cc511f86834636ada14a808 ?infer-osx-v0.10.0.tar.xz
```
",29857799
42,False,False,2017-02-10T12:46:13Z,2017-02-10T14:59:19Z,"This is a source release of Infer packaged with pre-built binaries for clang and facebook-clang-plugins for Linux and MacOS.

This includes a fix for #577.

To use it follow these [instructions](http://fbinfer.com/docs/getting-started.html).

The sha256 checksums of the tarballs are:

```
$ shasum -a 256 -p infer-*-v0.9.5.tar.xz
199f5cc6466db63375774d20bbea8f50e0394380b7e8b258b73a44c2578b5159 ?infer-linux64-v0.9.5.tar.xz
43d6c68d4e41057be8188877872544bf7c0e6a53a122be64efe06f3f3b772f47 ?infer-osx-v0.9.5.tar.xz
```
",29857799
43,False,False,2016-11-23T11:44:46Z,2016-11-23T15:31:45Z,"This is a source release of Infer packaged with pre-built binaries for clang and facebook-clang-plugins for Linux and MacOS. To use it follow these [instructions](http://fbinfer.com/docs/getting-started.html). It only contains [hotfix](https://github.com/facebook/infer/commit/9393c4f533c153e4c6f984c0752d1b08a4fa1e50) to [infer 0.9.4](https://github.com/facebook/infer/releases/tag/v0.9.4) fixing https://github.com/facebook/infer/issues/508

The sha256 checksums of the tarballs are:

```
$ shasum -a 256 -p infer-*-v0.9.4.1.tar.xz
860f20741bd54f1e058e0e0c4550fc4211016ef93f154938eb173df555a560df ?infer-linux64-v0.9.4.1.tar.xz
a738a3492a4e0229df8abd745cd88bca8fb547bc3bcca15ec194d6780b07cbda ?infer-osx-v0.9.4.1.tar.xz
```
",29857799
44,False,False,2016-11-18T19:18:11Z,2016-11-18T19:32:39Z,"This is a source release of Infer packaged with pre-built binaries for clang and facebook-clang-plugins for Linux and MacOS. To use it follow these [instructions](http://fbinfer.com/docs/getting-started.html).
- [Java] preliminary support for Java 8: infer no longer skips methods containing Java 8 code
- [clang] support for clang compilation databases
- [Xcode] more robust integration using the compilation database (requires [xcpretty](https://github.com/supermarin/xcpretty))
- [iOS] added checks for some of the [ComponentKit best practices](http://componentkit.org/docs/never-subclass-components.html)
- lots of under-the-hood improvements, including perf improvements and bug fixes

For the full list of changes included see [here](https://github.com/facebook/infer/compare/v0.9.3...v0.9.4).

The sha256 checksums of the tarballs are:

```
$ shasum -a 256 -p infer-*-v0.9.4.tar.xz
1b85b84a5f798919d2630b313033e710b1e20fba24f5c751ca1b5e0a3c601cff ?infer-linux64-v0.9.4.tar.xz
529d147bccf3285ddb7500c22e0c50d6e0cbdb2c7f9b11a84e8005873994b3e2 ?infer-osx-v0.9.4.tar.xz
```
",29857799
45,False,False,2016-09-20T10:50:27Z,2016-09-22T15:45:24Z,"This is a source release of Infer packaged with pre-built binaries for clang and facebook-clang-plugins for Linux and MacOS. To use it follow these [instructions](http://fbinfer.com/docs/getting-started.html).
- Fix issues with using Infer with Clang 4.0 and Xcode 8
- Various fixes and performance improvements

For the full list of changes included see [here](https://github.com/facebook/infer/compare/v0.9.2...v0.9.3).

The sha256 checksums of the tarballs are:

```
$ shasum -a 256 -p infer-*-v0.9.3.tar.xz
a55a940082690d06c0c05d8b772b8a9eef8b98ecb0ea82f86e5d473bcf878211 ?infer-linux64-v0.9.3.tar.xz
8bfbb7ee76388393b5cf513984da79c305af3a1e6bbd057f83082f093d3cc0d7 ?infer-osx-v0.9.3.tar.xz
```
",29857799
46,False,False,2016-08-22T18:17:58Z,2016-08-23T12:03:02Z,"This is a source release of Infer packaged with pre-built binaries for clang and facebook-clang-plugins for Linux and MacOS. To use it follow these [instructions](http://fbinfer.com/docs/getting-started.html).

For the full list of changes included see [here](https://github.com/facebook/infer/compare/v0.9.1...v0.9.2).

The sha256 checksums of the tarballs are:

```
$ shasum -a 256 -p infer-*-v0.9.2.tar.xz
7c374d14affc19c44cd23746696eba7b4422a900e03f8a6b9985d95a05d2d95f ?infer-linux64-v0.9.2.tar.xz
3935f8be25982a023aba306b66804d73a7316ab833296277c1ec6c3694bfc7c7 ?infer-osx-v0.9.2.tar.xz
```
",29857799
47,False,False,2016-08-18T09:32:59Z,2016-08-18T11:44:49Z,"This is a minor source release of Infer packaged with pre-built binaries for clang and facebook-clang-plugins for Linux and MacOS. It contains bugfixes to 0.9.0, in particular to enable packaging via Homebrew and to fix an issue with locales. To use it follow these [instructions](http://fbinfer.com/docs/getting-started.html).

For the full list of changes included see [here](https://github.com/facebook/infer/compare/v0.9.0...v0.9.1).

The sha256 checksums of the tarballs are:

```
$ shasum -a 256 -p infer-*-v0.9.1.tar.xz
c6dc64db4a6075d4fac32712bbd0e087ecb6d909ac590220acd64bd4a33480c3 ?infer-linux64-v0.9.1.tar.xz
6dbb1bb7b3e28d99a8c02fd42f2f87894bf0c5564c13645aae679effb8ee8418 ?infer-osx-v0.9.1.tar.xz
```
",29857799
48,False,False,2016-07-21T14:33:06Z,2016-07-21T17:40:07Z,"This is a source release of Infer packaged with pre-built binaries for clang and facebook-clang-plugins for Linux and MacOS. To use it follow these [instructions](http://fbinfer.com/docs/getting-started.html).

Since the [changelog](https://github.com/facebook/infer/compare/v0.8.1...v0.9.0) is so big, let's just mention these two items:
- lots of perf improvements and fixes across all analyses (thanks to everyone who reported issues and made pull requests!)
- [experimental] C++ language support. See `--cxx` in `infer --help`. This is still in heavy development and only includes a few bug types. Feedback welcome!

The sha256 checksums of the tarballs are:

```
$ shasum -a 256 -p infer-*-v0.9.0.tar.xz
1596e2d4e67f920349de4950a2b6b98451d5115602826b508eb7b4d8e1b41caf ?infer-linux64-v0.9.0.tar.xz
3aebf37bbcbb3c17912c24bfd1f2aec7b8d1256f0617cca5ddeab7aeab58b3ce ?infer-osx-v0.9.0.tar.xz
```
",29857799
49,False,False,2016-04-22T17:15:28Z,2016-04-25T12:34:57Z,"This is a source release of Infer packaged with pre-built binaries for clang and facebook-clang-plugins for Linux and MacOS. To use it follow these [instructions](http://fbinfer.com/docs/getting-started.html).

This release includes:
- [Objective-C and C] upgrade clang to version 3.8.0
- [all] bugfixes

For the full list of changes included see [here](https://github.com/facebook/infer/compare/v0.8.0...v0.8.1).

The sha256 checksums of the tarballs are:

```
$ shasum -a 256 -p infer-*-v0.8.1.tar.xz
7f75ae69d91fb9a8c43163f02a9b2a4919b8ebc42dfb2f729722201a0b18ea6b ?infer-linux64-v0.8.1.tar.xz
0cd33936966fcb4761251279aa737ca07352fb8a8e864697a1d2cc5735c56ae7 ?infer-osx-v0.8.1.tar.xz
```
",29857799
50,False,False,2016-03-14T18:15:08Z,2016-03-15T14:22:18Z,"This is a source release of Infer packaged with pre-built binaries for clang and facebook-clang-plugins for Linux and MacOS. To use it follow these [instructions](http://fbinfer.com/docs/getting-started.html).
- New `--reactive` mode to rapidly analyze the effects of a code change. Be sure to check out [the documentation of the new workflow](http://fbinfer.com/docs/infer-workflow.html#global-default-and-differential-workflows). As a result, the incremental mode (`--incremental`) is now deprecated.
- New XML output, compatible with output from other static analyzers, eg [PMD](https://pmd.github.io/). To use it, pass the `--pmd-xml` flag to Infer (see `infer --help`).
- Use `@SuppressWarnings(""infer"")` in your Java projects to annotate methods or classes where Infer shouldn't report.

This release incorporates a number of contributions (#284 #289 #300 #301) and addresses a number of issues (#279 #281 #283 #288 #291 #294).

For the full list of changes included see [here](https://github.com/facebook/infer/compare/v0.7.0...v0.8.0).

The sha256 checksums of the tarballs are:

```
$ shasum -a 256 -p infer-*-v0.8.0.tar.xz
4942ca2c8ad9e76ff6e31c6473b7f360cc95d9db43218dc7747ae34aef6294f4 ?infer-linux64-v0.8.0.tar.xz
2b494a2b595bd7cf0f0cfaac4e9bece568575a4bcf25cc00161ed34c0319dc58 ?infer-osx-v0.8.0.tar.xz
```
",29857799
51,False,False,2016-02-11T11:15:17Z,2016-02-11T15:44:16Z,"This is a source release of Infer packaged with pre-built binaries for clang and facebook-clang-plugins for Linux and MacOS. To use it follow these [instructions](http://fbinfer.com/docs/getting-started.html).

This release addresses a number of bugs, eg #270 #274 #275 #276. Thanks to all of you who reported bugs!

There are also new features:
- [all] add summary of the analysis results at the end of the console output
- [android] new [""Fragment retains View"" checker](http://fbinfer.com/docs/checkers-bug-types.html)

For the full list of changes included see [here](https://github.com/facebook/infer/compare/v0.6.0...v0.7.0).

The sha256 checksums of the tarballs are:

```
$ shasum -a 256 -p infer-*-v0.7.0.tar.xz
b8c4f32bc286893aded3302a2915a66fe7e799edbbaf286ffdcc5218866db3ae ?infer-linux64-v0.7.0.tar.xz
c83753c04bea8ad1dae3877d23d094d963d293b5d926a21ea8ea9443c870404a ?infer-osx-v0.7.0.tar.xz
```
",29857799
52,False,False,2016-01-19T17:15:17Z,2016-01-19T21:23:58Z,"This is a source release of Infer packaged with pre-built binaries for clang and facebook-clang-plugins for Linux and MacOS. To use it follow these [instructions](http://fbinfer.com/docs/getting-started.html).

New features:
- [android] fixed intermittent infinite loop
- [iOS] new check for [capturing](http://fbinfer.com/docs/infer-bug-types.html#CXX_REFERENCE_CAPTURED_IN_OBJC_BLOCK) a C++ reference in an Objective-C block

For the full list of changes included see [here](https://github.com/facebook/infer/compare/v0.5.0...v0.6.0).

The sha256 checksums of the tarballs are:

```
$ shasum -a 256 -p infer-*-v0.6.0.tar.xz
26abc0312c892b53e4b93c22c2c051381ce1012a3d8458e8e2574b27302eec37 infer-linux64-v0.6.0.tar.xz
8a1c4d0425c0ef3efcf4683cdbeebba63f3dd2fd5e75df4f04142dc9a5a5f15d infer-osx-v0.6.0.tar.xz
```
",29857799
53,False,False,2015-12-18T16:27:00Z,2015-12-18T18:17:02Z,"This is a source release of Infer packaged with pre-built binaries for clang and facebook-clang-plugins for Linux and MacOS. To use it follow these [instructions](http://fbinfer.com/docs/getting-started.html).

New features:
- [android] detection of context leaks
- [android] support for `@PerformanceCritical` and `@Expensive` method annotations. Infer will check that an expensive method is never called during the execution of a performance critical method (run it with `infer -a checkers -- ...`).
- [iOS] new check to catch strong delegate properties, likely to create retain cycles
- [iOS] new check to catch direct accesses to atomic properties, which can cause race conditions
- [all] performance improvements all-around

For the full list of changes included see  [here](https://github.com/facebook/infer/compare/v0.4.0...v0.5.0).

The sha256 checksums of the tarballs are:

```
$ shasum -a 256 infer-*-v0.5.0*.tar.xz
9d6eefeb63742bd408bc5769e93f34b378b36c0561c8e80035797c1be0c6fc66  infer-linux64-v0.5.0.tar.xz
6a8547ac0b75a5e2bbeccae2169e39f753a60adbcacb6c94599fd31343a71ce7  infer-osx-v0.5.0.tar.xz
```
",29857799
54,False,False,2015-10-05T11:52:20Z,2015-10-13T15:46:48Z,"This is a source release of Infer packaged with pre-built binaries for clang and facebook-clang-plugins for Linux and MacOS. To use it follow these [instructions](http://fbinfer.com/docs/getting-started.html).

For the full list of changes included see  [here](https://github.com/facebook/infer/compare/v0.3.0...v0.4.0).

The sha256 checksums of the tarballs are:

```
$ sha256sum infer-*-v0.4.0.tar.xz
bb84656153b59ff43f477c2432039195b614ecb5c19ed2a3f73aea7921696730  infer-osx-v0.4.0.tar.xz
14f6e6d96a450d7acb17de0b26b136851d1b2815edd267e5865ea0af7aaf2887  infer-linux64-v0.4.0.tar.xz
```
",29857799
55,False,False,2015-08-18T18:10:33Z,2015-08-20T14:31:37Z,"This is a source release of Infer packaged with pre-built binaries for clang and facebook-clang-plugins for Linux and MacOS. To use it follow these [instructions](http://fbinfer.com/docs/getting-started.html).

For the full list of changes included see  [here](https://github.com/facebook/infer/compare/v0.2.0...v0.3.0).

The sha256 checksums of the tarballs are:

```
$ sha256sum infer-*-v0.3.0.tar.xz
325013468da5b221e81ad3f1ba348e07a87f061c698e46b32d20f94d599ab463  infer-linux64-v0.3.0.tar.xz
cfd17c647098baff2875f3ff4db994f2ee02e7b5577cde5fe59ee21ec57a2d44  infer-osx-v0.3.0.tar.xz
```
",29857799
56,False,False,2015-06-26T12:00:15Z,2015-06-26T12:29:19Z,"Notable fixes and improvements:
- [java] analyze class files with $$ in the name (closes #3 more)
- [java] don't fail on compilation warnings (closes #18)
- [clang] support __nullable et al. (closes #4)
- add an Infer:Checkers for printf arguments

Action required to compile from source when upgrading from a previous version:
- The version of javalib that Infer requires has changed. You'll need
  to upgrade it using opam: `opam update && opam upgrade`. You'll also
  need to run `make -C infer clean` before recompiling Infer.
- The version of the facebook-clang-plugins that Infer requires has
  changed. You'll need to update the plugins before recompiling Infer:
  from the directory where Infer sources live, run `./update-fcp.sh && ../facebook-clang-plugin/clang/setup.sh && ./compile-fcp.sh`.

See the full list of changes [here](https://github.com/facebook/infer/compare/v0.1.1...v0.2.0).
",29857799
57,False,False,2015-06-18T10:00:23Z,2015-06-18T10:32:13Z,"This release fixes a number of bugs. Non-exhaustive list below.
- [java] no more crash on class names containing ""$$"" (closes #3)
- [java] model for `assert` (closes #68)
- [objective-c] support for `@import` (closes #2)
- [c family] Infer now always reports on the right line numbers (closes #31)
- [c family] fix c++ compilation errors (closes #37)
",29857799
58,False,False,2015-06-11T10:53:29Z,2015-06-11T11:32:30Z,,29857799
59,False,False,2020-03-12T03:28:44Z,2020-03-19T07:17:54Z,"Tink is a multi-language, cross-platform library that provides simple and misuse-proof APIs for common cryptographic tasks.

This is Tink 1.3.0.

# Changes

There is no change since rc4.

Compared to 1.2.x, main changes in 1.3.0 include

 - new language: Golang with primitives MAC, AEAD (incl. KMS envelope), deterministic AEAD, hybrid encryption and digital signatures (see [supported primitives](https://github.com/google/tink/blob/master/docs/PRIMITIVES.md#golang) and [GOLANG HOWTO](https://github.com/google/tink/blob/master/docs/GOLANG-HOWTO.md) for details)
 - C++ deterministic AEAD (AES-SIV) and streaming AEAD (AES-GCM-HKDF-STREAMING)
 - C++ KMS-AEAD and KMS-envelope-AEAD, incl. integration with AWS KMS and GCP KMS.
 - RSA-signatures for Java and C++ (RSA-SSA-PKCS1, RSA-SSA-PSS)
- ED25519 signatures for C++, Obj-C, and Go

Please note that Tink JavaScript and Tink Python **are not** a part of this release.  Moreover, **streaming** envelope encryption (for Java and C++) has been de-prioritized and also is not a part of this release.

# Installation

## C++

We no longer offer prebuilt binaries for C++. Please check out this [documentation](https://github.com/google/tink/blob/master/docs/CPP-HOWTO.md) for how to compile your application together with Tink using Bazel or CMake.

## Obj-C with CocoaPods

```shell
cd /path/to/your/Xcode project/
pod init
pod 'Tink', '1.3.0'
pod install
```

## Golang

To install Tink locally run:

```sh
go get github.com/google/tink/go/...
```

## Java with Maven

```xml
<dependency>
  <groupId>com.google.crypto.tink</groupId>
  <artifactId>tink</artifactId>
  <version>1.3.0</version>
</dependency>
```

## Android with Gradle

```
dependencies {
  compile 'com.google.crypto.tink:tink-android:1.3.0'
}
```
# What's next

We're actively working on 1.4.0. This release will add Python support. It should be out by April 2020.",20570214
60,False,True,2020-02-20T08:19:58Z,2020-02-20T08:22:41Z,"Tink is a multi-language, cross-platform library that provides simple and misuse-proof APIs for common cryptographic tasks.

This is Tink 1.3.0 Release Candidate 4.

# Changes

The complete list of changes since 1.3.0-rc3 can be found [here](https://github.com/google/tink/compare/v1.3.0-rc3..v1.3.0-rc4).

Changes of note include (from rc3 to rc4):

- Fix an inconsistency in the Envelope Encryption approach in the C++ implementation (8e4b5c700)

Please note that Tink JavaScript and Tink Python **are not** a part of this release.  Moreover, **streaming** envelope encryption (for Java and C++) has been de-prioritized and also is not a part of this release.

# Installation

## C++ with prebuilt binaries

```shell
OS=""$(uname | tr '[:upper:]' '[:lower:]')""
TARGET_DIR=""/usr/local""
curl -L \
  ""https://storage.googleapis.com/tink/releases/libtink-${OS}-x86_64-1.3.0-rc4.tar.gz"" |
sudo tar -xz -C ${TARGET_DIR}
```

## Obj-C with CocoaPods

```shell
cd /path/to/your/Xcode project/
pod init
pod 'Tink', '1.3.0-rc4'
pod install
```

## Golang

To install Tink locally run:

```sh
go get github.com/google/tink/go/...
```

## Java with Maven

```xml
<dependency>
  <groupId>com.google.crypto.tink</groupId>
  <artifactId>tink</artifactId>
  <version>1.3.0-rc4</version>
</dependency>
```

## Android with Gradle

```
dependencies {
  compile 'com.google.crypto.tink:tink-android:1.3.0-rc4'
}
```
# What's next

This should be the last release candidate before the final 1.3.0 release.",20570214
61,False,True,2019-12-20T06:25:44Z,2019-12-20T06:48:22Z,"Tink is a multi-language, cross-platform library that provides simple and misuse-proof APIs for common cryptographic tasks.

This is Tink 1.3.0 Release Candidate 3

# Changes

The complete list of changes since 1.3.0-rc2 can be found [here](https://github.com/google/tink/compare/v1.3.0-rc2..v1.3.0-rc3).

Changes of note include (from rc2 to rc3):

- Fix ExceptionInInitializerError with tink-android (#289)
- Fix CocoaPod to actually include new APIs.

Please note that Tink JavaScript and Tink Python **are not** a part of this release.  Moreover, **streaming** envelope encryption (for Java and C++) has been de-prioritized and also is not a part of this release.

# Installation

## C++ with prebuilt binaries

```shell
OS=""$(uname | tr '[:upper:]' '[:lower:]')""
TARGET_DIR=""/usr/local""
curl -L \
  ""https://storage.googleapis.com/tink/releases/libtink-${OS}-x86_64-1.3.0-rc3.tar.gz"" |
sudo tar -xz -C ${TARGET_DIR}
```

## Obj-C with CocoaPods

**The Obj-C artifacts are pending publication. This note will be removed once they are published.**

```shell
cd /path/to/your/Xcode project/
pod init
pod 'Tink', '1.3.0-rc3'
pod install
```

## Golang

To install Tink locally run:

```sh
go get github.com/google/tink/go/...
```

## Java with Maven

```xml
<dependency>
  <groupId>com.google.crypto.tink</groupId>
  <artifactId>tink</artifactId>
  <version>1.3.0-rc3</version>
</dependency>
```

## Android with Gradle

```
dependencies {
  compile 'com.google.crypto.tink:tink-android:1.3.0-rc3'
}
```
# What's next

There may be a few more release candidates before we get to the final 1.3.0 release. It should be out by December 2019.
",20570214
62,False,True,2019-11-26T03:28:29Z,2019-12-20T06:40:08Z,"Tink is a multi-language, cross-platform library that provides simple and misuse-proof APIs for common cryptographic tasks.

This is Tink 1.3.0 Release Candidate 2

# Changes

The complete list of changes since 1.3.0-rc1 can be found [here](https://github.com/google/tink/compare/v1.3.0-rc1...v1.3.0-rc2).

Changes of note include (from rc1 to rc2):

 - The recommended version of Bazel is documented in the `.bazelversion` file in the root of the repository. This approach is compatible with [Bazelisk](https://github.com/bazelbuild/bazelisk), a wrapper for Bazel maintained by the Bazel team.

Please note that Tink JavaScript and Tink Python **are not** a part of this release.  Moreover, **streaming** envelope encryption (for Java and C++) has been de-prioritized and also is not a part of this release.

# Installation

## C++ with prebuilt binaries

```shell
OS=""$(uname | tr '[:upper:]' '[:lower:]')""
TARGET_DIR=""/usr/local""
curl -L \
  ""https://storage.googleapis.com/tink/releases/libtink-${OS}-x86_64-1.3.0-rc2.tar.gz"" |
sudo tar -xz -C ${TARGET_DIR}
```

## Obj-C with CocoaPods

```shell
cd /path/to/your/Xcode project/
pod init
pod 'Tink', '1.3.0-rc2'
pod install
```

## Golang

To install Tink locally run:

```sh
go get github.com/google/tink/go/...
```

## Java with Maven

```xml
<dependency>
  <groupId>com.google.crypto.tink</groupId>
  <artifactId>tink</artifactId>
  <version>1.3.0-rc2</version>
</dependency>
```

## Android with Gradle

```
dependencies {
  compile 'com.google.crypto.tink:tink-android:1.3.0-rc2'
}
```
# What's next

There may be a few more release candidates before we get to the final 1.3.0 release. It should be out by December 2019.
",20570214
63,False,True,2019-07-01T12:22:15Z,2019-07-01T13:15:28Z,"Tink is a multi-language, cross-platform library that provides simple and misuse-proof APIs for common cryptographic tasks.

This is Tink 1.3.0 Release Candidate 1

# Changes

The complete list of changes since 1.2.2 can be found [here](https://github.com/google/tink/compare/v1.2.2...v1.3.0-rc1).

The main changes include:

 - new language: Tink in Go, with primitives MAC, AEAD (incl. KMS envelope), deterministic AEAD, hybrid encryption and digital signatures (see [supported primitives](https://github.com/google/tink/blob/master/docs/PRIMITIVES.md#golang) and [GOLANG HOWTO](https://github.com/google/tink/blob/master/docs/GOLANG-HOWTO.md) for details)
 - C++ deterministic AEAD (AES-SIV) and streaming AEAD (AES-GCM-HKDF-STREAMING)
 - C++ KMS-AEAD and KMS-envelope-AEAD, incl. integration with AWS KMS and GCP KMS.
 - RSA-signatures for Java and C++ (RSA-SSA-PKCS1, RSA-SSA-PSS)
- ED25519 signatures for C++, Obj-C, and Go

Please note that Tink JavaScript and Tink Python **are not** a part of this release.  Moreover, **streaming** envelope encryption (for Java and C++) has been de-prioritized and also is not a part of this release.

# Installation

## C++ with prebuilt binaries

```shell
OS=""$(uname | tr '[:upper:]' '[:lower:]')""
TARGET_DIR=""/usr/local""
curl -L \
  ""https://storage.googleapis.com/tink/releases/libtink-${OS}-x86_64-1.3.0-rc1.tar.gz"" |
sudo tar -xz -C ${TARGET_DIR}
```

## Obj-C with CocoaPods

```shell
cd /path/to/your/Xcode project/
pod init
pod 'Tink', '1.3.0-rc1'
pod install
```

## Golang

To install Tink locally run:

```sh
go get github.com/google/tink/go/...
```

## Java with Maven

```xml
<dependency>
  <groupId>com.google.crypto.tink</groupId>
  <artifactId>tink</artifactId>
  <version>1.3.0-rc1</version>
</dependency>
```

## Android with Gradle

```
dependencies {
  compile 'com.google.crypto.tink:tink-android:1.3.0-rc1'
}
```
# What's next

There may be a few more release candidates before we get to the final 1.3.0 release. It should be out by the end of July 2019.
",20570214
64,False,False,2019-01-25T00:04:50Z,2019-01-25T00:07:12Z,"Tink is a multi-language, cross-platform library that provides simple and misuse-proof APIs for common cryptographic tasks.

This is Tink 1.2.2.

# Changes

This release fixes an issue with the Obj-C build distributed via CocoaPods. In particular, the BoringSSL library is statically linked to prevent namespace clashes in projects which depend on OpenSSL.

The complete list of changes since 1.2.1 can be found [here](https://github.com/google/tink/compare/v1.2.1...v1.2.2).

# Installation

## C++ with prebuilt binaries

```shell
OS=""$(uname | tr '[:upper:]' '[:lower:]')""
TARGET_DIR=""/usr/local""
curl -L \
  ""https://storage.googleapis.com/tink/releases/libtink-${OS}-x86_64-1.2.2.tar.gz"" |
sudo tar -xz -C ${TARGET_DIR}
```

## Obj-C with CocoaPods

```shell
cd /path/to/your/Xcode project/
pod init
pod 'Tink', '1.2.2'
pod install
```

## Java with Maven

```xml
<dependency>
  <groupId>com.google.crypto.tink</groupId>
  <artifactId>tink</artifactId>
  <version>1.2.2</version>
</dependency>
```

## Android with Gradle

```
dependencies {
  compile 'com.google.crypto.tink:tink-android:1.2.2'
}
```

# What's next

See [the project road map](https://github.com/google/tink/blob/master/docs/ROADMAP.md) for future plans.",20570214
65,False,False,2018-11-16T13:57:47Z,2018-11-16T20:42:32Z,"Tink is a multi-language, cross-platform library that provides simple and misuse-proof APIs for common cryptographic tasks.

This is Tink 1.2.1.

# Changes

This release fixes a bunch of (non-security) bugs. There is no change in the public APIs.

The complete list of changes since 1.2.0 can be found [here](https://github.com/google/tink/compare/v1.2.0...v1.2.1).

# Installation

## C++ with prebuilt binaries

```shell
OS=""$(uname | tr '[:upper:]' '[:lower:]')""
TARGET_DIR=""/usr/local""
curl -L \
  ""https://storage.googleapis.com/tink/releases/libtink-${OS}-x86_64-1.2.1.tar.gz"" |
sudo tar -xz -C ${TARGET_DIR}
```

## Obj-C with Cocoapods

```shell
cd /path/to/your/Xcode project/
pod init
pod 'Tink', '1.2.1'
pod install
```

## Java with Maven

```xml
<dependency>
  <groupId>com.google.crypto.tink</groupId>
  <artifactId>tink</artifactId>
  <version>1.2.1</version>
</dependency>
```

## Android with Gradle

```
dependencies {
  compile 'com.google.crypto.tink:tink-android:1.2.1'
}
```

# What's next

See [the project road map](https://github.com/google/tink/blob/master/docs/ROADMAP.md) for future plans.",20570214
66,False,False,2018-08-09T18:16:37Z,2018-08-10T05:54:37Z,"Tink is a multi-language, cross-platform library that provides simple and misuse-proof APIs for common cryptographic tasks.

This is Tink 1.2.0.

# Changes

The complete list of changes since Release Candidate 4 can be found [here](https://github.com/google/tink/compare/v1.2.0-rc4...v1.2.0). 

Please ignore RSA-related changes; RSA is not part of 1.2.0 release.

## New languages: C++ and Obj-C

Tink 1.2.0 adds support for C++ and Obj-C. Both have been running in production at Google for a few months, and support the following algorithms:

* AEAD: AES-EAX, AES-GCM, AES-CTR-HMAC-AEAD
* MAC: HMAC-SHA2
* Digital Signature: ECDSA over NIST curves
* Hybrid Encryption: ECIES over NIST curves with AEAD (AES-GCM and AES-CTR-HMAC-AEAD) and HKDF

Support for AWS KMS will be added to the Tink C++ library in future release candidates. Support for Google Cloud KMS has to wait post 1.2.0 because of lack of Cloud KMS client library.

The Tink Obj-C library supports reading/writing key material to/from iOS Keychain.

Please see the [C++ HOWTO](https://github.com/google/tink/blob/master/docs/CPP-HOWTO.md) and the [Obj-C HOWTO](https://github.com/google/tink/blob/master/docs/OBJC-HOWTO.md) for usage.

# Installation

## C++ with prebuilt binaries

```shell
OS=""linux""  # Change to ""darwin"" for macOS
TARGET_DIR=""/usr/local""
curl -L \
  ""https://storage.googleapis.com/tink/releases/libtink-${OS}-x86_64-1.2.0.tar.gz"" |
sudo tar -xz -C ${TARGET_DIR}
```

## Obj-C with Cocoapods

```shell
cd /path/to/your/Xcode project/
pod init
pod 'Tink', '1.2.0'
pod install
```

## Java with Maven

```xml
<dependency>
  <groupId>com.google.crypto.tink</groupId>
  <artifactId>tink</artifactId>
  <version>1.2.0</version>
</dependency>
```

## Android with Gradle

```
dependencies {
  compile 'com.google.crypto.tink:tink-android:1.2.0'
}
```

# What's next

See [the project road map](https://github.com/google/tink/blob/master/docs/ROADMAP.md) for future plans.",20570214
67,False,True,2018-08-01T03:17:06Z,2018-08-01T21:33:07Z,"Tink is a multi-language, cross-platform library that provides simple and misuse-proof APIs for common cryptographic tasks.

This is Tink 1.2.0 Release Candidate 4.

# Changes

The complete list of changes since Release Candidate 3 can be found [here](https://github.com/google/tink/compare/v1.2.0-rc3...v1.2.0-rc4). 

Please ignore RSA-related changes; RSA is not part of 1.2.0 release.

## New languages: C++ and Obj-C

Tink 1.2.0 adds support for C++ and Obj-C. Both have been running in production at Google for a few months, and support the following algorithms:

* AEAD: AES-EAX, AES-GCM, AES-CTR-HMAC-AEAD
* MAC: HMAC-SHA2
* Digital Signature: ECDSA over NIST curves
* Hybrid Encryption: ECIES over NIST curves with AEAD (AES-GCM and AES-CTR-HMAC-AEAD) and HKDF

Support for AWS KMS will be added to the Tink C++ library in future release candidates. Support for Google Cloud KMS has to wait post 1.2.0 because of lack of Cloud KMS client library.

The Tink Obj-C library supports reading/writing key material to/from iOS Keychain.

Please see the [C++ HOWTO](https://github.com/google/tink/blob/master/docs/CPP-HOWTO.md) and the [Obj-C HOWTO](https://github.com/google/tink/blob/master/docs/OBJC-HOWTO.md) for usage.

# Installation

## C++ with prebuilt binaries

```shell
OS=""linux""  # Change to ""darwin"" for macOS
TARGET_DIR=""/usr/local""
curl -L \
  ""https://storage.googleapis.com/tink/releases/libtink-${OS}-x86_64-1.2.0-rc4.tar.gz"" |
sudo tar -xz -C ${TARGET_DIR}
```

## Obj-C with Cocoapods

```shell
cd /path/to/your/Xcode project/
pod init
pod 'Tink', '1.2.0-rc4'
pod install
```

## Java with Maven

```xml
<dependency>
  <groupId>com.google.crypto.tink</groupId>
  <artifactId>tink</artifactId>
  <version>1.2.0-rc4</version>
</dependency>
```

## Android with Gradle

```
dependencies {
  compile 'com.google.crypto.tink:tink-android:1.2.0-rc4'
}
```

# What's next

This is intended to be the last release candidate before the final 1.2.0 release.",20570214
68,False,True,2018-07-27T19:43:36Z,2018-07-27T20:01:04Z,"Tink is a multi-language, cross-platform library that provides simple and misuse-proof APIs for common cryptographic tasks.

This is Tink 1.2.0 Release Candidate 3. 

# Changes

The complete list of changes since Release Candidate 2 can be found [here](https://github.com/google/tink/compare/v1.2.0-rc2...v1.2.0-rc3). Please ignore RSA-related changes; RSA is not part of 1.2.0 release.

This candidate adds C++/Obj-C APIs to generate keys and to get public keys from private keys. We thank Sreejith Krishnan R for [reporting](https://groups.google.com/d/msg/tink-users/Abpz3EtYhFU/LPR8A-bwBQAJ) these bugs.

## New languages: C++ and Obj-C

Tink 1.2.0 adds support for C++ and Obj-C. Both have been running in production at Google for a few months, and support the following algorithms:

* AEAD: AES-EAX, AES-GCM, AES-CTR-HMAC-AEAD
* MAC: HMAC-SHA2
* Digital Signature: ECDSA over NIST curves
* Hybrid Encryption: ECIES over NIST curves with AEAD (AES-GCM and AES-CTR-HMAC-AEAD) and HKDF

Support for AWS KMS will be added to the Tink C++ library in future release candidates. Support for Google Cloud KMS has to wait post 1.2.0 because of lack of Cloud KMS client library.

The Tink Obj-C library supports reading/writing key material to/from iOS Keychain.

Please see the [C++ HOWTO](https://github.com/google/tink/blob/master/docs/CPP-HOWTO.md) and the [Obj-C HOWTO](https://github.com/google/tink/blob/master/docs/OBJC-HOWTO.md) for usage.

# Installation

## C++ with prebuilt binaries

```shell
OS=""linux""  # Change to ""darwin"" for macOS
TARGET_DIR=""/usr/local""
curl -L \
  ""https://storage.googleapis.com/tink/releases/libtink-${OS}-x86_64-1.2.0-rc3.tar.gz"" |
sudo tar -xz -C ${TARGET_DIR}
```

## Obj-C with Cocoapods

```shell
cd /path/to/your/Xcode project/
pod init
pod 'Tink', '1.2.0-rc3'
pod install
```

## Java with Maven

```xml
<dependency>
  <groupId>com.google.crypto.tink</groupId>
  <artifactId>tink</artifactId>
  <version>1.2.0-rc3</version>
</dependency>
```

## Android with Gradle

```
dependencies {
  compile 'com.google.crypto.tink:tink-android:1.2.0-rc3'
}
```

# What's next

There may be a few more release candidates before we get to the final 1.2.0 release. It should be out by the end of July 2018.",20570214
69,False,True,2018-07-13T23:42:51Z,2018-07-13T23:52:22Z,"Tink is a multi-language, cross-platform library that provides simple and misuse-proof APIs for common cryptographic tasks.

This is Tink 1.2.0 Release Candidate 2.

*Note: Release Candidate 1 was private and used to test the Obj-C publishing process.*

# New languages: C++ and Obj-C

Tink 1.2.0 adds support for C++ and Obj-C. Both have been running in production at Google for a few months, and support the following algorithms:

* AEAD: AES-EAX, AES-GCM, AES-CTR-HMAC-AEAD
* MAC: HMAC-SHA2
* Digital Signature: ECDSA over NIST curves
* Hybrid Encryption: ECIES over NIST curves with AEAD (AES-GCM and AES-CTR-HMAC-AEAD) and HKDF

Support for AWS KMS will be added to the Tink C++ library in future release candidates. Support for Google Cloud KMS has to wait post 1.2.0 because of lack of Cloud KMS client library. The Tink Obj-C library supports reading/writing key material to/from iOS Keychain.

Please see the [C++ HOWTO](https://github.com/google/tink/blob/master/docs/CPP-HOWTO.md) and the [Obj-C HOWTO](https://github.com/google/tink/blob/master/docs/OBJC-HOWTO.md) for usage.

# Installation

## C++ with prebuilt binaries

```shell
OS=""linux"" # Change to ""darwin"" for macOS
TARGET_DIR=""/usr/local""
curl -L \
""https://storage.googleapis.com/tink/releases/libtink-${OS}-x86_64-1.2.0-rc2.tar.gz"" |
sudo tar -xz -C $TARGET_DIR
```

## Obj-C with Cocoapods

```shell
cd /path/to/your/Xcode project/
pod init
pod 'Tink', '1.2.0-rc2'
pod install
```

## Java with Maven

```xml
<dependency>
  <groupId>com.google.crypto.tink</groupId>
  <artifactId>tink</artifactId>
  <version>1.2.0-rc2</version>
</dependency>
```

## Android with Gradle

```
dependencies {
  compile 'com.google.crypto.tink:tink-android:1.2.0-rc2'
}
```

# What's next

There may be a few more release candidates before we get to the final 1.2.0 release. It should be out by the end of July 2018.",20570214
70,False,False,2018-05-25T22:30:25Z,2018-05-26T01:20:59Z,"Tink is a multi-language, cross-platform library that provides an easy, simple, secure, and agile API for common cryptographic tasks.

This is a minor release which includes a fix for a build error (#94) and documentation cleanup.

## Installation

Java developers can install Tink using Maven:
```
<dependency>
  <groupId>com.google.crypto.tink</groupId>
  <artifactId>tink</artifactId>
  <version>1.1.1</version>
</dependency>
```

Android developers can install Tink using Gradle:
```
dependencies {
  compile 'com.google.crypto.tink:tink-android:1.1.1'
}
```

For usage, please see the [Java HOWTO](https://github.com/google/tink/blob/master/doc/JAVA-HOWTO.md). A list of known issues is provided [here](https://github.com/google/tink/blob/master/doc/KNOWN-ISSUES.md).


## Javadoc

* [Java](http://google.github.io/tink/javadoc/tink/1.1.1/)
* [Android](http://google.github.io/tink/javadoc/tink-android/1.1.1/)
* [Google Pay Token](http://google.github.io/tink/javadoc/apps-paymentmethodtoken/1.1.1/)",20570214
71,False,False,2018-04-19T00:18:20Z,2018-04-19T01:21:57Z,"Tink is a multi-language, cross-platform library that provides an easy, simple, secure, and agile API for common cryptographic tasks.

This is the second release. Like the first release, Java is still the only officially supported language. Tink for C++, Objective-C and Go are working (C++ has been running in production at Google for a while), and we’re working hard to bring these languages in 1.2.0. See our [feature roadmap](https://github.com/google/tink/blob/master/doc/ROADMAP.md) for more details.

## Installation

Java developers can install Tink using Maven:
```
<dependency>
  <groupId>com.google.crypto.tink</groupId>
  <artifactId>tink</artifactId>
  <version>1.1.0</version>
</dependency>
```

Android developers can install Tink using Gradle:
```
dependencies {
  compile 'com.google.crypto.tink:tink-android:1.1.0'
}
```

For usage, please see the [Java HOWTO](https://github.com/google/tink/blob/master/doc/JAVA-HOWTO.md). A list of known issues is provided [here](https://github.com/google/tink/blob/master/doc/KNOWN-ISSUES.md).

## New primitives and algorithms

* AEAD: CHACHA20-POLY1305

* Digital Signature: ED25519

* Deterministic AEAD: AES-SIV

* Streaming AEAD: AES-GCM-HKDF-STREAMING and AES-CTR-HMAC-STREAMING

## New apps

Aside from the core APIs, Tink provides apps that implement common standards or protocols. The apps depend on Tink, but are built separately.

### Google Pay Token

This app is an implementation of [Google Pay Token Cryptography Standard](https://developers.google.com/pay/api/payment-data-cryptography). Version 1.1.0 adds supports for the ECv2 protocol.

```
<dependency>
  <groupId>com.google.crypto.tink</groupId>
  <artifactId>apps-paymentmethodtoken</artifactId>
  <version>1.1.0</version>
</dependency>
```

### Web Push Message Encryption

This app is an implementation of [RFC 8291 - Message Encryption for Web Push](https://tools.ietf.org/html/rfc8291).

```
<dependency>
  <groupId>com.google.crypto.tink</groupId>
  <artifactId>apps-webpush</artifactId>
  <version>1.1.0</version>
</dependency>
```

## Javadoc

* [Java](http://google.github.io/tink/javadoc/tink/1.1.0/)
* [Android](http://google.github.io/tink/javadoc/tink-android/1.1.0/)
* [Google Pay Token](http://google.github.io/tink/javadoc/apps-paymentmethodtoken/1.1.0/)
* [Web Push Message Encryption](http://google.github.io/tink/javadoc/app-webpush/1.1.0/)
",20570214
72,False,False,2017-09-09T00:40:55Z,2017-09-09T00:57:21Z,"This is the first release of Tink. The only supported language in this release is Java. Tink for Java comes in two flavors:

* The main flavor, and
* The Android flavor that is optimized for Android.

For installation and usage, please see the [Java HOWTO](https://github.com/google/tink/blob/master/doc/JAVA-HOWTO.md).

## Supported primitives and algorithms

Both flavors support the following primitives and algorithms:

* AEAD: AES-EAX, AES-GCM, AES-CTR-HMAC-AEAD, KMS Envelope
* MAC: HMAC-SHA2
* Digital Signature: ECDSA over NIST curves
* Hybrid Encryption: ECIES over NIST curves with AEAD (AES-GCM and AES-CTR-HMAC-AEAD) and HKDF

## Supported key management systems

* Main flavor: AWS KMS, GCP KMS
* Android flavor: Android Keystore (require Android M or newer).

## Warnings

Do not use APIs including fields and methods marked with the @Alpha annotation. They can be modified in any way, or even removed, at any time. They are in the package, but not for official, production release, but only for testing.

## What's next

We've already started working on 1.1.0. If things go well, we'll introduce the following algorithms:

* AEAD: CHACHA20-POLY1305, XCHACHA20-POLY1305, XSALSA20-POLY1305
* Digital signature: EdDSA over Ed25519
* Hybrid Encryption: NaCl CryptoBox",20570214
73,False,False,2020-02-06T23:49:53Z,2020-02-06T23:53:55Z,"vcpkg (2020.01.31)
---
#### Total port count: 1295
#### Total port count per triplet (tested): 
|triplet|ports available|
|---|---|
|**x64-windows**|1195|
|x86-windows|1183|
|x64-windows-static|1104|
|**x64-linux**|1054|
|**x64-osx**|970|
|arm64-windows|814|
|x64-uwp|644|
|arm-uwp|615|

#### The following documentation has been updated:
- [Triplets](docs/users/triplets.md)
    - [(#7976)](https://github.com/microsoft/vcpkg/pull/7976) Community Triplets 🤝 (by @vicroms)

#### The following *remarkable* changes have been made to vcpkg's infrastructure:
- Allow untested triplet configurations as ""Community Triplets""
    - [(#7976)](https://github.com/microsoft/vcpkg/pull/7976) Community Triplets 🤝 (by @vicroms)
- Add community support for MinGW
  - [(#9137)](https://github.com/microsoft/vcpkg/pull/9137) Add community support for building with MinGW (by @cristianadam)
  - [(#9807)](https://github.com/microsoft/vcpkg/pull/9807) MinGW: Fix vcpkg common definitions (by @cristianadam)
- Allow ARM/ARM64 toolchains to be selected when building x86 targets, also allow ARM64 to target ARM
  - [(#9578)](https://github.com/microsoft/vcpkg/pull/9578) [vcpkg] Mark ARM and x86 on ARM64 and x86 on ARM as supported architectures when searching for toolchains on Windows (by @cbezault)

#### The following *additional* changes have been made to vcpkg's infrastructure:
- [(#9435)](https://github.com/microsoft/vcpkg/pull/9435) Update CI baseline (by @NancyLi1013)
- [(#9494)](https://github.com/microsoft/vcpkg/pull/9494) [charls] Upgrade to 2.1.0 (by @vbaderks)
- [(#9379)](https://github.com/microsoft/vcpkg/pull/9379) [uvatlas] Upgrade to dec2019 (by @AlvinZhangH)
- [(#9529)](https://github.com/microsoft/vcpkg/pull/9529) [box2d] Update to 2019-12-31 (by @PhoebeHui)
- [(#9513)](https://github.com/microsoft/vcpkg/pull/9513) [wpilib] Update to 2020.1.1 (by @ThadHouse)
- [(#9499)](https://github.com/microsoft/vcpkg/pull/9499) [akali] Add new port (by @winsoft666)
- [(#9301)](https://github.com/microsoft/vcpkg/pull/9301) [sdl1] Add build support for ARM64 Windows 10 (by @shibayan)
- [(#9260)](https://github.com/microsoft/vcpkg/pull/9260) [qt5-base] Fix Qt5 linux build and be a bit less flaky in CI (by @Neumann-A)
- [(#9308)](https://github.com/microsoft/vcpkg/pull/9308) [pdal] Fix static build (by @JackBoosY)
- [(#8701)](https://github.com/microsoft/vcpkg/pull/8701) [nethost] Adding a port for nethost (by @tannergooding)
- [(#8650)](https://github.com/microsoft/vcpkg/pull/8650) [libmagic] Add new port (by @NancyLi1013)
- [(#8386)](https://github.com/microsoft/vcpkg/pull/8386) [tfhe] Add new port (by @NancyLi1013)
- [(#8518)](https://github.com/microsoft/vcpkg/pull/8518) [libb2] Add new port (by @NancyLi1013)
- [(#9605)](https://github.com/microsoft/vcpkg/pull/9605) Add December changelog (by @grdowns)
- [(#9566)](https://github.com/microsoft/vcpkg/pull/9566) [vcpkg] Fix a typo (by @MaherJendoubi)
- [(#9207)](https://github.com/microsoft/vcpkg/pull/9207) [sdl1]Change build method to vcpkg_*_make (by @JackBoosY)
- [(#6393)](https://github.com/microsoft/vcpkg/pull/6393) Map MinSizeRel and RelWithDebInfo correctly (by @Neumann-A)
- [(#9458)](https://github.com/microsoft/vcpkg/pull/9458) [azure-kinect-sensor-sdk] Remove feature test and fix static build in Windows (by @JackBoosY)
- [(#8936)](https://github.com/microsoft/vcpkg/pull/8936) [libplist] Update to 1.2.137 (by @PhoebeHui)
- [(#8888)](https://github.com/microsoft/vcpkg/pull/8888) [caf] Update to 0.17.2 (by @JackBoosY)
- [(#8683)](https://github.com/microsoft/vcpkg/pull/8683) [libwandio] Add new port (by @NancyLi1013)
- [(#8678)](https://github.com/microsoft/vcpkg/pull/8678) [libevhtp] Add new port (by @NancyLi1013)
- [(#9600)](https://github.com/microsoft/vcpkg/pull/9600) Update baseline to fix osx failure (by @JackBoosY)
- [(#9669)](https://github.com/microsoft/vcpkg/pull/9669) [vcpkg] Update baseline for OSX (by @ras0219-msft)
- [(#9649)](https://github.com/microsoft/vcpkg/pull/9649) [tfhe] Fix Mac support (by @SeekingMeaning)
- [(#8566)](https://github.com/microsoft/vcpkg/pull/8566) [libpq, openssl, librtmp] libpq 12 and others with openssl 1.1.1d (by @Neumann-A)
- [(#9642)](https://github.com/microsoft/vcpkg/pull/9642) Introduce new policy to skip post verification of dll exports (by @martin-s)
- [(#9602)](https://github.com/microsoft/vcpkg/pull/9602) [vcpkg] Fix build type in vcpkg_build_make.cmake [x264] Modernize (by @NancyLi1013)
- [(#9536)](https://github.com/microsoft/vcpkg/pull/9536) Minor edit to help message for cli depend-info option. Fix for #9534. (by @dbird137)
- [(#9617)](https://github.com/microsoft/vcpkg/pull/9617) [akali] Update to v1.41 (by @winsoft666)
- [(#9572)](https://github.com/microsoft/vcpkg/pull/9572) [soem] Add new port (by @seanyen)
- [(#9574)](https://github.com/microsoft/vcpkg/pull/9574) [doxygen] Updated to 1.8.17 (by @tagsemb)
- [(#9372)](https://github.com/microsoft/vcpkg/pull/9372) [VCPKG] WinHTTPOption for company Proxy not correctly taken into account (by @xabbudm)
- [(#9720)](https://github.com/microsoft/vcpkg/pull/9720) [toolsrc] Added missing @ to FATAL_ERROR message (by @theriverman)
- [(#9555)](https://github.com/microsoft/vcpkg/pull/9555) [embree3] added cleanup command to embree3 port for static build (by @xelatihy)
- [(#9684)](https://github.com/microsoft/vcpkg/pull/9684) [teemo] new port. (by @winsoft666)
- [(#9591)](https://github.com/microsoft/vcpkg/pull/9591) [scintilla] Update to 4.2.3 (by @SeekingMeaning)
- [(#9767)](https://github.com/microsoft/vcpkg/pull/9767) [open62541] Update to v1.0 (by @yurybura)
- [(#9760)](https://github.com/microsoft/vcpkg/pull/9760) [monkeys-audio] Update to 5.14, add feature tools (by @JackBoosY)
- [(#9770)](https://github.com/microsoft/vcpkg/pull/9770) [asmjit] update to current version (by @jsmolka)
- [(#9708)](https://github.com/microsoft/vcpkg/pull/9708) [doxygen] Add alternative download URL (by @c72578)
- [(#9690)](https://github.com/microsoft/vcpkg/pull/9690) [string_theory] Update to 3.0 (by @zrax)
- [(#9680)](https://github.com/microsoft/vcpkg/pull/9680) [jasper] freeglut is not a dependency in macOS (by @david-antiteum)
- [(#9633)](https://github.com/microsoft/vcpkg/pull/9633) [cryptopp] Fixed build error on ARM32/ARM64 Windows (by @shibayan)
- [(#9281)](https://github.com/microsoft/vcpkg/pull/9281) [pbc] Correct non Windows build (by @decent-dcore)
- [(#9816)](https://github.com/microsoft/vcpkg/pull/9816) Make VS 2019 default to x64 triplet if CMAKE_GENERATOR_PLATFORM is not defined (by @Neumann-A)
- [(#9541)](https://github.com/microsoft/vcpkg/pull/9541) [memorymodule] Add new port (by @myd7349)
- [(#9521)](https://github.com/microsoft/vcpkg/pull/9521) [ftgl] Fix build failure #9520 (by @sma-github)
- [(#9456)](https://github.com/microsoft/vcpkg/pull/9456) [asiosdk] Add new port (by @batlogic)
- [(#9314)](https://github.com/microsoft/vcpkg/pull/9314) [sdl2-gfx] Fixed build error ARM64 Windows 10 (by @shibayan)
- [(#9265)](https://github.com/microsoft/vcpkg/pull/9265) Update the repo for jom 1.1.3 (by @zigguratvertigo)
- [(#8774)](https://github.com/microsoft/vcpkg/pull/8774) [vcpkg_find_acquire_program] Include version in downloaded python MSI… (by @ras0219-msft)
- [(#9698)](https://github.com/microsoft/vcpkg/pull/9698) [seal] Add new port (by @musaprg)
- [(#8832)](https://github.com/microsoft/vcpkg/pull/8832) [aws-*]Update version (by @JackBoosY)

<details>
<summary><b>The following 22 ports have been added:</b></summary>

|port|version|
|---|---|
|[argumentum](https://github.com/microsoft/vcpkg/pull/9478)| 0.2.2
|[tabulate](https://github.com/microsoft/vcpkg/pull/9543)| 2019-01-06
|[akali](https://github.com/microsoft/vcpkg/pull/9499)<sup>[#9617](https://github.com/microsoft/vcpkg/pull/9617) </sup>| 1.41
|[nethost](https://github.com/microsoft/vcpkg/pull/8701)| 2019-12-21
|[libmagic](https://github.com/microsoft/vcpkg/pull/8650)| 5.37
|[yas](https://github.com/microsoft/vcpkg/pull/8891)| 7.0.4
|[tfhe](https://github.com/microsoft/vcpkg/pull/8386)<sup>[#9649](https://github.com/microsoft/vcpkg/pull/9649) </sup>| 1.0.1-1
|[libb2](https://github.com/microsoft/vcpkg/pull/8518)| 0.98.1
|[libaaplus](https://github.com/microsoft/vcpkg/pull/9194)<sup>[#9579](https://github.com/microsoft/vcpkg/pull/9579) [#9664](https://github.com/microsoft/vcpkg/pull/9664) </sup>| 2.12
|[libwandio](https://github.com/microsoft/vcpkg/pull/8683)| 4.2.1
|[libevhtp](https://github.com/microsoft/vcpkg/pull/8678)| 1.2.18
|[soem](https://github.com/microsoft/vcpkg/pull/9572)| 1.4.0
|[glui](https://github.com/microsoft/vcpkg/pull/9155)| 2019-11-30
|[teemo](https://github.com/microsoft/vcpkg/pull/9684)| 1.2
|[mqtt-cpp](https://github.com/microsoft/vcpkg/pull/9787)| 7.0.1
|[msgpack11](https://github.com/microsoft/vcpkg/pull/9524)| 0.0.10
|[mcpp](https://github.com/microsoft/vcpkg/pull/9598)| 2.7.2.14
|[memorymodule](https://github.com/microsoft/vcpkg/pull/9541)| 2019-12-31
|[asiosdk](https://github.com/microsoft/vcpkg/pull/9456)| 2.3.3
|[sfsexp](https://github.com/microsoft/vcpkg/pull/9420)| 1.3
|[quaternions](https://github.com/microsoft/vcpkg/pull/9837)| 1.0.0
|[seal](https://github.com/microsoft/vcpkg/pull/9698)| 3.4.5
</details>

<details>
<summary><b>The following 226 ports have been updated:</b></summary>

- simpleini `2018-08-31-3` -> `2018-08-31-4`
    - [(#9429)](https://github.com/microsoft/vcpkg/pull/9429) [simpleini] Install missing code

- directxtk `dec2019` -> `2019-12-31`
    - [(#9508)](https://github.com/microsoft/vcpkg/pull/9508) [directxtk] Fix invalid solution configuration

- nameof `0.9.2` -> `0.9.3`
    - [(#9503)](https://github.com/microsoft/vcpkg/pull/9503) [nameof] Update to 0.9.3

- charls `2.0.0-3` -> `2.1.0-1`
    - [(#9494)](https://github.com/microsoft/vcpkg/pull/9494) [charls] upgrade to 2.1.0

- ptex `2.3.2` -> `2.3.2-1`
    - [(#9455)](https://github.com/microsoft/vcpkg/pull/9455) [ptext] Fix library cannot be found by find_package()

- fruit `3.4.0-1` -> `3.4.0-2`
    - [(#9445)](https://github.com/microsoft/vcpkg/pull/9445) [fruit] fix wchar.h import issue under Catalina

- libxlsxwriter `0.8.7-1` -> `0.9.4`
    - [(#9410)](https://github.com/microsoft/vcpkg/pull/9410) [libxlsxwriter] upgrade to 0.8.9
    - [(#9775)](https://github.com/microsoft/vcpkg/pull/9775) [libxlsxwriter] upgrade to 0.9.4

- uvatlas `apr2019` -> `dec2019`
    - [(#9379)](https://github.com/microsoft/vcpkg/pull/9379) [uvatlas] Upgrade to dec2019

- grpc `1.23.1-1` -> `1.26.0`
    - [(#9135)](https://github.com/microsoft/vcpkg/pull/9135) [grpc] Update grpc to 1.24.3
    - [(#9363)](https://github.com/microsoft/vcpkg/pull/9363) [grpc] Upgrade to gRPC-1.26.0

- freetype `2.10.1-1` -> `2.10.1-3`
    - [(#9311)](https://github.com/microsoft/vcpkg/pull/9311) [freetype] use config and the correct alias
    - [(#9706)](https://github.com/microsoft/vcpkg/pull/9706) [freetype] Add feature support

- glibmm `2.52.1-10` -> `2.52.1-11`
    - [(#9562)](https://github.com/microsoft/vcpkg/pull/9562) [glibmm] Fix build error on Linux

- libfreenect2 `0.2.0-3` -> `0.2.0-4`
    - [(#9551)](https://github.com/microsoft/vcpkg/pull/9551) [libfreenect2] add opengl and opencl features

- jsoncons `0.140.0` -> `0.143.1`
    - [(#9547)](https://github.com/microsoft/vcpkg/pull/9547) [jsoncons] Update to 0.143.1

- uwebsockets `0.16.5` -> `0.17.0a4`
    - [(#9535)](https://github.com/microsoft/vcpkg/pull/9535) [uwebsockets] Update to 0.17.0 alpha 4

- box2d `2.3.1-374664b-2` -> `2019-12-31`
    - [(#9529)](https://github.com/microsoft/vcpkg/pull/9529) [box2d] Update to 2019-12-31

- parallel-hashmap `1.27` -> `1.30`
    - [(#9519)](https://github.com/microsoft/vcpkg/pull/9519) [parallel-hashmap] Update to 1.30

- wpilib `2019.6.1` -> `2020.1.1`
    - [(#9513)](https://github.com/microsoft/vcpkg/pull/9513) [wpilib] update to 2020.1.1

- check `0.13.0-1` -> `0.13.0-2`
    - [(#9510)](https://github.com/microsoft/vcpkg/pull/9510) [check/gettimeofday] Move static libraries to manual-link

- gettimeofday `2017-10-14-2` -> `2017-10-14-3`
    - [(#9510)](https://github.com/microsoft/vcpkg/pull/9510) [check/gettimeofday] Move static libraries to manual-link

- magic-enum `0.6.3-1` -> `0.6.4`
    - [(#9502)](https://github.com/microsoft/vcpkg/pull/9502) [magic-enum] Update to v0.6.4

- simdjson `2019-08-05` -> `2019-12-27`
    - [(#9484)](https://github.com/microsoft/vcpkg/pull/9484) [simdjson] Update library

- cpp-httplib `0.4.2` -> `0.5.1`
    - [(#9480)](https://github.com/microsoft/vcpkg/pull/9480) [cpp-httplib] Update library to 0.5.1

- blend2d `beta_2019-10-09` -> `beta_2019-12-27`
    - [(#9448)](https://github.com/microsoft/vcpkg/pull/9448) [blend2d] Update to beta_2019-12-27

- parallelstl `20190522-1` -> `20191218`
    - [(#9443)](https://github.com/microsoft/vcpkg/pull/9443) [parallelstl] Update to latest version and fix find_package unable to find ParallelSTLConfig.cmake

- sdl2pp `0.16.0-1` -> `0.16.0-2`
    - [(#9428)](https://github.com/microsoft/vcpkg/pull/9428) [sdl2pp] Fix find dependencies

- basisu `1.11-2` -> `1.11-3`
    - [(#9425)](https://github.com/microsoft/vcpkg/pull/9425) [basisu] update from upstream repository, add support for pvrtc2

- devil `1.8.0-4` -> `1.8.0-5`
    - [(#9341)](https://github.com/microsoft/vcpkg/pull/9341) [devil] fix OpenEXR not found

- sdl1 `1.2.15-8` -> `1.2.15-9`
    - [(#9301)](https://github.com/microsoft/vcpkg/pull/9301) [sdl1] Add build support for ARM64 Windows 10
    - [(#9207)](https://github.com/microsoft/vcpkg/pull/9207) [sdl1]Change build method to vcpkg_*_make

- qt5-base `5.12.5-7` -> `5.12.5-8`
    - [(#9260)](https://github.com/microsoft/vcpkg/pull/9260) [qt5-base] Fix Qt5 linux build and be a bit less flaky in CI
    - [(#8566)](https://github.com/microsoft/vcpkg/pull/8566) [libpq, openssl, librtmp] libpq 12 and others with openssl 1.1.1d

- qt5-imageformats `5.12.5-1` -> `5.12.5-2`
    - [(#9260)](https://github.com/microsoft/vcpkg/pull/9260) [qt5-base] Fix Qt5 linux build and be a bit less flaky in CI
    - [(#8566)](https://github.com/microsoft/vcpkg/pull/8566) [libpq, openssl, librtmp] libpq 12 and others with openssl 1.1.1d

- qt5-tools `5.12.5-2` -> `5.12.5-3`
    - [(#9260)](https://github.com/microsoft/vcpkg/pull/9260) [qt5-base] Fix Qt5 linux build and be a bit less flaky in CI

- qt5-xmlpatterns `5.12.5` -> `5.12.5-1`
    - [(#9260)](https://github.com/microsoft/vcpkg/pull/9260) [qt5-base] Fix Qt5 linux build and be a bit less flaky in CI

- vtk `8.2.0-9` -> `8.2.0-10`
    - [(#9260)](https://github.com/microsoft/vcpkg/pull/9260) [qt5-base] Fix Qt5 linux build and be a bit less flaky in CI
    - [(#9219)](https://github.com/microsoft/vcpkg/pull/9219) [vtk] fix VTKConfig.cmake path

- libevent `2.1.11-2` -> `2.1.11-4`
    - [(#9292)](https://github.com/microsoft/vcpkg/pull/9292) [libevent] Fix include headers fails on x64-windows, using CMAKE
    - [(#9232)](https://github.com/microsoft/vcpkg/pull/9232) [libevent] remove dependency of default feature
    - [(#8566)](https://github.com/microsoft/vcpkg/pull/8566) [libpq, openssl, librtmp] libpq 12 and others with openssl 1.1.1d

- pdal `1.7.1-6` -> `1.7.1-8`
    - [(#9308)](https://github.com/microsoft/vcpkg/pull/9308) [pdal] fix static build
    - [(#8566)](https://github.com/microsoft/vcpkg/pull/8566) [libpq, openssl, librtmp] libpq 12 and others with openssl 1.1.1d

- xsimd `7.2.5` -> `7.4.5`
    - [(#9158)](https://github.com/microsoft/vcpkg/pull/9158) [xsimd][xtensor][xtl] Update to lastest

- xtensor-blas `0.16.1` -> `0.17.1`
    - [(#9158)](https://github.com/microsoft/vcpkg/pull/9158) [xsimd][xtensor][xtl] Update to lastest

- xtensor-io `0.7.0` -> `0.9.0`
    - [(#9158)](https://github.com/microsoft/vcpkg/pull/9158) [xsimd][xtensor][xtl] Update to lastest

- xtensor `0.20.8` -> `0.21.2`
    - [(#9158)](https://github.com/microsoft/vcpkg/pull/9158) [xsimd][xtensor][xtl] Update to lastest

- xtl `0.6.5` -> `0.6.10`
    - [(#9158)](https://github.com/microsoft/vcpkg/pull/9158) [xsimd][xtensor][xtl] Update to lastest

- freeimage `3.18.0-7` -> `3.18.0-8`
    - [(#8707)](https://github.com/microsoft/vcpkg/pull/8707) [freeimage libraw] Fix case issue on Linux

- libraw `201903-2` -> `201903-3`
    - [(#8707)](https://github.com/microsoft/vcpkg/pull/8707) [freeimage libraw] Fix case issue on Linux

- cgl `0.60.2-1` -> `0.60.2-2`
    - [(#8807)](https://github.com/microsoft/vcpkg/pull/8807) [cgl] Fix cgl cannot be found

- nanovg `2019-8-30-1` -> `2019-8-30-3`
    - [(#8813)](https://github.com/microsoft/vcpkg/pull/8813) [nanovg] Add dependency port stb

- hdf5 `1.10.5-8` -> `1.10.5-9`
    - [(#9043)](https://github.com/microsoft/vcpkg/pull/9043) [hdf5] Fix static builds when building dynamic builds
    - [(#9413)](https://github.com/microsoft/vcpkg/pull/9413) [HDF5] Correct SZIP linkage, modernize portfile 

- cgicc `3.2.19-3` -> `3.2.19-4`
    - [(#9123)](https://github.com/microsoft/vcpkg/pull/9123) [many ports] Add mirror
    - [(#8558)](https://github.com/microsoft/vcpkg/pull/8558) [cgicc]Fix usage error:lnk2019.

- gsl `2.4-4` -> `2.4-5`
    - [(#9123)](https://github.com/microsoft/vcpkg/pull/9123) [many ports] Add mirror

- libidn2 `2.2.0` -> `2.2.0-1`
    - [(#9123)](https://github.com/microsoft/vcpkg/pull/9123) [many ports] Add mirror

- libmicrohttpd `0.9.63-1` -> `0.9.63-2`
    - [(#9123)](https://github.com/microsoft/vcpkg/pull/9123) [many ports] Add mirror

- libosip2 `5.1.0-1` -> `5.1.0-3`
    - [(#9123)](https://github.com/microsoft/vcpkg/pull/9123) [many ports] Add mirror
    - [(#9602)](https://github.com/microsoft/vcpkg/pull/9602) [vcpkg] Fix build type in vcpkg_build_make.cmake [x264] Modernize

- libiconv `1.15-6` -> `1.16-1`
    - [(#9229)](https://github.com/microsoft/vcpkg/pull/9229) [libiconv] Make built libraries relocatable

- bullet3 `2.88-1` -> `2.89`
    - [(#9098)](https://github.com/microsoft/vcpkg/pull/9098) [bullet3] Install CMake toolchain files and targets
    - [(#9663)](https://github.com/microsoft/vcpkg/pull/9663) [bullet3] Update to 2.89

- fmt `6.0.0` -> `6.0.0-1`
    - [(#9121)](https://github.com/microsoft/vcpkg/pull/9121) [fmt] Disable warning C4189 on Visual Studio 2015

- otl `4.0.448` -> `4.0.451`
    - [(#9107)](https://github.com/microsoft/vcpkg/pull/9107) [otl] Fix header file name and version number
    - [(#9579)](https://github.com/microsoft/vcpkg/pull/9579) [otl libaaplus forge] Fix build issues
    - [(#9552)](https://github.com/microsoft/vcpkg/pull/9552) [otl] Update to version 4.0.451

- liblzma `5.2.4-2` -> `5.2.4-3`
    - [(#9192)](https://github.com/microsoft/vcpkg/pull/9192) [liblzma] Stop exporting HAVE_CONFIG_H

- glib `2.52.3-14-4` -> `2.52.3-14-5`
    - [(#9054)](https://github.com/microsoft/vcpkg/pull/9054) [glib] Install msvc_recommended_pragmas.h to <vcpkg>/installed/include

- curl `7.66.0-1` -> `7.68.0`
    - [(#8973)](https://github.com/microsoft/vcpkg/pull/8973) [curl] Disable export of Curl::curl targets when building 'tool' feature
    - [(#9589)](https://github.com/microsoft/vcpkg/pull/9589) [curl] Update to 7.68.0

- forge `1.0.4-1` -> `1.0.4-2`
    - [(#9579)](https://github.com/microsoft/vcpkg/pull/9579) [otl libaaplus forge] Fix build issues

- reproc `9.0.0` -> `10.0.3`
    - [(#9544)](https://github.com/microsoft/vcpkg/pull/9544) [reproc] Update to v10.0.3.

- cpp-netlib `0.13.0-2` -> `0.13.0-3`
    - [(#9537)](https://github.com/microsoft/vcpkg/pull/9537) [cpp-netlib] Fix cmake path, add homepage

- proj4 `6.2.1-1` -> `6.3.0-1`
    - [(#9437)](https://github.com/microsoft/vcpkg/pull/9437) [sqlite3] Rename sqlite3 tool as sqlite3.exe
    - [(#9573)](https://github.com/microsoft/vcpkg/pull/9573) [proj4] Update to version 6.3.0

- sqlite3 `3.30.1-1` -> `3.30.1-2`
    - [(#9437)](https://github.com/microsoft/vcpkg/pull/9437) [sqlite3] Rename sqlite3 tool as sqlite3.exe

- msix `MsixCoreInstaller-preview-1` -> `1.7`
    - [(#8934)](https://github.com/microsoft/vcpkg/pull/8934) [msix] Update to 1.7

- xmsh `0.4.1` -> `0.5.2`
    - [(#7155)](https://github.com/microsoft/vcpkg/pull/7155) [xmsh]Upgrade version to 0.5.2 and fix build failure.

- opencolorio `1.1.1` -> `1.1.1-2`
    - [(#8920)](https://github.com/microsoft/vcpkg/pull/8920) [opencolorio] Modify find python2 to find python3
    - [(#9755)](https://github.com/microsoft/vcpkg/pull/9755) [opencolorio] fix lcms dependency

- graphicsmagick `1.3.33-1` -> `1.3.34`
    - [(#9596)](https://github.com/microsoft/vcpkg/pull/9596) [graphicsmagick] Updated to GraphicsMagick-1.3.34

- openal-soft `1.19.1-2` -> `1.20.0`
    - [(#9583)](https://github.com/microsoft/vcpkg/pull/9583) [openal-soft] Update OpenAL Soft to 1.20.0

- google-cloud-cpp `0.15.0` -> `0.17.0`
    - [(#9576)](https://github.com/microsoft/vcpkg/pull/9576) [google-cloud-cpp] Upgrade to v0.17.0

- openmvs `1.0-3` -> `1.0.1`
    - [(#9563)](https://github.com/microsoft/vcpkg/pull/9563) [openmvs] Update to 1.0.1

- ixwebsocket `7.4.0` -> `7.9.2`
    - [(#9397)](https://github.com/microsoft/vcpkg/pull/9397) [ixwebsocket] update to 7.6.3

- azure-kinect-sensor-sdk `1.4.0-alpha.0` -> `1.4.0-alpha.0-2`
    - [(#9458)](https://github.com/microsoft/vcpkg/pull/9458) [azure-kinect-sensor-sdk] Remove feature test and fix static build in Windows
    - [(#9763)](https://github.com/microsoft/vcpkg/pull/9763) [azure-kinect-sensor-sdk] Fix *.dll install path

- netcdf-c `4.7.0-5` -> `4.7.3-1`
    - [(#9361)](https://github.com/microsoft/vcpkg/pull/9361) [netcdf-c] Update to 4.7.3 and switched to use targets to generate valid targets
    - [(#9721)](https://github.com/microsoft/vcpkg/pull/9721) [netcdf-c] Fix builds with hdf5[parallel]

- realsense2 `2.22.0-2` -> `2.30.0`
    - [(#9220)](https://github.com/microsoft/vcpkg/pull/9220) [realsense2] update to 2.30

- libplist `1.2.77` -> `1.2.137`
    - [(#8936)](https://github.com/microsoft/vcpkg/pull/8936) [libplist] Update to 1.2.137

- ismrmrd `1.4.0-1` -> `1.4.1`
    - [(#8880)](https://github.com/microsoft/vcpkg/pull/8880) [ismrmrd] Update to 1.4.1

- caf `0.16.3` -> `0.17.2`
    - [(#8888)](https://github.com/microsoft/vcpkg/pull/8888) [caf] Update to 0.17.2

- openmvg `1.4-6` -> `1.4-7`
    - [(#8824)](https://github.com/microsoft/vcpkg/pull/8824) [openmvg]Fix path in openmvg-config.cmake.

- qhull `7.3.2-1` -> `7.3.2-2`
    - [(#9651)](https://github.com/microsoft/vcpkg/pull/9651) [qhull] Fix Mac support

- cppmicroservices `4.0.0-pre1` -> `v3.4.0`
    - [(#9600)](https://github.com/microsoft/vcpkg/pull/9600) Update baseline to fix osx failure

- libguarded `2019-08-27` -> `2019-08-27-1`
    - [(#9600)](https://github.com/microsoft/vcpkg/pull/9600) Update baseline to fix osx failure

- sfgui `0.4.0-2` -> `0.4.0-3`
    - [(#9625)](https://github.com/microsoft/vcpkg/pull/9625) [sfgui] fix sfgui on macOS

- azure-storage-cpp `7.0.0` -> `7.1.0-1`
    - [(#9646)](https://github.com/microsoft/vcpkg/pull/9646) [azure-storage-cpp]Upgrade to 7.1.0
    - [(#9852)](https://github.com/microsoft/vcpkg/pull/9852) [azure-storage-cpp] Azure storage only requires gettext on OSX

- ace `6.5.7` -> `6.5.7-1`
    - [(#8566)](https://github.com/microsoft/vcpkg/pull/8566) [libpq, openssl, librtmp] libpq 12 and others with openssl 1.1.1d
    - [(#9016)](https://github.com/microsoft/vcpkg/pull/9016) [ace] Let `ssl` feature able to work on Linux when selected

- freerdp `2.0.0-rc4-3` -> `2.0.0-rc4-4`
    - [(#8566)](https://github.com/microsoft/vcpkg/pull/8566) [libpq, openssl, librtmp] libpq 12 and others with openssl 1.1.1d

- freetds `1.1.6-1` -> `1.1.17`
    - [(#8566)](https://github.com/microsoft/vcpkg/pull/8566) [libpq, openssl, librtmp] libpq 12 and others with openssl 1.1.1d

- libmysql `8.0.4-4` -> `8.0.4-5`
    - [(#8566)](https://github.com/microsoft/vcpkg/pull/8566) [libpq, openssl, librtmp] libpq 12 and others with openssl 1.1.1d

- libpq `9.6.3` -> `12.0`
    - [(#8566)](https://github.com/microsoft/vcpkg/pull/8566) [libpq, openssl, librtmp] libpq 12 and others with openssl 1.1.1d

- librtmp `2019-11-11` -> `2019-11-11_1`
    - [(#8566)](https://github.com/microsoft/vcpkg/pull/8566) [libpq, openssl, librtmp] libpq 12 and others with openssl 1.1.1d

- libssh `0.7.6-1` -> `0.9.0`
    - [(#8566)](https://github.com/microsoft/vcpkg/pull/8566) [libpq, openssl, librtmp] libpq 12 and others with openssl 1.1.1d

- libwebsockets `3.2.0` -> `3.2.2`
    - [(#8566)](https://github.com/microsoft/vcpkg/pull/8566) [libpq, openssl, librtmp] libpq 12 and others with openssl 1.1.1d
    - [(#9734)](https://github.com/microsoft/vcpkg/pull/9734) [libwebsockets] Update to v3.2.2

- mosquitto `1.6.7` -> `1.6.7-2`
    - [(#8566)](https://github.com/microsoft/vcpkg/pull/8566) [libpq, openssl, librtmp] libpq 12 and others with openssl 1.1.1d
    - [(#9754)](https://github.com/microsoft/vcpkg/pull/9754) [mosquitto] Install mosquittopp.lib to dest

- nmap `7.70-1` -> `7.70-4`
    - [(#8566)](https://github.com/microsoft/vcpkg/pull/8566) [libpq, openssl, librtmp] libpq 12 and others with openssl 1.1.1d
    - [(#9703)](https://github.com/microsoft/vcpkg/pull/9703) Update portfiles to use VCPKG_BUILD_TYPE

- openssl-unix `1.0.2s-1` -> `1.1.1d-1`
    - [(#8566)](https://github.com/microsoft/vcpkg/pull/8566) [libpq, openssl, librtmp] libpq 12 and others with openssl 1.1.1d

- openssl-uwp `1.0.2r-1` -> `1.1.1d-1`
    - [(#8566)](https://github.com/microsoft/vcpkg/pull/8566) [libpq, openssl, librtmp] libpq 12 and others with openssl 1.1.1d
    - [(#9703)](https://github.com/microsoft/vcpkg/pull/9703) Update portfiles to use VCPKG_BUILD_TYPE

- openssl-windows `1.0.2s-2` -> `1.1.1d-1`
    - [(#8566)](https://github.com/microsoft/vcpkg/pull/8566) [libpq, openssl, librtmp] libpq 12 and others with openssl 1.1.1d
    - [(#9703)](https://github.com/microsoft/vcpkg/pull/9703) Update portfiles to use VCPKG_BUILD_TYPE

- qt5-graphicaleffects `5.12.5` -> `5.12.5-1`
    - [(#8566)](https://github.com/microsoft/vcpkg/pull/8566) [libpq, openssl, librtmp] libpq 12 and others with openssl 1.1.1d

- quickfix `1.15.1-1` -> `1.15.1-3`
    - [(#8566)](https://github.com/microsoft/vcpkg/pull/8566) [libpq, openssl, librtmp] libpq 12 and others with openssl 1.1.1d

- slikenet `2019-10-22` -> `2019-10-22_1`
    - [(#8566)](https://github.com/microsoft/vcpkg/pull/8566) [libpq, openssl, librtmp] libpq 12 and others with openssl 1.1.1d

- xmlsec `1.2.29` -> `1.2.29-1`
    - [(#8566)](https://github.com/microsoft/vcpkg/pull/8566) [libpq, openssl, librtmp] libpq 12 and others with openssl 1.1.1d

- yara `3.10.0` -> `3.10.0-1`
    - [(#8566)](https://github.com/microsoft/vcpkg/pull/8566) [libpq, openssl, librtmp] libpq 12 and others with openssl 1.1.1d

- x264 `157-303c484ec828ed0-6` -> `157-303c484ec828ed0-7`
    - [(#9602)](https://github.com/microsoft/vcpkg/pull/9602) [vcpkg] Fix build type in vcpkg_build_make.cmake [x264] Modernize

- glfw3 `3.3-3` -> `3.3.1`
    - [(#9626)](https://github.com/microsoft/vcpkg/pull/9626) [glfw3] Update to 3.3.1

- glad `0.1.31` -> `0.1.33`
    - [(#9627)](https://github.com/microsoft/vcpkg/pull/9627) [glad] Update to 0.1.33

- libxml2 `2.9.9-4` -> `2.9.9-5`
    - [(#9636)](https://github.com/microsoft/vcpkg/pull/9636) [libxml2] Apply fixes also to the target of libxml2.
    - [(#9492)](https://github.com/microsoft/vcpkg/pull/9492) [libxml2] Embed resources in Windows-based shared library (#9474)

- gettext `0.19-11` -> `0.19-13`
    - [(#9610)](https://github.com/microsoft/vcpkg/pull/9610) [gettext] Add dependency on iconv
    - [(#9797)](https://github.com/microsoft/vcpkg/pull/9797) [gettext] fix library placement on macOS

- xlnt `1.3.0-2` -> `1.4.0`
    - [(#9609)](https://github.com/microsoft/vcpkg/pull/9609) [xlnt] Upgrade to v1.4.0

- cpr `1.3.0-7` -> `1.3.0-8`
    - [(#9567)](https://github.com/microsoft/vcpkg/pull/9567) [cpr] Add find_dependency to cprConfig.cmake

- sfml `2.5.1-4` -> `2.5.1-6`
    - [(#9190)](https://github.com/microsoft/vcpkg/pull/9190) [sfml] Declare Windows library export
    - [(#9726)](https://github.com/microsoft/vcpkg/pull/9726) Fix osx baseline build failures

- libtorrent `1.2.2` -> `1.2.2-1`
    - [(#7345)](https://github.com/microsoft/vcpkg/pull/7345) [libtorrent] Fix linkage issues for dynamic builds

- libffi `3.1-6` -> `3.1-7`
    - [(#8895)](https://github.com/microsoft/vcpkg/pull/8895) [libffi] Add libffiConfigVersion.cmake file

- plplot `5.13.0-3` -> `5.13.0-4`
    - [(#8817)](https://github.com/microsoft/vcpkg/pull/8817) [plplot] Fix static build issue

- libpqxx `6.4.5` -> `6.4.5-1`
    - [(#9051)](https://github.com/microsoft/vcpkg/pull/9051) [libpqxx] Fix lib name on Linux

- freeglut `3.0.0-7` -> `3.0.0-9`
    - [(#9155)](https://github.com/microsoft/vcpkg/pull/9155) [glui] Add new port
    - [(#9725)](https://github.com/microsoft/vcpkg/pull/9725) [freeglut] Patch header correctly
    - [(#9745)](https://github.com/microsoft/vcpkg/pull/9745) [freeglut] check whether debug/release is enabled before moving files

- ffmpeg `4.2-2` -> `4.2-4`
    - [(#9695)](https://github.com/microsoft/vcpkg/pull/9695) [ffmpeg] fix openssl detection
    - [(#9718)](https://github.com/microsoft/vcpkg/pull/9718) [ffmpeg] fix link order

- catch2 `2.11.0` -> `2.11.1`
    - [(#9685)](https://github.com/microsoft/vcpkg/pull/9685) [catch2] Update to 2.11.1

- boost-accumulators `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-algorithm `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-align `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-any `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-array `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-asio `1.71.0-1` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-assert `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-assign `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-atomic `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-beast `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-bimap `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-bind `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-build `1.70.0-1` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-callable-traits `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-chrono `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-circular-buffer `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-compatibility `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-compute `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-concept-check `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-config `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-container-hash `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-container `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-context `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-contract `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-conversion `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-convert `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-core `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-coroutine `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-coroutine2 `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-crc `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-date-time `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-detail `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-disjoint-sets `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-dll `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-dynamic-bitset `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-endian `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-exception `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-fiber `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-filesystem `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-flyweight `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-foreach `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-format `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-function-types `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-function `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-functional `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-fusion `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-geometry `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-gil `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-graph-parallel `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- boost-graph `1.71.0` -> `1.72.0`
    - [(#9317)](https://github.com/microsoft/vcpkg/pull/9317) [boost] Update to 1.72.0

- embree3 `3.6.1` -> `3.6.1-1`
    - [(#9555)](https://github.com/microsoft/vcpkg/pull/9555) [embree3] added cleanup command to embree3 port for static build

- libarchive `3.4.0-2` -> `3.4.1`
    - [(#9676)](https://github.com/microsoft/vcpkg/pull/9676) [libarchive] Update to 3.4.1

- tinyfiledialogs `3.3.8-1` -> `3.4.3`
    - [(#9630)](https://github.com/microsoft/vcpkg/pull/9630) [tinyfiledialogs] Fix tinyfiledialogs not being fetchable from sourceforge

- tesseract `4.1.0-4` -> `4.1.1`
    - [(#9629)](https://github.com/microsoft/vcpkg/pull/9629) [tesseract] port update to 4.1.1 release

- glm `0.9.9.5-3` -> `0.9.9.7`
    - [(#9621)](https://github.com/microsoft/vcpkg/pull/9621) [glm] Updated to 0.9.9.7

- google-cloud-cpp-spanner `0.3.0` -> `0.5.0`
    - [(#9611)](https://github.com/microsoft/vcpkg/pull/9611) [google-cloud-cpp-spanner] Upgrade to the v0.5.0 release.

- scintilla `4.1.2` -> `4.2.3`
    - [(#9591)](https://github.com/microsoft/vcpkg/pull/9591) [scintilla] Update to 4.2.3

- ppconsul `0.4` -> `0.5`
    - [(#9752)](https://github.com/microsoft/vcpkg/pull/9752) [ppconsul] Add missing boost dependencies
    - [(#9713)](https://github.com/microsoft/vcpkg/pull/9713) [ppconsul] Upgrade to latest version

- boost-signals `1.68.0` -> `1.68.0-1`
    - [(#9726)](https://github.com/microsoft/vcpkg/pull/9726) Fix osx baseline build failures

- gtest `2019-10-09` -> `2019-10-09-1`
    - [(#9726)](https://github.com/microsoft/vcpkg/pull/9726) Fix osx baseline build failures

- pcl `1.9.1-9` -> `1.9.1-10`
    - [(#9726)](https://github.com/microsoft/vcpkg/pull/9726) Fix osx baseline build failures

- soil2 `release-1.11` -> `release-1.11-1`
    - [(#9726)](https://github.com/microsoft/vcpkg/pull/9726) Fix osx baseline build failures

- tmxparser `2.1.0-2` -> `2.1.0-3`
    - [(#9726)](https://github.com/microsoft/vcpkg/pull/9726) Fix osx baseline build failures

- xerces-c `3.2.2-11` -> `3.2.2-13`
    - [(#9726)](https://github.com/microsoft/vcpkg/pull/9726) Fix osx baseline build failures
    - [(#9702)](https://github.com/microsoft/vcpkg/pull/9702) [xerces-c] fixed issue #9654

- openssl `1` -> `1.1.1d`
    - [(#9777)](https://github.com/microsoft/vcpkg/pull/9777) [openssl] Update the version

- open62541 `0.3.0-4` -> `1.0`
    - [(#9767)](https://github.com/microsoft/vcpkg/pull/9767) [open62541] Update to v1.0

- monkeys-audio `4.8.3-1` -> `5.14`
    - [(#9760)](https://github.com/microsoft/vcpkg/pull/9760) [monkeys-audio] Update to 5.14, add feature tools

- hpx `1.3.0-2` -> `1.4.0-1`
    - [(#9773)](https://github.com/microsoft/vcpkg/pull/9773) Updating HPX to V1.4

- paho-mqtt `1.3.0-1` -> `1.3.0-2`
    - [(#9753)](https://github.com/microsoft/vcpkg/pull/9753) [paho-mqtt] Fix Windows platform predefined macros

- alembic `1.7.11-6` -> `1.7.12`
    - [(#9737)](https://github.com/microsoft/vcpkg/pull/9737) Update Alembic version to 1.7.12

- libudns `0.4` -> `0.4-1`
    - [(#9703)](https://github.com/microsoft/vcpkg/pull/9703) Update portfiles to use VCPKG_BUILD_TYPE

- luajit `2.0.5-2` -> `2.0.5-3`
    - [(#9703)](https://github.com/microsoft/vcpkg/pull/9703) Update portfiles to use VCPKG_BUILD_TYPE
    - [(#9782)](https://github.com/microsoft/vcpkg/pull/9782) [luajit] Copy tool dependencies

- pfring `2019-10-17` -> `2019-10-17-1`
    - [(#9703)](https://github.com/microsoft/vcpkg/pull/9703) Update portfiles to use VCPKG_BUILD_TYPE

- tcl `8.6.10-2` -> `8.6.10-3`
    - [(#9703)](https://github.com/microsoft/vcpkg/pull/9703) Update portfiles to use VCPKG_BUILD_TYPE

- asmjit `2019-07-11` -> `2020-01-20`
    - [(#9770)](https://github.com/microsoft/vcpkg/pull/9770) [asmjit] update to current version

- so5extra `1.3.1.1` -> `1.4.0`
    - [(#9732)](https://github.com/microsoft/vcpkg/pull/9732) [sobjectizer][so5extra] updates to 5.7.0 and 1.4.0

- sobjectizer `5.6.1-1` -> `5.7.0`
    - [(#9732)](https://github.com/microsoft/vcpkg/pull/9732) [sobjectizer][so5extra] updates to 5.7.0 and 1.4.0

- string-theory `2.3` -> `3.1`
    - [(#9690)](https://github.com/microsoft/vcpkg/pull/9690) [string_theory] Update to 3.0
    - [(#9833)](https://github.com/microsoft/vcpkg/pull/9833) [string_theory] Update to 3.1

- anyrpc `2017-12-01-1` -> `2020-01-13-1`
    - [(#9682)](https://github.com/microsoft/vcpkg/pull/9682) [anyrpc] Updated to latest commit

- jasper `2.0.16-2` -> `2.0.16-3`
    - [(#9680)](https://github.com/microsoft/vcpkg/pull/9680) [jasper] freeglut is not a dependency in macOS

- cryptopp `8.2.0` -> `8.2.0-1`
    - [(#9633)](https://github.com/microsoft/vcpkg/pull/9633) [cryptopp] Fixed build error on ARM32/ARM64 Windows

- angle `2019-07-19-4` -> `2019-12-31`
    - [(#9557)](https://github.com/microsoft/vcpkg/pull/9557) [angle] Update to 2019-12-31

- pbc `0.5.14-1` -> `0.5.14-2`
    - [(#9281)](https://github.com/microsoft/vcpkg/pull/9281) [pbc] Correct non Windows build

- fizz `2019.10.28.00` -> `2020.01.20.00`
    - [(#9779)](https://github.com/microsoft/vcpkg/pull/9779) [fizz] Update to latest version

- hyperscan `5.0.1-2` -> `5.1.0-3`
    - [(#9618)](https://github.com/microsoft/vcpkg/pull/9618) [hyperscan] Update the portfile to remove debug/share file

- coroutine `1.4.3` -> `2020-01-13`
    - [(#9624)](https://github.com/microsoft/vcpkg/pull/9624) [ms-gsl] Update to v2.1.0, the ""end of 2019 snapshot""

- ms-gsl `2019-07-11` -> `2.1.0`
    - [(#9624)](https://github.com/microsoft/vcpkg/pull/9624) [ms-gsl] Update to v2.1.0, the ""end of 2019 snapshot""

- ftgl `2.4.0-1` -> `2.4.0-2`
    - [(#9521)](https://github.com/microsoft/vcpkg/pull/9521) [ftgl] Fix build failure #9520

- sdl2-mixer `2.0.4-7` -> `2.0.4-8`
    - [(#9332)](https://github.com/microsoft/vcpkg/pull/9332) [sdl2-mixer] Fix dynamic loading when building static library

- sdl2-gfx `1.0.4-4` -> `1.0.4-5`
    - [(#9314)](https://github.com/microsoft/vcpkg/pull/9314) [sdl2-gfx] Fixed build error ARM64 Windows 10

- restclient-cpp `0.5.1-2` -> `0.5.1-3`
    - [(#9487)](https://github.com/microsoft/vcpkg/pull/9487) [restclient-cpp]: correct the way to remove debug/include

- jsoncpp `1.9.1` -> `1.9.2`
    - [(#9759)](https://github.com/microsoft/vcpkg/pull/9759) [Jsoncpp] Update to 1.9.2

- loguru `v2.0.0` -> `v2.1.0`
    - [(#8682)](https://github.com/microsoft/vcpkg/pull/8682) [loguru] Update to 2.1.0 and extend to generate proper binary on non-windows

- gsl-lite `0.34.0` -> `0.36.0`
    - [(#9827)](https://github.com/microsoft/vcpkg/pull/9827) [gsl-lite] Update to version 0.36.0

- telnetpp `2.0-2` -> `2.0-3`
    - [(#9827)](https://github.com/microsoft/vcpkg/pull/9827) [gsl-lite] Update to version 0.36.0

- cgal `5.0` -> `5.0.1`
    - [(#9831)](https://github.com/microsoft/vcpkg/pull/9831) [cgal] Upgrade to 5.0.1

- avro-c `1.8.2-3` -> `1.8.2-4`
    - [(#9808)](https://github.com/microsoft/vcpkg/pull/9808) [avro-c] enable Snappy codec

- pango `1.40.11-5` -> `1.40.11-6`
    - [(#9801)](https://github.com/microsoft/vcpkg/pull/9801) [pango] fix macOS dynamic library

- eigen3 `3.3.7-3` -> `3.3.7-4`
    - [(#9821)](https://github.com/microsoft/vcpkg/pull/9821) Update eigen3's portfile to use new gitlab repo

- aws-c-common `0.4.1` -> `0.4.15`
    - [(#8832)](https://github.com/microsoft/vcpkg/pull/8832) [aws-*]Update version

- aws-c-event-stream `0.1.1` -> `0.1.4`
    - [(#8832)](https://github.com/microsoft/vcpkg/pull/8832) [aws-*]Update version

- aws-checksums `0.1.3` -> `0.1.5`
    - [(#8832)](https://github.com/microsoft/vcpkg/pull/8832) [aws-*]Update version

- aws-lambda-cpp `0.1.0-2` -> `0.2.4`
    - [(#8832)](https://github.com/microsoft/vcpkg/pull/8832) [aws-*]Update version

- aws-sdk-cpp `1.7.142-1` -> `1.7.214`
    - [(#8832)](https://github.com/microsoft/vcpkg/pull/8832) [aws-*]Update version

- azure-c-shared-utility `2019-10-07.2-1` -> `2020-01-22`
    - [(#9805)](https://github.com/microsoft/vcpkg/pull/9805) Azure-IoT-Sdk for C release 2020-01-22

- azure-iot-sdk-c `2019-11-27.1` -> `2020-01-22`
    - [(#9805)](https://github.com/microsoft/vcpkg/pull/9805) Azure-IoT-Sdk for C release 2020-01-22

- azure-macro-utils-c `2019-11-27.1` -> `2020-01-22`
    - [(#9805)](https://github.com/microsoft/vcpkg/pull/9805) Azure-IoT-Sdk for C release 2020-01-22

- azure-uamqp-c `2019-11-27.1` -> `2020-01-22`
    - [(#9805)](https://github.com/microsoft/vcpkg/pull/9805) Azure-IoT-Sdk for C release 2020-01-22

- azure-uhttp-c `2019-11-27.1` -> `2020-01-22`
    - [(#9805)](https://github.com/microsoft/vcpkg/pull/9805) Azure-IoT-Sdk for C release 2020-01-22

- azure-umqtt-c `2019-11-27.1` -> `2020-01-22`
    - [(#9805)](https://github.com/microsoft/vcpkg/pull/9805) Azure-IoT-Sdk for C release 2020-01-22

- umock-c `2019-11-27.1` -> `2020-01-22`
    - [(#9805)](https://github.com/microsoft/vcpkg/pull/9805) Azure-IoT-Sdk for C release 2020-01-22

</details>

-- vcpkg team vcpkg@microsoft.com THU, 05 Jan 15:00:00 -0800
",68312233
74,False,False,2019-12-24T00:13:24Z,2020-01-09T14:16:12Z,"vcpkg (2019.12.31)
---
#### Total port count: 1268
#### Total port count per triplet (tested):
|triplet|ports available|
|---|---|
|**x64-windows**|1181|
|x86-windows|1166|
|x64-windows-static|1087|
|**x64-linux**|1000|
|**x64-osx**|920|
|arm64-windows|795|
|x64-uwp|642|
|arm-uwp|615|

#### The following documentation has been updated:
- [PR Review Checklist](docs/maintainers/pr-review-checklist.md) ***[NEW]***
    - [(#9264)](https://github.com/microsoft/vcpkg/pull/9264) [vcpkg] Initialize PR review checklist
- [vcpkg_install_qmake](docs/maintainers/vcpkg_install_qmake.md) ***[NEW]***
    - [(#9412)](https://github.com/microsoft/vcpkg/pull/9412) [vcpkg_install_qmake] Add vcpkg_install_qmake
- [CONTROL Files](docs/maintainers/control-files.md)
    - [(#9140)](https://github.com/microsoft/vcpkg/pull/9140) [docs] Fix CONTROL file default-features section header
- [Portfile Functions](docs/maintainers/portfile-functions.md)
    - [(#9412)](https://github.com/microsoft/vcpkg/pull/9412) [vcpkg_install_qmake] Add vcpkg_install_qmake
- [vcpkg_build_nmake](docs/maintainers/vcpkg_build_nmake.md)
    - [(#9412)](https://github.com/microsoft/vcpkg/pull/9412) [vcpkg_install_qmake] Add vcpkg_install_qmake
- [vcpkg_common_definitions](docs/maintainers/vcpkg_common_definitions.md)
    - [(#9412)](https://github.com/microsoft/vcpkg/pull/9412) [vcpkg_install_qmake] Add vcpkg_install_qmake
- [vcpkg_configure_make](docs/maintainers/vcpkg_configure_make.md)
    - [(#9412)](https://github.com/microsoft/vcpkg/pull/9412) [vcpkg_install_qmake] Add vcpkg_install_qmake
- [vcpkg_download_distfile](docs/maintainers/vcpkg_download_distfile.md)
    - [(#9412)](https://github.com/microsoft/vcpkg/pull/9412) [vcpkg_install_qmake] Add vcpkg_install_qmake
- [vcpkg_extract_source_archive_ex](docs/maintainers/vcpkg_extract_source_archive_ex.md)
    - [(#9412)](https://github.com/microsoft/vcpkg/pull/9412) [vcpkg_install_qmake] Add vcpkg_install_qmake
- [vcpkg_find_acquire_program](docs/maintainers/vcpkg_find_acquire_program.md)
    - [(#9412)](https://github.com/microsoft/vcpkg/pull/9412) [vcpkg_install_qmake] Add vcpkg_install_qmake
- [vcpkg_install_nmake](docs/maintainers/vcpkg_install_nmake.md)
    - [(#9412)](https://github.com/microsoft/vcpkg/pull/9412) [vcpkg_install_qmake] Add vcpkg_install_qmake

#### The following changes have been made to vcpkg's infrastructure:
- [(#9160)](https://github.com/microsoft/vcpkg/pull/9160) [ffmpeg] Fixed build error ARM64 Windows 10
- [(#9199)](https://github.com/microsoft/vcpkg/pull/9199) [vcpkg] Add November changelog
- [(#9203)](https://github.com/microsoft/vcpkg/pull/9203) [vcpkg] Check in baseline results for CI builds
- [(#9191)](https://github.com/microsoft/vcpkg/pull/9191) [vcpkg] Give hints for yasm with brew and apt
- [(#9242)](https://github.com/microsoft/vcpkg/pull/9242) [libxslt] Fix writing to locations outside vcpkg in Windows builds
- [(#9279)](https://github.com/microsoft/vcpkg/pull/9279) Removed umock-c:64-windows-static result in baseline
- [(#9280)](https://github.com/microsoft/vcpkg/pull/9280) [vcpkg] Add pull request template
- [(#9331)](https://github.com/microsoft/vcpkg/pull/9331) Update baseline to skip ogre conflicts
- [(#9349)](https://github.com/microsoft/vcpkg/pull/9349) Update baseline with 'leptonica:arm-uwp=fail'
- [(#9277)](https://github.com/microsoft/vcpkg/pull/9277) [brynet] Update to 1.0.5
- [(#9330)](https://github.com/microsoft/vcpkg/pull/9330) [simpleini] Fix build failure on travis CI
- [(#9313)](https://github.com/microsoft/vcpkg/pull/9313) [opendnp3] Add new port
- [(#9255)](https://github.com/microsoft/vcpkg/pull/9255) [OpenEXR] add missing underscore for OpenEXR_IEXMATH_LIBRARY_DEBUG NAMES
- [(#9252)](https://github.com/microsoft/vcpkg/pull/9252) [rttr] Add dependency rapidjson
- [(#8533)](https://github.com/microsoft/vcpkg/pull/8533) Fix CMAKE_TRY_COMPILE_PLATFORM_VARIABLES
- [(#9382)](https://github.com/microsoft/vcpkg/pull/9382) [directxtk12] Update to dec2019 release
- [(#9383)](https://github.com/microsoft/vcpkg/pull/9383) [directxtex] Update to dec2019 release
- [(#9384)](https://github.com/microsoft/vcpkg/pull/9384) [directxmesh] Update to dec2019 release
- [(#9381)](https://github.com/microsoft/vcpkg/pull/9381) [directxtk] Update to dec2019 release
- [(#9287)](https://github.com/microsoft/vcpkg/pull/9287) Removed unused template function.
- [(#9411)](https://github.com/microsoft/vcpkg/pull/9411) [vcpkg-baseline] Fixes for vtk, libarchive, xalan-c, and openvpn3 on Linux
- [(#9412)](https://github.com/microsoft/vcpkg/pull/9412) [vcpkg_install_qmake] Add vcpkg_install_qmake
- [(#9388)](https://github.com/microsoft/vcpkg/pull/9388) [hiredis] Support building static
- [(#8624)](https://github.com/microsoft/vcpkg/pull/8624) [protobuf-c]Add new port.
- [(#9389)](https://github.com/microsoft/vcpkg/pull/9389) Remove vtk:x64-linux result in baseline

<details>
<summary><b>The following 8 ports have been added:</b></summary>

|port|version|
|---|---|
|[proxywrapper](https://github.com/microsoft/vcpkg/pull/8916)| 1.0.0
|[opendnp3](https://github.com/microsoft/vcpkg/pull/9313)| 2.3.2
|[function2](https://github.com/microsoft/vcpkg/pull/9246)| 4.0.0
|[protobuf-c](https://github.com/microsoft/vcpkg/pull/8624)| 1.3.2
|[indicators](https://github.com/microsoft/vcpkg/pull/9315)| 1.5
|[proxygen](https://github.com/microsoft/vcpkg/pull/8766)| 2019.10.21.00
|[azure-kinect-sensor-sdk](https://github.com/microsoft/vcpkg/pull/8786)| 1.4.0-alpha.0
|[xtensor-fftw](https://github.com/microsoft/vcpkg/pull/9159)| 2019-11-30
</details>

<details>
<summary><b>The following 72 ports have been updated:</b></summary>

- restinio `0.6.1` -> `0.6.2`
    - [(#9174)](https://github.com/microsoft/vcpkg/pull/9174) [restinio] Update to v.0.6.1.1.
    - [(#9293)](https://github.com/microsoft/vcpkg/pull/9293) [restinio] update to 0.6.2

- pixman `0.38.0-4` -> `0.38.4-1`
    - [(#9170)](https://github.com/microsoft/vcpkg/pull/9170) [pixman] Update to version 0.38.4

- cjson `1.7.12` -> `2019-11-30`
    - [(#9157)](https://github.com/microsoft/vcpkg/pull/9157) [cjson] Update to 2019-11-30

- parallel-hashmap `1.24` -> `1.27`
    - [(#9152)](https://github.com/microsoft/vcpkg/pull/9152) [parallel-hashmap] Update to 1.27

- jsoncons `0.139.0` -> `0.140.0`
    - [(#9124)](https://github.com/microsoft/vcpkg/pull/9124) [jsoncons] Update to v0.140.0

- boost-modular-build-helper `1.71.0` -> `1.71.0-1`
    - [(#9108)](https://github.com/microsoft/vcpkg/pull/9108) [boost-modular-build-helper] put quotes around the directory

- protobuf `3.10.0` -> `3.11.2`
    - [(#9131)](https://github.com/microsoft/vcpkg/pull/9131) [protobuf] Update protobuf to 3.11.0
    - [(#9271)](https://github.com/microsoft/vcpkg/pull/9271) [protobuf] Update to 3.11.2

- ecsutil `1.0.7.3` -> `1.0.7.8`
    - [(#8885)](https://github.com/microsoft/vcpkg/pull/8885) [ecsuti] Update to v1.0.7.8

- libmodman `2.0.1` -> `2.0.1-1`
    - [(#8916)](https://github.com/microsoft/vcpkg/pull/8916) [proxywrapper] Add new port

- libproxy `0.4.15` -> `0.4.15-1`
    - [(#8916)](https://github.com/microsoft/vcpkg/pull/8916) [proxywrapper] Add new port

- xalan-c `1.11-9` -> `1.11-11`
    - [(#9203)](https://github.com/microsoft/vcpkg/pull/9203) [vcpkg] Check in baseline results for CI builds
    - [(#9411)](https://github.com/microsoft/vcpkg/pull/9411) [vcpkg-baseline] Fixes for vtk, libarchive, xalan-c, and openvpn3 on Linux

- libxslt `1.1.33-5` -> `1.1.33-6`
    - [(#9242)](https://github.com/microsoft/vcpkg/pull/9242) [libxslt] Fix writing to locations outside vcpkg in Windows builds

- azure-c-shared-utility `2019-10-07.2` -> `2019-10-07.2-1`
    - [(#9117)](https://github.com/microsoft/vcpkg/pull/9117) [azure-iot-sdk-c] Update macro-utils and umock-c to differentiate master and public-preview installations

- azure-iot-sdk-c `2019-11-21.1` -> `2019-11-27.1`
    - [(#9117)](https://github.com/microsoft/vcpkg/pull/9117) [azure-iot-sdk-c] Update macro-utils and umock-c to differentiate master and public-preview installations

- azure-macro-utils-c `2019-10-07.2` -> `2019-11-27.1`
    - [(#9117)](https://github.com/microsoft/vcpkg/pull/9117) [azure-iot-sdk-c] Update macro-utils and umock-c to differentiate master and public-preview installations

- azure-uamqp-c `2019-10-07.2` -> `2019-11-27.1`
    - [(#9117)](https://github.com/microsoft/vcpkg/pull/9117) [azure-iot-sdk-c] Update macro-utils and umock-c to differentiate master and public-preview installations

- azure-uhttp-c `2019-10-07.2` -> `2019-11-27.1`
    - [(#9117)](https://github.com/microsoft/vcpkg/pull/9117) [azure-iot-sdk-c] Update macro-utils and umock-c to differentiate master and public-preview installations

- azure-umqtt-c `2019-10-07.2` -> `2019-11-27.1`
    - [(#9117)](https://github.com/microsoft/vcpkg/pull/9117) [azure-iot-sdk-c] Update macro-utils and umock-c to differentiate master and public-preview installations

- umock-c `2019-10-07.2` -> `2019-11-27.1`
    - [(#9117)](https://github.com/microsoft/vcpkg/pull/9117) [azure-iot-sdk-c] Update macro-utils and umock-c to differentiate master and public-preview installations

- python3 `3.7.4` -> `3.7.3`
    - [(#9173)](https://github.com/microsoft/vcpkg/pull/9173) [python3] Fix CONTROL Version

- brynet `1.0.3` -> `1.0.5`
    - [(#9277)](https://github.com/microsoft/vcpkg/pull/9277) [brynet] Update to 1.0.5

- cpp-httplib `0.2.5` -> `0.4.2`
    - [(#9360)](https://github.com/microsoft/vcpkg/pull/9360) [cpp-httplib] Update library to 0.4.2

- botan `2.12.1` -> `2.12.1-1`
    - [(#9335)](https://github.com/microsoft/vcpkg/pull/9335) [botan] Fix unrecognized compile flag MT/MD

- simpleini `2018-08-31-2` -> `2018-08-31-3`
    - [(#9330)](https://github.com/microsoft/vcpkg/pull/9330) [simpleini] Fix build failure on travis CI

- libpcap `1.9.0` -> `1.9.1`
    - [(#9329)](https://github.com/microsoft/vcpkg/pull/9329) [libpcap] update portfile for cmake build and bump version to 1.9.1

- live555 `latest` -> `latest-1`
    - [(#9303)](https://github.com/microsoft/vcpkg/pull/9303) [live555] Fix live555:x86-windows-static build failure

- usockets `0.3.1` -> `0.3.4`
    - [(#9278)](https://github.com/microsoft/vcpkg/pull/9278) [usockets] update to 0.3.4

- uwebsockets `0.15.7` -> `0.16.5`
    - [(#9276)](https://github.com/microsoft/vcpkg/pull/9276) [uwebsockets] update to 0.16.5

- check `0.13.0` -> `0.13.0-1`
    - [(#9267)](https://github.com/microsoft/vcpkg/pull/9267) [check] Fix library cannot be found

- tesseract `4.1.0-3` -> `4.1.0-4`
    - [(#9266)](https://github.com/microsoft/vcpkg/pull/9266) [tesseract] Fix feature name and build error

- libharu `2017-08-15-8` -> `2017-08-15-9`
    - [(#9261)](https://github.com/microsoft/vcpkg/pull/9261) [libharu] Remove symbols also exported from tiff (as a default feature)

- alembic `1.7.11-5` -> `1.7.11-6`
    - [(#9255)](https://github.com/microsoft/vcpkg/pull/9255) [OpenEXR] add missing underscore for OpenEXR_IEXMATH_LIBRARY_DEBUG NAMES

- openexr `2.3.0-4` -> `2.3.0-5`
    - [(#9255)](https://github.com/microsoft/vcpkg/pull/9255) [OpenEXR] add missing underscore for OpenEXR_IEXMATH_LIBRARY_DEBUG NAMES

- xeus `0.20.0` -> `0.20.0-1`
    - [(#9254)](https://github.com/microsoft/vcpkg/pull/9254) [xeus] Fix build error with Visual Studio 2019

- libpq `9.6.1-8` -> `9.6.3`
    - [(#9253)](https://github.com/microsoft/vcpkg/pull/9253) [libpq] Fix version mismatch between CONTROL and portfile

- rttr `0.9.6-1` -> `0.9.6-2`
    - [(#9252)](https://github.com/microsoft/vcpkg/pull/9252) [rttr] Add dependency rapidjson

- proj4 `6.2.0-1` -> `6.2.1-1`
    - [(#9227)](https://github.com/microsoft/vcpkg/pull/9227) [proj4] Update to version 6.2.1; disable exporting symbols for static libraries

- geotrans `3.7` -> `3.7-1`
    - [(#9217)](https://github.com/microsoft/vcpkg/pull/9217) [geotrans] Add macro LITTLE_ENDIAN

- mongoose `6.15-1` -> `6.15-2`
    - [(#9209)](https://github.com/microsoft/vcpkg/pull/9209) [mongoose] Add feature ssl

- ecm `5.60.0-1` -> `5.60.0-2`
    - [(#9210)](https://github.com/microsoft/vcpkg/pull/9210) [ecm] Add usage to fix printing error messages

- tbb `2019_U8-2` -> `2019_U8-3`
    - [(#9188)](https://github.com/microsoft/vcpkg/pull/9188) [tbb] Set fatal build tool requirements for UNIX

- libqglviewer `2.7.0-2` -> `2.7.2-2`
    - [(#9186)](https://github.com/microsoft/vcpkg/pull/9186) [libqglviewer] update to 2.7.2
    - [(#9412)](https://github.com/microsoft/vcpkg/pull/9412) [vcpkg_install_qmake] Add vcpkg_install_qmake

- nanodbc `2.12.4-4` -> `2.12.4-5`
    - [(#9185)](https://github.com/microsoft/vcpkg/pull/9185) [nanodbc] Set NANODBC_ENABLE_UNICODE to OFF

- libevent `2.1.11-1` -> `2.1.11-2`
    - [(#9101)](https://github.com/microsoft/vcpkg/pull/9101) [libevent] Add thread as default feature

- directxtk12 `oct2019` -> `dec2019`
    - [(#9382)](https://github.com/microsoft/vcpkg/pull/9382) [directxtk12] Update to dec2019 release

- directxtex `oct2019` -> `dec2019`
    - [(#9383)](https://github.com/microsoft/vcpkg/pull/9383) [directxtex] Update to dec2019 release

- directxmesh `aug2019` -> `dec2019`
    - [(#9384)](https://github.com/microsoft/vcpkg/pull/9384) [directxmesh] Update to dec2019 release

- directxtk `oct2019` -> `dec2019`
    - [(#9381)](https://github.com/microsoft/vcpkg/pull/9381) [directxtk] Update to dec2019 release

- nano-signal-slot `2018-08-25-1` -> `2.0.1`
    - [(#9376)](https://github.com/microsoft/vcpkg/pull/9376) [nano-signal-slot] Update to latest version

- libarchive `3.4.0-1` -> `3.4.0-2`
    - [(#9411)](https://github.com/microsoft/vcpkg/pull/9411) [vcpkg-baseline] Fixes for vtk, libarchive, xalan-c, and openvpn3 on Linux

- openvpn3 `3.4.1` -> `3.4.1-1`
    - [(#9411)](https://github.com/microsoft/vcpkg/pull/9411) [vcpkg-baseline] Fixes for vtk, libarchive, xalan-c, and openvpn3 on Linux

- ffmpeg `4.2-1` -> `4.2-2`
    - [(#9405)](https://github.com/microsoft/vcpkg/pull/9405) [ffmpeg] portfile: fix typo Relase->Release
    - [(#9090)](https://github.com/microsoft/vcpkg/pull/9090) [ffmpeg] install correct copyright file and enable (L)GPLv3 builds

- entt `3.1.1` -> `3.2.2`
    - [(#9409)](https://github.com/microsoft/vcpkg/pull/9409) [entt] Upgrade library to 3.2.2

- doctest `2.3.5` -> `2.3.6`
    - [(#9403)](https://github.com/microsoft/vcpkg/pull/9403) [doctest] Update library to 2.3.6

- qcustomplot `2.0.1-1` -> `2.0.1-3`
    - [(#9412)](https://github.com/microsoft/vcpkg/pull/9412) [vcpkg_install_qmake] Add vcpkg_install_qmake

- qscintilla `2.10-9` -> `2.10-11`
    - [(#9412)](https://github.com/microsoft/vcpkg/pull/9412) [vcpkg_install_qmake] Add vcpkg_install_qmake

- qt5-base `5.12.5-3` -> `5.12.5-7`
    - [(#9412)](https://github.com/microsoft/vcpkg/pull/9412) [vcpkg_install_qmake] Add vcpkg_install_qmake

- qwt `6.1.3-8` -> `6.1.3-10`
    - [(#9412)](https://github.com/microsoft/vcpkg/pull/9412) [vcpkg_install_qmake] Add vcpkg_install_qmake

- hiredis `2019-11-1` -> `2019-11-2`
    - [(#9388)](https://github.com/microsoft/vcpkg/pull/9388) [hiredis] Support building static

- argparse `2.0.1` -> `2.1`
    - [(#9291)](https://github.com/microsoft/vcpkg/pull/9291) [argparse] Upgrade to v2.1

- angle `2019-07-19-3` -> `2019-07-19-4`
    - [(#7923)](https://github.com/microsoft/vcpkg/pull/7923) [angle]Fix windows build error: cannot find definition far.

- libwebp `1.0.2-7` -> `1.0.2-8`
    - [(#9300)](https://github.com/microsoft/vcpkg/pull/9300) [libwebp] Fixed build error ARM64 Windows 10

- libpng `1.6.37-5` -> `1.6.37-6`
    - [(#9198)](https://github.com/microsoft/vcpkg/pull/9198) [libpng] Strong cleanup of the port

- libgit2 `0.28.3` -> `0.28.4`
    - [(#9270)](https://github.com/microsoft/vcpkg/pull/9270) [libgit2] Update to 0.28.4

- embree3 `3.5.2-3` -> `3.6.1`
    - [(#9073)](https://github.com/microsoft/vcpkg/pull/9073) [embree3] Update to version 3.6.1

- pmdk `1.7` -> `1.7-1`
    - [(#9094)](https://github.com/microsoft/vcpkg/pull/9094) [pmdk] Remove non-ascii charactor

- fftwpp `2.05` -> `2019-12-19`
    - [(#9169)](https://github.com/microsoft/vcpkg/pull/9169) [fftwpp] Update to latest commit

- freerdp `2.0.0-rc4-2` -> `2.0.0-rc4-3`
    - [(#9176)](https://github.com/microsoft/vcpkg/pull/9176) [freerdp] Fix linux build, add dependency port glib

- abseil `2019-05-08-1` -> `2019-12-19`
    - [(#9367)](https://github.com/microsoft/vcpkg/pull/9367) [abseil] Update to the latest and fix link failure error using StrCat

- sdl2-gfx `1.0.4-2` -> `1.0.4-4`
    - [(#9319)](https://github.com/microsoft/vcpkg/pull/9319) [sdl2-gfx] Update CMake build and find_package support

- io2d `2019-07-11-1` -> `2019-07-11-2`
    - [(#8935)](https://github.com/microsoft/vcpkg/pull/8935) [io2d] Fix link to target ""Cairo::Cairo"" error

- vtk `8.2.0-9` -> `8.2.0-10`
    - [(#9389)](https://github.com/microsoft/vcpkg/pull/9389) Remove vtk:x64-linux result in baseline

</details>

-- vcpkg team vcpkg@microsoft.com TUE, 09 Jan 05:45:00 -0800",68312233
75,False,False,2019-11-27T00:54:48Z,2019-12-03T22:53:23Z,"vcpkg (2019.11.30)
---
#### Total port count: 1262
#### Total port count per triplet (tested):
|triplet|ports available|
|---|---|
|**x64-windows**|1182|
|x86-windows|1163|
|x64-windows-static|1094|
|**x64-linux**|1021|
|**x64-osx**|984|
|arm64-windows|782|
|x64-uwp|646|
|arm-uwp|614|

#### The following commands and options have been updated:
- `export`
    - `--x-chocolatey` ***[NEW OPTION]*** : Experimental option to export a port as a `chocolatey` package
        - [(#6891)](https://github.com/microsoft/vcpkg/pull/6891) [feature] add `vcpkg export --x-chocolatey` support

#### The following documentation has been updated:
- [vcpkg_from_github](docs/maintainers/vcpkg_from_github.md)
    - [(#5719)](https://github.com/microsoft/vcpkg/pull/5719) [vcpkg_from_github] Allow targeting Github Enterprise instances
- [Privacy and Vcpkg](docs/about/privacy.md)
    - [(#9080)](https://github.com/microsoft/vcpkg/pull/9080) [vcpkg] update telemetry

#### The following additional changes have been made to vcpkg's infrastructure:
- [(#8853)](https://github.com/microsoft/vcpkg/pull/8853) Add October changelog
- [(#8894)](https://github.com/microsoft/vcpkg/pull/8894) Update README.md
- [(#8976)](https://github.com/microsoft/vcpkg/pull/8976) [libusb] upgrade and support arm64-windows
- [(#8924)](https://github.com/microsoft/vcpkg/pull/8924) [vcpkg] Remove libc++fs link dependency for clang/libc++ 9.*
- [(#7598)](https://github.com/microsoft/vcpkg/pull/7598) [vcpkg] QoL: add host specific path separator to common definitions
- [(#8941)](https://github.com/microsoft/vcpkg/pull/8941) [docs] Add the gcc+=7 prerequisite to the README
- [(#5719)](https://github.com/microsoft/vcpkg/pull/5719) [vcpkg_from_github] Allow targeting Github Enterprise instances
- [(#9080)](https://github.com/microsoft/vcpkg/pull/9080) [vcpkg] update telemetry

<details>
<summary><b>The following 12 ports have been added:</b></summary>

|port|version|
|---|---|
|[ogre-next](https://github.com/microsoft/vcpkg/pull/8677)| 2019-10-20
|[hiredis](https://github.com/microsoft/vcpkg/pull/8843)<sup>[#8862](https://github.com/microsoft/vcpkg/pull/8862) </sup>| 2019-11-1
|[cspice](https://github.com/microsoft/vcpkg/pull/8859)| 66-1
|[ecos](https://github.com/microsoft/vcpkg/pull/9019)| 2.0.7
|[redis-plus-plus](https://github.com/microsoft/vcpkg/pull/8846)| 1.1.1
|[nanoflann](https://github.com/microsoft/vcpkg/pull/8962)| 1.3.1
|[wxchartdir](https://github.com/microsoft/vcpkg/pull/7914)| 1.0.0
|[faad2](https://github.com/microsoft/vcpkg/pull/9003)| 2.9.1-1
|[pfring](https://github.com/microsoft/vcpkg/pull/8648)| 2019-10-17
|[libmodman](https://github.com/microsoft/vcpkg/pull/8931)| 2.0.1
|[libproxy](https://github.com/microsoft/vcpkg/pull/8931)| 0.4.15
|[google-cloud-cpp-spanner](https://github.com/microsoft/vcpkg/pull/9096)| 0.3.0
</details>

<details>
<summary><b>The following 67 ports have been updated:</b></summary>

- tbb `2019_U8-1` -> `2019_U8-2`
    - [(#8744)](https://github.com/microsoft/vcpkg/pull/8744) tbb: Fix compilation on OSX

- openvpn3 `2018-03-21-1` -> `3.4.1`
    - [(#8851)](https://github.com/microsoft/vcpkg/pull/8851) openvpn3: bump version

- sqlpp11 `0.58-2` -> `0.58-3`
    - [(#8837)](https://github.com/microsoft/vcpkg/pull/8837) [sqlpp11] fixed ddl2cpp path

- jsonnet `0.13.0` -> `0.14.0`
    - [(#8848)](https://github.com/microsoft/vcpkg/pull/8848) [jsonnet]Upgrade to 0.14.0.

- pango `1.40.11-4` -> `1.40.11-5`
    - [(#8745)](https://github.com/microsoft/vcpkg/pull/8745) [pango] Add missing link library

- opencv3 `3.4.7-2` -> `3.4.8`
    - [(#8623)](https://github.com/microsoft/vcpkg/pull/8623) [opencv3] Upgrade to version 3.4.8
    - [(#8911)](https://github.com/microsoft/vcpkg/pull/8911) Revert ""[opencv3] Upgrade to version 3.4.8""

- boost-modular-build-helper `1.70.0-2` -> `1.71.0`
    - [(#8606)](https://github.com/microsoft/vcpkg/pull/8606) [boost-modular-build-helper] Update to 1.71.

- libxslt `1.1.33-4` -> `1.1.33-5`
    - [(#9014)](https://github.com/microsoft/vcpkg/pull/9014) Prevent python3 build failure

- python3 `3.7.3` -> `3.7.4`
    - [(#9014)](https://github.com/microsoft/vcpkg/pull/9014) Prevent python3 build failure

- orc `1.5.6-1` -> `1.5.7`
    - [(#8980)](https://github.com/microsoft/vcpkg/pull/8980) [orc]Upgrade to 1.5.7, disable tzdata test.

- openvdb `6.1.0` -> `6.2.1`
    - [(#8979)](https://github.com/microsoft/vcpkg/pull/8979) [openvdb]Upgrade to 6.2.1

- libusb `1.0.22-4` -> `1.0.23`
    - [(#8976)](https://github.com/microsoft/vcpkg/pull/8976) [libusb] upgrade and support arm64-windows

- libmad `0.15.1-4` -> `0.15.1-5`
    - [(#8959)](https://github.com/microsoft/vcpkg/pull/8959) [libmad] Fix libmad header for non-x86 MSVC targets

- wil `2019-07-16` -> `2019-11-07`
    - [(#8948)](https://github.com/microsoft/vcpkg/pull/8948) Update WIL port

- botan `2.11.0` -> `2.12.1`
    - [(#8844)](https://github.com/microsoft/vcpkg/pull/8844) [botan]Upgrade to 2.12.1

- libbson `1.14.0-3` -> `1.15.1-1`
    - [(#8790)](https://github.com/microsoft/vcpkg/pull/8790) [libbson][mongo-c-driver] Update to 1.15.1. Parse CONTROL file for version number

- mongo-c-driver `1.14.0-5` -> `1.15.1-1`
    - [(#8790)](https://github.com/microsoft/vcpkg/pull/8790) [libbson][mongo-c-driver] Update to 1.15.1. Parse CONTROL file for version number

- libpopt `1.16-11` -> `1.16-12`
    - [(#8652)](https://github.com/microsoft/vcpkg/pull/8652) [libpopt]Fix linux build.

- libpng `1.6.37-4` -> `1.6.37-5`
    - [(#8622)](https://github.com/microsoft/vcpkg/pull/8622) [lipng/libpng-apng]Remove port libpng-apng and add apng as a feature with libpng.
    - [(#8716)](https://github.com/microsoft/vcpkg/pull/8716) [libpng] Fix CMake targets

- evpp `0.7.0-1` -> `0.7.0-2`
    - [(#8349)](https://github.com/microsoft/vcpkg/pull/8349) [libevent] add features

- libevent `2.1.11` -> `2.1.11-1`
    - [(#8349)](https://github.com/microsoft/vcpkg/pull/8349) [libevent] add features

- restinio `0.6.0.1` -> `0.6.1`
    - [(#8993)](https://github.com/microsoft/vcpkg/pull/8993) [restinio] Update to v.0.6.1

- google-cloud-cpp-common `0.15.0` -> `0.16.0-1`
    - [(#8986)](https://github.com/microsoft/vcpkg/pull/8986) [google-cloud-cpp*] Update to 0.16.0
    - [(#9097)](https://github.com/microsoft/vcpkg/pull/9097) [google-cloud-cpp-common] Add test feature

- google-cloud-cpp `0.14.0-1` -> `0.15.0`
    - [(#8986)](https://github.com/microsoft/vcpkg/pull/8986) [google-cloud-cpp*] Update to 0.16.0

- freetype-gl `2019-03-29-2` -> `2019-03-29-3`
    - [(#8992)](https://github.com/microsoft/vcpkg/pull/8992) [freetype-gl] Fix POST_BUILD_CHECKS_FAILED failure on Unix

- tinyobjloader `1.0.7-1` -> `2.0.0-rc2`
    - [(#8955)](https://github.com/microsoft/vcpkg/pull/8955) [tinyobjloader] Update to 2.0.0-rc2; Add feature to enable double precision

- libzip `rel-1-5-2` -> `rel-1-5-2--1`
    - [(#8918)](https://github.com/microsoft/vcpkg/pull/8918) [libzip] Fix patch not applying

- tgui `0.8.5` -> `0.8.6`
    - [(#8877)](https://github.com/microsoft/vcpkg/pull/8877) [tgui]Update to 0.8.6

- jsoncons `0.136.1` -> `0.139.0`
    - [(#9058)](https://github.com/microsoft/vcpkg/pull/9058) [jsoncons] Update to v0.139.0

- azure-iot-sdk-c `2019-10-11.2` -> `2019-11-21.1`
    - [(#9059)](https://github.com/microsoft/vcpkg/pull/9059) [azure-iot-sdk-c] Update public-preview feature to branch with fixed telemetry

- tiff `4.0.10-7` -> `4.0.10-8`
    - [(#9010)](https://github.com/microsoft/vcpkg/pull/9010) [tiff] Make BUILD_TOOLS option a feature

- magic-enum `0.6.3` -> `0.6.3-1`
    - [(#9007)](https://github.com/microsoft/vcpkg/pull/9007) [magic-enum] Fix export config.cmake issue

- libflac `1.3.2-6` -> `1.3.3`
    - [(#8988)](https://github.com/microsoft/vcpkg/pull/8988) [libflac] Update libflac to 1.3.3

- otl `4.0.447` -> `4.0.448`
    - [(#8937)](https://github.com/microsoft/vcpkg/pull/8937) [otl] Upgrade to version 4.0.448

- librtmp `2.4-2` -> `2019-11-11`
    - [(#8958)](https://github.com/microsoft/vcpkg/pull/8958) use latest librtmp

- stlab `1.4.1-1` -> `1.5.1`
    - [(#8901)](https://github.com/microsoft/vcpkg/pull/8901) [stlab] Update to 1.5.1

- bitsery `5.0.0` -> `5.0.1-1`
    - [(#8892)](https://github.com/microsoft/vcpkg/pull/8892) [bitsery] Update to 5.0.1

- cereal `1.2.2-2` -> `1.3.0`
    - [(#8913)](https://github.com/microsoft/vcpkg/pull/8913) [cereal] Update to 1.3.0

- fizz `2019.07.08.00` -> `2019.10.28.00`
    - [(#8765)](https://github.com/microsoft/vcpkg/pull/8765) [folly/fizz]Upgrade version.

- folly `2019.06.17.00` -> `2019.10.21.00`
    - [(#8765)](https://github.com/microsoft/vcpkg/pull/8765) [folly/fizz]Upgrade version.

- qt5-base `5.12.5-1` -> `5.12.5-3`
    - [(#8793)](https://github.com/microsoft/vcpkg/pull/8793) [qt5] Modify qtdeploy to include qtquickshapes
    - [(#8932)](https://github.com/microsoft/vcpkg/pull/8932) [qt5-base] Add option to link to OpenSSL at compile-time

- nlohmann-json `3.7.0` -> `3.7.3`
    - [(#9069)](https://github.com/microsoft/vcpkg/pull/9069) [nlohmann-json] Upgrade to 3.7.3

- json-dto `0.2.8-2` -> `0.2.9.2`
    - [(#9057)](https://github.com/microsoft/vcpkg/pull/9057) [json-dto] Update to v0.2.9; Switch repo; Fix license installation
    - [(#9083)](https://github.com/microsoft/vcpkg/pull/9083) [json_dto] Update to v.0.2.9.2

- prometheus-cpp `0.7.0` -> `0.8.0`
    - [(#9047)](https://github.com/microsoft/vcpkg/pull/9047) [prometheus-cpp] Update to version 0.8.0

- date `2019-09-09` -> `2019-11-08`
    - [(#9006)](https://github.com/microsoft/vcpkg/pull/9006) [date] Update to 2019-11-08

- netcdf-cxx4 `4.3.0-5` -> `4.3.1`
    - [(#8978)](https://github.com/microsoft/vcpkg/pull/8978) [netcdf-cxx4] Update to 4.3.1

- libsodium `1.0.18-1` -> `1.0.18-2`
    - [(#8974)](https://github.com/microsoft/vcpkg/pull/8974) [libsodium] Fix CPU feature not properly detected on Linux

- cgal `4.14-3` -> `5.0`
    - [(#8659)](https://github.com/microsoft/vcpkg/pull/8659) [cgal][openmvs] CGAL: Upgrade to 5.0

- openmvs `1.0-2` -> `1.0-3`
    - [(#8659)](https://github.com/microsoft/vcpkg/pull/8659) [cgal][openmvs] CGAL: Upgrade to 5.0

- ace `6.5.6` -> `6.5.7`
    - [(#9074)](https://github.com/microsoft/vcpkg/pull/9074) [ace] Upgrade to 6.5.7

- libmspack `0.10.1-2` -> `0.10.1-3`
    - [(#8966)](https://github.com/microsoft/vcpkg/pull/8966) [libmspack] Fix several missing imports

- mdnsresponder `765.30.11-1` -> `765.30.11-2`
    - [(#8953)](https://github.com/microsoft/vcpkg/pull/8953) [mdnsresponder] Fix build with dynamic CRT

- detours `4.0.1` -> `4.0.1-1`
    - [(#8854)](https://github.com/microsoft/vcpkg/pull/8854) [detours] Update for vcpkg_build_nmake

- curlpp `2018-06-15-1` -> `2018-06-15-2`
    - [(#9065)](https://github.com/microsoft/vcpkg/pull/9065) [curlpp] Restore installing vcpkg-cmake-wrapper script

- portaudio `2019-09-30` -> `2019-11-5`
    - [(#8944)](https://github.com/microsoft/vcpkg/pull/8944) [portaudio] Fix library cannot be found

- wt `4.0.5-1` -> `4.1.1`
    - [(#8903)](https://github.com/microsoft/vcpkg/pull/8903) [wt] Update to 4.1.1

- z3 `4.8.5-1` -> `4.8.6`
    - [(#8899)](https://github.com/microsoft/vcpkg/pull/8899) [z3] Update to 4.8.6

- pdcurses `3.8-1` -> `3.8-2`
    - [(#9042)](https://github.com/microsoft/vcpkg/pull/9042) [pdcurses] Fix linkage error

- angle `2019-07-19-2` -> `2019-07-19-3`
    - [(#8785)](https://github.com/microsoft/vcpkg/pull/8785) [angle] Add option /bigobj to compiler

- argparse `1.9` -> `2.0.1`
    - [(#9088)](https://github.com/microsoft/vcpkg/pull/9088) [argparse] Update library to 2.0.1

- catch2 `2.10.1-1` -> `2.11.0`
    - [(#9089)](https://github.com/microsoft/vcpkg/pull/9089) [catch2] Update library to 2.11.0

- magnum-plugins `2019.10` -> `2019.10-1`
    - [(#8939)](https://github.com/microsoft/vcpkg/pull/8939)  [magnum-plugins] Fix basisimporter/basisimageconverter features

- spdlog `1.3.1-2` -> `1.4.2`
    - [(#8779)](https://github.com/microsoft/vcpkg/pull/8779) [spdlog]Update  to 1.4.2

- assimp `5.0.0-1` -> `5.0.0-2`
    - [(#9075)](https://github.com/microsoft/vcpkg/pull/9075) [minizip, assimp] Export minizip CMake targets; Add minizip as assimp dependency

- minizip `1.2.11-5` -> `1.2.11-6`
    - [(#9075)](https://github.com/microsoft/vcpkg/pull/9075) [minizip, assimp] Export minizip CMake targets; Add minizip as assimp dependency

- ixwebsocket `6.1.0` -> `7.4.0`
    - [(#9099)](https://github.com/microsoft/vcpkg/pull/9099) [ixwebsocket] Update to 7.4.0

- ppconsul `0.3-1` -> `0.4`
    - [(#9104)](https://github.com/microsoft/vcpkg/pull/9104) [ppconsul] Update to 0.4

</details>

-- vcpkg team vcpkg@microsoft.com TUE, 03 Dec 14:30:00 -0800",68312233
76,False,False,2019-10-31T21:12:32Z,2019-11-01T16:35:21Z,"vcpkg (2019.10.31)
---
#### Total port count: 1250
#### Total port count per triplet (tested):
|triplet|ports available|
|---|---|
|**x64-windows**|1169|
|x86-windows|1154|
|x64-windows-static|1080|
|**x64-linux**|1014|
|**x64-osx**|976|
|arm64-windows|774|
|x64-uwp|638|
|arm-uwp|608|

#### The following commands and options have been updated:
- `create`
    - Port template updated with best practices, new CMake variables, `CONTROL` homepage field and example feature entries, links to relevant documentation, and maintainer function usage examples
        - [(#8427)](https://github.com/microsoft/vcpkg/pull/8427) Update vcpkg create template
        - [(#8488)](https://github.com/microsoft/vcpkg/pull/8488) update templates.

#### The following documentation has been updated:
- [vcpkg_fixup_cmake_targets](docs/maintainers/cmake_fixup_cmake_targets.md) ***[NEW]***
    - [(#8365)](https://github.com/microsoft/vcpkg/pull/8365) [Documentation] Added documentation page for vcpkg_fixup_cmake_targets.cmake
    - [(#8424)](https://github.com/microsoft/vcpkg/pull/8424) [Documentation] Update and rename cmake_fixup_cmake_targets.md to vcpkg_fixup_cmake_t…
- [vcpkg_build_make](docs/maintainers/vcpkg_build_make.md) ***[NEW]***
    - [(#8267)](https://github.com/microsoft/vcpkg/pull/8267) Add function vcpkg_configure_make/vcpkg_build_make/vcpkg_install_make/vcpkg_build_nmake/vcpkg_install_nmake
- [vcpkg_build_nmake](docs/maintainers/vcpkg_build_nmake.md) ***[NEW]***
    - [(#8267)](https://github.com/microsoft/vcpkg/pull/8267) Add function vcpkg_configure_make/vcpkg_build_make/vcpkg_install_make/vcpkg_build_nmake/vcpkg_install_nmake
    - [(#8589)](https://github.com/microsoft/vcpkg/pull/8589) [libxslt]Using vcpkg_install_nmake in Windows, support unix.
- [vcpkg_configure_make](docs/maintainers/vcpkg_configure_make.md) ***[NEW]***
    - [(#8267)](https://github.com/microsoft/vcpkg/pull/8267) Add function vcpkg_configure_make/vcpkg_build_make/vcpkg_install_make/vcpkg_build_nmake/vcpkg_install_nmake
    - [(#8647)](https://github.com/microsoft/vcpkg/pull/8647) support SKIP_CONFIGURE in vcpkg_configure_make.
- [vcpkg_install_make](docs/maintainers/vcpkg_install_make.md) ***[NEW]***
    - [(#8267)](https://github.com/microsoft/vcpkg/pull/8267) Add function vcpkg_configure_make/vcpkg_build_make/vcpkg_install_make/vcpkg_build_nmake/vcpkg_install_nmake
- [vcpkg_install_nmake](docs/maintainers/vcpkg_install_nmake.md) ***[NEW]***
    - [(#8267)](https://github.com/microsoft/vcpkg/pull/8267) Add function vcpkg_configure_make/vcpkg_build_make/vcpkg_install_make/vcpkg_build_nmake/vcpkg_install_nmake
    - [(#8589)](https://github.com/microsoft/vcpkg/pull/8589) [libxslt]Using vcpkg_install_nmake in Windows, support unix.
- [Chinese README](README_zh_CN.md) ***[NEW]***
    - [(#8476)](https://github.com/microsoft/vcpkg/pull/8476) Add Chinese readme.
- [Portfile Helper Functions](docs/maintainers/portfile-functions.md)
    - [(#8267)](https://github.com/microsoft/vcpkg/pull/8267) Add function vcpkg_configure_make/vcpkg_build_make/vcpkg_install_make/vcpkg_build_nmake/vcpkg_install_nmake
- [Maintainer Guidelines and Policies](docs/maintainers/maintainer-guide.md)
    - [(#8720)](https://github.com/microsoft/vcpkg/pull/8720) maintainer-guide.md - Fix link

#### The following *remarkable* changes have been made to vcpkg's infrastructure:
- New maintainer `portfile.cmake` helper functions for finer control over configuring/building/installing with `make` and `nmake`
    - [(#8267)](https://github.com/microsoft/vcpkg/pull/8267) Add function vcpkg_configure_make/vcpkg_build_make/vcpkg_install_make/vcpkg_build_nmake/vcpkg_install_nmake
    - [(#8540)](https://github.com/microsoft/vcpkg/pull/8540) Fix separate make and install execution error issue.
    - [(#8589)](https://github.com/microsoft/vcpkg/pull/8589) [libxslt]Using vcpkg_install_nmake in Windows, support unix.
    - [(#8610)](https://github.com/microsoft/vcpkg/pull/8610) Add AUTOCONF support with vcpkg_configure_make in Windows.
    - [(#8647)](https://github.com/microsoft/vcpkg/pull/8647) support SKIP_CONFIGURE in vcpkg_configure_make.
- Support for the `go` compiler in `vcpkg_find_acquire_program`
    - [(#8440)](https://github.com/microsoft/vcpkg/pull/8440) Add go to vcpkg_find_acquire_program

#### The following *additional* changes have been made to vcpkg's infrastructure:
- [(#8365)](https://github.com/microsoft/vcpkg/pull/8365) [Documentation] Added documentation page for vcpkg_fixup_cmake_targets.cmake
- [(#8418)](https://github.com/microsoft/vcpkg/pull/8418) Add September changelog
- [(#8435)](https://github.com/microsoft/vcpkg/pull/8435) Find default for text/plain on Linux and Windows (#567)
- [(#8489)](https://github.com/microsoft/vcpkg/pull/8489) Fix option -j
- [(#8580)](https://github.com/microsoft/vcpkg/pull/8580) Fix CMake checks for Apple Clang 11.0 on macOS 10.15
- [(#8638)](https://github.com/microsoft/vcpkg/pull/8638) Fix compile error in Visual Studio 2017 15.1
- [(#8669)](https://github.com/microsoft/vcpkg/pull/8669) [vcpkg_download_distfile.cmake] Fix Examples
- [(#8667)](https://github.com/microsoft/vcpkg/pull/8667) vcpkg_configure_meson - Remove compiler flag /Oi
- [(#8639)](https://github.com/microsoft/vcpkg/pull/8639) mesonbuild - Update to 0.52.0

<details>
<summary><b>The following 24 ports have been added:</b></summary>

|port|version|
|---|---|
|[cpp-base64](https://github.com/microsoft/vcpkg/pull/8368)| 2019-06-19
|[mgnlibs](https://github.com/microsoft/vcpkg/pull/8390)| 2019-09-29
|[mmx](https://github.com/microsoft/vcpkg/pull/8384)| 2019-09-29
|[kcp](https://github.com/microsoft/vcpkg/pull/8278)| 2019-09-20
|[dbow3](https://github.com/microsoft/vcpkg/pull/8547)| 1.0.0
|[nlohmann-fifo-map](https://github.com/microsoft/vcpkg/pull/8458)| 2018.05.07
|[libcrafter](https://github.com/microsoft/vcpkg/pull/8568)| 0.3
|[libudns](https://github.com/microsoft/vcpkg/pull/8572)| 0.4
|[ffnvcodec](https://github.com/microsoft/vcpkg/pull/8559)| 9.1.23.0
|[bfgroup-lyra](https://github.com/microsoft/vcpkg/pull/8612)| 1.1
|[google-cloud-cpp-common](https://github.com/microsoft/vcpkg/pull/8735)| 0.15.0
|[libsrt](https://github.com/microsoft/vcpkg/pull/8712)| 1.3.4
|[polyhook2](https://github.com/microsoft/vcpkg/pull/8719)| 2019-10-24
|[tool-meson](https://github.com/microsoft/vcpkg/pull/8639)| 0.52.0
|[slikenet](https://github.com/microsoft/vcpkg/pull/8693)| 2019-10-22
|[libigl](https://github.com/microsoft/vcpkg/pull/8607)| 2.1.0-1
|[libmesh](https://github.com/microsoft/vcpkg/pull/8592)| 1.5.0
|[upb](https://github.com/microsoft/vcpkg/pull/8681)| 2019-10-21
|[opencensus-cpp](https://github.com/microsoft/vcpkg/pull/8740)| 0.4.0
|[openscap](https://github.com/microsoft/vcpkg/pull/8654)| 1.3.1
|[fftwpp](https://github.com/microsoft/vcpkg/pull/8625)| 2.05
|[ois](https://github.com/microsoft/vcpkg/pull/8507)| 1.5
|[libdivide](https://github.com/microsoft/vcpkg/pull/8320)| 3.0
|[wordnet](https://github.com/microsoft/vcpkg/pull/8816)| 3.0
</details>

<details>
<summary><b>The following 151 ports have been updated:</b></summary>

- kangaru `4.2.0` -> `4.2.1`
    - [(#8414)](https://github.com/microsoft/vcpkg/pull/8414) [kangaru] Update library to 4.2.1

- magic-enum `0.6.0` -> `0.6.3`
    - [(#8431)](https://github.com/microsoft/vcpkg/pull/8431) [magic_enum] Update to 0.6.1. Add HEAD_REF
    - [(#8500)](https://github.com/microsoft/vcpkg/pull/8500) [magic-enum] Update to 0.6.2
    - [(#8656)](https://github.com/microsoft/vcpkg/pull/8656) [magic-enum] Update to 0.6.3

- json5-parser `1.0.0` -> `1.0.0-1`
    - [(#8401)](https://github.com/microsoft/vcpkg/pull/8401) [json5-parser] fix find_package issue

- reproc `8.0.1` -> `9.0.0`
    - [(#8411)](https://github.com/microsoft/vcpkg/pull/8411) Update reproc to 9.0.0.

- libfabric `1.8.0` -> `1.8.1`
    - [(#8415)](https://github.com/microsoft/vcpkg/pull/8415) [libfabric] Update library to 1.8.1

- thrift `2019-05-07-3` -> `2019-05-07-4`
    - [(#8410)](https://github.com/microsoft/vcpkg/pull/8410) [thrift]fix-paths

- grpc `1.23.0` -> `1.23.1-1`
    - [(#8438)](https://github.com/microsoft/vcpkg/pull/8438) [grpc] Update grpc to 1.23.1
    - [(#8737)](https://github.com/microsoft/vcpkg/pull/8737) [grpc]Fix build failure in Linux: duplicate function gettid.

- protobuf `3.9.1` -> `3.10.0`
    - [(#8439)](https://github.com/microsoft/vcpkg/pull/8439) [protobuf] Update protobuf to 3.10.0

- google-cloud-cpp `0.13.0` -> `0.14.0`
    - [(#8441)](https://github.com/microsoft/vcpkg/pull/8441) [google-cloud-cpp] Update to v0.14.0

- nrf-ble-driver `4.1.1` -> `4.1.1-1`
    - [(#8437)](https://github.com/microsoft/vcpkg/pull/8437) [nrf-ble-driver] Fix version number

- plplot `5.13.0-2` -> `5.13.0-3`
    - [(#8405)](https://github.com/microsoft/vcpkg/pull/8405) fix find_package(wxWidgets) issue in release build

- freexl `1.0.4-2` -> `1.0.4-8`
    - [(#8267)](https://github.com/microsoft/vcpkg/pull/8267) Add function vcpkg_configure_make/vcpkg_build_make/vcpkg_install_make/vcpkg_build_nmake/vcpkg_install_nmake
    - [(#8489)](https://github.com/microsoft/vcpkg/pull/8489) Fix option -j
    - [(#8540)](https://github.com/microsoft/vcpkg/pull/8540) Fix separate make and install execution error issue.

- libosip2 `5.1.0` -> `5.1.0-1`
    - [(#8267)](https://github.com/microsoft/vcpkg/pull/8267) Add function vcpkg_configure_make/vcpkg_build_make/vcpkg_install_make/vcpkg_build_nmake/vcpkg_install_nmake

- x264 `157-303c484ec828ed0-2` -> `157-303c484ec828ed0-6`
    - [(#8267)](https://github.com/microsoft/vcpkg/pull/8267) Add function vcpkg_configure_make/vcpkg_build_make/vcpkg_install_make/vcpkg_build_nmake/vcpkg_install_nmake
    - [(#8489)](https://github.com/microsoft/vcpkg/pull/8489) Fix option -j
    - [(#8540)](https://github.com/microsoft/vcpkg/pull/8540) Fix separate make and install execution error issue.

- qt5-tools `5.12.5-1` -> `5.12.5-2`
    - [(#8373)](https://github.com/microsoft/vcpkg/pull/8373) [qt5-tools] change control file so activeqt isn't a dependency on non windows

- metis `5.1.0-5` -> `5.1.0-6`
    - [(#8376)](https://github.com/microsoft/vcpkg/pull/8376) [metis][suitesparse] add metisConfig.cmake

- suitesparse `5.4.0-3` -> `5.4.0-4`
    - [(#8376)](https://github.com/microsoft/vcpkg/pull/8376) [metis][suitesparse] add metisConfig.cmake

- activemq-cpp `3.9.5` -> `3.9.5-1`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply

- alac-decoder `0.2-1` -> `0.2-3`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply

- angelscript `2.33.1-1` -> `2.34.0`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply
    - [(#8520)](https://github.com/microsoft/vcpkg/pull/8520) [angelscript] Upgrade to version 2.34.0

- anyrpc `2017-12-01` -> `2017-12-01-1`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply

- apr-util `1.6.0-3` -> `1.6.0-5`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply

- apr `1.6.5-2` -> `1.6.5-3`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply

- argtable2 `2.13-2` -> `2.13-4`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply

- atk `2.24.0-4` -> `2.24.0-5`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply

- atkmm `2.24.2-1` -> `2.24.2-2`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply

- aubio `0.4.9` -> `0.4.9-1`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply

- azure-c-shared-utility `2019-08-20.1` -> `2019-10-07.2`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply
    - [(#8513)](https://github.com/microsoft/vcpkg/pull/8513) [azure] Update azure-iot-sdk-c for release of 2019-10-07
    - [(#8686)](https://github.com/microsoft/vcpkg/pull/8686) [azure] Update azure-iot-sdk-c for 07/2019 LTS refresh
    - [(#8731)](https://github.com/microsoft/vcpkg/pull/8731) Revert ""[azure] Update azure-iot-sdk-c for 07/2019 LTS refresh (#8686)""

- berkeleydb `4.8.30-2` -> `4.8.30-3`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply

- bigint `2010.04.30-3` -> `2010.04.30-4`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply

- blaze `3.6` -> `3.6-1`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply

- bond `8.1.0-2` -> `8.1.0-3`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply

- boost-di `1.1.0` -> `1.1.0-1`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply

- butteraugli `2019-05-08` -> `2019-05-08-1`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply

- cairomm `1.15.3-3` -> `1.15.3-4`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply

- cartographer `1.0.0-1` -> `1.0.0-2`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply

- ccd `2.1-1` -> `2.1-3`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply

- ccfits `2.5-3` -> `2.5-4`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply

- cfitsio `3.410-2` -> `3.410-3`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply

- charls `2.0.0-2` -> `2.0.0-3`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply

- chmlib `0.40-3` -> `0.40-4`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply

- clblas `2.12-2` -> `2.12-3`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply

- clblast `1.5.0` -> `1.5.0-1`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply

- clfft `2.12.2-1` -> `2.12.2-2`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply

- collada-dom `2.5.0-2` -> `2.5.0-3`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply

- console-bridge `0.4.3-1` -> `0.4.3-2`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply

- cppkafka `0.3.1-1` -> `0.3.1-2`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply

- cppunit `1.14.0` -> `1.14.0-1`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply

- cunit `2.1.3-2` -> `2.1.3-3`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply

- dlfcn-win32 `1.1.1-3` -> `1.1.1-4`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply

- dmlc `2019-08-12` -> `2019-08-12-1`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply

- duktape `2.4.0-4` -> `2.4.0-6`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply
    - [(#8767)](https://github.com/microsoft/vcpkg/pull/8767) [duktape] fix pip and pyyaml install issue

- entityx `1.3.0-1` -> `1.3.0-2`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply

- epsilon `0.9.2` -> `0.9.2-1`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply

- fcl `0.5.0-6` -> `0.5.0-7`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply

- flint `2.5.2-3` -> `2.5.2-4`
    - [(#8087)](https://github.com/microsoft/vcpkg/pull/8087) [vcpkg] fatal_error when patch fails to apply

- nameof `2019-07-13` -> `0.9.2`
    - [(#8464)](https://github.com/microsoft/vcpkg/pull/8464) [nameof] Update to 0.9.1
    - [(#8671)](https://github.com/microsoft/vcpkg/pull/8671) [nameof] Update to 0.9.2

- gsl-lite `0.28.0` -> `0.34.0`
    - [(#8465)](https://github.com/microsoft/vcpkg/pull/8465) [gsl-lite] Update to v0.34.0

- libffi `3.1-5` -> `3.1-6`
    - [(#8162)](https://github.com/microsoft/vcpkg/pull/8162) [libffi] Add support for CMake config

- mathgl `2.4.3-2` -> `2.4.3-3`
    - [(#8369)](https://github.com/microsoft/vcpkg/pull/8369) [mathgl]Fix feature glut/hdf5/qt5.

- yoga `1.14.0` -> `1.16.0-1`
    - [(#8495)](https://github.com/microsoft/vcpkg/pull/8495) [yoga] Add project declaration and fix linux installation.
    - [(#8630)](https://github.com/microsoft/vcpkg/pull/8630) [yoga] Update to 1.16.0 and enabled UWP builds

- openssl-windows `1.0.2s-1` -> `1.0.2s-2`
    - [(#8224)](https://github.com/microsoft/vcpkg/pull/8224) Including config file openssl.cnf in installation.

- liblas `1.8.1-2` -> `1.8.1-3`
    - [(#7920)](https://github.com/microsoft/vcpkg/pull/7920) [liblas]Fix ${_IMPORT_PREFIX} in liblas-depends-*.cmake.
    - [(#7917)](https://github.com/microsoft/vcpkg/pull/7917) [proj4]Upgrade version to 6.1.1 and remove useless patches.

- azure-storage-cpp `6.1.0-2` -> `7.0.0`
    - [(#8499)](https://github.com/microsoft/vcpkg/pull/8499) [azure-storage-cpp]Upgrade to 7.0.0

- sdl2-mixer `2.0.4-6` -> `2.0.4-7`
    - [(#8496)](https://github.com/microsoft/vcpkg/pull/8496) [sdl2-mixer]Fix usage issue.

- armadillo `2019-04-16-5` -> `2019-04-16-6`
    - [(#8494)](https://github.com/microsoft/vcpkg/pull/8494) [armadillo]Fix cmake path.

- restinio `0.6.0` -> `0.6.0.1`
    - [(#8493)](https://github.com/microsoft/vcpkg/pull/8493) [restinio] updated to v.0.6.0.1

- ode `0.15.1-3` -> `0.16`
    - [(#8485)](https://github.com/microsoft/vcpkg/pull/8485) [ode] Upgrade to 0.16

- itk `5.0.1-1` -> `5.0.1-2`
    - [(#8501)](https://github.com/microsoft/vcpkg/pull/8501) [itk]Fix use 64 bit ids.

- irrlicht `1.8.4-2` -> `1.8.4-4`
    - [(#8505)](https://github.com/microsoft/vcpkg/pull/8505) [irrlicht] Reorder link libraries
    - [(#8535)](https://github.com/microsoft/vcpkg/pull/8535) [irrlicht] do not build exisiting dependencies

- azure-iot-sdk-c `2019-08-20.1` -> `2019-10-11.2`
    - [(#8513)](https://github.com/microsoft/vcpkg/pull/8513) [azure] Update azure-iot-sdk-c for release of 2019-10-07
    - [(#8565)](https://github.com/microsoft/vcpkg/pull/8565) azure-iot-sdk-c for release of 2019-10-10
    - [(#8686)](https://github.com/microsoft/vcpkg/pull/8686) [azure] Update azure-iot-sdk-c for 07/2019 LTS refresh
    - [(#8731)](https://github.com/microsoft/vcpkg/pull/8731) Revert ""[azure] Update azure-iot-sdk-c for 07/2019 LTS refresh (#8686)""

- azure-macro-utils-c `2019-08-20.1` -> `2019-10-07.2`
    - [(#8513)](https://github.com/microsoft/vcpkg/pull/8513) [azure] Update azure-iot-sdk-c for release of 2019-10-07
    - [(#8686)](https://github.com/microsoft/vcpkg/pull/8686) [azure] Update azure-iot-sdk-c for 07/2019 LTS refresh
    - [(#8731)](https://github.com/microsoft/vcpkg/pull/8731) Revert ""[azure] Update azure-iot-sdk-c for 07/2019 LTS refresh (#8686)""

- azure-uamqp-c `2019-08-20.1` -> `2019-10-07.2`
    - [(#8513)](https://github.com/microsoft/vcpkg/pull/8513) [azure] Update azure-iot-sdk-c for release of 2019-10-07
    - [(#8686)](https://github.com/microsoft/vcpkg/pull/8686) [azure] Update azure-iot-sdk-c for 07/2019 LTS refresh
    - [(#8731)](https://github.com/microsoft/vcpkg/pull/8731) Revert ""[azure] Update azure-iot-sdk-c for 07/2019 LTS refresh (#8686)""

- azure-uhttp-c `2019-08-20.1` -> `2019-10-07.2`
    - [(#8513)](https://github.com/microsoft/vcpkg/pull/8513) [azure] Update azure-iot-sdk-c for release of 2019-10-07
    - [(#8686)](https://github.com/microsoft/vcpkg/pull/8686) [azure] Update azure-iot-sdk-c for 07/2019 LTS refresh
    - [(#8731)](https://github.com/microsoft/vcpkg/pull/8731) Revert ""[azure] Update azure-iot-sdk-c for 07/2019 LTS refresh (#8686)""

- azure-umqtt-c `2019-08-20.1` -> `2019-10-07.2`
    - [(#8513)](https://github.com/microsoft/vcpkg/pull/8513) [azure] Update azure-iot-sdk-c for release of 2019-10-07
    - [(#8686)](https://github.com/microsoft/vcpkg/pull/8686) [azure] Update azure-iot-sdk-c for 07/2019 LTS refresh
    - [(#8731)](https://github.com/microsoft/vcpkg/pull/8731) Revert ""[azure] Update azure-iot-sdk-c for 07/2019 LTS refresh (#8686)""

- umock-c `2019-08-20.1` -> `2019-10-07.2`
    - [(#8513)](https://github.com/microsoft/vcpkg/pull/8513) [azure] Update azure-iot-sdk-c for release of 2019-10-07
    - [(#8686)](https://github.com/microsoft/vcpkg/pull/8686) [azure] Update azure-iot-sdk-c for 07/2019 LTS refresh
    - [(#8731)](https://github.com/microsoft/vcpkg/pull/8731) Revert ""[azure] Update azure-iot-sdk-c for 07/2019 LTS refresh (#8686)""

- openxr-loader `2019-09-25` -> `1.0.3.0`
    - [(#8515)](https://github.com/microsoft/vcpkg/pull/8515) [openxr-loader] Update to 1.0.3 release + latest C++ bindings header

- gdcm `3.0.0-5` -> `3.0.3`
    - [(#8522)](https://github.com/microsoft/vcpkg/pull/8522) [gdcm/libtorrent] Upgrade to new version

- libtorrent `1.2.1-bcb26fd6` -> `1.2.2`
    - [(#8522)](https://github.com/microsoft/vcpkg/pull/8522) [gdcm/libtorrent] Upgrade to new version

- sfml `2.5.1-3` -> `2.5.1-4`
    - [(#8523)](https://github.com/microsoft/vcpkg/pull/8523) [sfml]Add usage.

- darknet `0.2.5.1` -> `0.2.5.1-1`
    - [(#8527)](https://github.com/microsoft/vcpkg/pull/8527) [stb] update and add cmake module

- stb `2019-07-11` -> `2019-08-17`
    - [(#8527)](https://github.com/microsoft/vcpkg/pull/8527) [stb] update and add cmake module

- curlpp `2018-06-15` -> `2018-06-15-1`
    - [(#8532)](https://github.com/microsoft/vcpkg/pull/8532) [curlpp] fix regression introduced in #7331

- libjpeg-turbo `2.0.2` -> `2.0.3`
    - [(#8412)](https://github.com/microsoft/vcpkg/pull/8412) [libjpeg-turbo] Update to 2.0.3.

- opencv3 `3.4.7-1` -> `3.4.7-2`
    - [(#8542)](https://github.com/microsoft/vcpkg/pull/8542) [opencv] add tesseract to fix downstream linking

- opencv4 `4.1.1-2` -> `4.1.1-3`
    - [(#8542)](https://github.com/microsoft/vcpkg/pull/8542) [opencv] add tesseract to fix downstream linking

- gtest `2019-08-14-2` -> `2019-10-09`
    - [(#8544)](https://github.com/microsoft/vcpkg/pull/8544) [gtest/pmdk] Upgrade to new version

- pmdk `1.6-3` -> `2019-10-10`
    - [(#8544)](https://github.com/microsoft/vcpkg/pull/8544) [gtest/pmdk] Upgrade to new version
    - [(#8586)](https://github.com/microsoft/vcpkg/pull/8586) [pmdk] Upgrade to version 1.7

- imgui `1.72b` -> `1.73-1`
    - [(#8504)](https://github.com/microsoft/vcpkg/pull/8504) [imgui] Update to 1.73
    - [(#8605)](https://github.com/microsoft/vcpkg/pull/8605) [imgui]Add feature example in windows.

- sqlite3 `3.29.0-1` -> `3.30.1-1`
    - [(#8567)](https://github.com/microsoft/vcpkg/pull/8567) [sqlite3] Update to 3.30.1
    - [(#7917)](https://github.com/microsoft/vcpkg/pull/7917) [proj4]Upgrade version to 6.1.1 and remove useless patches.

- ffmpeg `4.2` -> `4.2-1`
    - [(#8596)](https://github.com/microsoft/vcpkg/pull/8596) [ffmpeg] Pass Vcpkg compiler and linker flags to build script

- libyuv `fec9121` -> `fec9121-1`
    - [(#8576)](https://github.com/microsoft/vcpkg/pull/8576) [libyuv] fix include header installation
    - [(#8709)](https://github.com/microsoft/vcpkg/pull/8709) [libyuv] Add Mac/Linux build support
    - [(#8769)](https://github.com/microsoft/vcpkg/pull/8769) [libyuv]Build corresponding type library according to BUILD_SHARED_LIBS.

- libarchive `3.4.0` -> `3.4.0-1`
    - [(#8564)](https://github.com/microsoft/vcpkg/pull/8564) Mixed release and debug build in libarchive

- aixlog `1.2.1-1` -> `1.2.2`
    - [(#8587)](https://github.com/microsoft/vcpkg/pull/8587) [aixlog] Update library to 1.2.2

- portaudio `19.0.6.00-5` -> `2019-09-30`
    - [(#8399)](https://github.com/microsoft/vcpkg/pull/8399) [portaudio] Update to the latest version

- chakracore `1.11.13` -> `1.11.14`
    - [(#8593)](https://github.com/microsoft/vcpkg/pull/8593) [chakracore] Update library to 1.11.14

- embree3 `3.5.2-2` -> `3.5.2-3`
    - [(#8608)](https://github.com/microsoft/vcpkg/pull/8608) [embree3]Fix generated cmake files path.
    - [(#8591)](https://github.com/microsoft/vcpkg/pull/8591) [embree3]Fix EMBREE_ROOT_DIR path setting,EMBREE_LIBRARY Debug/Release path setting.

- cpp-httplib `0.2.4` -> `0.2.5`
    - [(#8590)](https://github.com/microsoft/vcpkg/pull/8590) [cpp-httplib] Update library to 0.2.5

- range-v3 `0.9.0-20190822` -> `0.9.1`
    - [(#8583)](https://github.com/microsoft/vcpkg/pull/8583) [range-v3] Update to 0.9.1

- otl `4.0.443-2` -> `4.0.447`
    - [(#8581)](https://github.com/microsoft/vcpkg/pull/8581) otl version 447

- directxtex `aug2019` -> `oct2019`
    - [(#8563)](https://github.com/microsoft/vcpkg/pull/8563) [directxtk][directxtk12][directxtex][directxmesh] Fixed missing pdbs
    - [(#8723)](https://github.com/microsoft/vcpkg/pull/8723) [directxtex] Update library to oct2019

- directxtk `aug2019` -> `oct2019`
    - [(#8563)](https://github.com/microsoft/vcpkg/pull/8563) [directxtk][directxtk12][directxtex][directxmesh] Fixed missing pdbs
    - [(#8724)](https://github.com/microsoft/vcpkg/pull/8724) [directxtk] Update library to oct2019

- directxtk12 `aug2019` -> `oct2019`
    - [(#8563)](https://github.com/microsoft/vcpkg/pull/8563) [directxtk][directxtk12][directxtex][directxmesh] Fixed missing pdbs
    - [(#8725)](https://github.com/microsoft/vcpkg/pull/8725) [directxtk12] Update library to oct2019

- vtk `8.2.0-8` -> `8.2.0-9`
    - [(#8554)](https://github.com/microsoft/vcpkg/pull/8554) [vtk] Change atlmfc as feature
    - [(#7917)](https://github.com/microsoft/vcpkg/pull/7917) [proj4]Upgrade version to 6.1.1 and remove useless patches.

- sdl2 `2.0.9-4` -> `2.0.10-2`
    - [(#8643)](https://github.com/microsoft/vcpkg/pull/8643) [sdl2] Update to 2.0.10
    - [(#8760)](https://github.com/microsoft/vcpkg/pull/8760) Fix sdl2 build if there is space in the path

- gdal `2.4.1-8` -> `2.4.1-9`
    - [(#7917)](https://github.com/microsoft/vcpkg/pull/7917) [proj4]Upgrade version to 6.1.1 and remove useless patches.
    - [(#8621)](https://github.com/microsoft/vcpkg/pull/8621) [proj4] Update to version 6.2.0

- libgeotiff `1.4.2-9` -> `1.4.2-10`
    - [(#7917)](https://github.com/microsoft/vcpkg/pull/7917) [proj4]Upgrade version to 6.1.1 and remove useless patches.

- proj4 `4.9.3-5` -> `6.2.0-1`
    - [(#7917)](https://github.com/microsoft/vcpkg/pull/7917) [proj4]Upgrade version to 6.1.1 and remove useless patches.
    - [(#8621)](https://github.com/microsoft/vcpkg/pull/8621) [proj4] Update to version 6.2.0

- tcl `8.6.5` -> `8.6.10-2`
    - [(#8402)](https://github.com/microsoft/vcpkg/pull/8402) [tcl]Upgrade to 8.6.9 and use vcpkg_install_make/vcpkg_install_nmake.

- physx `4.1.1-1` -> `4.1.1-3`
    - [(#8561)](https://github.com/microsoft/vcpkg/pull/8561) [physx] Added a patch to fix missing typeinfo.h header with VS16.3 and missing pdb files
    - [(#8658)](https://github.com/microsoft/vcpkg/pull/8658) [physx] Added UWP support

- celero `2.5.0-1` -> `2.6.0`
    - [(#8646)](https://github.com/microsoft/vcpkg/pull/8646) [celero] Updated to v2.6.0

- assimp `5.0.0` -> `5.0.0-1`
    - [(#8665)](https://github.com/microsoft/vcpkg/pull/8665) [assimp] Fix cmake package config

- mosquitto `1.6.3` -> `1.6.7`
    - [(#8661)](https://github.com/microsoft/vcpkg/pull/8661) [mosquitto] Update to 1.6.7

- plog `1.1.4` -> `1.1.5`
    - [(#8685)](https://github.com/microsoft/vcpkg/pull/8685) [plog] Update to 1.1.5

- catch2 `2.9.2` -> `2.10.1-1`
    - [(#8684)](https://github.com/microsoft/vcpkg/pull/8684) [catch2] Update to 2.10.1

- nano-signal-slot `commit-25aa2aa90d450d3c7550c535c7993a9e2ed0764a` -> `2018-08-25-1`
    - [(#8675)](https://github.com/microsoft/vcpkg/pull/8675) [nano-signal-slot] Enable UWP and dynamic builds

- duckx `2019-08-06` -> `1.0.0`
    - [(#8673)](https://github.com/microsoft/vcpkg/pull/8673) [duckx] update library to 1.0.0

- jsoncons `0.136.0` -> `0.136.1`
    - [(#8689)](https://github.com/microsoft/vcpkg/pull/8689) [jsoncons] Update to v.0.136.1

- libpmemobj-cpp `1.7` -> `1.8`
    - [(#8729)](https://github.com/microsoft/vcpkg/pull/8729) [libpmemobj-cpp] Update library to 1.8

- forest `12.0.3` -> `12.0.4`
    - [(#8727)](https://github.com/microsoft/vcpkg/pull/8727) [forest] Update library to 12.0.4

- check `0.12.0-2` -> `0.13.0`
    - [(#8722)](https://github.com/microsoft/vcpkg/pull/8722) [check] Update library to 0.13.0

- libcopp `1.2.0` -> `1.2.1`
    - [(#8728)](https://github.com/microsoft/vcpkg/pull/8728) [libcopp] Update library to 1.2.1

- corrade `2019.01-1` -> `2019.10`
    - [(#8742)](https://github.com/microsoft/vcpkg/pull/8742) Update magnum ports to new version

- magnum-extras `2019.01-2` -> `2019.10`
    - [(#8742)](https://github.com/microsoft/vcpkg/pull/8742) Update magnum ports to new version

- magnum-integration `2019.01-2` -> `2019.10`
    - [(#8742)](https://github.com/microsoft/vcpkg/pull/8742) Update magnum ports to new version

- magnum-plugins `2019.01-2` -> `2019.10`
    - [(#8742)](https://github.com/microsoft/vcpkg/pull/8742) Update magnum ports to new version

- magnum `2019.01-2` -> `2019.10`
    - [(#8742)](https://github.com/microsoft/vcpkg/pull/8742) Update magnum ports to new version

- curl `7.66.0` -> `7.66.0-1`
    - [(#8739)](https://github.com/microsoft/vcpkg/pull/8739) [curl]Fix tools depends zlib.

- x265 `3.0-2` -> `3.2-1`
    - [(#8738)](https://github.com/microsoft/vcpkg/pull/8738) update x265 to 3.2

- pixman `0.38.0-3` -> `0.38.0-4`
    - [(#8736)](https://github.com/microsoft/vcpkg/pull/8736) [pixman] Improve Arm detection

- xmlsec `1.2.28` -> `1.2.29`
    - [(#8721)](https://github.com/microsoft/vcpkg/pull/8721) [xmlsec] Update to 1.2.29

- string-theory `2.2` -> `2.3`
    - [(#8734)](https://github.com/microsoft/vcpkg/pull/8734) [string-theory] Update library to 2.3

- log4cpp `2.9.1-1` -> `2.9.1-2`
    - [(#8741)](https://github.com/microsoft/vcpkg/pull/8741) [log4cpp] Fix link static library

- so5extra `1.3.1-2` -> `1.3.1.1`
    - [(#8770)](https://github.com/microsoft/vcpkg/pull/8770) [so5extra] updated to 1.3.1.1

- wangle `2019.07.08.00` -> `2019.07.08.00-1`
    - [(#8764)](https://github.com/microsoft/vcpkg/pull/8764) [wangle]Fix config.cmake

- fribidi `2019-02-04-1` -> `2019-02-04-2`
    - [(#8639)](https://github.com/microsoft/vcpkg/pull/8639) mesonbuild - Update to 0.52.0

- libepoxy `1.5.3-1` -> `1.5.3-2`
    - [(#8639)](https://github.com/microsoft/vcpkg/pull/8639) mesonbuild - Update to 0.52.0

- jxrlib `1.1-9` -> `2019.10.9`
    - [(#8525)](https://github.com/microsoft/vcpkg/pull/8525) [jxrlib] Update port

- fltk `1.3.4-8` -> `1.3.5-1`
    - [(#8457)](https://github.com/microsoft/vcpkg/pull/8457) FLTK v1.3.5

- qt5-location `5.12.5-1` -> `5.12.5-2`
    - [(#8777)](https://github.com/microsoft/vcpkg/pull/8777) [qt5-location] Modify clipper library name to avoid conflicts with vxl

- pthreads `3.0.0-3` -> `3.0.0-4`
    - [(#8651)](https://github.com/microsoft/vcpkg/pull/8651) [pthreads]Add usage.

- glib `2.52.3-14-3` -> `2.52.3-14-4`
    - [(#8653)](https://github.com/microsoft/vcpkg/pull/8653) [glib]Fix linux build.

- libxslt `1.1.33-2` -> `1.1.33-4`
    - [(#8589)](https://github.com/microsoft/vcpkg/pull/8589) [libxslt]Using vcpkg_install_nmake in Windows, support unix.

- paho-mqtt `1.3.0` -> `1.3.0-1`
    - [(#8492)](https://github.com/microsoft/vcpkg/pull/8492) Export paho-mqtt cmake targets, fix paho-mqttpp3 dependency.

- paho-mqttpp3 `1.0.1-2` -> `1.0.1-3`
    - [(#8492)](https://github.com/microsoft/vcpkg/pull/8492) Export paho-mqtt cmake targets, fix paho-mqttpp3 dependency.

- pcre2 `10.30-5` -> `10.30-6`
    - [(#8620)](https://github.com/microsoft/vcpkg/pull/8620) [pcre2]Fix uwp build failure.

- arrow `0.14.1-1` -> `0.15.1`
    - [(#8815)](https://github.com/microsoft/vcpkg/pull/8815) [Arrow] Update to Arrow 0.15.1

- netcdf-c `4.7.0-4` -> `4.7.0-5`
    - [(#8398)](https://github.com/microsoft/vcpkg/pull/8398) [netcdf-c] Add usage

- sol2 `3.0.3-1` -> `3.0.3-2`
    - [(#8776)](https://github.com/microsoft/vcpkg/pull/8776) [sol2] Use the single header release

- arb `2.16.0` -> `2.17.0`
    - [(#8831)](https://github.com/microsoft/vcpkg/pull/8831) [arb]Upgrade to 2.17.0

- wxwidgets `3.1.2-2` -> `3.1.3`
    - [(#8808)](https://github.com/microsoft/vcpkg/pull/8808) [wxwidgets] Upgrade to 3.1.3

</details>

-- vcpkg team vcpkg@microsoft.com FRI, 01 Nov 08:30:00 -0800",68312233
77,False,False,2019-09-30T15:51:44Z,2019-10-02T07:09:04Z,"vcpkg (2019.09.30)
---
#### Total port count: 1225
#### Total port count per triplet (tested):
|triplet|ports available|
|---|---|
|**x64-windows**|1151|
|x86-windows|1136|
|x64-windows-static|1061|
|**x64-linux**|980|
|**x64-osx**|939|
|arm64-windows|766|
|x64-uwp|624|
|arm-uwp|594|

#### The following commands and options have been updated:
- `x-history` ***[NEW COMMAND]***
    - Shows the full history of CONTROL version of a port, including the vcpkg commit hash, CONTROL version, and date of vcpkg commit
        - [(#7377)](https://github.com/microsoft/vcpkg/pull/7377) [x-history] Prints CONTROL    version history of a port 👻
        - [(#8101)](https://github.com/microsoft/vcpkg/pull/8101) fix x-history help desc.
- `depend-info`
    - Constrain argument count to single port name as usage intends
        - [(#8135)](https://github.com/microsoft/vcpkg/pull/8135) [vcpkg] Fix `depend-info` command arguments arity

#### The following documentation has been updated:
- [Frequently Asked Questions](docs/about/faq.md)
    - [(#8258)](https://github.com/microsoft/vcpkg/pull/8258) Add detailed instructions for custom configurations
- [Maintainer Guidelines and Policies](docs/maintainers/maintainer-guide.md)
    - [(#8383)](https://github.com/microsoft/vcpkg/pull/8383) Fix a typo in maintainer-guide.md

#### The following *remarkable* changes have been made to vcpkg's infrastructure:
- Add port features to CI test result XML as the first step in testing them in CI system
    - [(#8342)](https://github.com/microsoft/vcpkg/pull/8342) [CI system] Add features to test result xml

#### The following *additional* changes have been made to vcpkg's infrastructure:
- [(#8048)](https://github.com/microsoft/vcpkg/pull/8048) Add August changelog
- [(#8082)](https://github.com/microsoft/vcpkg/pull/8082) [vcpkg] remove text from license
- [(#7667)](https://github.com/microsoft/vcpkg/pull/7667) [Qt] Update to 5.12.4
- [(#7954)](https://github.com/microsoft/vcpkg/pull/7954) Fix bug in `.vcpkg-root` detection that breaks `--overlay-triplets`
- [(#8131)](https://github.com/microsoft/vcpkg/pull/8131) [vcpkg] add missing implib definitions, fix shared lib extension on mac
- [(#8129)](https://github.com/microsoft/vcpkg/pull/8129) [vcpkg] Continue on malformed paths in PATH
- [(#8200)](https://github.com/microsoft/vcpkg/pull/8200) [vcpkg] Fix missing VCPKG_ROOT_PATH in create command
- [(#8222)](https://github.com/microsoft/vcpkg/pull/8222) [Qt] Fix static builds of qt5-imageformats
- [(#5180)](https://github.com/microsoft/vcpkg/pull/5180) Use CMAKE_TRY_COMPILE_PLATFORM_VARIABLES to propagate values
- [(#8032)](https://github.com/microsoft/vcpkg/pull/8032) [vcpkg] Avoid RENAME usage to prevent cross-device link problems (#4245)
- [(#8304)](https://github.com/microsoft/vcpkg/pull/8304) [ports.cmake] Fixup capitalization inconsistencies of Windows drive letter

<details>
<summary><b>The following 55 ports have been added:</b></summary>

|port|version|
|---|---|
|[dmlc](https://github.com/microsoft/vcpkg/pull/7549)| 2019-08-12
|[anyrpc](https://github.com/microsoft/vcpkg/pull/7438)| 2017-12-01
|[imgui-sfml](https://github.com/microsoft/vcpkg/pull/7429)<sup>[#8004](https://github.com/microsoft/vcpkg/pull/8004) </sup>| 2.1
|[ignition-cmake0](https://github.com/microsoft/vcpkg/pull/7781)<sup>[#8044](https://github.com/microsoft/vcpkg/pull/8044) [#8136](https://github.com/microsoft/vcpkg/pull/8136) </sup>| 0.6.2-1
|[ignition-math4](https://github.com/microsoft/vcpkg/pull/7781)| 4.0.0
|[ignition-modularscripts](https://github.com/microsoft/vcpkg/pull/7781)<sup>[#8136](https://github.com/microsoft/vcpkg/pull/8136) </sup>| 2019-09-11
|[volk](https://github.com/microsoft/vcpkg/pull/8035)<sup>[#8364](https://github.com/microsoft/vcpkg/pull/8364) </sup>| 2019-09-26
|[cppkafka](https://github.com/microsoft/vcpkg/pull/7987)<sup>[#8073](https://github.com/microsoft/vcpkg/pull/8073) </sup>| 0.3.1-1
|[nativefiledialog](https://github.com/microsoft/vcpkg/pull/7944)| 2019-08-28
|[cello](https://github.com/microsoft/vcpkg/pull/7386)| 2019-07-23
|[libhydrogen](https://github.com/microsoft/vcpkg/pull/7436)| 2019-08-11
|[quantlib](https://github.com/microsoft/vcpkg/pull/7283)| 2019-09-02
|[magic-get](https://github.com/microsoft/vcpkg/pull/8072)| 2019-09-02
|[cityhash](https://github.com/microsoft/vcpkg/pull/7879)| 2013-01-08
|[ignition-common1](https://github.com/microsoft/vcpkg/pull/8111)| 1.1.1
|[wampcc](https://github.com/microsoft/vcpkg/pull/7929)| 2019-09-04
|[hidapi](https://github.com/microsoft/vcpkg/pull/8113)| 2019-08-30
|[sokol](https://github.com/microsoft/vcpkg/pull/8107)| 2019-09-09
|[parallelstl](https://github.com/microsoft/vcpkg/pull/8039)| 20190522-1
|[marl](https://github.com/microsoft/vcpkg/pull/8132)<sup>[#8161](https://github.com/microsoft/vcpkg/pull/8161) </sup>| 2019-09-13
|[vectorclass](https://github.com/microsoft/vcpkg/pull/7573)| 2.00.01
|[wren](https://github.com/microsoft/vcpkg/pull/7242)| 2019-07-01
|[libsrtp](https://github.com/microsoft/vcpkg/pull/8046)| 2.2.0
|[ignition-msgs1](https://github.com/microsoft/vcpkg/pull/8044)| 1.0.0
|[ignition-transport4](https://github.com/microsoft/vcpkg/pull/8044)| 4.0.0
|[argtable3](https://github.com/microsoft/vcpkg/pull/7815)| 2019-08-21
|[llgl](https://github.com/microsoft/vcpkg/pull/7701)| 2019-08-15
|[sdformat6](https://github.com/microsoft/vcpkg/pull/8137)| 6.2.0
|[grppi](https://github.com/microsoft/vcpkg/pull/8125)| 0.4.0
|[opencolorio](https://github.com/microsoft/vcpkg/pull/8006)| 1.1.1
|[cpputest](https://github.com/microsoft/vcpkg/pull/8188)| 2019-9-16
|[winreg](https://github.com/microsoft/vcpkg/pull/8190)<sup>[#8371](https://github.com/microsoft/vcpkg/pull/8371) </sup>| 1.2.1-1
|[zfp](https://github.com/microsoft/vcpkg/pull/7955)| 0.5.5-1
|[libyuv](https://github.com/microsoft/vcpkg/pull/7486)| fec9121
|[foonathan-memory](https://github.com/microsoft/vcpkg/pull/7350)<sup>[#8266](https://github.com/microsoft/vcpkg/pull/8266) </sup>| 2019-07-21-1
|[jinja2cpplight](https://github.com/microsoft/vcpkg/pull/8207)| 2018-05-08
|[liblbfgs](https://github.com/microsoft/vcpkg/pull/8186)| 1.10
|[sigslot](https://github.com/microsoft/vcpkg/pull/8262)| 1.0.0
|[cute-headers](https://github.com/microsoft/vcpkg/pull/8277)| 2019-09-20
|[libsoundio](https://github.com/microsoft/vcpkg/pull/8273)| 2.0.0
|[matplotlib-cpp](https://github.com/microsoft/vcpkg/pull/8313)| 2019-09-24
|[asynch](https://github.com/microsoft/vcpkg/pull/8317)<sup>[#8371](https://github.com/microsoft/vcpkg/pull/8371) </sup>| 2019-09-21-1
|[minimp3](https://github.com/microsoft/vcpkg/pull/8319)<sup>[#8371](https://github.com/microsoft/vcpkg/pull/8371) </sup>| 2019-07-24-1
|[crfsuite](https://github.com/microsoft/vcpkg/pull/8233)| 2019-07-21
|[cudnn](https://github.com/microsoft/vcpkg/pull/7536)| 7.6
|[libosip2](https://github.com/microsoft/vcpkg/pull/8261)| 5.1.0
|[portable-snippets](https://github.com/microsoft/vcpkg/pull/7783)| 2019-09-20
|[ignition-fuel-tools1](https://github.com/microsoft/vcpkg/pull/8136)| 1.2.0
|[clickhouse-cpp](https://github.com/microsoft/vcpkg/pull/7880)| 2019-05-22
|[tweeny](https://github.com/microsoft/vcpkg/pull/8341)| 3.0
|[nanogui](https://github.com/microsoft/vcpkg/pull/8302)| 2019-09-23
|[wepoll](https://github.com/microsoft/vcpkg/pull/8280)| 1.5.5
|[tcl](https://github.com/microsoft/vcpkg/pull/8026)| 8.6.5
|[cpuinfo](https://github.com/microsoft/vcpkg/pull/7449)| 2019-07-28
|[mathc](https://github.com/microsoft/vcpkg/pull/8394)| 2019-09-29
</details>

<details>
<summary><b>The following 220 ports have been updated:</b></summary>

- breakpad `2019-07-11` -> `2019-07-11-1`
    - [(#7938)](https://github.com/microsoft/vcpkg/pull/7938) [breakpad] Fix build failed with Visual Studio 2019

- gtest `2019-08-14-1` -> `2019-08-14-2`
    - [(#7887)](https://github.com/microsoft/vcpkg/pull/7887) [gtest]Re-fix gmock target.

- libxslt `1.1.33` -> `1.1.33-2`
    - [(#7451)](https://github.com/microsoft/vcpkg/pull/7451) [libxslt]Fix dependent ports in static builds.
    - [(#7986)](https://github.com/microsoft/vcpkg/pull/7986) modernize many ports

- pcre2 `10.30-4` -> `10.30-5`
    - [(#7948)](https://github.com/microsoft/vcpkg/pull/7948) Fix build with Emscripten/WASM

- entt `3.0.0-1` -> `3.1.1`
    - [(#7984)](https://github.com/microsoft/vcpkg/pull/7984) [entt] Update to 3.1.0
    - [(#8098)](https://github.com/microsoft/vcpkg/pull/8098) [entt] Update to 3.1.1

- raylib `2019-04-27-2` -> `2.5.0`
    - [(#7848)](https://github.com/microsoft/vcpkg/pull/7848) [raylib] update to 2.5.0

- jsoncons `0.132.1` -> `0.136.0`
    - [(#8034)](https://github.com/microsoft/vcpkg/pull/8034) [jsoncons] Update to version 0.133.0
    - [(#8221)](https://github.com/microsoft/vcpkg/pull/8221) [jsoncons] Update to v0.134.0
    - [(#8348)](https://github.com/microsoft/vcpkg/pull/8348) [jsoncons] Update jsoncons to v0.135.0
    - [(#8382)](https://github.com/microsoft/vcpkg/pull/8382) [jsoncons] Update jsoncons to v0.136.0

- exiv2 `0.27.1-1` -> `0.27.2-1`
    - [(#7992)](https://github.com/microsoft/vcpkg/pull/7992) [exiv2] Update library to 0.27.2

- gettext `0.19-10` -> `0.19-11`
    - [(#7990)](https://github.com/microsoft/vcpkg/pull/7990) [gettext]Improve gettext on Linux.

- wtl `10.0-2` -> `10.0-3`
    - [(#8005)](https://github.com/microsoft/vcpkg/pull/8005) Update WTL to 10.0.9163.

- aixlog `1.2.1` -> `1.2.1-1`
    - [(#7986)](https://github.com/microsoft/vcpkg/pull/7986) modernize many ports

- chaiscript `6.1.0` -> `6.1.0-1`
    - [(#7986)](https://github.com/microsoft/vcpkg/pull/7986) modernize many ports

- dlfcn-win32 `1.1.1-2` -> `1.1.1-3`
    - [(#7986)](https://github.com/microsoft/vcpkg/pull/7986) modernize many ports

- enet `1.3.13` -> `1.3.13-1`
    - [(#7986)](https://github.com/microsoft/vcpkg/pull/7986) modernize many ports

- fltk `1.3.4-6` -> `1.3.4-7`
    - [(#7986)](https://github.com/microsoft/vcpkg/pull/7986) modernize many ports

- fmi4cpp `0.7.0-1` -> `0.7.0-2`
    - [(#7986)](https://github.com/microsoft/vcpkg/pull/7986) modernize many ports

- fmilib `2.0.3-1` -> `2.0.3-2`
    - [(#7986)](https://github.com/microsoft/vcpkg/pull/7986) modernize many ports

- freetds `1.1.6` -> `1.1.6-1`
    - [(#7986)](https://github.com/microsoft/vcpkg/pull/7986) modernize many ports

- gainput `1.0.0-1` -> `1.0.0-2`
    - [(#7986)](https://github.com/microsoft/vcpkg/pull/7986) modernize many ports

- geographiclib `1.47-patch1-7` -> `1.47-patch1-9`
    - [(#7986)](https://github.com/microsoft/vcpkg/pull/7986) modernize many ports
    - [(#8115)](https://github.com/microsoft/vcpkg/pull/8115) [geographiclib]Fix usage error and cmake path in Linux.

- glog `0.4.0-1` -> `0.4.0-2`
    - [(#7986)](https://github.com/microsoft/vcpkg/pull/7986) modernize many ports

- irrlicht `1.8.4-1` -> `1.8.4-2`
    - [(#7986)](https://github.com/microsoft/vcpkg/pull/7986) modernize many ports

- libmikmod `3.3.11.1-4` -> `3.3.11.1-5`
    - [(#7986)](https://github.com/microsoft/vcpkg/pull/7986) modernize many ports

- libodb-mysql `2.4.0-3` -> `2.4.0-4`
    - [(#7986)](https://github.com/microsoft/vcpkg/pull/7986) modernize many ports

- libodb-sqlite `2.4.0-4` -> `2.4.0-5`
    - [(#7986)](https://github.com/microsoft/vcpkg/pull/7986) modernize many ports

- libodb `2.4.0-5` -> `2.4.0-6`
    - [(#7986)](https://github.com/microsoft/vcpkg/pull/7986) modernize many ports

- libsquish `1.15-1` -> `1.15-2`
    - [(#7986)](https://github.com/microsoft/vcpkg/pull/7986) modernize many ports

- lzo `2.10-2` -> `2.10-3`
    - [(#7986)](https://github.com/microsoft/vcpkg/pull/7986) modernize many ports

- nanovg `master` -> `2019-8-30-1`
    - [(#7986)](https://github.com/microsoft/vcpkg/pull/7986) modernize many ports
    - [(#8302)](https://github.com/microsoft/vcpkg/pull/8302) [nanogui] Add new port

- ode `0.15.1-1` -> `0.15.1-2`
    - [(#7986)](https://github.com/microsoft/vcpkg/pull/7986) modernize many ports

- opencsg `1.4.2` -> `1.4.2-1`
    - [(#7986)](https://github.com/microsoft/vcpkg/pull/7986) modernize many ports

- orocos-kdl `1.4-1` -> `1.4-2`
    - [(#7986)](https://github.com/microsoft/vcpkg/pull/7986) modernize many ports

- pangomm `2.40.1` -> `2.40.1-1`
    - [(#7986)](https://github.com/microsoft/vcpkg/pull/7986) modernize many ports

- pcre `8.41-2` -> `8.41-3`
    - [(#7986)](https://github.com/microsoft/vcpkg/pull/7986) modernize many ports

- qt5-gamepad `5.12.3-1` -> `5.12.5-1`
    - [(#7986)](https://github.com/microsoft/vcpkg/pull/7986) modernize many ports
    - [(#7667)](https://github.com/microsoft/vcpkg/pull/7667) [Qt] Update to 5.12.4
    - [(#8159)](https://github.com/microsoft/vcpkg/pull/8159) [Qt] update to 5.12.5
    - [(#8222)](https://github.com/microsoft/vcpkg/pull/8222) [Qt] Fix static builds of qt5-imageformats

- wavpack `5.1.0-00d9a4a-1` -> `5.1.0-2`
    - [(#7986)](https://github.com/microsoft/vcpkg/pull/7986) modernize many ports

- tensorflow-cc `1.14` -> `1.14-1`
    - [(#8023)](https://github.com/microsoft/vcpkg/pull/8023) [tensorflow-cc]Fix build error and add warning message.

- glew `2.1.0-5` -> `2.1.0-6`
    - [(#7967)](https://github.com/microsoft/vcpkg/pull/7967) [VTK/GLEW] Fix Regression of VTK with newer CMake Versions

- libpq `9.6.1-7` -> `9.6.1-8`
    - [(#8076)](https://github.com/microsoft/vcpkg/pull/8076) libpq requires HAVE_CRYPTO_LOCK for thread safety with openssl <1.1.0
    - [(#8080)](https://github.com/microsoft/vcpkg/pull/8080) [libpq] #undef int128 type if compiling for 32 bit architecture
    - [(#8090)](https://github.com/microsoft/vcpkg/pull/8090) [libpq] Bump version number

- sobjectizer `5.6.0.2` -> `5.6.1`
    - [(#8052)](https://github.com/microsoft/vcpkg/pull/8052) [sobjectizer] updated to 5.6.1

- unrar `5.5.8-2` -> `5.8.1`
    - [(#8053)](https://github.com/microsoft/vcpkg/pull/8053) [unrar] Don't use a custom struct member alignment
    - [(#8108)](https://github.com/microsoft/vcpkg/pull/8108) [unrar] Update to 5.8.1

- xalan-c `1.11-7` -> `1.11-8`
    - [(#7795)](https://github.com/microsoft/vcpkg/pull/7795) [xalan-c] fixed cmake files location

- re2 `2019-08-01` -> `2019-09-01`
    - [(#8089)](https://github.com/microsoft/vcpkg/pull/8089) [re2] Update library to 2019-09-01

- libvpx `1.7.0-3` -> `1.8.1`
    - [(#8086)](https://github.com/microsoft/vcpkg/pull/8086) [libvpx] Update to 1.8.1.
    - [(#8100)](https://github.com/microsoft/vcpkg/pull/8100) [libvpx] Fix build when VCPKG_BUILD_TYPE is set.

- grpc `1.22.0` -> `1.23.0`
    - [(#8109)](https://github.com/microsoft/vcpkg/pull/8109) [grpc] Update grpc to 1.23.0

- egl-registry `2018-06-30-1` -> `2019-08-08`
    - [(#8095)](https://github.com/microsoft/vcpkg/pull/8095) Update egl-registry to 2019-08-08 and opengl-registry to 2019-08-22.

- opengl-registry `2018-06-30-1` -> `2019-08-22`
    - [(#8095)](https://github.com/microsoft/vcpkg/pull/8095) Update egl-registry to 2019-08-08 and opengl-registry to 2019-08-22.

- dimcli `5.0.0` -> `5.0.1`
    - [(#8024)](https://github.com/microsoft/vcpkg/pull/8024) [dimcli] Upgrade to version 5.0.1

- libwebsockets `3.1.0-3` -> `3.2.0`
    - [(#8017)](https://github.com/microsoft/vcpkg/pull/8017) Update libwebsockets to v3.2.0

- mongo-c-driver `1.14.0-3-1` -> `1.14.0-4`
    - [(#7974)](https://github.com/microsoft/vcpkg/pull/7974) [mongo-c-driver] fix debug linkage under linux

- qwt `6.1.3-7` -> `6.1.3-8`
    - [(#8030)](https://github.com/microsoft/vcpkg/pull/8030) [qwt]make qwt support unix

- ixwebsocket `5.0.4` -> `6.1.0`
    - [(#7839)](https://github.com/microsoft/vcpkg/pull/7839) [ixwebsocket] update to 6.1.0 to fix Windows problem

- cpp-httplib `0.2.1` -> `0.2.4`
    - [(#8054)](https://github.com/microsoft/vcpkg/pull/8054) [cpp-httplib] Update library to 0.2.2
    - [(#8172)](https://github.com/microsoft/vcpkg/pull/8172) [cpp-httplib] Update library to 0.2.4

- blend2d `beta_2019-07-16` -> `beta_2019-10-09`
    - [(#8120)](https://github.com/microsoft/vcpkg/pull/8120) [blend2d] Port update beta_2019-10-09

- json-c `2019-05-31` -> `2019-09-10`
    - [(#8121)](https://github.com/microsoft/vcpkg/pull/8121) [json-c] Add dynamic library support

- glfw3 `3.3-1` -> `3.3-2`
    - [(#7592)](https://github.com/microsoft/vcpkg/pull/7592) [glfw3] fix cmake config

- google-cloud-cpp `0.12.0` -> `0.13.0`
    - [(#8077)](https://github.com/microsoft/vcpkg/pull/8077) Update google-cloud-cpp and googleapis.

- googleapis `0.1.3` -> `0.1.5`
    - [(#8077)](https://github.com/microsoft/vcpkg/pull/8077) Update google-cloud-cpp and googleapis.

- tbb `2019_U8` -> `2019_U8-1`
    - [(#8018)](https://github.com/microsoft/vcpkg/pull/8018) [tbb]Fix static build.

- openxr-loader `1.0.0-2` -> `2019-09-25`
    - [(#8123)](https://github.com/microsoft/vcpkg/pull/8123) [openxr-loader] Update to 1.0.2
    - [(#8255)](https://github.com/microsoft/vcpkg/pull/8255) [openxr-loader] Add openxr C++ bindings

- sdl1 `1.2.15-6` -> `1.2.15-8`
    - [(#8070)](https://github.com/microsoft/vcpkg/pull/8070) [sdl1]Support linux build.
    - [(#8327)](https://github.com/microsoft/vcpkg/pull/8327) [sdl1] fix windows sdk 18362 build failure

- glslang `2019-03-05` -> `2019-03-05-1`
    - [(#8051)](https://github.com/microsoft/vcpkg/pull/8051) [glslang]Fix generated cmake files.

- opencl `2.2 (2017.07.18)-1` -> `2.2 (2018.08.31)`
    - [(#4204)](https://github.com/microsoft/vcpkg/pull/4204) Linux support for the OpenCL SDK package

- libspatialite `4.3.0a-3` -> `4.3.0a-4`
    - [(#8025)](https://github.com/microsoft/vcpkg/pull/8025) [libspatialite]make libspatialite support linux and osx

- libqrencode `4.0.2` -> `4.0.2-1`
    - [(#8099)](https://github.com/microsoft/vcpkg/pull/8099) [libqrencode] Add tool feature; Remove unnecessary patch

- sdl2-mixer `2.0.4-3` -> `2.0.4-6`
    - [(#7720)](https://github.com/microsoft/vcpkg/pull/7720) [sdl2-mixer]Remove useless dependency link libraries.
    - [(#8208)](https://github.com/microsoft/vcpkg/pull/8208) [sdl2-mixer] Fix features dependency link.
    - [(#8335)](https://github.com/microsoft/vcpkg/pull/8335) [sdl2-mixer]Re-fix dynamic call.

- evpp `0.7.0` -> `0.7.0-1`
    - [(#8050)](https://github.com/microsoft/vcpkg/pull/8050) [evpp]Fix linux build.

- libogg `1.3.3-4` -> `1.3.4`
    - [(#8094)](https://github.com/microsoft/vcpkg/pull/8094) [libogg] Update to 1.3.4-1

- otl `4.0.442` -> `4.0.443`
    - [(#8139)](https://github.com/microsoft/vcpkg/pull/8139) [otl] fix hash and update version

- speexdsp `1.2rc3-3` -> `1.2.0`
    - [(#8140)](https://github.com/microsoft/vcpkg/pull/8140) [speexdsp] update to 1.2.0

- pcl `1.9.1-8` -> `1.9.1-9`
    - [(#8154)](https://github.com/microsoft/vcpkg/pull/8154) [pcl] Fix problem with link-type keywords in linked libraries

- libqglviewer `2.7.0` -> `2.7.0-2`
    - [(#7667)](https://github.com/microsoft/vcpkg/pull/7667) [Qt] Update to 5.12.4
    - [(#8159)](https://github.com/microsoft/vcpkg/pull/8159) [Qt] update to 5.12.5

- qt5-3d `5.12.3-1` -> `5.12.5-1`
    - [(#7667)](https://github.com/microsoft/vcpkg/pull/7667) [Qt] Update to 5.12.4
    - [(#8159)](https://github.com/microsoft/vcpkg/pull/8159) [Qt] update to 5.12.5
    - [(#8222)](https://github.com/microsoft/vcpkg/pull/8222) [Qt] Fix static builds of qt5-imageformats

- qt5-activeqt `5.12.3-1` -> `5.12.5`
    - [(#7667)](https://github.com/microsoft/vcpkg/pull/7667) [Qt] Update to 5.12.4
    - [(#8159)](https://github.com/microsoft/vcpkg/pull/8159) [Qt] update to 5.12.5

- qt5-base `5.12.3-4` -> `5.12.5-1`
    - [(#7667)](https://github.com/microsoft/vcpkg/pull/7667) [Qt] Update to 5.12.4
    - [(#8159)](https://github.com/microsoft/vcpkg/pull/8159) [Qt] update to 5.12.5
    - [(#8222)](https://github.com/microsoft/vcpkg/pull/8222) [Qt] Fix static builds of qt5-imageformats
    - [(#8212)](https://github.com/microsoft/vcpkg/pull/8212) [Qt] feature latest to build 5.13.1

- qt5-charts `5.12.3-1` -> `5.12.5-1`
    - [(#7667)](https://github.com/microsoft/vcpkg/pull/7667) [Qt] Update to 5.12.4
    - [(#8159)](https://github.com/microsoft/vcpkg/pull/8159) [Qt] update to 5.12.5
    - [(#8222)](https://github.com/microsoft/vcpkg/pull/8222) [Qt] Fix static builds of qt5-imageformats

- qt5-connectivity `5.12.3-1` -> `5.12.5-1`
    - [(#7667)](https://github.com/microsoft/vcpkg/pull/7667) [Qt] Update to 5.12.4
    - [(#8159)](https://github.com/microsoft/vcpkg/pull/8159) [Qt] update to 5.12.5
    - [(#8222)](https://github.com/microsoft/vcpkg/pull/8222) [Qt] Fix static builds of qt5-imageformats

- qt5-datavis3d `5.12.3-1` -> `5.12.5-1`
    - [(#7667)](https://github.com/microsoft/vcpkg/pull/7667) [Qt] Update to 5.12.4
    - [(#8159)](https://github.com/microsoft/vcpkg/pull/8159) [Qt] update to 5.12.5
    - [(#8222)](https://github.com/microsoft/vcpkg/pull/8222) [Qt] Fix static builds of qt5-imageformats

- qt5-declarative `5.12.3-2` -> `5.12.5-1`
    - [(#7667)](https://github.com/microsoft/vcpkg/pull/7667) [Qt] Update to 5.12.4
    - [(#8159)](https://github.com/microsoft/vcpkg/pull/8159) [Qt] update to 5.12.5
    - [(#8222)](https://github.com/microsoft/vcpkg/pull/8222) [Qt] Fix static builds of qt5-imageformats

- qt5-graphicaleffects `5.12.3-1` -> `5.12.5`
    - [(#7667)](https://github.com/microsoft/vcpkg/pull/7667) [Qt] Update to 5.12.4
    - [(#8159)](https://github.com/microsoft/vcpkg/pull/8159) [Qt] update to 5.12.5

- qt5-imageformats `5.12.3-1` -> `5.12.5-1`
    - [(#7667)](https://github.com/microsoft/vcpkg/pull/7667) [Qt] Update to 5.12.4
    - [(#8159)](https://github.com/microsoft/vcpkg/pull/8159) [Qt] update to 5.12.5
    - [(#8222)](https://github.com/microsoft/vcpkg/pull/8222) [Qt] Fix static builds of qt5-imageformats

- qt5-location `5.12.3-1` -> `5.12.5-1`
    - [(#7667)](https://github.com/microsoft/vcpkg/pull/7667) [Qt] Update to 5.12.4
    - [(#8159)](https://github.com/microsoft/vcpkg/pull/8159) [Qt] update to 5.12.5
    - [(#8222)](https://github.com/microsoft/vcpkg/pull/8222) [Qt] Fix static builds of qt5-imageformats

- qt5-macextras `5.12.3-1` -> `5.12.5`
    - [(#7667)](https://github.com/microsoft/vcpkg/pull/7667) [Qt] Update to 5.12.4
    - [(#8159)](https://github.com/microsoft/vcpkg/pull/8159) [Qt] update to 5.12.5

- qt5-modularscripts `2019-04-30-1` -> `deprecated`
    - [(#7667)](https://github.com/microsoft/vcpkg/pull/7667) [Qt] Update to 5.12.4

- qt5-mqtt `5.12.3-1` -> `5.12.5`
    - [(#7667)](https://github.com/microsoft/vcpkg/pull/7667) [Qt] Update to 5.12.4
    - [(#8159)](https://github.com/microsoft/vcpkg/pull/8159) [Qt] update to 5.12.5

- qt5-multimedia `5.12.3-1` -> `5.12.5-1`
    - [(#7667)](https://github.com/microsoft/vcpkg/pull/7667) [Qt] Update to 5.12.4
    - [(#8159)](https://github.com/microsoft/vcpkg/pull/8159) [Qt] update to 5.12.5
    - [(#8222)](https://github.com/microsoft/vcpkg/pull/8222) [Qt] Fix static builds of qt5-imageformats

- qt5-networkauth `5.12.3-1` -> `5.12.5`
    - [(#7667)](https://github.com/microsoft/vcpkg/pull/7667) [Qt] Update to 5.12.4
    - [(#8159)](https://github.com/microsoft/vcpkg/pull/8159) [Qt] update to 5.12.5

- qt5-purchasing `5.12.3-1` -> `5.12.5-1`
    - [(#7667)](https://github.com/microsoft/vcpkg/pull/7667) [Qt] Update to 5.12.4
    - [(#8159)](https://github.com/microsoft/vcpkg/pull/8159) [Qt] update to 5.12.5
    - [(#8222)](https://github.com/microsoft/vcpkg/pull/8222) [Qt] Fix static builds of qt5-imageformats

- qt5-quickcontrols `5.12.3-1` -> `5.12.5-1`
    - [(#7667)](https://github.com/microsoft/vcpkg/pull/7667) [Qt] Update to 5.12.4
    - [(#8159)](https://github.com/microsoft/vcpkg/pull/8159) [Qt] update to 5.12.5
    - [(#8222)](https://github.com/microsoft/vcpkg/pull/8222) [Qt] Fix static builds of qt5-imageformats

- qt5-quickcontrols2 `5.12.3-1` -> `5.12.5-1`
    - [(#7667)](https://github.com/microsoft/vcpkg/pull/7667) [Qt] Update to 5.12.4
    - [(#8159)](https://github.com/microsoft/vcpkg/pull/8159) [Qt] update to 5.12.5
    - [(#8222)](https://github.com/microsoft/vcpkg/pull/8222) [Qt] Fix static builds of qt5-imageformats

- qt5-remoteobjects `5.12.3-1` -> `5.12.5-1`
    - [(#7667)](https://github.com/microsoft/vcpkg/pull/7667) [Qt] Update to 5.12.4
    - [(#8159)](https://github.com/microsoft/vcpkg/pull/8159) [Qt] update to 5.12.5
    - [(#8222)](https://github.com/microsoft/vcpkg/pull/8222) [Qt] Fix static builds of qt5-imageformats

- qt5-script `5.12.3-1` -> `5.12.5-1`
    - [(#7667)](https://github.com/microsoft/vcpkg/pull/7667) [Qt] Update to 5.12.4
    - [(#8159)](https://github.com/microsoft/vcpkg/pull/8159) [Qt] update to 5.12.5
    - [(#8222)](https://github.com/microsoft/vcpkg/pull/8222) [Qt] Fix static builds of qt5-imageformats

- qt5-scxml `5.12.3-1` -> `5.12.5`
    - [(#7667)](https://github.com/microsoft/vcpkg/pull/7667) [Qt] Update to 5.12.4
    - [(#8159)](https://github.com/microsoft/vcpkg/pull/8159) [Qt] update to 5.12.5

- qt5-sensors `5.12.3-1` -> `5.12.5-1`
    - [(#7667)](https://github.com/microsoft/vcpkg/pull/7667) [Qt] Update to 5.12.4
    - [(#8159)](https://github.com/microsoft/vcpkg/pull/8159) [Qt] update to 5.12.5
    - [(#8222)](https://github.com/microsoft/vcpkg/pull/8222) [Qt] Fix static builds of qt5-imageformats

- qt5-serialport `5.12.3-1` -> `5.12.5`
    - [(#7667)](https://github.com/microsoft/vcpkg/pull/7667) [Qt] Update to 5.12.4
    - [(#8159)](https://github.com/microsoft/vcpkg/pull/8159) [Qt] update to 5.12.5

- qt5-speech `5.12.3-1` -> `5.12.5-1`
    - [(#7667)](https://github.com/microsoft/vcpkg/pull/7667) [Qt] Update to 5.12.4
    - [(#8159)](https://github.com/microsoft/vcpkg/pull/8159) [Qt] update to 5.12.5
    - [(#8222)](https://github.com/microsoft/vcpkg/pull/8222) [Qt] Fix static builds of qt5-imageformats

- qt5-svg `5.12.3-1` -> `5.12.5`
    - [(#7667)](https://github.com/microsoft/vcpkg/pull/7667) [Qt] Update to 5.12.4
    - [(#8159)](https://github.com/microsoft/vcpkg/pull/8159) [Qt] update to 5.12.5

- qt5-tools `5.12.3-1` -> `5.12.5-1`
    - [(#7667)](https://github.com/microsoft/vcpkg/pull/7667) [Qt] Update to 5.12.4
    - [(#8159)](https://github.com/microsoft/vcpkg/pull/8159) [Qt] update to 5.12.5
    - [(#8222)](https://github.com/microsoft/vcpkg/pull/8222) [Qt] Fix static builds of qt5-imageformats

- qt5-virtualkeyboard `5.12.3-1` -> `5.12.5-1`
    - [(#7667)](https://github.com/microsoft/vcpkg/pull/7667) [Qt] Update to 5.12.4
    - [(#8159)](https://github.com/microsoft/vcpkg/pull/8159) [Qt] update to 5.12.5
    - [(#8222)](https://github.com/microsoft/vcpkg/pull/8222) [Qt] Fix static builds of qt5-imageformats

- qt5-webchannel `5.12.3-1` -> `5.12.5-1`
    - [(#7667)](https://github.com/microsoft/vcpkg/pull/7667) [Qt] Update to 5.12.4
    - [(#8159)](https://github.com/microsoft/vcpkg/pull/8159) [Qt] update to 5.12.5
    - [(#8222)](https://github.com/microsoft/vcpkg/pull/8222) [Qt] Fix static builds of qt5-imageformats

- qt5-websockets `5.12.3-1` -> `5.12.5`
    - [(#7667)](https://github.com/microsoft/vcpkg/pull/7667) [Qt] Update to 5.12.4
    - [(#8159)](https://github.com/microsoft/vcpkg/pull/8159) [Qt] update to 5.12.5
    - [(#8222)](https://github.com/microsoft/vcpkg/pull/8222) [Qt] Fix static builds of qt5-imageformats

- qt5-webview `5.12.3-1` -> `5.12.5-1`
    - [(#7667)](https://github.com/microsoft/vcpkg/pull/7667) [Qt] Update to 5.12.4
    - [(#8159)](https://github.com/microsoft/vcpkg/pull/8159) [Qt] update to 5.12.5
    - [(#8222)](https://github.com/microsoft/vcpkg/pull/8222) [Qt] Fix static builds of qt5-imageformats

- qt5-winextras `5.12.3-1` -> `5.12.5-1`
    - [(#7667)](https://github.com/microsoft/vcpkg/pull/7667) [Qt] Update to 5.12.4
    - [(#8159)](https://github.com/microsoft/vcpkg/pull/8159) [Qt] update to 5.12.5
    - [(#8222)](https://github.com/microsoft/vcpkg/pull/8222) [Qt] Fix static builds of qt5-imageformats

- qt5-xmlpatterns `5.12.3-1` -> `5.12.5`
    - [(#7667)](https://github.com/microsoft/vcpkg/pull/7667) [Qt] Update to 5.12.4
    - [(#8159)](https://github.com/microsoft/vcpkg/pull/8159) [Qt] update to 5.12.5
    - [(#8222)](https://github.com/microsoft/vcpkg/pull/8222) [Qt] Fix static builds of qt5-imageformats

- qt5 `5.12.3-1` -> `5.12.5`
    - [(#7667)](https://github.com/microsoft/vcpkg/pull/7667) [Qt] Update to 5.12.4
    - [(#8159)](https://github.com/microsoft/vcpkg/pull/8159) [Qt] update to 5.12.5
    - [(#8212)](https://github.com/microsoft/vcpkg/pull/8212) [Qt] feature latest to build 5.13.1

- mathgl `2.4.3-1` -> `2.4.3-2`
    - [(#8145)](https://github.com/microsoft/vcpkg/pull/8145) [mathgl]Fix build failure on x86-windows.

- libpng `1.6.37-3` -> `1.6.37-4`
    - [(#8079)](https://github.com/microsoft/vcpkg/pull/8079) [libpng] Replace find_library() with a simple set() for linking libm on UNIX

- chakracore `1.11.12` -> `1.11.13`
    - [(#8171)](https://github.com/microsoft/vcpkg/pull/8171) [chakracore] Update library to 1.11.13

- fastcdr `1.0.10` -> `1.0.11`
    - [(#8173)](https://github.com/microsoft/vcpkg/pull/8173) [fastcdr] Update library to 1.0.11

- yara `e3439e4ead4ed5d3b75a0b46eaf15ddda2110bb9-2` -> `3.10.0`
    - [(#8194)](https://github.com/microsoft/vcpkg/pull/8194) [yara] Update to 3.10.0

- rabit `0.1` -> `0.1-2`
    - [(#8042)](https://github.com/microsoft/vcpkg/pull/8042) [rabit] Fix file conflict with dmlc
    - [(#8206)](https://github.com/microsoft/vcpkg/pull/8206) [rabit] Fix cmake files path

- gdcm `3.0.0-4` -> `3.0.0-5`
    - [(#7852)](https://github.com/microsoft/vcpkg/pull/7852) [gdcm] Fix file UseGDCM.cmake path name

- libyaml `0.2.2-1` -> `0.2.2-2`
    - [(#8177)](https://github.com/microsoft/vcpkg/pull/8177) Fix libyaml CMake package and CMake targets

- clapack `3.2.1-10` -> `3.2.1-12`
    - [(#8191)](https://github.com/microsoft/vcpkg/pull/8191) [clapack] Fix clapack-targets.cmake path in clpack-config.cmake
    - [(#8388)](https://github.com/microsoft/vcpkg/pull/8388) [clapack] fix clapack install

- embree3 `3.5.2-1` -> `3.5.2-2`
    - [(#8192)](https://github.com/microsoft/vcpkg/pull/8192) [embree3]Fix static build and cmake path.

- llvm `8.0.0` -> `8.0.0-2`
    - [(#7919)](https://github.com/microsoft/vcpkg/pull/7919) [llvm]Fix build error on Linux: cannot find -lxml2.
    - [(#8102)](https://github.com/microsoft/vcpkg/pull/8102) [halide]Upgrade to release_2019_08_27.

- vtk `8.2.0-5` -> `8.2.0-8`
    - [(#7933)](https://github.com/microsoft/vcpkg/pull/7933) [VTK] VTK links with release version of LMZA in debug build instead of debu…
    - [(#8345)](https://github.com/microsoft/vcpkg/pull/8345) [vtk] Fix vtk[python] build failure
    - [(#8403)](https://github.com/microsoft/vcpkg/pull/8403) [vtk] fix typo in lzma and lz4 patch

- dcmtk `3.6.4-1` -> `3.6.4-2`
    - [(#8202)](https://github.com/microsoft/vcpkg/pull/8202) [dcmtk] Fix build error on Linux

- openimageio `2019-08-08-2` -> `2019-08-08-4`
    - [(#8210)](https://github.com/microsoft/vcpkg/pull/8210) [openimageio] Add opencolorio as feature
    - [(#8230)](https://github.com/microsoft/vcpkg/pull/8230) [openimageio]Re-fix find openexr issue.
    - [(#8379)](https://github.com/microsoft/vcpkg/pull/8379) [alembic,geogram,openimageio]: openexr and libraw debug linkage, minor fix for geogram

- cli `1.1-1` -> `1.1.1`
    - [(#8209)](https://github.com/microsoft/vcpkg/pull/8209) [cli] Update the version to 1.1.1

- libepoxy `1.5.3` -> `1.5.3-1`
    - [(#7985)](https://github.com/microsoft/vcpkg/pull/7985) [libepoxy]Add support with unix.

- atk `2.24.0-3` -> `2.24.0-4`
    - [(#7991)](https://github.com/microsoft/vcpkg/pull/7991) [atk]Support UNIX.

- date `2019-05-18-1` -> `2019-09-09`
    - [(#8151)](https://github.com/microsoft/vcpkg/pull/8151) [date] Add official CMake targets support

- riffcpp `2.2.2` -> `2.2.4`
    - [(#8153)](https://github.com/microsoft/vcpkg/pull/8153) [riffcpp] Update to 2.2.4

- duktape `2.4.0-3` -> `2.4.0-4`
    - [(#8144)](https://github.com/microsoft/vcpkg/pull/8144) [duktape] Change download path of pip.

- cgicc `3.2.19-2` -> `3.2.19-3`
    - [(#8232)](https://github.com/microsoft/vcpkg/pull/8232) [cgicc]Fix linux build.

- graphicsmagick `1.3.32-1` -> `1.3.33`
    - [(#8256)](https://github.com/microsoft/vcpkg/pull/8256) [graphicsmagick] updated to 1.3.33

- ecsutil `1.0.7.2` -> `1.0.7.3`
    - [(#8253)](https://github.com/microsoft/vcpkg/pull/8253) update for ECSUtil 1.0.7.3

- cpp-redis `4.3.1-1` -> `4.3.1-2`
    - [(#8245)](https://github.com/microsoft/vcpkg/pull/8245) [simpleini cpp-redis tacopie] ports update

- simpleini `2018-08-31-1` -> `2018-08-31-2`
    - [(#8245)](https://github.com/microsoft/vcpkg/pull/8245) [simpleini cpp-redis tacopie] ports update

- tacopie `3.2.0-1` -> `3.2.0-2`
    - [(#8245)](https://github.com/microsoft/vcpkg/pull/8245) [simpleini cpp-redis tacopie] ports update

- cairo `1.16.0-1` -> `1.16.0-2`
    - [(#8249)](https://github.com/microsoft/vcpkg/pull/8249) [cairo]Add feature X11.

- tinynpy `1.0.0-2` -> `1.0.0-3`
    - [(#8274)](https://github.com/microsoft/vcpkg/pull/8274) [tinynpy] update

- io2d `2019-07-11` -> `2019-07-11-1`
    - [(#8251)](https://github.com/microsoft/vcpkg/pull/8251) [io2d]Fix linux build: add dependency cairo[x11].

- linenoise-ng `4754bee2d8eb3` -> `4754bee2d8eb3-1`
    - [(#8276)](https://github.com/microsoft/vcpkg/pull/8276) [linenoise-ng] Fix flaky config

- zeromq `2019-07-09-1` -> `2019-09-20`
    - [(#8119)](https://github.com/microsoft/vcpkg/pull/8119) [zeromq] Update to 2019-09-13

- basisu `1.11-1` -> `1.11-2`
    - [(#8289)](https://github.com/microsoft/vcpkg/pull/8289) [basisu] Updating with latest upstream changes

- doctest `2.3.4` -> `2.3.5`
    - [(#8295)](https://github.com/microsoft/vcpkg/pull/8295) [doctest] Update library to 2.3.5

- mbedtls `2.16.2` -> `2.16.3`
    - [(#8296)](https://github.com/microsoft/vcpkg/pull/8296) [mbedtls] Update library to 2.16.3

- pugixml `1.9-3` -> `1.10`
    - [(#8297)](https://github.com/microsoft/vcpkg/pull/8297) [pugixml] Update library to 1.10

- armadillo `2019-04-16-4` -> `2019-04-16-5`
    - [(#8299)](https://github.com/microsoft/vcpkg/pull/8299) [armadillo] Fix configure_file failed

- parallel-hashmap `1.23` -> `1.24`
    - [(#8301)](https://github.com/microsoft/vcpkg/pull/8301) [parallel-hashmap] Update library to 1.24

- realsense2 `2.22.0-1` -> `2.22.0-2`
    - [(#8303)](https://github.com/microsoft/vcpkg/pull/8303) [realsense2] fix dependency glfw3 and mismatching number of debug and release binaries

- ffmpeg `4.1-11` -> `4.2`
    - [(#8021)](https://github.com/microsoft/vcpkg/pull/8021) [ffmpeg] update to 4.2

- open62541 `0.3.0-3` -> `0.3.0-4`
    - [(#8252)](https://github.com/microsoft/vcpkg/pull/8252) [open62541] fix dynamic build

- librdkafka `1.1.0-1` -> `1.2.0-2`
    - [(#8307)](https://github.com/microsoft/vcpkg/pull/8307) [librdkafka] Update library to 1.2.0
    - [(#8355)](https://github.com/microsoft/vcpkg/pull/8355) [librdkafka] Add vcpkg-cmake-wrapper.cmake

- chartdir `6.3.1` -> `6.3.1-1`
    - [(#8308)](https://github.com/microsoft/vcpkg/pull/8308) [chartdir] fix hash for osx

- mpfr `4.0.1` -> `4.0.2-1`
    - [(#8324)](https://github.com/microsoft/vcpkg/pull/8324) update mpfr to 4.0.2 and fix build on osx

- cuda `9.0` -> `10.1`
    - [(#7536)](https://github.com/microsoft/vcpkg/pull/7536) [cudnn] add port and enable it in darknet

- darknet `0.2.5-6` -> `0.2.5.1`
    - [(#7536)](https://github.com/microsoft/vcpkg/pull/7536) [cudnn] add port and enable it in darknet

- opencv4 `4.1.1-1` -> `4.1.1-2`
    - [(#7536)](https://github.com/microsoft/vcpkg/pull/7536) [cudnn] add port and enable it in darknet

- libiconv `1.15-5` -> `1.15-6`
    - [(#8312)](https://github.com/microsoft/vcpkg/pull/8312) [libiconv] Guard imported targets in non-Windows

- gsoap `2.8.87-1` -> `2.8.93-1`
    - [(#8338)](https://github.com/microsoft/vcpkg/pull/8338) [gSoap] Update to 2.8.93

- arrow `0.14.1` -> `0.14.1-1`
    - [(#8263)](https://github.com/microsoft/vcpkg/pull/8263) [arrow]Fix build error on Visual Studio 2019.

- sol2 `3.0.3` -> `3.0.3-1`
    - [(#8243)](https://github.com/microsoft/vcpkg/pull/8243) [sol2]Fix using namespace.

- alembic `1.7.11-4` -> `1.7.11-5`
    - [(#8331)](https://github.com/microsoft/vcpkg/pull/8331) [many ports] Warning to VCPKG long build path
    - [(#8379)](https://github.com/microsoft/vcpkg/pull/8379) [alembic,geogram,openimageio]: openexr and libraw debug linkage, minor fix for geogram

- avro-c `1.8.2-2` -> `1.8.2-3`
    - [(#8331)](https://github.com/microsoft/vcpkg/pull/8331) [many ports] Warning to VCPKG long build path

- aws-sdk-cpp `1.7.142` -> `1.7.142-1`
    - [(#8331)](https://github.com/microsoft/vcpkg/pull/8331) [many ports] Warning to VCPKG long build path

- boost-system `1.70.0` -> `1.70.0-1`
    - [(#8331)](https://github.com/microsoft/vcpkg/pull/8331) [many ports] Warning to VCPKG long build path

- cgal `4.14-2` -> `4.14-3`
    - [(#8331)](https://github.com/microsoft/vcpkg/pull/8331) [many ports] Warning to VCPKG long build path

- eigen3 `3.3.7-2` -> `3.3.7-3`
    - [(#8331)](https://github.com/microsoft/vcpkg/pull/8331) [many ports] Warning to VCPKG long build path

- itk `5.0.1` -> `5.0.1-1`
    - [(#8331)](https://github.com/microsoft/vcpkg/pull/8331) [many ports] Warning to VCPKG long build path

- kinectsdk2 `2.0-1` -> `2.0-2`
    - [(#8331)](https://github.com/microsoft/vcpkg/pull/8331) [many ports] Warning to VCPKG long build path

- ompl `1.4.2-1` -> `1.4.2-2`
    - [(#8331)](https://github.com/microsoft/vcpkg/pull/8331) [many ports] Warning to VCPKG long build path

- openmvg `1.4-5` -> `1.4-6`
    - [(#8331)](https://github.com/microsoft/vcpkg/pull/8331) [many ports] Warning to VCPKG long build path

- curl `7.65.2-1` -> `7.66.0`
    - [(#7331)](https://github.com/microsoft/vcpkg/pull/7331) [curl] Update to 7.66.0

- halide `release_2018_02_15-1` -> `release_2019_08_27`
    - [(#8102)](https://github.com/microsoft/vcpkg/pull/8102) [halide]Upgrade to release_2019_08_27.

- boost-accumulators `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-algorithm `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-align `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-any `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-array `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-asio `1.70.0-2` -> `1.71.0-1`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-assert `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-assign `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-atomic `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-beast `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-bimap `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-bind `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-callable-traits `2.3.2` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-chrono `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-circular-buffer `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-compatibility `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-compute `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-concept-check `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-config `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-container-hash `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-container `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-context `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-contract `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-conversion `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-convert `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-core `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-coroutine `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-coroutine2 `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-crc `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-date-time `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-detail `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-disjoint-sets `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-dll `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-dynamic-bitset `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-endian `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-exception `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-fiber `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-filesystem `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-flyweight `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-foreach `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-format `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-function-types `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-function `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-functional `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-fusion `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-geometry `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-gil `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-graph-parallel `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-graph `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- boost-hana `1.70.0` -> `1.71.0`
    - [(#7959)](https://github.com/microsoft/vcpkg/pull/7959) [boost] Update to 1.71.0

- hpx `1.3.0-1` -> `1.3.0-2`
    - [(#8259)](https://github.com/microsoft/vcpkg/pull/8259) [hpx] Redirect --head to `stable`

- assimp `4.1.0-8` -> `5.0.0`
    - [(#8370)](https://github.com/microsoft/vcpkg/pull/8370) [assimp] Update the version to 5.0.0
    - [(#8381)](https://github.com/microsoft/vcpkg/pull/8381) [assimp] Update the version

- angle `2019-06-13` -> `2019-07-19-2`
    - [(#7329)](https://github.com/microsoft/vcpkg/pull/7329) [angle] Update to the latest commit.
    - [(#8395)](https://github.com/microsoft/vcpkg/pull/8395) drop useless patch

</details>

-- vcpkg team vcpkg@microsoft.com TUE, 01 Oct 22:00:00 -0800",68312233
78,False,False,2019-08-30T18:53:11Z,2019-09-10T08:13:39Z,"vcpkg (2019.08.31)
---
#### Total port count: 1169
#### Total port count per triplet (tested): 
|triplet|ports available|
|---|---|
|**x64-windows**|1099|
|x86-windows|1085|
|x64-windows-static|987|
|**x64-linux**|930|
|**x64-osx**|876|
|arm64-windows|726|
|x64-uwp|595|
|arm-uwp|571|

#### The following commands and options have been updated:
- `depend-info`
    - `--max-recurse` ***[NEW OPTION]***: Set the max depth of recursion for listing dependencies 
    - `--sort` ***[NEW OPTION]***: Sort the list of dependencies by  `lexicographical`, `topological`, and `reverse` (topological) order
    - `--show-depth` ***[NEW OPTION]***: Display the depth of each dependency in the list
      - [(#7643)](https://github.com/microsoft/vcpkg/pull/7643) [depend-info] Fix bugs, add `--sort`, `--show-depth` and `--max-recurse` options
- `install --only-downloads` ***[NEW OPTION]***
    - Download sources for a package and its dependencies and don't build them
      - [(#7950)](https://github.com/microsoft/vcpkg/pull/7950) [vcpkg install] Enable Download Mode ⏬

#### The following documentation has been updated:
- [Index](docs/index.md)
    - [(#7506)](https://github.com/microsoft/vcpkg/pull/7506) Update tests, and add documentation!
    - [(#7821)](https://github.com/microsoft/vcpkg/pull/7821) [vcpkg docs] More tool maintainer docs! 🐱‍👤
- [Tool maintainers: Testing](docs/tool-maintainers/testing.md) ***[NEW]***
    - [(#7506)](https://github.com/microsoft/vcpkg/pull/7506) Update tests, and add documentation!
    - [(#7821)](https://github.com/microsoft/vcpkg/pull/7821) [vcpkg docs] More tool maintainer docs! 🐱‍👤
- [Examples: Overlay triplets example
](docs/examples/overlay-triplets-linux-dynamic.md)
    - [(#7502)](https://github.com/microsoft/vcpkg/pull/7502) [vcpkg-docs] Reword and reorganize overlay-triplets-linux-dynamic.md
- [Portfile helper functions](docs/maintainers/portfile-functions.md)
    - [(#7558)](https://github.com/microsoft/vcpkg/pull/7558) [vcpkg_check_features] Set output variable explicitly and allow reverse-logic check
    - [(#7950)](https://github.com/microsoft/vcpkg/pull/7950) [vcpkg install] Enable Download Mode ⏬
- [`vcpkg_check_features`](docs/maintainers/vcpkg_check_features.md)
    - [(#7558)](https://github.com/microsoft/vcpkg/pull/7558) [vcpkg_check_features] Set output variable explicitly and allow reverse-logic check
- [`vcpkg_configure_cmake`](docs/maintainers/vcpkg_configure_cmake.md)
    - [(#7558)](https://github.com/microsoft/vcpkg/pull/7558) [vcpkg_check_features] Set output variable explicitly and allow reverse-logic check
- [`vcpkg_pretiffy_command`](docs/maintainers/vcpkg_prettify_command.md) ***[NEW]***
    - [(#7558)](https://github.com/microsoft/vcpkg/pull/7558) [vcpkg_check_features] Set output variable explicitly and allow reverse-logic check
- [Maintainer Guidelines and Policies](docs/maintainers/maintainer-guide.md)
    - [(#7751)](https://github.com/microsoft/vcpkg/pull/7751) Add guideline for overriding `VCPKG_<VARIABLE>`
- [Tool maintainers: Benchmarking](docs/tool-maintainers/benchmarking.md) ***[NEW]***
    - [(#7821)](https://github.com/microsoft/vcpkg/pull/7821) [vcpkg docs] More tool maintainer docs! 🐱‍👤
- [Tool maintainers: Layout of the vcpkg source tree](docs/tool-maintainers/layout.md) ***[NEW]***
    - [(#7821)](https://github.com/microsoft/vcpkg/pull/7821) [vcpkg docs] More tool maintainer docs! 🐱‍👤
- [`vcpkg_common_definitions`](docs/maintainers/vcpkg_common_definitions.md) ***[NEW]***
    - [(#7950)](https://github.com/microsoft/vcpkg/pull/7950) [vcpkg install] Enable Download Mode ⏬
- [`vcpkg_execute_required_process`](docs/maintainers/vcpkg_execute_required_process.md)
    - [(#7950)](https://github.com/microsoft/vcpkg/pull/7950) [vcpkg install] Enable Download Mode ⏬
- [`vcpkg_fail_port_install`](docs/maintainers/vcpkg_fail_port_install.md) ***[NEW]***
    - [(#7950)](https://github.com/microsoft/vcpkg/pull/7950) [vcpkg install] Enable Download Mode ⏬

#### The following *remarkable* changes have been made to vcpkg's infrastructure:
- CONTROL files extended syntax
  - The `Build-Depends` field now supports logical expressions as well as line breaks
    - [(#7508)](https://github.com/microsoft/vcpkg/pull/7508) Improve logical evaluation of dependency qualifiers
    - [(#7863)](https://github.com/microsoft/vcpkg/pull/7863) Fix list parsing logic and add error messages
- Quality-of-Life improvements for portfile maintainers 
  - [(#7601)](https://github.com/microsoft/vcpkg/pull/7601) [vcpkg/cmake] Added a function to fail from portfiles in a default way
  - [(#7600)](https://github.com/microsoft/vcpkg/pull/7600) [vcpkg] QoL: add target dependent library prefix/suffix variables and enable find_library for portfiles
  - [(#7773)](https://github.com/microsoft/vcpkg/pull/7773) [vcpkg] QoL: Make find_library useable without errors to console.
  - [(#7599)](https://github.com/microsoft/vcpkg/pull/7599) [vcpkg] QoL: add host/target dependent variables for executable suffixes 

#### The following *additional* changes have been made to vcpkg's infrastructure:
- [(#4572)](https://github.com/microsoft/vcpkg/pull/4572) Change CMakeLists.txt in toolsrc to allow compiling with llvm toolset
- [(#7305)](https://github.com/microsoft/vcpkg/pull/7305) [vcpkg] Public ABI override option
- [(#7307)](https://github.com/microsoft/vcpkg/pull/7307) [vcpkg] Always calculate ABI tags
- [(#7491)](https://github.com/microsoft/vcpkg/pull/7491) Handle response files with Windows line-endings properly
- [(#7501)](https://github.com/microsoft/vcpkg/pull/7501) Add July changelog
- [(#7506)](https://github.com/microsoft/vcpkg/pull/7506) Update tests, and add documentation!
- [(#7558)](https://github.com/microsoft/vcpkg/pull/7558) [vcpkg_check_features] Set output variable explicitly and allow reverse-logic check
- [(#7568)](https://github.com/microsoft/vcpkg/pull/7568) [tensorflow] Add new port for linux
- [(#7570)](https://github.com/microsoft/vcpkg/pull/7570) [vcpkg] Make `RealFilesystem::remove_all` much, much faster, and start benchmarking
- [(#7587)](https://github.com/microsoft/vcpkg/pull/7587) [vcpkg] Revert accidental removal of powershell-core usage in bb3a9ddb6ec917f54
- [(#7619)](https://github.com/microsoft/vcpkg/pull/7619) [vcpkg] Fix `.vcpkg-root` detection issue
- [(#7620)](https://github.com/microsoft/vcpkg/pull/7620) [vcpkg] Fix warnings in `files.{h,cpp}` build under /W4
- [(#7623)](https://github.com/microsoft/vcpkg/pull/7623) Fix VS 2019 detection bug
- [(#7637)](https://github.com/microsoft/vcpkg/pull/7637) [vcpkg] Fix the build on VS2015 debug
- [(#7638)](https://github.com/microsoft/vcpkg/pull/7638) [vcpkg] Make CMakelists nicer 😁
- [(#7687)](https://github.com/microsoft/vcpkg/pull/7687) [vcpkg] Port toolchains
- [(#7754)](https://github.com/microsoft/vcpkg/pull/7754) [vcpkg] Allow multiple spaces in a comma list
- [(#7757)](https://github.com/microsoft/vcpkg/pull/7757) [vcpkg] Switch to internal hash algorithms 🐱‍💻
- [(#7793)](https://github.com/microsoft/vcpkg/pull/7793) Allow redirection of the scripts folder
- [(#7798)](https://github.com/microsoft/vcpkg/pull/7798) [vcpkg] Fix build on FreeBSD 😈
- [(#7816)](https://github.com/microsoft/vcpkg/pull/7816) [vcpkg] Fix gcc-9 warning
- [(#7864)](https://github.com/microsoft/vcpkg/pull/7864) [vcpkg] Move `do_build_package_and_clean_buildtrees()` above generating vcpkg_abi_info.txt so it will be included in the package.
- [(#7930)](https://github.com/microsoft/vcpkg/pull/7930) [vcpkg] fix bug in StringView::operator== 😱
<details>
<summary><b>The following 63 ports have been added:</b></summary>

|port|version|
|---|---|
|[riffcpp](https://github.com/microsoft/vcpkg/pull/7509) [#7541](https://github.com/microsoft/vcpkg/pull/7541) [#7859](https://github.com/microsoft/vcpkg/pull/7859) | 2.2.2
|[easyhook](https://github.com/microsoft/vcpkg/pull/7487)| 2.7.6789.0
|[brigand](https://github.com/microsoft/vcpkg/pull/7518)| 1.3.0
|[ctbignum](https://github.com/microsoft/vcpkg/pull/7512)| 2019-08-02
|[gaussianlib](https://github.com/microsoft/vcpkg/pull/7542)| 2019-08-04
|[tinycthread](https://github.com/microsoft/vcpkg/pull/7565)| 2019-08-06
|[libcerf](https://github.com/microsoft/vcpkg/pull/7320)| 1.13
|[tinynpy](https://github.com/microsoft/vcpkg/pull/7393)| 1.0.0-2
|[googleapis](https://github.com/microsoft/vcpkg/pull/7557) [#7703](https://github.com/microsoft/vcpkg/pull/7703) | 0.1.3
|[pdqsort](https://github.com/microsoft/vcpkg/pull/7464)| 2019-07-30
|[discount](https://github.com/microsoft/vcpkg/pull/7400)| 2.2.6
|[duckx](https://github.com/microsoft/vcpkg/pull/7561)| 2019-08-06
|[opencv3](https://github.com/microsoft/vcpkg/pull/5169) [#7581](https://github.com/microsoft/vcpkg/pull/7581) [#7658](https://github.com/microsoft/vcpkg/pull/7658) [#7925](https://github.com/microsoft/vcpkg/pull/7925) | 3.4.7-1
|[opencv4](https://github.com/microsoft/vcpkg/pull/5169) [#7558](https://github.com/microsoft/vcpkg/pull/7558) [#7581](https://github.com/microsoft/vcpkg/pull/7581) [#7658](https://github.com/microsoft/vcpkg/pull/7658) | 4.1.1-1
|[tiny-bignum-c](https://github.com/microsoft/vcpkg/pull/7531)| 2019-07-31
|[tgc](https://github.com/microsoft/vcpkg/pull/7644)| 2019-08-11
|[bento4](https://github.com/microsoft/vcpkg/pull/7595)| 1.5.1-628
|[dbow2](https://github.com/microsoft/vcpkg/pull/7552)| 2019-08-05
|[tiny-aes-c](https://github.com/microsoft/vcpkg/pull/7530)| 2019-07-31
|[drlibs](https://github.com/microsoft/vcpkg/pull/7656)| 2019-08-12
|[nt-wrapper](https://github.com/microsoft/vcpkg/pull/7633)| 2019-08-10
|[xorstr](https://github.com/microsoft/vcpkg/pull/7631)| 2019-08-10
|[lazy-importer](https://github.com/microsoft/vcpkg/pull/7630)| 2019-08-10
|[plf-colony](https://github.com/microsoft/vcpkg/pull/7627)| 2019-08-10
|[plf-list](https://github.com/microsoft/vcpkg/pull/7627)| 2019-08-10
|[plf-nanotimer](https://github.com/microsoft/vcpkg/pull/7627)| 2019-08-10
|[plf-stack](https://github.com/microsoft/vcpkg/pull/7627)| 2019-08-10
|[tiny-regex-c](https://github.com/microsoft/vcpkg/pull/7626)| 2019-07-31
|[hayai](https://github.com/microsoft/vcpkg/pull/7624)| 2019-08-10
|[yasm](https://github.com/microsoft/vcpkg/pull/7478)| 1.3.0
|[fast-cpp-csv-parser](https://github.com/microsoft/vcpkg/pull/7681)| 2019-08-14
|[wg21-sg14](https://github.com/microsoft/vcpkg/pull/7663)| 2019-08-13
|[pistache](https://github.com/microsoft/vcpkg/pull/7547)| 2019-08-05
|[hfsm2](https://github.com/microsoft/vcpkg/pull/7516)| beta7
|[mpmcqueue](https://github.com/microsoft/vcpkg/pull/7437)| 2019-07-26
|[spscqueue](https://github.com/microsoft/vcpkg/pull/7437)| 2019-07-26
|[tinkerforge](https://github.com/microsoft/vcpkg/pull/7523)| 2.1.25
|[field3d](https://github.com/microsoft/vcpkg/pull/7594)| 1.7.2
|[libsvm](https://github.com/microsoft/vcpkg/pull/7664)| 323
|[nanort](https://github.com/microsoft/vcpkg/pull/7778)| 2019-08-20
|[libspatialindex](https://github.com/microsoft/vcpkg/pull/7762)| 1.9.0
|[qtkeychain](https://github.com/microsoft/vcpkg/pull/7760)| v0.9.1
|[sparsehash](https://github.com/microsoft/vcpkg/pull/7772)| 2.0.3
|[tensorflow-cc](https://github.com/microsoft/vcpkg/pull/7568)| 1.14
|[qt-advanced-docking-system](https://github.com/microsoft/vcpkg/pull/7621)| 2019-08-14
|[quickfast](https://github.com/microsoft/vcpkg/pull/7814)| 1.5
|[mp3lame](https://github.com/microsoft/vcpkg/pull/7830)| 3.100
|[quickfix](https://github.com/microsoft/vcpkg/pull/7796)| 1.15.1
|[fplus](https://github.com/microsoft/vcpkg/pull/7883)| 0.2.3-p0
|[json5-parser](https://github.com/microsoft/vcpkg/pull/7915)| 1.0.0
|[gppanel](https://github.com/microsoft/vcpkg/pull/7868)| 2018-04-06
|[libguarded](https://github.com/microsoft/vcpkg/pull/7924)| 2019-08-27
|[cgl](https://github.com/microsoft/vcpkg/pull/7810)| 0.60.2-1
|[minifb](https://github.com/microsoft/vcpkg/pull/7766)| 2019-08-20-1
|[log4cpp](https://github.com/microsoft/vcpkg/pull/7433)| 2.9.1-1
|[chartdir](https://github.com/microsoft/vcpkg/pull/7912)| 6.3.1
|[outcome](https://github.com/microsoft/vcpkg/pull/7940)| 2.1
|[libP7Client](https://github.com/microsoft/vcpkg/pull/7605)| 5.2
|[clue](https://github.com/microsoft/vcpkg/pull/7564)| 1.0.0-alpha.7
|[status-value-lite](https://github.com/microsoft/vcpkg/pull/7563)| 1.1.0
|[type-lite](https://github.com/microsoft/vcpkg/pull/7563)| 0.1.0
|[value-ptr-lite](https://github.com/microsoft/vcpkg/pull/7563)| 0.2.1
|[kvasir-mpl](https://github.com/microsoft/vcpkg/pull/7562)| 2019-08-06
</details>

<details>
<summary><b>The following 199 ports have been updated:</b></summary>

- pcl `1.9.1-5` -> `1.9.1-8`
    - [(#7413)](https://github.com/microsoft/vcpkg/pull/7413) [pcl] Fix Build failure in linux
    - [(#7558)](https://github.com/microsoft/vcpkg/pull/7558) [vcpkg_check_features] Set output variable explicitly and allow reverse-logic check
    - [(#7700)](https://github.com/microsoft/vcpkg/pull/7700) [czmq/pcl] Fix judgment feature condition.

- xalan-c `1.11-5` -> `1.11-7`
    - [(#7496)](https://github.com/microsoft/vcpkg/pull/7496) [xalan-c] Bump version number
    - [(#7505)](https://github.com/microsoft/vcpkg/pull/7505) [xalan-c] switch to https://github.com/apache/xalan-c (#7489)

- catch2 `2.7.2-2` -> `2.9.2`
    - [(#7497)](https://github.com/microsoft/vcpkg/pull/7497) [Catch2] Update to v2.9.1
    - [(#7702)](https://github.com/microsoft/vcpkg/pull/7702) [brynet, catch2, chakracore] Update some ports version

- ade `0.1.1d` -> `0.1.1f`
    - [(#7494)](https://github.com/microsoft/vcpkg/pull/7494) Update some ports version
    - [(#7628)](https://github.com/microsoft/vcpkg/pull/7628) [ade] Update library to 0.1.1f

- harfbuzz `2.5.1-1` -> `2.5.3`
    - [(#7494)](https://github.com/microsoft/vcpkg/pull/7494) Update some ports version

- libpmemobj-cpp `1.6-1` -> `1.7`
    - [(#7494)](https://github.com/microsoft/vcpkg/pull/7494) Update some ports version

- msgpack `3.1.1` -> `3.2.0`
    - [(#7494)](https://github.com/microsoft/vcpkg/pull/7494) Update some ports version

- protobuf `3.8.0-1` -> `3.9.1`
    - [(#7494)](https://github.com/microsoft/vcpkg/pull/7494) Update some ports version
    - [(#7671)](https://github.com/microsoft/vcpkg/pull/7671) [protobuf] Update from 3.9.0 to 3.9.1

- string-theory `2.1-1` -> `2.2`
    - [(#7494)](https://github.com/microsoft/vcpkg/pull/7494) Update some ports version

- ccfits `2.5-2` -> `2.5-3`
    - [(#7484)](https://github.com/microsoft/vcpkg/pull/7484) [manyports] Regenerate patches and modify how the patches are used.

- itpp `4.3.1` -> `4.3.1-1`
    - [(#7484)](https://github.com/microsoft/vcpkg/pull/7484) [manyports] Regenerate patches and modify how the patches are used.

- mpg123 `1.25.8-5` -> `1.25.8-6`
    - [(#7484)](https://github.com/microsoft/vcpkg/pull/7484) [manyports] Regenerate patches and modify how the patches are used.

- qwt `6.1.3-6` -> `6.1.3-7`
    - [(#7484)](https://github.com/microsoft/vcpkg/pull/7484) [manyports] Regenerate patches and modify how the patches are used.

- sdl1 `1.2.15-5` -> `1.2.15-6`
    - [(#7484)](https://github.com/microsoft/vcpkg/pull/7484) [manyports] Regenerate patches and modify how the patches are used.

- gdal `2.4.1-5` -> `2.4.1-8`
    - [(#7520)](https://github.com/microsoft/vcpkg/pull/7520) [gdal] Fix duplicate pdb file
    - [(#7434)](https://github.com/microsoft/vcpkg/pull/7434) [gdal] Fix dependent ports in static builds.

- blosc `1.16.3-2` -> `1.17.0-1`
    - [(#7525)](https://github.com/microsoft/vcpkg/pull/7525) Update some ports version
    - [(#7649)](https://github.com/microsoft/vcpkg/pull/7649) [blosc] enable dependent ports to use debug builds

- boost-callable-traits `1.70.0` -> `2.3.2`
    - [(#7525)](https://github.com/microsoft/vcpkg/pull/7525) Update some ports version

- cjson `1.7.10-1` -> `1.7.12`
    - [(#7525)](https://github.com/microsoft/vcpkg/pull/7525) Update some ports version

- cppzmq `4.3.0-1` -> `4.4.1`
    - [(#7525)](https://github.com/microsoft/vcpkg/pull/7525) Update some ports version

- restinio `0.5.1-1` -> `0.6.0`
    - [(#7514)](https://github.com/microsoft/vcpkg/pull/7514) [RESTinio] updated to v.0.5.1.1
    - [(#7962)](https://github.com/microsoft/vcpkg/pull/7962) RESTinio updated to v.0.6.0

- argh `2018-12-18` -> `2018-12-18-1`
    - [(#7527)](https://github.com/microsoft/vcpkg/pull/7527) [argh] fix flaky cmake config

- libusb `1.0.22-3` -> `1.0.22-4`
    - [(#7465)](https://github.com/microsoft/vcpkg/pull/7465) [libusb] Fix using mismatched CRT_linkage/library_linkage issue.

- casclib `1.50` -> `1.50b-1`
    - [(#7522)](https://github.com/microsoft/vcpkg/pull/7522) [casclib] Added CMake targets
    - [(#7907)](https://github.com/microsoft/vcpkg/pull/7907) [casclib] Update library to 1.50b

- opencv `3.4.3-9` -> `4.1.1-1`
    - [(#7499)](https://github.com/microsoft/vcpkg/pull/7499) Add feature halide to OpenCV.
    - [(#5169)](https://github.com/microsoft/vcpkg/pull/5169) [OpenCV] Update to v4.1.1
    - [(#7659)](https://github.com/microsoft/vcpkg/pull/7659) [opencv] Expose all features from `opencv4` in meta-package
    - [(#7558)](https://github.com/microsoft/vcpkg/pull/7558) [vcpkg_check_features] Set output variable explicitly and allow reverse-logic check

- openxr-loader `1.0.0-1` -> `1.0.0-2`
    - [(#7560)](https://github.com/microsoft/vcpkg/pull/7560) [Openxr-loader] Remove the invalid patch

- simdjson `2019-03-09` -> `2019-08-05`
    - [(#7546)](https://github.com/microsoft/vcpkg/pull/7546) [simdjson] Update to 0.2.1

- alembic `1.7.11-3` -> `1.7.11-4`
    - [(#7551)](https://github.com/microsoft/vcpkg/pull/7551) [alembic] fix hdf5 linkage

- xerces-c `3.2.2-10` -> `3.2.2-11`
    - [(#7500)](https://github.com/microsoft/vcpkg/pull/7500) [xercec-c] no symlinks in static build (#7490)
    - [(#7622)](https://github.com/microsoft/vcpkg/pull/7622) [tiff][tesseract][xerces-c] Disable unmanaged optional dependencies

- sol2 `3.0.2` -> `3.0.3`
    - [(#7545)](https://github.com/microsoft/vcpkg/pull/7545) Update sol2 portfile to 579908
    - [(#7804)](https://github.com/microsoft/vcpkg/pull/7804) [sol2] Update library to 3.0.3

- cpprestsdk `2.10.14` -> `2.10.14-1`
    - [(#7472)](https://github.com/microsoft/vcpkg/pull/7472) Repair compression dependency bugs in cpprestsdk
    - [(#7863)](https://github.com/microsoft/vcpkg/pull/7863) fix list parsing logic and add error messages

- libevent `2.1.10` -> `2.1.11`
    - [(#7515)](https://github.com/microsoft/vcpkg/pull/7515) [libevent] update to 2.1.11

- imgui `1.70-1` -> `1.72b`
    - [(#7534)](https://github.com/microsoft/vcpkg/pull/7534) Update some ports version

- mbedtls `2.15.1` -> `2.16.2`
    - [(#7534)](https://github.com/microsoft/vcpkg/pull/7534) Update some ports version

- ffmpeg `4.1-8` -> `4.1-9`
    - [(#7476)](https://github.com/microsoft/vcpkg/pull/7476) [ffmpeg] Fix debug build in Windows.
    - [(#5169)](https://github.com/microsoft/vcpkg/pull/5169) [OpenCV] Update to v4.1.1
    - [(#7608)](https://github.com/microsoft/vcpkg/pull/7608) [ffmpeg] Add feature avresample.
    - [(#7739)](https://github.com/microsoft/vcpkg/pull/7739) [ffmpeg] Fix static linking on Windows, FindFFMPEG

- kangaru `4.1.3-2` -> `4.2.0`
    - [(#7567)](https://github.com/microsoft/vcpkg/pull/7567) Updated kangaru version

- cpp-taskflow `2018-11-30` -> `2.2.0`
    - [(#7554)](https://github.com/microsoft/vcpkg/pull/7554) [cpp-taskflow] update to 2.2.0

- jsoncons `0.125.0` -> `0.132.1`
    - [(#7529)](https://github.com/microsoft/vcpkg/pull/7529) Update jsoncons to v0.131.2
    - [(#7718)](https://github.com/microsoft/vcpkg/pull/7718) [jsoncons] Update library to 0.132.1

- tinyexif `1.0.2-5` -> `1.0.2-6`
    - [(#7575)](https://github.com/microsoft/vcpkg/pull/7575) [TinyEXIF] fix linux/mac

- itk `5.0.0-2` -> `5.0.1`
    - [(#7241)](https://github.com/microsoft/vcpkg/pull/7241) ITK portfile support legacy user code by default
    - [(#7586)](https://github.com/microsoft/vcpkg/pull/7586) [itk] Update library from 5.0.0 to 5.0.1

- stxxl `2018-11-15-1` -> `2018-11-15-2`
    - [(#7330)](https://github.com/microsoft/vcpkg/pull/7330) [stxxl] compilation fix

- chakracore `1.11.9` -> `1.11.12`
    - [(#7576)](https://github.com/microsoft/vcpkg/pull/7576) [chakracore] Update library to 1.11.11
    - [(#7702)](https://github.com/microsoft/vcpkg/pull/7702) [brynet, catch2, chakracore] Update some ports version

- qhull `7.3.2` -> `7.3.2-1`
    - [(#7370)](https://github.com/microsoft/vcpkg/pull/7370) [Qhulluwp] fix uwp building

- netcdf-c `4.7.0-3` -> `4.7.0-4`
    - [(#7578)](https://github.com/microsoft/vcpkg/pull/7578) [netcdf-c] correctly fix hdf5 linkage

- google-cloud-cpp `0.11.0` -> `0.12.0`
    - [(#7557)](https://github.com/microsoft/vcpkg/pull/7557) Update google-cloud-cpp to 0.12.0.

- stormlib `9.22` -> `2019-05-10`
    - [(#7409)](https://github.com/microsoft/vcpkg/pull/7409) [stormlib] Add targets and streamline build

- openimageio `2.0.8` -> `2019-08-08-2`
    - [(#7419)](https://github.com/microsoft/vcpkg/pull/7419) [openimageio] Fix feature libraw build errors
    - [(#7588)](https://github.com/microsoft/vcpkg/pull/7588) [openimageio] find_package support
    - [(#7747)](https://github.com/microsoft/vcpkg/pull/7747) [openimageio] Fix find correct debug/release openexr libraries.

- librdkafka `1.1.0` -> `1.1.0-1`
    - [(#7469)](https://github.com/microsoft/vcpkg/pull/7469) Librdkafka snappy
    - [(#7558)](https://github.com/microsoft/vcpkg/pull/7558) [vcpkg_check_features] Set output variable explicitly and allow reverse-logic check

- open62541 `0.3.0-2` -> `0.3.0-3`
    - [(#7607)](https://github.com/microsoft/vcpkg/pull/7607) [open62541] Fix flakiness/bugginess

- jsonnet `2019-05-08` -> `2019-05-08-1`
    - [(#7587)](https://github.com/microsoft/vcpkg/pull/7587) [vcpkg] Revert accidental removal of powershell-core usage in bb3a9ddb6ec917f54
    - [(#7374)](https://github.com/microsoft/vcpkg/pull/7374) [jsonnet] Upgrade version to 0.13.0

- expat `2.2.6` -> `2.2.7`
    - [(#7596)](https://github.com/microsoft/vcpkg/pull/7596) [expat] Update library to 2.2.7

- aws-lambda-cpp `0.1.0-1` -> `0.1.0-2`
    - [(#7601)](https://github.com/microsoft/vcpkg/pull/7601) [vcpkg/cmake] Added a function to fail from portfiles in a default way

- rocksdb `6.1.2` -> `6.1.2-1`
    - [(#7452)](https://github.com/microsoft/vcpkg/pull/7452) [rocksdb] Change linkage type to static.
    - [(#7558)](https://github.com/microsoft/vcpkg/pull/7558) [vcpkg_check_features] Set output variable explicitly and allow reverse-logic check
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- freeimage `3.18.0-6` -> `3.18.0-7`
    - [(#5169)](https://github.com/microsoft/vcpkg/pull/5169) [OpenCV] Update to v4.1.1

- gdcm `3.0.0-3` -> `3.0.0-4`
    - [(#5169)](https://github.com/microsoft/vcpkg/pull/5169) [OpenCV] Update to v4.1.1

- ogre `1.12.0-1` -> `1.12.1`
    - [(#5169)](https://github.com/microsoft/vcpkg/pull/5169) [OpenCV] Update to v4.1.1
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- pthreads `3.0.0-2` -> `3.0.0-3`
    - [(#5169)](https://github.com/microsoft/vcpkg/pull/5169) [OpenCV] Update to v4.1.1

- qt5 `5.12.3` -> `5.12.3-1`
    - [(#5169)](https://github.com/microsoft/vcpkg/pull/5169) [OpenCV] Update to v4.1.1
    - [(#7642)](https://github.com/microsoft/vcpkg/pull/7642) [qt5] Only build qt5-activeqt on windows

- zxing-cpp `3.3.3-5` -> `3.3.3-6`
    - [(#5169)](https://github.com/microsoft/vcpkg/pull/5169) [OpenCV] Update to v4.1.1

- tesseract `4.1.0-1` -> `4.1.0-2`
    - [(#7622)](https://github.com/microsoft/vcpkg/pull/7622) [tiff][tesseract][xerces-c] Disable unmanaged optional dependencies

- tiff `4.0.10-6` -> `4.0.10-7`
    - [(#7622)](https://github.com/microsoft/vcpkg/pull/7622) [tiff][tesseract][xerces-c] Disable unmanaged optional dependencies

- osg `3.6.3-1` -> `3.6.4`
    - [(#7653)](https://github.com/microsoft/vcpkg/pull/7653) [osg] Update osg version to 3.6.4
    - [(#7677)](https://github.com/microsoft/vcpkg/pull/7677) [osg] Fix Applying patch failed

- cppgraphqlgen `3.0.0` -> `3.0.2`
    - [(#7639)](https://github.com/microsoft/vcpkg/pull/7639) [cppgraphqlgen] Update with matching PEGTL

- pegtl `3.0.0-pre` -> `3.0.0-pre-697aaa0`
    - [(#7639)](https://github.com/microsoft/vcpkg/pull/7639) [cppgraphqlgen] Update with matching PEGTL

- monkeys-audio `4.3.3-1` -> `4.8.3`
    - [(#7634)](https://github.com/microsoft/vcpkg/pull/7634) [monkeys-audio] Update library to 4.8.3

- directxmesh `apr2019` -> `jun2019-1`
    - [(#7665)](https://github.com/microsoft/vcpkg/pull/7665) [directxtk][directxtk12][directxmesh][directxtex] Updated to June version and improved platform toolset support
    - [(#7869)](https://github.com/microsoft/vcpkg/pull/7869) [directxmesh] Update library to aug2019

- directxtex `apr2019` -> `jun2019-1`
    - [(#7665)](https://github.com/microsoft/vcpkg/pull/7665) [directxtk][directxtk12][directxmesh][directxtex] Updated to June version and improved platform toolset support
    - [(#7870)](https://github.com/microsoft/vcpkg/pull/7870) [directxtex] Update library to aug2019

- directxtk `apr2019-1` -> `jun2019-1`
    - [(#7665)](https://github.com/microsoft/vcpkg/pull/7665) [directxtk][directxtk12][directxmesh][directxtex] Updated to June version and improved platform toolset support
    - [(#7871)](https://github.com/microsoft/vcpkg/pull/7871) [directxtk] Update library to aug2019

- directxtk12 `dec2016-1` -> `jun2019-1`
    - [(#7665)](https://github.com/microsoft/vcpkg/pull/7665) [directxtk][directxtk12][directxmesh][directxtex] Updated to June version and improved platform toolset support
    - [(#7872)](https://github.com/microsoft/vcpkg/pull/7872) [directxtk12] Update library to aug2019

- usockets `0.1.2` -> `0.3.1`
    - [(#7662)](https://github.com/microsoft/vcpkg/pull/7662) [usockets] upgrade to v0.3.1

- dimcli `4.1.0` -> `5.0.0`
    - [(#7651)](https://github.com/microsoft/vcpkg/pull/7651) [dimcli] Fix build error C2220
    - [(#7785)](https://github.com/microsoft/vcpkg/pull/7785) [dimcli] Update library to 5.0.0

- czmq `2019-06-10-1` -> `2019-06-10-3`
    - [(#7558)](https://github.com/microsoft/vcpkg/pull/7558) [vcpkg_check_features] Set output variable explicitly and allow reverse-logic check
    - [(#7700)](https://github.com/microsoft/vcpkg/pull/7700) [czmq/pcl] Fix judgment feature condition.

- darknet `0.2.5-5` -> `0.2.5-6`
    - [(#7558)](https://github.com/microsoft/vcpkg/pull/7558) [vcpkg_check_features] Set output variable explicitly and allow reverse-logic check

- mimalloc `2019-06-25` -> `2019-06-25-1`
    - [(#7558)](https://github.com/microsoft/vcpkg/pull/7558) [vcpkg_check_features] Set output variable explicitly and allow reverse-logic check

- mongo-c-driver `1.14.0-3` -> `1.14.0-3-1`
    - [(#7558)](https://github.com/microsoft/vcpkg/pull/7558) [vcpkg_check_features] Set output variable explicitly and allow reverse-logic check

- oniguruma `6.9.2-2` -> `6.9.3`
    - [(#7558)](https://github.com/microsoft/vcpkg/pull/7558) [vcpkg_check_features] Set output variable explicitly and allow reverse-logic check
    - [(#7721)](https://github.com/microsoft/vcpkg/pull/7721) [oniguruma] Update library 6.9.3

- paho-mqttpp3 `1.0.1` -> `1.0.1-2`
    - [(#7558)](https://github.com/microsoft/vcpkg/pull/7558) [vcpkg_check_features] Set output variable explicitly and allow reverse-logic check
    - [(#7769)](https://github.com/microsoft/vcpkg/pull/7769) [paho-mqttpp3] Fix missing reference to C library headers

- xsimd `7.2.3-1` -> `7.2.3-2`
    - [(#7558)](https://github.com/microsoft/vcpkg/pull/7558) [vcpkg_check_features] Set output variable explicitly and allow reverse-logic check

- xtensor `0.20.7-1` -> `0.20.7-2`
    - [(#7558)](https://github.com/microsoft/vcpkg/pull/7558) [vcpkg_check_features] Set output variable explicitly and allow reverse-logic check

- zeromq `2019-07-09` -> `2019-07-09-1`
    - [(#7558)](https://github.com/microsoft/vcpkg/pull/7558) [vcpkg_check_features] Set output variable explicitly and allow reverse-logic check

- gtest `2019-01-04-2` -> `2019-08-14-1`
    - [(#7692)](https://github.com/microsoft/vcpkg/pull/7692) [gtest] update to 90a443f9c2437ca8a682a1ac625eba64e1d74a8a
    - [(#7316)](https://github.com/microsoft/vcpkg/pull/7316) [gtest] Re-fix port_main/port_maind libraries path and add gmock cmake files.

- physx `commit-624f2cb6c0392013d54b235d9072a49d01c3cb6c` -> `4.1.1-1`
    - [(#7679)](https://github.com/microsoft/vcpkg/pull/7679) [physx] Update to 4.1.1 (with Visual Studio 2019 support)

- libidn2 `2.1.1-1` -> `2.2.0`
    - [(#7685)](https://github.com/microsoft/vcpkg/pull/7685) [libidn2] Update to version 2.2.0.

- poco `2.0.0-pre-3` -> `1.9.2-1`
    - [(#7698)](https://github.com/microsoft/vcpkg/pull/7698) [poco] Upgrade version to 1.9.2 release.
    - [(#7892)](https://github.com/microsoft/vcpkg/pull/7892) [poco] Fix conflicts with libharu.

- osgearth `2.10.1` -> `2.10.2`
    - [(#7695)](https://github.com/microsoft/vcpkg/pull/7695) [osgearth] Fix osgearth rocksdb plugin build falied

- spdlog `1.3.1-1` -> `1.3.1-2`
    - [(#7670)](https://github.com/microsoft/vcpkg/pull/7670) [spdlog] fix cmake targets path

- libgit2 `0.28.2` -> `0.28.3`
    - [(#7669)](https://github.com/microsoft/vcpkg/pull/7669) [libgit2] Upgrade to version 0.28.3

- brynet `1.0.2` -> `1.0.3`
    - [(#7702)](https://github.com/microsoft/vcpkg/pull/7702) [brynet, catch2, chakracore] Update some ports version

- nghttp2 `1.35.0` -> `1.39.2`
    - [(#7699)](https://github.com/microsoft/vcpkg/pull/7699) [nghttp2] Upgrade to version 1.39.2

- leptonica `1.76.0-1` -> `1.78.0-1`
    - [(#7358)](https://github.com/microsoft/vcpkg/pull/7358) [leptonica] Upgrade to 1.78.0
    - [(#7712)](https://github.com/microsoft/vcpkg/pull/7712) [leptonica] Add dependency port libwebp and fix find libwebp in debug/release

- libtorrent `2019-04-19` -> `1.2.1-bcb26fd6`
    - [(#7708)](https://github.com/microsoft/vcpkg/pull/7708) [libtorrent] Update to 1.2.1-bcb26fd6

- angelscript `2.33.0-1` -> `2.33.1-1`
    - [(#7650)](https://github.com/microsoft/vcpkg/pull/7650) [angelscript] Added feature to optionally install all Angelscript standard addons

- jsoncpp `1.8.4-1` -> `1.9.1`
    - [(#7719)](https://github.com/microsoft/vcpkg/pull/7719) [jsoncpp] Update library to 1.9.1

- robin-hood-hashing `3.2.13` -> `3.4.0`
    - [(#7722)](https://github.com/microsoft/vcpkg/pull/7722) [robin-hood-hashing] Update library to 3.4.0

- sqlite-orm `1.3-1` -> `1.4`
    - [(#7723)](https://github.com/microsoft/vcpkg/pull/7723) [sqlite-orm] Update library to 1.4

- doctest `2.3.3` -> `2.3.4`
    - [(#7716)](https://github.com/microsoft/vcpkg/pull/7716) [doctest] Update library to 2.3.4

- pegtl-2 `2.8.0` -> `2.8.1`
    - [(#7715)](https://github.com/microsoft/vcpkg/pull/7715) [pegtl-2] Update library to 2.8.1

- cpp-httplib `0.2.0` -> `0.2.1`
    - [(#7714)](https://github.com/microsoft/vcpkg/pull/7714) [cpp-httplib] Update library to 0.2.1

- geographiclib `1.47-patch1-6` -> `1.47-patch1-7`
    - [(#7697)](https://github.com/microsoft/vcpkg/pull/7697) [geographiclib] Fix build error on Linux

- libmariadb `3.0.10-3` -> `3.0.10-4`
    - [(#7710)](https://github.com/microsoft/vcpkg/pull/7710) [libmariadb] Fix usage error LNK2001.

- irrlicht `1.8.4-2` -> `1.8.4-1`
    - [(#7726)](https://github.com/microsoft/vcpkg/pull/7726) Revert ""[irrlicht] use unicode path on windows (#7354)""

- cgltf `2019-04-30` -> `1.3`
    - [(#7731)](https://github.com/microsoft/vcpkg/pull/7731) [cgltf] Update library to 1.2
    - [(#7774)](https://github.com/microsoft/vcpkg/pull/7774) [cgltf] Update library to 1.3

- duktape `2.3.0-2` -> `2.4.0-3`
    - [(#7548)](https://github.com/microsoft/vcpkg/pull/7548) [ duktape] Update hash for pip.
    - [(#7873)](https://github.com/microsoft/vcpkg/pull/7873) [duktape] Update library to 2.4.0

- double-conversion `3.1.4` -> `3.1.5`
    - [(#7717)](https://github.com/microsoft/vcpkg/pull/7717) [double-conversion] Update library to 3.1.5

- libmorton `2018-19-07` -> `0.2`
    - [(#7738)](https://github.com/microsoft/vcpkg/pull/7738) [libmorton] Update library to 0.2

- clp `1.17.2-2` -> `1.17.3`
    - [(#7756)](https://github.com/microsoft/vcpkg/pull/7756) [clp] Update library to 1.17.3

- libfabric `1.7.1-1` -> `1.8.0`
    - [(#7755)](https://github.com/microsoft/vcpkg/pull/7755) [libfabric] Update library to 1.8.0

- leaf `0.2.1-2` -> `0.2.2`
    - [(#7782)](https://github.com/microsoft/vcpkg/pull/7782) [leaf] Update library to 0.2.2

- inih `44` -> `45`
    - [(#7780)](https://github.com/microsoft/vcpkg/pull/7780) [inih] Update library to 45

- clara `2019-03-29` -> `1.1.5`
    - [(#7775)](https://github.com/microsoft/vcpkg/pull/7775) [clara] Update library to 1.1.5

- distorm `2018-08-26-16e6f435-1` -> `3.4.1`
    - [(#7777)](https://github.com/microsoft/vcpkg/pull/7777) [distorm] Update library to 3.4.1

- libcopp `1.1.0-2` -> `1.2.0`
    - [(#7770)](https://github.com/microsoft/vcpkg/pull/7770) [libcopp] Update library to 1.2.0

- argparse `2019-06-10` -> `1.9`
    - [(#7753)](https://github.com/microsoft/vcpkg/pull/7753) [argparse] Update library to 1.9

- argagg `2019-01-25` -> `0.4.6`
    - [(#7752)](https://github.com/microsoft/vcpkg/pull/7752) [argagg] Update library to 0.4.6

- eastl `3.14.00` -> `3.14.01`
    - [(#7786)](https://github.com/microsoft/vcpkg/pull/7786) [eastl] Update library to 3.14.01

- fribidi `58c6cb3` -> `2019-02-04-1`
    - [(#7768)](https://github.com/microsoft/vcpkg/pull/7768) [fribidi] Fix static library suffix in windows-static

- luajit `2.0.5-1` -> `2.0.5-2`
    - [(#7764)](https://github.com/microsoft/vcpkg/pull/7764) [luajit] Separate debug/release build path and fix generate pdbs.

- ixwebsocket `4.0.3` -> `5.0.4`
    - [(#7789)](https://github.com/microsoft/vcpkg/pull/7789) [ixwebsocket] update to 5.0.4

- azure-c-shared-utility `2019-05-16.1` -> `2019-08-20.1`
    - [(#7791)](https://github.com/microsoft/vcpkg/pull/7791) [azure-iot] vcpkg update for master/public-preview release

- azure-iot-sdk-c `2019-07-01.1` -> `2019-08-20.1`
    - [(#7791)](https://github.com/microsoft/vcpkg/pull/7791) [azure-iot] vcpkg update for master/public-preview release

- azure-macro-utils-c `2019-05-16.1` -> `2019-08-20.1`
    - [(#7791)](https://github.com/microsoft/vcpkg/pull/7791) [azure-iot] vcpkg update for master/public-preview release

- azure-uamqp-c `2019-05-16.1` -> `2019-08-20.1`
    - [(#7791)](https://github.com/microsoft/vcpkg/pull/7791) [azure-iot] vcpkg update for master/public-preview release

- azure-uhttp-c `2019-05-16.1` -> `2019-08-20.1`
    - [(#7791)](https://github.com/microsoft/vcpkg/pull/7791) [azure-iot] vcpkg update for master/public-preview release

- azure-umqtt-c `2019-05-16.1` -> `2019-08-20.1`
    - [(#7791)](https://github.com/microsoft/vcpkg/pull/7791) [azure-iot] vcpkg update for master/public-preview release

- umock-c `2019-05-16.1` -> `2019-08-20.1`
    - [(#7791)](https://github.com/microsoft/vcpkg/pull/7791) [azure-iot] vcpkg update for master/public-preview release

- embree3 `3.5.2` -> `3.5.2-1`
    - [(#7767)](https://github.com/microsoft/vcpkg/pull/7767) [embree3] Fix install path

- re2 `2019-05-07-2` -> `2019-08-01`
    - [(#7808)](https://github.com/microsoft/vcpkg/pull/7808) [re2] Update library to 2019-08-01

- reproc `6.0.0-2` -> `8.0.1`
    - [(#7807)](https://github.com/microsoft/vcpkg/pull/7807) [reproc] Update library to 8.0.1

- safeint `3.20.0` -> `3.21`
    - [(#7806)](https://github.com/microsoft/vcpkg/pull/7806) [safeint] Update library to 3.21

- snowhouse `3.1.0` -> `3.1.1`
    - [(#7805)](https://github.com/microsoft/vcpkg/pull/7805) [snowhouse] Update library to 3.1.1

- spectra `0.8.0` -> `0.8.1`
    - [(#7803)](https://github.com/microsoft/vcpkg/pull/7803) [spectra] Update library to 0.8.1

- spirv-cross `2019-05-09` -> `2019-07-26`
    - [(#7802)](https://github.com/microsoft/vcpkg/pull/7802) [spirv-cross] Update library to 2019-07-26

- libmodbus `3.1.4-3` -> `3.1.6`
    - [(#7834)](https://github.com/microsoft/vcpkg/pull/7834) [libmodbus] Update library to 3.1.6

- basisu `0.0.1-1` -> `1.11-1`
    - [(#7836)](https://github.com/microsoft/vcpkg/pull/7836) [basisu] fix vcpkg version, merge upstream fixes

- range-v3 `0.5.0` -> `0.9.0-20190822`
    - [(#7845)](https://github.com/microsoft/vcpkg/pull/7845) Update range-v3 reference

- cryptopp `8.1.0-2` -> `8.2.0`
    - [(#7854)](https://github.com/microsoft/vcpkg/pull/7854) [cryptopp] Update library to 8.2.0

- lz4 `1.9.1-2` -> `1.9.2`
    - [(#7860)](https://github.com/microsoft/vcpkg/pull/7860) [lz4] Update library to 1.9.2

- wxwidgets `3.1.2-1` -> `3.1.2-2`
    - [(#7833)](https://github.com/microsoft/vcpkg/pull/7833) [wxwidgets] Windows ARM support

- args `2019-05-01` -> `2019-07-11`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- asmjit `2019-03-29` -> `2019-07-11`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- aws-c-common `0.3.11-1` -> `0.4.1`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- aws-sdk-cpp `1.7.116` -> `1.7.142`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- bitsery `4.6.0` -> `5.0.0`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- botan `2.9.0-2` -> `2.11.0`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- breakpad `2019-05-08` -> `2019-07-11`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- chipmunk `7.0.2` -> `7.0.3`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- console-bridge `0.3.2-4` -> `0.4.3-1`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- coroutine `1.4.1-1` -> `1.4.3`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- crc32c `1.0.7-1` -> `1.1.0`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- exprtk `2019-03-29` -> `2019-07-11`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- fastcdr `1.0.9-1` -> `1.0.10`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09
    - [(#7862)](https://github.com/microsoft/vcpkg/pull/7862) [fastcdr] Update library 1.0.10

- fizz `2019.05.20.00-1` -> `2019.07.08.00`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- folly `2019.05.20.00-1` -> `2019.06.17.00`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- glad `0.1.30` -> `0.1.31`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- gmmlib `19.1.2` -> `19.2.3`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- graphite2 `1.3.12-1` -> `1.3.13`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- grpc `1.21.1-1` -> `1.22.0`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- io2d `0.1-2` -> `2019-07-11`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- libarchive `3.3.3-3` -> `3.4.0`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- libpqxx `6.4.4` -> `6.4.5`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- libssh2 `1.8.2` -> `1.9.0`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- libuv `1.29.1` -> `1.30.1`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- luabridge `2.3.1` -> `2.3.2`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- matio `1.5.15` -> `1.5.16`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- mosquitto `1.6.2-2` -> `1.6.3`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- ms-gsl `2019-04-19` -> `2019-07-11`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- nmslib `1.7.3.6-1` -> `1.8.1`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- nuklear `2019-03-29` -> `2019-07-11`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- openvr `1.4.18` -> `1.5.17`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- orc `1.5.5-1` -> `1.5.6`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09
    - [(#7908)](https://github.com/microsoft/vcpkg/pull/7908) Add homepage for orc

- parson `2019-04-19` -> `2019-07-11`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- piex `2018-03-13-1` -> `2019-07-11`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- ptex `2.1.28-1` -> `2.3.2`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- pybind11 `2.2.4` -> `2.3.0`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- rs-core-lib `2019-05-07` -> `2019-07-11`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- shogun `6.1.3-3` -> `6.1.4`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- stb `2019-05-07` -> `2019-07-11`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- taocpp-json `2019-05-08` -> `2019-07-11`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- tbb `2019_U7-1` -> `2019_U8`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- telnetpp `1.2.4-1` -> `2.0`
    - [(#7217)](https://github.com/microsoft/vcpkg/pull/7217) [many ports] Updates 2019.07.09

- blaze `3.5` -> `3.6`
    - [(#7878)](https://github.com/microsoft/vcpkg/pull/7878) [blaze] Update to Blaze 3.6

- glfw3 `3.3-1` -> `3.3-2`
    - [(#7885)](https://github.com/microsoft/vcpkg/pull/7885) [glfw3] Add more information about installing dependencies.

- fmt `5.3.0-2` -> `6.0.0`
    - [(#7910)](https://github.com/microsoft/vcpkg/pull/7910) [fmt] Update to 6.0.0
    - [(#7884)](https://github.com/microsoft/vcpkg/pull/7884) [fmt] missing VCPKG_BUILD_TYPE support added

- magic-enum `2019-06-07` -> `0.6.0`
    - [(#7916)](https://github.com/microsoft/vcpkg/pull/7916) [magic-enum] Update to v0.6.0

- liblsl `1.13.0-b6` -> `1.13.0-b11-1`
    - [(#7906)](https://github.com/microsoft/vcpkg/pull/7906) [liblsl] Update library to 1.13.0-b11
    - [(#7945)](https://github.com/microsoft/vcpkg/pull/7945) [liblsl] Fix installation

- yaml-cpp `0.6.2-2` -> `0.6.2-3`
    - [(#7847)](https://github.com/microsoft/vcpkg/pull/7847) [yaml-cpp] Fix include path in yaml-cpp-config.cmake

- fluidsynth `2.0.5` -> `2.0.5-1`
    - [(#7837)](https://github.com/microsoft/vcpkg/pull/7837) [fluidsynth] add Windows ARM support

- nmap `7.70` -> `7.70-1`
    - [(#7811)](https://github.com/microsoft/vcpkg/pull/7811) [nmap] Fix build error.

- moos-ui `10.0.1-1` -> `10.0.1-2`
    - [(#7812)](https://github.com/microsoft/vcpkg/pull/7812) [moos-ui] Fix install path

- openni2 `2.2.0.33-9` -> `2.2.0.33-10`
    - [(#7809)](https://github.com/microsoft/vcpkg/pull/7809) [openni2] Add warning message when cannot find NETFXSDK.

- abseil `2019-05-08` -> `2019-05-08-1`
    - [(#7745)](https://github.com/microsoft/vcpkg/pull/7745) [abseil] fix cmake config issue

- libwebp `1.0.2-6` -> `1.0.2-7`
    - [(#7886)](https://github.com/microsoft/vcpkg/pull/7886) [libwebp] Fix two dependent windows library link conditions.

- wpilib `2019.5.1` -> `2019.6.1`
    - [(#7927)](https://github.com/microsoft/vcpkg/pull/7927) [wpilib] Update wpilib port to allow opencv4

- ogdf `2018-03-28-2` -> `2019-08-23`
    - [(#7846)](https://github.com/microsoft/vcpkg/pull/7846) [ogdf] Update source link

- libp7client `5.2` -> `5.2-1`
    - [(#7977)](https://github.com/microsoft/vcpkg/pull/7977) [libp7client] Rename port folder to lowercase

- libpng `1.6.37-2` -> `1.6.37-3`
    - [(#7972)](https://github.com/microsoft/vcpkg/pull/7972) [libpng] Fix find_package() in CONFIG mode (#7968)

- openblas `0.3.6-5` -> `0.3.6-6`
    - [(#7888)](https://github.com/microsoft/vcpkg/pull/7888) [openblas] Enable x86 build and fix usage errors.

- qt5-base `5.12.3-3` -> `5.12.3-4`
    - [(#7973)](https://github.com/microsoft/vcpkg/pull/7973) [Qt5] Fix libpq linkage in wrapper

- liblas `1.8.1` -> `1.8.1-2`
    - [(#7975)](https://github.com/microsoft/vcpkg/pull/7975) [liblas] Fix Geotiff linkage

- glib `2.52.3-14-2` -> `2.52.3-14-3`
    - [(#7963)](https://github.com/microsoft/vcpkg/pull/7963) [glib] Fix install config.h

</details>

-- vcpkg team vcpkg@microsoft.com THU, 04 Sept 14:00:00 -0800",68312233
79,False,False,2019-07-31T21:47:59Z,2019-08-01T16:51:57Z,"Changelog
---
#### Total port count: 1105
#### Total port count per triplet (tested): 
|triplet|ports available|
|---|---|
|**x64-windows**|1039|
|x86-windows|1009|
|x64-windows-static|928|
|**x64-linux**|866|
|**x64-osx**|788|
|arm64-windows|678|
|x64-uwp|546|
|arm-uwp|522|

#### The following commands and options have been updated:
- --scripts-root ***[NEW OPTION]***
    - Specify a directory to use in place of `<vcpkg root>/scripts`. Enables a shared script directory for those using a single vcpkg instance to manage distributed port directories
        - [(#6552)](https://github.com/microsoft/vcpkg/pull/6552) Allow redirection of the scripts folder.
- depend-info
    - Allow `vcpkg depend-info port[feature]` to display port-dependency information for a given port and the specified feature.
        - [(#6797)](https://github.com/microsoft/vcpkg/pull/6797) Make `depend-info` subcommand able to handle features

#### The following documentation has been updated:
- [Overlay triplets example: build dynamic libraries on Linux](docs/examples/overlay-triplets-linux-dynamic.md) ***[NEW]***
    - [(#7291)](https://github.com/microsoft/vcpkg/pull/7291) Example: Building dynamic libraries on Linux using overlay triplets
- [vcpkg_from_git](docs/maintainers/vcpkg_from_git.md)
    - [(#7082)](https://github.com/microsoft/vcpkg/pull/7082) Fix vcpkg_from_git
- [Maintainer Guidelines and Policies](docs/maintainers/maintainer-guide.md)
    - [(#7390)](https://github.com/microsoft/vcpkg/pull/7390) [docs] add notes about manual-link

#### The following *remarkable* changes have been made to vcpkg's infrastructure:
- `VCPKG_ENV_PASSTHROUGH` triplet variable and `environment-overrides.cmake`
    -  Port authors can add an `environment-overrides.cmake` file to a port to override global triplet settings or to define behavior of the vpckg binary on a per port basis
        - [(#7290)](https://github.com/microsoft/vcpkg/pull/7290) [vcpkg] Environment Variable Passthrough
        - [(#7292)](https://github.com/microsoft/vcpkg/pull/7292) [vcpkg] Portfile Settings
- Testing overhaul
    - Tests have been migrated from the Visual Studio unit testing framework to the cross-platform [Catch2](https://github.com/catchorg/Catch2)
        - [(#7315)](https://github.com/microsoft/vcpkg/pull/7315) Rewrite the tests! now they're cross-platform!

#### The following *additional* changes have been made to vcpkg's infrastructure:
- [(#7080)](https://github.com/microsoft/vcpkg/pull/7080) [vcpkg] Use spaces instead of semicolons in the output
- [(#6791)](https://github.com/microsoft/vcpkg/pull/6791) Update python2, python3, perl, aria2, ninja, ruby, 7z
- [(#7082)](https://github.com/microsoft/vcpkg/pull/7082) Fix vcpkg_from_git
- [(#7117)](https://github.com/microsoft/vcpkg/pull/7117) Revert Visual Studio projects versions
- [(#7051)](https://github.com/microsoft/vcpkg/pull/7051) Fix Python3 tool on Windows
- [(#7135)](https://github.com/microsoft/vcpkg/pull/7135) revert ninja update
- [(#7136)](https://github.com/microsoft/vcpkg/pull/7136) Bump version to warn of outdated vcpkg sources
- [(#7094)](https://github.com/microsoft/vcpkg/pull/7094) [vcpkg] Fix powershell font corruption bug
- [(#7158)](https://github.com/microsoft/vcpkg/pull/7158) [vcpkg] Fix incorrect setting of FEATURE_OPTIONS
- [(#6792)](https://github.com/microsoft/vcpkg/pull/6792) Cleanup vcpkg_configure_cmake.cmake
- [(#7175)](https://github.com/microsoft/vcpkg/pull/7175) Added nasm mirror as nasm.us is down again
- [(#7216)](https://github.com/microsoft/vcpkg/pull/7216) [vcpkg] allow spaces in pathname on linux
- [(#7243)](https://github.com/microsoft/vcpkg/pull/7243) Testing for --overlay-ports and --overlay-triplets args
- [(#7294)](https://github.com/microsoft/vcpkg/pull/7294) Add June changelog
- [(#7229)](https://github.com/microsoft/vcpkg/pull/7229) Better error message when VCPKG_ROOT is independently defined
- [(#7336)](https://github.com/microsoft/vcpkg/pull/7336) Create issue templates
- [(#7322)](https://github.com/microsoft/vcpkg/pull/7322) Resolves ""project is never up-to-date"" problem (issue 6179)
- [(#7228)](https://github.com/microsoft/vcpkg/pull/7228) Parallel file operations
- [(#7403)](https://github.com/microsoft/vcpkg/pull/7403) Add third party notices -- copied from chakracore
- [(#7407)](https://github.com/microsoft/vcpkg/pull/7407) Modify CMakeLists to split up vcpkglib
- [(#7430)](https://github.com/microsoft/vcpkg/pull/7430) [vcpkg] Fix RealFilesystem::remove_all

<details>
<summary><b>The following 37 ports have been added:</b></summary>

|port|version|
|---|---|
|[septag-sx](https://github.com/microsoft/vcpkg/pull/6327)| 2019-05-07-1
|[librdkafka](https://github.com/microsoft/vcpkg/pull/5921)| 1.1.0
|[soxr](https://github.com/microsoft/vcpkg/pull/6478)| 0.1.3.
|[czmq](https://github.com/microsoft/vcpkg/pull/4979)<sup>[#7186](https://github.com/microsoft/vcpkg/pull/7186) </sup>| 2019-06-10-1
|[cppmicroservices](https://github.com/microsoft/vcpkg/pull/6388)| 4.0.0-pre1
|[zookeeper](https://github.com/microsoft/vcpkg/pull/7000)| 3.5.5
|[xmlsec](https://github.com/microsoft/vcpkg/pull/7196)| 1.2.28
|[librsvg](https://github.com/microsoft/vcpkg/pull/6807)| 2.40.20
|[7zip](https://github.com/microsoft/vcpkg/pull/6920)| 19.00
|[genann](https://github.com/microsoft/vcpkg/pull/7195)| 2019-07-10
|[offscale-libetcd-cpp](https://github.com/microsoft/vcpkg/pull/6999)| 2019-07-10
|[rabit](https://github.com/microsoft/vcpkg/pull/7234)| 0.1
|[zyre](https://github.com/microsoft/vcpkg/pull/7189)| 2019-07-07
|[cpp-peglib](https://github.com/microsoft/vcpkg/pull/7254)| 0.1.0
|[paho-mqttpp3](https://github.com/microsoft/vcpkg/pull/7033)| 1.0.1
|[openxr-loader](https://github.com/microsoft/vcpkg/pull/6339)<sup>[#7376](https://github.com/microsoft/vcpkg/pull/7376) [#7488](https://github.com/microsoft/vcpkg/pull/7488) </sup>| 1.0.0-1
|[wintoast](https://github.com/microsoft/vcpkg/pull/7006)| 1.2.0
|[scnlib](https://github.com/microsoft/vcpkg/pull/7014)| 0.1.2
|[mongoose](https://github.com/microsoft/vcpkg/pull/7089)| 6.15-1
|[nameof](https://github.com/microsoft/vcpkg/pull/7250)| 2019-07-13
|[leaf](https://github.com/microsoft/vcpkg/pull/7319)<sup>[#7468](https://github.com/microsoft/vcpkg/pull/7468) </sup>| 0.2.1-2
|[otl](https://github.com/microsoft/vcpkg/pull/7272)| 4.0.442
|[dbg-macro](https://github.com/microsoft/vcpkg/pull/7237)| 2019-07-11
|[p-ranav-csv](https://github.com/microsoft/vcpkg/pull/7236)| 2019-07-11
|[lastools](https://github.com/microsoft/vcpkg/pull/7220)| 2019-07-10
|[basisu](https://github.com/microsoft/vcpkg/pull/6995)<sup>[#7468](https://github.com/microsoft/vcpkg/pull/7468) </sup>| 0.0.1-1
|[cmcstl2](https://github.com/microsoft/vcpkg/pull/7348)| 2019-07-20
|[libconfuse](https://github.com/microsoft/vcpkg/pull/7252)| 2019-07-14
|[boolinq](https://github.com/microsoft/vcpkg/pull/7362)| 2019-07-22
|[libzippp](https://github.com/microsoft/vcpkg/pull/6801)| 2019-07-22
|[mimalloc](https://github.com/microsoft/vcpkg/pull/7011)| 2019-06-25
|[liblas](https://github.com/microsoft/vcpkg/pull/6746)| 1.8.1
|[xtensor-io](https://github.com/microsoft/vcpkg/pull/7398)| 0.7.0
|[easycl](https://github.com/microsoft/vcpkg/pull/7387)| 0.3
|[nngpp](https://github.com/microsoft/vcpkg/pull/7417)| 2019-07-25
|[mpi](https://github.com/microsoft/vcpkg/pull/7142)| 1
|[openmpi](https://github.com/microsoft/vcpkg/pull/7142)| 4.0.1
</details>

<details>
<summary><b>The following 160 ports have been updated:</b></summary>

- openssl-unix `1.0.2q` -> `1.0.2s-1`
    - [(#6854)](https://github.com/microsoft/vcpkg/pull/6854) Openssl version bump 1.0.2s
    - [(#6512)](https://github.com/microsoft/vcpkg/pull/6512) [openssl-unix] Shared library support

- openssl-windows `1.0.2q-2` -> `1.0.2s-1`
    - [(#6854)](https://github.com/microsoft/vcpkg/pull/6854) Openssl version bump 1.0.2s

- mongo-cxx-driver `3.4.0-2` -> `3.4.0-3`
    - [(#7050)](https://github.com/microsoft/vcpkg/pull/7050) [mongo-cxx-driver] Do not delete the third_party include folder when building with mnmlstc

- fdlibm `5.3-3` -> `5.3-4`
    - [(#7082)](https://github.com/microsoft/vcpkg/pull/7082) Fix vcpkg_from_git

- azure-iot-sdk-c `2019-05-16.1` -> `2019-07-01.1`
    - [(#7123)](https://github.com/microsoft/vcpkg/pull/7123) [azure] Update azure-iot-sdk-c for public-preview release of 2019-07-01

- open62541 `0.3.0-1` -> `0.3.0-2`
    - [(#7051)](https://github.com/microsoft/vcpkg/pull/7051) Fix Python3 tool on Windows

- lua `5.3.5-1` -> `5.3.5-2`
    - [(#7101)](https://github.com/microsoft/vcpkg/pull/7101) [lua] Add [cpp] feature to additionally build lua-c++

- flann `1.9.1-1` -> `2019-04-07-1`
    - [(#7125)](https://github.com/microsoft/vcpkg/pull/7125) [flann]Change the version tag to the corresponding time of commit id.

- tbb `2019_U7` -> `2019_U7-1`
    - [(#6510)](https://github.com/microsoft/vcpkg/pull/6510) [tbb] Add shared library support for Linux and OSX

- dcmtk `3.6.4` -> `3.6.4-1`
    - [(#7059)](https://github.com/microsoft/vcpkg/pull/7059) [dcmtk] support wchar_t* filename

- libmupdf `1.15.0` -> `1.15.0-1`
    - [(#7107)](https://github.com/microsoft/vcpkg/pull/7107) [libmupdf] Enable the old patch for fixing C2169

- mongo-c-driver `1.14.0-2` -> `1.14.0-3`
    - [(#7048)](https://github.com/microsoft/vcpkg/pull/7048) [mongo-c-driver] Add usage
    - [(#7338)](https://github.com/microsoft/vcpkg/pull/7338) [mongo-c-driver] Disable snappy auto-detection

- openimageio `1.8.16` -> `2.0.8`
    - [(#7173)](https://github.com/microsoft/vcpkg/pull/7173) [openimageio] Upgrade to version 2.0.8

- duktape `2.3.0` -> `2.3.0-2`
    - [(#7170)](https://github.com/microsoft/vcpkg/pull/7170) [duktape] Fix package not found by find_package.
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- poco `2.0.0-pre-2` -> `2.0.0-pre-3`
    - [(#7169)](https://github.com/microsoft/vcpkg/pull/7169) [Poco] Add missing ipjlpapi.lib to foundation library

- gsoap `2.8.84-1` -> `2.8.87-1`
    - [(#7145)](https://github.com/microsoft/vcpkg/pull/7145) [gsoap] Update to 2.8.87

- qt5-mqtt `5.12.3` -> `5.12.3-1`
    - [(#7130)](https://github.com/microsoft/vcpkg/pull/7130) [qt5-mqtt] crossplatform add to path
    - [(#7230)](https://github.com/microsoft/vcpkg/pull/7230) [qt5]Fix build failure in linux

- botan `2.9.0-1` -> `2.9.0-2`
    - [(#7140)](https://github.com/microsoft/vcpkg/pull/7140) [botan] Fix build error C2039 with Visual Studio 2019 and C++17
    - [(#7303)](https://github.com/microsoft/vcpkg/pull/7303) [botan] Fix parallel build

- kinectsdk2 `2.0` -> `2.0-1`
    - [(#7143)](https://github.com/microsoft/vcpkg/pull/7143) kinectsdk2: fix missing header files

- civetweb `1.11-1` -> `2019-07-05`
    - [(#7166)](https://github.com/microsoft/vcpkg/pull/7166) [civetweb] Upgrade and enable feature websocket

- curl `7.65.0-2` -> `7.65.2-1`
    - [(#7156)](https://github.com/microsoft/vcpkg/pull/7156) [curl] Add features.
    - [(#7093)](https://github.com/microsoft/vcpkg/pull/7093) [curl] Update to 7.65.2

- aws-checksums `0.1.2` -> `0.1.3`
    - [(#7154)](https://github.com/microsoft/vcpkg/pull/7154) [aws-checksums]Upgrade version to 0.1.3

- rapidjson `1.1.0-3` -> `d87b698-1`
    - [(#7152)](https://github.com/microsoft/vcpkg/pull/7152) [rapidjson] Update to the latest commit and also fix #3401.
    - [(#7273)](https://github.com/microsoft/vcpkg/pull/7273) [rapidjson] Fix path RapidJSON_INCLUDE_DIRS

- freetype `2.10.0` -> `2.10.1-1`
    - [(#7141)](https://github.com/microsoft/vcpkg/pull/7141) [freetype]Re-fixed the issue of exporting symbols when building dynamic library.
    - [(#7341)](https://github.com/microsoft/vcpkg/pull/7341) [freetype] Update to 2.10.1

- llvm `7.0.0-3` -> `8.0.0`
    - [(#7209)](https://github.com/microsoft/vcpkg/pull/7209) [llvm] Update to 8.0.0

- reproc `6.0.0-1` -> `6.0.0-2`
    - [(#7208)](https://github.com/microsoft/vcpkg/pull/7208) [reproc] Fix reproc++ installation path

- wil `2019-06-10` -> `2019-07-16`
    - [(#7215)](https://github.com/microsoft/vcpkg/pull/7215) [wil] Update
    - [(#7285)](https://github.com/microsoft/vcpkg/pull/7285)  Update wil port to match the commit used for NuGet package 1.0.190716.2

- tesseract `4.0.0-3` -> `4.1.0-1`
    - [(#7144)](https://github.com/microsoft/vcpkg/pull/7144) [tesseract] Fix Port. Making it crossplatform
    - [(#7227)](https://github.com/microsoft/vcpkg/pull/7227) [tesseract] port update to 4.1.0 release
    - [(#7360)](https://github.com/microsoft/vcpkg/pull/7360) [tesseract[training_tools]] Fix build error

- zeromq `2019-05-07` -> `2019-07-09`
    - [(#7203)](https://github.com/microsoft/vcpkg/pull/7203) [zeromq] Update to 4.3.2

- spirv-tools `2019.3-dev` -> `2019.3-dev-1`
    - [(#7204)](https://github.com/microsoft/vcpkg/pull/7204) [spirv-tools] Fix removed patch

- libraqm `0.6.0` -> `0.7.0`
    - [(#7149)](https://github.com/microsoft/vcpkg/pull/7149) [libraqm] Update libraqm to 0.7.0
    - [(#7263)](https://github.com/microsoft/vcpkg/pull/7263) [libraqm] Fix copying raqm-version.h to include directory

- pthreads `3.0.0-1` -> `3.0.0-2`
    - [(#7178)](https://github.com/microsoft/vcpkg/pull/7178) [pthreads4W] vcpkg wrapper fixes

- libkml `1.3.0-2` -> `1.3.0-3`
    - [(#7194)](https://github.com/microsoft/vcpkg/pull/7194) [libkml] Fix install path
    - [(#7282)](https://github.com/microsoft/vcpkg/pull/7282) [minizip] Make BZip2 an optional feature

- gherkin-c `4.1.2` -> `2019-10-07-1`
    - [(#7231)](https://github.com/microsoft/vcpkg/pull/7231) [gherkin-b] update to latest
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- google-cloud-cpp `0.10.0` -> `0.11.0`
    - [(#7134)](https://github.com/microsoft/vcpkg/pull/7134) Upgrade google-cloud-cpp to v0.11.0.

- sqlite3 `3.28.0-1` -> `3.29.0-1`
    - [(#7202)](https://github.com/microsoft/vcpkg/pull/7202) [sqlite3-tool]Fix build error on arm/uwp platform.
    - [(#7342)](https://github.com/microsoft/vcpkg/pull/7342) [sqlite3] Update to 3.29.0

- nonius `2019-04-20` -> `2019-04-20-1`
    - [(#7258)](https://github.com/microsoft/vcpkg/pull/7258) [nonius] properly install noniusConfig.cmake

- leveldb `1.22` -> `1.22-1`
    - [(#7245)](https://github.com/microsoft/vcpkg/pull/7245) [leveldb] Fix cmake config

- bond `8.1.0` -> `8.1.0-2`
    - [(#7273)](https://github.com/microsoft/vcpkg/pull/7273) [rapidjson] Fix path RapidJSON_INCLUDE_DIRS
    - [(#7306)](https://github.com/microsoft/vcpkg/pull/7306) [bond] make haskell an external dependency
    - [(#7142)](https://github.com/microsoft/vcpkg/pull/7142) [OpenMPI] add a new port

- cpprestsdk `2.10.13-1` -> `2.10.14`
    - [(#7286)](https://github.com/microsoft/vcpkg/pull/7286) Update cpprestsdk to v2.10.14.

- qt5-base `5.12.3-1` -> `5.12.3-3`
    - [(#6983)](https://github.com/microsoft/vcpkg/pull/6983) [qt5-base]Add a print message to inform the user to install the dependency package.
    - [(#7230)](https://github.com/microsoft/vcpkg/pull/7230) [qt5]Fix build failure in linux

- qt5-3d `5.12.3` -> `5.12.3-1`
    - [(#7230)](https://github.com/microsoft/vcpkg/pull/7230) [qt5]Fix build failure in linux

- qt5-activeqt `5.12.3` -> `5.12.3-1`
    - [(#7230)](https://github.com/microsoft/vcpkg/pull/7230) [qt5]Fix build failure in linux

- qt5-charts `5.12.3` -> `5.12.3-1`
    - [(#7230)](https://github.com/microsoft/vcpkg/pull/7230) [qt5]Fix build failure in linux

- qt5-connectivity `5.12.3` -> `5.12.3-1`
    - [(#7230)](https://github.com/microsoft/vcpkg/pull/7230) [qt5]Fix build failure in linux

- qt5-datavis3d `5.12.3` -> `5.12.3-1`
    - [(#7230)](https://github.com/microsoft/vcpkg/pull/7230) [qt5]Fix build failure in linux

- qt5-declarative `5.12.3-1` -> `5.12.3-2`
    - [(#7230)](https://github.com/microsoft/vcpkg/pull/7230) [qt5]Fix build failure in linux

- qt5-gamepad `5.12.3` -> `5.12.3-1`
    - [(#7230)](https://github.com/microsoft/vcpkg/pull/7230) [qt5]Fix build failure in linux

- qt5-graphicaleffects `5.12.3` -> `5.12.3-1`
    - [(#7230)](https://github.com/microsoft/vcpkg/pull/7230) [qt5]Fix build failure in linux

- qt5-imageformats `5.12.3` -> `5.12.3-1`
    - [(#7230)](https://github.com/microsoft/vcpkg/pull/7230) [qt5]Fix build failure in linux

- qt5-location `5.12.3` -> `5.12.3-1`
    - [(#7230)](https://github.com/microsoft/vcpkg/pull/7230) [qt5]Fix build failure in linux

- qt5-macextras `5.12.3` -> `5.12.3-1`
    - [(#7230)](https://github.com/microsoft/vcpkg/pull/7230) [qt5]Fix build failure in linux

- qt5-modularscripts `2019-04-30` -> `2019-04-30-1`
    - [(#7230)](https://github.com/microsoft/vcpkg/pull/7230) [qt5]Fix build failure in linux

- qt5-multimedia `5.12.3` -> `5.12.3-1`
    - [(#7230)](https://github.com/microsoft/vcpkg/pull/7230) [qt5]Fix build failure in linux

- qt5-networkauth `5.12.3` -> `5.12.3-1`
    - [(#7230)](https://github.com/microsoft/vcpkg/pull/7230) [qt5]Fix build failure in linux

- qt5-purchasing `5.12.3` -> `5.12.3-1`
    - [(#7230)](https://github.com/microsoft/vcpkg/pull/7230) [qt5]Fix build failure in linux

- qt5-quickcontrols `5.12.3` -> `5.12.3-1`
    - [(#7230)](https://github.com/microsoft/vcpkg/pull/7230) [qt5]Fix build failure in linux

- qt5-quickcontrols2 `5.12.3` -> `5.12.3-1`
    - [(#7230)](https://github.com/microsoft/vcpkg/pull/7230) [qt5]Fix build failure in linux

- qt5-remoteobjects `5.12.3` -> `5.12.3-1`
    - [(#7230)](https://github.com/microsoft/vcpkg/pull/7230) [qt5]Fix build failure in linux

- qt5-script `5.12.3` -> `5.12.3-1`
    - [(#7230)](https://github.com/microsoft/vcpkg/pull/7230) [qt5]Fix build failure in linux

- qt5-scxml `5.12.3` -> `5.12.3-1`
    - [(#7230)](https://github.com/microsoft/vcpkg/pull/7230) [qt5]Fix build failure in linux

- qt5-sensors `5.12.3` -> `5.12.3-1`
    - [(#7230)](https://github.com/microsoft/vcpkg/pull/7230) [qt5]Fix build failure in linux

- qt5-serialport `5.12.3` -> `5.12.3-1`
    - [(#7230)](https://github.com/microsoft/vcpkg/pull/7230) [qt5]Fix build failure in linux

- qt5-speech `5.12.3` -> `5.12.3-1`
    - [(#7230)](https://github.com/microsoft/vcpkg/pull/7230) [qt5]Fix build failure in linux

- qt5-svg `5.12.3` -> `5.12.3-1`
    - [(#7230)](https://github.com/microsoft/vcpkg/pull/7230) [qt5]Fix build failure in linux

- qt5-tools `5.12.3` -> `5.12.3-1`
    - [(#7230)](https://github.com/microsoft/vcpkg/pull/7230) [qt5]Fix build failure in linux

- qt5-virtualkeyboard `5.12.3` -> `5.12.3-1`
    - [(#7230)](https://github.com/microsoft/vcpkg/pull/7230) [qt5]Fix build failure in linux

- qt5-webchannel `5.12.3` -> `5.12.3-1`
    - [(#7230)](https://github.com/microsoft/vcpkg/pull/7230) [qt5]Fix build failure in linux

- qt5-websockets `5.12.3` -> `5.12.3-1`
    - [(#7230)](https://github.com/microsoft/vcpkg/pull/7230) [qt5]Fix build failure in linux

- qt5-webview `5.12.3` -> `5.12.3-1`
    - [(#7230)](https://github.com/microsoft/vcpkg/pull/7230) [qt5]Fix build failure in linux

- qt5-winextras `5.12.3` -> `5.12.3-1`
    - [(#7230)](https://github.com/microsoft/vcpkg/pull/7230) [qt5]Fix build failure in linux
    - [(#7298)](https://github.com/microsoft/vcpkg/pull/7298) [qt5-winextras, ecsutil, soundtouch] Fix build-depends

- qt5-xmlpatterns `5.12.3` -> `5.12.3-1`
    - [(#7230)](https://github.com/microsoft/vcpkg/pull/7230) [qt5]Fix build failure in linux

- rocksdb `6.0.2` -> `6.1.2`
    - [(#7304)](https://github.com/microsoft/vcpkg/pull/7304) [rocksdb] Update rocksdb to 6.1.2, adds optional zstd feature

- metis `5.1.0-3` -> `5.1.0-5`
    - [(#7299)](https://github.com/microsoft/vcpkg/pull/7299) [metis] Fix linux build error.
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- ecsutil `1.0.6.1` -> `1.0.7.2`
    - [(#7298)](https://github.com/microsoft/vcpkg/pull/7298) [qt5-winextras, ecsutil, soundtouch] Fix build-depends
    - [(#7427)](https://github.com/microsoft/vcpkg/pull/7427) [ECSUtil] update library to v1.0.7.2

- soundtouch `2.0.0-2` -> `2.0.0-3`
    - [(#7298)](https://github.com/microsoft/vcpkg/pull/7298) [qt5-winextras, ecsutil, soundtouch] Fix build-depends

- libsodium `1.0.18` -> `1.0.18-1`
    - [(#7297)](https://github.com/microsoft/vcpkg/pull/7297) [libsodium] Fix Linux build error.

- irrlicht `1.8.4` -> `1.8.4-2`
    - [(#7296)](https://github.com/microsoft/vcpkg/pull/7296) [irrlicht] add vcpkg-cmake-wrapper
    - [(#7354)](https://github.com/microsoft/vcpkg/pull/7354) [irrlicht] use unicode path on windows

- libyaml `0.2.2` -> `0.2.2-1`
    - [(#7277)](https://github.com/microsoft/vcpkg/pull/7277) [libyaml] Fix build error

- eastl `3.13.05-1` -> `3.14.00`
    - [(#7276)](https://github.com/microsoft/vcpkg/pull/7276) [eastl] Upgrade to 3.14

- boost-asio `1.70.0-1` -> `1.70.0-2`
    - [(#7267)](https://github.com/microsoft/vcpkg/pull/7267) Fixed boost-asio on Windows

- minizip `1.2.11-4` -> `1.2.11-5`
    - [(#7282)](https://github.com/microsoft/vcpkg/pull/7282) [minizip] Make BZip2 an optional feature

- blend2d `beta_2019-04-30` -> `beta_2019-07-16`
    - [(#7239)](https://github.com/microsoft/vcpkg/pull/7239) [blend2d] Port update

- so5extra `1.2.3-1` -> `1.3.1`
    - [(#7238)](https://github.com/microsoft/vcpkg/pull/7238) [sobjectizer, so5extra] updates

- sobjectizer `5.5.24.4-1` -> `5.6.0.2`
    - [(#7238)](https://github.com/microsoft/vcpkg/pull/7238) [sobjectizer, so5extra] updates

- directxtk `apr2019` -> `apr2019-1`
    - [(#7233)](https://github.com/microsoft/vcpkg/pull/7233) [DirectXTK] Fix UWP build error

- restbed `4.16-07-28-2018` -> `4.16-07-28-2018-1`
    - [(#7232)](https://github.com/microsoft/vcpkg/pull/7232) [restbed] Add openssl feature

- clapack `3.2.1-9` -> `3.2.1-10`
    - [(#6786)](https://github.com/microsoft/vcpkg/pull/6786) [openblas/clapack] FindLapack/FindBLAS was not working.

- geogram `1.6.9-6` -> `1.6.9-7`
    - [(#6786)](https://github.com/microsoft/vcpkg/pull/6786) [openblas/clapack] FindLapack/FindBLAS was not working.

- mlpack `3.1.1` -> `3.1.1-1`
    - [(#6786)](https://github.com/microsoft/vcpkg/pull/6786) [openblas/clapack] FindLapack/FindBLAS was not working.

- openblas `0.3.6-4` -> `0.3.6-5`
    - [(#6786)](https://github.com/microsoft/vcpkg/pull/6786) [openblas/clapack] FindLapack/FindBLAS was not working.

- pprint `2019-06-01` -> `2019-07-19`
    - [(#7317)](https://github.com/microsoft/vcpkg/pull/7317) [pprint] Fix #7301

- boost-type-erasure `1.70.0` -> `1.70.0-1`
    - [(#7325)](https://github.com/microsoft/vcpkg/pull/7325) [boost-type-erasure] fix depends on arm

- armadillo `2019-04-16-3` -> `2019-04-16-4`
    - [(#7041)](https://github.com/microsoft/vcpkg/pull/7041)  [armadillo] Fix installation path

- cutelyst2 `2.7.0` -> `2.8.0`
    - [(#7327)](https://github.com/microsoft/vcpkg/pull/7327) [cutelyst2]Upgrade version to 2.8.0

- sdl2-image `2.0.4-3` -> `2.0.5`
    - [(#7355)](https://github.com/microsoft/vcpkg/pull/7355) [sdl2-image] Updated to 2.0.5

- qhull `7.2.1-3` -> `7.3.2`
    - [(#7340)](https://github.com/microsoft/vcpkg/pull/7340) [qhull] Update to 7.3.2 and fix postbuild validation

- libexif `0.6.21-1` -> `0.6.21-2`
    - [(#7344)](https://github.com/microsoft/vcpkg/pull/7344) [Libexif] update download location

- arrow `0.13.0-4` -> `0.14.1`
    - [(#7211)](https://github.com/microsoft/vcpkg/pull/7211) [Arrow] Update to Arrow v0.14.1

- date `ed0368f` -> `2019-05-18-1`
    - [(#7399)](https://github.com/microsoft/vcpkg/pull/7399) [date] Fix issue with feature remote-api

- libmariadb `3.0.10-1` -> `3.0.10-3`
    - [(#7396)](https://github.com/microsoft/vcpkg/pull/7396) [libmariadb] Fix build library type and install path
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- inja `2.1.0` -> `2.1.0-1`
    - [(#7402)](https://github.com/microsoft/vcpkg/pull/7402) [inja] Use inja CMakeLists.txt

- pcl `1.9.1-4` -> `1.9.1-5`
    - [(#7388)](https://github.com/microsoft/vcpkg/pull/7388) [pcl] Fix cuda building compatability issues with cuda 10.1

- thrift `2019-05-07-2` -> `2019-05-07-3`
    - [(#7302)](https://github.com/microsoft/vcpkg/pull/7302) [Thrift] Make Thrift static again

- forest `12.0.0` -> `12.0.3`
    - [(#7410)](https://github.com/microsoft/vcpkg/pull/7410) [forest] Update to Version 12.0.3

- nlohmann-json `3.6.1` -> `3.7.0`
    - [(#7459)](https://github.com/microsoft/vcpkg/pull/7459) [nlohmann-json] Update to 3.7.0

- ecm `5.58.0` -> `5.60.0-1`
    - [(#7457)](https://github.com/microsoft/vcpkg/pull/7457) [ecm] Update library to v5.60.0
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- gl2ps `1.4.0-1` -> `1.4.0-3`
    - [(#7453)](https://github.com/microsoft/vcpkg/pull/7453) [gl2ps]Update to use vcpkg new functions(vcpkg_from_gitlab).
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- darknet `0.2.5-4` -> `0.2.5-5`
    - [(#7450)](https://github.com/microsoft/vcpkg/pull/7450) [darknet] add training feature

- g3log `2019-05-14-1` -> `2019-07-29`
    - [(#7448)](https://github.com/microsoft/vcpkg/pull/7448) [g3log] Fix https://github.com/KjellKod/g3log/issues/319

- azure-storage-cpp `6.1.0` -> `6.1.0-2`
    - [(#7404)](https://github.com/microsoft/vcpkg/pull/7404) [azure-storage-cpp] Removed gcov dependency in debug Linux build (#7311)
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- ace `6.5.5-1` -> `6.5.6`
    - [(#7466)](https://github.com/microsoft/vcpkg/pull/7466) [ace] ace 6.5.6

- bullet3 `2.88` -> `2.88-1`
    - [(#7474)](https://github.com/microsoft/vcpkg/pull/7474) [Bullet3] feature for multithreading
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- alembic `1.7.11-2` -> `1.7.11-3`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- ampl-mp `2019-03-21` -> `2019-03-21-1`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- anax `2.1.0-5` -> `2.1.0-6`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- apr `1.6.5-1` -> `1.6.5-2`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- blosc `1.16.3-1` -> `1.16.3-2`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- capnproto `0.7.0-2` -> `0.7.0-3`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- cgicc `3.2.19-1` -> `3.2.19-2`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- charls `2.0.0-1` -> `2.0.0-2`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- collada-dom `2.5.0-1` -> `2.5.0-2`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- ctemplate `2017-06-23-44b7c5-3` -> `2017-06-23-44b7c5-4`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- dlfcn-win32 `1.1.1-1` -> `1.1.1-2`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- easyloggingpp `9.96.7` -> `9.96.7-1`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- fastfeat `391d5e9` -> `391d5e9-1`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- fastlz `1.0-2` -> `1.0-3`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- freeglut `3.0.0-6` -> `3.0.0-7`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- glbinding `3.1.0-1` -> `3.1.0-2`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- glew `2.1.0-4` -> `2.1.0-5`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- glfw3 `3.3` -> `3.3-1`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- graphicsmagick `1.3.32` -> `1.3.32-1`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- hypre `2.11.2-1` -> `2.11.2-2`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports
    - [(#7142)](https://github.com/microsoft/vcpkg/pull/7142) [OpenMPI] add a new port

- jack2 `1.9.12-1` -> `1.9.12-2`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- jxrlib `1.1-7` -> `1.1-8`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- kangaru `4.1.3-1` -> `4.1.3-2`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- libconfig `1.7.2` -> `1.7.2-1`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- libfreenect2 `0.2.0-2` -> `0.2.0-3`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- libmad `0.15.1-2` -> `0.15.1-3`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- libmspack `0.10.1` -> `0.10.1-1`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- libnice `0.1.15` -> `0.1.15-1`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- libodb-boost `2.4.0-2` -> `2.4.0-3`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- libodb-mysql `2.4.0-2` -> `2.4.0-3`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- libodb-pgsql `2.4.0-2` -> `2.4.0-3`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- libodb-sqlite `2.4.0-3` -> `2.4.0-4`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- libodb `2.4.0-4` -> `2.4.0-5`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- librabbitmq `0.9.0` -> `0.9.0-1`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- libsamplerate `0.1.9.0` -> `0.1.9.0-1`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- libwebsockets `3.1.0-2` -> `3.1.0-3`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- lmdb `0.9.23-1` -> `0.9.23-2`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- mozjpeg `3.2-2` -> `3.2-3`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- nanodbc `2.12.4-3` -> `2.12.4-4`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- nmslib `1.7.3.6` -> `1.7.3.6-1`
    - [(#7468)](https://github.com/microsoft/vcpkg/pull/7468) Add PREFER_NINJA to many ports

- amqpcpp `4.1.4` -> `4.1.5`
    - [(#7475)](https://github.com/microsoft/vcpkg/pull/7475) [amqpcpp] Update library to v4.1.5

- cxxopts `2.1.2-1` -> `2.2.0`
    - [(#7473)](https://github.com/microsoft/vcpkg/pull/7473) [cxxopts] Bumped to v2.2.0

- boost-mpi `1.70.0-1` -> `1.70.0-2`
    - [(#7142)](https://github.com/microsoft/vcpkg/pull/7142) [OpenMPI] add a new port

- hdf5 `1.10.5-7` -> `1.10.5-8`
    - [(#7142)](https://github.com/microsoft/vcpkg/pull/7142) [OpenMPI] add a new port

- kealib `1.4.11` -> `1.4.11-1`
    - [(#7142)](https://github.com/microsoft/vcpkg/pull/7142) [OpenMPI] add a new port

- parmetis `4.0.3-2` -> `4.0.3-3`
    - [(#7142)](https://github.com/microsoft/vcpkg/pull/7142) [OpenMPI] add a new port

- vtk `8.2.0-4` -> `8.2.0-5`
    - [(#7142)](https://github.com/microsoft/vcpkg/pull/7142) [OpenMPI] add a new port

</details>

-- vcpkg team vcpkg@microsoft.com THU, 01 Aug 07:00:00 -0800
",68312233
80,False,False,2019-06-30T16:31:22Z,2019-07-19T21:41:21Z,"Changelog
---
#### Total port count: 1068
#### Total port count per triplet (tested):
|triplet|ports available|
|---|---|
|**x64-windows**|1006|
|x86-windows|977|
|x64-windows-static|895|
|**x64-linux**|823|
|**x64-osx**|755|
|arm64-windows|654|
|x64-uwp|532|
|arm-uwp|504|

#### The following commands and options have been updated:
- [--overlay-ports](docs/specifications/ports-overlay.md) ***[NEW OPTION]***
    - Specify directories to be used when searching for ports
        - [(#6981)](https://github.com/Microsoft/vcpkg/pull/6981) Ports Overlay partial implementation
        - [(#7002)](https://github.com/Microsoft/vcpkg/pull/7002) [--overlay-ports] Show location of overriden ports during install plan
- --overlay-triplets ***[NEW OPTION]***
    - Specify directories containing triplets files
        - [(#7053)](https://github.com/Microsoft/vcpkg/pull/7053) Triplets Overlay Implementation
- integrate
    - [(#7095)](https://github.com/Microsoft/vcpkg/pull/7095) [vcpkg-integrate] Improve spelling, help, and autocomplete.

#### The following documentation has been updated:
- [Maintainer Guidelines and Policies](docs/maintainers/maintainer-guide.md) ***[NEW]***
    - [(#6871)](https://github.com/Microsoft/vcpkg/pull/6871) [docs] Add maintainer guidelines
- [Ports Overlay](docs/specifications/ports-overlay.md) ***[NEW]***
    - [(#6981)](https://github.com/Microsoft/vcpkg/pull/6981) Ports Overlay partial implementation
- [vcpkg_check_features](docs/maintainers/vcpkg_check_features.md) ***[NEW]***
    - [(#6958)](https://github.com/Microsoft/vcpkg/pull/6958) [vcpkg] Add vcpkg_check_features
    - [(#7091)](https://github.com/Microsoft/vcpkg/pull/7091) [vcpkg] Update vcpkg_check_features document
- [vcpkg_execute_build_process](docs/maintainers/vcpkg_execute_build_process.md) ***[NEW]***
    - [(#7039)](https://github.com/Microsoft/vcpkg/pull/7039) [docs]Update cmake docs
- [CONTROL files](docs/maintainers/control-files.md#Homepage)
    - [(#6844)](https://github.com/Microsoft/vcpkg/pull/6844) [vcpkg] Add optional 'Homepage' field to CONTROL
    - [(#6871)](https://github.com/Microsoft/vcpkg/pull/6871) [docs] Add maintainer guidelines
- [index](docs/index.md)
    - [(#6871)](https://github.com/Microsoft/vcpkg/pull/6871) [docs] Add maintainer guidelines
- [Portfile helper functions](docs/maintainers/portfile-functions.md)
    - [(#7039)](https://github.com/Microsoft/vcpkg/pull/7039) [docs]Update cmake docs
- [vcpkg_configure_cmake](docs/maintainers/vcpkg_configure_cmake.md)
    - [(#7074)](https://github.com/Microsoft/vcpkg/pull/7074) [vcpkg_configure_cmake] Add NO_CHARSET_FLAG option

#### The following *remarkable* changes have been made to vcpkg's infrastructure:
- [vcpkg_check_features.cmake](docs/maintainers/vcpkg_check_features.md)
    - New portfile.cmake function for vcpkg contributors; Check if one or more features are a part of the package installation
        - [(#6958)](https://github.com/Microsoft/vcpkg/pull/6958) [vcpkg] Add vcpkg_check_features
        - [(#7091)](https://github.com/Microsoft/vcpkg/pull/7091) [vcpkg] Update vcpkg_check_features document
- [CONTROL file Homepage field](docs/maintainers/control-files.md#Homepage)
    - CONTROL files may now contain a 'Homepage' field which links to the port's official website
        - [(#6844)](https://github.com/Microsoft/vcpkg/pull/6844) [vcpkg] Add optional 'Homepage' field to CONTROL

#### The following *additional* changes have been made to vcpkg's infrastructure:
- [(#4942)](https://github.com/Microsoft/vcpkg/pull/4942) Update applocal.ps1
- [(#5630)](https://github.com/Microsoft/vcpkg/pull/5630) [scripts] Fix vcpkg_fixup_cmake on non Windows platforms
- [(#6383)](https://github.com/Microsoft/vcpkg/pull/6383) [vcpkg] update python3 to 3.7.3 on windows
- [(#6590)](https://github.com/Microsoft/vcpkg/pull/6590) ffmpeg: enable arm/arm64 windows support
- [(#6653)](https://github.com/Microsoft/vcpkg/pull/6653) [vcpkg] Fix install from head when no-downloads
- [(#6667)](https://github.com/Microsoft/vcpkg/pull/6667) make meson not download things
- [(#6695)](https://github.com/Microsoft/vcpkg/pull/6695) [icu] Enable parallel builds
- [(#6704)](https://github.com/Microsoft/vcpkg/pull/6704) [DOXYGEN]Upgrade doxygen to 1.8.15.
- [(#6788)](https://github.com/Microsoft/vcpkg/pull/6788) [vcpkg] Bootstrap should use Get-CimInstance instead of Get-WmiObject.
- [(#6826)](https://github.com/Microsoft/vcpkg/pull/6826) [vcpkg] Apply clang format
- [(#6846)](https://github.com/Microsoft/vcpkg/pull/6846) Introduce an easier way to identify target systems...
- [(#6867)](https://github.com/Microsoft/vcpkg/pull/6867) Protect #pragma comment(lib, ""foo"") with _WIN32 checks
- [(#6872)](https://github.com/Microsoft/vcpkg/pull/6872) set CMAKE_SYSTEM_PROCESSOR in Linux
- [(#6880)](https://github.com/Microsoft/vcpkg/pull/6880) retry on flaky linker
- [(#6919)](https://github.com/Microsoft/vcpkg/pull/6919) [vcpkg] Improve vcpkg::Files::Filesystem error handling
- [(#6943)](https://github.com/Microsoft/vcpkg/pull/6943) address qhull flaky build with msvc linker
- [(#6952)](https://github.com/Microsoft/vcpkg/pull/6952) bootstrap.s<span>h</span>: Retry up to 3 times for transient download errors
- [(#6960)](https://github.com/Microsoft/vcpkg/pull/6960) Use correct path separators for each platform
- [(#6968)](https://github.com/Microsoft/vcpkg/pull/6968) VS 2019 16.3 deprecates <experimental/filesystem>.
- [(#6987)](https://github.com/Microsoft/vcpkg/pull/6987) Bump version to 2019.06.21
- [(#7038)](https://github.com/Microsoft/vcpkg/pull/7038) #5248 make vcpkg buildable as  'system' user
- [(#7039)](https://github.com/Microsoft/vcpkg/pull/7039) [docs]Update cmake docs
- [(#7074)](https://github.com/Microsoft/vcpkg/pull/7074) [vcpkg_configure_cmake] Add NO_CHARSET_FLAG option
- [(#7086)](https://github.com/Microsoft/vcpkg/pull/7086) [vcpkg] fail archived port install when decompression fails

<details>
<summary><b>The following 44 ports have been added:</b></summary>

| port | version |
|---|---|
|[any-lite](https://github.com/Microsoft/vcpkg/pull/6629)       | 0.2.0
|[argparse](https://github.com/Microsoft/vcpkg/pull/6866)       | 2019-06-10
|[bdwgc](https://github.com/Microsoft/vcpkg/pull/6405)          | 8.0.4-1
|[byte-lite](https://github.com/Microsoft/vcpkg/pull/6630)      | 0.2.0
|[casclib](https://github.com/Microsoft/vcpkg/pull/6744)        | 1.50
|[cjson](https://github.com/Microsoft/vcpkg/pull/6081)          | 1.7.10-1
|[cpp-httplib](https://github.com/Microsoft/vcpkg/pull/7037)    | 0.2.0
|[cppcodec](https://github.com/Microsoft/vcpkg/pull/6651)       | 0.2
|[expected-lite](https://github.com/Microsoft/vcpkg/pull/6642)  | 0.3.0
|[greatest](https://github.com/Microsoft/vcpkg/pull/6934)       | 1.4.2
|[hedley](https://github.com/Microsoft/vcpkg/pull/6776)         | 2019-05-08-1
|[immer](https://github.com/Microsoft/vcpkg/pull/6814)          | 2019-06-07
|[itpp](https://github.com/Microsoft/vcpkg/pull/6672)           | 4.3.1
|[ixwebsocket](https://github.com/Microsoft/vcpkg/pull/6835)    | 4.0.3
|[json-c](https://github.com/Microsoft/vcpkg/pull/6446)         | 2019-05-31
|[libfabric](https://github.com/Microsoft/vcpkg/pull/4740)<sup>[(#7036)](https://github.com/Microsoft/vcpkg/pull/7036)</sup>      | 1.7.1-1
|[libftdi](https://github.com/Microsoft/vcpkg/pull/6843)<sup>[(#7015)](https://github.com/Microsoft/vcpkg/pull/7015) [(#7055)](https://github.com/Microsoft/vcpkg/pull/7055)</sup>        | 0.20-1
|[libftdi1](https://github.com/Microsoft/vcpkg/pull/6843)       | 1.4
|[libpmemobj-cpp](https://github.com/Microsoft/vcpkg/pull/7020)<sup>[(#7097)](https://github.com/Microsoft/vcpkg/pull/7095)</sup> | 1.6-1
|[libraqm](https://github.com/Microsoft/vcpkg/pull/6659)        | 0.6.0
|[libu2f-server](https://github.com/Microsoft/vcpkg/pull/6781)  | 1.1.0
|[libzen](https://github.com/Microsoft/vcpkg/pull/7004)         | 0.4.37
|[magic-enum](https://github.com/Microsoft/vcpkg/pull/6817)     | 2019-06-07
|[networkdirect-sdk](https://github.com/Microsoft/vcpkg/pull/4740) | 2.0.1
|[observer-ptr-lite](https://github.com/Microsoft/vcpkg/pull/6652) | 0.4.0
|[openigtlink](https://github.com/Microsoft/vcpkg/pull/6769)    | 3.0
|[optional-bare](https://github.com/Microsoft/vcpkg/pull/6654)  | 1.1.0
|[optional-lite](https://github.com/Microsoft/vcpkg/pull/6655)  | 3.2.0
|[polyclipping](https://github.com/Microsoft/vcpkg/pull/6769)   | 6.4.2
|[ppconsul](https://github.com/Microsoft/vcpkg/pull/6911)<sup>[(#6967)](https://github.com/Microsoft/vcpkg/pull/6967)</sup>       | 0.3-1
|[pprint](https://github.com/Microsoft/vcpkg/pull/6678)         | 2019-06-01
|[restclient-cpp](https://github.com/Microsoft/vcpkg/pull/6936)<sup>[(#7054)](https://github.com/Microsoft/vcpkg/pull/7054)</sup> | 0.5.1-2
|[ring-span-lite](https://github.com/Microsoft/vcpkg/pull/6696) | 0.3.0
|[robin-hood-hashing](https://github.com/Microsoft/vcpkg/pull/6709) | 3.2.13
|[simde](https://github.com/Microsoft/vcpkg/pull/6777)          | 2019-06-05
|[span-lite](https://github.com/Microsoft/vcpkg/pull/6703)      | 0.5.0
|[sprout](https://github.com/Microsoft/vcpkg/pull/6997)         | 2019-06-20
|[stormlib](https://github.com/Microsoft/vcpkg/pull/6428)       | 9.22
|[string-view-lite](https://github.com/Microsoft/vcpkg/pull/6758) | 1.3.0
|[tl-function-ref](https://github.com/Microsoft/vcpkg/pull/7028) | 1.0.0-1
|[variant-lite](https://github.com/Microsoft/vcpkg/pull/6720)   | 1.2.2
|[wpilib](https://github.com/Microsoft/vcpkg/pull/6716)<sup>[(#7087)](https://github.com/Microsoft/vcpkg/pull/7087)</sup>         | 2019.5.1
|[zstr](https://github.com/Microsoft/vcpkg/pull/6773)           | 1.0.1
|[zydis](https://github.com/Microsoft/vcpkg/pull/6861)          | 2.0.3
</details>

<details>
<summary><b>The following 291 ports have been updated:</b></summary>

- alembic        `1.7.11` -> `1.7.11-2`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6844)](https://github.com/Microsoft/vcpkg/pull/6844) [vcpkg] Add optional 'Homepage' field to CONTROL

- angelscript    `2.33.0` -> `2.33.0-1`
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- angle          `2019-03-13-c2ee2cc-3` -> `2019-06-13`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6892)](https://github.com/Microsoft/vcpkg/pull/6892) [angle] Update to latest master

- arb            `2.11.1-2` -> `2.16.0`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6763)](https://github.com/Microsoft/vcpkg/pull/6763) [arb]Upgrade version to 2.16.0 and fix build error.

- armadillo      `2019-04-16-f00d3225` -> `2019-04-16-3`
    - [(#6371)](https://github.com/Microsoft/vcpkg/pull/6371) [openexr,openimageio,suitesparse,theia] updates for non-win32
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#7022)](https://github.com/Microsoft/vcpkg/pull/7022) [armadillo] Fix build error in Linux

- arrow          `0.13.0-3` -> `0.13.0-4`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6757)](https://github.com/Microsoft/vcpkg/pull/6757) [arrow] fix findzstd patch

- asio           `1.12.2` -> `1.12.2-2`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6751)](https://github.com/Microsoft/vcpkg/pull/6751) [asio] Add cmake target
    - [(#7083)](https://github.com/Microsoft/vcpkg/pull/7083) [asio] fix flaky build

- assimp         `4.1.0-4` -> `4.1.0-8`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6371)](https://github.com/Microsoft/vcpkg/pull/6371) [openexr,openimageio,suitesparse,theia] updates for non-win32
    - [(#6593)](https://github.com/Microsoft/vcpkg/pull/6593) [assimp]Fix lrrXML library dependencies.
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6887)](https://github.com/Microsoft/vcpkg/pull/6887) [assimp] Fix install assimp when passing --head

- avro-c         `1.8.2-1` -> `1.8.2-2`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- aws-c-common   `0.3.0` -> `0.3.11-1`
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6747)](https://github.com/Microsoft/vcpkg/pull/6747) [aws-c-common]Upgrade version to 0.3.11

- aws-sdk-cpp    `1.7.106` -> `1.7.116`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6932)](https://github.com/Microsoft/vcpkg/pull/6932) [aws-sdk-cpp]Upgrade to 1.7.116

- azure-c-shared-utility `2019-05-16` -> `2019-05-16.1`
    - [(#6804)](https://github.com/Microsoft/vcpkg/pull/6804) [azure] Update azure-iot-sdk-c for public-preview release of 2019-05-16

- azure-iot-sdk-c `2019-05-16` -> `2019-05-16.1`
    - [(#6804)](https://github.com/Microsoft/vcpkg/pull/6804) [azure] Update azure-iot-sdk-c for public-preview release of 2019-05-16

- azure-macro-utils-c `2019-05-16` -> `2019-05-16.1`
    - [(#6804)](https://github.com/Microsoft/vcpkg/pull/6804) [azure] Update azure-iot-sdk-c for public-preview release of 2019-05-16

- azure-uamqp-c  `2019-05-16` -> `2019-05-16.1`
    - [(#6804)](https://github.com/Microsoft/vcpkg/pull/6804) [azure] Update azure-iot-sdk-c for public-preview release of 2019-05-16

- azure-uhttp-c  `2019-05-16` -> `2019-05-16.1`
    - [(#6804)](https://github.com/Microsoft/vcpkg/pull/6804) [azure] Update azure-iot-sdk-c for public-preview release of 2019-05-16

- azure-umqtt-c  `2019-05-16` -> `2019-05-16.1`
    - [(#6804)](https://github.com/Microsoft/vcpkg/pull/6804) [azure] Update azure-iot-sdk-c for public-preview release of 2019-05-16

- blosc          `1.16.3` -> `1.16.3-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6928)](https://github.com/Microsoft/vcpkg/pull/6928) [blosc] Fix the bug when building release-only.

- bond           `7.0.2-2` -> `8.1.0`
    - [(#6844)](https://github.com/Microsoft/vcpkg/pull/6844) [vcpkg] Add optional 'Homepage' field to CONTROL
    - [(#6954)](https://github.com/Microsoft/vcpkg/pull/6954) [bond]Upgrade version to 8.1.0 and add Linux/OSX support.

- boost-thread   `1.70.0` -> `1.70.0-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6840)](https://github.com/Microsoft/vcpkg/pull/6840) [boost-thread] Fix old patches

- boost-variant  `1.69.0` -> `1.70.0`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#7047)](https://github.com/Microsoft/vcpkg/pull/7047) [Boost-variant] Upgrade to 1.70.0

- botan          `2.9.0` -> `2.9.0-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- c-ares         `2019-5-2` -> `2019-5-2-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- cairo          `1.16.0` -> `1.16.0-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6806)](https://github.com/Microsoft/vcpkg/pull/6806) [cairo] Fix linker errors on Linux and MacOS

- capnproto      `0.7.0-1` -> `0.7.0-2`
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6844)](https://github.com/Microsoft/vcpkg/pull/6844) [vcpkg] Add optional 'Homepage' field to CONTROL
    - [(#7024)](https://github.com/Microsoft/vcpkg/pull/7024) [capnproto] Enable Linux and OSX support

- cartographer   `1.0.0` -> `1.0.0-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- catch2         `2.7.2` -> `2.7.2-2`
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6844)](https://github.com/Microsoft/vcpkg/pull/6844) [vcpkg] Add optional 'Homepage' field to CONTROL

- ccd            `2.1` -> `2.1-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- celero         `2.4.0-1` -> `2.5.0-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6845)](https://github.com/Microsoft/vcpkg/pull/6845) Celero: Update to v2.5.0 release

- cereal         `1.2.2-1` -> `1.2.2-2`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- ceres          `1.14.0-3` -> `1.14.0-6`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6371)](https://github.com/Microsoft/vcpkg/pull/6371) [openexr,openimageio,suitesparse,theia] updates for non-win32
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- clapack        `3.2.1-4` -> `3.2.1-9`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6371)](https://github.com/Microsoft/vcpkg/pull/6371) [openexr,openimageio,suitesparse,theia] updates for non-win32
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- clblas         `2.12-1` -> `2.12-2`
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- clfft          `2.12.2` -> `2.12.2-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- cli            `1.1` -> `1.1-1`
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- clp            `1.17.2` -> `1.17.2-2`
    - [(#6371)](https://github.com/Microsoft/vcpkg/pull/6371) [openexr,openimageio,suitesparse,theia] updates for non-win32
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- cnl            `2019-01-09` -> `2019-06-23`
    - [(#7031)](https://github.com/Microsoft/vcpkg/pull/7031) [cnl] Update cnl to latest

- coinutils      `2.11.2` -> `2.11.2-2`
    - [(#6371)](https://github.com/Microsoft/vcpkg/pull/6371) [openexr,openimageio,suitesparse,theia] updates for non-win32
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- collada-dom    `2.5.0` -> `2.5.0-1`
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- console-bridge `0.3.2-3` -> `0.3.2-4`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- cpp-netlib     `0.13.0-final` -> `0.13.0-2`
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- cppcms         `1.1.0-2` -> `1.2.1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24

- cpr            `1.3.0-6` -> `1.3.0-7`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6429)](https://github.com/Microsoft/vcpkg/pull/6429) [Curl] Upgrades 2019.05.08

- crc32c         `1.0.7` -> `1.0.7-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- cryptopp       `8.1.0` -> `8.1.0-2`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6821)](https://github.com/Microsoft/vcpkg/pull/6821) [cryptopp] fix build by disabling assembly on osx

- curl           `7.61.1-7` -> `7.65.0-2`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6429)](https://github.com/Microsoft/vcpkg/pull/6429) [Curl] Upgrades 2019.05.08
    - [(#6649)](https://github.com/Microsoft/vcpkg/pull/6649) [Curl] Fix cmake target name
    - [(#6698)](https://github.com/Microsoft/vcpkg/pull/6698) [curl] Revert revert of `-imp` suffix removal.
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- cxxopts        `2.1.2` -> `2.1.2-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- darknet        `0.2.5-1` -> `0.2.5-4`
    - [(#6787)](https://github.com/Microsoft/vcpkg/pull/6787) [darknet] update to latest release
    - [(#7064)](https://github.com/Microsoft/vcpkg/pull/7064) [darknet] enable ninja

- darts-clone    `1767ab87cffe` -> `1767ab87cffe-1`
    - [(#6875)](https://github.com/Microsoft/vcpkg/pull/6875) [libsodium/darts-clone] remove conflicting makefile

- dcmtk          `3.6.3-1` -> `3.6.4`
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24

- dlib           `19.17` -> `19.17-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6371)](https://github.com/Microsoft/vcpkg/pull/6371) [openexr,openimageio,suitesparse,theia] updates for non-win32

- doctest        `2.3.2` -> `2.3.3`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6998)](https://github.com/Microsoft/vcpkg/pull/6998) [doctest] Update to 2.3.3

- draco          `1.3.3-2` -> `1.3.5`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6796)](https://github.com/Microsoft/vcpkg/pull/6796) [draco, flatbuffers, forge] Update to new version

- duilib         `2019-4-28-1` -> `2019-4-28-2`
    - [(#7074)](https://github.com/Microsoft/vcpkg/pull/7074) [vcpkg_configure_cmake] Add NO_CHARSET_FLAG option

- ebml           `1.3.8` -> `1.3.9`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6371)](https://github.com/Microsoft/vcpkg/pull/6371) [openexr,openimageio,suitesparse,theia] updates for non-win32
    - [(#6662)](https://github.com/Microsoft/vcpkg/pull/6662) [ebml, matroska] Upgrade ebml to v1.3.9 and matroska to v1.5.2

- eigen3         `3.3.7-1` -> `3.3.7-2`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- ensmallen      `1.15.0` -> `1.15.1`
    - [(#6371)](https://github.com/Microsoft/vcpkg/pull/6371) [openexr,openimageio,suitesparse,theia] updates for non-win32
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24

- entityx        `1.3.0` -> `1.3.0-1`
    - [(#6736)](https://github.com/Microsoft/vcpkg/pull/6736) [entityx][entt] Disable parallel configure
    - [(#6844)](https://github.com/Microsoft/vcpkg/pull/6844) [vcpkg] Add optional 'Homepage' field to CONTROL

- entt           `3.0.0` -> `3.0.0-1`
    - [(#6736)](https://github.com/Microsoft/vcpkg/pull/6736) [entityx][entt] Disable parallel configure
    - [(#6844)](https://github.com/Microsoft/vcpkg/pull/6844) [vcpkg] Add optional 'Homepage' field to CONTROL

- exiv2          `0.27` -> `0.27.1-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6371)](https://github.com/Microsoft/vcpkg/pull/6371) [openexr,openimageio,suitesparse,theia] updates for non-win32
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6844)](https://github.com/Microsoft/vcpkg/pull/6844) [vcpkg] Add optional 'Homepage' field to CONTROL
    - [(#6905)](https://github.com/Microsoft/vcpkg/pull/6905) [Exiv2] update to 0.27.1

- fastcdr        `1.0.6-2` -> `1.0.9-1`
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24

- fcl            `0.5.0-5` -> `0.5.0-6`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- ffmpeg         `4.1-5` -> `4.1-8`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6371)](https://github.com/Microsoft/vcpkg/pull/6371) [openexr,openimageio,suitesparse,theia] updates for non-win32
    - [(#6590)](https://github.com/Microsoft/vcpkg/pull/6590) ffmpeg: enable arm/arm64 windows support
    - [(#6694)](https://github.com/Microsoft/vcpkg/pull/6694) [ffmpeg] Correctly set environment variables for gcc/clang/icc
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6743)](https://github.com/Microsoft/vcpkg/pull/6743) [ffmpeg] Fix regression on windows
    - [(#6784)](https://github.com/Microsoft/vcpkg/pull/6784) [FFmpeg] Add 'vpx' feature.

- fizz           `2019.05.13.00` -> `2019.05.20.00-1`
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6969)](https://github.com/Microsoft/vcpkg/pull/6969) [libevent] Upgrade to version 2.1.10

- flann          `jan2019` -> `1.9.1-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6931)](https://github.com/Microsoft/vcpkg/pull/6931) [flann]Upgrade version to 1.9.1 and fix build error.
    - [(#7073)](https://github.com/Microsoft/vcpkg/pull/7073) [flann] fix flaky config

- flatbuffers    `1.10.0-1` -> `1.11.0-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6796)](https://github.com/Microsoft/vcpkg/pull/6796) [draco, flatbuffers, forge] Update to new version
    - [(#6844)](https://github.com/Microsoft/vcpkg/pull/6844) [vcpkg] Add optional 'Homepage' field to CONTROL

- fmi4cpp        `0.7.0` -> `0.7.0-1`
    - [(#7021)](https://github.com/Microsoft/vcpkg/pull/7021) [nana, fmi4cpp] Fix Visual Studio 2019 deprecates <experimental/filesystem>.

- folly          `2019.05.13.00` -> `2019.05.20.00-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6974)](https://github.com/Microsoft/vcpkg/pull/6974) [Folly] define _CRT_INTERNAL_NONSTDC_NAMES to 0 to disable non-underscore posix names on windows

- fontconfig     `2.12.4-8` -> `2.12.4-9`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6371)](https://github.com/Microsoft/vcpkg/pull/6371) [openexr,openimageio,suitesparse,theia] updates for non-win32

- forest         `11.0.1` -> `12.0.0`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6938)](https://github.com/Microsoft/vcpkg/pull/6938) [forest] move to 12.0.0

- forge          `1.0.3-1` -> `1.0.4-1`
    - [(#6796)](https://github.com/Microsoft/vcpkg/pull/6796) [draco, flatbuffers, forge] Update to new version

- freeimage      `3.18.0-5` -> `3.18.0-6`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- freerdp        `2.0.0-rc4-1` -> `2.0.0-rc4-2`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- freetype       `2.9.1-1` -> `2.10.0`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6754)](https://github.com/Microsoft/vcpkg/pull/6754) Fix freetype cmake config files
    - [(#7057)](https://github.com/Microsoft/vcpkg/pull/7057) [freetype] Upgrade to version 2.10.0

- freexl         `1.0.4-1` -> `1.0.4-2`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6813)](https://github.com/Microsoft/vcpkg/pull/6813) [freexl]: Linux build support

- ftgl           `2.3.1` -> `2.4.0-1`
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24

- g2o            `20170730_git-4` -> `20170730_git-5`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6371)](https://github.com/Microsoft/vcpkg/pull/6371) [openexr,openimageio,suitesparse,theia] updates for non-win32
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6844)](https://github.com/Microsoft/vcpkg/pull/6844) [vcpkg] Add optional 'Homepage' field to CONTROL

- gdcm           `3.0.0` -> `3.0.0-3`
    - [(#6710)](https://github.com/Microsoft/vcpkg/pull/6710) [gdcm,jbig2dec] move patches from #5169
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- gdk-pixbuf     `2.36.9-2` -> `2.36.9-3`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6663)](https://github.com/Microsoft/vcpkg/pull/6663) [gdk-pixbuf] Fix Linux compilation.

- geogram        `1.6.9-3` -> `1.6.9-6`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6371)](https://github.com/Microsoft/vcpkg/pull/6371) [openexr,openimageio,suitesparse,theia] updates for non-win32
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- geographiclib  `1.47-patch1-5` -> `1.47-patch1-6`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- gherkin-c      `c-libs-e63e83104b` -> `4.1.2`
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24

- gl3w           `99ed3211` -> `2018-05-31-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- glad           `0.1.29` -> `0.1.30`
    - [(#6819)](https://github.com/Microsoft/vcpkg/pull/6819) [glad] update to 0.1.30

- glbinding      `3.1.0` -> `3.1.0-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6872)](https://github.com/Microsoft/vcpkg/pull/6872) set CMAKE_SYSTEM_PROCESSOR in Linux
    - [(#6876)](https://github.com/Microsoft/vcpkg/pull/6876) [glbinding] remove conflict with other opengl ports

- glew           `2.1.0-3` -> `2.1.0-4`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6853)](https://github.com/Microsoft/vcpkg/pull/6853) [glew] Disable the link option /nodefaultlib and /noentry

- glib           `2.52.3-14-1` -> `2.52.3-14-2`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6663)](https://github.com/Microsoft/vcpkg/pull/6663) [gdk-pixbuf] Fix Linux compilation.

- glibmm         `2.52.1-8` -> `2.52.1-9`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6550)](https://github.com/Microsoft/vcpkg/pull/6550) [glibmm] Reintroduce CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS
    - [(#6844)](https://github.com/Microsoft/vcpkg/pull/6844) [vcpkg] Add optional 'Homepage' field to CONTROL

- globjects      `1.1.0-2018-09-19-1` -> `1.1.0-2`
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6844)](https://github.com/Microsoft/vcpkg/pull/6844) [vcpkg] Add optional 'Homepage' field to CONTROL

- glog           `0.4.0` -> `0.4.0-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- glslang        `2018-03-02-2` -> `2019-03-05`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6689)](https://github.com/Microsoft/vcpkg/pull/6689) [shaderc] update

- google-cloud-cpp `0.9.0` -> `0.10.0`
    - [(#6785)](https://github.com/Microsoft/vcpkg/pull/6785) Upgrade google-cloud-cpp to 0.10.0.

- graphicsmagick `1.3.31-1` -> `1.3.32`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6947)](https://github.com/Microsoft/vcpkg/pull/6947) Graphicsmagick 1.3.32

- graphite2      `1.3.12` -> `1.3.12-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- grpc           `1.20.1-1` -> `1.21.1-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#5630)](https://github.com/Microsoft/vcpkg/pull/5630) [scripts] Fix vcpkg_fixup_cmake on non Windows platforms
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- gsoap          `2.8.82-2` -> `2.8.84-1`
    - [(#6371)](https://github.com/Microsoft/vcpkg/pull/6371) [openexr,openimageio,suitesparse,theia] updates for non-win32
    - [(#6756)](https://github.com/Microsoft/vcpkg/pull/6756) update to 2.8.84

- gtk            `3.22.19-2` -> `3.22.19-3`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6671)](https://github.com/Microsoft/vcpkg/pull/6671) [pango/gtk]Fix build error C2001.

- harfbuzz       `2.4.0` -> `2.5.1-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6659)](https://github.com/Microsoft/vcpkg/pull/6659) [libraqm] Add new port (0.6.0)
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6761)](https://github.com/Microsoft/vcpkg/pull/6761) [harfbuzz]Upgrade version to 2.5.1 and fix patches.
    - [(#6879)](https://github.com/Microsoft/vcpkg/pull/6879) [harfbuzz] Propagate dependency on glib downstream

- hdf5           `1.10.5-5` -> `1.10.5-7`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6771)](https://github.com/Microsoft/vcpkg/pull/6771) [netcdf-c/hdf5] improve/correct linkage

- hpx            `1.2.1-1` -> `1.3.0-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6755)](https://github.com/Microsoft/vcpkg/pull/6755) Updating HPX to V1.3.0

- http-parser    `2.9.2` -> `2.9.2-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- icu            `61.1-6` -> `61.1-7`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6695)](https://github.com/Microsoft/vcpkg/pull/6695) [icu] Enable parallel builds

- idevicerestore `1.0.12-2` -> `1.0.12-3`
    - [(#6698)](https://github.com/Microsoft/vcpkg/pull/6698) [curl] Revert revert of `-imp` suffix removal.

- imgui          `1.70` -> `1.70-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- inih           `43` -> `44`
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24

- ismrmrd        `1.4` -> `1.4.0-1`
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- itk            `4.13.0-906736bd-3` -> `5.0.0-2`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6767)](https://github.com/Microsoft/vcpkg/pull/6767) [itk] Upgrade to 5.0.0

- jansson        `2.11-2` -> `2.12-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24

- jasper         `2.0.16-1` -> `2.0.16-2`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- jbig2dec       `0.16` -> `0.16-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6710)](https://github.com/Microsoft/vcpkg/pull/6710) [gdcm,jbig2dec] move patches from #5169

- json-dto       `0.2.8` -> `0.2.8-2`
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- json11         `2017-06-20-1` -> `2017-06-20-2`
    - [(#6967)](https://github.com/Microsoft/vcpkg/pull/6967) [ppconsul] remove conflict with json11

- jxrlib         `1.1-6` -> `1.1-7`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- kangaru        `4.1.3` -> `4.1.3-1`
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- kd-soap        `1.7.0` -> `1.8.0`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6838)](https://github.com/Microsoft/vcpkg/pull/6838) [kd-soap]Upgrade version to 1.8.0
    - [(#6844)](https://github.com/Microsoft/vcpkg/pull/6844) [vcpkg] Add optional 'Homepage' field to CONTROL

- lcm            `1.3.95-1` -> `1.4.0`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6836)](https://github.com/Microsoft/vcpkg/pull/6836) [lcm]Upgrade version to 1.4.0 and fix build error.

- leptonica      `1.76.0` -> `1.76.0-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- leveldb        `2017-10-25-8b1cd3753b184341e837b30383832645135d3d73-3` -> `1.22`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6900)](https://github.com/Microsoft/vcpkg/pull/6900) [leveldb] Port update

- libbson        `1.13.0` -> `1.14.0-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6862)](https://github.com/Microsoft/vcpkg/pull/6862) [libbson mongo-c-driver mongo-cxx-driver] upgrades to new revision

- libcroco       `0.6.13` -> `0.6.13-1`
    - [(#6663)](https://github.com/Microsoft/vcpkg/pull/6663) [gdk-pixbuf] Fix Linux compilation.

- libevent       `2.1.8-5` -> `2.1.10`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6969)](https://github.com/Microsoft/vcpkg/pull/6969) [libevent] Upgrade to version 2.1.10

- libfreenect2   `0.2.0-1` -> `0.2.0-2`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- libgeotiff     `1.4.2-8` -> `1.4.2-9`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6000)](https://github.com/Microsoft/vcpkg/pull/6000) [LibLZMA] automatic configuration

- libgit2        `0.28.1` -> `0.28.2`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24

- libharu        `2017-08-15-d84867ebf9f-6` -> `2017-08-15-8`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- libics         `1.6.2` -> `1.6.3`
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24

- libideviceactivation `1.2.68` -> `1.2.68-1`
    - [(#6698)](https://github.com/Microsoft/vcpkg/pull/6698) [curl] Revert revert of `-imp` suffix removal.

- libimobiledevice `1.2.1.215-1` -> `1.2.76`
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24

- libjpeg-turbo  `2.0.1-1` -> `2.0.2`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6482)](https://github.com/Microsoft/vcpkg/pull/6482) [libjpeg-turbo] Upgrades 2019.05.08

- liblemon       `1.3.1-4` -> `2019-06-13`
    - [(#6371)](https://github.com/Microsoft/vcpkg/pull/6371) [openexr,openimageio,suitesparse,theia] updates for non-win32
    - [(#6679)](https://github.com/Microsoft/vcpkg/pull/6679) [liblemon] made into a rolling-release port

- liblsl         `1.13.0-b4` -> `1.13.0-b6`
    - [(#6745)](https://github.com/Microsoft/vcpkg/pull/6745) [liblsl] Update liblsl port to 1.13.0-b6

- liblzma        `5.2.4-1` -> `5.2.4-2`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6000)](https://github.com/Microsoft/vcpkg/pull/6000) [LibLZMA] automatic configuration

- libmikmod      `3.3.11.1-2` -> `3.3.11.1-4`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#7035)](https://github.com/Microsoft/vcpkg/pull/7035) [libmikmod] patch cmake warning
    - [(#7052)](https://github.com/Microsoft/vcpkg/pull/7052) [libmikmod] resolve ninja error (-w dupbuild=err)

- libmodbus      `3.1.4-2` -> `3.1.4-3`
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- libmupdf       `1.12.0-2` -> `1.15.0`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6710)](https://github.com/Microsoft/vcpkg/pull/6710) [gdcm,jbig2dec] move patches from #5169
    - [(#7046)](https://github.com/Microsoft/vcpkg/pull/7046) [libmupdf] Update the port to version 1.15.0

- libmysql       `8.0.4-3` -> `8.0.4-4`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6442)](https://github.com/Microsoft/vcpkg/pull/6442) [libmysql]Fix build error in linux.

- libogg         `1.3.3-2` -> `1.3.3-4`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6588)](https://github.com/Microsoft/vcpkg/pull/6588) [libogg] Update to 1.3.3-3
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- libopusenc     `0.1-1` -> `0.2.1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6748)](https://github.com/Microsoft/vcpkg/pull/6748) [libopusenc]Upgrade version to 0.2.1

- libpff         `2018-07-14` -> `2018-07-14-1`
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- libplist       `2.0.1.197-2` -> `1.2.77`
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24

- libpng         `1.6.37-1` -> `1.6.37-2`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- libqglviewer   `2.7.1-1` -> `2.7.0`
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24

- libraw         `0.19.2` -> `201903-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6742)](https://github.com/Microsoft/vcpkg/pull/6742) [libraw] Add include for select_library_configurations [(#6715)](https://github.com/Microsoft/vcpkg/pull/6715)

- libressl       `2.9.1` -> `2.9.1-2`
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- libsndfile     `1.0.29-6830c42-6` -> `1.0.29-8`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6896)](https://github.com/Microsoft/vcpkg/pull/6896) [sndfile/libsndfile] remove duplicate port, forward to libsndfile

- libsodium      `1.0.17-2` -> `1.0.18`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6778)](https://github.com/Microsoft/vcpkg/pull/6778) [libsodium] Update to 1.0.18
    - [(#6875)](https://github.com/Microsoft/vcpkg/pull/6875) [libsodium/darts-clone] remove conflicting makefile

- libspatialite  `4.3.0a-2` -> `4.3.0a-3`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6000)](https://github.com/Microsoft/vcpkg/pull/6000) [LibLZMA] automatic configuration

- libsquish      `1.15` -> `1.15-1`
    - [(#6893)](https://github.com/Microsoft/vcpkg/pull/6893) [libsquish] fix flaky build

- libtins        `4.0-2` -> `4.2`
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#7008)](https://github.com/Microsoft/vcpkg/pull/7008) [libtins]Upgrade version to 4.2 and adds dependent ports to new version.

- libunibreak    `4.1` -> `4.2`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24

- libusb         `1.0.22-2` -> `1.0.22-3`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- libusbmuxd     `1.0.107-2` -> `1.2.77`
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24

- libuv          `1.29.0` -> `1.29.1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24

- libwebp        `1.0.2-3` -> `1.0.2-6`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6648)](https://github.com/Microsoft/vcpkg/pull/6648) [libwebp]Fix static build: add dependency libraries ""dxguid winmm"".

- libwebsockets  `3.1.0` -> `3.1.0-2`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6855)](https://github.com/Microsoft/vcpkg/pull/6855) [libwebsockets] Fix build error on Linux

- libxlsxwriter  `0.8.6-1` -> `0.8.7-1`
    - [(#7034)](https://github.com/Microsoft/vcpkg/pull/7034) [libxlsxwriter] upgrade to 0.8.7

- libxslt        `1.1.29` -> `1.1.33`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#7058)](https://github.com/Microsoft/vcpkg/pull/7058) [libxslt] Update the version to 1.1.33 and change the URL.

- libyaml        `0.2.1-1` -> `0.2.2`
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24

- llvm           `7.0.0-2` -> `7.0.0-3`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6631)](https://github.com/Microsoft/vcpkg/pull/6631) [llvm]Fix build error on x64-windows.

- lmdb           `0.9.23` -> `0.9.23-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- log4cplus      `2.0.4` -> `2.0.4-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6930)](https://github.com/Microsoft/vcpkg/pull/6930) [log4cplus]Fix lnk2019 errors when using log4cplus.

- lz4            `1.9.1-1` -> `1.9.1-2`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6735)](https://github.com/Microsoft/vcpkg/pull/6735) [lz4]Fix conflict file xxhash.h

- magnum-extras  `2019.01-1` -> `2019.01-2`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6844)](https://github.com/Microsoft/vcpkg/pull/6844) [vcpkg] Add optional 'Homepage' field to CONTROL

- magnum-integration `2019.01-1` -> `2019.01-2`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6844)](https://github.com/Microsoft/vcpkg/pull/6844) [vcpkg] Add optional 'Homepage' field to CONTROL

- mathgl         `2.4.3` -> `2.4.3-1`
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- matroska       `1.5.1` -> `1.5.2`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6662)](https://github.com/Microsoft/vcpkg/pull/6662) [ebml, matroska] Upgrade ebml to v1.3.9 and matroska to v1.5.2

- miniz          `2.0.8` -> `2.1.0`
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24

- mlpack         `3.1.0-1` -> `3.1.1`
    - [(#6371)](https://github.com/Microsoft/vcpkg/pull/6371) [openexr,openimageio,suitesparse,theia] updates for non-win32
    - [(#6907)](https://github.com/Microsoft/vcpkg/pull/6907) [mlpack] Updated to version 3.1.1

- mongo-c-driver `1.13.0` -> `1.14.0-2`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6862)](https://github.com/Microsoft/vcpkg/pull/6862) [libbson mongo-c-driver mongo-cxx-driver] upgrades to new revision

- mongo-cxx-driver `3.2.0-2` -> `3.4.0-2`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6862)](https://github.com/Microsoft/vcpkg/pull/6862) [libbson mongo-c-driver mongo-cxx-driver] upgrades to new revision

- moos-core      `10.4.0-2` -> `10.4.0-3`
    - [(#6371)](https://github.com/Microsoft/vcpkg/pull/6371) [openexr,openimageio,suitesparse,theia] updates for non-win32
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6844)](https://github.com/Microsoft/vcpkg/pull/6844) [vcpkg] Add optional 'Homepage' field to CONTROL

- mosquitto      `1.5.0-3` -> `1.6.2-2`
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6844)](https://github.com/Microsoft/vcpkg/pull/6844) [vcpkg] Add optional 'Homepage' field to CONTROL

- ms-angle       `2018-04-18-1` -> `2018-04-18-2`
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- msix           `MsixCoreInstaller-preview` -> `MsixCoreInstaller-preview-1`
    - [(#7074)](https://github.com/Microsoft/vcpkg/pull/7074) [vcpkg_configure_cmake] Add NO_CHARSET_FLAG option

- msmpi          `10.0` -> `10.0-2`
    - [(#6945)](https://github.com/Microsoft/vcpkg/pull/6945) [msmpi] Fix /MD for static libs.

- nana           `1.7.1` -> `1.7.1-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#7021)](https://github.com/Microsoft/vcpkg/pull/7021) [nana, fmi4cpp] Fix Visual Studio 2019 deprecates <experimental/filesystem>.

- nanomsg        `1.1.5` -> `1.1.5-1`
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- netcdf-c       `4.7.0` -> `4.7.0-3`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6771)](https://github.com/Microsoft/vcpkg/pull/6771) [netcdf-c/hdf5] improve/correct linkage
    - [(#6865)](https://github.com/Microsoft/vcpkg/pull/6865) [netcdf-c]Fix build error on linux.
    - [(#6971)](https://github.com/Microsoft/vcpkg/pull/6971) [netcdf-c] Fix link error.

- nlopt          `2.6.1` -> `2.6.1-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6739)](https://github.com/Microsoft/vcpkg/pull/6739) [protobuf] Update to 3.8.0

- nmslib         `1.7.2-1` -> `1.7.3.6`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24

- nrf-ble-driver `4.1.0` -> `4.1.1`

- nvtt           `2.1.0-3` -> `2.1.1`
    - [(#6765)](https://github.com/Microsoft/vcpkg/pull/6765) [nvtt]Upgrade version to 2.1.1 and fix build error on windows.

- octomap        `cefed0c1d79afafa5aeb05273cf1246b093b771c-6` -> `2017-03-11-7`
    - [(#6371)](https://github.com/Microsoft/vcpkg/pull/6371) [openexr,openimageio,suitesparse,theia] updates for non-win32
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- ogre           `1.11.3-4` -> `1.12.0-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24

- oniguruma      `6.9.2` -> `6.9.2-2`
    - [(#6958)](https://github.com/Microsoft/vcpkg/pull/6958) [vcpkg] Add vcpkg_check_features
    - [(#7091)](https://github.com/Microsoft/vcpkg/pull/7091) [vcpkg] Update vcpkg_check_features document

- openblas       `0.3.6-2` -> `0.3.6-4`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6371)](https://github.com/Microsoft/vcpkg/pull/6371) [openexr,openimageio,suitesparse,theia] updates for non-win32
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- opencv         `3.4.3-7` -> `3.4.3-9`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6000)](https://github.com/Microsoft/vcpkg/pull/6000) [LibLZMA] automatic configuration
    - [(#6812)](https://github.com/Microsoft/vcpkg/pull/6812) [opencv] Fixed OpenCV versioning using wrong commit
    - [(#6901)](https://github.com/Microsoft/vcpkg/pull/6901) [opencv]Fix build error with feature gdcm: cannot find openjp2.

- openexr        `2.3.0-3` -> `2.3.0-4`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6371)](https://github.com/Microsoft/vcpkg/pull/6371) [openexr,openimageio,suitesparse,theia] updates for non-win32
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- openmama       `6.2.3` -> `6.2.3-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- openmvg        `1.4-2` -> `1.4-5`
    - [(#6371)](https://github.com/Microsoft/vcpkg/pull/6371) [openexr,openimageio,suitesparse,theia] updates for non-win32
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- openmvs        `0.9` -> `1.0-1`
    - [(#6692)](https://github.com/Microsoft/vcpkg/pull/6692) update to v1.0
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- openni2        `2.2.0.33-8` -> `2.2.0.33-9`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- openssl        `0` -> `1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- opentracing    `1.5.1` -> `1.5.1-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6844)](https://github.com/Microsoft/vcpkg/pull/6844) [vcpkg] Add optional 'Homepage' field to CONTROL

- openvdb        `6.0.0-2` -> `6.1.0`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6864)](https://github.com/Microsoft/vcpkg/pull/6864) [openvdb]Upgrade version to 6.1.0, regenerate patches and fix build errors.

- openvpn3       `2018-03-21` -> `2018-03-21-1`
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24

- openvr         `1.1.3b` -> `1.4.18`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24

- opusfile       `0.11-2` -> `0.11-3`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- orc            `1.5.5` -> `1.5.5-1`
    - [(#6739)](https://github.com/Microsoft/vcpkg/pull/6739) [protobuf] Update to 3.8.0

- orocos-kdl     `1.4` -> `1.4-1`
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- osi            `0.108.4` -> `0.108.4-2`
    - [(#6371)](https://github.com/Microsoft/vcpkg/pull/6371) [openexr,openimageio,suitesparse,theia] updates for non-win32
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- paho-mqtt      `1.2.1-1` -> `1.3.0`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6762)](https://github.com/Microsoft/vcpkg/pull/6762) [paho-mqtt] Upgrade to 1.3.0

- pango          `1.40.11-3` -> `1.40.11-4`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6671)](https://github.com/Microsoft/vcpkg/pull/6671) [pango/gtk]Fix build error C2001.

- pangolin       `0.5-6` -> `0.5-7`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- parallel-hashmap `1.22` -> `1.23`
    - [(#6917)](https://github.com/Microsoft/vcpkg/pull/6917) [parallel-hashmap] Update to current 1.23 version and include natvis file.

- pcl            `1.9.1-3` -> `1.9.1-4`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- pdal           `1.7.1-4` -> `1.7.1-5`
    - [(#6000)](https://github.com/Microsoft/vcpkg/pull/6000) [LibLZMA] automatic configuration
    - [(#6603)](https://github.com/Microsoft/vcpkg/pull/6603) [pdal] delete and replace different find modules
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- pdcurses       `3.6` -> `3.8`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24

- poco           `2.0.0-pre-1` -> `2.0.0-pre-2`
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6844)](https://github.com/Microsoft/vcpkg/pull/6844) [vcpkg] Add optional 'Homepage' field to CONTROL

- podofo         `0.9.6-6` -> `0.9.6-7`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6000)](https://github.com/Microsoft/vcpkg/pull/6000) [LibLZMA] automatic configuration

- proj4          `4.9.3-1` -> `4.9.3-3`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6000)](https://github.com/Microsoft/vcpkg/pull/6000) [LibLZMA] automatic configuration
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- prometheus-cpp `0.6.0` -> `0.7.0`
    - [(#6822)](https://github.com/Microsoft/vcpkg/pull/6822) [prometheus-cpp] Update to version 0.7.0

- protobuf       `3.7.1` -> `3.8.0-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6739)](https://github.com/Microsoft/vcpkg/pull/6739) [protobuf] Update to 3.8.0

- pugixml        `1.9-1` -> `1.9-2`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- qca            `2.2.0-4` -> `2.2.1`
    - [(#6839)](https://github.com/Microsoft/vcpkg/pull/6839) [qca]Upgrade version to 2.2.1 and fix build error.
    - [(#6844)](https://github.com/Microsoft/vcpkg/pull/6844) [vcpkg] Add optional 'Homepage' field to CONTROL

- qt5-base       `5.12.3-1` -> `5.12.3-2`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#7019)](https://github.com/Microsoft/vcpkg/pull/7019) [qt5-base]Add execute permission when installing executables in Linux.

- qt5-declarative `5.12.3` -> `5.12.3-1`
    - [(#6927)](https://github.com/Microsoft/vcpkg/pull/6927) [qt5-declarative]Fix error when building release-only.

- re2            `2019-05-07` -> `2019-05-07-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- realsense2     `2.16.1-2` -> `2.22.0-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#5275)](https://github.com/Microsoft/vcpkg/pull/5275) [realsense2] Enable OpenNI2 driver option
    - [(#5777)](https://github.com/Microsoft/vcpkg/pull/5777) [realsense2] Update to v2.19.0

- reproc         `6.0.0` -> `6.0.0-1`
    - [(#6711)](https://github.com/Microsoft/vcpkg/pull/6711) [reproc] Enabled C++ target for version 6.0.0.

- restinio       `0.4.9` -> `0.5.1-1`
    - [(#6669)](https://github.com/Microsoft/vcpkg/pull/6669) RESTinio updated to v.0.4.9.1
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6749)](https://github.com/Microsoft/vcpkg/pull/6749) RESTinio updated to v.0.5.0
    - [(#6933)](https://github.com/Microsoft/vcpkg/pull/6933) RESTinio updated to v.0.5.1

- robin-map      `0.2.0` -> `0.6.1`
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24

- rtmidi         `2.1.1-2` -> `4.0.0`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6635)](https://github.com/Microsoft/vcpkg/pull/6635) [rtmidi] Update to version 4.0.0

- sdl2           `2.0.9-3` -> `2.0.9-4`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- sdl2-image     `2.0.4-2` -> `2.0.4-3`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- sdl2-mixer     `2.0.4-2` -> `2.0.4-3`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6929)](https://github.com/Microsoft/vcpkg/pull/6929) [sdl2-mixer]Fix build error with feature opusfile.

- sdl2-net       `2.0.1-6` -> `2.0.1-7`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- sdl2-ttf       `2.0.15-2` -> `2.0.15-3`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- selene         `0.3.1` -> `0.3.1-1`
    - [(#6000)](https://github.com/Microsoft/vcpkg/pull/6000) [LibLZMA] automatic configuration
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- sf2cute        `0.2.0` -> `0.2.0-1`
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- shaderc        `12fb656ab20ea9aa06e7084a74e5ff832b7ce2da-2` -> `2019-06-26`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6689)](https://github.com/Microsoft/vcpkg/pull/6689) [shaderc] update

- shiva          `1.0` -> `1.0-2`
    - [(#6000)](https://github.com/Microsoft/vcpkg/pull/6000) [LibLZMA] automatic configuration
    - [(#6637)](https://github.com/Microsoft/vcpkg/pull/6637) [shiva] Fix build error ""Could NOT find PythonInterp""

- shogun         `6.1.3-1` -> `6.1.3-3`
    - [(#6371)](https://github.com/Microsoft/vcpkg/pull/6371) [openexr,openimageio,suitesparse,theia] updates for non-win32
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6739)](https://github.com/Microsoft/vcpkg/pull/6739) [protobuf] Update to 3.8.0
    - [(#6872)](https://github.com/Microsoft/vcpkg/pull/6872) set CMAKE_SYSTEM_PROCESSOR in Linux

- sndfile        `1.0.29-cebfdf2-1` -> `0`
    - [(#6371)](https://github.com/Microsoft/vcpkg/pull/6371) [openexr,openimageio,suitesparse,theia] updates for non-win32
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6896)](https://github.com/Microsoft/vcpkg/pull/6896) [sndfile/libsndfile] remove duplicate port, forward to libsndfile

- snowhouse      `3.0.1` -> `3.1.0`
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24

- so5extra       `1.2.3` -> `1.2.3-1`
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- sobjectizer    `5.5.24.4` -> `5.5.24.4-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- sol2           `2.20.6` -> `3.0.2`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24

- sophus         `1.0.0-1` -> `1.0.0-6`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6371)](https://github.com/Microsoft/vcpkg/pull/6371) [openexr,openimageio,suitesparse,theia] updates for non-win32

- spdlog         `1.3.1` -> `1.3.1-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6924)](https://github.com/Microsoft/vcpkg/pull/6924) [spdlog]Add feature[benchmark]

- spirv-cross    `2018-08-07-1` -> `2019-05-09`
    - [(#6690)](https://github.com/Microsoft/vcpkg/pull/6690) update spirv cross

- spirv-headers  `2019-03-05` -> `2019-05-05`
    - [(#6689)](https://github.com/Microsoft/vcpkg/pull/6689) [shaderc] update

- spirv-tools    `2018.1-2` -> `2019.3-dev`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6689)](https://github.com/Microsoft/vcpkg/pull/6689) [shaderc] update

- sqlite-modern-cpp `3.2-e2248fa` -> `3.2-936cd0c8`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24

- sqlite-orm     `1.3` -> `1.3-1`
    - [(#6894)](https://github.com/Microsoft/vcpkg/pull/6894) [sqlite-orm] fix tag, update hash

- sqlite3        `3.27.2` -> `3.28.0-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6856)](https://github.com/Microsoft/vcpkg/pull/6856) [sqlite3]: Switch back to CMAKE_SYSTEM_NAME checks per original PR
    - [(#6856)](https://github.com/Microsoft/vcpkg/pull/6856) [sqlite3]: Shared library support for Linux
    - [(#6921)](https://github.com/Microsoft/vcpkg/pull/6921) [sqlite3] Update to 3.28.0

- sqlitecpp      `2.2-2` -> `2.3.0`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24

- strict-variant `v0.5` -> `0.5`
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24

- string-theory  `2.1` -> `2.1-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- suitesparse    `5.1.2-2` -> `5.4.0-3`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6371)](https://github.com/Microsoft/vcpkg/pull/6371) [openexr,openimageio,suitesparse,theia] updates for non-win32
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- systemc        `2.3.3-2` -> `2.3.3-3`
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- szip           `2.1.1-3` -> `2.1.1-4`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- taglib         `1.11.1-4` -> `1.11.1-20190531`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6851)](https://github.com/Microsoft/vcpkg/pull/6851) [taglib]Upgrade version to 1.11.1-20190531.

- tbb            `2019_U6` -> `2019_U7`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24

- tesseract      `4.0.0-1` -> `4.0.0-3`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6000)](https://github.com/Microsoft/vcpkg/pull/6000) [LibLZMA] automatic configuration
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- theia          `0.8` -> `0.8-2`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6371)](https://github.com/Microsoft/vcpkg/pull/6371) [openexr,openimageio,suitesparse,theia] updates for non-win32

- thor           `2.0-2` -> `2.0-3`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6953)](https://github.com/Microsoft/vcpkg/pull/6953) [thor] Fix error on Linux.

- thrift         `2019-05-07` -> `2019-05-07-2`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6872)](https://github.com/Microsoft/vcpkg/pull/6872) set CMAKE_SYSTEM_PROCESSOR in Linux
    - [(#7074)](https://github.com/Microsoft/vcpkg/pull/7074) [vcpkg_configure_cmake] Add NO_CHARSET_FLAG option

- tidy-html5     `5.6.0` -> `5.6.0-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#7074)](https://github.com/Microsoft/vcpkg/pull/7074) [vcpkg_configure_cmake] Add NO_CHARSET_FLAG option

- tiff           `4.0.10-4` -> `4.0.10-6`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6000)](https://github.com/Microsoft/vcpkg/pull/6000) [LibLZMA] automatic configuration

- tinyexif       `1.0.2-4` -> `1.0.2-5`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- tinyobjloader  `1.4.1-1` -> `1.0.7-1`
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- tinyxml2       `7.0.1` -> `7.0.1-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- tl-expected    `0.3-1` -> `1.0.0-1`
    - [(#7028)](https://github.com/Microsoft/vcpkg/pull/7028) [tl] Update tl::expected and tl::optional, add tl::function_ref

- tl-optional    `0.5-1` -> `1.0.0-1`
    - [(#7028)](https://github.com/Microsoft/vcpkg/pull/7028) [tl] Update tl::expected and tl::optional, add tl::function_ref

- tmx            `1.0.0` -> `1.0.0-1`
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- treehopper     `1.11.3-2` -> `1.11.3-3`
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6844)](https://github.com/Microsoft/vcpkg/pull/6844) [vcpkg] Add optional 'Homepage' field to CONTROL

- trompeloeil    `34` -> `34-1`
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6844)](https://github.com/Microsoft/vcpkg/pull/6844) [vcpkg] Add optional 'Homepage' field to CONTROL

- umock-c        `2019-05-16` -> `2019-05-16.1`
    - [(#6804)](https://github.com/Microsoft/vcpkg/pull/6804) [azure] Update azure-iot-sdk-c for public-preview release of 2019-05-16

- urdfdom        `1.0.3` -> `1.0.3-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- urdfdom-headers `1.0.3` -> `1.0.4-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- usd            `0.8.4` -> `0.8.4-1`
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- uvatlas        `sept2016-1` -> `apr2019`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24

- uvw            `1.17.0_libuv-v1.29` -> `1.17.0_libuv-v1.29-1`
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6844)](https://github.com/Microsoft/vcpkg/pull/6844) [vcpkg] Add optional 'Homepage' field to CONTROL

- visit-struct   `1.0` -> `1.0-1`
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- vlpp           `0.9.3.1-2` -> `0.10.0.0`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6793)](https://github.com/Microsoft/vcpkg/pull/6793) [vlpp] Upgrade to 0.10.0.0

- vtk            `8.2.0-2` -> `8.2.0-4`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6782)](https://github.com/Microsoft/vcpkg/pull/6782) [vtk] fix static hdf5 linkage.

- vxl            `v1.18.0-3` -> `v1.18.0-4`
    - [(#6657)](https://github.com/Microsoft/vcpkg/pull/6657) [vxl] move problematic feature to optional one

- wangle         `2019.05.13.00` -> `2019.05.20.00-1`
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- wil            `2019-05-08` -> `2019-06-10`
    - [(#6847)](https://github.com/Microsoft/vcpkg/pull/6847) Update commit for WIL

- wt             `4.0.5` -> `4.0.5-1`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6925)](https://github.com/Microsoft/vcpkg/pull/6925) [wt] Fix XML file installation path

- xerces-c       `3.2.2-9` -> `3.2.2-10`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6970)](https://github.com/Microsoft/vcpkg/pull/6970) [xerces-c]Replace the macro DLL_EXPORT with the macro XERCES_DLL_EXPORT

- xeus           `0.19.1-1` -> `0.19.2`
    - [(#6618)](https://github.com/Microsoft/vcpkg/pull/6618) [many ports] Updates 2019.05.24

- xsimd          `7.2.3` -> `7.2.3-1`
    - [(#7091)](https://github.com/Microsoft/vcpkg/pull/7091) [vcpkg] Update vcpkg_check_features document

- xtensor        `0.20.7` -> `0.20.7-1`
    - [(#6958)](https://github.com/Microsoft/vcpkg/pull/6958) [vcpkg] Add vcpkg_check_features

- xxhash         `0.6.4-1` -> `0.7.0`
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
    - [(#6750)](https://github.com/Microsoft/vcpkg/pull/6750) [xxhash]Upgrade version to 0.7.0 and fix arm/uwp build errors.

- z3             `4.8.4-1` -> `4.8.5-1`
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6803)](https://github.com/Microsoft/vcpkg/pull/6803) [z3] bump version to 4.8.5

- zopfli         `2019-01-19` -> `2019-01-19-1`
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- zserge-webview `2019-04-27-1` -> `2019-04-27-2`
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl

- zxing-cpp      `3.3.3-3` -> `3.3.3-5`
    - [(#6371)](https://github.com/Microsoft/vcpkg/pull/6371) [openexr,openimageio,suitesparse,theia] updates for non-win32
    - [(#6730)](https://github.com/Microsoft/vcpkg/pull/6730) [many ports] improvements for linux/wsl
    - [(#6779)](https://github.com/Microsoft/vcpkg/pull/6779) [zxing-cpp] Fixed renaming zxing` -> `zxing-cpp`

- zziplib        `0.13.69-3` -> `0.13.69-4`
    - [(#7090)](https://github.com/Microsoft/vcpkg/pull/7090) [zziplib] fix flaky build
    - [(#2933)](https://github.com/Microsoft/vcpkg/pull/2933) [WIP] Add a Homepage URL entry for vcpkg ports
</details>",68312233
81,False,False,2020-01-13T08:06:56Z,2020-01-13T19:26:19Z,"## New features
* Added ringbuffer sink. Thanks @eudoxos (#1307).
* Auto create the required logging directories if they do not exist (9b7812a0f22f4743ee1618c7d879c8f30004253d).
* Update bundled fmt to version 6.1.2. 
* Added the optional `!` modifier to truncate the result if the field size exceeds the specified width (see [wiki](https://github.com/gabime/spdlog/wiki/3.-Custom-formatting) for details).

## Fixes and improvements
* Fix build failure on clang 7 with libc++. Thanks @jktjkt  (a03f9eb1561e738b9111e731d5f183c5b6093d71).
* Fix some spelling errors. Thanks @flopp .
* Fix - compilation when using external fmt library. Thanks @dvhwgumby for reporting (#1273).
* Fix location of CMake config info. Thanks @dvhwgumby  for reporting (#1274)
* Fix missing include (9a68bd8cc8d721cc1c3a988c62229679df7b88be).
* CMake code duplication improvement. Thanks @bencsikandrei (#1283)
* CMake improvments in tests . Thanks @Andrei-Florin BENCSIK (2cc620ef33f7299e0c0ff05c629df7ccf0d35ce8)
* Remove unused variable. Thanks @masmullin2000 (#1285)
* Fix tests to Use _FILE_OFFSET_BITS=64 when building on Linux 32-bit systems. Thanks @yipdw (#1288).
* Improve systemd journald support. Thanks @jktjkt  (#1292).
* Improve log macros. Thanks @pck (#1294).
* Removed lazy argument evaluation from macros (#163).
* Some micro optimizations (79468cf, 3ee4f28, bf40855).
* Correctly guard `SetHandleInformation` API call to better support compiling for UWP. Thanks @sylveon (#1296).
* Exclude from compilation prevent_child_fd() if SPDLOG_PREVENT_CHILD_FD not defined (57085c8)
* CMake - Added tweakme options to CMakeLists.txt (18edb8b).
* Removed SPDLOG_NO_DATETIME option.
* Fix meson tests build . Thanks vedranmiletic fore reporting (#1295, c081919, 4a4f13b, 436ce16).
* Use ```#include"" <spdlog/.*>``` instead of  ```spdlog/.*``` across the codebase. Thanks @RedDwarf69 (#1304).
* Fix struct tm doesn't have tm_gmtoff in ISO C. Thanks @lancesun (ff3e6c7248a0bfb1d44e72fd0f822320178263bc, #1306)
* Always cache gmt offset (de2c07a).
* Optimize ```backtracer operator=``` (255f7f2).
* Fix some clang-tidy warnings (93008b2, bff8572, 3999613).
* Fix compiler error in os-inl.h min/max on Windows (#1302).
* Remove redundant semicolon. Thanks @inhzus  (#1311).
* Fix compiler warnings. Thanks @0x8000-0000 (#1331).
* Fix missing include header in `spdlog/sinks/daily_file_sink.h. Thanks @afoolsbag for reporting (#1332).
* Fix elapsed time larger than 6 digits ignores alignment width. Thanks @ivan236634452 for reporting (#1327).
* Set version for shared library in meson build. Thanks @lgbaldoni (#1337).
*  Improved ```dist_sink``` ctor. Thanks @mmakhalaf for reporting (#1298).
* Fix #1325. Added SPDLOG_FMT_EXTERNAL_HO option. Thanks @steffenb7333 for reporting.
* Fix #1340 (missing include). Thanks @jeanga for reporting.
* Fix compile on Win10 with Cygwin. Thanks @frfrankkopp and @tt4g  (#1347).
* Fixed #1348. Thanks @ficzerepeti for reporting.
* CMakeLists.txt allow overriding the cpp standard to higher than 11
* Fix a small problem in the basic example. Thanks @mike239x (#1367).
* Fix invalid meson option. Thanks @segfault-magnet (#1370).
* meson: add fallback to fmt dependency #1378. Thanks @idanko
* Update docs: spdlog now available in conan center, bincrafters repo is deprecated #1387. Thanks @gocarlos .


















",26038648
82,False,False,2019-10-06T10:13:26Z,2019-10-08T12:43:44Z,"**Fix some issues discovered by users:**

* Set additional CPACK variables for RPM generator (#1246). Thanks @tcraigtyler.
* Fix compile when ```SPDLOG_WCHAR_FILENAMES``` is defined (#1249 ). 
* Fix ```stdout color sink```  under Windows to better handle cases when no console available  (#1250).
* Fix windows compile error where std::max is overriden by a macro. (#1251, #1252). Thanks @bsergean.
* CMakeLists.txt: Moved the installed lib to ```CMAKE_INSTALL_LIBDIR``` (#1253). Thanks @DasRoteSkelett. 
* CMakeLists.txt: Fixed pkg-config generation (cf2bf488a22373b46eee36513335ff0e44355abc, fb70eca0a31f65953551eb646039205a4d94172c). Thanks @SammyEnigma.




",26038648
83,False,False,2019-09-23T09:38:19Z,2019-09-23T09:51:07Z,"Fix few issues discovered by users of 1.4.0

* Added pkgconfig file to CMake install - Thanks @orbea for reporting and fixing (#1237 #1238).
* Fix regression in wchar support under windows. Thanks @Bak-Jin-Hyeong  for reporting and fixing (#1239 #1240).
* CMake: Do not install bundled fmt if SPDLOG_FMT_EXTERNAL is defined. Thanks @orbea (#1241).

",26038648
84,False,False,2019-09-21T12:49:54Z,2019-09-21T15:37:20Z,"## Improvements
* spdlog can now be compiled as a static or shared lib (thanks @DavidZemon for the help).
Using the compiled lib improves greatly compile times when using spdlog and is very recommended.
    ```console
    $ cd spdlog && mkdir build && cd build
    # Build is static lib (pass -DCMAKE_BUILD_TYPE=shared for building as shared lib)
    $ cmake .. && make -j
    ```  
* Upgraded to the latest and greatest <b>fmt library</b> version 6.0.0. Thanks  @tgpfeiffer (and to @vitaut for fmt!).
* Support for **-fno-exceptions** (disabled by default). Enabling this will replace all throw() statements in spdlog with std::abort(). To enable, pass ```-DSPDLOG_NO_EXCEPTIONS=ON``` to CMake before building spdlog.
*  support for building spdlog with **meson**. Thanks @mensinda 
* Backtrace  support - store debug/trace messages in a ring buffer to display later on demand. Very useful (thanks @MathijsV for the idea):

```c++

spdlog::enable_backtrace(32); // create ring buffer with capacity of 32  messages
// or my_logger->enable_backtrace(32)..
for(int i = 0; i < 100; i++)
{
  spdlog::debug(""Backtrace message {}"", i); // not logged yet.. 
}
// e.g. if some error happened:
spdlog::dump_backtrace(); // log them now! show the last 32 messages
// or my_logger->dump_backtrace(32)..
```
* Systemd support. Thanks @WarShoe (#1027)
* Support for cleaning old files in daily_logger.
* Numerous CMake build improvements. Thanks @DavidZemon , @jktjkt ,  @ksergey , @mnemotic , @cneumann , @dpacbach , @FrancoisChabot , @myd7349 , @matt77hias 
* Better support for various Unix BSDs (DragonFly, NetBSD, FreeBSD, OpenBSD). Thanks @jbeich (#1234)
* Provide source location support for systemd sink. Thanks @jbelloncastro (#1122)
* Added fmt::(w)string_view support. Thanks @matt77hias (#1139)
* Add option to force color output without TTY . Thanks @psalz (#1175)
* Add more overloads to spdlog::log and spdlog::logger::log. Thanks @sylveon (@1169)
* Add public API spdlog::initialize_logger for create loggers manually. Thanks @tt4g (#1035)
* Expose should_do_colors_ in ansicolor_sink.h. Thanks Florian Wörter (#1022)
* Add tweak support for user short level names. Thanks @MFornander (#996)
* Add method to filesinks to return filename. Thanks @markniebur  (#978)
* rotating_sink: Add option to rotate on open. Thanks @pwm1234  (#958)
* Allow filename/line number at all levels. Add function name %! support. Thanks @possiblyhuman (#956)
* New [dups_filter](https://github.com/gabime/spdlog/blob/v1.x/include/spdlog/sinks/dup_filter_sink.h) sink -duplicate message removal sink. It will skip a message if previous one is identical and less than ""max_skip_duration"" old.
* New '%o', '%i', '%u', '%O' format flags - Display elapsed time in mills/micros/nanos/seconds since previous message.
* Some minor pattern formatter performance improvements.

## Fixes
* Fix Wundef in os-inl.h. Thanks @AMS21 (#1189)
* Fix use of old style cast in os-inl.h. Thanks @AMS21  (#1164)
*  Prevent NEAR and FAR macro definitions from leaking on Windows platforms. Thanks @PeterTh  (#1142)
* Fix syslog output. Thanks @mattiasj-axis  (#1140)
* Fix  `msg.time` in daily_file_sink. Thanks @s-shin  (#1129)
* Fix missing include for null_mutex in rotating_file_sink.h. Thanks @casperevan  (#1120)
* Fix warning: redundant move in return statement. Thanks @MarkKoester  (#1119)
* Fix use of incomplete type in stdout sinks. Thanks @DanielChabrowski  (#1118)
* Fix deprecation warnings in filename_to_str and improve performance of wbuf_to_utf8buf. Thanks @sylveon (#1127)
* Update README.md. Thanks @martinkrammer  (#1057)
* Remove extra semicolon. Thanks @Jerry-Ma  (#1202)
* Fix unexpected log macro expansion. Thanks  @db-panda  (#1055)
* Namespace qualify stat functions. Thanks @p-po  (#1045)
* Fix typo in Android logger. Thanks @romainthomas (#994)
* Remove unnecessary log function. Thanks @DanielChabrowski  (#988)
* Allow custom formatter in sink's ctor. Thanks @DanielChabrowski (#986)
* Fix shadowed parameter. Thanks @ZGCDDoo  (#984)
* Update log_msg.h. Thanks @scribam (#969)
* Fix #benchmark link error. Thanks @myd7349  (#962)
* Fix typo in file_helper.h. Thanks @brridder  (#955)

",26038648
85,False,False,2019-01-18T10:13:07Z,2019-01-18T10:25:12Z,"Fix few issues found by 1.3.0 users:

* Fix google benchmark link error when compiling the bechmarks. Thanks @myd7349 (#961, f4c737ef4253d309453606a3c81861dfd572411e)
* Fix spdlog not printing message if SPDLOG_NO_THREAD_ID is defined. Thanks @scribam  (#970, f4c737ef4253d309453606a3c81861dfd572411e)
* Fix depending on the order of inclusion of spdlog.h. Thanks @gocarlos (#959, 23fdc0eae426ac2efadf9f4bb1f43caae1667bc7)

",26038648
86,False,False,2019-01-10T17:18:31Z,2019-01-11T14:23:03Z,"
## Improvements
* Upgraded to the latest and greatest <b>fmt library</b> version 5.3.0.
* New API for <b>default logger</b>  `spdlog::trace(..)`, `spdlog::debug(..)`, `spdlog::info(..)`, etc. 
  For convenience, spdlog now creates a default global logger (to stdout, colored and multithreaded). 
  It can be used easily by calling ```spdlog::info(..), spdlog::debug(..), etc``` directly without any preparations.
 
  It's instance can be replaced to any other logger (shared_ptr):

   ```c++
   spdlog::set_default_logger(some_other_logger);
   spdlog::info(""Use the new default logger"");
  ```
* <b>Alignment</b> support in log patterns.
  Each pattern flag can be aligned by prepending a width number(upto 128).
  Use`-`(left align) or `=` (center align) to control the align side:

  | align | meaning| example | result|
  | :------ | :-------: | :-----: |  :-----: |
  |`%<width><flag>`|Align to the right|`%8l`|""&nbsp;&nbsp;&nbsp;&nbsp;info""|
  |`%-<width><flag>`|Align to the left|`%-8l`|""info&nbsp;&nbsp;&nbsp;&nbsp;""|
  |`%=<width><flag>`|Align to the center|`%=8l`|""&nbsp;&nbsp;info&nbsp;&nbsp;""|


* Support for logging <b>source filename</b>, <b>line number</b>, and <b>function name</b> (thanks @possiblyhuman for contributing to this effort)

  | flag | meaning| example |
  | :------ | :-------: | :-----: |
  |`%@`|Source file and line (use SPDLOG_TRACE(..),SPDLOG_INFO(...) etc.)|my_file.cpp:123|
  |`%s`|Source file (use SPDLOG_TRACE(..),SPDLOG_INFO(...) etc.)|my_file.cpp|
  |`%#`|Source line (use SPDLOG_TRACE(..),SPDLOG_INFO(...) etc.)|123|
  |`%!`|Source function (use SPDLOG_TRACE(..),SPDLOG_INFO(...) etc. see tweakme for pretty-print)|my_func|

* Support for <b>compile time check</b> of log levels using `#define SPDLOG_ACTIVE_LEVEL <level>`.
  Use  `LOG_TRACE(..)`, `LOG_DEBUG(..)`, `LOG_INFO(..)`, etc. to enable.
  Those macros check at compile time the log level and translate to empty statement if the log level is not high enough.  Even if a log macro evaluate to a log call, the macro will check at runtime the level before evaluating its arguments.
 So for example the following won't evaluate `some_costly_function()` because the logger's level is error:
  ```c++
  #define SPDLOG_ACTIVE_LEVEL SPDLOG_LEVEL_DEBUG
  #include ""spdlog/spdlog.h""
   ..
   spdlog::set_level(error);
   SPDLOG_DEBUG(""Some costly arg: {}"", some_costly_function());
  ```
* CMake improvements. Thanks @dpacbach  (85b4d7c, f5dc166 ).
* Numerous small performance optimizations.
* Global option that disables global registration of loggers `set_automatic_registration(bool)`. Thanks @pabloariasal (#892).
* Optimize logging of C strings by using ```string_view``` to avoid unnecessary copy. Thanks @peergynt (cb71fea0f6c9bb5722ca59e9b7917328217cfe5d).

* Use google benchmark to test latencies.

## Fixes

* `logger::error_handler()` should be const (#881, thanks @shoreadmin for reporting)
*  Cleanup header file: remove log_msg.h include from fmt_helper.h. Thanks @peergynt (1b391ccd062e013f6e0a991a3f37c3ce31eab87d)
* Fix log_msg constructor doesn't initialize all fields (#888. Thanks @curiouserrandy for reporting).
* Change  `log_msg&&` to `log_msg&` params. Thanks @rwen2012 (794a636dd3cebd59e49ef3a0bfaf8bfffc729bdd)
* Fix typo in Android example. Thanks @ZaMaZaN4iK (f5a27250b1c701bb3317fa2ad6332fd893f26ab1)
*  Fix Compiling error VS2017 #902 (Thanks @JaNurz for reprting).
* Fix thread id is prefixed with zeros #908 (Thanks @klrakiranpradeep for reporting).
* Fix OSX build. Thanks @DanielChabrowski (c7f42d1a4a1fe94ad11031a00858abdce2385cb2).
* Fix and optimize usage of `fmt::internal::count_digits(..)` for better support 32/64 bits. Thanks @DanielChabrowski (c7f42d1a4a1fe94ad11031a00858abdce2385cb2, f1ab6feba2fcd7d05aae8022787eeb76dbef41eb).
* Better handling of rotation errors (b64e4464a77caca658982b8fe919db05c4f29f36).
* Fix exceptions on file size calculation on Windows XP x64 and Windows Server 2003 x64. Thanks @lestera (#926).
* Do not attempt to default operator= when it is implicitly deleted. Thanks @dpacbach (63a475d88c2bf5be21bf6abd4a487909862e97de).
*  Make an implicit cast from int --> uint32_t explicit. Thanks @dpacbach (a6152ebadd676d7f5a3a50e49eb995aa05d97112).
* Enable testing in the Travis config file. Thanks @dpacbach (f5dc16603ee97b77f9945e29b4f4864afdde2652).
* Fix the text alignment in the example. Thanks @bzindovic (d6086da4856df510657ffe4ef6b894e902b4b83).
* Fix typos. Thanks @peergynt (ce8cf1e152b3b51f4121f6b58ddcf3797090a1f4).
* Fix handling of external fmt lib in cmake. Thanks @cneumann (084bc72d90ccc829b8605297cbef4ef6cc3093b9).
* Fix VC WinRT compilation. Thanks @taniey for reporting (@948).
* Fix typo in file_helper.h. Thanks @brridder (fb702f989ff7141c71712e9d2c6a3fd642f7c206).







",26038648
87,False,False,2018-10-17T14:10:44Z,2018-10-17T14:32:15Z,This fixes  a compilation error of dist_sink.h (#864) . Thanks @DimRochette !,26038648
88,False,False,2018-10-07T19:31:36Z,2018-10-07T22:42:11Z,"### Improvements
* Upgraded to latest fmt version 5.2.1.
* Binary data logging using ```spdlog::to_hex(binary_data)```.  Many types of ```std::container<char>``` can be logged in hex. See [usage examples](https://github.com/gabime/spdlog/blob/v1.x/example/example.cpp#L165).
* Added ```logger->clone()``` to ease the creation of new loggers from an existing one.
* Numerous micro optimizations across the lib.
* Added ```set_sinks``` method to dist_sink for atomic updating  set of sinks in dist_sink. Thanks @jwnimmer-tri .
* Improved CmakeLists.txt to better handle third-party usage. Thanks @taketwo .

### Fixes
* Fixed wchar logging (supported only in windows.  #851 , #764).
* Fixed registry test. Thanks @DanielChabrowski .
* Removed invalid files from tests.sln. Thanks @yhchen .
* Some fixes to console_globals.h includes. Thanks @DanielChabrowski 
* Don't deny access to log files from other processes under windows. Thanks @eruiz.
* Pessimizing move remove. Thanks @maciekgajewski 
* ansicolor_sink.h - add missing sink include. Thanks @AlexanderDalshov .
* Improved rotating sink error handling.
* Fixed Readme. Thanks @blackball .
* Fixed some clang tidy warnings.



",26038648
89,False,False,2018-08-15T16:34:10Z,2018-08-15T16:42:15Z,"### Bug fixes
* Fixed android sink compilation. Thanks @rajesh-p .
* Fixed race condition in async-factory.
* Fixed bug in ```spdlog_ex``` implementation .Thanks @gajanak for reporting.
* Fixed race condition in the unit tests.
* Fixed compiler warnings under OSX. Thanks @baishuai .


### Improvements
* Some micro optimizations.
* Improve and fix CMake issues. Thanks @DanielChabrowski .
* Improve and fix travis-ci issues. Thanks @DanielChabrowski .
* Added ```overrun_counter()``` to the async thread pool queue - returns # of messages overrun under the ```overrun_oldest``` mode. Thanks @indiosmo .
* Fixed some clang tidy warnings.
",26038648
90,False,False,2018-08-04T22:33:52Z,2018-08-05T00:00:39Z,"**Version 1.0.0** is a major release  with numerous features and improvements. 
It contains some breaking API changes that are not compatible with 0.x versions (see below).


### Highlights


* **Include what you need**: Reduce compilation times by including only the minimum required. Users can now to include only the actual sinks/features they need from ```spdlog/sinks``` folder. 

* Upgrade  to **fmt lib version 5.1** - thanks @vitaut for this great lib.

* **Support for custom formatting per sink** - each sink can have it's own formatting and level  using ```sink->set_pattern(..)``` or ```sink->set_formatter(..)```.


* **async logging - thread pool** - async loggers now share a global thread pool by default. 
Creating and destroying async loggers is cheap now. This is in contrast to previous versions were creating async loggers was expensive, since each logger instance had its own worker thread and queue. 
The global thread pool and can be configured using ```spdlog::init_thread_pool(queue_size, worker_threads)``` or created directly using make_shared.  

* **periodic flusher**: ```spdlog::flush_every(seconds)``` to periodically flush all registered loggers.

* Improved performance - by caching some recently used values in the pattern formatter.

*  Ability to add sinks to a logger after its creation (but it is not thread safe to do so - so use with caution). 



### Breaking changes
* Include what you need. For example to use basic_logger add  ``` #include ""spdlog/sinks/basic_file_sink.h""``` (see example in readme).

* To use async loggers - include ```""spdlog/async.h""```

* Replaced ```set_async_mode(..)``` with factory template. For example:
```c++
 auto logger= spdlog::rotating_logger_mt<spdlog::async_factory>(...);
```

* Removed ```printf``` support.

* Removed warmup/teardown functions from async.


* Custom sinks inheriting from ```sinks::base_sink``` need to format (if needed) the message before sending to their target. For example
```c++
void sink_it_(const details::log_msg &msg) override
{
  fmt::memory_buffer formatted;
  sink::formatter_->format(msg, formatted);
  // sink the formatted
  ...   
}
```

* Added ```clone()``` virtual function to the formatter interface.

* Removed support for ```#define SPDLOG_NO_REGISTRY_MUTEX```


### Change log
See  [here](https://github.com/gabime/spdlog/compare/v0.17.0...v1.x) the complete list of changes.
 




",26038648
91,False,False,2018-05-21T17:38:13Z,2018-05-21T18:03:38Z,"## Summary
* Improvements in color output impl - thanks @Qix- 
* Fixed spelling - thanks @rcarmich 
* New function to convert level_enum from string - thanks @fegomes 
* Support for custom EOL per formatter - thanks Emad William Farag
* Make set_color public in wincolor_sink to retain configurability - thanks Benjamin Schindler
* Fix compilation error with GCC 8 - thanks @ColinDuquesnoy 
* CMake improvements - thanks @DanielChabrowski , @grzadr and @yisonPylkita 
*  Bumped bundled fmt version to 4.1.0
* Fixed tests for older gcc compilers
* Moved to clang source code formatter - thanks @DanielChabrowski 
* Fixed many clang-tidy warnings - thanks @DanielChabrowski 
* Fix implicit conversion warnings - thanks @tbastos 
* Added Added: g3log, log4cplus, log4cpp, p7. Changes: boost, easylogging, g2log to bench - thanks @kasru 
* Support for color formatting. using the  %^ and %$ format flags.
* Added new sink to contrib: step_logger - thanks @Puasonych 
* Replaced the lockfree queue with bounded, locked queue - this greatly improves CPU usage and memory footprint in async mode (with some  cost to latency due to the mutex locking).




",26038648
92,False,False,2018-01-12T12:09:34Z,2018-01-12T12:39:59Z,"## Summary
* Fix  sleep issue (#609) under MSVC that happens when changing the clock backwards (pull #610) - Thanks @joaomoreno 
* Ensure that marcos always expand to expressions (pull #604) - Thanks @sam-lunt 
* Add global flush_on function (pull #605) - Thanks @sam-lunt
* Fix conversion warning (#595, pull #596) - Thanks @Broekman 


",26038648
93,False,False,2017-12-22T16:50:08Z,2017-12-22T17:02:17Z,"## Summary
* Fixed a bug in extracting log files extension (#589) - Thanks @fcharlie ",26038648
94,False,False,2017-12-20T08:08:49Z,2017-12-20T08:29:31Z,"## Summary
Quick fix release:
* Fixed the version strings to 0.16.1 in ```spdlog.h``` and ```CMakeLists.txt```
* Fixed compiler warning in tests - Thanks @horar ",26038648
95,False,False,2017-12-19T22:29:15Z,2017-12-19T22:59:19Z,"## Summary
* Rotating and daily log files keep their extension (e.g **""mylog.3.txt""** and not ""mylog.txt.3"")
* Optional support for printf formatting (enabled using ```#define  SPDLOG_FMT_PRINTF```) - Thanks @fogo 
* Async log: increased sleep to to 500ms the worker in loop when the queue is empty
* Fixed thread safety bug in flush()  - added lock on flush in base_sink
* **Breaking change**: Removed all *_if functions (trace_if, debug_if, info_if,..) because they are redundant and confusing way to preform simple ```if```
* Swallow only ```std::exception```s. report about, and re-throw other, unexpected exception types.
* Support msvc_sink on all windows compiler (windebug-sink) - Thanks @jpcima 
* Added facilty param for syslog - Thanks @adubovikov 
* correct include path for sink/syslog_sink.h - Thanks @jpcima 
* Fix include paths - Thanks @daylanKifky 
* Some fixes in the async queue size estimation - Thanks @Subenle 
* Fixed cygwin support
* Adding additional build environments for AppVeyor- Thanks @rkollataj 
* Fix warnings which are caused by C style cast - Thanks @knowledge4igor 
* Make short month names match in length - Thanks @berkus 
* Fix typos in code and comments - Thanks @berkus 
* Fixed missing ```i_formatter``` implementation
* Fix SPDLOG_WCHAR_TO_UTF8_SUPPORT wchar_t logging - Thanks @hestad 
* Added formatter for unix epoch time in seconds (%E format flag) -  Thanks @jasonbeach 
* Compiler-dependent line numbering in SPDLOG_TRACE - Thanks @elelel 
* Improved cmake and CMakeLists.txt - Thanks @mrpelotazo and @Lectem 

",26038648
96,False,False,2017-08-19T15:48:43Z,2017-08-19T16:00:00Z,"## Summary
* Upgraded the bundled [fmt lib](https://github.com/fmtlib/fmt) to version 4.0.0
* Fixed crash in async logger in older gcc version 4.8.5 (268222e496d32e3c6f450f7242655cf014dc93e8).
* Fixed various sanitizer warnings.
* Improved Android support (#422, #427).
* Add an optional final qualifier to types (#425) for potential compiler optimisations.
* Support for Alpine Linux (#435, #436).
* Add wide string to utf8 string support (#442).
* Don't use color escape codes if terminal doesn't support them bd25f59a423ac40a0eba4206ad295b3e2cef7dfc .
* Optional message counter feature (#445).
* Fix OSX builds of details/os.h (#447).
* Fix vs 2015 build error (#449).
* UTC support (#451).
* MinGw build fix (#456).
* Add create_async factory functions for async loggers (#459).
* Conditional logging implementation (#460).
* More meaningful thread id for OSX (#463).
* Add set_color to ansicolor_sink (#465).
* Ability to override log level names in the log messages (#473).
* Added TRACE_IF and DEBUG_IF macro definitions when TRACE_ON and DEBUG.
* Fixed background color bug in windows terminal (#484).
* Gentoo support (#502).
* Fixed  warning for missing enumeration value in tests (#488, #490).
* Fixed numerous typos in code and comments.

## Many thanks to the contributors to this release: 

* @odeits 
* @vitaut
* @eliaskosunen 
* Oleksii Mandrychenko
* @theamirocohen
* @jcelerier
* @alzix
* @bahostetterlewis
* @sidyhe
* @stonedreamforest
* @ThePhD
* @rkollataj
*  Carsten Neumann
* @asit-dhal
* @sheldonlyr
* @SWIFTingAround
* @p-alik
* @snapbug 
*  @vgabi94
* @gg7
",26038648
97,False,False,2017-03-27T23:09:01Z,2017-03-27T23:40:59Z,"* Bumped the bundled fmt library to version 3.0.1.
* Fixed issue #333 (unexpected appending of ""txt"" at the end of a log filename).
* Fixed issue #396 (custom error handler not called in async loggers).
* Fixed issue #403 (ambiguous warnings on some compilers).
* Use double-braces in std::array initialisation.",26038648
98,False,False,2017-02-17T14:40:59Z,2017-02-17T15:13:58Z,"Numerous improvements and bug fixes. Many thanks to all who contributed!
- Added %P (process Id) to format string
- Exposed logger sinks via logger->sinks().
- Windows native  console color support. 
- Fixed vc warning on x64 build
- Better support for for older win32 targets (WinXP/Win2003)
- Fixed issue #300 
- Fix issue #315
- Fix issue #317 (Build error on raspberry pi)
- Better cmake support : list spdlog's content in IDEs
- Fix compilation error C2664 on VS2013
-  Store thread_id in tls for better performance
- Use the feature checking macros to detect thread_local support in clang.
- Added option to prevent child processes from inheriting log file desciptors
- Added SPDLOG_VERSION` macro to spdlog.h
- Replaced static global std::string arrays by Meyer singletons for better thread safety 
",26038648
99,False,False,2016-09-17T23:28:41Z,2016-09-18T01:10:05Z,"sink log levels
bug fixes
",26038648
100,False,False,2016-08-25T21:38:08Z,2016-08-26T09:12:26Z,"- No exceptions will be thrown while logging (with optional error handlers).
- FreeBSD support.
- Solaris support.
- syslog disabled by default for faster compilation.
- Bug fixes and improvements.
",26038648
101,False,False,2016-07-30T22:52:22Z,2016-07-31T00:18:33Z,,26038648
102,False,False,2019-10-28T20:20:00Z,2019-10-28T22:08:48Z,"- Feature: [#9285] Remember current group in scenario list window.
- Feature: [#9918] Increase image list capacity by about 100k units.
- Change: [#1349] Increase the number of ride music played simultaneously from 2 to 32.
- Fix: [#4927] Giant screenshot cut off at bottom and top.
- Fix: [#7572] Queue paths connect to regular paths through fences.
- Fix: [#7690] Problem with guests freezing on certain tiles of path.
- Fix: [#7883] Headless server log is stored incorrectly if server name contains CJK in Ubuntu
- Fix: [#8136] Excessive lateral G penalty is too excessive.
- Fix: [#8584] Duck spawning function does not check tiles with x or y coordinate of 0..64 (Original bug)
- Fix: [#9179] Crash when modifying a ride occasionally.
- Fix: [#9533] Door sounds not playing.
- Fix: [#9574] Text overflow in scenario objective window when using CJK languages.
- Fix: [#9603] Don't render audio when master volume is turned off.
- Fix: [#9625] Show correct cost in scenery selection.
- Fix: [#9669] The tile inspector shortcut key does not work with debugging tools disabled.
- Fix: [#9675] Guest entry point limit can be bypassed in scenario editor.
- Fix: [#9683] Cannot raise water level if part of the tool's area of effect is off of the map.
- Fix: [#9684] Entering custom size for water/land tool allows confirmation with main enter key, but not numpad enter key.
- Fix: [#9690] The keyboard shortcut for rotating the game view can be set to Enter or KP Enter, but not both.
- Fix: [#9717] Scroll bars do not render correctly when using OpenGL renderer.
- Fix: [#9729] Peeps do not take into account height difference when deciding to pathfind to a ride entrance (original bug).
- Fix: [#9902] Doors/Portcullis do not check to make sure doors are open causing double opens.
- Fix: [#9926] Africa - Oasis park has wrong peep spawn (original bug).
- Fix: [#9953] Crash when hacked rides attempt to find the closest mechanic.
- Fix: [#9955] Resizing map in while pause mode does not work and may result in freezes.
- Fix: [#9957] When using 'no money' cheat, guests complain of running out of cash.
- Fix: [#9970] Wait for quarter load fails.
- Fix: [#9994] Game action tick collision during server connect and map load.
- Fix: [#10017] Ghost elements influencing ride excitement.
- Fix: [#10036] Do not allocate large chunks of memory for save file classification.
- Fix: [#10106] Ride circuits should not be used for modes that do not support it.
- Fix: [#10149] Desync in headless mode with rides that create smoke particles.
- Improved: [#9466] Add the rain weather effect to the OpenGL renderer.
- Improved: [#9987] Minimum load rounding.
- Improved: [#10125] Better support for high DPI screens.",18348651
103,False,False,2019-07-10T20:53:36Z,2019-07-10T20:58:08Z,"- Feature: [#485] Rides can now be simulated with ghost trains during construction.
- Feature: [#1260] Option for making giant screenshots have a transparent background.
- Feature: [#2339] Find local servers automatically when fetching servers.
- Feature: [#7296] Allow assigning a keyboard shortcut for the scenery picker.
- Feature: [#8029] Add the Hungarian Forint (HUF) to the list of available currencies.
- Feature: [#8481] Multi-threaded rendering.
- Feature: [#8558] Guest debugging tab.
- Feature: [#8659] Banner and sign texts are now shown in tooltips.
- Feature: [#8687] New multiplayer toolbar icon showing network status with reconnect option.
- Feature: [#8791] Improved tile element flag manipulation in Tile Inspector.
- Feature: [#8919] Allow setting ride price from console.
- Feature: [#8963] Add missing Czech letters to sprite font, use sprite font for Czech.
- Feature: [#9154] Change map toolbar icon with current viewport rotation.
- Change: [#7877] Files are now sorted in logical rather than dictionary order.
- Change: [#8427] Ghost elements now show up as white on the mini-map.
- Change: [#8688] Move common actions from debug menu into cheats menu.
- Change: [#9428] Increase maximum height of the Hypercoaster to RCT1 limits.
- Fix: [#2294] Clients crashing the server with invalid object selection.
- Fix: [#4568, #5896] Incorrect fences removed when building a tracked ride through
- Fix: [#5103] OpenGL: ride track preview not rendered.
- Fix: [#5889] Giant screenshot does not work while using OpenGL renderer.
- Fix: [#5579] Network desync immediately after connecting.
- Fix: [#5893] Looking at guest window tabs other than the main tab eventually causes assertion.
- Fix: [#5905] Urban Park merry-go-round has entrance and exit swapped (original bug).
- Fix: [#6006] Objects higher than 6 metres are considered trees (original bug).
- Fix: [#7039] Map window not rendering properly when using OpenGL.
- Fix: [#7045] Theme window's colour pickers not drawn properly on OpenGL.
- Fix: [#7323] Tunnel entrances not rendering in 'highlight path issues' mode if they have benches inside.
- Fix: [#7729] Money Input Prompt breaks on certain values.
- Fix: [#7884] Unfinished preserved rides can be demolished with quick demolish.
- Fix: [#7913] RCT1/RCT2 title sequence timing is off.
- Fix: [#7700, #8079, #8969] Crash when unloading buggy custom rides.
- Fix: [#7829] Rotated information kiosk can cause 'unreachable' messages.
- Fix: [#7878] Scroll shortcut keys ignore SHIFT/CTRL/ALT modifiers.
- Fix: [#8219] Faulty folder recreation in ""save"" folder.
- Fix: [#8480, #8535] Crash when mirroring track design.
- Fix: [#8507] Incorrect change in vehicle rolling direction.
- Fix: [#8537] Imported RCT1 rides/shops are all numbered 1.
- Fix: [#8553] Scenery removal tool removes fences and paths while paused.
- Fix: [#8598] Taking screenshots fails with some park names.
- Fix: [#8602] Wall piece collision detection deviates from vanilla
- Fix: [#8649] Setting date does not work in multiplayer.
- Fix: [#8873] Potential crash when placing footpaths.
- Fix: [#8882] Submarine Ride does not count as indoors (original bug).
- Fix: [#8900] Peep tracking is not synchronized.
- Fix: [#8909] Potential crash when invoking game actions as server.
- Fix: [#8947] Detection of AVX2 support.
- Fix: [#8988] Character sprite lookup noticeably slows down drawing.
- Fix: [#9000] Show correct error message if not enough money available.
- Fix: [#9067] Land/water tools show prices when money is disabled.
- Fix: [#9124] Disconnected clients can crash the server.
- Fix: [#9132] System file browser cannot open SV4 files.
- Fix: [#9152] Spectators can modify ride colours.
- Fix: [#9202] Artefacts show when changing ride type as client or using in-game console.
- Fix: [#9240] Crash when passing directory instead of save file.
- Fix: [#9245] Headless servers apply Discord Rich Presence.
- Fix: [#9293] Issue with the native load/save dialog.
- Fix: [#9322] Peep crashing the game trying to find a ride to look at.
- Fix: [#9324] Crash trying to remove invalid footpath scenery.
- Fix: [#9402] Ad campaigns disappear when you save and load the game.
- Fix: [#9411] Ad campaigns end too soon.
- Fix: [#9476] Running `simulate` command on park yields `Completed: (null)`.
- Fix: [#9520] Time Twister object artdec29 conversion problem.
- Fix: Guests eating popcorn are drawn as if they're eating pizza.
- Fix: The arbitrary ride type and vehicle dropdown lists are ordered case-sensitively.
- Improved: [#6116] Expose colour scheme for track elements in the tile inspector.
- Improved: Allow the use of numpad enter key for console and chat.",18348651
104,False,False,2019-03-13T21:56:26Z,2019-03-13T20:58:28Z,"- Feature: [#4418] Allow steep slopes on the side-friction roller coaster.
- Feature: [#7726] Add shortcut to advance one tick.
- Feature: [#7956, #7964] Add sprite font glyphs for Hungarian and some Czech letters.
- Feature: [#7971] Toolbox option to open custom content folder.
- Feature: [#7980] Allow data path for RCT1 to be specified by a command line argument.
- Feature: [#8073] Auto-upload minidumps to backtrace.io (optional, MSVC/Windows only)
- Feature: [#8078] Add save_park command to in-game console.
- Feature: [#8080] New console variable ""current_rotation"" to get or set view rotation.
- Feature: [#8098] Glyph for Russian rouble sign.
- Feature: [#8099] Add Powered Launch mode to Inverted RC (for RCT1 parity).
- Feature: [#8190] Allow building footpaths on 'corner down' terrain.
- Feature: [#8191] Allow building on-ride photos and water S-bends on the Water Coaster.
- Feature: [#8259] Add say command to in-game console.
- Feature: [#8374] Add replay system.
- Feature: [#8377] Add option to adjust amount of autosaves to keep.
- Feature: [#8458] Add sprite sorting benchmark.
- Feature: [#8583] Add boosters to water coaster.
- Feature: [#8648] Add optional chat button to top toolbar in multiplayer games.
- Feature: [#8652] Add network window including a graph for data usage visualisation.
- Feature: [#8670] Add ability to download missing objects when loading a park.
- Change: [#7961] Add new object types: station, terrain surface, and terrain edge.
- Change: [#8222] The climate setting has been moved from objective options to scenario options.
- Change: [#8718] Allow TARMAC object to be removed when running the `remove_unused_objects` command.
- Change: [#8718] No longer require the generic scenery groups and tarmac footpath to be checked when creating a scenario.
- Change: [#8734] Disable kick button in multiplayer window when unable to use it.
- Fix: [#3832] Changing the colour scheme of track pieces does not work in multiplayer.
- Fix: [#4094] Coasters with long flat-to-steep pieces offer them in diagonal mode (original bug).
- Fix: [#5684] Player list can desync between clients and server and can crash.
- Fix: [#6191] OpenRCT2 fails to run when the path has an emoji in it.
- Fix: [#7439] Placement messages have mixed strings
- Fix: [#7473] Disabling sound effects also disables ""Disable audio on focus loss"".
- Fix: [#7536] Android builds fail to start.
- Fix: [#7689] Deleting 0-tile maze gives a MONEY32_UNDEFINED (negative) refund.
- Fix: [#7828] Copied entrances and exits stay when demolishing ride.
- Fix: [#7945] Client IP address is logged as `(null)` in server logs.
- Fix: [#7952] Performance drop caused by code refactor.
- Fix: [#7954] Key validation fails on Windows due to non-ASCII user / player name.
- Fix: [#7975] Inspection flag not cleared for rides which are set to never be inspected (original bug).
- Fix: [#7985] Giant Screenshot ignores 'Map rendering' settings.
- Fix: [#7987] Broken track designs increase money by MONEY32_UNDEFINED.
- Fix: [#7991] Scenery and footpaths on Construction Rights tiles can be deleted using Clear Scenery.
- Fix: [#8034] Vanilla sprites are broken when making screenshots from command line.
- Fix: [#8045] Crash when switching between languages.
- Fix: [#8062] In multiplayer warnings for unstable cheats are shown when disabling them.
- Fix: [#8090] Maze designs saved incorrectly.
- Fix: [#8101] Title sequences window flashes after opening.
- Fix: [#8120] Crash trying to place peep spawn outside of map.
- Fix: [#8121] Crash Renaming park with server logging enabled.
- Fix: [#8139] Buying land costs money when the game is in ""no money"" mode.
- Fix: [#8141] Attempting to build entrance/exit on station 2 does not work.
- Fix: [#8142] Reliability of mazes and crooked houses can go below 100%.
- Fix: [#8187] Cannot set land ownership over ride entrances or exits in sandbox mode.
- Fix: [#8200] Incorrect behaviour when removing entrances and exits that are on the same tile.
- Fix: [#8204] Crash when tile element has no surface elements.
- Fix: [#8264] Rides and scenery placeable outside of map with ZC and Sandbox mode enabled.
- Fix: [#8335] Rides with arbitrary ride types can crash the game when they break down.
- Fix: [#8358] Infinite loop when changing vehicle count on stopped ride.
- Fix: [#8402] Crash closing a window in some cases.
- Fix: [#8431] Crash when game action logging is enabled.
- Fix: [#8433] Crash if master server response is not valid JSON.
- Fix: [#8434] Crash if curl_easy_init fails.
- Fix: [#8443] Crash when selecting the current vehicle for ride that has none available.
- Fix: [#8456] Junior booster track piece doesn't connect properly.
- Fix: [#8464] Crash on game shutdown.
- Fix: [#8469] Crash modifying colour on hacked rides.
- Fix: [#8508] Underground roto-drop is not going up.
- Fix: [#8555] Multiplayer window text limits are not computed properly.
- Fix: [#8572] Steel Twister track pieces ID 64 and 65 drawn incorrectly.
- Fix: [#8585] Part of track missing on air powered vertical coaster.
- Fix: [#8588] Guest list scrolling breaks above ~2000 guests.
- Fix: [#8591] Game loop does not run at a consistent tick rate of 40 Hz.
- Fix: [#8647] Marketing campaigns check for entry fees below £1 (original bug).
- Fix: [#8653] Crash when peeps attempt to enter a ride with no vehicles.
- Fix: [#8720] Desync due to boats colliding with ghost pieces.
- Fix: [#8739] Savegame from original game crashes when cruising through map.
- Fix: [#8742] Access violation in vehicle_update_sound_params.
- Fix: [#8804] Raising water shows money effect at the bottom rather than new height.
- Fix: [#8811] Some fields in the sv6 save file not being copied correctly.
- Fix: [#8824] Invalid read in footpath_chain_ride_queue.
- Improved: [#2940] Allow mouse-dragging to set patrol area (Singleplayer only).
- Improved: [#7730] Draw extreme vertical and lateral Gs red in the ride window's graph tab.
- Improved: [#7930] Automatically create folders for custom content.
- Improved: [#7980] Show the full path of the scenario in the scenario select window.
- Improved: [#7993] Allow assigning a keyboard shortcut for opening the tile inspector.
- Improved: [#8107] Support Discord release of RCT2.
- Improved: [#8491] Highlight entrance and exit with different colours in track design previews.
- Improved: Almost completely new Hungarian translation.
- Removed: [#7929] Support for scenario text objects.

Note: due to mistake during release, it might identify as `v0.2.1-1020-g298c9f523`, but it really is `v0.2.2`",18348651
105,False,False,2018-08-26T20:20:31Z,2018-08-26T20:47:17Z,"- Feature: [#5993] Ride window prices can now be set via text input.
- Feature: [#6998] Guests now wait for passing vehicles before crossing railway tracks.
- Feature: [#7658] Add option to always use system file browsing window.
- Feature: [#7694] Debug option to visualize paths that the game detects as wide.
- Feature: [#7713] The virtual floor now takes land ownership rights into account.
- Feature: [#7771] Danish translation.
- Feature: [#7797, #7802, #7821, #7830] Add sprite font glyphs for Danish, Norwegian, Russian, Turkish, Catalan and Romanian.
- Feature: [#7848] Add a master volume slider to audio options screen.
- Feature: [#7868] Placing scenery while holding shift now scales appropriately with zoom levels.
- Feature: [#7882] Auto-detect Steam and GOG installations of RCT1.
- Feature: [#7885] Turkish translation.
- Fix: [#3177] Wrong keys displayed in shortcut menu.
- Fix: [#4039] No sprite font glyph for German opening quotation mark.
- Fix: [#5548] platform_get_locale_date_format is not implemented for Linux.
- Fix: [#7204] Object source filters do not work for RCT1, AA and LL.
- Fix: [#7440] Memory leak. All system memory used.
- Fix: [#7462] Guest window goes beyond the map edge on a spiral slide.
- Fix: [#7533] Screenshot is incorrectly named/file is not generated in CJK language.
- Fix: [#7628] Always-researched items can be modified in the inventory list.
- Fix: [#7643] No Money scenarios with funding set to zero.
- Fix: [#7653] Finances money spinner is too narrow for big loans.
- Fix: [#7673] Vehicle names are cut off in invention list.
- Fix: [#7674] Rides show up as random numbers in guest's ride list.
- Fix: [#7678] Crash when loading or starting a new game while having object selection window open.
- Fix: [#7683] 'Arbitrary ride type' dropdown state is shared between windows.
- Fix: [#7697] Some scenery groups in RCT1 saves are never invented.
- Fix: [#7711] Inverted Hairpin Coaster allows building invisible banked pieces.
- Fix: [#7734] Title sequence not included in macOS builds as of 0.2.0 release.
- Fix: [#7756] Steam RCT2 path not correctly checked on macOS and Linux.
- Fix: [#7765] Crash when opening ride list window on Windows Vista.
- Fix: [#7773] Once research has been completed, player is still charged for research.
- Fix: [#7786] Crash when importing a track design.
- Fix: [#7793] Duplicate private keys generated.
- Fix: [#7817] No sprite font glyph for interpunct.
- Fix: [#7823] You can build mazes in pause mode.
- Fix: [#7804] Russian ride descriptions are cut off.
- Fix: [#7872] CJK tooltips are often cut off.
- Fix: [#7895] Import of Mega Park and the RCT1 title music do not work on some RCT1 sources.
- Improved: [#7899] Timestamps in the load/save screen are now displayed using local timezone instead of GMT.
- Improved: [#7918] Better RCT2 detection if both disc and GOG/Steam versions are installed.",18348651
106,False,False,2018-06-10T20:31:08Z,2018-06-10T21:09:25Z,"- Feature: [#1417] Allow saving track designs for flat rides.
- Feature: [#1675] Auto-rotate shops to face footpaths.
- Feature: [#3473] Add button in ride window's maintainance tab to refurbish the ride.
- Feature: [#6510] Ability to select edges or a row of tiles by holding down Ctrl using the land tool.
- Feature: [#7187] Option for early scenario completion.
- Feature: [#7266] Make headless instances use an interactive terminal with access to the in-game console API.
- Feature: [#7267] Leverage more historical data in Finances window.
- Feature: [#7316] Cheat to allow freezing all staff
- Feature: [#7332] Keyboard shortcuts for view path issues and cutaway view.
- Feature: [#7348] Add large half loops to the Vertical Drop Roller Coaster.
- Feature: [#7459] Allow opening and closing of parks that use no money.
- Feature: [#7579] New horizontal +/- spinner widgets to make adjusting values easier.
- Fix: [#2053] When clearance checks are disabled, a track piece ghost can remove non-ghost track pieces.
- Fix: [#2611] Some objects show (undefined string) instead of a description in Korean.
- Fix: [#3596] Saving parks, landscapes and tracks with a period in the filenames don't get their extension.
- Fix: [#5210] Default system dialog not accessible from saving landscape window.
- Fix: [#6134] Scenarios incorrectly categorised when using Polish version of RCT2.
- Fix: [#6141] CSS50.dat is never loaded.
- Fix: [#6647] Changelog window causes FPS drop.
- Fix: [#6938] Banner do not correctly capitalise non-ASCII characters.
- Fix: [#7176] Mechanics sometimes fall down from rides.
- Fix: [#7303] Visual glitch with virtual floor near map edges.
- Fix: [#7313] Loading an invalid path with openrct2 produces results different than expected.
- Fix: [#7327] Abstract scenery and stations don't get fully See-Through when hiding them (original bug).
- Fix: [#7331] Invention list in scenario editor crashes upon removing previously-enabled ride/stall entries.
- Fix: [#7341] Staff may auto-spawn on guests walking outside of paths.
- Fix: [#7354] Cut-away view does not draw tile elements that have been moved down on the list.
- Fix: [#7358] Peeps and staff entering rides still have the slope speed penalty set.
- Fix: [#7382] Opening the mini-map reverts the size of the land tool to 1x1, regardless of what was selected before.
- Fix: [#7402] Edges of neigbouring footpaths stay connected after removing a path that's underneath a ride entrance.
- Fix: [#7405] Rides can be covered by placing scenery underneath them.
- Fix: [#7418] Staff walk off paths with a connection but no adjacent path.
- Fix: [#7434] Diagonal ride segments cannot be deleted if they are isolated.
- Fix: [#7436] Only the first 32 vehicles of a train can be painted.
- Fix: [#7480] Graphs skip values of 0.
- Fix: [#7505] Game crashes when trying to make path over map edge while having clearance checks disabled.
- Fix: [#7528] In park entrance pricing tab, switching tabs happens on mouse-down instead of mouse-up
- Fix: [#7544] Starting a headless server with no arguments causes the game to freeze.
- Fix: [#7571] Hovering a ride design over scenery or tracks will give tons of money.
- Improved: [#2989] Multiplayer window now changes title when tab changes.
- Improved: [#5339] Change eyedropper icon to actual eyedropper and change cursor to crosshair.
- Improved: [#5832] Resize tile inspector automatically when selecting a tile element.
- Improved: [#6221] The scenario editor's invention list is now resizeable.
- Improved: [#7069] The arbitrary ride type selection dropdown is now sorted orthographically, and has its spinners removed.
- Improved: [#7302] Raising land near the map edge makes the affected area smaller instead of showing an 'off edge map' error.
- Improved: [#7435] Object indexing now supports multi-threading.
- Improved: [#7510] Add horizontal clipping to cut-away view options.
- Improved: [#7531] ""Save track design"" dropdown now stays open.
- Improved: [#7548] Ctrl-clicking with the tile inspector open now directly selects an element and its tile.
- Improved: [#7555] Allow setting the Twitch API URL, allowing custom API servers.
- Improved: [#7567] Improve the performance of loading parks and the title sequence.
- Improved: [#7577] Allow fine-tuning the virtual floor style.
- Improved: [#7608] The vehicle selection dropdown is now sorted orthographically.
- Improved: [#7613] Resizing the staff window now resizes the name and action columns too.
- Improved: [#7627] Allow scrolling up and down on spinners to change their values.",18348651
107,False,False,2018-03-18T20:26:37Z,2018-03-18T21:02:16Z,"- Feature: [#2893] Object selection filters for items from RCT1, Added Attractions and Loopy Landscapes.
- Feature: [#3505] Allow up to 1024 items per scenery tab.
- Feature: [#3510] Auto-append extension if none is specified.
- Feature: [#3994] Show bottom toolbar with map tooltip (theme option).
- Feature: [#4184] Add command and cheat to alter the date.
- Feature: [#4906] Add follow sprite command to title sequences.
- Feature: [#4984] Add option to highlight path issues: full bins, vandalism & vomit.
- Feature: [#5826] Add the show_limits command to show map data counts and limits.
- Feature: [#6078] Game now converts mp.dat to SC21.SC4 (Mega Park) automatically.
- Feature: [#6125] Path can now be placed in park entrances.
- Feature: [#6181] Map generator now allows adjusting random terrain and tree placement in Simplex Noise tab.
- Feature: [#6235] Add drawing debug option for showing visuals when and where blocks of the screen are painted.
- Feature: [#6290] Arabic translation (experimental).
- Feature: [#6292] Allow building queue lines in the Scenario Editor.
- Feature: [#6295] TrueType fonts are now rendered with light font hinting by default.
- Feature: [#6307] Arrows are now shown when placing park entrances.
- Feature: [#6313] Add keyboard shortcut for toggle gridlines.
- Feature: [#6324] Add command to deselect unused objects from the object selection.
- Feature: [#6325] Allow using g1.dat from RCT Classic.
- Feature: [#6329] Render level crossings when the Miniature Railway crossed a path.
- Feature: [#6338] Virtual floor to help positioning objects vertically.
- Feature: [#6353] Show custom RCT1 scenarios in New Scenario window.
- Feature: [#6411] Add command to remove the park fence.
- Feature: [#6414] Raise maximum launch speed of the Corkscrew RC back to 96 km/h (for RCT1 parity).
- Feature: [#6433] Turn 'unlock all prices' into a regular (non-cheat, persistent) option.
- Feature: [#6516] Ability to search by filename in the object selection window.
- Feature: [#6530] Land rights tool no longer blocks when a tile is not for purchase.
- Feature: [#6568] Add smooth nearest neighbour scaling.
- Feature: [#6651, #6658] Integrate Discord Rich Presence.
- Feature: [#6709] The New Ride window now shows available vehicles for a ride type.
- Feature: [#6731] Object indexing progress is now reported via command line output.
- Feature: [#6779] On-ride photo segment for Splash Boats.
- Feature: [#6838] Ability to auto-pause server when no clients are connected.
- Feature: [#7031] Better support for displaced ride entrances and exits.
- Feature: Add search box to track design window.
- Feature: Allow using object files from RCT Classic.
- Feature: Title sequences now testable in-game.
- Feature: Vehicles with matching capabilities are now always switchable.
- Feature: Add search box to track design window.
- Feature: Add load scenario command to title sequences.
- Fix: [#816] In the map window, there are more peeps flickering than there are selected (original bug).
- Fix: [#996, #2589, #2875] Viewport scrolling no longer shakes or gets stuck.
- Fix: [#1185] Close button colour of prompt windows does not match.
- Fix: [#1833, #4937, #6138] 'Too low!' warning when building rides and shops on the lowest land level (original bug).
- Fix: [#2254] Edge scrolling horizontally now has the same speed as vertical edge scrolling.
- Fix: [#2607] Rain rendered incorrectly in additional viewport.
- Fix: [#3171] Guests entering from the corner of the tile in Amity Airfield (original bug).
- Fix: [#3330] Current number of passengers overflows when over 255 (original bug).
- Fix: [#4760] Asia - Great Wall of China and South America - Rio Carnival have incorrect guest entry points (original bug).
- Fix: [#4953, #6277] Unable to advertise to master servers over IPv6.
- Fix: [#4991] Inverted helices can be built on the Lay Down RC, but are not drawn.
- Fix: [#5190] Cannot build Wild Mouse - Flying Dutchman Gold Mine.
- Fix: [#5224] Multiplayer window is not closed when server shuts down.
- Fix: [#5228] Top toolbar disappears when opening SC4 file.
- Fix: [#5261] Deleting a banner sign after copy/pasting it will crash the game.
- Fix: [#5398] Attempting to place Mini Maze.TD4 results in weird behaviour and crashes.
- Fix: [#5417] Hacked Crooked House tracked rides do not dispatch vehicles.
- Fix: [#5445] Patrol area not imported from RCT1 saves and scenarios.
- Fix: [#5585] Inconsistent zooming with mouse wheel.
- Fix: [#5609] Vehicle switching may cause '0 cars per train' to be set.
- Fix: [#5636] Pausing the game shows mute button as active.
- Fix: [#5741] Land rights indicators disappear when switching views.
- Fix: [#5761] Mini coaster doesn't appear despite being selected.
- Fix: [#5788] Empty scenario names cause invisible entries in scenario list.
- Fix: [#5809] Support Steam RCT1 file layout when loading CSG images.
- Fix: [#5838] Crash when saving very large track designs.
- Fix: [#5901] Placing peep spawn not synced across multiplayer.
- Fix: [#6101] Rides remain in ride list window briefly after demolition.
- Fix: [#6114] Crash when using a non-LL CSG1.DAT.
- Fix: [#6115] Random title screen music not random on launch.
- Fix: [#6118, #6245, #6366] Tracked animated vehicles not animating.
- Fix: [#6129] Guest List summary not updating after a ride rename.
- Fix: [#6133] Construction rights not shown after selecting buy mode.
- Fix: [#6188] Viewports not being clipped properly when zoomed out in OpenGL mode.
- Fix: [#6193] All rings in Space Rings use the same secondary colour.
- Fix: [#6196, #6223] Guest's energy underflows and never decreases.
- Fix: [#6198] You cannot cancel RCT1 directory selection.
- Fix: [#6199] Inverted Hairpin Coaster vehicle tab is not centred.
- Fix: [#6202] Guests can break occupied benches (original bug).
- Fix: [#6251] Splash Boats renders flat-to-25-degree pieces in tunnels incorrectly.
- Fix: [#6261, #6344, #6520] Broken pathfinding after removing park entrances with the tile inspector.
- Fix: [#6271] Wrong booster speed tooltip text.
- Fix: [#6293] Restored interface sounds while gameplay is paused.
- Fix: [#6301] Track list freezes after deleting track in Track Manager.
- Fix: [#6308] Cannot create title sequence if title sequences folder does not exist.
- Fix: [#6314] Imported SV4 files do not mark their scenarios as completed.
- Fix: [#6318] Cannot sack staff that have not been placed.
- Fix: [#6320] Crash when CSS1.DAT is absent.
- Fix: [#6331] Scenery costs nothing in track designs.
- Fix: [#6358] HTTP requests can point to invalid URL string.
- Fix: [#6360] Off-by-one filenames when exporting all sprites.
- Fix: [#6388] Construction rights tool erroneously enabled in some RCT1 scenarios even when no rights are available.
- Fix: [#6413] Maze previews only showing scenery.
- Fix: [#6423] Importing parks containing names with Polish characters.
- Fix: [#6423] Polish characters now correctly drawn when using the sprite font.
- Fix: [#6445] Guests' favourite ride improperly set when importing from RCT1 or AA.
- Fix: [#6452] Scenario text cut off when switching between 32 and 64-bit builds.
- Fix: [#6460] Crash when reading corrupt object files.
- Fix: [#6481] Can't take screenshots of parks with colons in the name.
- Fix: [#6500] Failure to load resources when config file is missing.
- Fix: [#6547] The server log is not logged if the server name contains CJK.
- Fix: [#6593] Cannot hire entertainers when default scenery groups are not selected (original bug).
- Fix: [#6657] Guest list is missing tracking icon after reopening.
- Fix: [#6803] Symbolic links to directories are not descended by FileScanner.
- Fix: [#6830] Crash when using mountain tool due to ride with no ride entry.
- Fix: [#6833] Shops in corrupted files not imported correctly.
- Fix: [#6846] Zoom level in some ride overview windows was erroneously set too high.
- Fix: [#6904] Manually added multiplayer servers not saved.
- Fix: [#7003] Building sloped paths through flat paths with clearance checks off causes glitches.
- Fix: [#7011] Swinging and bobsleigh cars going backwards swing in the wrong direction (original bug).
- Fix: [#7042, #7077] Paths sometimes disconnect when building them with clearance checks off.
- Fix: [#7125] No entry signs not correctly handled in pathfinding.
- Fix: [#7223] Vehicle mass not correctly recalculated when using remove all guests cheat.
- Fix: [#7229] Exploding guests cheat causes rides to get stuck and freezes game.
- Fix: [#7295] peep_should_go_on_ride_again() checked balloon colour instead of toilet need.
- Fix: [#7301] Sprite compiler dithering checks transparency of wrong pixel.
- Fix: Infinite loop when removing scenery elements with >127 base height.
- Fix: Ghosting of transparent map elements when the viewport is moved in OpenGL mode.
- Fix: Clear IME buffer after committing composed text.
- Fix: RCT1 mazes with wooden fences not imported correctly.
- Fix: Title sequence editor now gracefully fails to preview a title sequence and lets the user know with an error message.
- Fix: When preset title sequence fails to load, the preset will forcibly be changed to the first sequence to successfully load.
- Fix: Remove consecutive thoughts about a ride being demolished.
- Fix: Water raft vehicles stop spinning when going up slopes.
- Fix: Incorrect spin is applied to coasters on S-bends and other turns.
- Improved: [#5962] Use AVX2 instruction set where supported, resulting in a performance boost.
- Improved: [#5964] Use SSE 4.1 instruction set where supported, resulting in a performance boost.
- Improved: [#6186] Transparent menu items now draw properly in OpenGL mode.
- Improved: [#6218] Speed up game start up time by saving scenario index to file.
- Improved: [#6242] Prevent scenery aging and grass growth causing tile invalidation unless necessary - slight performance boost.
- Improved: [#6423] Polish is now rendered using the sprite font, rather than TTF.
- Improved: [#6746] Draw friction wheels instead of chain lift on Looping Roller Coaster stations.
- Improved: Load/save window now refreshes list if native file dialog is closed/cancelled.
- Improved: Major translation updates for Japanese and Polish.
- Improved: Added 24x24, 48x48, and 96x96 icon resolutions.
- Technical: [#6384] On macOS, address NSFileHandlingPanel deprecation by using NSModalResponse instead.
- Technical: [#6772] RCT2 interop removed.",18348651
108,False,False,2017-08-09T22:02:59Z,2017-08-09T22:06:42Z,"This is mostly a bugfix release.

- Feature: [#5815] Add cheat to ignore research status and access rides/scenery not yet invented.
- Feature: [#5857] Keyboard shortcut for clear scenery.
- Feature: [#5877] Allow up to 16 stations to be synchronised
- Feature: [#5970] The Bobsleigh Roller Coaster now supports on-ride photos.
- Feature: [#5991] Allow all tracked rides that can be tested without guests to the Track Designer
- Fix: [#2127, #2229, #5586] Mountain tool cost calculation
- Fix: [#3589] Crash due to invalid footpathEntry in path_paint
- Fix: [#3852] Constructing path not clearing scenery on server.
- Fix: [#4455] Crash in window_sign_invalidate due to original bug
- Fix: [#4715] Fix OpenGL rendering of water when zoomed. See #5890.
- Fix: [#4931] Crash in path_paint - footpathentry was null
- Fix: [#5629] Issue with tower ride modes approach to station - incorrect sum caused sawtooth in velocity
- Fix: [#5768] Prevent loading non-existent title sequences.
- Fix: [#5858] Crash when using custom ride with no colour presets.
- Fix: [#5865] Ride preview flickering on uneven terrain or mid air.
- Fix: [#5872] Incorrect OpenGL rendering of masked sprites
- Fix: [#5880] Leaving bumper cars without building causes assertion.
- Fix: [#5890] Fix zoomed OpenGL rendering of special sprites with primary and secondary colours.
- Fix: [#5912] Negative queue when moving entrance in paused state.
- Fix: [#5920] Placing guest spawn doesn't do anything every 3rd click
- Fix: [#5939] Crash when importing 'Six Flags Santa Fe'.
- Fix: [#5977] Custom music files not showing up in music list
- Fix: [#5981] Ride list doesn't update after using quick demolish.
- Fix: [#5984] Allow socket binding to same port after crash
- Fix: [#5998] Staff not getting paid / no loan interest.
- Fix: [#6026] 'Select ride to advertise' dropdown does not display all items.
- Fix: [#6052] Unable to place entrance/exit on certain ride types.
- Fix: [#6071] Quick demolish can delete protected ride.
- Fix: [#6111] Mute button always visible in editor.
- Fix: [#6113] Track preview shows incorrect highest drop height.
- Improved: [#2223] Change mountain tool to ignore higher surrounding tiles.
- Improved: [#4301] Leading and trailing whitespace in player name is now removed.
- Improved: [#5859] OpenGL rendering performance
- Improved: [#5863] Switching drawing engines no longer requires the application to restart.
- Improved: [#6003] Doors placed on tracks will now work with all vehicles
- Improved: [#6037] Autosaves are now stored in a subfolder
- Improved: The land tool buttons can now be held down to increase/decrease size.
- Improved: Dropdowns longer than 32 items overflow into columns.
- Improved: Ride Type option in ride window is now a dropdown.
- Improved: ""About OpenRCT2"" window redesigned, now contains OpenRCT2 info and access to changelog",18348651
109,False,False,2017-07-12T20:12:47Z,2017-07-12T20:20:04Z,"- Feature: [#5056] Add cheat to own all land.
- Feature: [#5133] Add option to display guest expenditure (as seen in RCTC).
- Feature: [#5196] Add cheat to disable ride ageing.
- Feature: [#5504] Group vehicles into ride groups
- Feature: [#5576] Add a persistent 'display real names of guests' setting.
- Feature: [#5611] Add support for Android
- Feature: [#5706] Add support for OpenBSD
- Feature: OpenRCT2 now starts up on the display it was last shown on.
- Feature: Park entrance fee can now be set to amounts up to £200.
- Improved: Construction rights can now be placed on park entrances.
- Improved: Mouse can now be dragged to select scenery when saving track designs
- Fix: [#259] Money making glitch involving swamps (original bug)
- Fix: [#441] Construction rights over entrance path erased (original bug)
- Fix: [#578] Ride ghosts show up in ride list during construction (original bug)
- Fix: [#597] 'Finish 5 roller coasters' goal not properly checked (original bug)
- Fix: [#667] Incorrect banner limit calculation (original bug)
- Fix: [#739] Crocodile Ride (Log Flume) never allows more than five boats (original bug)
- Fix: [#837] Can't move windows on title screen to where the toolbar would be (original bug)
- Fix: [#1705] Time Twister's Medieval entrance has incorrect scrolling (original bug)
- Fix: [#3178, #5456] Paths with non-ASCII characters not handled properly on macOS.
- Fix: [#3346] Crash when extra long train breaks down at the back
- Fix: [#3479] Building in pause mode creates too many floating numbers, crashing the game
- Fix: [#3565] Multiplayer server crash
- Fix: [#3681] Steel Twister rollercoaster always shows all track designs
- Fix: [#3846, #5749] Crash when testing coaster with a diagonal lift in block brake mode
- Fix: [#4054] Sorting rides by track type: Misleading research messages
- Fix: [#4055] Sort rides by track type: Sorting rule is not really clear (inconsistent?)
- Fix: [#4512] Invisible map edge tiles corrupted
- Fix: [#5009] Ride rating calculations can overflow
- Fix: [#5253] RCT1 park value conversion factor too high
- Fix: [#5400] New Ride window does not focus properly on newly invented ride.
- Fix: [#5489] Sprite index crash for car view on car ride.
- Fix: [#5730] Unable to uncheck 'No money' in the Scenario Editor.
- Fix: [#5750] Game freezes when ride queue linked list is corrupted.
- Fix: [#5819] Vertical multi-dimension coaster tunnels drawn incorrectly
- Fix: Non-invented vehicles can be used via track designs in select-by-track-type mode.
- Fix: Track components added by OpenRCT2 are now usable in older scenarios.
- Technical: [#5047] Add ride ratings tests
- Technical: [#5458] Begin offering headless build with reduced compile- and run-time dependencies
- Technical: [#5755] Title sequence wait periods use milliseconds
- Technical: Fix many desync sources",18348651
110,False,False,2017-05-03T20:50:25Z,2017-05-03T21:03:23Z,"- Feature: [#1730] Keyboard shortcuts for track construction.
- Feature: [#2060, #5282] Heightmap loader
- Feature: [#5110] The tile inspector can now be used in multiplayer.
- Feature: [#5305] Add scenery eye dropper tool.
- Feature: [#5370] Ride operating mode can be set from the console.
- Feature: [#5415] Add mute toolbar button (as seen in RCT1 and Locomotion).
- Improved: [#5254] Scenario option changes are now synchronised over multiplayer.
- Improved: [#3288] Added server description and greeting textboxes to the start server menu.
- Improved: [#3502] Track previews display at higher zoom level for large layouts.
- Improved: [#5055] Implement 'quick demolish' for rides.
- Improved: [#5137] Removing all guests no longer closes the rides and removes the vehicles.
- Improved: [#5163] Minor tile inspector improvements and fixes.
- Improved: [#5222] Add Catalan language.
- Improved: [#5351] Giga Coaster and Steel Twister RC boosters now use the correct sprites.
- Improved: Looping RC and Corkscrew RC now use booster sprites from RCT1's CSG1.DAT if available.
- Improved: Scenario options are now synced in multiplayer.
- Improved: Remove duplicate ride penalty for closed rides.
- Improved: Make shortcut keys window larger and resizable.
- Removed: known_issues.txt no longer used, check issue tracker on GitHub.
- Fix: [#1992] Felicity Anderson Cheat can crash the game, as well as blocking queues.
- Fix: [#4493] Provide tooltip for disabled price field.
- Fix: [#4689] Object selection tabs sometimes flicker.
- Fix: [#4913] Server greeting displaying local setting.
- Fix: [#4972] Map window not updated properly when shrinking map from Map Generation window.
- Fix: [#5004] Peeps in parks imported from RCT1 show abnormalities.
- Fix: [#5014] Research not imported from RCT1 correctly.
- Fix: [#5032] Booster speed is not saved in TD6.
- Fix: [#5140] Headless server should save default users.json.
- Fix: [#5150] --openrct-data-path sets user data path instead of OpenRCT2 data path.
- Fix: [#5169] Parks containing packed objects fail to open.
- Fix: [#5199] ""Force a breakdown"" debugging tool isn't hidden in multiplayer.
- Fix: [#5188] Clicking on a Magic Carpet doesn't open the ride window.
- Fix: [#5218] Scale RCT1 park value objectives.
- Fix: [#5219] Game crashes when opening 'misc' tab in options.
- Fix: [#5238] RCT1 import: Rides are initially free when placing them.
- Fix: [#5252] Correct typo in Conger Eel Coaster description.
- Fix: [#5265] Queue line TVs not detected properly.
- Fix: [#5271] Keyboard shortcuts window isn't large enough (for some languages).
- Fix: [#5284] Mechanic is called to fix a ride that's outside his patrol area.
- Fix: [#5285] Intro always plays even if play_intro = false.
- Fix: [#5299] Scenario editor crash when placing peep spawn.
- Fix: [#5318] Using the bulldozer tool on under-construction paths results in unlimited free money.
- Fix: [#5325] Game crashes if encountering an invalid ride type during research.
- Fix: [#5345] Correct typos in descriptions for Top Spin and Splash Boats.
- Fix: [#5350] Steel Twister RC and Giga Coaster boosters are underpowered, Junior Roller Coaster boosters overpowered compared to RCTC.
- Fix: [#5357] ""Assertion failed!"" after guest with name 'Emma Garrell' exits/enters ride.
- Fix: Walls do not import from RCT1 correctly in pause mode.
- Fix: Extraneous window tabs show up on MacOS 10.12.
- Fix: Potential for integer overflow in ride length.
- Fix: Vehicles erroneously removed when removing all guests.
- Technical: INI configuration file now case-insensitive.
- Technical: Remove version build from msbuild & NSIS.
",18348651
111,False,False,2017-01-29T23:32:12Z,2017-01-30T00:02:09Z,"## 0.0.6
- Feature: [#3355] Allow loading of parks from URLs.
- Feature: [#4673] Add paint Z clipping.
- Feature: [#4901] Allow entertainers' costume changes even in absence of required scenery.
- Feature: [#4916] FreeBSD support.
- Feature: [#4963] Add boosters (from RCT1 and RCTC).
- Feature: [#5113] Entertainers are now hired with a random costume.
- Improved: [#4847] Guest / staff pathfinding.
- Improved: [#4938] Checksum calculations speeded up.
- Improved: [#5007] Vehicles and functioning rides are now imported when loading SC4 / SV4 parks.
- Improved: Guests and staff are now imported when loading SC4 / SV4 parks.
- Fix: [#4571] Only start autosave timer after update or game command.
- Fix: [#4584] Junior Coaster diagonal flat-to-steep slopes not drawn.
- Fix: [#4929] Changing TTF language crashes game.
- Fix: [#4944] Game crashes upon selecting objects in scenario editor.
- Fix: [#4951] Scenarios are not recorded as completed from a saved game.
- Fix: [#4968] Completing a scenario does not save the name that is entered.
- Fix: [#4996] Objects unloaded after loading landscape.
- Fix: [#5003] Able to remove entrance/exit of unedittable rides (such as in Volcania).
- Fix: [#5096] Failure to open parks with out of bounds sprite coordinates.
- Fix: [#5114] Some entertainer costumes never select-able.
",18348651
112,False,False,2016-12-27T00:36:50Z,2016-12-27T15:42:48Z,"## 0.0.5

This is the first fully implemented version of OpenRCT2. RCT2.EXE is no longer required.
- Feature: Ability to disable rendering of weather effects and gloom
- Feature: New view option: ""See-Through Paths""
- Feature: Add cheat to reset date.
- Feature: Add OpenGL drawing engine.
- Feature: Implementation of the user-defined currency
- Feature: Extended tile inspector.
- Feature: Add ride console command for diagnostics and changing vehicle type.
- Feature: Allow selecting corners when using the mountain tool.
- Feature: Allow setting ownership of map edges.
- Feature: Allow up to 255 cars per train.
- Feature: Importing SV4 and SC4 files with rides.
- Feature: Filter Object Selection Window by ""Selected only"" and ""Non-selected only""
- Feature: Allow raising terrain to 64 in-game units.
- Feature: Assymmetric-key-based authorisation and assignment storage.
- Feature: Add Norwegian translation.
- Feature: Add cheat to disable littering.
- Feature: Add Cheat to disable plant aging.
- Feature: Add Cheat that allows any track piece to use a chain lift.
- Feature: Add Console command to set vehicle friction.
- Feature: Add console command to set scenario initial cash.
- Feature: Objects are scanned from the user directory as well as the RCT2 directory.
- Feature: Objects directory is scanned recursively.
- Feature: Optionally zoom in towards the cursor rather than the screen centre.
- Change: The maximum height of Junior Roller Coasters is now 14 units, like it was in RCT1.
- Improved: Pathfinding algorithm.
- Improved: Performance and reliability of loading objects.
- Improved: Screenshots are now saved with the name of the park and the current date and time.
- Improved: More accurate frame rate calculation
- Improved: In-game file dialog now shows more formats (sv6, sc6, sv4, etc.)
- Improved: Joining multiplayer will not redownload custom objects
- Removed: BMP screenshots.
- Removed: Intamin and Phoenix easter eggs.
- Fix: [#933] On-ride photo price sometimes gets reset to £2 when using 'same price in whole park' (original bug).
- Fix: [#1038] Guest List is out of order.
- Fix: [#1238] Track place window does not fully adjust to custom colour scheme.
- Fix: [#2042] Guests entering queues are immediately annoyed when many entertainers are around (original bug).
- Fix: [#2081] Game hangs when track has infinite loop.
- Fix: [#2754] Dragging scrollview fails when scaled.
- Fix: [#3210] Scenery window scrolls too far.
- Fix: [#3282] Launched Freefall ride ratings are fixed for Downward Launch (original bug).
- Fix: [#3307] Ride music and sound has degraded since RCT2.
- Fix: [#3344] Build new ride window can be opened in scenario editor.
- Fix: [#3347] Ride windows are auto-positioned below the HUD when using RCT1 lights.
- Fix: [#3352] Assertion triggered while fixing surface tiles.
- Fix: [#3361] Missing Twister coaster piece.
- Fix: [#3418] Launched freefall restraints are drawn incorrectly when up (original bug).
- Fix: [#3451] Renaming staff is a guest command.
- Fix: [#3635] Inspecting sidewalk path crashes game.
- Fix: [#3735] Advertisement campaign window bug.
- Fix: [#3771] Crash when kicking player in multiplayer.
- Fix: [#3824] Segfault when passing invalid arguments to ride set type.
- Fix: [#3858] Tooltip shown when hovering over title logo.
- Fix: [#3915] Restore horizontal and vertical scrollbar behaviour from RCT2 when clicking on one of the scrollbars.
- Fix: Lay-down Roller Coasters from RCT1 saves are imported with an incorrect vehicle type (not reported).
- Fix: High lateral G-forces penalty applied too early (not reported).
- Technical: Multiplayer groups are now stored in JSON format.
- Technical: MinGW builds dropped support for Windows XP
",18348651
113,False,True,2016-04-15T21:42:57Z,2016-04-15T22:01:32Z,"This is the third stable release of OpenRCT2. While still requiring the original game executable, this version should be more robust while containing many of the new features.
",18348651
114,False,True,2015-12-04T21:09:43Z,2015-12-04T21:15:01Z,"Includes hot fixes from 0.0.3.
",18348651
115,False,True,2015-11-30T18:54:15Z,2015-11-30T19:11:12Z,"This is the second stable release of OpenRCT2. While still requiring the original game executable, this version should be more robust while containing many of the new features.
",18348651
116,False,True,2015-06-21T12:56:39Z,2015-06-21T13:16:01Z,"This is the first stable release of OpenRCT2. While still requiring the original game executable, this version should be more robust while containing many of the new features.
",18348651
117,False,True,2014-04-01T23:31:55Z,2014-12-07T17:06:23Z,"This is the very first code snapshot where most of the logic still resides in the original game. This is just a base version and should not be used.
",18348651
118,False,False,2020-03-17T16:45:53Z,2020-03-17T16:46:46Z,"This maintenance release of the 0.5.x series fixes a bug that was always present in the compiler. Some people do not even consider it a bug, though, which might explain why it was undiscovered for so long:

A private function can be overridden in a derived contract by a private function of the same name and types. In other words, the virtual function calling mechanism does not respect visibility.
The same applies to two private functions of the same name and type that are declared in two unrelated base contracts (diamond inheritance).

This bug has been fixed in the 0.6.x series already in version 0.6.0 by making the override mechanism more strict in general.

**Bugfixes:**
 * Type Checker: Disallow overriding of private functions.


Thanks to @k06a for reporting the bug!

If you want to perform a source build, please only use solidity_0.5.17.tar.gz and not the zip provided by github directly.
",40892817
119,False,False,2020-03-10T14:24:17Z,2020-03-10T15:26:16Z,"Version 0.6.4 of Solidity fixes a bug that did not allow calling base contract functions directly, another bug that caused issues with variable scoping in try/catch and it allows for greater flexibility with regards to storage: It is now possible to set storage slots for storage reference variables from inline assembly. We expect this to allow new patterns in connection to delegatecall proxies and upgradable contracts. Please be careful when using this feature!

**Language Features:**
 * General: Deprecated `value(...)` and `gas(...)` in favor of `{value: ...}` and `{gas: ...}`
 * Inline Assembly: Allow assigning to `_slot` of local storage variable pointers.
 * Inline Assembly: Perform control flow analysis on inline assembly. Allows storage returns to be set in assembly only.


**Compiler Features:**
 * AssemblyStack: Support for source locations (source mappings) and thus debugging Yul sources.
 * Commandline Interface: Enable output of experimental optimized IR via ``--ir-optimized``.



**Bugfixes:**
 * Inheritance: Fix incorrect error on calling unimplemented base functions.
 * Reference Resolver: Fix scoping issue following try/catch statements.
 * Standard-JSON-Interface: Fix a bug related to empty filenames and imports.
 * SMTChecker: Fix internal errors when analysing tuples.
 * Yul AST Import: correctly import blocks as statements, switch statements and string literals.


---

We especially thank all the contributors that made this release possible:

a3d4, Bhargava Shastry, Chris Chinchilla, Christian Parpart, Daniel Kirchner, Djordje Mijovic, Erik Kundt, Kamil Śliwak, Leonardo Alt

If you want to perform a source build, please only use solidity_0.6.4.tar.gz and not the zip provided by github directly.",40892817
120,False,False,2020-02-18T14:50:19Z,2020-02-18T15:38:40Z,"This release adds reason strings for compiler-generated reverts if you specify ``--revert-strings debug`` or use the setting ``settings.debug.revertStrings = ""debug""``. Furthermore, contract types and enums are now allowed as keys for mappings and the doxygen-style comments are better supported by the AST.


**Language Features:**
 * Allow contract types and enums as keys for mappings.
 * Allow function selectors to be used as compile-time constants.

**Compiler Features:**
 * AST: Add a new node for doxygen-style, structured documentation that can be received by contract, function, event and modifier definitions.
 * Code Generator: Use ``calldatacopy`` instead of ``codecopy`` to zero out memory past input.
 * Debug: Provide reason strings for compiler-generated internal reverts when using the ``--revert-strings`` option or the ``settings.debug.revertStrings`` setting on ``debug`` mode.
 * Structured Documentation: Report source locations for structured documentation errors.
 * Yul Optimizer: Prune functions that call each other but are otherwise unreferenced.


**Bugfixes:**
 * Assembly Output: Added missing `source` field to legacy assembly json output to complete the source reference.
 * Parser: Fix an internal error for ``abstract`` without ``contract``.
 * Type Checker: Make invalid calls to uncallable types fatal errors instead of regular.

---

We especially thank all the contributors that made this release possible:

a3d4, Alexander Arlt, Bhargava Shastry, Brian L. McMichael, cameel, Chris Chinchilla, Christian Parpart, Daniel Kirchner, Djordje Mijovic, Erik Kundt, Gaith Hallak, Jason Cobb, Kamil Śliwak, Leonardo Alt, Mathias Baumann, Nicolas, pinkiebell, rodiazet.


If you want to perform a source build, please only use solidity_0.6.3.tar.gz and not the zip provided by github directly.",40892817
121,False,False,2020-01-27T13:43:22Z,2020-01-27T14:27:57Z,"After long discussions, we finally enabled a high-level way to use the ``create2`` opcode introduced in Constantinople: When creating a contract, you can specify the salt as a ""function call option"": ``new Contract{salt: 0x1234}(arg1, arg2)``. We took this opportunity and also extended the use of these function call options to specifying the gas and value options in external function calls: ``c.f{value: 10, gas: 20000}(arg1, arg2)``.

Furthermore, interfaces can now inherit from interfaces, making them even more useful for specification purposes.

To allow mutation testing and other uses, you can now export the AST, modify it and re-compile starting from the modified ast using `solc --import-ast`. Note that compiling from a modified AST is not meant for production.

And last but not least, we are now building the javascript compiler solc-js / soljson.js using webassembly which should both provide a performance boost as well as reduce compatibility issues with browsers.


## Changelog:

**Language Features:**
 * Allow accessing external functions via contract and interface names to obtain their selector.
 * Allow interfaces to inherit from other interfaces
 * Allow gas and value to be set in external function calls using ``c.f{gas: 10000, value: 4 ether}()``.
 * Allow specifying the ``salt`` for contract creations and thus the ``create2`` opcode using ``new C{salt: 0x1234, value: 1 ether}(arg1, arg2)``.
 * Inline Assembly: Support literals ``true`` and ``false``.


**Compiler Features:**
 * LLL: The LLL compiler has been removed.
 * General: Raise warning if runtime bytecode exceeds 24576 bytes (a limit introduced in Spurious Dragon).
 * General: Support compiling starting from an imported AST. Among others, this can be used for mutation testing.
 * Yul Optimizer: Apply penalty when trying to rematerialize into loops.


**Bugfixes:**
 * Commandline interface: Only activate yul optimizer if ``--optimize`` is given.
 * Fixes internal compiler error on explicitly calling unimplemented base functions.


**Build System:**
 * Switch to building soljson.js with an embedded base64-encoded wasm binary.

---

We especially thank all the contributors that made this release possible:

Alex Beregszaszi, Bhargava Shastry, cameel, Chris Chinchilla, Christian Parpart, Daniel Kirchner, djudjuu, Erik Kundt, Gonçalo Sá, Jason Cobb, Leonardo Alt, Mathias Baumann, Nicolás Venturo, Rafael Lorandi, rodiazet, Victor Baranov, William Entriken.


If you want to perform a source build, please only use solidity_0.6.2.tar.gz and not the zip provided by github directly.",40892817
122,False,False,2020-01-02T23:35:39Z,2020-01-02T23:36:04Z,"This release fixes a bug in the Yul optimizer related to ``break`` and ``continue`` statements in loops. The Yul optimizer is part of the regular optimizer since version 0.6.0. In version 0.5.x, you had to explicitly activate the Yul optimizer in addition to the regular optimizer. The Yul optimizer only operates on the code generated by ABIEncoderV2 or if you use it in a stand-alone way. The code generated by ABIEncoderV2 does not make use of ``break`` and ``continue``, but these statements can be introduced by other optimizer steps. The Yul optimizer currently is not run on inline-assembly code.


**Bugfixes:**
 * Yul Optimizer: Fix bug in redundant assignment remover in combination with break and continue statements.


If you want to perform a source build, please only use solidity_0.6.1.tar.gz and not the zip provided by github directly.",40892817
123,False,False,2020-01-02T18:52:34Z,2020-01-02T18:54:13Z,"This release fixes a bug in the Yul optimizer. You are only affected if you manually enabled the Yul optimizer (not the regular optimizer) and either used Yul stand-alone or via ABIEncoderV2. For more details, please see buglist.json.

**Bugfixes:**
 * Yul Optimizer: Fix bug in redundant assignment remover in combination with break and continue statements.




If you want to perform a source build, please only use solidity_0.5.16.tar.gz and not the zip provided by github directly.",40892817
124,False,False,2019-12-17T21:32:51Z,2019-12-17T22:12:29Z,"This is a major breaking release of the Solidity compiler and language. Changes include explicit virtual and override keywords in inheritance, support for try/catch, splitting the fallback function into a receive Ether function and an actual fallback function and limitations on how the length of an array can be changed, among others. For a detailed explanation, please see the [documentation](https://solidity.readthedocs.io/en/latest/060-breaking-changes.html) or refer to the list below that shows every single change.

From this release on, ABIEncoderV2 is not considered experimental any more, but you still have to activate it through the pragma.

Furthermore, the Yul optimizer is automatically activated together with the regular optimizer, but you can still disable it through the detailed optimizer settings.

**Breaking changes:**
 * ABI: Remove the deprecated ``constant`` and ``payable`` fields.
 * ABI: The ``type`` field is now required and no longer specified to default to ``function``.
 * AST: Inline assembly is exported as structured JSON instead of plain string.
 * C API (``libsolc``): Introduce context parameter to both ``solidity_compile`` and the callback.
 * C API (``libsolc``): The provided callback now takes two parameters, kind and data. The callback can then be used for multiple purposes, such has file imports and SMT queries.
 * C API (``libsolc``): ``solidity_free`` was renamed to ``solidity_reset``. Functions ``solidity_alloc`` and ``solidity_free`` were added.
 * C API (``libsolc``): ``solidity_compile`` now returns a string that must be explicitly freed via ``solidity_free()``
 * Commandline Interface: Remove the text-based AST printer (``--ast``).
 * Commandline Interface: Switch to the new error reporter by default. ``--old-reporter`` falls back to the deprecated old error reporter.
 * Commandline Interface: Add option to disable or choose hash method between IPFS and Swarm for the bytecode metadata.
 * General: Disallow explicit conversions from external function types to ``address`` and add a member called ``address`` to them as replacement.
 * General: Enable Yul optimizer as part of standard optimization.
 * General: New reserved keywords: ``override``, ``receive``, and ``virtual``.
 * General: ``private`` cannot be used together with ``virtual``.
 * General: Split unnamed fallback functions into two cases defined using ``fallback()`` and ``receive()``.
 * Inheritance: State variable shadowing is now disallowed.
 * Inline Assembly: Only strict inline assembly is allowed.
 * Inline Assembly: Variable declarations cannot shadow declarations outside the assembly block.
 * JSON AST: Replace ``superFunction`` attribute by ``baseFunctions``.
 * Natspec JSON Interface: Properly support multiple ``@return`` statements in ``@dev`` documentation and enforce named return parameters to be mentioned in the documentation.
 * Source mappings: Add ""modifier depth"" as a fifth field in the source mappings.
 * Standard JSON Interface: Add option to disable or choose hash method between IPFS and Swarm for the bytecode metadata.
 * Syntax: ``push(element)`` for dynamic storage arrays do not return the new length anymore.
 * Syntax: Abstract contracts need to be marked explicitly as abstract by using the ``abstract`` keyword.
 * Syntax: ``length`` member of arrays is now always read-only, even for storage arrays.
 * Type Checker: Resulting type of exponentiation is equal to the type of the base. Also allow signed types for the base.

**Language Features:**
 * Allow explicit conversions from ``address`` to ``address payable`` via ``payable(...)``.
 * Allow global enums and structs.
 * Allow public variables to override external functions.
 * Allow underscores as delimiters in hex strings.
 * Introduce syntax for array slices and implement them for dynamic calldata arrays.
 * Introduce ``push()`` for dynamic storage arrays. It returns a reference to the newly allocated element, if applicable.
 * Introduce ``virtual`` and ``override`` keywords.
 * Introduce ``try``/``catch``-statement
 * Modify ``push(element)`` for dynamic storage arrays such that it does not return the new length anymore.
 * Yul: Introduce ``leave`` statement that exits the current function.
 * JSON AST: Add the function selector of each externally-visible FunctonDefinition to the AST JSON export.

**Compiler Features:**
 * Allow revert strings to be stripped from the binary using the ``--revert-strings`` option or the ``settings.debug.revertStrings`` setting.
 * ABIEncoderV2: Do not warn about enabled ABIEncoderV2 anymore (the pragma is still needed, though).


We especially thank all the contributors that made this release possible:

Alexander Arlt, Alex Beregszaszi, Bhargava Shastry, cd10012, Chris Chinchilla, Christian Parpart, Cory Dickson, Daniel Kirchner, djudjuu, Erik Kundt, Gaith Hallak, krk, Leo Arias, Leonardo Alt, Mathias Baumann, misterfoxy, rodiazet, William Entriken

If you want to perform a source build, please only use solidity_0.6.0.tar.gz and not the zip provided by github directly.",40892817
125,False,False,2019-12-17T16:27:41Z,2019-12-17T17:23:49Z,"This release fixes a bug that was introduced in 0.5.14 (the previous release). You are only affected if you manually enabled the Yul optimizer (not the regular optimizer) and either used Yul stand-alone or via ABIEncoderV2. For more details, please see buglist.json.

**Bugfixes:**
 * Yul Optimizer: Fix incorrect redundant load optimization crossing user-defined functions that contain for-loops with memory / storage writes.


If you want to perform a source build, please only use solidity_0.5.15.tar.gz and not the zip provided by github directly.",40892817
126,False,False,2019-12-09T15:17:10Z,2019-12-09T17:24:43Z,"Solidity 0.5.14 sets the default EVM version to ""Istanbul"" and is targeted as the last release in the 0.5.x series.

The SMT checker supports constructors now and it is possible to directly translate EVM-flavoured Yul to Ewasm from the commandline interface.


**Language Features:**
 * Allow to obtain the selector of public or external library functions via a member ``.selector``.
 * Parser: Allow splitting string and hexadecimal string literals into multiple parts.
 * Inline Assembly: Support constants that reference other constants.


**Compiler Features:**
 * Commandline Interface: Allow translation from yul / strict assembly to EWasm using ``solc --yul --yul-dialect evm --machine eWasm``
 * Set the default EVM version to ""Istanbul"".
 * SMTChecker: Add support to constructors including constructor inheritance.
 * Yul: When compiling via Yul, string literals from the Solidity code are kept as string literals if every character is safely printable.
 * Yul Optimizer: Perform loop-invariant code motion.


**Bugfixes:**
 * SMTChecker: Fix internal error when using ``abi.decode``.
 * SMTChecker: Fix internal error when using arrays or mappings of functions.
 * SMTChecker: Fix internal error in array of structs type.
 * Version Checker: ``^0`` should match ``0.5.0``, but no prerelease.
 * Yul: Consider infinite loops and recursion to be not removable.


**Build System:**
 * Update to emscripten version 1.39.3.


We especially thank all the contributors that made this release possible:

Alex Beregszaszi, Bhargava Shastry, Chris Chinchilla, Christian Parpart, Daniel Kirchner, Erik Kundt, Gaith Hallak, Henry Lee, Lefteris Karapetsas, Leonardo Alt, Mathias Baumann, mingchuan, Paweł Bylica, William Entriken

If you want to perform a source build, please only use solidity_0.5.14.tar.gz and not the zip provided by github directly.",40892817
127,False,False,2019-11-14T13:55:21Z,2019-11-14T15:21:01Z,"Solidity 0.5.13 provides Istanbul-EVM compatibility (default is still set to Petersburg), is the first version to generate Ethereum-Webassembly (EWasm) binary output (not fully working yet, though), improves the developer experience by listing potential overloads when resolution fails and can output the layout of the storage variables of a contract. As with all other releases, the coverage of the SMT checker is further improved.


**Language Features:**
 * Allow to obtain the address of a linked library with ``address(LibraryName)``.


**Compiler Features:**
 * Code Generator: Use SELFBALANCE opcode for ``address(this).balance`` if using Istanbul EVM.
 * EWasm: Experimental EWasm binary output via ``--ewasm`` and as documented in standard-json.
 * SMTChecker: Add break/continue support to the CHC engine.
 * SMTChecker: Support assignments to multi-dimensional arrays and mappings.
 * SMTChecker: Support inheritance and function overriding.
 * Standard JSON Interface: Output the storage layout of a contract when artifact ``storageLayout`` is requested.
 * TypeChecker: List possible candidates when overload resolution fails.


**Bugfixes:**
 * Code Generator: Fixed a faulty assert that would wrongly trigger for array sizes exceeding unsigned integer.
 * SMTChecker: Fix internal error when accessing indices of fixed bytes.
 * SMTChecker: Fix internal error when using function pointers as arguments.
 * SMTChecker: Fix internal error when implicitly converting string literals to fixed bytes.
 * Type Checker: Disallow constructor of the same class to be used as modifier.
 * Type Checker: Treat magic variables as unknown identifiers in inline assembly.

We especially thank all the contributors that made this release possible:

Alex Beregszaszi, Alexander Arlt, Bhargava Shastry, Chris Chinchilla, Christian Parpart, Daniel Kirchner, Erik Kundt, Gaith Hallak, hellraiserinchief , Henry Lee, Jochem Brouwer, Leonardo Alt, Mathias Baumann

If you want to perform a source build, please only use solidity_0.5.13.tar.gz and not the zip provided by github directly.",40892817
128,False,False,2019-10-01T15:59:34Z,2019-10-01T18:59:51Z,"This is a small bugfix release that also includes loop support for the SMT solver and some improvements to the Yul optimizer. The reason for the smaller feature set is that we are mainly working on the upcoming 0.6.0 release.

**Language Features:**
 * Type Checker: Allow assignment to external function arguments except for reference types.

**Compiler Features:**
 * ABI Output: Change sorting order of functions from selector to kind, name.
 * Optimizer: Add rule that replaces the BYTE opcode by 0 if the first argument is larger than 31.
 * SMTChecker: Add loop support to the CHC engine.
 * Yul Optimizer: Take side-effect-freeness of user-defined functions into account.
 * Yul Optimizer: Remove redundant mload/sload operations.

**Bugfixes:**
 * Code Generator: Fix internal error when popping a dynamic storage array of mappings.
 * Name Resolver: Fix wrong source location when warning on shadowed aliases in import declarations.
 * Scanner: Fix multi-line natspec comment parsing with triple slashes when file is encoded with CRLF instead of LF.
 * Type System: Fix arrays of recursive structs.
 * Yul Optimizer: Fix reordering bug in connection with shifted one and mul/div-instructions in for loop conditions.


We especially thank all the contributors that made this release possible:

Alexander Arlt, Alex Beregszaszi, Ayrat Badykov, Balaji Pachai, Bhargava Shastry, Chris Chinchilla, Christian Parpart, Crawford Leeds, Daniel Kirchner, Dimitry, Erik Kundt, Flash Sheridan, Gois, Lauri Peltonen, Leo Arias, Leonardo Alt, Mathias Baumann, Micah Zoltu, mingchuan, rocky (supported by ConsenSys), Solexplorer, 

If you want to perform a source build, please only use solidity_0.5.12.tar.gz and not the zip provided by github directly.",40892817
129,False,False,2019-08-12T19:44:45Z,2019-08-12T21:41:55Z,"This release fixes a bug related to calldata structs in ABIEncoderV2 and calldata decoding in V1. Several internal bugs of the SMT checker are fixed.
Furthermore, internal types are added to the ABI output which allows you to see which struct type is behind an ABI tuple. Finally, Yul and web assembly support are progressing.

We also improved our testing framework which now allows for semantics tests to run in 4 seconds instead of 1 minute.

**Language Features:**
 * Inline Assembly: Support direct constants of value type in inline assembly.

**Compiler Features:**
 * ABI: Additional internal type info in the field ``internalType``.
 * eWasm: Highly experimental eWasm output using ``--ewasm`` in the commandline interface or output selection of ``ewasm.wast`` in standard-json.
 * Metadata: Update the swarm hash to the current specification, changes ``bzzr0`` to ``bzzr1`` and urls to use ``bzz-raw://``.
 * Standard JSON Interface: Compile only selected sources and contracts.
 * Standard JSON Interface: Provide secondary error locations (e.g. the source position of other conflicting declarations).
 * SMTChecker: Do not erase knowledge about storage pointers if another storage pointer is assigned.
 * SMTChecker: Support string literal type.
 * Standard JSON Interface: Provide AST even on errors if ``--error-recovery`` commandline switch or StandardCompiler `settings.parserErrorRecovery` is true.
 * Yul Optimizer: Do not inline function if it would result in expressions being duplicated that are not cheap.

**Bugfixes:**
 * ABI decoder: Ensure that decoded arrays always point to distinct memory locations.
 * Code Generator: Treat dynamically encoded but statically sized arrays and structs in calldata properly.
 * SMTChecker: Fix internal error when inlining functions that contain tuple expressions.
 * SMTChecker: Fix pointer knowledge erasing in loops.
 * SMTChecker: Fix internal error when using compound bitwise assignment operators inside branches.
 * SMTChecker: Fix internal error when inlining a function that returns a tuple containing an unsupported type inside a branch.
 * SMTChecker: Fix internal error when inlining functions that use state variables and belong to a different source.
 * SMTChecker: Fix internal error when reporting counterexamples concerning state variables from different source files.
 * SMTChecker: Fix SMT sort mismatch when using string literals.
 * View/Pure Checker: Properly detect state variable access through base class.
 * Yul Analyzer: Check availability of data objects already in analysis phase.
 * Yul Optimizer: Fix an issue where memory-accessing code was removed even though ``msize`` was used in the program.


We especially thank all the contributors that made this release possible:

Alex Beregszaszi, Bhargava Shastry, cgrigis, Chris Chinchilla, Chris Smith, Christian Parpart, Daniel Kirchner, djudjuu, dm4, Erik Kundt, Leonardo Alt, Mathias Baumann, mingchuan, Nimish Bongale, Rocky Bernstein (supported by ConsenSys), William Entriken.

If you want to perform a source build, please only use solidity_0.5.11.tar.gz and not the zip provided by github directly.",40892817
130,False,False,2019-06-25T14:03:50Z,2019-06-25T14:45:15Z,"Apart from further invisible work on the Yul optimizer, the Solidity to Yul code generation, the eWasm backend and the SMT checker, this release contains two important bug fixes related to storage arrays.

For details see https://blog.ethereum.org/2019/06/25/solidity-storage-array-bugs/

It also contains an experimental mode that allows recovery from parser error (implemented by @rocky, funded by ConsenSys) in the hope that this might be useful for IDE developers.

**Important Bugfixes:**
 * ABIEncoderV2: Fix incorrect abi encoding of storage array of data type that occupy multiple storage slots
 * Code Generator: Properly zero out higher order bits in elements of an array of negative numbers when assigning to storage and converting the type at the same time.


**Compiler Features:**
 * Commandline Interface: Experimental parser error recovery via the ``--error-recovery`` commandline switch.
 * Optimizer: Add rule to simplify ``SUB(~0, X)`` to ``NOT(X)``.
 * Yul Optimizer: Make the optimizer work for all dialects of Yul including eWasm.


**Bugfixes:**
 * Type Checker: Set state mutability of the function type members ``gas`` and ``value`` to pure (while their return type inherits state mutability from the function type).
 * Yul / Inline Assembly Parser: Disallow trailing commas in function call arguments.


**Build System:**
 * Attempt to use stock Z3 cmake files to find Z3 and only fall back to manual discovery.
 * CMake: use imported targets for boost.
 * Emscripten build: upgrade to boost 1.70.
 * Generate a cmake error for gcc versions older than 5.0.


We especially thank all the contributors that made this release possible:

Alex Beregszaszi, Anurag Dashputre, Bhargava Shastry, Chris Ward, Christian Parpart, Daniel Kirchner, Fabio Bonfiglio, Leonardo Alt, Mathias Baumann, mingchuan, rocky, Vedant Agarwala, Vignesh Karthikeyan, William Entriken.

If you want to perform a source build, please only use solidity_0.5.10.tar.gz and not the zip provided by github directly.",40892817
131,False,False,2019-05-28T16:49:01Z,2019-05-28T18:25:35Z,"As in previous releases, we spent most of the time making Solidity future-proof by further working on the Yul optimizer, the Solidity to Yul (and eWasm) translator and the SMT Checker.

Code generated from Solidity now always includes the version number in the CBOR metadata so that it becomes possible to quickly assess whether a contract might be affected by a compiler bug or not.

**Language Features:**
 * Inline Assembly: Revert change introduced in 0.5.7: The ``callvalue()`` instruction does not require ``payable`` anymore.
 * Static Analyzer: Disallow libraries calling themselves externally.


**Compiler Features:**
 * Assembler: Encode the compiler version in the deployed bytecode.
 * Code Generator: Fix handling of structs of dynamic size as constructor parameters.
 * Inline Assembly: Disallow the combination of ``msize()`` and the Yul optimizer.
 * Metadata: Add IPFS hashes of source files.
 * Optimizer: Add rule to simplify SHL/SHR combinations.
 * Optimizer: Add rules for multiplication and division by left-shifted one.
 * SMTChecker: Support inherited state variables.
 * SMTChecker: Support tuples and function calls with multiple return values.
 * SMTChecker: Support ``delete``.
 * SMTChecker: Inline external function calls to ``this``.
 * Yul Optimizer: Simplify single-run ``for`` loops to ``if`` statements.
 * Yul Optimizer: Optimize representation of numbers.
 * Yul Optimizer: Do not inline recursive functions.
 * Yul Optimizer: Do not remove instructions that affect ``msize()`` if ``msize()`` is used.

**Bugfixes:**
 * Code Generator: Explicitly turn uninitialized internal function pointers into invalid functions when loaded from storage.
 * Code Generator: Fix assertion failure when assigning structs containing array of mapping.
 * Compiler Internals: Reset the Yul string repository before each compilation, freeing up memory.
 * SMTChecker: Fix bad cast in base constructor modifier.
 * SMTChecker: Fix internal error when visiting state variable inherited from base class.
 * SMTChecker: Fix internal error in fixed point operations.
 * SMTChecker: Fix internal error in assignment to unsupported type.
 * SMTChecker: Fix internal error in branching when inlining function calls that modify local variables.


We especially thank all the contributors that made this release possible:

Alex Beregszaszi, Andrey Bronin, asymmetric, Bhargava Shastry, Christian Parpart, Chris Ward, Daniel Kirchner, Erik Kundt, Guy Lando, Isaac Ibiapina, Jorropo, Leonardo Alt, Mathias Baumann, mingchuan, Rocky, Vedant Agarwala.


If you want to perform a source build, please only use solidity_0.5.9.tar.gz and not the zip provided by github directly.",40892817
132,False,False,2019-04-30T13:10:18Z,2019-04-30T14:49:46Z,"This release fixes important but very unlikely bugs and further completes ABIEncoderV2, SMTChecker and Yul and improves the optimizer.

Notably, if ABIEncoderV2 is activated, the ABI decoder will now revert on input with dirty higher order bits instead of ignoring those bits.


**Important Bugfixes:**
 * Code Generator: Fix initialization routine of uninitialized internal function pointers in constructor context.
 * Type System: Use correct type name for contracts in event parameters when used in libraries. This affected code generation.
 * Yul Optimizer: Fix SSA transform for multi-assignments.


**Language Features:**
 * ABIEncoderV2: Implement encoding of calldata arrays and structs.
 * Code Generation: Implement copying recursive structs from storage to memory.
 * Yul: Disallow function definitions inside for-loop init blocks.


**Compiler Features:**
 * ABI Decoder: Raise a runtime error on dirty inputs when using the experimental decoder.
 * Optimizer: Add rule for shifts by constants larger than 255 for Constantinople.
 * Optimizer: Add rule to simplify certain ANDs and SHL combinations
 * SMTChecker: Support arithmetic compound assignment operators.
 * SMTChecker: Support unary increment and decrement for array and mapping access.
 * SMTChecker: Show unsupported warning for inline assembly blocks.
 * SMTChecker: Support mod.
 * SMTChecker: Support ``contract`` type.
 * SMTChecker: Support ``this`` as address.
 * SMTChecker: Support address members.
 * Standard JSON Interface: Metadata settings now re-produce the original ``""useLiteralContent""`` setting from the compilation input.
 * Yul: Adds break and continue keywords to for-loop syntax.
 * Yul: Support ``.`` as part of identifiers.
 * Yul Optimizer: Adds steps for detecting and removing of dead code.


**Bugfixes:**
 * SMTChecker: Implement Boolean short-circuiting.
 * SMTChecker: SSA control-flow did not take into account state variables that were modified inside inlined functions that were called inside branches.
 * Type System: Allow direct call to base class functions that have overloads.
 * Yul: Properly register functions and disallow shadowing between function variables and variables in the outside scope.


**Build System:**
 * Soltest: Add commandline option `--test` / `-t` to isoltest which takes a string that allows filtering unit tests.
 * soltest.sh: allow environment variable ``SOLIDITY_BUILD_DIR`` to specify build folder and add ``--help`` usage.

We especially thank all the contributors that made this release possible:

Alex Beregszaszi, Bhargava Shastry, Christian Parpart, Chris Ward, Constantin Kloecker, Daniel Kirchner, dm4, Erik Kundt, fnatic, Grant Wuerker, hydai, Ilya Ostrovskiy, Leonardo Alt, Mathias Baumann, mingchuan, rocky, William Entriken

If you want to perform a source build, please only use solidity_0.5.8.tar.gz and not the zip provided by github directly.",40892817
133,False,False,2019-04-29T14:28:45Z,2019-04-29T14:52:24Z,"This is a bugfix release for the 0.4.x series that contains backported fixes for important bugs that affected code generation. It also contains a fix that makes the emscripten target compatible with newer browser versions.

Important Bugfixes:
 * Code Generator: Fix initialization routine of uninitialized internal function pointers in constructor context.
 * Type System: Use correct type name for contracts in event parameters when used in libraries. This affected code generation.

Bugfixes:
 * ABIEncoderV2: Refuse to generate code that is known to be potentially buggy.
 * General: Split rule list such that JavaScript environments with small stacks can use the compiler.

If you want to perform a source build, please only use solidity_0.4.26.tar.gz and not the zip provided by github directly.",40892817
134,False,False,2019-03-26T12:19:56Z,2019-03-26T12:59:32Z,"This release mainly fixes bugs in the optimizer and in the experimental ABI encoder. For details about the bug, please see the [official announcement](https://blog.ethereum.org/2019/03/26/solidity-optimizer-and-abiencoderv2-bug/).

Furthermore, this release also allows you to use Yul as a language option (instead of ""Solidity"") in the [standard-json-interface](https://solidity.readthedocs.io/en/v0.5.7/using-the-compiler.html#compiler-input-and-output-json-description).

**Important Bugfixes:**
 * ABIEncoderV2: Fix bugs related to loading short value types from storage when encoding an array or struct from storage.
 * ABIEncoderV2: Fix buffer overflow problem when encoding packed array from storage.
 * Optimizer: Fix wrong ordering of arguments in byte optimization rule for constants.


**Language Features:**
 * Function calls with named arguments now work with overloaded functions.


**Compiler Features:**
 * Inline Assembly: Issue error when using ``callvalue()`` inside nonpayable function (in the same way that ``msg.value`` already does).
 * Standard JSON Interface: Support ""Yul"" as input language.
 * SMTChecker: Show callstack together with model if applicable.
 * SMTChecker: Support modifiers.
 * Yul Optimizer: Enable stack allocation optimization by default if Yul optimizer is active (disable in ``yulDetails``).


**Bugfixes:**
 * Code Generator: Defensively pad memory for ``type(Contract).name`` to multiples of 32.
 * Type System: Detect and disallow internal function pointers as parameters for public/external library functions, even when they are nested/wrapped in structs, arrays or other types.
 * Yul Optimizer: Properly determine whether a variable can be eliminated during stack compression pass.
 * Yul / Inline Assembly Parser: Disallow more than one case statement with the same label inside a switch based on the label's integer value.


**Build System:**
 * Install scripts: Fix boost repository URL for CentOS 6.
 * Soltest: Fix hex string update in soltest.


We especially thank all the contributors that made this release possible:

Alex Beregszaszi, Bhargava Shastry, Christian Parpart, Chris Ward, Constantin Kloecker, Daniel Kirchner, Erik Kundt, Leonardo Alt, Mathias Baumann, SystemGlitch, Taariq Levack

If you want to perform a source build, please only use solidity_0.5.7.tar.gz and not the zip provided by github directly.",40892817
135,False,False,2019-03-13T16:49:55Z,2019-03-13T16:51:47Z,"This release mainly fixes an optimizer bug related to multiple shift opcodes that was introduced in the previous release. It is unlikely that any existing contracts are affected, but you should still not use Solidity 0.5.5.

Apart from that, the support for calldata structs and arrays by ABIEncoderV2 is almost finished now, we added some more optimizer rules and added enums and one-dimensional arrays to the SMT checker.

**Important Bugfixes:**
 * Yul Optimizer: Fix visitation order bug for the structural simplifier.
 * Optimizer: Fix overflow in optimization rule that simplifies double shift by constant.

**Language Features:**
 * Allow calldata arrays with dynamically encoded base types with ABIEncoderV2.
 * Allow dynamically encoded calldata structs with ABIEncoderV2.


**Compiler Features:**
 * Optimizer: Add rules for ``lt``-comparisons with constants.
 * Peephole Optimizer: Remove double ``iszero`` before ``jumpi``.
 * SMTChecker: Support enums without typecast.
 * SMTChecker: Support one-dimensional arrays.
 * Type Checker: Provide better error messages for some literal conversions.
 * Yul Optimizer: Add rule to remove empty default switch cases.
 * Yul Optimizer: Add rule to remove empty cases if no default exists.
 * Yul Optimizer: Add rule to replace a switch with no cases with ``pop(expression)``.


**Bugfixes:**
 * JSON ABI: Json description of library ABIs no longer contains functions with internal types like storage structs.
 * SMTChecker: Fix internal compiler error when contract contains too large rational number.
 * Type system: Detect if a contract's base uses types that require the experimental abi encoder while the contract still uses the old encoder.


**Build System:**
 * Soltest: Add support for arrays in function signatures.
 * Soltest: Add support for struct arrays in function signatures.

If you want to perform a source build, please only use solidity_0.5.6.tar.gz and not the zip provided by github directly.
",40892817
136,False,False,2019-03-05T15:22:00Z,2019-03-05T15:53:53Z,"This release focuses on the stabilization of the ABIEncoderV2 and the optimizer. We also prepared for the Petersburg release which is the default EVM now and improved the SMT checker, such that it now reports less false positives when using ``SafeMath``.
You can now activate the experimental Yul optimizer using `settings: {optimizer: {enabled: true, details: {yul: true}}}` or in the commandline via `solc --optimize-yul`.

**Language Features:**

 * Add support for getters of mappings with ``string`` or ``bytes`` key types.
 * Meta programming: Provide access to the name of contracts via ``type(C).name``.

**Compiler Features:**

 * Support ``petersburg`` as ``evmVersion`` and set as default.
 * Commandline Interface: Option to activate the experimental yul optimizer using ``-optimize-yul``.
 * Inline Assembly: Consider ``extcodehash`` as part of Constantinople.
 * Inline Assembly: Instructions unavailable to the currently configured EVM are errors now.
 * SMTChecker: Do not report underflow/overflow if they always revert. This removes false positives when using ``SafeMath``.
 * Standard JSON Interface: Allow retrieving metadata without triggering bytecode generation.
 * Standard JSON Interface: Provide fine-grained control over the optimizer via the settings.
 * Static Analyzer: Warn about expressions with custom types when they have no effect.
 * Optimizer: Add new rules with constants including ``LT``, ``GT``, ``AND`` and ``BYTE``.
 * Optimizer: Add rule for shifts with constants for Constantinople.
 * Optimizer: Combine multiple shifts with constant shift-by values into one.
 * Optimizer: Do not mask with 160-bits after ``CREATE`` and ``CREATE2`` as they are guaranteed to return an address or 0.
 * Optimizer: Support shifts in the constant optimiser for Constantinople.
 * Yul Optimizer: Add rule to replace switch statements with literals by matching case body.

**Bugfixes:**

 * ABIEncoderV2: Fix internal error related to bare delegatecall.
 * ABIEncoderV2: Fix internal error related to ecrecover.
 * ABIEncoderV2: Fix internal error related to mappings as library parameters.
 * ABIEncoderV2: Fix invalid signature for events containing structs emitted in libraries.
 * Inline Assembly: Proper error message for missing variables.
 * Optimizer: Fix internal error related to unused tag removal across assemblies. This never generated any invalid code.
 * SMTChecker: Fix crash related to statically-sized arrays.
 * TypeChecker: Fix internal error and disallow index access on contracts and libraries.
 * Yul: Properly detect name clashes with functions before their declaration.
 * Yul: Take built-in functions into account in the compilability checker.
 * Yul Optimizer: Properly take reassignments to variables in sub-expressions into account when replacing in the ExpressionSimplifier.

**Build System:**

 * Soltest: Add support for left-aligned, padded hex literals.
 * Soltest: Add support for right-aligned, padded boolean literals.

We especially thank all the contributors that made this release possible:

Alex Beregszaszi, Bhargava Shastry, Christian Parpart, Chris Ward, Daniel Kirchner, David Terry, Erik Kundt, Leo Arias, Leonardo Alt, Mathias Baumann

If you want to perform a source build, please only use solidity_0.5.5.tar.gz and not the zip provided by github directly.
",40892817
137,False,False,2019-02-12T13:20:45Z,2019-02-12T13:52:07Z,"This release adds support for calldata structs and packed encoding with ABIEncoderV2. We also introduced some changes to the C API and added support for continuous fuzzing via Google oss-fuzz. In addition to that, we added a new commandline option for improved (colorized) diagnostics formatting.

**Language Features:**
 * Allow calldata structs without dynamically encoded members with ABIEncoderV2.


**Compiler Features:**
 * ABIEncoderV2: Implement packed encoding.
 * C API (``libsolc`` / raw ``soljson.js``): Introduce ``solidity_free`` method which releases all internal buffers to save memory.
 * Commandline Interface: Adds new option ``--new-reporter`` for improved diagnostics formatting
   along with ``--color`` and ``--no-color`` for colorized output to be forced (or explicitly disabled).


**Bugfixes:**
 * Code Generator: Defensively pad allocation of creationCode and runtimeCode to multiples of 32 bytes.
 * Commandline Interface: Allow yul optimizer only for strict assembly.
 * Parser: Disallow empty import statements.
 * Type Checker: Disallow mappings with data locations other than ``storage``.
 * Type Checker: Fix internal error when a struct array index does not fit into a uint256.
 * Type System: Properly report packed encoded size for arrays and structs (mostly unused until now).


**Build System:**
 * Add support for continuous fuzzing via Google oss-fuzz
 * SMT: If using Z3, require version 4.6.0 or newer.
 * Soltest: Add parser that is used in the file-based unit test environment.
 * Ubuntu PPA Packages: Use CVC4 as SMT solver instead of Z3

We especially thank all the contributors that made this release possible:

Alex Beregszaszi, Bhargava Shastry, Christian Reitwiessner, Christian Parpart, Chris Ward, Daniel Kirchner, Erik Kundt, Leo Arias, Leonardo Alt, Mathias Baumann, Mudit Gupta, Shelly Grossman

",40892817
138,False,False,2019-01-22T12:49:41Z,2019-01-22T14:40:55Z,"This release adds support for accessing the code of a contract type, which will hopefully make the new `CREATE2` opcode easier to use. We also added some static analysis features to the compiler, but most changes were done ""under the hood"" to pave the way for using the new Yul-based optimizer with ABIEncoderV2.

**Language Features:**
 * Provide access to creation and runtime code of contracts via ``type(C).creationCode`` / ``type(C).runtimeCode``.


**Compiler Features:**
 * Control Flow Graph: Warn about unreachable code.
 * SMTChecker: Support basic typecasts without truncation.
 * SMTChecker: Support external function calls and erase all knowledge regarding storage variables and references.


**Bugfixes:**
 * Emscripten: Split simplification rule initialization up further to work around issues with soljson.js in some browsers.
 * Type Checker: Disallow calldata structs until implemented.
 * Type Checker: Return type error if fixed point encoding is attempted instead of throwing ``UnimplementedFeatureError``.
 * Yul: Check that arguments to ``dataoffset`` and ``datasize`` are literals at parse time and properly take this into account in the optimizer.
 * Yul: Parse number literals for detecting duplicate switch cases.
 * Yul: Require switch cases to have the same type.


**Build System:**
 * Emscripten: Upgrade to emscripten 1.38.8 on travis and circleci.

If you want to perform a source build, please only use solidity_0.5.3.tar.gz and not the zip provided by github directly.

We especially thank all the contributors that made this release possible:

Alex Beregszaszi, androlo, Asher, chandan kumar mandal, Christian Parpart, Chris Ward, Daniel Kirchner, Erik Kundt, Evan Saulpaugh, Leonardo Alt, Nick Barry, Paweł Bylica, poiresel, spmvg, Tomek Kopczynski, William Entriken
",40892817
139,False,False,2018-12-19T17:06:13Z,2018-12-19T18:25:01Z,"This release of the Solidity compiler includes several performance optimizations. These include faster compilation time but also cheaper contracts in some situations. This version also checks for all instances of uninitialized storage references, has some improved error messages and other checks.

You can now create complete contracts in Yul through the support of the Yul object format and the special functions ``datasize``, ``dataoffset`` and ``datacopy``.

If you want to perform a source build, please only use solidity_0.5.2.tar.gz and not the zip provided by github directly.


**Language Features:**
 * Control Flow Graph: Detect every access to uninitialized storage pointers.


**Compiler Features:**
 * Inline Assembly: Improve error messages around invalid function argument count.
 * Code Generator: Only check callvalue once if all functions are non-payable.
 * Code Generator: Use codecopy for string constants more aggressively.
 * Code Generator: Use binary search for dispatch function if more efficient. The size/speed tradeoff can be tuned using ``--optimize-runs``.
 * SMTChecker: Support mathematical and cryptographic functions in an uninterpreted way.
 * SMTChecker: Support one-dimensional mappings.
 * Standard JSON Interface: Disallow unknown keys in standard JSON input.
 * Standard JSON Interface: Only run code generation if it has been requested. This could lead to unsupported feature errors only being reported at the point where you request bytecode.
 * Static Analyzer: Do not warn about unused variables or state mutability for functions with an empty body.
 * Type Checker: Add an additional reason to be displayed when type conversion fails.
 * Yul: Support object access via ``datasize``, ``dataoffset`` and ``datacopy`` in standalone assembly mode.


**Bugfixes:**
 * Standard JSON Interface: Report specific error message for json input errors instead of internal compiler error.


**Build System:**
 * Replace the trusty PPA build by a static build on cosmic that is used for the trusty package instead.
 * Remove support for Visual Studio 2015.


We especially thank all the contributors that made this release possible:

Albert, Alex Beregszaszi, Christian Parpart, Chris Ward, Daniel Kirchner, Erik Kundt, Kevin Kelley, Leonardo Alt, liangdzou, Lionello Lunesu, Mathias Baumann, Ricardo Guilherme Schmidt, Yi Huang, Zacharius
",40892817
140,False,False,2018-12-03T14:48:03Z,2018-12-03T15:32:38Z,"This release improves the usability of interfaces, fixes some bugs, extends the SMT checker and provides an early preview of the Yul optimizer.

If you want to perform a source build, please only use solidity_0.5.1.tar.gz and not the zip provided by github directly.

**Language Features:**
 * Allow mapping type for parameters and return variables of public and external library functions.
 * Allow public functions to override external functions.

**Compiler Features:**
 * Code generator: Do not perform redundant double cleanup on unsigned integers when loading from calldata.
 * Commandline interface: Experimental ``--optimize`` option for assembly mode (``--strict-assembly`` and ``--yul``).
 * SMTChecker: SMTLib2 queries and responses passed via standard JSON compiler interface.
 * SMTChecker: Support ``msg``, ``tx`` and ``block`` member variables.
 * SMTChecker: Support ``gasleft()`` and ``blockhash()`` functions.
 * SMTChecker: Support internal bound function calls.
 * Yul: Support Yul objects in ``--assemble``, ``--strict-assembly`` and ``--yul`` commandline options.

**Bugfixes:**
 * Assembly output: Do not mix in/out jump annotations with arguments.
 * Commandline interface: Fix crash when using ``--ast`` on empty runtime code.
 * Code Generator: Annotate jump from calldata decoder to function as ""jump in"".
 * Code Generator: Fix internal error related to state variables of function type access via base contract name.
 * Optimizer: Fix nondeterminism bug related to the boost version and constants representation. The bug only resulted in less optimal but still correct code because the generated routine is always verified to be correct.
 * Type Checker: Properly detect different return types when overriding an external interface function with a public contract function.
 * Type Checker: Disallow struct return types for getters of public state variables unless the new ABI encoder is active.
 * Type Checker: Fix internal compiler error when a field of a struct used as a parameter in a function type has a non-existent type.
 * Type Checker: Disallow functions ``sha3`` and ``suicide`` also without a function call.
 * Type Checker: Fix internal compiler error with ``super`` when base contract function is not implemented.
 * Type Checker: Fixed internal error when trying to create abstract contract in some cases.
 * Type Checker: Fixed internal error related to double declaration of events.
 * Type Checker: Disallow inline arrays of mapping type.
 * Type Checker: Consider abstract function to be implemented by public state variable.

**Build System:**
 * CMake: LLL is not built anymore by default. Must configure it with CMake as `-DLLL=ON`.
 * Docker: Includes both Scratch and Alpine images.
 * Emscripten: Upgrade to Emscripten SDK 1.37.21 and boost 1.67.

**Solc-Js:**
 * Fix handling of standard-json in the commandline executable.
 * Remove support of nodejs 4.

We especially thank all the contributors that made this release possible:

Albert, Alex Beregszaszi, Anurag Dashputre, Chris Purta, Christian Parpart, Chris Ward, Daniel Kirchner, David Lozano Jarque, Erik Kundt, hydai, Javier Tarazaga, Justin Wilson, Lazaridis, Leonardo Alt, liangdzou, mordax, Robert Chung, William Entriken, Yet another codejunkie
",40892817
141,False,False,2018-11-13T18:33:35Z,2018-11-13T19:36:55Z,"This is a major breaking release of the Solidity language and compiler that includes many new safety features. In general, programmers have to be more explicit, some weird edge-cases are removed from the language and the low-level compiler interface is much simpler.

This release was long overdue and as a result has amassed an incredibly long list of changes. Please refer to the [""Solidity v0.5.0 Breaking Changes”](https://solidity.readthedocs.io/en/latest/050-breaking-changes.html) section in the documentation about a good description of what has changed and how to update your code, or if you are courageous, check out the [changelog](https://github.com/ethereum/solidity/blob/v0.5.0/Changelog.md)!

If you want to perform a source build, please only use solidity_0.5.0.tar.gz and not the zip provided by github directly.




We especially thank all the contributors that made this release possible:

a4nkit, ajs, Alexander Arlt, Alex Beregszaszi, alibabe, Ankit Raj, Anurag Dashputre, Arindam Mondal, Asif Mallik, Augusto F. Hack, bakaoh, Balajiganapathi S, Berk Erol, Bhargava Shastry, Chase McDermott, Christian Parpart, Chris Ward, Crypto Jerônimo, Cryptomental, Daniel Kirchner, Daniel Kronovet, Dimitry, dm4, D-Nice, Dominik Harz, Dylan Wilson, Eitan Levin, Eric Ren, Erik Kundt, Evgeniy Filatov, f-daniel, Federico Bond, feliam, Flash Sheridan, Florian Antony, Franco Victorio, gftea, Guido Vranken, Harry Moreno, herrBez, hydai, Jared Wasinger, Jason Cobb, Jeffrey Anthony, Jesse Busman, João Vítor, Jordan Last, J Quinn, Julius Huelsmann, Kevin Azoulay, Khan M Rashedun-Naby, Kristofer Peterson, Lazaridis, Leanne, Lefteris Karapetsas, Leo Arias, Leonardo Alt, liangdzou, Li Xuanji, Luke Schoen, Martin Diz, Matías Aereal Aeón, Matías A. Ré Medina, Matthew Little, Matt Little, mestorlx, Michał Załęcki, Mike, mingchuan, mordax, Nicolás Venturo, Noel Maersk, Paweł Bylica, Pritam Roy, Richard Littauer, ritzdorf, Rytis Slatkevičius, Shadab Khan, Simon Chen, taitt, Tim Holland, Timofey Solonin, Tomasz Drwięga, Vutsal Singhal, wbt, William Entriken, William Morriss, wpank, xinbenlv",40892817
142,False,False,2018-09-13T16:38:41Z,2018-09-13T18:03:38Z,"This release fixed a cleanup error concerning the exponentiation operator. It is a bugfix-only release
and does not contain any features. A more detailed description of the bugs fixed can be found
on the [ethereum blog](https://blog.ethereum.org/2018/09/13/solidity-bugfix-release/).

Note that nightly builds of Solidity currently contain changes unrelated to this bugfix release.

If you want to perform a source build, please only use solidity_0.4.25.tar.gz and not the zip provided by github directly.

**Important Bugfixes:**
 * Code Generator: Properly perform cleanup for exponentiation and non-256 bit types.
 * Type Checker: Report error when using indexed structs in events with experimental ABIEncoderV2. This used to log wrong values.
 * Type Checker: Report error when using structs in events without experimental ABIEncoderV2. This used to crash or log the wrong values.
 * Parser: Consider all unicode line terminators (LF, VF, FF, CR, NEL, LS, PS) for single-line comments
   and string literals. They are invalid in strings and will end comments.
 * Parser: Disallow unterminated multi-line comments at the end of input.
 * Parser: Treat ``/** /`` as unterminated multi-line comment.


We especially thank all our open source community contributors:

mingchuan and Guido Vranken",40892817
143,False,False,2018-05-16T12:43:57Z,2018-05-16T14:09:50Z,"All remaining breaking changes planned for version 0.5.0 that can be implemented in a backwards-compatible way made it into this release. Solidity can now detect uninitialized storage pointers using control-flow analysis. It is again possible to assign multiple return values from a function to newly declared variables and the SMT checker is able to work with simple storage variables.

If you want to perform a source build, please only use solidity_0.4.24.tar.gz and not the zip provided by github directly.

**Language Features:**
 * Code Generator: Use native shift instructions on target Constantinople.
 * General: Allow multiple variables to be declared as part of a tuple assignment, e.g. ``(uint a, uint b) = ...``.
 * General: Remove deprecated ``constant`` as function state modifier from documentation and tests (but still leave it as a valid feature).
 * Type Checker: Deprecate the ``years`` unit denomination and raise a warning for it (or an error as experimental 0.5.0 feature).
 * Type Checker: Make literals (without explicit type casting) an error for tight packing as experimental 0.5.0 feature.
 * Type Checker: Warn about wildcard tuple assignments (this will turn into an error with version 0.5.0).
 * Type Checker: Warn when ``keccak256``, ``sha256`` and ``ripemd160`` are not used with a single bytes argument (suggest to use ``abi.encodePacked(...)``). This will turn into an error with version 0.5.0.

**Compiler Features:**
 * Build System: Update internal dependency of jsoncpp to 1.8.4, which introduces more strictness and reduces memory usage.
 * Control Flow Graph: Add Control Flow Graph as analysis structure.
 * Control Flow Graph: Warn about returning uninitialized storage pointers.
 * Gas Estimator: Only explore paths with higher gas costs. This reduces accuracy but greatly improves the speed of gas estimation.
 * Optimizer: Remove unnecessary masking of the result of known short instructions (``ADDRESS``, ``CALLER``, ``ORIGIN`` and ``COINBASE``).
 * Parser: Display nicer error messages by showing the actual tokens and not internal names.
 * Parser: Use the entire location of the token instead of only its starting position as source location for parser errors.
 * SMT Checker: Support state variables of integer and bool type.

**Bugfixes:**
 * Code Generator: Fix ``revert`` with reason coming from a state or local string variable.
 * Type Checker: Show proper error when trying to ``emit`` a non-event.
 * Type Checker: Warn about empty tuple components (this will turn into an error with version 0.5.0).
 * Type Checker: The ABI encoding functions are pure and thus can be used for constants.

We especially thank all our open source community contributors:

Alexander Arlt, Andreas Olofsson, Arun Kumar, daniel, David Sanders, GuessWho, Jason Cobb, Jonny Burger, Leo Arias, Luca Ban, Magicking, Matthew Ludwig, mingchuan, nisdas, njwest, Omar Boukli-Hacene, Rafiudeen Chozhan Kumarasamy, sledrho, Wenbin Wu
",40892817
144,False,False,2018-04-19T17:24:01Z,2018-04-19T21:18:27Z,"Bugfix release: In the previous release, it was possible to define two constructors (one using the new constructor-keyword syntax, another one with the old syntax) for a contract, but only one of them got used in the end. We also included other bugfixes.

If you want to perform a source build, please only use solidity_0.4.23.tar.gz and not the zip provided by github directly.

**Features:**
 * Build system: Support Ubuntu Bionic.
 * SMTChecker: Integration with CVC4 SMT solver
 * Syntax Checker: Warn about functions named ""constructor"".

**Bugfixes:**
 * Type Checker: Improve error message for failed function overload resolution.
 * Type Checker: Do not complain about new-style constructor and fallback function to have the same name.
 * Type Checker: Detect multiple constructor declarations in the new syntax and old syntax.
 * Type Checker: Explicit conversion of ``bytesXX`` to ``contract`` is properly disallowed.


We especially thank all our open source community contributors: Thomas Sauvajon",40892817
145,False,False,2018-04-16T21:03:49Z,2018-04-17T05:11:56Z,"This release features several major and long-awaited changes:

 - It is now possible to access dynamic data (arrays, strings, etc) returned by function calls.
 - You can specify error reason strings for ``revert`` and ``require`` (support by tooling is still pending).
 - We added the global functions ``abi.encode()``, ``abi.encodePacked()``, ``abi.encodeWithSelector()`` and ``abi.encodeWithSignature()`` which expose the ABI encoding functions and each return a ``bytes`` value.
 - Constructors should now be defined using ``constructor(uint arg1, uint arg2) { ... }`` to make them stand out and avoid bugs when contracts are renamed but not their constructors.
 - Some array operations got cheaper, especially the ``push`` function and initialization of memory arrays.

If you want to perform a source build, please only use solidity_0.4.22.tar.gz and not the zip provided by github directly.

**Features:**

 * Code Generator: Initialize arrays without using ``msize()``.
 * Code Generator: More specialized and thus optimized implementation for ``x.push(...)``
 * Commandline interface: Error when missing or inaccessible file detected. Suppress it with the ``--ignore-missing`` flag.
 * Constant Evaluator: Fix evaluation of single element tuples.
 * General: Add encoding routines ``abi.encodePacked``, ``abi.encode``, ``abi.encodeWithSelector`` and ``abi.encodeWithSignature``.
 * General: Add global function ``gasleft()`` and deprecate ``msg.gas``.
 * General: Add global function ``blockhash(uint)`` and deprecate ``block.hash(uint)``.
 * General: Allow providing reason string for ``revert()`` and ``require()``.
 * General: Allow and recommend new constructor syntax using the ``constructor`` keyword (generate error as experimental 0.5.0 feature).
 * General: Limit the number of errors output in a single run to 256.
 * General: Support accessing dynamic return data in post-byzantium EVMs.
 * Inheritance: Error when using empty parentheses for base class constructors that require arguments as experimental 0.5.0 feature.
 * Inheritance: Error when using no parentheses in modifier-style constructor calls as experimental 0.5.0 feature.
 * Interfaces: Allow overriding external functions in interfaces with public in an implementing contract.
 * Optimizer: Optimize ``SHL`` and ``SHR`` only involving constants (Constantinople only).
 * Optimizer: Remove useless ``SWAP1`` instruction preceding a commutative instruction (such as ``ADD``, ``MUL``, etc).
 * Optimizer: Replace comparison operators (``LT``, ``GT``, etc) with opposites if preceded by ``SWAP1``, e.g. ``SWAP1 LT`` is replaced with ``GT``.
 * Optimizer: Optimize across ``mload`` if ``msize()`` is not used.
 * Static Analyzer: Error on duplicated super constructor calls as experimental 0.5.0 feature.
 * Syntax Checker: Issue warning for empty structs (or error as experimental 0.5.0 feature).
 * Syntax Checker: Warn about modifiers on functions without implementation (this will turn into an error with version 0.5.0).
 * Syntax Tests: Add source locations to syntax test expectations.
 * Type Checker: Improve documentation and warnings for accessing contract members inherited from ``address``.


**Bugfixes:**

 * Code Generator: Allow ``block.blockhash`` without being called.
 * Code Generator: Do not include internal functions in the runtime bytecode which are only referenced in the constructor.
 * Code Generator: Properly skip unneeded storage array cleanup when not reducing length.
 * Code Generator: Bugfix in modifier lookup in libraries.
 * Code Generator: Implement packed encoding of external function types.
 * Code Generator: Treat empty base constructor argument list as not provided.
 * Code Generator: Properly force-clean bytesXX types for shortening conversions.
 * Commandline interface: Fix error messages for imported files that do not exist.
 * Commandline interface: Support ``--evm-version constantinople`` properly.
 * DocString Parser: Fix error message for empty descriptions.
 * Gas Estimator: Correctly ignore costs of fallback function for other functions.
 * JSON AST: Remove storage qualifier for type name strings.
 * Parser: Fix internal compiler error when parsing ``var`` declaration without identifier.
 * Parser: Fix parsing of getters for function type variables.
 * Standard JSON: Support ``constantinople`` as ``evmVersion`` properly.
 * Static Analyzer: Fix non-deterministic order of unused variable warnings.
 * Static Analyzer: Invalid arithmetic with constant expressions causes errors.
 * Type Checker: Fix detection of recursive structs.
 * Type Checker: Fix asymmetry bug when comparing with literal numbers.
 * Type System: Improve error message when attempting to shift by a fractional amount.
 * Type System: Make external library functions accessible.
 * Type System: Prevent encoding of weird types.
 * Type System: Restrict rational numbers to 4096 bits.

We especially thank all our open source community contributors:

Sergiusz Bazanski, Federico Bond, Anthony Broad-Crawford, Jason Cobb, dongsamb, Robbie Ferguson, Kevin Florenzano, Grzegorz Hasse, hydai, Lefteris Karapetsas, kevinflo, NetX, Daniel R, Matías A. Ré Medina, Roman, Yosyp Schwab, wbt, Li Xuanji, Haoliang Yu",40892817
146,False,False,2018-03-07T19:20:57Z,2018-03-08T06:45:05Z,"We again introduced several changes that are scheduled for version 0.5.0 and can be activated using `pragma experimental ""v0.5.0"";`. In this release, this pragma does not generate a warning anymore, so you can (and should) use it in production code.

In addition to that, you can now specify which EVM version the contract should be compiled for. Valid values are ""homestead"", ""tangerineWhistle"", ""spuriousDragon"", ""byzantium"" (the default) and ""constantinople"". Depending on this setting, different opcodes will be used in some cases. The only place where this is currently used by default is that all gas is forwarded with calls starting from ""tangerineWhistle"" (in homestead, some gas has to be retained for the ``call`` opcode itself). Also, the gas estimator reports different costs for the opcodes depending on the version and thus the optimizer might generate different code.

The new ""0.5.0"" features are explained in more detail below the list of features and bugfixes.

If you want to perform a source build, please only use solidity_0.4.21.tar.gz and not the zip provided by github directly.


**Features:**

 * Code Generator: Assert that ``k != 0`` for ``mulmod(a, b, k)`` and ``addmod(a, b, k)`` as experimental 0.5.0 feature.
 * Code Generator: Do not retain any gas in calls (except if EVM version is set to homestead).
 * Code Generator: Use ``STATICCALL`` opcode for calling ``view`` and ``pure`` functions as experimenal 0.5.0 feature.
 * General: C99/C++-style scoping rules (instead of JavaScript function scoping) take effect as experimental v0.5.0 feature.
 * General: Improved messaging when error spans multiple lines of a sourcefile
 * General: Support and recommend using ``emit EventName();`` to call events explicitly.
 * Inline Assembly: Enforce strict mode as experimental 0.5.0 feature.
 * Interface: Provide ability to select target EVM version (homestead or byzantium, with byzantium being the default).
 * Standard JSON: Reject badly formatted invalid JSON inputs.
 * Type Checker: Disallow uninitialized storage pointers as experimental 0.5.0 feature.
 * Syntax Analyser: Do not warn about experimental features if they do not concern code generation.
 * Syntax Analyser: Do not warn about ``pragma experimental ""v0.5.0""`` and do not set the experimental flag in the bytecode for this.
 * Syntax Checker: Mark ``throw`` as an error as experimental 0.5.0 feature.
 * Syntax Checker: Issue error if no visibility is specified on contract functions as experimental 0.5.0 feature.
 * Syntax Checker: Issue warning when using overloads of ``address`` on contract instances.
 * Type Checker: disallow combining hex numbers and unit denominations as experimental 0.5.0 feature.

**Bugfixes:**

 * Assembly: Raise error on oversized number literals in assembly.
 * JSON-AST: Add ""documentation"" property to function, event and modifier definition.
 * Resolver: Properly determine shadowing for imports with aliases.
 * Standalone Assembly: Do not ignore input after closing brace of top level block.
 * Standard JSON: Catch errors properly when invalid ""sources"" are passed.
 * Standard JSON: Ensure that library addresses supplied are of correct length and hex prefixed.
 * Type Checker: Properly detect which array and struct types are unsupported by the old ABI encoder.
 * Type Checker: Properly warn when using ``_offset`` and ``_slot`` for constants in inline assembly.
 * Commandline interface: throw error if option is unknown

We especially thank all our open source community contributors:

Alexander Arlt, Dax Bondye, Emilio Almansi, Evgeny Medvedev, Federico Bond, Hongbin Zuo, Oleksii Matiiasevych, Raghav Dua, William Entriken, bernard peh, Aaron Colaço, Alexandre Bezroutchko, Anthony Broad-Crawford, DYLAN BECKWITH, Elena Dimitrova, Furkan Ayhan, Jordi Baylina, Li Xuanji, Zhen Zhang, ankit raj, janat08, mirgj, wbt.


**Details:**

 * Code Generator: Use ``STATICCALL`` opcode for calling ``view`` and ``pure`` functions as experimenal 0.5.0 feature.

This ensures that functions marked as ``view`` or ``pure`` (previously ``constant``) cannot modify the state. This is especially important if you call unknown code via a generic interface and you cannot be sure whether the function modifies the state or not. This way, ``view`` and ``pure`` functions cannot have reentrancy effects.

 * General: C99/C++-style scoping rules (instead of JavaScript function scoping) take effect as experimental v0.5.0 feature.

Variables are no longer valid in the whole function and even before they were declared as in JavaScript, but instead only in the ``{``/``}``-enclosed block where they are declared and only starting after their declaration. These are the rules also used by C++ or Java. There is a common exception where variables declared in the initializing part of the ``for`` header are also valid in the rest of the ``for`` loop construct which we also use in Solidity. Currently, the stack slot reserved for the variable still spans the whole function, but this is planned to be improved for the next release.

 * General: Support and recommend using ``emit EventName();`` to call events explicitly.

In order to make events stand out with regards to regular function calls, ``emit EventName()`` as opposed to just ``EventName()`` should now be used to ""call"" events.

 * Inline Assembly: Enforce strict mode as experimental 0.5.0 feature.

Strict mode disallows labels, jumps and opcodes that directly modify the stack. It is much safer than non-strict mode, since you do not have to keep track of the current state of the stack. Furthermore, it allows an optimizer stage (to be finished soon) to be created much more easily. Because of that, the optimizer will refuse to work on non-strict assembly.

 * Type Checker: Disallow uninitialized storage pointers as experimental 0.5.0 feature.

Storage pointers (e.g. ``StructType storage x;``) can lead to severe storage corruption if used without being assigned. In 0.5.0 it will be illegal to declare a storage pointer without directly initializing it.

 * Syntax Checker: Mark ``throw`` as an error as experimental 0.5.0 feature.

The ``throw`` keyword creates the impression that exceptions are a feature of Solidity, while in reality, it only supports state-reversion that can soon also include error data. Because of that, ``throw`` is deprecated.

 * Syntax Checker: Issue error if no visibility is specified on contract functions as experimental 0.5.0 feature.

Since there were bugs where people did not realize that the default visibility of functions is ``public``, specifying a visibility was made mandatory.

 * Syntax Checker: Issue warning when using overloads of ``address`` on contract instances.

Collisions between native members of the ``address`` type and user-defined members of contracts can easily deceive users. Because of that, address members are no longer available in contracts. If you want to use an address member (``transfer`` is one of them!), then convert it to address: ``address(contractInstance).transfer(2 wei)``.

 * Type Checker: disallow combining hex numbers and unit denominations as experimental 0.5.0 feature.

We could not think of any situation where unit denominations like ``seconds`` or ``ether`` combined with hexadecimal literals would be meaningful (``0x1234 ether`` or ``0x20 minutes``) and thus deprecated this combination.",40892817
147,False,False,2018-02-14T04:00:41Z,2018-02-14T07:44:49Z,"This release includes some usability and security improvements and a further evolution of the SMT component. The ``var`` keyword has been deprecated for security reasons.

Significant steps were made in writing optimisation stages for the intermediate language, which will be used by the new ABI encoder to produce highly optimised output. The main goal is to have a resulting bytecode size similar to the old ABI encoder, while having more runtime checks for a stricter decoding process. This is not yet enabled in this release.

**Features:**
 * Code Generator: Prevent non-view functions in libraries from being called
   directly (as opposed to via delegatecall).
 * Commandline interface: Support strict mode of assembly (disallowing jumps,
   instructional opcodes, etc) with the ``--strict-assembly`` switch.
 * Inline Assembly: Issue warning for using jump labels (already existed for jump instructions).
 * Inline Assembly: Support some restricted tokens (return, byte, address) as identifiers in IULIA mode.
 * Optimiser: Replace ``x % 2**i`` by ``x & (2**i-1)``.
 * Resolver: Continue resolving references after the first error.
 * Resolver: Suggest alternative identifiers if a given identifier is not found.
 * SMT Checker: Take if-else branch conditions into account in the SMT encoding of the program
   variables.
 * Syntax Checker: Deprecate the ``var`` keyword (and mark it an error as experimental 0.5.0 feature).
 * Type Checker: Allow `this.f.selector` to be a pure expression.
 * Type Checker: Issue warning for using ``public`` visibility for interface functions.
 * Type Checker: Limit the number of warnings raised for creating abstract contracts.

**Bugfixes:**
 * Error Output: Truncate huge number literals in the middle to avoid output blow-up.
 * Parser: Disallow event declarations with no parameter list.
 * Standard JSON: Populate the ``sourceLocation`` field in the error list.
 * Standard JSON: Properly support contract and library file names containing a colon (such as URLs).
 * Type Checker: Suggest the experimental ABI encoder if using ``struct``s as function parameters
   (instead of an internal compiler error).
 * Type Checker: Improve error message for wrong struct initialization.


We especially thank all our open source community contributors:

Alexander Arlt, Balajiganapathi S, ChenQuan, Chuck LeDuc Díaz, Evgeny Medvedev, Ezra Epstein, Federico Bond, Gonçalo Sá, Jim McDonald, Jimmy Vogel, Kamuela Franco, Kevin Wu, Leonardo Alt, Li Xuanji, Manus, Matthew Halpern, Maurelian, Raghav Dua, Sawyer, Steve Waldman, William Entriken, YuShuangqi, Yuriy Kashnikov, Zhen Zhang, ZoOgY-DoOgY, chenquan, Elena Dimitrova, hyperfekt, mekkanik and wbt.


If you want to perform a source build, please only use solidity_0.4.20.tar.gz and not the zip provided by github directly.

",40892817
148,False,False,2017-11-30T15:08:09Z,2017-11-30T16:48:14Z,"In the last weeks, we have mainly been working on big internal changes. One of them is the new ABI decoder, which is still in experimental mode, but will hopefully be production-usable soon. External contributions like allowing constant variables for array lengths and improved error messages should make your life as a programmer easier. Finally, the standard-json-io-system now allows to select certain artifacts from a contract which should speed up your code-compile-test-cycle even more!

**Features:**
 * Code Generator: New ABI decoder which supports structs and arbitrarily nested
   arrays and checks input size (activate using ``pragma experimental ABIEncoderV2;``).
 * General: Allow constant variables to be used as array length.
 * Inline Assembly: ``if`` statement.
 * Standard JSON: Support the ``outputSelection`` field for selective compilation of target artifacts.
 * Syntax Checker: Turn the usage of ``callcode`` into an error as experimental 0.5.0 feature.
 * Type Checker: Improve address checksum warning.
 * Type Checker: More detailed errors for invalid array lengths (such as division by zero).

We especially thank all our open source community contributors:

Balajiganapathi S, Boris Kostenko, Christian Pamidov, Chua Chee Wee, Ezra Epstein, Federico Bond, Francisco Giordano, Guanqun Lu, Isaac van Bakel, Jared Wasinger, Kwang Yul Seo, Liana Husikyan, Sami Mäkel Svetlin Nakov, William Morriss, rivenhk, wadeAlexC, walter-weinmann and wbt.

If you want to perform a source build, please only use solidity_0.4.19.tar.gz and not the zip provided by github directly.

",40892817
149,False,False,2017-10-18T12:53:45Z,2017-10-18T13:39:27Z,"This release adds further backwards-incompatible security measures enabled via ``pragma experimental ""v0.5.0"";`` and contains another important feature: You can now select to compile only certain contracts using the ``outputSelection`` field of the [standard-json-io](https://solidity.readthedocs.io/en/develop/using-the-compiler.html#input-description) compiler interface, which should speed up tools like truffle tremendously.

There are also two important bug fixes: One was an oversight in the way `bytes` variables are allocated in memory and can reduce the memory requirements 32-fold. The second is a security fix: In extremely specific circumstances, it can happen that a regular function is called instead of the fallback function for an Ether transfer without data. These circumstances are: The function has to have a zero signature (one out of 4294967296), it has to be payable, the contract cannot have more than five (external) functions and it cannot have a fallback function.

**Features:**
 * Code Generator: Always use all available gas for calls as experimental 0.5.0 feature
   (previously, some amount was retained in order to work in pre-Tangerine-Whistle
   EVM versions)
 * Parser: Better error message for unexpected trailing comma in parameter lists.
 * Standard JSON: Support the ``outputSelection`` field for selective compilation of supplied sources.
 * Syntax Checker: Unary ``+`` is now a syntax error as experimental 0.5.0 feature.
 * Type Checker: Disallow non-pure constant state variables as experimental 0.5.0 feature.
 * Type Checker: Do not add members of ``address`` to contracts as experimental 0.5.0 feature.
 * Type Checker: Force interface functions to be external as experimental 0.5.0 feature.
 * Type Checker: Require ``storage`` or ``memory`` keyword for local variables as experimental 0.5.0 feature.

**Bugfixes:**
 * Code Generator: Allocate one byte per memory byte array element instead of 32.
 * Code Generator: Do not accept data with less than four bytes (truncated function
   signature) for regular function calls - fallback function is invoked instead.
 * Optimizer: Remove unused stack computation results.
 * Parser: Fix source location of VariableDeclarationStatement.
 * Type Checker: Allow ``gas`` in view functions.
 * Type Checker: Do not mark event parameters as shadowing state variables.
 * Type Checker: Prevent duplicate event declarations.
 * Type Checker: Properly check array length and don't rely on an assertion in code generation.
 * Type Checker: Properly support overwriting members inherited from ``address`` in a contract
   (such as ``balance``, ``transfer``, etc.)
 * Type Checker: Validate each number literal in tuple expressions even if they are not assigned from.

We especially thank all our open source community contributors:

benjaminion, bernard peh, Boris Kostenko, Dave Hoover, David Au, Federico Bond, Gianfranco Cecconi, Giovanni Casinelli, Ilya Drabenia, Martín Triay, Rhett Aultman, Sergiusz Bazanski, wadeAlexC, Walter Weinmann and Zetherz.

If you want to perform a source build, please only use solidity_0.4.18.tar.gz and not the zip provided by github directly.",40892817
150,False,False,2017-09-21T14:56:16Z,2017-09-21T15:40:43Z,"As we are getting closer to the next breaking release, we want to give everyone a heads up by introducing `pragma experimental ""v0.5.0""` which already enables some of the new safety features of the 0.5.0 release.

Furthermore, this release finally checks the modifiers ``view`` (used to be named ``constant``) and ``pure`` on functions. As a rule of thumb, use ``view`` if your function does not modify storage and ``pure`` if it does not even read any state information - but the compiler will also suggest the tightest restriction itself.

We also worked further on the new ABI encoder: Functions can now return structs. Switch it on using `pragma experimental ABIEncoderV2`. It should already work, but still generates more expensive code.

Finally, many new warnings were introduced and error messages improved.

**Features:**
 * Assembly Parser: Support multiple assignment (``x, y := f()``).
 * Code Generator: Keep a single copy of encoding functions when using the experimental ""ABIEncoderV2"".
 * Code Generator: Partial support for passing ``structs`` as arguments and return parameters (requires ``pragma experimental ABIEncoderV2;`` for now).
 * General: Support ``pragma experimental ""v0.5.0"";`` to activate upcoming breaking changes.
 * General: Added ``.selector`` member on external function types to retrieve their signature.
 * Optimizer: Add new optimization step to remove unused ``JUMPDEST``s.
 * Static Analyzer: Warn when using deprecated builtins ``sha3`` and ``suicide``
   (replaced by ``keccak256`` and ``selfdestruct``, introduced in 0.4.2 and 0.2.0, respectively).
 * Syntax Checker: Warn if no visibility is specified on contract functions.
 * Type Checker: Display helpful warning for unused function arguments/return parameters.
 * Type Checker: Do not show the same error multiple times for events.
 * Type Checker: Greatly reduce the number of duplicate errors shown for duplicate constructors and functions.
 * Type Checker: Warn on using literals as tight packing parameters in ``keccak256``, ``sha3``, ``sha256`` and ``ripemd160``.
 * Type Checker: Enforce ``view`` and ``pure``.
 * Type Checker: Enforce ``view`` / ``constant`` with error as experimental 0.5.0 feature.
 * Type Checker: Enforce fallback functions to be ``external`` as experimental 0.5.0 feature.

**Bugfixes:**
 * ABI JSON: Include all overloaded events.
 * Parser: Crash fix related to parseTypeName.
 * Type Checker: Allow constant byte arrays.


We especially thank all our open source community contributors:

Ali92hm, Aaron Colaço, Lefteris Karapetsas, Matthieu Caneill, Robert Edström and Suman

If you want to perform a source build, please only use solidity_0.4.17.tar.gz and not the zip provided by github directly.",40892817
151,False,False,2017-08-24T18:50:37Z,2017-08-24T20:31:12Z,"This release introduces several new features, some of which have to be
explicitly activated using `pragma experimental <feature name>;`.

We split the ``constant`` keyword for functions into ``pure`` (neither reads from nor writes to the state)
and ``view`` (does not modify the state). They are not enforced yet, but will most likely make use
of the the new STATIC_CALL feature after Metropolis.

Furthermore, the ABI encoder was re-implemented in a much cleaner way using our new intermediate language. It can encode arbitrarily nested arrays and will also be able to encode structs starting from the next release. Please try it out using `pragma experimental ABIEncoderV2;` and check if you have any issues with the encoder. It currently generates larger code than the old encoder, but we hope to fix that soon.

Finally, solc now include experimental support for automated overflow and assertion checking at compile-time using the SMT solver Z3. It is active if you use `pragma experimental SMTChecker;` and if solc was compiled with Z3 support. The latter is currently only the case for the PPA builds (or if you build from source and have libz3-dev in your system), but we also have a solution in the pipeline that will make it work for solc-js (and thus remix).

**Features:**
 * ABI JSON: Include new field ``stateMutability`` with values ``pure``, ``view``, ``nonpayable`` and ``payable``.
 * Analyzer: Experimental partial support for Z3 SMT checker (""SMTChecker"").
 * Build System: Shared libraries (``libdevcore``, ``libevmasm``, ``libsolidity`` and ``liblll``) are no longer produced during the build process.
 * Code generator: Experimental new implementation of ABI encoder that can encode arbitrarily nested arrays (""ABIEncoderV2"")
 * Metadata: Store experimental flag in metadata CBOR.
 * Parser: Display previous visibility specifier in error if multiple are found.
 * Parser: Introduce ``pure`` and ``view`` keyword for functions, ``constant`` remains an alias for ``view`` and pureness is not enforced yet, so use with care.
 * Static Analyzer: Warn about large storage structures.
 * Syntax Checker: Support ``pragma experimental <feature>;`` to turn on experimental features.
 * Type Checker: More detailed error message for invalid overrides.
 * Type Checker: Warn about shifting a literal.

**Bugfixes:**
 * Assembly Parser: Be more strict about number literals.
 * Assembly Parser: Limit maximum recursion depth.
 * Parser: Enforce commas between array and tuple elements.
 * Parser: Limit maximum recursion depth.
 * Type Checker: Crash fix related to ``using``.
 * Type Checker: Disallow constructors in libraries.
 * Type Checker: Reject the creation of interface contracts using the ``new`` statement.


We especially thank all our open source community contributors:

Chim Kan, Federico Bond, feliam, gubatron, Isaac Ibiapina, James Ray, Joshua Hannan, Lea Arias, Nick Savers, Stu West, Vladislav Ankudinov and Zhen Zhang

If you want to perform a source build, please only use solidity_0.4.16.tar.gz and not the zip provided by github directly.",40892817
152,False,False,2017-08-08T14:41:39Z,2017-08-08T17:02:57Z,"This is mainly a bugfix release that corrects a problem with the return value of the low-level ``delegatecall`` function and removes some invalid warning messages.

Features:
 * Type Checker: Show unimplemented function if trying to instantiate an abstract class.

Bugfixes:
 * Code Generator: ``.delegatecall()`` should always return execution outcome.
 * Code Generator: Provide ""new account gas"" for low-level ``callcode`` and ``delegatecall``.
 * Type Checker: Constructors must be implemented if declared.
 * Type Checker: Disallow the ``.gas()`` modifier on ``ecrecover``, ``sha256`` and ``ripemd160``.
 * Type Checker: Do not mark overloaded functions as shadowing other functions.
 * Type Checker: Internal library functions must be implemented if declared.

We especially thank all our open source community contributors:

Leo Arias, Adrián Calvo and SaadSurya

If you want to perform a source build, please only use solidity_0.4.15.tar.gz and not the zip provided by github directly.",40892817
153,False,False,2017-07-31T14:14:46Z,2017-07-31T14:55:14Z,"This release contains several new features and bugfixes and also an important security fix: The ``ecrecover`` function can be forced to return invalid data, which can be used to bypass authentication in very special circumstances.

Features:
 * C API (``jsonCompiler``): Export the ``license`` method.
 * Code Generator: Optimise the fallback function, by removing a useless jump.
 * Inline Assembly: Show useful error message if trying to access calldata variables.
 * Inline Assembly: Support variable declaration without initial value (defaults to 0).
 * Metadata: Only include files which were used to compile the given contract.
 * Type Checker: Disallow value transfers to contracts without a payable fallback function.
 * Type Checker: Include types in explicit conversion error message.
 * Type Checker: Raise proper error for arrays too large for ABI encoding.
 * Type checker: Warn if using ``this`` in a constructor.
 * Type checker: Warn when existing symbols, including builtins, are overwritten.

Bugfixes:
 * Code Generator: Properly clear return memory area for ecrecover.
 * Type Checker: Fix crash for some assignment to non-lvalue.
 * Type Checker: Fix invalid ""specify storage keyword"" warning for reference members of structs.
 * Type Checker: Mark modifiers as internal.
 * Type Checker: Re-allow multiple mentions of the same modifier per function.

We especially thank all our open source community contributors:

Antonio Tenerio-Fornés, benjaminion, Federico Bond, Harry Wright, hh3755, James Ray, Juaj Bednar, Luke Schoen, Loa Arias, maurelian, Nathan Hernandez, NIC619, Rhett Aultman, Skiral Inc and VoR0220.

If you want to perform a source build, please only use solidity_0.4.14.tar.gz and not the zip provided by github directly.",40892817
154,False,False,2017-07-06T10:45:11Z,2017-07-06T11:13:25Z,"This is a small bugfix release that fixes several trivial but very annoying bugs that were introduced with 0.4.12. We also deprecate some old features in preparation of the breaking release 0.5.0.

Features:
 * Syntax Checker: Deprecated ``throw`` in favour of ``require()``, ``assert()`` and ``revert()``.
 * Type Checker: Warn if a local storage reference variable does not explicitly use the keyword ``storage``.

Bugfixes:
 * Code Generator: Correctly unregister modifier variables.
 * Compiler Interface: Only output AST if analysis was successful.
 * Error Output: Do not omit the error type.

We especially thank all our open source community contributors:

Leo Arias and Patrick Walters.

If you want to perform a source build, please only use solidity_0.4.13.tar.gz and not the zip provided by github directly.",40892817
155,False,False,2017-07-03T16:45:11Z,2017-07-03T16:47:17Z,"This release introduces the AST export, solidifies inline assembly, introduces some more warnings and fixes several bugs.

Manual jumps in assembly are deprecated in favour of the structured constructs `switch`, `for` and function calls also to provide better portability in the future.

Features:
 * Assembly: Add ``CREATE2`` (EIP86), ``STATICCALL`` (EIP214), ``RETURNDATASIZE`` and ``RETURNDATACOPY`` (EIP211) instructions.
 * Assembly: Display auxiliary data in the assembly output.
 * Assembly: Renamed ``SHA3`` to ``KECCAK256``.
 * AST: export all attributes to JSON format.
 * C API (``jsonCompiler``): Use the Standard JSON I/O internally.
 * Code Generator: Added the Whiskers template system.
 * Inline Assembly: ``for`` and ``switch`` statements.
 * Inline Assembly: Function definitions and function calls.
 * Inline Assembly: Introduce ``keccak256`` as an opcode. ``sha3`` is still a valid alias.
 * Inline Assembly: Present proper error message when not supplying enough arguments to a functional
   instruction.
 * Inline Assembly: Warn when instructions shadow Solidity variables.
 * Inline Assembly: Warn when using ``jump``s.
 * Remove obsolete Why3 output.
 * Type Checker: Enforce strict UTF-8 validation.
 * Type Checker: Warn about copies in storage that might overwrite unexpectedly.
 * Type Checker: Warn about type inference from literal numbers.
 * Static Analyzer: Warn about deprecation of ``callcode``.

Bugfixes:
 * Assembly: mark ``MLOAD`` to have side effects in the optimiser.
 * Code Generator: Fix ABI encoding of empty literal string.
 * Code Generator: Fix negative stack size checks.
 * Code generator: Use ``REVERT`` instead of ``INVALID`` for generated input validation routines.
 * Inline Assembly: Enforce function arguments when parsing functional instructions.
 * Optimizer: Disallow optimizations involving ``MLOAD`` because it changes ``MSIZE``.
 * Static Analyzer: Unused variable warnings no longer issued for variables used inside inline assembly.
 * Type Checker: Fix address literals not being treated as compile-time constants.
 * Type Checker: Fixed crash concerning non-callable types.
 * Type Checker: Fixed segfault with constant function parameters
 * Type Checker: Disallow comparisons between mapping and non-internal function types.
 * Type Checker: Disallow invoking the same modifier multiple times.
 * Type Checker: Do not treat strings that look like addresses as addresses.
 * Type Checker: Support valid, but incorrectly rejected UTF-8 sequences.

We especially thank all our open source community contributors:

Alexey Alexeyeff, Andre Miras, Ben Che, benjaminion, Dillon Arevalo, Edward Ruchevits, Erik Quenon Steggall, ethers, Federico Bond, gregg dourgarian, James Ray, Jonathan Brown, Julius Faber, Lefteris Karapetsas, Marius Kjærstad, Micah Zoltu, Paul Stadig, RJ Catalano, Rhett Aultman, Ron Gross, seusher and Travis Jacobs.

If you want to perform a source build, please only use solidity_0.4.12.tar.gz and not the zip provided by github directly.",40892817
156,False,False,2017-05-03T12:36:32Z,2017-05-03T12:59:37Z,"This release fixes a bug in the optimizer (more about this on the [blog](https://blog.ethereum.org/2017/05/03/solidity-optimizer-bug/)), introduces the standard JSON interface, adds ``interface`` contracts and implements some additional safety checks.

The standard [JSON interface](https://solidity.readthedocs.io/en/develop/using-the-compiler.html#compiler-input-and-output-json-description) provides a unified way to invoke the Solidity compiler in order to ease cross-platform adoption and compilation verification.

**Features:**
 * Implement the Standard JSON Input / Output API
 * Support ``interface`` contracts.
 * C API (``jsonCompiler``): Add the ``compileStandard()`` method to process a Standard JSON I/O.
 * Commandline interface: Add the ``--standard-json`` parameter to process a Standard JSON I/O.
 * Commandline interface: Support ``--allow-paths`` to define trusted import paths. Note: the
   path(s) of the supplied source file(s) is always trusted.
 * Inline Assembly: Storage variable access using ``_slot`` and ``_offset`` suffixes.
 * Inline Assembly: Disallow blocks with unbalanced stack.
 * Static analyzer: Warn about statements without effects.
 * Static analyzer: Warn about unused local variables, parameters, and return parameters.
 * Syntax checker: issue deprecation warning for unary '+'

**Bugfixes:**
 * Assembly output: Implement missing AssemblyItem types.
 * Compiler interface: Fix a bug where source indexes could be inconsistent between Solidity compiled
   with different compilers (clang vs. gcc) or compiler settings. The bug was visible in AST
   and source mappings.
 * Gas Estimator: Reflect the most recent fee schedule.
 * Type system: Contract inheriting from base with unimplemented constructor should be abstract.
 * Optimizer: Number representation bug in the constant optimizer fixed.


We especially thank all our open source community contributors:

Abraham Sangha, AdrianClv, Andy Milenius, Chandan Kumar, Federico Bond, FedericoCapello, JohnAllen, Matt Searle, Matt Wisniewski, Morgan, Omkara and Rhett Aultman


If you want to perform a source build, please only use solidity_0.4.11.tar.gz and not the zip provided by github directly.

**Update**: the original release on 3rd of May contained the wrong version numbers (it included the pre-release tag). This has been rectified today, the 4th of May, and all the linked binaries have been updated.

The files should have the following SHA-256 hashes:
- `solc-static-linux`: `0a8d138ee245039e6f8312edc024ba3c4739cc3c013b47dc7fc9196a2e327fea`
- `solidity-windows.zip`: `4387ef9733643ed387e5975d2241e423bd8d79c54db90d07a70c62c8c3e1be77`
- `solidity_0.4.11.tar.gz`: `5a96a3ba4d0d6457ad8101d6219152610e46b384bfbd48244e3474573f7a6d47`
- `soljson.js`: `49fa27e6e70e08ddc7ba3790325e07c07902d9e855362d03fb908757ac14b4e5`",40892817
157,False,False,2017-03-15T17:07:52Z,2017-03-15T17:22:12Z,"This release is focused on stability and also introduces some new smart contract safety features: ``require``, ``assert`` and ``transfer``. Note that the new ``revert`` function will only be gas-efficient starting from homestead.

**Features:**
 * Add ``assert(condition)``, which throws if condition is false (meant for internal errors).
 * Add ``require(condition)``, which throws if condition is false (meant for invalid input).
 * Commandline interface: Do not overwrite files unless forced.
 * Introduce ``.transfer(value)`` for sending Ether.
 * Code generator: Support ``revert()`` to abort with rolling back, but not consuming all gas.
 * Inline assembly: Support ``revert`` (EIP140) as an opcode.
 * Parser: Support scientific notation in numbers (e.g. ``2e8`` and ``200e-2``).
 * Type system: Support explicit conversion of external function to address.
 * Type system: Warn if base of exponentiation is literal (result type might be unexpected).
 * Type system: Warn if constant state variables are not compile-time constants.

**Bugfixes:**
 * Commandline interface: Always escape filenames (replace ``/``, ``:`` and ``.`` with ``_``).
 * Commandline interface: Do not try creating paths ``.`` and ``..``.
 * Commandline interface: Allow long library names.
 * Parser: Disallow octal literals.
 * Type system: Fix a crash caused by continuing on fatal errors in the code.
 * Type system: Disallow compound assignment for tuples.
 * Type system: Detect cyclic dependencies between constants.
 * Type system: Disallow arrays with negative length.
 * Type system: Fix a crash related to invalid binary operators.
 * Type system: Disallow ``var`` declaration with empty tuple type.
 * Type system: Correctly convert function argument types to pointers for member functions.
 * Type system: Move privateness of constructor into AST itself.
 * Inline assembly: Charge one stack slot for non-value types during analysis.
 * Assembly output: Print source location before the operation it refers to instead of after.
 * Optimizer: Stop trying to optimize tricky constants after a while.

If you want to perform a source build, please only use solidity_0.4.10.tar.gz and not the zip provided by github directly.",40892817
158,False,False,2017-01-31T17:29:51Z,2017-01-31T18:33:43Z,"This release fixes quite some bugs and also adds several new features.

Things to look out for:
- To disambiguate contracts and libraries of the same name in different files, everything is now prefixed by ""filename:"". This applies to the compiler output, the linker input and other things.
- Internal exceptions are now thrown by using an invalid opcode (0xfe), manual exceptions still use an invalid jump.

Features:
- Compiler interface: Contracts and libraries can be referenced with a `file:` prefix to make them unique.
- Compiler interface: Report source location for ""stack too deep"" errors.
- AST: Use deterministic node identifiers.
- Inline assembly: introduce `invalid` (EIP141) as an opcode.
- Type system: Introduce type identifier strings.
- Type checker: Warn about invalid checksum for addresses and deduce type from valid ones.
- Metadata: Do not include platform in the version number.
- Metadata: Add option to store sources as literal content.
- Code generator: Extract array utils into low-level functions.
- Code generator: Internal errors (array out of bounds, etc.) now cause a reversion by using an invalid
  instruction (0xfe - EIP141) instead of an invalid jump. Invalid jump is still kept for explicit throws.

Bugfixes:
- Code generator: Allow recursive structs.
- Inline assembly: Disallow variables named like opcodes.
- Type checker: Allow multiple events of the same name (but with different arities or argument types)
- Natspec parser: Fix error with `@param` parsing and whitespace.
",40892817
159,False,False,2017-01-13T12:05:02Z,2017-01-13T12:40:58Z,"Features:
- Optimiser: Performance improvements.
- Output: Print assembly in new standardized Solidity assembly format.

Bugfixes:
- Remappings: Prefer longer context over longer prefix.
- Type checker, code generator: enable access to events of base contracts' names.
- Imports: `import "".dir/a""` is not a relative path.  Relative paths begin with directory `.` or `..`.
- Type checker: disallow inheritances of different kinds (e.g. a function and a modifier) of members of the same name

If you want to perform a source build, please only use solidity_0.4.8.tar.gz and not the zip provided by github directly.
",40892817
160,False,False,2016-12-15T11:16:56Z,2016-12-15T13:00:34Z,"Features:
- Bitshift operators.
- Type checker: Warn when `msg.value` is used in non-payable function.
- Code generator: Inject the Swarm hash of a metadata file into the bytecode.
- Code generator: Replace expensive memcpy precompile by simple assembly loop.
- Optimizer: Some dead code elimination.

Bugfixes:
- Code generator: throw if calling the identity precompile failed during memory (array) copying.
- Type checker: string literals that are not valid UTF-8 cannot be converted to string type
- Code generator: any non-zero value given as a boolean argument is now converted into 1.
- AST Json Converter: replace `VariableDefinitionStatement` nodes with `VariableDeclarationStatement`
- AST Json Converter: fix the camel case in `ElementaryTypeNameExpression`
- AST Json Converter: replace `public` field with `visibility` in the function definition nodes

Swarm hash of javascript binary: bzzr://de00cf8d235867a00d831e0055b376420789977d276c02e6ff0d1d5b00f5d84d
",40892817
161,False,False,2016-11-22T14:34:17Z,2016-11-22T14:35:16Z,"Bugfixes:
- Optimizer: Knowledge about state was not correctly cleared for JUMPDESTs

Swarm hash of js compiler: bzzr:/b873fa122233c91b1531527c390f6ca49df4d2a2c5f75706f4b612a0c813cb6a
",40892817
162,False,False,2016-11-21T10:42:38Z,2016-11-21T11:26:06Z,"This Solidity release adds [function types](https://solidity.readthedocs.io/en/develop/types.html#function-types). Use-cases include supplying callbacks for asynchronous or off-chain operations or generic library features (for example map-reduce-style programming). This release also improves the safety of enums and sending Ether to a contract constructor.

Features:
- Function types
- Do-while loops: support for a `do <block> while (<expr>);` control structure
- Inline assembly: support `invalidJumpLabel` as a jump label.
- Type checker: now more eagerly searches for a common type of an inline array with mixed types
- Code generator: generates a runtime error when an out-of-range value is converted into an enum type.

Bugfixes:
- Inline assembly: calculate stack height warning correctly even when local variables are used.
- Code generator: check for value transfer in non-payable constructors.
- Parser: disallow empty enum definitions.
- Type checker: disallow conversion between different enum types.
- Interface JSON: do not include trailing new line.

Swarm hash of js compiler: bzzr://de94c41f727124a5b02bd1db087e6bcba19a682c5d89bf3cdaa650e9fdd08403
",40892817
163,False,False,2016-10-31T18:21:04Z,2016-11-01T08:53:28Z,"This is a bugfix release that fixes a storage corruption that appears when multiple variables are stored in the same slot ([details](https://blog.ethereum.org/2016/11/01/security-alert-solidity-variables-can-overwritten-storage/)).

Bugfixes:
- Type checker: forbid signed exponential that led to an incorrect use of EXP opcode.
- Code generator: properly clean higher order bytes before storing in storage.
",40892817
164,False,False,2016-10-25T13:32:37Z,2016-10-25T13:53:29Z,"This is a real bugfix release as you can see from the changelog below. The most important fix concerns the optimizer which generated invalid code connected to the `SHA3` opcode in certain situations.

Features:
- Inline assembly: support both `suicide` and `selfdestruct` opcodes
  (note: `suicide` is deprecated).
- Inline assembly: issue warning if stack is not balanced after block.
- Include `keccak256()` as an alias to `sha3()`.
- Support shifting constant numbers.

Bugfixes:
- Commandline interface: Disallow unknown options in `solc`.
- Name resolver: Allow inheritance of `enum` definitions.
- Type checker: Proper type checking for bound functions.
- Type checker: fixed crash related to invalid fixed point constants
- Type checker: fixed crash related to invalid literal numbers.
- Type checker: `super.x` does not look up `x` in the current contract.
- Code generator: expect zero stack increase after `super` as an expression.
- Code generator: fix an internal compiler error for `L.Foo` for `enum Foo` defined in library `L`.
- Code generator: allow inheritance of `enum` definitions.
- Inline assembly: support the `address` opcode.
- Inline assembly: fix parsing of assignment after a label.
- Inline assembly: external variables of unsupported type (such as `this`, `super`, etc.)
  are properly detected as unusable.
- Inline assembly: support variables within modifiers.
- Optimizer: fix related to stale knowledge about SHA3 operations
",40892817
165,False,False,2016-09-17T13:25:54Z,2016-09-17T13:36:22Z,"Bugfixes:
- Code Generator: Fix library functions being called from payable functions.
- Type Checker: Fixed a crash about invalid array types.
- Code Generator: Fixed a call gas bug that became visible after
  version 0.4.0 for calls where the output is larger than the input.
",40892817
166,False,False,2016-09-09T10:23:50Z,2016-09-09T10:38:32Z,"This is a bugfix release that fixes an error when compiling libraries with the latest version 0.4.0.
",40892817
167,False,False,2016-09-08T12:38:10Z,2016-09-08T14:22:32Z,"**Note:** Version 0.4.0 is unable to compile libraries. Please upgrade to 0.4.1.

This release deliberately breaks backwards compatibility mostly to enforce some safety features. The most important change is that you have to explicitly specify if functions can receive ether via the `payable` modifier. Furthermore, more situations cause exceptions to be thrown.

Minimal changes to be made for upgrade:
- Add `payable` to all functions that want to receive Ether (including the constructor and the fallback function).
- Change `_` to `_;` in modifiers.
- Add version pragma to each file: `pragma solidity ^0.4.0;`

Breaking Changes:
- Source files have to specify the compiler version they are compatible with using e.g. `pragma solidity ^0.4.0;` or
  `pragma solidity >=0.4.0 <0.4.8;`
- Functions that want to receive Ether have to specify the
  new `payable` modifier (otherwise they throw).
- Contracts that want to receive Ether with a plain ""send""
  have to implement a fallback function with the `payable`
  modifier. Contracts now throw if no payable fallback
  function is defined and no function matches the signature.
- Failing contract creation through ""new"" throws.
- Division / modulus by zero throws.
- Function call throws if target contract does not have code
- Modifiers are required to contain `_` (use `if (false) _` as a workaround if needed).
- Modifiers: return does not skip part in modifier after `_`.
- Placeholder statement `_` in modifier now requires explicit `;`.
- `ecrecover` now returns zero if the input is malformed (it previously returned garbage).
- The `constant` keyword cannot be used for constructors or the fallback function.
- Removed `--interface` (Solidity interface) output option
- JSON AST: General cleanup, renamed many nodes to match their C++ names.
- JSON output: `srcmap-runtime` renamed to `srcmapRuntime`.
- Moved (and reworked) standard library contracts from inside the compiler to github.com/ethereum/solidity/std
  (`import ""std"";` or `import owned;` do not work anymore).
- Confusing and undocumented keyword `after` was removed.
- New reserved words: `abstract`, `hex`, `interface`, `payable`, `pure`, `static`, `view`.

Features:
- Hexadecimal string literals: `hex""ab1248fe""`
- Internal: Inline assembly usable by the code generator.
- Commandline interface: Using `-` as filename allows reading from stdin.
- Interface JSON: Fallback function is now part of the ABI.
- Interface: Version string now _semver_ compatible.
- Code generator: Do not provide ""new account gas"" if we know the called account exists.

Bugfixes:
- JSON AST: Nodes were added at wrong parent
- Why3 translator: Crash fix for exponentiation
- Commandline Interface: linking libraries with underscores in their name.
- Type Checker: Fallback function cannot return data anymore.
- Code Generator: Fix crash when `sha3()` was used on unsupported types.
- Code Generator: Manually set gas stipend for `.send(0)`.

Lots of changes to the documentation mainly by voluntary external contributors.
",40892817
168,False,False,2016-08-10T19:07:15Z,2016-08-10T19:09:12Z,"This is the first release from the new ""solidity-standalone"" repository. It does not have dependencies to cpp-ethereum anymore and can be built just from the solidity github repository.

Note that the optimizer was disabled in some situations which could lead to larger (but correcter) code.

Features:
- Formal verification: Take external effects on a contract into account.
- Type Checker: Warning about unused return value of low-level calls and send.
- Output: Source location and node id as part of AST output
- Output: Source location mappings for bytecode
- Output: Formal verification as part of json compiler output.

Bugfixes:
- Commandline Interface: Do not crash if input is taken from stdin.
- Scanner: Correctly support unicode escape codes in strings.
- JSON output: Fix error about relative / absolute source file names.
- JSON output: Fix error about invalid utf8 strings.
- Code Generator: Dynamic allocation of empty array caused infinite loop.
- Code Generator: Correctly calculate gas requirements for memcpy precompile.
- Optimizer: Clear known state if two code paths are joined.

Note regarding the PPA: This version of the solc package conflicts with the cpp-ethereum package (because that still contains solidity). Please uninstall cpp-ethereum before installing solc until we also have a new cpp-ethereum release.

The source below cannot be used without the dependent repositories.
",40892817
169,False,False,2016-06-10T16:00:49Z,2016-06-10T16:02:13Z,"**Features:**
- Context-dependent path remappings (different modules can use the same library in different versions)

**Bugfixes:**
- Type Checking: Dynamic return types were removed when fetching data from external calls, now they are replaced by an ""unusable"" type.
- Type Checking: Overrides by constructors were considered making a function non-abstract.

note: The source below cannot be used without the dependent repositories.
",40892817
170,False,False,2016-05-31T18:01:48Z,2016-05-31T21:23:23Z,"This release contains no changes outside of the documentation.

note: The source below cannot be used without the dependent repositories.
",40892817
171,False,False,2016-05-27T15:38:36Z,2016-05-27T17:02:12Z,"This release mainly makes libraries more flexible in that it allows internal functions to be called.

**Features**
- Allow internal library functions to be called (by ""inlining"")
- Fractional/rational constants (only usable with fixed point types, which are still in progress)
- Inline assembly has access to internal functions (as jump labels)
- Running `solc` without arguments on a terminal will print help.

**Fixes**
- Code Generation: Remove some non-determinism in code generation.
- Code Generation: Corrected usage of not / bnot / iszero in inline assembly
- Code Generation: Correctly clean bytesNN types before comparison

note: The source below cannot be used without the dependent repositories.
",40892817
172,False,False,2016-04-18T15:33:11Z,2016-04-18T17:34:41Z,"This is mainly a bugfix release. Under the hood, we are in the process of separating the Solidity source code from the rest of the cpp-ethereum source code so that it can soon be built (and released) in isolation.

**Fixes:**
- Code generation: Dynamic arrays of structs were not deleted correctly.
- Code generation: Static arrays in constructor parameter list were not decoded correctly.
- Parser: Inline assembly parser: `byte` opcode was unusable
- Error reporting: tokens for variably-sized types were not converted to string properly

note: The source below cannot be used without the dependent repositories.
",40892817
173,False,False,2016-03-31T16:47:56Z,2016-03-31T16:49:39Z,"This release mainly introduces inline assembly ([documentation](https://solidity.readthedocs.org/en/latest/control-structures.html#inline-assembly)). Inline assembly provides a way to write low-level but still well readable code. Together with the coming features of inline library functions and templates, it allows to move much of the development that had to be done in the compiler itself into libraries written in Solidity. In the future, it will be possible to introduce new versatile types that still look like builtins.

**Features:**
- inline assembly

**Fixes:**
- Code generation: array access with narrow types did not clean higher order bits
- Error reporting: error reporting with unknown source location caused a crash

note: The source below cannot be used without the dependent repositories.
",40892817
174,False,False,2016-03-11T16:53:33Z,2016-03-11T16:58:49Z,"This version is synchronized to the Homestead changes on the main Ethereum network and introduces various breaking changes.

BREAKING CHANGES:
- You should not rely on division for literals resulting in a (truncated) integer. This is still the case but will change once we implement fixed point types, i.e. in the future `1/2 == 0.5` will be true, currently we have `1/2 == 0`. Note that this only applies to literals (`(2 + 7) / 2`) and not variables (`x / 2`).
- Library calls now default to use DELEGATECALL (e.g. called library functions see the same value as the calling function for `msg.value` and `msg.sender`).
- Added new keywords `assembly`, `fixed`, `ufixed`, `fixedNxM`, `ufixedNxM` (for various values of M and N), `inline` in preparation for future features.

Features:
- `<address>.delegatecall` is provided as a low-level calling interface for DELEGATECALL

Bugfixes:
- Fixed a bug in the optimizer that resulted in comparisons being wrong.

note: The source below cannot be used without the dependent repositories.
",40892817
175,False,False,2016-02-17T16:33:20Z,2016-02-17T18:27:35Z,"Features:
- Index access for types `bytes1`, ..., `bytes32` (only read access for now).

Bugfixes:
- Type checker crash for wrong number of base constructor parameters.

note: The source below cannot be used without the dependent repositories.
",40892817
176,False,False,2016-01-30T15:40:13Z,2016-01-30T15:40:59Z,"This release includes three major features and one very important bugfix in the optimizer.

In some situations, the optimizer generated incorrect code. Please always test your code before you use it, unfortunately, we can never guarantee 100% correctness.

We are especially grateful about the many voluntary community contributions this release received.
Two fearless individuals dived deep into the solidity code and delivered two major features: Thanks a lot to @VoR0220 for the inline arrays and to @guanqun for the ternary operator!
Furthermore, @bobsummerwill spent a lot of free time handling build issues on MacOS and other platforms.
Other contributions came from @axic, @chfast, @ethers, @janx, @pipermerriam and @u2.

Features:
- **Inline arrays**, i.e. `var y = [1,x,f()];` if there is a common type for `1`, `x` and `f()`. Note that the result is always a fixed-length memory array and conversion to dynamic-length memory arrays is not yet possible.
- **Import** similar to ECMAScript6 import (`import ""abc.sol"" as d` and `import {x, y} from ""abc.sol""`). [Documentation](https://solidity.readthedocs.org/en/latest/layout-of-source-files.html#importing-other-source-files) 
- Commandline compiler solc automatically resolves missing imports and allows for ""include directories"". [Documentation](https://solidity.readthedocs.org/en/latest/layout-of-source-files.html#use-in-actual-compilers)
- **Conditional** / ternary operator: `x ? y : z`

Fixed bugs:
- Several bugs where the optimizer generated invalid code.
- Enums and structs were not accessible to other contracts.
- Fixed segfault connected to function paramater types, appeared during gas estimation.
- Type checker crash for wrong number of base constructor parameters.
- Allow function overloads with different array types.
- Allow assignments of type `(x) = 7`.
- Type `uint176` was not available.
- Fixed crash during type checking concerning constructor calls.
- Fixed crash during code generation concerning invalid accessors for struct types.
- Fixed crash during code generating concerning computing a hash of a struct type.

note: The source below cannot be used without the dependent repositories.
",40892817
177,False,False,2015-12-01T15:20:49Z,2015-12-01T15:21:29Z,"Features:
- Allocation of memory arrays using `new`.
- Binding library functions to types via `using x for y`
- **Breaking Change**: `new ContractName.value(10)()` has to be written as `(new ContractName).value(10)()`
- Added `selfdestruct` as an alias for `suicide`.

Bugfixes:
- Constructor arguments of fixed array type were not read correctly.
- Memory allocation of structs containing arrays or strings.
- Data location for explicit memory parameters in libraries was set to storage.

The two main features of this release is the ability to create memory arrays (of dynamic length) and to
[attach library functions to types](https://ethereum.github.io/solidity//docs/using-for/). The latter provides a way to make elegant use of complex data types in the way we are used to from other languages and paves the way to creating an extensive and easy to use standard library. The next step into that direction is the introduction of a clean module system.

_note_: The source below cannot be used without the dependent repositories.
",40892817
178,False,False,2015-11-17T15:09:29Z,2015-11-17T15:12:49Z,"Features:
- Improved error messages for unexpected tokens.
- Proof-of-concept transcompilation to why3 for formal verification of contracts.

Bugfixes:
- Writing to elements of `bytes` or `string` overwrite others.
- Arrays (also strings) as indexed parameters of events.
- ""Successor block not found"" on Windows.
- Using string literals in tuples.
- Cope with invalid commit hash in version for libraries.
- Some test framework fixes on windows.

Note: The source code download automatically generated by github below is not usable due to the way the repositories are laid out.
",40892817
179,False,False,2015-10-16T15:00:38Z,2015-10-16T15:02:04Z,"Features:
- `.push()` for dynamic storage arrays.
- Tuple expressions (`(1,2,3)` or `return (1,2,3);`)
- Declaration and assignment of multiple variables (`var (x,y,) = (1,2,3,4,5);` or `var (x,y) = f();`)
- Destructuring assignment (`(x,y,) = (1,2,3)`)
- Handling of multiple source files in the json compiler.

Bugfixes:
- Internal error about usage of library function with invalid types.
- Correctly parse `Library.structType a` at statement level.
- Correctly report source locations of parenthesized expressions (as part of ""tuple"" story).
",40892817
180,False,False,2015-10-07T16:43:52Z,2015-10-07T16:45:17Z,"Changes:
- Breaking change in storage encoding: Encode short byte arrays and strings together with their length in storage.
- Report warnings.
- Allow storage reference types for public library functions.
- Access to types declared in other contracts and libraries via `.`.
- Version stamp at beginning of runtime bytecode of libraries.
- Bugfix: Problem with initialized string state variables and dynamic data in constructor.
- Bugfix: Resolve dependencies concerning `new` automatically.
- Bugfix: Allow four indexed arguments for anonymous events.
- Bugfix: Detect too large integer constants in functions that accept arbitrary parameters.
",40892817
181,False,False,2015-09-30T15:03:00Z,2015-09-30T15:05:20Z,"Changes:
- Bugfix: combined-json output of solc incorrectly returned the runtime binary instead of the binary.
- Bugfix: Accessing fixed-size array return values.
- Bugfix: Disallow assignment from literal strings to storage pointers.
- Refactoring: Move type checking into its own module.
",40892817
182,False,False,2015-09-22T22:34:37Z,2015-09-22T23:25:01Z,"Changes:
- `throw` statement.
- Libraries that contain functions which are called via CALLCODE.
- Linker stage for compiler to insert other contract's addresses (used for libraries).
- Compiler option to output runtime part of contracts.
- Compile-time out of bounds check for access to fixed-size arrays by integer constants.
- Version string includes libevmasm/libethereum's version (contains the optimizer).
- Bugfix: Accessors for constant public state variables.
- Bugfix: Propagate exceptions in clone contracts.
- Bugfix: Empty single-line comments are now treated properly.
- Bugfix: Properly check the number of indexed arguments for events.
- Bugfix: Strings in struct constructors.
",40892817
183,False,False,2015-08-20T00:12:37Z,2015-08-21T11:03:14Z,"Changes:
- Improved commandline interface (breaking change).
- Explicit conversion between bytes and string.
- Bugfix: Value transfer used in clone contracts.
- Bugfix: Problem with strings as mapping keys.
- Bugfix: Prevent usage of some operators.
",40892817
184,False,False,2020-01-19T16:18:55Z,2020-01-20T21:04:29Z,"Thanks to @marcospassos, ANTLR 4.8 introduces a PHP target!  See [PHP PRs](https://github.com/antlr/antlr4/pulls?q=is%3Apr+is%3Aclosed+php+label%3Atarget%3Aphp)

## Issues fixed
* [C# Antlr4.Runtime.Standard v4.7.2.0 assembly signature problem](https://github.com/antlr/antlr4/issues/2700) (comp:tool, status:duplicate, target:csharp)

## Improvements, features

### cpp target
* [C++ VS project updates for next ANTLR4 release](https://github.com/antlr/antlr4/pull/2711) (comp:build, comp:doc, target:cpp)
* [don't unnecessary fetch all tokens when grabbing an interval of text …](https://github.com/antlr/antlr4/pull/2532) (target:cpp)
* [fix cpp cmake for emscripten](https://github.com/antlr/antlr4/pull/2472) (target:cpp)

### go target
* [Remove unnecessary Travis files.](https://github.com/antlr/antlr4/pull/2599) (target:go)

### javascript target
* [Fix placement of @members in Javascript target lexers](https://github.com/antlr/antlr4/pull/2679) (target:javascript)
* [Fix main entry point for JavaScript runtime npm package](https://github.com/antlr/antlr4/pull/2673) (target:javascript)

### swift target
* [[Swift] Migrate Swift runtime to Swift 5.](https://github.com/antlr/antlr4/pull/2686) (target:swift)
* [[Swift] Check process exit status during tests.](https://github.com/antlr/antlr4/pull/2604) (target:swift)

## Contributors
*   5 items: [Ewan Mellor](https://github.com/ewanmellor) (ewanmellor)
*   1 items: [Mike Lischke](https://github.com/mike-lischke) (mike-lischke)
*   1 items: [Marcos Passos](https://github.com/marcospassos) (marcospassos)
*   1 items: [jimmy-the-eek](https://github.com/jimmy-the-eek)
*   1 items: [Tabari Alexander](https://github.com/tehbone) (tehbone)
*   1 items: [Zhiqiang Lu](https://github.com/zqlu) (zqlu)
*   1 items: [WalterCouto](https://github.com/WalterCouto)
*   1 items: [Markus Zancolo](https://github.com/kuegi) (kuegi)
",501687
185,False,False,2018-12-18T18:35:28Z,2018-12-18T19:46:46Z,"## Issues fixed
* [Antlrv4 failed installation](https://github.com/antlr/antlr4/issues/2422) (actions)
* [[cpp] Setting `contextSuperClass='antlr4::RuleContextWithAltNum'` doesn't work](https://github.com/antlr/antlr4/issues/2350) (target:cpp)
* [Please publish JDK 9 Automatic-Module-Name entries](https://github.com/antlr/antlr4/issues/2163) (comp:build)

## Improvements, features
* [Assign token names to string literals in parse rule contexts](https://github.com/antlr/antlr4/pull/2358) (code-gen, type:improvement)
* [File path handling fixes](https://github.com/antlr/antlr4/pull/2280) (comp:tool, type:improvement)
* [ Fixed warning from MingGW and error from Clang Windows](https://github.com/antlr/antlr4/pull/2232) (target:cpp, type:improvement)
* [Fix null pointers + remove unused lines](https://github.com/antlr/antlr4/pull/2221) (type:improvement)

## Pull requests grouped by target

### csharp target
* [fix NPE](https://github.com/antlr/antlr4/pull/2423) (comp:build, target:csharp)
* [Fix #1955 python](https://github.com/antlr/antlr4/pull/2417) (target:csharp, target:python2, target:python3)
* [Updated csharp-target doc](https://github.com/antlr/antlr4/pull/2311) (comp:doc, target:csharp)
* [Make C# NuGet package name more visible in runtime docs](https://github.com/antlr/antlr4/pull/2216) (comp:doc, target:csharp)

### cpp target
* [virtual dtor for ParseTreeProperty](https://github.com/antlr/antlr4/pull/2426) (target:cpp)
* [Do not throw std::bad_cast from antlrcpp::Any::is](https://github.com/antlr/antlr4/pull/2406) (target:cpp)
* [Add const accessors to antlrcpp::Any C++ class](https://github.com/antlr/antlr4/pull/2399) (target:cpp)
* [Fix for antlr#2164.](https://github.com/antlr/antlr4/pull/2398) (target:cpp)
* [Applied C++ changes for PR #1955.](https://github.com/antlr/antlr4/pull/2396) (target:cpp)
* [Fix #2350](https://github.com/antlr/antlr4/pull/2351) (target:cpp)
* [Add support c++ target on android](https://github.com/antlr/antlr4/pull/2248) (comp:build, target:cpp)
* [Changes to cpp runtime to make antlr work with Chromium build](https://github.com/antlr/antlr4/pull/2244) (target:cpp)
* [ Fixed warning from MingGW and error from Clang Windows](https://github.com/antlr/antlr4/pull/2232) (target:cpp, type:improvement)
* [Fix #1855, #2211](https://github.com/antlr/antlr4/pull/2213) (comp:runtime, target:cpp)
* [Support for CMake Packages in the Cpp Runtime](https://github.com/antlr/antlr4/pull/2203) (target:cpp)
* [Force usage of 'previousContext'.](https://github.com/antlr/antlr4/pull/2187) (target:cpp)
* [Don't create exception objects if you don't throw them.](https://github.com/antlr/antlr4/pull/2178) (target:cpp)
* [Patch for multi-threaded parsing with the C++ runtime](https://github.com/antlr/antlr4/pull/2177) (target:cpp)
* [Add missing -std=c++11 flag when using non-appleclang compiler on macosx](https://github.com/antlr/antlr4/pull/2168) (comp:build, target:cpp)
* [Add Visual Studio 2017 project to Cpp runtime. Also change define for static library setting to be ANTLR4CPP_STATIC, in all projects.](https://github.com/antlr/antlr4/pull/2165) (comp:build, target:cpp)
* [C++ runtime: Make Parser::exitRule() non-virtual](https://github.com/antlr/antlr4/pull/2162) (comp:performance, target:cpp)

### go target

### java target
* [Avoid StringIndexOutOfBoundException](https://github.com/antlr/antlr4/pull/2309) (target:java, type:bug, unicode)
* [Java.stg: use static functions instead of inline arrays](https://github.com/antlr/antlr4/pull/2299) (code-gen, target:java)

### javascript target
* [Fix #1955 javascript](https://github.com/antlr/antlr4/pull/2418) (target:javascript)
* [fix indentation in javascript target examples](https://github.com/antlr/antlr4/pull/2198) (comp:doc, target:javascript)
* [JavaScript parse tree visitor: check if ctx.children is non-null in visitChildren](https://github.com/antlr/antlr4/pull/2196) (target:javascript, type:bug)
* [Remove unused  `_loadString` parameter](https://github.com/antlr/antlr4/pull/2181) (target:javascript)

### python2 target
* [Fix #1955 python](https://github.com/antlr/antlr4/pull/2417) (target:csharp, target:python2, target:python3)
* [fixes #2188](https://github.com/antlr/antlr4/pull/2190) (target:python2, target:python3)

### python3 target
* [Fix #1955 python](https://github.com/antlr/antlr4/pull/2417) (target:csharp, target:python2, target:python3)
* [Fix install dependency for 'typing' library in python3.4](https://github.com/antlr/antlr4/pull/2409) (target:python3)
* [Update to python 3.6](https://github.com/antlr/antlr4/pull/2394) (comp:build, target:python3)
* [Allow importing StdinStream from antlr4 package](https://github.com/antlr/antlr4/pull/2338) (target:python3)
* [Add StdninStream for python3 runtime. Closes: #2271](https://github.com/antlr/antlr4/pull/2336) (target:python3)
* [Fixes #2301](https://github.com/antlr/antlr4/pull/2302) (target:python3)
* [Enable ParserATNSimulator debug mode in Python3 target](https://github.com/antlr/antlr4/pull/2292) (target:python3, type:bug)
* [fixes #2188](https://github.com/antlr/antlr4/pull/2190) (target:python2, target:python3)
* [[Python3] return result instead of None in visitor](https://github.com/antlr/antlr4/pull/2184) (target:python3)

### swift target
* [[Swift-runtime] Make sure mutexes are being freed accordingly](https://github.com/antlr/antlr4/pull/2413) (target:swift)
* [[Swift] Syntax error in antlr4/runtime/Swift/boot.py](https://github.com/antlr/antlr4/pull/2411) (target:swift)
* [[Swift] Make ParserATNSimulator.precedenceTransition return a nullable value.](https://github.com/antlr/antlr4/pull/2408) (target:swift)
* [Move the Swift runtime to Swift 4.2](https://github.com/antlr/antlr4/pull/2407) (target:swift)
* [Testability and build improvements](https://github.com/antlr/antlr4/pull/2405) (comp:build, comp:testing, target:swift)
* [Enable some performance tests on Swift.](https://github.com/antlr/antlr4/pull/2403) (comp:testing, target:swift)
* [[Swift] Report InputMismatchException with original context information](https://github.com/antlr/antlr4/pull/2402) (target:swift)
* [[Swift] Minor tidyups in the stream code.](https://github.com/antlr/antlr4/pull/2156) (target:swift)
* [[Swift] Make ATNDeserializationOptions a simple struct.](https://github.com/antlr/antlr4/pull/2155) (target:swift)
* [[Swift] Remove HashMap and fix Parser caches.](https://github.com/antlr/antlr4/pull/2154) (target:swift)

## Contributors
*  11 items: [Ewan Mellor](https://github.com/ewanmellor) (ewanmellor)
*   7 items: [ericvergnaud](https://github.com/ericvergnaud)
*   4 items: [Mike Lischke](https://github.com/mike-lischke) (mike-lischke)
*   2 items: [Prateek Gulati](https://github.com/prateekgulati) (prateekgulati)
*   2 items: [Adriaan Duz](https://github.com/nxtstep) (nxtstep)
*   2 items: [Steve Vinoski](https://github.com/vinoski) (vinoski)
*   2 items: [Vladimir Goncharov](https://github.com/AmatanHead) (AmatanHead)
*   2 items: [Maxim Novikov](https://github.com/m-novikov) (m-novikov)
*   2 items: [Mark Raynsford](https://github.com/io7m) (io7m)
*   1 items: [hannemann-tamas](https://github.com/hannemann-tamas)
*   1 items: [Prashast Srivastava](https://github.com/prashast) (prashast)
*   1 items: [Alex Mykyta](https://github.com/amykyta3) (amykyta3)
*   1 items: [Sergey Chupov](https://github.com/scadgek) (scadgek)
*   1 items: [Terence Parr](https://github.com/parrt) (parrt)
*   1 items: [Ivan Kochurkin](https://github.com/KvanTTT) (KvanTTT)
*   1 items: [Lucas Henrique](https://github.com/LucasHMS) (LucasHMS)
*   1 items: [吴晟 Wu Sheng](https://github.com/wu-sheng) (wu-sheng)
*   1 items: [Ale Contenti](https://github.com/alecont) (alecont)
*   1 items: [Dan Halperin](https://github.com/dhalperi) (dhalperi)
*   1 items: [Stephen Vance](https://github.com/srvance) (srvance)
*   1 items: [sinopsysHK](https://github.com/sinopsysHK)
*   1 items: [johnvanderholt](https://github.com/johnvanderholt)
*   1 items: [Joe R. Smith](https://github.com/solussd) (solussd)
*   1 items: [uvguy](https://github.com/uvguy)
*   1 items: [Daniel Clifford](https://github.com/dannoc) (dannoc)
*   1 items: [Chase](https://github.com/ChaseOxide) (ChaseOxide)
*   1 items: [Jędrzej Biedrzycki](https://github.com/TAndronicus) (TAndronicus)
*   1 items: [Raz Friman](https://github.com/razfriman) (razfriman)
*   1 items: [Zongyuan Zuo](https://github.com/EternalPhane) (EternalPhane)
*   1 items: [Sönke Schau](https://github.com/xgcssch) (xgcssch)
*   1 items: [Kaspar Emanuel](https://github.com/kasbah) (kasbah)
*   1 items: [Robert](https://github.com/robertbrignull) (robertbrignull)
*   1 items: [Corey Kosak](https://github.com/kosak) (kosak)
*   1 items: [jkmar](https://github.com/jkmar)
*   1 items: [Kyle Sletten](https://github.com/kbsletten) (kbsletten)
*   1 items: [Ajay Panyala](https://github.com/ajaypanyala) (ajaypanyala)
*   1 items: [Nicolas Croad](https://github.com/niccroad) (niccroad)
*   1 items: [janlinde](https://github.com/janlinde)
*   1 items: [Enes SOYLU](https://github.com/enessoylu) (enessoylu)
",501687
186,False,False,2017-12-09T20:04:21Z,2017-12-09T20:19:57Z,"ANTLR version 4.7.1 is a minor release but with lots of little improvements and bug fixes.  You can find the pull requests grouped by target language below. Also, please find below the contributor list (auto-generated from the issues and pull request).

# Summary of new features and improvements

* You can now import lexers with `mode`s into other lexer grammars [[...]](https://github.com/antlr/antlr4/pull/2135)
* The `-o` and `-lib` commandline options didn't always do the obvious thing and in fact presented some problems. With clean that up but requires a new `-Xexact-output-dir` command line option to enable it to avoid breaking tools built on previous versions of ANTLR [[...]](https://github.com/antlr/antlr4/pull/2065)
*  For languages that support case insensitive keywords such as SQL, ANTLR does not have a built-in mechanism. Programmers either specify case insensitive lexers rules directly or they can build a special input stream that presents characters as uppercase to the lexer. I have provided [documentation](https://github.com/antlr/antlr4/blob/master/doc/case-insensitive-lexing.md) that describes both approaches including sample streams in various targets. [[...]](https://github.com/antlr/antlr4/pull/2146)
* The Swift runtime was migrated to Swift 4. [[...]](https://github.com/antlr/antlr4/pull/2032)
* You can generate SVG now from parse trees in Java target. [[...]](https://github.com/antlr/antlr4/pull/1917) 
* The NuGet package now includes the .NET Core DLL and supports both .NET 3.5 and up, as well as .NET Core. [[...]](https://github.com/antlr/antlr4/pull/1884)

## Issues fixed
* [Python3 runtime says 4.6 not 4.7](https://github.com/antlr/antlr4/issues/2094) (status:invalid, target:python3)
* [Can not generate java files from Rust grammar file](https://github.com/antlr/antlr4/issues/1997) (actions, code-gen, type:bug)
* [Unexpected code generation location behavior ](https://github.com/antlr/antlr4/issues/753) (cross-platform-issue, type:bug)
* [Compiling seperate lexer and parser in subdirectory fails](https://github.com/antlr/antlr4/issues/638) (comp:build, status:duplicate, type:bug)

## Improvements, features
* [Changed rotation to support 32 and 64-bit architectures as noted in issue #2060.](https://github.com/antlr/antlr4/pull/2149) (target:go, type:improvement)
* [Case insensitivity doc](https://github.com/antlr/antlr4/pull/2146) (comp:doc, comp:runtime, lexers, type:improvement)
* [Import lexers with modes into other lexer grammars](https://github.com/antlr/antlr4/pull/2135) (comp:tool, lexers, type:improvement)
* [Add an accessLevel parser option.](https://github.com/antlr/antlr4/pull/2126) (actions, type:improvement)
* [Support building C++ Runtime with Intel compilers](https://github.com/antlr/antlr4/pull/2104) (target:cpp, type:improvement)
* [Improve the ""gnu"" message format](https://github.com/antlr/antlr4/pull/2086) (comp:tool, error-handling, type:improvement)
* [Security related issue with System.getenv](https://github.com/antlr/antlr4/issues/2069) (comp:runtime, type:improvement)
* [New unreachable token value warning](https://github.com/antlr/antlr4/pull/2066) (comp:tool, error-handling, type:improvement)
* [Simplify output path generation; new -Xexact-output-dir option](https://github.com/antlr/antlr4/pull/2065) (actions, comp:build, comp:tool, type:improvement)
* [Remove ANTLRError.nullPointer from the Swift runtime.](https://github.com/antlr/antlr4/pull/2052) (type:improvement)
* [Migrate the Swift runtime to Swift 4.](https://github.com/antlr/antlr4/pull/2032) (target:swift, type:improvement)
* [Report InputMismatchException with original context information](https://github.com/antlr/antlr4/pull/1969) (error-handling, target:java, type:improvement)
* [Many fixes to antlr4-maven-plugin dependency analysis](https://github.com/antlr/antlr4/pull/1945) (comp:build, type:improvement)
* [Implemented TokenStreamRewriter](https://github.com/antlr/antlr4/pull/1942) (comp:runtime, target:go, type:improvement)
* [added SVG export of parse tree](https://github.com/antlr/antlr4/pull/1917) (target:java, trees-contexts, type:improvement)
* [NuGet packaging for .NET Core](https://github.com/antlr/antlr4/pull/1884) (comp:build, target:csharp, type:improvement)
* [CPP target runtime: fixed a memleak](https://github.com/antlr/antlr4/pull/1813) (target:cpp, type:improvement)
* [Support importing multi-mode lexer grammars](https://github.com/antlr/antlr4/issues/160) (comp:runtime, lexers, type:improvement)

## Pull requests grouped by target

### csharp target
* [Add extra diagnostics and a retry to the C# runtime tests and upgrade the macOS runtime](https://github.com/antlr/antlr4/pull/2124) (comp:build, comp:testing, target:csharp)
* [#2021 fixes nuget packaging options to avoid missing dll exceptions](https://github.com/antlr/antlr4/pull/2024) (comp:build, target:csharp)
* [fix to the ATN deserialiser issue on big endian architecture](https://github.com/antlr/antlr4/pull/1958) (target:csharp)
* [for linux target, bring up to jdk8 since jdk7 no longer available for Trusty; for linux and osx targets, bring up dotnet from 1.0.3 to 1.0.4; Trusty image now has mvn 3.3.9 builtin, removed install code](https://github.com/antlr/antlr4/pull/1927) (comp:build, target:csharp)
* [Set version to 4.7.1 because 4.7.0 already exists on Nuget](https://github.com/antlr/antlr4/pull/1886) (target:csharp)
* [NuGet packaging for .NET Core](https://github.com/antlr/antlr4/pull/1884) (comp:build, target:csharp, type:improvement)
* [speed up tests; rename runtime dll ready for nuget](https://github.com/antlr/antlr4/pull/1845) (target:csharp)
* [update to .netcore v1.0.1; add osx build](https://github.com/antlr/antlr4/pull/1810) (comp:build, target:csharp)

### cpp target
* [The correction for cmake depends on the demo](https://github.com/antlr/antlr4/pull/2105) (comp:build, target:cpp)
* [Support building C++ Runtime with Intel compilers](https://github.com/antlr/antlr4/pull/2104) (target:cpp, type:improvement)
* [CMake build fixes for Visual Studio](https://github.com/antlr/antlr4/pull/2090) (comp:build, target:cpp)
* [CMake build fixes for Visual Studio](https://github.com/antlr/antlr4/pull/2011) (comp:build, target:cpp)
* [Add MSVC support to c++ cmake build](https://github.com/antlr/antlr4/pull/1974) (comp:build, target:cpp)
* [Remove the useless visibility attribute from this ""enum class"" declaration](https://github.com/antlr/antlr4/pull/1954) (target:cpp)
* [C++ runtime: Fix two issues found by coverity](https://github.com/antlr/antlr4/pull/1951) (target:cpp)
* [Build fixes after previous C++ patch](https://github.com/antlr/antlr4/pull/1935) (comp:build, target:cpp)
* [Rework C++ Runtime Interval, IntervalSet, ATN and ATNState](https://github.com/antlr/antlr4/pull/1930) (atn-analysis, target:cpp)
* [Build fix/correction for UTF32 conversion.](https://github.com/antlr/antlr4/pull/1908) (target:cpp)
* [Small optimizations](https://github.com/antlr/antlr4/pull/1907) (target:cpp)
* [C++ runtime changes for high warning levels](https://github.com/antlr/antlr4/pull/1902) (target:cpp)
* [Fix listener example in C++ documentation.](https://github.com/antlr/antlr4/pull/1895) (comp:doc, target:cpp)
* [Make ParseTreeWalker::DEFAULT provide an IterativeParseTreeWalker](https://github.com/antlr/antlr4/pull/1891) (target:cpp, trees-contexts)
* [Fix the utf8 convertor for VS2017](https://github.com/antlr/antlr4/pull/1849) (target:cpp, unicode)
* [Update C++ target doc for latest API changes - fixes #1824.](https://github.com/antlr/antlr4/pull/1831) (comp:doc, target:cpp)
* [Channel parameter in c-tor is now a size_t - fixes #1827.](https://github.com/antlr/antlr4/pull/1830) (target:cpp)
* [Small fix in cmake file. Fixes #1809.](https://github.com/antlr/antlr4/pull/1822) (comp:build, target:cpp)
* [CPP target runtime: fixed a memleak](https://github.com/antlr/antlr4/pull/1813) (target:cpp, type:improvement)

### go target
* [Export GetHiddenTokens routines](https://github.com/antlr/antlr4/pull/2151) (target:go)
* [Fix issue with tree finding when the underlying slice needs to be resized.](https://github.com/antlr/antlr4/pull/2150) (target:go)
* [Changed rotation to support 32 and 64-bit architectures as noted in issue #2060.](https://github.com/antlr/antlr4/pull/2149) (target:go, type:improvement)
* [Add RuleContext interface methods to reserved words](https://github.com/antlr/antlr4/pull/2098) (target:go)
* [Revert ""[Go] Interval""](https://github.com/antlr/antlr4/pull/2062) (target:go)
* [Placed the CommonSetStuff code inside a scope](https://github.com/antlr/antlr4/pull/2047) (code-gen, target:go)
* [Export Go lexer methods](https://github.com/antlr/antlr4/pull/1996) (target:go)
* [Allowing Go runtime compilation to succeed under ARM](https://github.com/antlr/antlr4/pull/1990) (target:go)
* [Add CommonTokenStream test.](https://github.com/antlr/antlr4/pull/1983) (target:go)
* [Interval](https://github.com/antlr/antlr4/pull/1978) (target:go)
* [Implemented TokenStreamRewriter](https://github.com/antlr/antlr4/pull/1942) (comp:runtime, target:go, type:improvement)
* [Add getter method to Interval.](https://github.com/antlr/antlr4/pull/1938) (target:go)
* [Go file header complies with standardised Go 'generated code' header](https://github.com/antlr/antlr4/pull/1932) (code-gen, target:go)
* [Fix #1925](https://github.com/antlr/antlr4/pull/1926) (target:go, target:javascript, target:python2, target:python3, unicode)
* [Add proper error handling semantics to FileStream.](https://github.com/antlr/antlr4/pull/1844) (target:go)

### java target
* [Fixes #2069 to catch env var security exception](https://github.com/antlr/antlr4/pull/2070) (target:java, type:bug)
* [Fix codegen error (Java) when a lexer has only fragment tokens](https://github.com/antlr/antlr4/pull/2007) (code-gen, target:java)
* [Fixed empty CodePointCharStream throwing exception on getText.](https://github.com/antlr/antlr4/pull/1977) (target:java, unicode)
* [Report InputMismatchException with original context information](https://github.com/antlr/antlr4/pull/1969) (error-handling, target:java, type:improvement)
* [Avoid adding to closureBusy before all ATNConfig properties are set](https://github.com/antlr/antlr4/pull/1955) (atn-analysis, comp:performance, target:java, type:bug)
* [added SVG export of parse tree](https://github.com/antlr/antlr4/pull/1917) (target:java, trees-contexts, type:improvement)

### javascript target
* [enable auto-suggest engines by exposing the lexer ATN as a property, similar to the parser ATN](https://github.com/antlr/antlr4/pull/2141) (target:javascript)
* [Fix Interval usage in ErrorStrategy.js](https://github.com/antlr/antlr4/pull/2133) (target:javascript)
* [Require superClass for Lexer in split mode for JavaScript target](https://github.com/antlr/antlr4/pull/1966) (target:javascript)
* [fix inconsistent naming in target stg](https://github.com/antlr/antlr4/pull/1950) (target:javascript)
* [Fix #1925](https://github.com/antlr/antlr4/pull/1926) (target:go, target:javascript, target:python2, target:python3, unicode)
* [Add `new` keyword to return proper InputStreams](https://github.com/antlr/antlr4/pull/1867) (target:javascript, type:bug)

### python2,3 targets

* [fix #2031](https://github.com/antlr/antlr4/pull/2038) (target:python2)
* [Python: add public getter to parsers to access syntax error count.](https://github.com/antlr/antlr4/pull/1956) (target:python2, target:python3)
* [Fix #1925](https://github.com/antlr/antlr4/pull/1926) (target:go, target:javascript, target:python2, target:python3, unicode)
* [Fix input mismatch errors not reported the same way as Java in Python](https://github.com/antlr/antlr4/pull/1921) (comp:testing, error-handling, target:python2, target:python3)
* [Use spaces consistently to indent the generated Python code.](https://github.com/antlr/antlr4/pull/1918) (target:python2, target:python3)
* [Import RuleContext into the antlr4 module namespace. See Issue #2012.](https://github.com/antlr/antlr4/pull/2013) (target:python3)
* [Python 3 codegen probably didn't mean to limit ATN segment size to 2 XOR 31](https://github.com/antlr/antlr4/pull/1805) (target:python3, type:bug)

### swift target

* [Fix parse-cancellation in BailErrorStrategy.](https://github.com/antlr/antlr4/pull/2123) (target:swift)
* [Remove Recognizer.tokenTypeMapCache and .ruleIndexMapCache.](https://github.com/antlr/antlr4/pull/2122) (target:swift)
* [Fix initialization of {Lexer,Parser}Interpreter.decisionToDFA.](https://github.com/antlr/antlr4/pull/2121) (target:swift)
* [Remove Triple.swift.](https://github.com/antlr/antlr4/pull/2119) (target:swift)
* [Make ATNSimulator.sharedContextCache non-optional.](https://github.com/antlr/antlr4/pull/2118) (target:swift)
* [Remove unused ATN.modeNameToStartState.](https://github.com/antlr/antlr4/pull/2117) (target:swift)
* [Some minor tidyups.](https://github.com/antlr/antlr4/pull/2115) (target:swift)
* [Make DFA.precedenceDfa be a ""let"" rather than a ""var"".](https://github.com/antlr/antlr4/pull/2114) (target:swift)
* [Replace IntervalSet.setReadonly with makeReadonly.](https://github.com/antlr/antlr4/pull/2113) (target:swift)
* [Make all the mutexes ""let"" rather than ""var"".](https://github.com/antlr/antlr4/pull/2112) (target:swift)
* [Tidy-ups inside the Swift runtime around ParseTree, ParserRuleContext](https://github.com/antlr/antlr4/pull/2108) (target:swift)
* [Remove use of deprecated String functions](https://github.com/antlr/antlr4/pull/2107) (target:swift)
* [Open the error strategies to subclasses.](https://github.com/antlr/antlr4/pull/2106) (target:swift)
* [Tidy ATNDeserializer.](https://github.com/antlr/antlr4/pull/2103) (target:swift)
* [Report errors in ANTLRFileStream.](https://github.com/antlr/antlr4/pull/2102) (target:swift)
* [Implement UUID.init(mostSigBits, leastSigBits) in the Swift runtime.](https://github.com/antlr/antlr4/pull/2101) (target:swift)
* [Fix ParseTreePatternMatcher.split in the Swift runtime.](https://github.com/antlr/antlr4/pull/2100) (target:swift)
* [Make CharStream.init(CharStream) required (in the Swift runtime).](https://github.com/antlr/antlr4/pull/2093) (target:swift)
* [Fix UnbufferedCharStream in the Swift runtime.](https://github.com/antlr/antlr4/pull/2092) (target:swift)
* [Fix retain cycles in the Swift runtime](https://github.com/antlr/antlr4/pull/2076) (target:swift)
* [Implement UnbufferedCharStream in the Swift runtime.](https://github.com/antlr/antlr4/pull/2075) (target:swift)
* [ Tidy up the exception behavior around IntervalSet and ATNConfigSet.](https://github.com/antlr/antlr4/pull/2074) (target:swift)
* [Tidy up the exception handling around RecognitionException.](https://github.com/antlr/antlr4/pull/2073) (target:swift)
* [Tidyups inside the Swift runtime](https://github.com/antlr/antlr4/pull/2072) (target:swift)
* [Update boot.py and swift-target.md to reflect Swift 4 migration changes.](https://github.com/antlr/antlr4/pull/2063) (target:swift)
* [Improve MurmurHash](https://github.com/antlr/antlr4/pull/2033) (target:swift)
* [Migrate the Swift runtime to Swift 4.](https://github.com/antlr/antlr4/pull/2032) (target:swift, type:improvement)
* [Updated swift-target.md.](https://github.com/antlr/antlr4/pull/1979) (comp:doc, target:swift)
* [Swift Documentations](https://github.com/antlr/antlr4/pull/1976) (comp:doc, target:swift)
* [Swift Target Linux Support](https://github.com/antlr/antlr4/pull/1897) (target:swift)
* [Supporting Script for Swift Runtime](https://github.com/antlr/antlr4/pull/1862) (target:swift)
* [Fixing Problems after Swift3.1 Release](https://github.com/antlr/antlr4/pull/1808) (target:swift)
* [Fixing Xcode project setting.](https://github.com/antlr/antlr4/pull/1806) (comp:build, target:swift)
* [Obsolete String.contains(_:) of Swift runtime](https://github.com/antlr/antlr4/pull/1793) (target:swift)

## Contributors
*  42 items: [Ewan Mellor](https://github.com/ewanmellor) (ewanmellor)
*   8 items: [Terence Parr](https://github.com/parrt) (parrt)
*   8 items: [Mike Lischke](https://github.com/mike-lischke) (mike-lischke)
*   7 items: [hanjoes](https://github.com/hanjoes) (hanjoes)
*   5 items: [ericvergnaud](https://github.com/ericvergnaud)
*   4 items: [David Sisson](https://github.com/davesisson) (davesisson)
*   4 items: [Maxim](https://github.com/gendalph) (gendalph)
*   4 items: [Sam Harwell](https://github.com/sharwell) (sharwell)
*   3 items: [Corey Kosak](https://github.com/kosak) (kosak)
*   3 items: [Dong Xie](https://github.com/xied75) (xied75)
*   2 items: [JavaDDD](https://github.com/JavaDDD)
*   2 items: [Ivan Kochurkin](https://github.com/KvanTTT) (KvanTTT)
*   2 items: [Andrew Brampton](https://github.com/bramp) (bramp)
*   2 items: [Sachin Jain](https://github.com/sachinjain024) (sachinjain024)
*   2 items: [shirou](https://github.com/shirou) (shirou)
*   2 items: [Arshinskiy Mike](https://github.com/neatnerd) (neatnerd)
*   2 items: [Matt Hauck](https://github.com/matthauck) (matthauck)
*   2 items: [Renáta Hodován](https://github.com/renatahodovan) (renatahodovan)
*   2 items: [jm-mikkelsen](https://github.com/jm-mikkelsen)
*   2 items: [lys0716](https://github.com/lys0716)
*   1 items: [Oran Epelbaum](https://github.com/oranoran) (oranoran)
*   1 items: [Nicolas Croad](https://github.com/niccroad) (niccroad)
*   1 items: [zqlu](https://github.com/zqlu) (zqlu)
*   1 items: [Ajay Panyala](https://github.com/ajaypanyala) (ajaypanyala)
*   1 items: [Jason Mooberry](https://github.com/jasonmoo) (jasonmoo)
*   1 items: [simkimsia](https://github.com/simkimsia)
*   1 items: [Rostislav Listerenko](https://github.com/kaedvann) (kaedvann)
*   1 items: [fallnirvana](https://github.com/moon-fall) (moon-fall)
*   1 items: [Robert Jacobson](https://github.com/rljacobson) (rljacobson)
*   1 items: [Bráulio Bezerra](https://github.com/brauliobz) (brauliobz)
*   1 items: [Masashi Fujita](https://github.com/objectx) (objectx)
*   1 items: [Sandy Corn](https://github.com/onekosha) (onekosha)
*   1 items: [Eddy Reyes](https://github.com/ereyes01) (ereyes01)
*   1 items: [Milan Aleksić](https://github.com/milanaleksic) (milanaleksic)
*   1 items: [Tiago Mazzutti](https://github.com/tiagomazzutti) (tiagomazzutti)
*   1 items: [Niels Basjes](https://github.com/nielsbasjes) (nielsbasjes)
*   1 items: [Venkat Peri](https://github.com/venkatperi) (venkatperi)
*   1 items: [Vaibhav Vaingankar](https://github.com/vaibhavaingankar09) (vaibhavaingankar09)
*   1 items: [Maurice van der Pot](https://github.com/Griffon26) (Griffon26)
*   1 items: [Dan Halperin](https://github.com/dhalperi) (dhalperi)
*   1 items: [Sergey Parshukov](https://github.com/jBugman) (jBugman)
*   1 items: [alim](https://github.com/alimg) (alimg)
*   1 items: [rlfnb](https://github.com/rlfnb)
*   1 items: [Daniel Katz](https://github.com/danielkatz) (danielkatz)
*   1 items: [Erik A. Brandstadmoen](https://github.com/erikbra) (erikbra)
*   1 items: [Will Fuqua](https://github.com/waf) (waf)
*   1 items: [Jim Allman](https://github.com/jimallman) (jimallman)
*   1 items: [Shravan Narayan](https://github.com/shravanrn) (shravanrn)
*   1 items: [Brad Hards](https://github.com/bradh) (bradh)
*   1 items: [Floor](https://github.com/FloorGoddijn) (FloorGoddijn)
*   1 items: [Ben Hamilton (Ben Gertzfield)](https://github.com/bhamiltoncx) (bhamiltoncx)
*   1 items: [Jonas Auer](https://github.com/cmd-johnson) (cmd-johnson)
*   1 items: [Gerald Rosenberg](https://github.com/grosenberg) (grosenberg)
*   1 items: [Arthur Fabre](https://github.com/arthurfabre) (arthurfabre)
",501687
187,False,False,2017-03-30T21:11:54Z,2017-03-30T21:41:20Z,"ANTLR version 4.7 is a major release with many improvements and bug fixes. 

# Summary of new features, improvements, fixes

* The primary improvement is that ANTLR and all code generation targets can now handle full 21-bit unicode thanks to the superhuman effort of Ben Hamilton, @bhamiltoncx.  After much thought concerning the ""create stream"" interface, I have decided on the following end result: C++, Python, Go, and Swift APIs didn't need any changes to support full Unicode code points, so I decided to leave those alone. Java, C#, and JavaScript runtimes required changes. Rather than gutting and changing the interface of the previous ANTLRFileStream etc..., I have deprecated those and introduced a CharStreams.fromXXX factory style interface for creating streams. For example, `CharStreams.fromFileName(""foo.txt""))`. See the new [unicode documentation](https://github.com/antlr/antlr4/blob/master/doc/unicode.md) and [a complete list of all pull requests related to Unicode](https://github.com/antlr/antlr4/pulls?q=is%3Apr+is%3Aclosed+label%3Aunicode).
* `UnbufferedCharStream` for Java and C# targets was upgraded to use UTF-8 rather than the locale default encoding; they further support U+10FFFF Unicode code points. C++ is the only other target with the unbuffered stream and it worked as-is.
  * [Change UnbufferedCharStream to use code points](https://github.com/antlr/antlr4/pull/1796)
  * [Use UTF-8 by default in UnbufferedCharStream and allow specifying charset]()
  * [C#: Change UnbufferedCharStream to use 32-bit Unicode code points and 32-bit buffer](https://github.com/antlr/antlr4/pull/1798)
* In addition to creating `CharStreams` capable of supporting 21-bit Unicode, we added notation for Unicode code points beyond 16 bits (4 hexadecimal digits). The usual notation `\uABCD` still works for the basic code points but you can now use `\u{1FFFF}..\u{10FFFF}` to access the full range:
  * [New extended Unicode escape \u{10ABCD} to support Unicode literals > U+FFFF](https://github.com/antlr/antlr4/pull/1633)
  * [Support UTF-32 escape sequences](https://github.com/antlr/antlr4/issues/276)
* You can also include all characters matching Unicode properties such as `[\p{Emoji}]`:
  * [Add new \p{Extended_Pictographic} and related Unicode property escapes](https://github.com/antlr/antlr4/pull/1754)
  * [Also support Unicode enumerated properties via \p{Foo=Bar} syntax](https://github.com/antlr/antlr4/pull/1739)
  * [Update docs for new Unicode literal and property escapes](https://github.com/antlr/antlr4/pull/1710)
  * [New class EscapeSequenceParsing with \p{UnicodeProperty} support](https://github.com/antlr/antlr4/pull/1693)
  * [New \p{Letter} Unicode property escape](https://github.com/antlr/antlr4/pull/1688)
  * [A few last escapes: \p{EmojiPresentation=EmojiDefault} and \p{EmojiPresentation=TextDefault}](https://github.com/antlr/antlr4/pull/1757)
  * [UnicodeData: Also support Unicode blocks](https://github.com/antlr/antlr4/pull/1692)

* The C# target now supports [.NET Core Support](https://github.com/antlr/antlr4/pull/1229), thanks to David Neumann @lecode-official and Dong Xie @xied75!
* We did quite a bit of cleaning up in the lexer escape char and char set areas (big thanks to Ivan Kochurkin @KvanTTT):
    * [Escapes sequence recognition failure in character sets](https://github.com/antlr/antlr4/issues/1537)
    * [Throw ""invalid escape sequence"" for double quote in string literals: '&#92;""'](https://github.com/antlr/antlr4/issues/1717)
    * [Fixed incorrect ""used multiple times"" warning.](https://github.com/antlr/antlr4/pull/1715)
    * [error-> warnings. Fixes #1537](https://github.com/antlr/antlr4/pull/1709)
    * [Reverted unterminated ranges: [+-], [-+], [-].](https://github.com/antlr/antlr4/pull/1726)
    * [More accurate error messages](https://github.com/antlr/antlr4/pull/1724)
    * [Added invalid charset error (for ranges without start or end)](https://github.com/antlr/antlr4/pull/1721) (comp:tool, error-handling)

* The Go runtime was significantly speeded up.
    * [Go Runtime: Murmur Hash and various optimizations](https://github.com/antlr/antlr4/pull/1755)
    * [Initialize decisionToDFA in init in Go.stg](https://github.com/antlr/antlr4/pull/1750)
* The XPath tree matching library used an ANTLR grammar itself, which caused a cyclic dependency in the build whereby ANTLR version v was required to build version v.  I implemented a handbuilt lexer to get rid of this dependency on a grammar: [XPathLexer not updated in release process](https://github.com/antlr/antlr4/issues/1620), [Fixes #1620. Make handbuilt lexer to avoid cyclic dependence of tool and plugin.](https://github.com/antlr/antlr4/pull/1748)

* The Java, Swift, and C++ targets have added a hook to the construction of parse tree leaf nodes: [factor out the creation of error nodes and terminal nodes in the parser](https://github.com/antlr/antlr4/pull/1665). Code `new TerminalNodeImpl(..)` and `new ErrorNodeImpl(...)` instead now calls a few factory methods in the [Parser](https://github.com/antlr/antlr4/blob/master/runtime/Java/src/org/antlr/v4/runtime/Parser.java#L600) that you can override in your application.


# Issues fixed

C++ target:

* [SIGABRT when using TokenStreamRewrite::Delete method](https://github.com/antlr/antlr4/issues/1698) 
* [Cpp runtime: compile needed <functional> header](https://github.com/antlr/antlr4/issues/1646) 
* [compilation warning ](https://github.com/antlr/antlr4/issues/1619)
* [Segmentation fault on TokenStreamRewriter destructor call](https://github.com/antlr/antlr4/issues/1666)
* [Runtime build failure on gcc 6.3.1](https://github.com/antlr/antlr4/issues/1608)
* [Fixed regression introduced by wrong optimization. Fixes #1708.](https://github.com/antlr/antlr4/pull/1733) (target:cpp)
* [Fixed crash with multi threaded parsers warming up at the same time.](https://github.com/antlr/antlr4/pull/1728) (target:cpp)
* [	Improve error message in exceptions](https://github.com/antlr/antlr4/pull/1723) (target:cpp)
* [Using new Unicode syntax for C++ demo project.](https://github.com/antlr/antlr4/pull/1712) (target:cpp, unicode)
* [Fix syntaxError prototype issue](https://github.com/antlr/antlr4/pull/1701) (target:cpp)
* [Fixed a number of data type + signedness issues in the C++ target](https://github.com/antlr/antlr4/pull/1690) (target:cpp)
* [Some compilers need the functional include.](https://github.com/antlr/antlr4/pull/1677) (target:cpp)
* [Fix wrong include path of antlr4cpp runtime in cmake/ExternalAntlr4Cpp.cmake](https://github.com/antlr/antlr4/pull/1612) (target:cpp)
* [Fix parse tree property](https://github.com/antlr/antlr4/pull/1603) (target:cpp)
* [No static libs anymore for Windows C++ runtime.](https://github.com/antlr/antlr4/pull/1558) (comp:build, target:cpp)
* [Lr loop fix](https://github.com/antlr/antlr4/pull/1557) (target:cpp, type:improvement)
* [adapt code to compile with msys2 mingw compiler](https://github.com/antlr/antlr4/pull/1548) (comp:build, target:cpp, type:improvement)
* [Fix for VS 2013 runtime builds (C++)](https://github.com/antlr/antlr4/pull/1528) (comp:doc, target:cpp)
* [Implemented enhanced CommonToken::toString method](https://github.com/antlr/antlr4/pull/1511)
* [Using new Unicode syntax for C++ demo project.](https://github.com/antlr/antlr4/pull/1712) (target:cpp, unicode)
* [fix an issue where loading antlr from an IE web worker would fail](https://github.com/antlr/antlr4/pull/1572) (target:javascript)
* [Issue 1483](https://github.com/antlr/antlr4/pull/1511) (target:cpp, type:improvement)

JavaScript target:

* [JavaScript target: super class of TraceListener is not correctly set](https://github.com/antlr/antlr4/issues/1747)
* [BailErrorStrategy in JavaScript](https://github.com/antlr/antlr4/issues/1638)
* [JavaScript visitors not visiting children](https://github.com/antlr/antlr4/issues/1076)
* [Javascript Target documentation contains no reference to existing NPM package?](https://github.com/antlr/antlr4/issues/1520)
* [Doc antlr4 / doc / javascript-target.md outdated, states there is no NPM package for antlr4 runtime](https://github.com/antlr/antlr4/issues/1241)
* [tweak wildcard](https://github.com/antlr/antlr4/pull/1760)
* [Fixed null pointer exception for JS target](https://github.com/antlr/antlr4/pull/1736)
* [Fix missing variable declarations](https://github.com/antlr/antlr4/pull/1599)
* [fix an issue where loading antlr from an IE web worker would fail](https://github.com/antlr/antlr4/pull/1572)
* [fix typo in javascript visitor](https://github.com/antlr/antlr4/pull/1565)
* [Update npm related docs](https://github.com/antlr/antlr4/pull/1524)
* [missing js export](https://github.com/antlr/antlr4/pull/1639)

Python2/3:

* [python2: Bug in IntervalSet.py:removeOne causes exception when taking complement](https://github.com/antlr/antlr4/issues/1538)
* [Python 2 - missing IllegalStateException import in PredictionContext.py](https://github.com/antlr/antlr4/issues/1531)
* [fix 'CommonToken' object has no attribute 'stopIndex' in Python{2|3}](https://github.com/antlr/antlr4/pull/1551)
* [Fix a Python 2 typo](https://github.com/antlr/antlr4/pull/1541)
* [Python 2 - missing - ErrorNode and TerminalNode - imports in Parser.py](https://github.com/antlr/antlr4/issues/1530)
* [Python 2 - missing IllegalStateException import in PredictionContext.py](https://github.com/antlr/antlr4/issues/1531)

C#:

* [Fixed portability problems in C# target.  Also cleaned up some XML do…](https://github.com/antlr/antlr4/pull/1758)
* [Fix C# Pair.cs, Right arrow escaping in XML Comments](https://github.com/antlr/antlr4/pull/1685)
* [Fix #1298 for CSharp](https://github.com/antlr/antlr4/pull/1655)
* [Remove unused C# runtime method Utils.ToCharArray](https://github.com/antlr/antlr4/pull/1631)
* [Look in /usr/local/bin before /usr/bin for mono](https://github.com/antlr/antlr4/pull/1622) 

Go:

* [go target: copyright notices are interpreted as package documentation](https://github.com/antlr/antlr4/issues/1539)
* [Added ""action"" to badWords set for Go runtime.](https://github.com/antlr/antlr4/pull/1669)
* [Remove lower case formatting on Go types & super import](https://github.com/antlr/antlr4/pull/1594)
* [Use single-line comments for copyright](https://github.com/antlr/antlr4/pull/1583)
* [Format Go runtime files](https://github.com/antlr/antlr4/pull/1596)

Java:

* [Add visitor tests for Java runtime API](https://github.com/antlr/antlr4/pull/1578)
* [augment TerminalNode with setParent()](https://github.com/antlr/antlr4/pull/1674)

Swift:

* [Remove generated files from repository and add testRig for Swift target](https://github.com/antlr/antlr4/pull/1731) (target:swift)
* [Tweak Repo to use SwiftPackageManager.](https://github.com/antlr/antlr4/pull/1606) (target:swift)

Tool or all-target-runtime related:

* Wildcards were not handled properly, they were treated as sets! [fix some typos Sam noticed.](https://github.com/antlr/antlr4/pull/1544)
* [crash upon bad grammar](https://github.com/antlr/antlr4/issues/1556)
* [Antlr 4.6 does not like same named rule element labels for different alternative labels](https://github.com/antlr/antlr4/issues/1706)
* [More accurate error messages](https://github.com/antlr/antlr4/pull/1724)
* [Added invalid charset error (for ranges without start or end)](https://github.com/antlr/antlr4/pull/1721)
* [New tool utility class Unicode](https://github.com/antlr/antlr4/pull/1683)
* [The final fix (hopefully) for alternative labels check in left recursive rules](https://github.com/antlr/antlr4/pull/1585)
* [Implement support for optional getters](https://github.com/antlr/antlr4/pull/1576)
* [Disable label checks for left recursive rules](https://github.com/antlr/antlr4/pull/1570)
* [New doc 'Contributing to ANTLR'](https://github.com/antlr/antlr4/pull/1624)
* [Channel names & constants in lexer, improved modes record format.](https://github.com/antlr/antlr4/pull/1591)

",501687
188,False,False,2016-12-15T22:25:38Z,2016-12-15T22:40:04Z,"ANTLR version 4.6 is a major release with many features and bug fixes.

# Summary of new features, improvements, fixes
- **NEW TARGETS**: C++, Swift, Go:
  - Peter Boyer (Go target)
  - Mike Lischke (C++ completed target)
  - Dan McLaughlin (C++ initial target)
  - David Sisson (C++ initial target and test)
  - Janyou (Swift target)
  - Ewan Mellor, Hanzhou Shi (Swift target merging) 
- **Major performance improvement** discovered by @sharwell. We were seeing a number of reports of nonterminating parses for very large expressions with grammars that used left recursive rule specifications (like `e : e '*' e | INT ;`). Sam noticed that the parsing engine detected an ambiguity between two choices and resolved it properly but that both would lead to a valid parse. It turns out that the first choice is what led to really slow parsing but the second choice is much faster and still yields a valid parse. Most targets have added that improvement.  Here is the [discussion of the issue and solution](https://github.com/antlr/antlr4/issues/1398) and the [primary patch for java](https://github.com/antlr/antlr4/pull/1404).
- **Error handling** improved in cases related to LL(1) decisions for optional and closure subrules. Matching sets of tokens were also sometimes considered resynchronization (error) tokens. Single token deletions that occurred at the start of expressions were sometimes not included in the parse tree as error nodes.
  - [Add `sync()` calls back in for LL(1) decisions.](https://github.com/antlr/antlr4/issues/1337) (code-gen, error-handling)
  - [Matched tokens being marked as error](https://github.com/antlr/antlr4/issues/1299) (comp:runtime, error-handling, trees-contexts, type:bug)
  - [Single-token deletion error node not in parse tree](https://github.com/antlr/antlr4/issues/1298) (error-handling, trees-contexts, type:bug)
- The tool itself generates **better error messages**:
  - [Crash with NullPointerException in SymbolChecks.checkForModeConflicts with empty lexer](https://github.com/antlr/antlr4/issues/1188) (comp:tool, grammars, type:bug)
  - [Have ANTLR4 prevent conflict with user rule names by behind-the-scenes renaming of its own variables](https://github.com/antlr/antlr4/issues/1070) (status:cannot-reproduce)
  - [Add compile-time errors/warnings for use of incompatible lexer commands](https://github.com/antlr/antlr4/issues/348) (comp:tool, error-handling)
  - [character set issues](https://github.com/antlr/antlr4/pull/1521) (comp:tool, error-handling, type:improvement)
  - [Duplicated and incompatible commands ](https://github.com/antlr/antlr4/pull/1424) (comp:tool, error-handling, type:improvement)
- We fixed a number of issues with the **build system**
  - [Tidy poms](https://github.com/antlr/antlr4/pull/1486) (comp:build, type:improvement)
  - [divide and conquer Travis CI](https://github.com/antlr/antlr4/pull/1413) (comp:build, type:improvement)
  - [Version information omitted from MANIFEST.MF in antlr-4.5.1-complete.jar](https://github.com/antlr/antlr4/issues/1036) (comp:build, type:bug)
  - [antrl4-<version>-sources.jar does not contain sources for runtime](https://github.com/antlr/antlr4/issues/1007) (comp:build, type:bug)
  - [OSGi module name does not reflect Maven module name](https://github.com/antlr/antlr4/issues/980) (comp:build, type:improvement)
  - [Running a limited subset of runtime-testsuite](https://github.com/antlr/antlr4/issues/1291) (comp:testing, type:improvement)
- Improvements to the ANTLR4 **mvn plug-in**:
  - [Grammar dependency management for Maven plugin](https://github.com/antlr/antlr4/pull/1353) (comp:build, comp:maven-plugin, type:improvement)
  - [antlr4-maven-plugin: code generated in wrong encoding](https://github.com/antlr/antlr4/issues/1342) (comp:maven-plugin, type:improvement)
- The ANTLR **unit test** mechanism was completely rewritten but it should not affect anyone other than the development team
  - [Refactor runtime test generation mechanism](https://github.com/antlr/antlr4/issues/1347) (comp:testing, type:improvement)
- We assume **java 1.7** not 1.6 now.
  - [Drop support for 1.6, move pom.xml etc. to JDK 1.7](https://github.com/antlr/antlr4/issues/1352) (cross-platform-issue, type:improvement)
- Miscellaneous
  - [make sure BSD 3-clause license prefix is consistent and on all appropriate files](https://github.com/antlr/antlr4/issues/1322) (type:improvement)
  - [Allow paths as tokenVocab option](https://github.com/antlr/antlr4/pull/1311) (comp:build, comp:tool, type:improvement)
  - [add TokenStreamRewriter to Python2 runtime](https://github.com/antlr/antlr4/pull/1273) (target:python2, type:improvement)
  - [Add an iterative version of the ParseTreeWalker](https://github.com/antlr/antlr4/pull/1231) (comp:runtime, target:java, trees-contexts, type:improvement)
  - [indicate token types as well as numbers in -tokens dump](https://github.com/antlr/antlr4/issues/1073) (target:java, type:improvement)
  - [Binary parsing](https://github.com/antlr/antlr4/issues/828) (comp:doc, type:improvement, type:question)

# Issues fixed
- [Python 2 Target's ErrorStrategy Creates Problematic Tokens](https://github.com/antlr/antlr4/issues/1496) (target:python2, type:bug)
- [Prefix rules that also recurse are not detected](https://github.com/antlr/antlr4/issues/1402) (grammars, type:bug)
- [mvn compile failing. Could not resolve dependencies](https://github.com/antlr/antlr4/issues/1381) (comp:build, comp:doc, type:bug)
- [Repeated epsilon transitions in ATN from left-recursive grammar](https://github.com/antlr/antlr4/issues/1369) (atn-analysis, type:bug)
- [Add `sync()` calls back in for LL(1) decisions.](https://github.com/antlr/antlr4/issues/1337) (code-gen, error-handling)
- [Array2DHashSet.clear does not reset threshold](https://github.com/antlr/antlr4/issues/1318) (target:java, type:bug)
- [ANTLR 4.5.3 & java.lang.StackOverflowError](https://github.com/antlr/antlr4/issues/1317) (comp:tool, type:bug)
- [Matched tokens being marked as error](https://github.com/antlr/antlr4/issues/1299) (comp:runtime, error-handling, trees-contexts, type:bug)
- [Single-token deletion error node not in parse tree](https://github.com/antlr/antlr4/issues/1298) (error-handling, trees-contexts, type:bug)
- [$e.v yields incorrect value 0 in ""e returns [int v] : '1' {$v = 1;} | '(' e ')' {$v = $e.v;} ;""](https://github.com/antlr/antlr4/issues/1295) (actions, grammars, type:bug)
- [Strange code in JavaScript - PredictionContext.js line 191](https://github.com/antlr/antlr4/issues/1280) (target:javascript, type:bug)
- [A bug of the antlr4 python3 runtime 4.5.3](https://github.com/antlr/antlr4/issues/1265) (target:python3, type:bug)
- [Empty alternative in rule causes syntax error in *Parser.py for Python2/3 targets](https://github.com/antlr/antlr4/issues/1252) (target:python2, target:python3, type:bug)
- [getText method with arguments not always works correctly](https://github.com/antlr/antlr4/issues/1238) (target:java, type:bug)
- [maven plugin dependency tracking ignores imported files](https://github.com/antlr/antlr4/issues/1233) (comp:build, comp:maven-plugin, comp:tool)
- [NullPointerException on invalid attribute reference](https://github.com/antlr/antlr4/issues/1211) (comp:tool, type:bug)
- [getLookaheadParseTrees() should reset or create new error handler each alt but doesn't](https://github.com/antlr/antlr4/issues/1206) (comp:runtime, trees-contexts, type:bug)
- [getAllPossibleParseTrees() doesn't work when ambig input reaches eof.](https://github.com/antlr/antlr4/issues/1205) (comp:runtime, trees-contexts, type:bug)
- [Changing '+' to '*' crashes antlr4](https://github.com/antlr/antlr4/issues/1203) (atn-analysis, parsers, type:bug)
- [Crash with NullPointerException in SymbolChecks.checkForModeConflicts with empty lexer](https://github.com/antlr/antlr4/issues/1188) (comp:tool, grammars, type:bug)
- [LB() can try to scan to i < 0](https://github.com/antlr/antlr4/issues/1177) (comp:runtime, type:bug)
- [Incorrect childs generation with array of element label](https://github.com/antlr/antlr4/issues/1163) (grammars, status:invalid)
- [TokenStreamRewriter for Python](https://github.com/antlr/antlr4/issues/1115) (target:python2)
- [getTokenTypeMap should test all token type values](https://github.com/antlr/antlr4/issues/1042) (comp:runtime, target:java, type:bug)
- [Version information omitted from MANIFEST.MF in antlr-4.5.1-complete.jar](https://github.com/antlr/antlr4/issues/1036) (comp:build, type:bug)
- [antrl4-<version>-sources.jar does not contain sources for runtime](https://github.com/antlr/antlr4/issues/1007) (comp:build, type:bug)
- [template error: attribute parser isn't defined](https://github.com/antlr/antlr4/issues/958) (target:javascript, type:bug)
- [Add compile-time errors/warnings for use of incompatible lexer commands](https://github.com/antlr/antlr4/issues/348) (comp:tool, error-handling)
",501687
189,False,False,2016-03-30T23:59:48Z,2016-03-31T00:00:05Z,"# Features / improvements
- New grammar option: `contextSuperClass`. All parse tree internal nodes will derive from this.  Default is `ParserRuleContext`. Should derive from ultimately `RuleContext` at minimum.
  Java target can use `contextSuperClass=org.antlr.v4.runtime.RuleContextWithAltNum` for convenience. It adds a backing field for `altNumber`, the alt matched for the associated rule node. 
- [Added `getMaxTokenType()` to `Vocabulary` interface](https://github.com/antlr/antlr4/pull/1146)

Complete list of [pull requests for 4.5.3](https://github.com/antlr/antlr4/pulls?q=milestone%3A4.5.3+is%3Aclosed+is%3Apr) but most of those are fixing bugs.

# Issues

Complete list of [issues closed/solved for 4.5.2](https://github.com/antlr/antlr4/issues?utf8=%E2%9C%93&q=milestone%3A4.5.3+is%3Aclosed+is%3Aissue).
",501687
190,False,False,2016-01-30T18:01:50Z,2016-03-28T17:56:28Z,"# Features / improvements
- removed final (hopefully!) dependency on Java AWT lib in runtime.
- moved doc, faq from wiki to the repo.
- added more tool error checks.
- major Python speed improvement with better hash function (minutes to seconds)

Complete list of [pull requests for 4.5.2](https://github.com/antlr/antlr4/issues?q=milestone%3A4.5.2+is%3Aclosed) but most of those are fixing bugs.

# Issues

Summary: some clean up in JavaScript and Python targets. Minor issues in Java/jar.

Complete list of [issues closed/solved for 4.5.2](https://github.com/antlr/antlr4/issues?q=milestone%3A4.5.2+is%3Aclosed).
",501687
191,False,False,2015-07-15T21:45:47Z,2015-07-15T23:30:40Z,"# Bug fix and repo reorganization release

We fixed number of important bugs but also combined the various target repositories, such as [antlr/antlr4-python2](https://github.com/antlr/antlr4-python2), into the main [antlr/antlr4](https://github.com/antlr/antlr4) repository. 

For the Java target only, there is also a new feature: a parser interpreter that tracks which alternative or label was match for a particular parse tree node, which is often useful during debugging. It is used in the 1.7 release of the [ANTLR Intellij Plugin](https://github.com/antlr/intellij-plugin-v4).

## Summary of Major Changes
- Maven build was added back in, thanks to new contributor Jason van Zyl; you can just open the topmost pom.xml in your favorite IDE
- We completely overhauled runtime test generation
- We merged all existing target repositories such as `antlr4-python2` into the main `antlr4` repo so that everything is now included in a single spot.
- We [removed runtime jar dependency on Swing](https://github.com/antlr/antlr4/pull/955).  Class `org.antlr.v4.runtime.misc.TestRig` has moved to `org.antlr.v4.gui.TestRig` but we left a proxy in so that `org.antlr.v4.runtime.misc.TestRig` still works. The `org.antlr.v4.runtime.tree.gui` package moved to `org.antlr.v4.gui` in the tool area from the runtime. A few classes from `org.antlr.v4.runtime.misc` had to move.  Convenience methods for saving/viewing parse trees were moved from `RuleContext` (parse tree) and `org.antlr.v4.runtime.tree.Trees` to `org.antlr.v4.gui.Trees`.

You can view all [Issues fixed in 4.5.1](https://github.com/antlr/antlr4/issues?q=milestone%3A4.5.1+is%3Aclosed+is%3Aissue), all [pull requests merged](https://github.com/antlr/antlr4/pulls?q=milestone%3A4.5.1+is%3Aclosed+is%3Apr) and all [commits for this release](https://github.com/antlr/antlr4/compare/4.5...4.5.1-beta-1).

### Features
- [Add goto to reserved words for java](https://github.com/antlr/antlr4/issues/870)
- [Create functionality to get all possible parse trees for ambiguous input.](https://github.com/antlr/antlr4/issues/816)
- [Makes TestRig's dialog to save and restore its state](https://github.com/antlr/antlr4/issues/812)
- [Parser.setProfile() should keep settings like prediction mode](https://github.com/antlr/antlr4/issues/809)
- [Make Grammar-object-aware ParserInterpreter ](https://github.com/antlr/antlr4/issues/905) (This interpreter will have parse tree nodes that know which alternative or label was matched for a particular parse tree subtree root.)
- [Check for nonconforming left-recursive rules.](https://github.com/antlr/antlr4/pull/873)

### Bug Fixes
- [Null pointer in named alternative with attributes](https://github.com/antlr/antlr4/issues/855)
- [NullPointerException in bad recursion](https://github.com/antlr/antlr4/issues/822)
- [Parser.setProfile() should keep settings like prediction mode](https://github.com/antlr/antlr4/issues/809)
- [Allow parsing decision override for (decision, input index) in parsers](https://github.com/antlr/antlr4/issues/807)
- [Random ArrayIndexOutOfBounds exceptions coming from ParserATNSimulator](https://github.com/antlr/antlr4/issues/804)
- [Empty rule matched first gives invalid source interval](https://github.com/antlr/antlr4/issues/897)
- [EOF leaf not included in parent tree source interval](https://github.com/antlr/antlr4/issues/896)
- [Rule parameter in left recursive rules disallowed](https://github.com/antlr/antlr4/issues/773)
- [wrong location on import error message reference to undefined rule](https://github.com/antlr/antlr4/issues/823)
- [NotNull import is not deleted in Java.stg](https://github.com/antlr/antlr4/issues/815)

## Download Binaries

Download the [ANTLR tool and all target runtimes at the antlr.org site](http://www.antlr.org/download/index.html).

The Java jars are OSGi compatible so you should be able to use them within Eclipse.

### Runtime Libraries for Language Targets
- Java is embedded with the tool, but is also available from maven-central
- [C#](http://www.antlr.org/download/antlr-csharp-runtime-4.5.1.zip) (zipped .dll) is a download from antlr.org. Might be in NuGet too in the future.
- [JavaScript is a download](http://www.antlr.org/download/antlr-javascript-runtime-4.5.1.zip) from antlr.org. Might also be registered as a npm package for node.js
- Python2 and Python 3 are in PyPi
- [Sam Harwell's alternative C# target](https://www.nuget.org/packages?q=tags%3Aantlr4+owner%3Asharwell) is available through NuGet. Note that this alternative target is distributed with a standalone copy of the ANTLR Tool, and only works with code generated by that standalone copy.

### Documentation
- [Java runtime API (4.5.1)](http://www.antlr.org/api/Java/)
- [Java Tool API (4.5.1)](http://www.antlr.org/api/JavaTool/)
- [ANTLR 4 Maven plugin (4.5.1)](http://www.antlr.org/api/maven-plugin/latest/index.html)

#### Language Targets Info

As of 4.5, the standard distribution of ANTLR can generate code in the following languages:
- [Java](https://theantlrguy.atlassian.net/wiki/display/ANTLR4/Java+Target)
- [Python2](https://theantlrguy.atlassian.net/wiki/display/ANTLR4/Python+Target)
- [Python3](https://theantlrguy.atlassian.net/wiki/display/ANTLR4/Python+Target)
- [JavaScript](https://theantlrguy.atlassian.net/wiki/display/ANTLR4/JavaScript+Target)
- [C#](https://theantlrguy.atlassian.net/wiki/display/ANTLR4/C%23+Target)

In addition, the following languages are supported by standalone release(s) of the tool.
- [C# (Sam Harwell's)](https://github.com/tunnelvisionlabs/antlr4cs)
",501687
192,False,True,2015-06-30T22:27:34Z,2015-06-30T22:19:14Z,"# Bug fix and repo reorganization release

We fixed number of important bugs but also combined the various target repositories, such as [antlr/antlr4-python2](https://github.com/antlr/antlr4-python2), into the main [antlr/antlr4](https://github.com/antlr/antlr4) repository. 

For the Java target only, there is also a new feature: a parser interpreter that tracks which alternative or label was match for a particular parse tree node, which is often useful during debugging. It is used in the 1.7 release of the [ANTLR Intellij Plugin](https://github.com/antlr/intellij-plugin-v4).

## Summary of Major Changes
- Maven build was added back in, thanks to new contributor Jason van Zyl; you can just open the topmost pom.xml in your favorite IDE
- We completely overhauled runtime test generation
- We merged all existing target repositories such as `antlr4-python2` into the main `antlr4` repo so that everything is now included in a single spot.

You can view all [Issues fixed in 4.5.1](https://github.com/antlr/antlr4/issues?q=milestone%3A4.5.1+is%3Aclosed+is%3Aissue), all [pull requests merged](https://github.com/antlr/antlr4/pulls?q=milestone%3A4.5.1+is%3Aclosed+is%3Apr) and all [commits for this release](https://github.com/antlr/antlr4/compare/4.5...4.5.1-beta-1).

### Features
- [Add goto to reserved words for java](https://github.com/antlr/antlr4/issues/870)
- [Create functionality to get all possible parse trees for ambiguous input.](https://github.com/antlr/antlr4/issues/816)
- [Makes TestRig's dialog to save and restore its state](https://github.com/antlr/antlr4/issues/812)
- [Parser.setProfile() should keep settings like prediction mode](https://github.com/antlr/antlr4/issues/809)
- [Make Grammar-object-aware ParserInterpreter ](https://github.com/antlr/antlr4/issues/905) (This interpreter will have parse tree nodes that know which alternative or label was matched for a particular parse tree subtree root.)
- [Check for nonconforming left-recursive rules.](https://github.com/antlr/antlr4/pull/873)

### Bug Fixes
- [Null pointer in named alternative with attributes](https://github.com/antlr/antlr4/issues/855)
- [NullPointerException in bad recursion](https://github.com/antlr/antlr4/issues/822)
- [Parser.setProfile() should keep settings like prediction mode](https://github.com/antlr/antlr4/issues/809)
- [Allow parsing decision override for (decision, input index) in parsers](https://github.com/antlr/antlr4/issues/807)
- [Random ArrayIndexOutOfBounds exceptions coming from ParserATNSimulator](https://github.com/antlr/antlr4/issues/804)
- [Empty rule matched first gives invalid source interval](https://github.com/antlr/antlr4/issues/897)
- [EOF leaf not included in parent tree source interval](https://github.com/antlr/antlr4/issues/896)
- [Rule parameter in left recursive rules disallowed](https://github.com/antlr/antlr4/issues/773)
- [wrong location on import error message reference to undefined rule](https://github.com/antlr/antlr4/issues/823)
- [NotNull import is not deleted in Java.stg](https://github.com/antlr/antlr4/issues/815)

## Download Binaries

Download the [ANTLR tool and all target runtimes at the antlr.org site](http://www.antlr.org/download/index.html).

The Java jars are OSGi compatible so you should be able to use them within Eclipse.

### Runtime Libraries for Language Targets
- Java is embedded with the tool, but is also available from maven-central
- [C#](http://www.antlr.org/download/antlr-csharp-runtime-4.5.1.zip) (zipped .dll) is a download from antlr.org. Might be in NuGet too in the future.
- [JavaScript is a download](http://www.antlr.org/download/antlr-javascript-runtime-4.5.1.zip) from antlr.org. Might also be registered as a npm package for node.js
- Python2 and Python 3 are in PyPi
- [Sam Harwell's alternative C# target](https://www.nuget.org/packages?q=tags%3Aantlr4+owner%3Asharwell) is available through NuGet. Note that this alternative target is distributed with a standalone copy of the ANTLR Tool, and only works with code generated by that standalone copy.

### Documentation
- [Java runtime API (4.5.1)](http://www.antlr.org/api/Java/)
- [Java Tool API (4.5.1)](http://www.antlr.org/api/JavaTool/)
- [ANTLR 4 Maven plugin (4.5.1)](http://www.antlr.org/api/maven-plugin/latest/index.html)

#### Language Targets Info

As of 4.5, the standard distribution of ANTLR can generate code in the following languages:
- [Java](https://theantlrguy.atlassian.net/wiki/display/ANTLR4/Java+Target)
- [Python2](https://theantlrguy.atlassian.net/wiki/display/ANTLR4/Python+Target)
- [Python3](https://theantlrguy.atlassian.net/wiki/display/ANTLR4/Python+Target)
- [JavaScript](https://theantlrguy.atlassian.net/wiki/display/ANTLR4/JavaScript+Target)
- [C#](https://theantlrguy.atlassian.net/wiki/display/ANTLR4/C%23+Target)

In addition, the following languages are supported by standalone release(s) of the tool.
- [C# (Sam Harwell's)](https://github.com/tunnelvisionlabs/antlr4cs)
",501687
193,False,False,2015-01-23T02:09:17Z,2015-01-23T03:11:39Z,"# Major Milestone Release

This release is primarily about the new JavaScript code generation target and the integration of a C# target derived from [Sam Harwell's ANTLR project](https://github.com/tunnelvisionlabs/antlr4cs). Sam's is still available of course but we wanted a single tool that would generate Java, C#, Python2, Python3, and JavaScript. There are also a number of bug fixes in 4.5 as you can see below.

You need to regenerate your lexers and parsers using the latest version of the 4.5 Tool to use the 4.5 runtime.

## Download Binaries

Download the [ANTLR tool and all target runtimes at the antlr.org site](http://www.antlr.org/download/index.html).

The Java jars are OSGi compatible so you should be able to use them within Eclipse.

### Runtime Libraries for Language Targets
- Java is embedded with the tool, but is also available from maven-central (_will be_ but you can get 4.5-SNAPSHOT right now until I figure out deploying.)
- [C#](http://www.antlr.org/download/antlr-csharp-runtime-4.5.zip) (zipped .dll) is a download from antlr.org. Might be in NuGet too in the future.
- [JavaScript is a download](http://www.antlr.org/download/antlr-javascript-runtime-4.5.zip) from antlr.org. Might also be registered as a npm package for node.js
- Python2 and Python 3 are in PyPi
- [Sam Harwell's alternative C# target](https://www.nuget.org/packages?q=tags%3Aantlr4+owner%3Asharwell) is available through NuGet. Note that this alternative target is distributed with a standalone copy of the ANTLR Tool, and only works with code generated by that standalone copy.

### Documentation
- [Java runtime API (4.5)](http://www.antlr.org/api/Java/)
- [Java Tool API (4.5)](http://www.antlr.org/api/JavaTool/)
- [ANTLR 4 Maven plugin (4.5)](http://www.antlr.org/api/maven-plugin/latest/index.html)

### Summary of Changes

You can view all [issues closed for this release](https://github.com/antlr/antlr4/issues?q=is%3Aissue+is%3Aclosed+milestone%3A%22ANTLR+4.5%22), all [pull requests merged](https://github.com/antlr/antlr4/pulls?q=milestone%3A%22ANTLR+4.5%22+is%3Aclosed+is%3Apr) and all [commits for this release](https://github.com/antlr/antlr4/compare/4.4...4.5).

Be aware that we no longer deploy a maven antlr4-annotations artifact and in fact we no longer use Java annotations in the Java runtime and so that code is disappeared.

#### Bug Fixes
- [Excess token consumption during recovery](https://github.com/antlr/antlr4/issues/795)
- [exception when importing grammar](https://github.com/antlr/antlr4/issues/670)
- [Generated `tokenNames` field in lexers is useless](https://github.com/antlr/antlr4/issues/711)
- [Maven build has test failures due to order of token types](https://github.com/antlr/antlr4/issues/709)
- [Suppress warning 109 for matching options during import](https://github.com/antlr/antlr4/issues/707)
- [Parser.getTrace()](https://github.com/antlr/antlr4/issues/701)
- [exception when importing grammar](https://github.com/antlr/antlr4/issues/670)
- [ANTLRInputStream.getSourceName() has @NotNull annotation, but returns null](https://github.com/antlr/antlr4/issues/667)
- [deprecate ErrorType.ALL_OPS_NEED_SAME_ASSOC](https://github.com/antlr/antlr4/issues/652)
- [Multiline comments along with token declaration in lexer](https://github.com/antlr/antlr4/issues/633)
- [NullUsageProcessor not compatible with java&gt;6](https://github.com/antlr/antlr4/issues/487)
- [Cannot start a new lexer mode right after some comments comment](https://github.com/antlr/antlr4/issues/465)
- [Docstring for TokenStreamRewriter is incorrect](https://github.com/antlr/antlr4/issues/756)

#### Language Targets Info

As of 4.5, the standard distribution of ANTLR can generate code in the following languages:
- [Java](https://theantlrguy.atlassian.net/wiki/display/ANTLR4/Java+Target)
- [Python2](https://theantlrguy.atlassian.net/wiki/display/ANTLR4/Python+Target)
- [Python3](https://theantlrguy.atlassian.net/wiki/display/ANTLR4/Python+Target)
- [JavaScript](https://theantlrguy.atlassian.net/wiki/display/ANTLR4/JavaScript+Target)
- [C#](https://theantlrguy.atlassian.net/wiki/display/ANTLR4/C%23+Target)

In addition, the following languages are supported by standalone release(s) of the tool.
- [C# (Sam Harwell's)](https://github.com/tunnelvisionlabs/antlr4cs)

Also, Sam Harwell has an [ANTLR 4 ""Optimized"" fork](https://github.com/sharwell/antlr4), which is currently consistent with ANTLR 4.4.
",501687
194,False,True,2015-01-14T01:29:38Z,2015-01-14T18:49:49Z,"This version has an important bug fix, #670, and a big update to the build system while we try to accommodate maven and its deployed mechanism.

Also be aware that we no longer deploy a maven antlr4-annotations artifact, which is only used at compile time for runtime and the ANTLR tool itself. If you use the runtime jars, you should not needed at all. If you need to compile/build, grab stuff from [github](http://github.com/antlr/antlr4).
",501687
195,False,True,2015-01-10T18:14:09Z,2015-01-10T18:31:03Z,"# Major Milestone Release (release candidate)

This release is primarily about the new JavaScript code generation target and the integration of a C# target derived from [Sam Harwell's ANTLR project](https://github.com/tunnelvisionlabs/antlr4cs). Sam's is still available of course but we wanted a single tool that would generate Java, C#, Python2, Python3, and JavaScript. There are also a number of bug fixes in 4.5 as you can see below.

We highly recommend that you regenerate your lexers and parsers using the latest version of the Tool.

## Download Binaries

Download [ANTLR jars at the antlr.org site](http://www.antlr.org/download/index.html).

### Runtime Libraries for Language Targets
- Java is embedded with the tool, but is also available from maven-central (_will be_)
- [C#](http://www.antlr.org/download/antlr-csharp-runtime-4.5-rc-1.zip) (zipped .dll) is a download from antlr.org. Might be in NuGet too in the future.
- [JavaScript is a download](http://www.antlr.org/download/antlr-javascript-runtime-4.5-rc-1.zip) from antlr.org. Might also be registered as a npm package for node.js
- Python2 and Python 3 are in PyPi
- [C# (Sam Harwell's version)](https://www.nuget.org/packages?q=tags%3Aantlr4+owner%3Asharwell) is available through NuGet. Note that this release is distributed with a standalone copy of the ANTLR Tool, and does not work with code generated by this combined distribution.

### Documentation
- [Java runtime API (4.5)](http://www.antlr.org/api/Java/)
- [Java Tool API (4.5)](http://www.antlr.org/api/JavaTool/)
- [ANTLR 4 Maven plugin (4.3)](http://www.antlr.org/api/maven-plugin/latest/index.html) _we'll update mvn stuff once we are sure that this release candidate is okay._

### Summary of Changes

You can view all [issues closed for this release](https://github.com/antlr/antlr4/issues?q=is%3Aissue+is%3Aclosed+milestone%3A%22ANTLR+4.5%22), all [pull requests merged](https://github.com/antlr/antlr4/pulls?q=milestone%3A%22ANTLR+4.5%22+is%3Aclosed+is%3Apr) and all [commits for this release](https://github.com/antlr/antlr4/compare/4.4...4.5-rc-1).

#### Bug Fixes
- [Generated `tokenNames` field in lexers is useless](https://github.com/antlr/antlr4/issues/711)
- [Maven build has test failures due to order of token types](https://github.com/antlr/antlr4/issues/709)
- [Suppress warning 109 for matching options during import](https://github.com/antlr/antlr4/issues/707)
- [Parser.getTrace()](https://github.com/antlr/antlr4/issues/701)
- [exception when importing grammar](https://github.com/antlr/antlr4/issues/670)
- [ANTLRInputStream.getSourceName() has @NotNull annotation, but returns null](https://github.com/antlr/antlr4/issues/667)
- [deprecate ErrorType.ALL_OPS_NEED_SAME_ASSOC](https://github.com/antlr/antlr4/issues/652)
- [Multiline comments along with token declaration in lexer](https://github.com/antlr/antlr4/issues/633)
- [NullUsageProcessor not compatible with java&gt;6](https://github.com/antlr/antlr4/issues/487)
- [Cannot start a new lexer mode right after some comments comment](https://github.com/antlr/antlr4/issues/465)
- [Docstring for TokenStreamRewriter is incorrect](https://github.com/antlr/antlr4/issues/756)

#### IDE Support

We have not updated the IDE plugins for this prerelease.

#### Language Targets

As of 4.5, the standard distribution of ANTLR can generate code in the following languages:
- [Java](https://theantlrguy.atlassian.net/wiki/display/ANTLR4/Java+Target)
- [Python2](https://theantlrguy.atlassian.net/wiki/display/ANTLR4/Python+Target)
- [Python3](https://theantlrguy.atlassian.net/wiki/display/ANTLR4/Python+Target)
- [JavaScript](https://theantlrguy.atlassian.net/wiki/display/ANTLR4/JavaScript+Target)
- [C#](https://theantlrguy.atlassian.net/wiki/display/ANTLR4/C%23+Target)

In addition, the following languages are supported by standalone release(s) of the tool.
- [C# (Sam Harwell's)](https://github.com/tunnelvisionlabs/antlr4cs)

Also, Sam Harwell has an [ANTLR 4 ""Optimized"" fork](https://github.com/sharwell/antlr4), which is currently consistent with ANTLR 4.4.
",501687
196,False,False,2014-07-16T21:15:31Z,2014-07-16T21:18:36Z,"## Major Milestone Release

ANTLR 4.4 is a major feature and minor bugfix update to ANTLR 4.  The primary enhancement is the introduction of both Python2 and Python3 language targets, which you can access with -Dlanguage=Python2 from the ANTLR command line. For C#, please use [Visual Studio plugin/tool](https://github.com/tunnelvisionlabs/antlr4cs/releases/tag/v4.3.0) that Sam Harwell has built. 

Please note that tool error messages have been altered to remove unnecessary single quotes and we have added some more specific error messages.

This release includes a new build script called [bild.py](https://github.com/antlr/antlr4/blob/master/bild.py) and was not build using maven. bild.py is a Python script I made that looks like a makefile and self bootstraps by pulling in the required bilder.py library from the net. See [http://bildtool.org](http://bildtool.org). On a unix box, just type ""./bild.py all"" to build antlr from source (if you are so inclined).

We highly recommend that you regenerate your lexers and parsers using the latest version of the Tool.

### Download Binaries

Download [ANTLR jars at the antlr.org site](http://www.antlr.org/download.html).

### Documentation
- [Java runtime API (4.4)](http://www.antlr.org/api/Java/)
- [Java Tool API (4.4)](http://www.antlr.org/api/JavaTool/)
- [ANTLR 4 Maven plugin (4.3)](http://www.antlr.org/api/maven-plugin/latest/index.html)

### Summary of Changes

You can view all issues closed for this release [here](https://github.com/antlr/antlr4/issues?direction=desc&milestone=10&page=1&sort=updated&state=closed), and all commits for this release [here](https://github.com/antlr/antlr4/compare/4.3...4.4).

#### Bug Fixes
- NullPtr and bad tree parse upon parser rule ref in lexer rule in combined grammar (#661)
- Specifying an unknown target crashed the tool. (https://github.com/antlr/antlr4/commit/163ec98afc995f3935cb0971e512de3781dd8919)

#### IDE Support

| Project | Release which Supports ANTLR 4.4 |
| --- | --- |
| [ANTLRWorks 2](https://github.com/tunnelvisionlabs/antlrworks2) |  |
| [IntelliJ Plugin](https://github.com/antlr/intellij-plugin-v4) | 1.5 |
| [Eclipse Plugin](https://github.com/jknack/antlr4ide) |  |
| [Visual Studio Extension](http://visualstudiogallery.msdn.microsoft.com/25b991db-befd-441b-b23b-bb5f8d07ee9f) | 1.2.1 |

#### Alternate Language Targets

As of 4.4, ANTLR can generate code in the following languages:
- [Java](https://theantlrguy.atlassian.net/wiki/display/ANTLR4/Java+Target)
- [Python2](https://theantlrguy.atlassian.net/wiki/display/ANTLR4/Python+Target)
- [Python3](https://theantlrguy.atlassian.net/wiki/display/ANTLR4/Python+Target)
- [C#](https://github.com/tunnelvisionlabs/antlr4cs)

Also, Sam Harwell has an [ANTLR 4 ""Optimized"" fork](https://github.com/sharwell/antlr4), which is currently consistent with ANTLR 4.3.
",501687
197,False,False,2014-06-19T02:24:24Z,2014-06-19T02:58:43Z,"## Major Milestone Release

ANTLR 4.3 is a major feature and bugfix update to ANTLR 4. For most users upgrading from ANTLR 4.2, this is a source- and binary-compatible update. However, to maximize the benefits provided by the update, we highly recommend that you regenerate your lexers and parsers using the latest version of the Tool.

### Download Binaries

Download [ANTLR jars at the antlr.org site](http://www.antlr.org/download.html).

### Documentation
- [Java runtime API (4.3)](http://www.antlr.org/api/Java/)
- [Java Tool API (4.3)](http://www.antlr.org/api/JavaTool/)
- [ANTLR 4 Maven plugin (4.3)](http://www.antlr.org/api/maven-plugin/latest/index.html)

### Summary of Changes

You can view all issues closed for this release [here](https://github.com/antlr/antlr4/issues?milestone=8&state=closed), and all commits for this release [here](https://github.com/antlr/antlr4/compare/4.2.2...4.3).

#### Features
- Parser profiler (#583)
- Tool/Runtime version mismatch detection (#572, #601, #634, #635)

#### Improvements
- Improved support for additional targets (#554, #566, #569, #609, #610)
- Add `clearDFA()` method to easily clear the DFA cache (#584)
- Improved documentation

#### Bug Fixes
- Fix issue with tokens named `ATN` (#561)
- Fix generated JavaDoc for listener and visitor methods for context objects created by labeled alternatives in a rule (#543)
- Fix errors in support for parsing off-channel tokens (#544, #622, #626)
- Fix references that alias the enclosing rule name (#571)
- Fix issues with use of `<assoc=right>` (#542)
- Fix issues with unsupported and/or ignored semantic predicates (#588, #590)
- Allow multiple actions and/or predicates to appear at the end of alternatives in a left-recursive rule (#625)
- Fix bugs in infrequently used `IntervalSet` code (#623)
- Fix issues with file encoding handling (#563, #618)

#### Breaking Changes
- Within an embedded action or semantic predicate, references to the enclosing rule can no longer be written as `$ruleName`. Instead, use the special symbol `$ctx` to refer to the enclosing rule. Parsers already generated from grammars prior to this change are not affected, but the grammar will need to be updated prior to generating code with ANTLR 4.3. This change was required as part of correcting #571.
- `IntervalSet.getMinElement` now returns the first element, even if that element is negative. Code which relied on this method to return a non-negative value even if the set contained negative values will need to be updated.

### Related Projects

The following tables list several related projects, along with the version number corresponding to this release. The tables will be updated as each of the projects release updates to support this release of ANTLR 4.

#### IDE Support

| Project | Release which Supports ANTLR 4.3 |
| --- | --- |
| [ANTLRWorks 2](https://github.com/tunnelvisionlabs/antlrworks2) |  |
| [IntelliJ Plugin](https://github.com/antlr/intellij-plugin-v4) |  |
| [Eclipse Plugin](https://github.com/jknack/antlr4ide) |  |
| [Visual Studio Extension](http://visualstudiogallery.msdn.microsoft.com/25b991db-befd-441b-b23b-bb5f8d07ee9f) | 1.2.1 |

#### Alternate Language Targets

| Project | Release which Supports ANTLR 4.3 |
| --- | --- |
| [ANTLR 4 ""Optimized"" fork](https://github.com/sharwell/antlr4) | [4.3-opt](https://github.com/sharwell/antlr4/releases/tag/4.3-opt) |
| [C# Target](https://github.com/tunnelvisionlabs/antlr4cs) | [4.3](https://github.com/tunnelvisionlabs/antlr4cs/releases/tag/v4.3.0) |
",501687
198,False,False,2014-04-07T02:18:12Z,2014-04-07T02:03:44Z,"## Minor Bug Fix Release

ANTLR 4.2.2 is a minor bugfix update to ANTLR 4. This update is source- and binary-compatible with ANTLR 4.2 for virtually all users (see the Breaking Changes section at the end). Users updating from earlier versions are encouraged to read the [release notes for ANTLR 4.2](https://github.com/antlr/antlr4/releases/tag/4.2).

### Documentation
- [Java runtime API (4.2.2)](http://www.antlr.org/api/Java/)
- [Java Tool API (4.2.2)](http://www.antlr.org/api/JavaTool/)
- [ANTLR 4 Maven plugin (4.2.2)](http://www.antlr.org/api/maven-plugin/latest/index.html)

### Summary of Changes

You can view all issues closed for this release [here](https://github.com/antlr/antlr4/issues?milestone=9&state=closed), and all commits for this release [here](https://github.com/antlr/antlr4/compare/4.2.1...4.2.2).

#### Bug Fixes
- Improve the handling of grammars containing multiple explicit references to `EOF`  (#531, #534, #537, #539)
- Improve the ability of generated parsers to report localized errors in the presence of semantic predicates (#529, #530, #533, parrt/antlr4#134, #538)
- Other minor fixes and cleanup (#528, #532, #538, #540)

#### Breaking Changes

The signature of the following methods changed to support the proper handling of grammars with multiple explicit references to `EOF`. These methods are rarely, if ever, overridden in client applications.
- `LexerATNSimulator.closure`
- `LexerATNSimulator.getEpsilonTarget`
- `ParserATNSimulator.closure`
- `ParserATNSimulator.closureCheckingStopState`
- `ParserATNSimulator.closure_`
- `ParserATNSimulator.getEpsilonTarget`

### Related Projects

The following tables list several related projects, along with the version number corresponding to this release. The tables will be updated as each of the projects release updates to support this release of ANTLR 4.

#### IDE Support

| Project | Release which Supports ANTLR 4.2.2 |
| --- | --- |
| [ANTLRWorks 2](https://github.com/tunnelvisionlabs/antlrworks2) | [2.2.2](https://github.com/tunnelvisionlabs/antlrworks2/releases/AW2_2.2.2) |
| [IntelliJ Plugin](https://github.com/antlr/intellij-plugin-v4) | [1.1](https://github.com/antlr/intellij-plugin-v4/releases/tag/1.1) |
| [Eclipse Plugin](https://github.com/jknack/antlr4ide) | [0.3.0](https://github.com/jknack/antlr4ide/releases/tag/v0.3.0) |
| [Visual Studio Extension](http://visualstudiogallery.msdn.microsoft.com/25b991db-befd-441b-b23b-bb5f8d07ee9f) | 1.2.1 |

#### Alternate Language Targets

| Project | Release which Supports ANTLR 4.2.2 |
| --- | --- |
| [ANTLR 4 ""Optimized"" fork](https://github.com/sharwell/antlr4) | [4.2.2-opt](https://github.com/sharwell/antlr4/releases/tag/4.2.2-opt) |
| [C# Target](https://github.com/tunnelvisionlabs/antlr4cs) | [4.2.2-alpha001](https://github.com/tunnelvisionlabs/antlr4cs/releases/tag/v4.2.2-alpha001) |
",501687
199,False,False,2014-03-25T15:57:44Z,2014-03-25T16:41:37Z,"## Minor Bug Fix Release

ANTLR 4.2.1 is a minor bugfix update to ANTLR 4. This update is source- and binary-compatible with ANTLR 4.2. Users updating from earlier versions are encouraged to read the [release notes for ANTLR 4.2](https://github.com/antlr/antlr4/releases/tag/4.2).

### Documentation

Please see the [latest release](https://github.com/antlr/antlr4/releases/latest) for links to the current documentation.

### Summary of Changes

You can view all issues closed for this release [here](https://github.com/antlr/antlr4/issues?milestone=7&state=closed), and all commits for this release [here](https://github.com/antlr/antlr4/compare/4.2...4.2.1).

#### Bug Fixes
- Fix the `ParserRuleContext` which is returned by the parser interpreter when parsing starts with a left-recursive rule (#461)
- Fix the accessor methods generated for rules where multiple alternatives use the same label (#433)
- Add new warning and error messages to help users (#472, #489, #500)
- Fix lexer action execution in the middle of rules (#469)
- Fix bug in adaptivePredict for certain left recursive rules (#509)
- Other smaller fixes (#474, #495)
",501687
200,False,False,2014-02-04T23:19:11Z,2014-02-04T05:00:15Z,"## Major Milestone Release

ANTLR 4.2 is a major feature and bugfix update to ANTLR 4. For most users upgrading from ANTLR 4.1, this is a source- and binary-compatible update. However, to maximize the benefits provided by the update, we highly recommend that you regenerate your lexers and parsers using the latest version of the Tool.

### Documentation

Please see the [latest release](https://github.com/antlr/antlr4/releases/latest) for links to the current documentation.

### Summary of Changes

You can view all issues closed for this release [here](https://github.com/antlr/antlr4/issues?milestone=6&state=closed), and all commits for this release [here](https://github.com/antlr/antlr4/compare/4.1...4.2).

#### Features
- [XPath-like syntax for selecting parse tree nodes](https://theantlrguy.atlassian.net/wiki/display/ANTLR4/Parse+Tree+Matching+and+XPath)
- [Parse tree pattern matching using concrete syntax](https://theantlrguy.atlassian.net/wiki/display/ANTLR4/Parse+Tree+Matching+and+XPath)
- [`LexerInterpreter`](http://www.antlr.org/api/Java-master/org/antlr/v4/runtime/LexerInterpreter.html) and [`ParserInterpreter`](http://www.antlr.org/api/Java-master/org/antlr/v4/runtime/ParserInterpreter.html) are much more powerful and now part of the runtime library [(details)](https://theantlrguy.atlassian.net/wiki/display/ANTLR4/Parser+and+lexer+interpreters)

#### Improvements
- Improved left-recursion elimination algorithm in the Tool (#268, #303, #313, #314, #355)
- Substantial performance improvements for grammars containing left-recursive rules (#97, #192, #300, #400, #401)
- **antlr4-maven-plugin** now prints proper error messages, and is now compatible with Eclipse m2e out-of-the-box (#319, #342)
- A new annotation processor verifies correct use of `@NotNull` and `@Nullable` at compile time, and is available through Maven separately from the rest of ANTLR 4 in the new **antlr4-annotations** artifact (#434, #435) _Note: This feature is only available for Maven users; not as part of the standalone ANTLR downloads._
- Initial support for Java 8 (#337, #430)
- The Tool supports grammar files in UTF-8 encoding with a byte order mark, a common default for text editors on Windows systems (#175)

#### Bug Fixes
- _Many_ other bug fixes
",501687
201,False,True,2014-01-23T18:06:18Z,2014-01-23T19:36:45Z,"## Major Milestone Release (Preview Release)

ANTLR 4.2 is a major feature and bugfix update to ANTLR 4. For most users upgrading from ANTLR 4.1, this is a source- and binary-compatible update. However, to maximize the benefits provided by the update, we highly recommend that you regenerate your lexers and parsers using the latest version of the Tool.

### Prerelease Library

[Download the pre-release jar](https://github.com/antlr/website-antlr4/raw/gh-pages/download/antlr-4.2-20140123-complete.jar) for non-maven users.

The current prerelease build of ANTLR 4.2 is available through Sonatype's Maven snapshot repository. To enable your Maven builds to use the snapshot releases, include the following in your projects `pom.xml` or in your system `~/.m2/settings.xml`.

``` xml
<profiles>
  <profile>
    <id>allow-snapshots</id>
    <activation><activeByDefault>true</activeByDefault></activation>
    <repositories>
      <repository>
        <id>snapshots-repo</id>
        <url>https://oss.sonatype.org/content/repositories/snapshots</url>
        <releases><enabled>false</enabled></releases>
        <snapshots><enabled>true</enabled></snapshots>
      </repository>
    </repositories>
  </profile>
</profiles>
```

With the snapshot repository enabled, you can reference the ANTLR 4 runtime with the following:

``` xml
<dependency>
  <groupId>org.antlr</groupId>
  <artifactId>antlr4-runtime</artifactId>
  <version>4.2-SNAPSHOT</version>
  <scope>compile</scope>
</dependency>
```

### Documentation

Please see the [latest release](https://github.com/antlr/antlr4/releases/latest) for links to the current documentation.

### Summary of Changes

You can view all issues closed for this release [here](https://github.com/antlr/antlr4/issues?milestone=6&state=closed), and all commits for this release [here](https://github.com/antlr/antlr4/compare/4.1...4.2-SNAPSHOT).

#### Features
- [XPath-like syntax for selecting parse tree nodes](https://theantlrguy.atlassian.net/wiki/display/ANTLR4/Parse+Tree+Matching+and+XPath)
- [Parse tree pattern matching using concrete syntax](https://theantlrguy.atlassian.net/wiki/display/ANTLR4/Parse+Tree+Matching+and+XPath)
- [`LexerInterpreter`](http://www.antlr.org/api/Java-master/org/antlr/v4/runtime/LexerInterpreter.html) and [`ParserInterpreter`](http://www.antlr.org/api/Java-master/org/antlr/v4/runtime/ParserInterpreter.html) are much more powerful and now part of the runtime library [(details)](https://theantlrguy.atlassian.net/wiki/display/ANTLR4/Parser+and+lexer+interpreters)

#### Improvements
- Improved left-recursion elimination algorithm in the Tool (#268, #303, #313, #314, #355)
- Substantial performance improvements for grammars containing left-recursive rules (#97, #192, #300, #400, #401)
- **antlr4-maven-plugin** now prints proper error messages, and is now compatible with Eclipse m2e out-of-the-box (#319, #342)
- A new annotation processor verifies correct use of `@NotNull` and `@Nullable` at compile time, and is available through Maven separately from the rest of ANTLR 4 in the new **antlr4-annotations** artifact (#434, #435)
- Initial support for Java 8 (#337, #430)
- The Tool supports grammar files in UTF-8 encoding with a byte order mark, a common default for text editors on Windows systems (#175)

#### Bug Fixes
- _Many_ other bug fixes
",501687
202,False,False,2013-06-30T22:05:12Z,2013-07-23T00:46:49Z,"## Feature and Bug Fix Release (minor breaking changes)

You can view all issues closed for this release [here](https://github.com/antlr/antlr4/issues?milestone=5&state=closed), and all commits for this release [here](https://github.com/antlr/antlr4/compare/4.0...4.1).

### New Features

_This list may be incomplete, and does not include ordinary bug fixes._
- Additional static analysis to report warnings and errors in grammars.
- Improved support for other targets (currently Java and C# targets are available).
- Added parse tree JTree pane and Export to PNG feature to parse tree viewer.
- Improved runtime API documentation.
- Improved parsing performance.
- Support `\uFFFF` in lexers.
- Updated Java grammars to support Java 7 syntax, including full support for Unicode escape sequences.

### Breaking Changes

_This list may be incomplete_

The following changes are likely to have a significant impact on user code.
- The serialized ATN representation has changed and is not backwards compatible. **All parsers must be regenerated before they can be used with the ANTLR 4.1 runtime.**

The following changes are not likely to break user code (infrequently used features or code).
- Changed the formatting of the default error messages printed to console (could affect tools which parse this raw output).
- Remove the `ParserRuleContext.altNum` field.
- String literals and lexer character sets cannot span multiple lines in the grammar. Use the escape characters `\n` and/or `\r` to include newline characters in a literal or set.
- The `Pair` and `Triple` classes in the runtime are now immutable, and `Triple` does not extend `Pair`.
- If you extended the `ANTLRErrorStrategy` interface (or one of its derived classes), be aware of significant changes to those files.
- If you extended `LexerATNSimulator` or `ParserATNSimulator`, be aware of significant changes in those classes.
- Removed `ParserInterpreter.predictATN`.
- If you use code to clear the cached DFA, be aware that the invariants have changed and the previous code will result in an exception with ANTLR 4.1.
  - Old method (ANTLR 4.0)
    
    ```
      Arrays.fill(parser.getInterpreter().decisionToDFA, null);
    ```
  - New method (ANTLR 4.1)
    
    ```
      ATN atn = parser.getATN();
      for (int i = 0; i < parser.getInterpreter().decisionToDFA.length; i++) {
          parser.getInterpreter().decisionToDFA[i] = new DFA(atn.getDecisionState(i), i);
      }
    ```
",501687
203,False,True,2020-02-14T17:22:27Z,2020-02-14T17:35:48Z,"It's here! The first release of the OCaml edition of Category Theory for Programmers!
Huge thanks to @ArulselvanMadhavan for contributing the code snippets!

![image](https://user-images.githubusercontent.com/601206/74554525-70700400-4f62-11ea-8a14-0e84d83f34d6.png)
",102222927
204,False,False,2019-08-12T20:51:07Z,2019-08-12T21:12:31Z,"The Scala edition is now available as paperback on https://www.blurb.com/b/9603882-category-theory-for-programmers-scala-edition-pape

Thanks to all contributors for their hard work!",102222927
205,False,False,2019-03-13T07:02:20Z,2019-03-02T22:14:17Z,"What's new?

* Syntax highlighting for all code snippets!
* Streamlined page margins, images, spacing
* Scala edition (with Scala code following the original Haskell code) - big thanks to @Zelenya for providing the Scala translation!
* Many more fixes (see [errata](errata.md) for details)

Huge thanks to all contributors for making this new release possible!

Sample:
![image](https://user-images.githubusercontent.com/601206/53688379-c47eda00-3d4b-11e9-8ea7-878ea1926872.png)
",102222927
206,False,True,2018-11-15T19:38:12Z,2018-11-24T22:33:57Z,"First (pre)release of the Scala Edition! Contains code snippets in both Haskell and Scala (one after the other). The Scala code snippets were taken from https://github.com/typelevel/CT_from_Programmers.scala

Big thanks to @Zelenya, @kailuowang, and Typelevel contributors for providing the Scala translation!

* Added a ""Note from the editor"", explaining the changes in this edition:
![image](https://user-images.githubusercontent.com/601206/48997631-419d2080-f159-11e8-938f-be7c2f8c97c0.png)

* Sample:

![image](https://user-images.githubusercontent.com/601206/48997646-4cf04c00-f159-11e8-9168-fa50a60cf8f4.png)",102222927
207,False,False,2018-10-21T18:49:09Z,2018-10-21T18:57:52Z,"I am proud to announce the book is now completed, and is going to the printers, to be available in hardcover soon (check back on the main page or follow [@hmemcpy](https://twitter.com/hmemcpy) on twitter for more info.)

A huge thanks to all contributors, and Bartosz, of course, for helping making this book! Enjoy!",102222927
208,False,False,2018-09-17T08:26:48Z,2018-09-17T08:32:23Z,"Very excited to present this version! It contains tons of tweaks and fixes, as well as brand new formatting for images - with backgrounds removed by @Zelenya!

In addition, the book was formatted for printing - with correct margins and layout, suitable for a hardcover US Trade (6x9"") book!

Very soon now.",102222927
209,False,False,2018-07-30T10:43:53Z,2018-07-30T10:48:21Z,Various tweaks and bug fixes.,102222927
210,False,False,2018-03-05T08:35:19Z,2018-03-27T20:31:35Z,"* Added a section ""The Hom-Functor"" in Functoriality (thanks Bartosz for the update!)
* Additional minor fixes",102222927
211,False,False,2018-03-05T08:35:19Z,2018-03-05T08:35:36Z,* Small typos fixed,102222927
212,False,False,2018-01-22T20:58:26Z,2018-01-22T20:59:47Z,"* Made numerous changes to image sizes (made smaller) to reduce the dead space around paragraphs
* Minor typos fixed",102222927
213,False,False,2018-01-11T13:41:50Z,2018-01-11T13:43:32Z,"* Added a shortlink to the YouTube course in the footer page.
* Few tweaks by @BartoszMilewski!",102222927
214,False,False,2017-12-31T12:52:16Z,2017-12-31T12:54:56Z,"* New TikZ-based commutative diagrams, courtesy of @mseri!
* Miscellaneous fixes
* Made two-sided (for printing, chapters start on the right)

Happy New Year!",102222927
215,False,False,2017-12-04T08:11:35Z,2017-12-04T08:11:43Z,Spelling and grammar fixes.,102222927
216,False,False,2017-11-08T13:47:24Z,2017-11-08T13:49:47Z,Lots of small typos and spelling mistakes fixed!,102222927
217,False,False,2017-10-31T07:55:37Z,2017-10-31T07:57:39Z,"In this release, the monospaced font used for code snippets (C++/Haskell) was made smaller.

Also lots of small tweaks for math, typos and code.",102222927
218,False,False,2017-10-16T18:26:02Z,2017-10-16T18:34:43Z,"This release has most (all?) of the equations, variables, and other symbols converted to math notation!

Example:
![image](https://user-images.githubusercontent.com/601206/31650929-2e7ff4f8-b322-11e7-9471-390709941518.png)
",102222927
219,False,False,2017-10-01T19:16:46Z,2017-10-01T19:29:55Z,"First release of the PDF. Might contain errors, please report any issues with content/formatting!",102222927
220,False,False,2020-03-03T18:02:24Z,2020-03-03T19:38:46Z,"This patch release fixes an issue in the Python bindings where parsing examples from text sometimes caused crashes. 

#### Fixes:
- Fix delete behavior for examples created using parse function (#2206)",265995
221,False,False,2019-12-07T05:33:37Z,2019-12-07T15:16:04Z,"- There has significant work in streamlining and improving support for the Python bindings. Thanks @peterychang! (#1928)
- The Conditional Contextual Bandit reduction got merged in, this reduction allows you to express problems where there are multiple slots to fill. See [here](https://github.com/VowpalWabbit/vowpal_wabbit/wiki/Conditional-Contextual-Bandit) for the wiki page. (#1816) (#1995) (#2078) (#2141)
- CMake install targets have been added to the build files (#2172) (#2135)
    - Now you can find and link VW easily in other projects:
    ```CMake
    find_package(VowpalWabbit REQUIRED)
    add_executable(my_exe main.cpp)
    target_link_libraries(my_exe PRIVATE VowpalWabbit::vw)
    ```
- Slim VW got merged into master. This is an experimental lightweight inference runtime that supports a subset of VW features. (#2028)
- Bug fixes! (see [all changes](#All-Changes) below)

#### Internal improvements
We are at work overhauling and modernizing VW, some of the relevant changes on that front are below:

- Migrate c arrays to std::array (#2094) 
- Make hashing constexpr in C++14 and unify rotl impl (#2093) 
- Make is_example_header const (#2095) 
- Allow constructor arugments for calloc_or_throw (#2070) 
- Learner now holds type erased reduction data (#2060) 
- Use numeric_limits (#2107) 
- Unify throwing of exceptions to use vw_exception instead of bare std:exception (#2171)
- Cb explore adf atomization (#2069) 
- Refactor cb_adf reduction (#2057)
- Move cb_sample to be class based (#2087) 
- Atomize topk reduction (#2050)
- Atomize autolink reduction (#2047)

#### Other notable changes:
- `--version` now includes commit id if available at build time (#1951)
- Macos added as CI target (#1965)
- Allow escaped command lines (#2157) 
- Update MSVC Toolchain to v14.1 (#1988) 
- Multiinstance mode for multiline examples (#1934) 

### All Changes
<details>
  <summary>Click to expand all changes in 8.8.0</summary>

-  Fix warning (#2179) 
- Add/exclude new folders in the python MANIFEST (#2180) 
- fix some warnings (#2177) 
- Fixes for Learning2Search Subsystem (#2176) 
- Install rapidjson too (#2174) 
- Use standard save/load functionality for sklearn Python lib (#2142)
- Default the label for CCB when reading cached labels (#2158)
- Allow escaped command lines (#2157)
- Fix header install locations (#2172)
- Unify throwing of exceptions to use vw_exception instead of bare std::exception (#2171)
- Disallow combining no_sample and cb_sample (#2148)
- Fix memory leak in search.cc (#2167)
- Fix unlabeled sgd examples (#2162)
- Add deleter for parsed examples (#2153)
- Fix misinterpreted negative option (#2149)
- Catalina segfault mitigation (#2152)
- Implement CCB type binding for Python (#2141)
- Update test dependencies (#2147)
- Fix typo: setup.py is not in vowpal_wabbit/python (#2143)
- Throw instead of silently append nullptr when types don't match (#2139)
- Fix variadic macro warning (#2138)
- Create testing harness for cluster operation of VW and add test (#2134)
- Improve VW support for CMake install process (#2135)
- Properly support default build type, fix comment, define project version (#2133)
- Update cluster readme to markdown, cleanup, format code (#2131)
- Fix slim build and various CMake fixes (#2130)
- Update CMakeLists.txt (#2127)
- fixed docker image version (#2126)
- Fix segfault when ring_size argument is not supplied (#2125)
- Python: fix deprecated joblib (#2068)
- forgot to set a parameter (#2114)
- Add option to turn off sampling for CCB (#2096)
- Remove redunant copy from CCB reduction (#2112)
- Fix segfault in CCB - MTR must clean up predictions allocated for cost sensitive examples (#2111)
- Softmaxpredfile (#2113)
- Update vw_types.natvis (#2109)
- Use numeric_limits (#2107)
- Refactor cb_adf reduction (#2057)
- Fix an LGTM warning in recommend (#2105)
- Update CMakeSettings.json (#2104)
- Remove all usages of ""using namespace std"" (#2071)
- Fix lots of warnings and clang-tidy suggestions (#2085)
- Make hashing constexpr in C++14 and unify rotl impl (#2093)
- Migrate c arrays to std::array (#2094)
- Cb explore adf initialize vars (#2102)
- ""-q"" as default nc delay option (#2098)
- Move cb_sample to be class based (#2087)
- Cb explore adf atomization (#2069)
- Fix OSX builds when not using Anaconda. (#2097)
- Mac Os X CI tests fixes (#2035)
- Make is_example_header const (#2095)
- Enable use of newer standards (#2092)
- mitigate clang-cl SIMD issue (#2091)
- Java Binding Improvements (#2081)
- fix: softmax can overflow (#2088)
- Fix type issues and windows version in cmake file (#2084)
- Atomize topk reduction (#2050)
- Update badges in Python readme (#2086)
- pdrop support for cb/ccb dsjson (#2078)
- Add CMake option to force color codes (#2082)
- Atomize autolink reduction (#2047)
- Add forwarding header for commonly used objects in reductions headers (#2080)
- Fix initilizer (#2073)
- Force OSX to build .so files for python (#2061)
- Allow constructor arugments for calloc_or_throw (#2070)
- Propagate cache reading failures (#2062)
- Learner now holds type erased reduction data (#2060)
- Remove unnecessary null checks (#2067)
- Remove most usages of unsafe sprintf function (#2054)
- Fix LGTM Java build issues (#2063)
- Add unit tests to coverage report (#2053)
- remove copy from closure, and do by reference (#2058)
- Limit python install parallelisation to number of cpus (#2056)
- Update noexcept specifier (#2048)
- Fix memory leak in CCB prediction (#2065)
- Constrain doxygen input dirs, remove graphs (#2055)
- vw_slim into master (#2028)
- DBG helper and new natvis (#2042)
- Multiinstance mode for multiline examples (#1934)
- Properly add CCB index feature with stride/offset (#2041)
- Ataymano/memory leaks fixes (#2020)
- Implement explicit included actions for CCB (#1995)
- Add VW-JNI SNAPSHOT publishing to nightly build
- Fix compile errors on centos (#2005)
- Install all headers as fix for missing headers in installed library (#1994)
- Add comment to to tovw to clarify usage (#1999)
- Add comment to learner.h (#1997)
- Update MSVC Toolchain to v14.1 (#1988)
- Remove deprecated projects and old scripts (#1992)
- fixed command line argument retrieval from parsed model (#1993)
- Fix implicit fallthrough warning and unused variable warning in GCC (#1984)
- Replace nanpattern and infpattern with std:: equivalents (#1983)
- Migrate Travis to migrated Docker image + cleanup old files (#1982)
- Add Azure pipeline for Linux CI  (#1981)
- Add constexpr and noexcept to some functions, cleanup unused functions (#1985)
- vw-hyperopt. Passing additional command when training and validating (#1959)
- Ensure vw object cannot be moved or copied (#1986)
- Fix building GCOV with Clang (#1980)
- Update RunTests to be able to find binaries in the build directory (#1979)
- Test and unify usage of ec_is_example_header (#1970)
- Remove thread_local_storage from ccb (#1976)
- Remove hard requirement for git during Windows build (#1977)
- Action scores print tag (#1971)
- Fix some warnings (#1973)
- Remove two makefiles that were missed in Cmake change (#1969)
- cd_adf: Added importance weight probability clipping for cb_type mtr, ips, dr (#1952)
- Fix file permissions for macos CI scripts (#1966)
- Add macos pipeline (#1965)
- Add LICENSE to the python source package (#1963)
- Add source info to VW Nuget description, and update copyright years. (#1962)
- Update new_version script (#1956)
- Update python README to reflect new build proceedures (#1961)
- Conditional Contextual Bandit (#1816)
- Java Maven pom.xml.in update (#1954)
- Add git commit to output of --version (#1951)
- cover and regcb: data.counter++ only in learn examples (not predict) (#1950)
- Spark/JNI multipass fixes and AllReduce quiet support (#1949)
- cb_explore_adf: fixed bug when resetting cb_type + improvements (#1948)
- vw-hyperopt (add support for passing namespaces) (#1941)
- Tau first should count only learn examples (not predict) (#1944)
- Python distributions (#1928)
- Enable suppressing NuGet version tag for official builds (#1946)
- Fix predict path for cb_explore_adf First (#1939)
- CS simulator v3.0 (#1932)
- cs/cli/vw_label.h: Avoid to throw for precision issues (#1933)
- Remove hard-coded version in Windows CI package gen script. (#1936)
- Fix clear labels the correct way (#1930)

</details>


",265995
222,False,False,2019-06-07T02:58:48Z,2019-06-07T02:59:26Z,"- The repo has moved to the VowpalWabbit organization 
- The group of core maintainers has been growing with steady improvements

### Changes
As always, lots of bug fixes.

#### Build System
The build system for VW has been overhauled to use CMake. This means, easier dependency resolution, faster build times and easier consumption as a dependency. The old automake + make systems have been replaced by this and eventually the .sln file will be replaced too. (#1624)

#### Reductions/Learning Algorithms
- Coin betting (#1903)
- Contextual Memory Tree (#1799)
- Warm start for cbify (#1534)
- Softmax learner for cbadf (#1839)
- cbify: --cbify_ldf for multiline (csoaa_ldf input datasets (#1681))

#### Other Improvements
- The parser has moved to using std types for concurency and has a clearer data production model. You’ll slowly notice more RAII types in VW. (#1731) (#1777)
- A clang format file was added and the codebase reformatted. This is to keep things more consistent and easy to read. (#1701)
- The Python bindings can now use JSON as the input format, as long as the VW instance you’re using is configured to be parsing input as JSON (#1809)
- A new `--strict_parse` option was added to throw instead of warn for malformed  examples (#1906)
- Bare Java JNI Bindings optimized for Apache Spark (#1798)
- Add multiclass support for hyperopt utl (#1682)


### All Changes
<details>
  <summary>Click to expand all changes in 8.7.0</summary>

- Warm start for cbify [(#1534)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1534)
- utl/vw-varinfo: work-around for issue/1547 [(#1548)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1548)
- Gramhagen 1538 python make test [(#1550)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1550)
- Fixed bug in CLI parsing of --csoaa_ldf multiline [(#1551)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1551)
- ksvm lambda fix [(#1556)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1556)
- Fixed bug causing to reset dump_interval to 1 when input model -i is provided [(#1558)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1558)
- Extract stable_unique to own function for clarity [(#1559)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1559)
- Improvements and small fixes to utl (vw-lda, csv2vw [(#1580)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1580)
- When parsing dsjson, skip lines not starting with ""{"" [(#1593)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1593)
- Clean windows build and unify output paths [(#1599)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1599)
- Remove unused cs_testcommon project and directory [(#1606)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1606)
- build instructions: program_options insufficient [(#1607)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1607)
- Fixed _labelIndex out of bound error message [(#1609)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1609)
- Update Readme with details on installing boost dependencies [(#1613)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1613)
- Add caching to appveyor build [(#1616)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1616)
- Use a prebuilt docker image for travis build [(#1620)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1620)
- CMake build definitions [(#1624)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1624)
- VS 2017 fixes [(#1628)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1628)
- Further improve build cache by saving packages [(#1634)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1634)
- Update Travis and Appveyor badges to reflect organization change [(#1642)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1642)
- Fix cb explore adf segfault [(#1643)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1643)
- Make VW setup projects buildable from the command-line [(#1646)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1646)
- Use `nuget restore` instead of `nuget install` in Appveyor build [(#1659)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1659)
- Remove unused boost packages from VW [(#1664)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1664)
- Replace $(SolutionDir with $(ProjectDir [(#1666)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1666)
- Use cerr for parser warnings [(#1670)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1670)
- Export vw audit output to .tsv file [(#1677)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1677)
- Enable selective CMake configuration, improve messaging [(#1678)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1678)
- Fix crash when empty multi_ex is supplied for --cb_explore_adf [(#1679)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1679)
- cbify: --cbify_ldf for multiline (csoaa_ldf input datasets [(#1681)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1681)
- add multiclass support for hyperopt utl [(#1682)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1682)
- bugfix: cb_adf is not including some examples in stats calculation [(#1686)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1686)
- Move trace_message from arguments to vw object [(#1688)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1688)
- Add bug report issue template [(#1693)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1693)
- Fix some VW initialization memory leaks [(#1697)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1697)
- Fix memory leak in cb_explore_adf [(#1698)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1698)
- vw java 11 compatibility [(#1700)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1700)
- Add clang-format [(#1701)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1701)
- Fix best constant and best constant's loss calculation when using ksvm [(#1704)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1704)
- Update assembly versions to match current version [(#1705)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1705)
- `options_i` command line parsing refactor [(#1706)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1706)
- Disable stdin processing for all but single instance CLI. Fixes 1300 [(#1708)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1708)
- Use std::exp instead of exp free function [(#1709)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1709)
- Fix unused params warnings plus incomplete struct init (done to default values. [(#1710)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1710)
- Add check for hash_inv when creating json parser [(#1711)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1711)
- Compile fixes [(#1713)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1713)
- Change from strcmp to std::string operator== [(#1715)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1715)
- Update Dockerfile for TravisCI, define pipeline, upgrade Java [(#1716)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1716)
- Change to using a bool_switch for bool options [(#1717)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1717)
- Ataymano/mac options types fix [(#1718)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1718)
- Add clang-format 7.0.1 to CI image [(#1719)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1719)
- Create Windows build scripts and update instructions [(#1721)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1721)
- Make cbify reduction respect is_learn parameter [(#1722)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1722)
- Add natvis file for v_array and substring [(#1723)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1723)
- Remove -DSTATIC_LINK_VW from Ubuntu build instructions [(#1727)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1727)
- Fix warnings in Windows MSVC x64 build [(#1730)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1730)
- Move to std types for concurrency [(#1731)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1731)
- Scripts for running tests and generating NuGet packages [(#1732)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1732)
- Fix a small issue and cleanup usage of long long [(#1733)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1733)
- Fix file enocding for .rc files [(#1734)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1734)
- Fix build scripts forcing Debug builds. Add LTO mode and fix VW default visibility. [(#1735)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1735)
- Update README.md [(#1737)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1737)
- Update image used in travis [(#1738)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1738)
- Fix model file parser for proper treatment of negative-valued options [(#1742)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1742)
- shift clang-format to advise [(#1744)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1744)
- [tests] Make repeat.py compatible with python 3. [(#1747)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1747)
- Do not define BOOST_TEST_DYN_LINK when statically linking [(#1750)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1750)
- Fix test 175 [(#1751)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1751)
- Convert TopK reduction to be multiline example based [(#1752)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1752)
- RunTests: use test label number instead of counter [(#1753)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1753)
- Fix static linking [(#1758)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1758)
- Small Json parser cleanup [(#1759)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1759)
- Type erase json parser context for easier deletion [(#1760)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1760)
- Migrate from v_array to std::vector in some places + other changes [(#1765)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1765)
- On OSX, we need to catch boost::program_options::ambiguous_option directly. Probably due to different boost versions. [(#1776)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1776)
- Parser now uses object and prod/cons queue and object pool for example parsing [(#1777)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1777)
- Fix resetting of cb_type [(#1779)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1779)
- Fix weighted average on cluster mode [(#1781)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1781)
- Allow spanning_tree to be a static executable [(#1787)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1787)
- [audit] Make sure --audit output is reproducible across systems. [(#1788)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1788)
- Add example C# Simulator [(#1790)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1790)
- Fix usage of char instead of unsigned char for namespace index [(#1791)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1791)
- Fix to bug 1729: no bias regularization for BFGS not working [(#1794)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1794)
- Bare Java JNI Bindings optimized for Apache Spark [(#1798)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1798)
- Contextual Memory Tree [(#1799)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1799)
- expand Boost_LIBRARIES for pkg-config libs [(#1801)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1801)
- Use std::stable_sort when computing interactions. [(#1804)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1804)
- [OSX] Improve support for static linking. [(#1807)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1807)
- Enable JSON example parsing in Python bindings [(#1809)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1809)
- Fix example constructor [(#1814)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1814)
- [python] Fix packaging so it's possible to produce a wheels package on linux. [(#1815)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1815)
- Update Python readme to reflect latest way to consume bindings from source [(#1817)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1817)
- Fix L2S HookTask in c-library and Python bindings [(#1818)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1818)
- Clear cb labels when returning to pool [(#1822)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1822)
- Fix build scripts for python3 [(#1823)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1823)
- Fix ""average loss"" bug in cb_explore.cc [(#1825)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1825)
- Add gitter chat badge to readme [(#1826)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1826)
- Fix README.Windows.md link [(#1827)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1827)
- Consume RapidJson through submodule [(#1828)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1828)
- fix bug 1784: return probabilities for actions in the correct order in python binding [(#1830)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1830)
- Fix else statement [(#1832)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1832)
- Fix NaN issue in box-muller tranform [(#1833)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1833)
- Fix v142 toolchain [(#1834)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1834)
- Implement finish_example, update scripts to match [(#1837)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1837)
- cb_adf and cb_explore_adf: Setting --cb_type mtr as default [(#1838)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1838)
- First attempt at softmax learner for cbadf [(#1839)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1839)
- Fix conda_install.sh script [(#1843)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1843)
- Fix counting issue with --holdout_after option [(#1844)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1844)
- Run coveralls inside docker [(#1847)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1847)
- Cmake build on Windows [(#1849)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1849)
- Fix coveralls badge URL in README [(#1850)]https://github.com/VowpalWabbit/vowpal_wabbit/pull/1850)
- Azure Pipeline for Windows CI [(#1853)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1853)
- cleaning up broken python3 vcxproj files [(#1854)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1854)
- BF: add cmake to installed dependencies in unstable singularity images [(#1857)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1857)
- Ataymano/c wrapper fix2 [(#1859)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1859)
- Fix Azure Pipeline build-break [(#1867)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1867)
- Enable Version and Tag override for NuGet pack [(#1870)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1870)
- Shared example merge reduction [(#1873)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1873)
- Update gd_mf_weights.cc right namespace [(#1874)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1874)
- Fixed warning message ips -> mtr [(#1875)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1875)
- Fix dsjson parser regression and add smoke-test [(#1878)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1878)
- do not output progressive validation loss for oaa with subsampling [(#1880)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1880)
- Add python documentation generation [(#1884)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1884)
- Update python documentation theme and index [(#1885)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1885)
- Change references from SolutionDir to ProjectDir [(#1886)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1886)
- Clean up some options warnings and remove some extra copies [(#1888)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1888)
- fix to make invert_hash work with bfgs [(#1892)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1892)
- Treat resource files as binary [(#1896)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1896)
- memory leaks and warnings [(#1898)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1898)
- Change version-generation for C# bindings to use version.txt [(#1899)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1899)
- Change to absolute https path for submodule [(#1900)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1900)
- fix for no label confidence [(#1901)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1901)
- Coin betting [(#1903)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1903)
- Use Appveyor MSBuildLogger [(#1904)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1904)
- Optional exception [(#1906)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1906)
- fix closing invalid file descriptor with memory_io_buf [(#1910)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1910)
- remove warnings [(#1911)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1911)
- Fix to save the state of FTRL models [(#1912)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1912)
- fix static library build [(#1913)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1913)
- more warnings [(#1915)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1915)
- fix for daemon race condition [(#1918)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1918)
- Bremen79 fix save ftrl [(#1919)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1919)
- change semantics of lambda [(#1920)](https://github.com/VowpalWabbit/vowpal_wabbit/pull/1920)

</details>


",265995
223,False,False,2018-07-21T12:39:26Z,2018-07-21T12:52:45Z,The internal version number now matches the tag number,265995
224,False,False,2018-07-05T16:01:23Z,2018-07-05T20:32:58Z,"This version has many bug fixes of course.  In addition, 
(1) There are many improvements to the contextual bandit code thanks to Alberto Bietti (https://arxiv.org/abs/1802.04064 ).
(2) There are significant improvements to save_resume due to @denik.  

Internally, 
(a) The argument parsing code has been rewritten to be more consistent throughout the code base via parser_helper.h.
(b) There are significant improvements in the way that multiline examples are handled thanks to @rajan-chari 

Note that unlike previous release versions, I've left the ""Makefile"" build system in place rather than using Automake.  Automake is still available if desired, but you'll need to run it manually if you want to use it.",265995
225,False,False,2017-12-02T18:22:12Z,2017-12-03T16:36:26Z,"8.5.0 has further improvements, including fully working sparse model support, empirically optimized exploration algorithms, a new cost-sensitive active learning algorithm (https://arxiv.org/abs/1703.01014), and baseline prediction support.",265995
226,False,False,2017-07-21T17:08:17Z,2017-07-22T14:24:28Z,"There aren’t many new features since 8.3.0 (better JSON language support, better offline eval, sparse parameter support), so this version simply addresses a number of issues that have shown up over time",265995
227,False,False,2016-06-21T18:37:43Z,2016-06-21T18:44:10Z,"Many things added including more sophisticated contextual bandits, the recall tree, and OjaNewton.
",265995
228,False,False,2015-02-14T20:37:42Z,2015-02-14T20:39:48Z,"No significant changes from 7.9---primarily bugfixes.
",265995
229,False,False,2015-01-11T18:54:22Z,2015-01-11T18:55:38Z,"Primarily updates to learning reductions modularity.
",265995
230,False,False,2014-12-07T01:16:49Z,2014-12-07T02:48:07Z,"<a href=""http://hunch.net/?p=222592"">A post</a> with some notes
",265995
231,False,False,2019-11-17T06:40:22Z,2019-11-17T11:37:46Z,"Changes since v0.3.1:

 - Fixed the Background Music audio device not being loaded immediately after installation on macOS Catalina. (The installer now tries an additional method of restarting coreaudiod so it will load BGMDriver.)",52422583
232,False,True,2019-09-15T15:53:22Z,2019-10-17T04:00:08Z,,52422583
233,False,True,2019-10-17T01:47:05Z,2019-11-16T08:29:15Z,"Changes since 0.4.0-SNAPSHOT-c024116:
 - Update the Xcode version for Travis builds and make releases drafts.
 - Update a command MANUAL-UNINSTALL.md to work on macOS Catalina.
 - build_and_install.sh: Update the Xcode Command Line Tools check.",52422583
234,False,False,2019-08-13T00:15:43Z,2019-08-13T00:35:46Z,"Changes since v0.3.0:
 - None. I accidentally erased the entitlements (use audio input devices, etc.) when I code signed v0.3.0, so I'm trying again.",52422583
235,False,False,2019-08-11T07:38:29Z,2019-08-11T09:21:27Z,"⚠️There's a bug in this release due to code signing: https://github.com/kyleneideck/BackgroundMusic/issues/233. Get v0.3.1 instead: https://github.com/kyleneideck/BackgroundMusic/releases/tag/v0.3.1

Changes since v0.2.0:
 - Change output device in some cases when devices are added/removed.
 - Update the preferred devices list when the user changes output device.
 - Fix errors logged when the current output device is disconnected.
 - Store the preferred devices list in User Defaults.
 - Move the output device menu items to the main menu.
 - Fix build_and_install.sh failing when run from a path containing spaces.
 - Add an option to use a volume icon instead of the Background Music logo.
 - Fix a crash when BGMDevice's volume is changed.
 - Fix potential minor memory leaks in BGMPreferredOutputDevices.
 - Fix another crash when BGMDevice's volume is changed.
 - Add music player: Google Play Music Desktop Player.
 - Add music player: Music. (Apple renamed iTunes to ""Music"" in macOS Catalina.)
 - Update copyright years.
 - Enable Hardened Runtime in BGMApp, BGMXPCHelper and BGMDriver.",52422583
236,False,True,2019-08-06T07:28:18Z,2019-08-10T13:20:23Z,,52422583
237,False,True,2019-08-05T11:49:49Z,2019-08-05T12:16:06Z,,52422583
238,False,True,2019-06-09T09:49:46Z,2019-06-09T10:35:55Z,,52422583
239,False,True,2019-03-28T07:35:44Z,2019-03-28T08:23:45Z,,52422583
240,False,True,2019-03-27T02:38:50Z,2019-03-27T03:06:06Z,,52422583
241,False,True,2019-03-04T15:01:33Z,2019-03-04T15:20:02Z,,52422583
242,False,True,2018-11-27T05:23:28Z,2018-11-28T02:15:29Z,,52422583
243,False,True,2018-11-13T02:46:21Z,2018-11-13T02:59:32Z,,52422583
244,False,True,2018-11-04T04:35:10Z,2018-11-04T06:13:06Z,,52422583
245,False,True,2018-10-28T06:15:45Z,2018-10-28T06:29:50Z,,52422583
246,False,True,2018-10-24T13:02:46Z,2018-10-24T13:20:50Z,,52422583
247,False,False,2018-10-16T01:39:17Z,2018-10-16T03:16:12Z,"Changes since v0.1.1:
 - Fix BGMOutputVolumeMenuItem tooltip not always being updated.
 - Update the output device name in the UI if its data source changes.
 - Fix the Show More Controls buttons displaying as ""..."".
 - Fix pkg installer not opening BGMApp if relocated.
 - Request user permission to use input devices and Apple Events.
 - Add app volume workaround for Skype. Fixes #112.
 - Add workaround for Discord voice chat volume.
 - Add auto-pause support for Swinsian. See #141.
 - Add workaround for FaceTime volume.
 - Fix BGMApp crashing at launch if BGMDriver isn't installed.
 - Add a volume slider for system sounds.
 - When the output device is changed, update its volume slider.
 - Add new QuickLook bundle ID to fix App Volumes for Finder.
 - Set the OS default audio device back if BGMApp exits abnormally.
 - Add an App Volumes submenu for apps that aren't shown in the dock.
 - Accessibility improvements for the volumes menu items.
 - Set the output volume slider to 0 when the output device is muted.
 - Add an output volume slider above the app volume sliders.
 - Support Finder's Quicklook in App Volumes
 - Ignore UI sounds when auto-pausing.
 - Rename BGMDevice from ""Background Music Device"" to ""Background Music"".
 - Support Parallels in App Volumes.
 - Partial fix for apps' bundle IDs not matching their HAL clients.
 - Fix dropped frames when starting IO.",52422583
248,False,True,2018-10-06T13:39:54Z,2018-10-06T14:03:22Z,,52422583
249,False,True,2018-10-06T04:43:07Z,2018-10-06T05:16:04Z,,52422583
250,False,True,2018-10-06T04:40:02Z,2018-10-06T04:57:33Z,,52422583
251,False,True,2018-10-06T02:47:30Z,2018-10-06T03:08:35Z,"Changes since 0.2.0-SNAPSHOT-ac33909:
 - Fix the Show More Controls buttons displaying as ""..."".",52422583
252,False,True,2018-10-04T12:22:59Z,2018-10-04T12:36:38Z,"Changes since 0.2.0-SNAPSHOT-1a49802:
 - Fix pkg installer not opening BGMApp if relocated.

(Ignore 0.2.0-SNAPSHOT-aa87b16. I got the tag name wrong.)",52422583
253,False,True,2018-10-03T08:44:14Z,2018-10-03T09:04:06Z,"Changes since 0.2.0-SNAPSHOT-75e8d5c: 
 - Hide call to requestAccessForMediaType when compiling on macOS < 10.14.",52422583
254,False,True,2018-10-03T03:45:10Z,2018-10-03T04:08:38Z,"Changes since 0.2.0-SNAPSHOT-08fdef6:
 - Request user permission to use input devices and Apple Events.",52422583
255,False,True,2018-09-23T08:23:58Z,2018-09-23T09:06:06Z,"Changes since 0.2.0-SNAPSHOT-1e5d625:
 - Workaround some Xcode 10 bugs in build_and_install.sh.",52422583
256,False,True,2018-07-02T23:50:45Z,2018-07-03T00:19:07Z,"Changes since 0.2.0-SNAPSHOT-ffa86bb:
 - Add app volume workaround for Skype.",52422583
257,False,True,2018-06-19T12:59:38Z,2018-06-19T13:13:29Z,"Changes since 0.2.0-SNAPSHOT-ed06a25:
 - Add workaround for Discord voice chat volume.",52422583
258,False,True,2018-06-05T10:29:36Z,2018-06-05T10:41:30Z,,52422583
259,False,True,2018-02-25T01:04:11Z,2018-02-25T01:15:54Z,"Changes since 0.2.0-SNAPSHOT-3ba53a5:
 - Add auto-pause support for Swinsian.",52422583
260,False,True,2018-02-24T07:11:21Z,2018-02-24T07:44:40Z,"Changes since 0.2.0-SNAPSHOT-e83d07f:
 - Add workaround for FaceTime volume.
 - Fix BGMApp crashing at launch if BGMDriver isn't installed.
 - Minor bug fixes.",52422583
261,False,True,2017-12-27T06:53:28Z,2017-12-27T08:26:03Z,,52422583
262,False,True,2017-06-22T09:36:17Z,2017-06-22T12:27:51Z,,52422583
263,False,False,2017-06-17T12:21:34Z,2017-06-17T12:31:48Z,,52422583
264,False,False,2017-06-14T02:59:42Z,2017-06-14T14:03:47Z,,52422583
265,False,False,2017-06-14T03:28:29Z,2017-06-14T03:38:57Z,,52422583
266,False,False,2017-06-13T13:18:10Z,2017-06-13T14:10:42Z,,52422583
267,False,True,2017-06-12T04:38:26Z,2017-06-12T04:49:54Z,,52422583
268,False,False,2020-02-24T04:33:51Z,2020-02-24T04:35:04Z,"* Extremely special thanks to @garethsb-sony for a large number of contributions in this release
* PR#1209 Workarounds for two GCC 4.7.2 bugs with lambda functions
* PR#1220 Fix SxS debug-release builds with Visual Studio
* PR#1219 Fix ""Data"" to ""Date"" in the HTTP Server API mapping, and clarify that the indices of these values match the HTTP_HEADER_ID values for HTTP_REQUEST_HEADERS but *not* HTTP_RESPONSE_HEADERS
* PR#1196 Fixing of connections_and_errors::cancel_with_error test which sometimes fires false positive error ""There are no pending calls to next_request.""
* PR#1233 Trim whitespace and nulls the same way.
* PR#1248 Avoid using permissive- with ZW which breaks VS2019
* PR#1182 Support for WinHTTPAL curl-to-WinHTTP adapter
* PR#1253 http_server_httpsys.cpp requires linking against httpapi.lib, http_client_winhttp.cpp does not.
* PR#1263 Remove trailing slash on websocketpp submodule url, which causes checkout failure on CircleCI with git 2.22.0
* PR#1293 Update vcpkg and remove tests that look for web servers that no longer exist
* PR#1288 Fix test case broken by commit f4c863b
* PR#1276 Added comparison overrides to utility::datetime
* PR#1289 Fix various warnings reported by gcc 9.3, and possibly earlier versions
* PR#1334 Update vcpkg and boost on Android
* PR#1306 Change default installation directory for cmake files to cmake/cpprestsdk
* PR#1330 Use LC_ALL_MASK rather than LC_ALL when calling newlocale
* PR#1310 Add TCP_NODELAY to disable Nagle's algorithm in Boost.ASIO-based http_client
* PR#1335 Turn VS2015 back on now that vcpkg is fixed.
* PR#1322 Enable HTTP compression support on all platforms
* PR#1340 Add Ubuntu 18.04 testing.
* PR#1342 Use C++11 synchronization classes under macOS too
* PR#1339 Fix tcp::resolver data race in the asio backend and be defensive against empty results
-- cpprestsdk team <askcasablanca@microsoft.com>  THR, 22 Feb 2020 08:31:00 -0800",23202799
269,False,False,2019-07-16T19:07:11Z,2019-07-16T19:08:13Z,"* Potential breaking change warning: This release changes the ""default"" proxy for the WinHTTP backend to go back to WINHTTP_ACCESS_TYPE_DEFAULT_PROXY. See https://github.com/microsoft/cpprestsdk/commit/60e067e71aebebdda5d82955060f5f0821c9df1d for more details. To get automatic WPAD behavior, set the proxy to auto detect.
* macOS with Brew and iOS builds have been disabled and are no longer being tested because our dependency boost for ios project appears to be broken with current releases of XCode as on the Azure Pipelines machines. We are interested in macOS / iOS folks who know what's going on here in contributing a repair to turn this back on.
* PR##1133 Add switches to make apiscan happy.
* PR##1130 json: {""meow""} is not a valid object
* PR##1150 Undefine compress if it is defined by zconf.h
* PR##1156 Fix broken CI Builds
* PR##1155 Use EVP_MAX_MD_SIZE instead of HMAC_MAX_MD_CBLOCK
* PR##1145 Remove the address_configured flag on tcp::resolver::query
* PR##1143 add ping and pong to message handler
* PR##539 Fix reusing ASIO http_client connecting to HTTPS server via proxy
* PR##1175 Fix issue #1171: Order of object destruction
* PR##1183 FIX: SSL proxy tunnel support with basic auth
* PR##1184 Fix profile being set on the compiler instead of the linker.
* PR##1185 Update boost-for-android for Android NDK r20 and disable macOS Homebrew.
* PR##1187 Replace CPPREST_TARGET_XP with version checks, remove """"s, and other cleanup
* PR##1188 Remove proxy settings detection behavior in ""default proxy mode.""
-- cpprestsdk team <askcasablanca@microsoft.com>  TUE, 16 Jul 2019 09:06:00 +0200
",23202799
270,False,False,2019-04-25T05:16:37Z,2019-04-25T05:17:28Z,"* PR#1120 Fix off by one error in leap years before year 2000, and bad day names
* PR#1117 Parse and emit years from 1900 to 9999, and remove environment variable dependence on Android
* PR#1106 Paranoia for overflow of sprintf buffer in the year 10000
* PR#1101 Update request_timeout_microsecond timeout
* PR#1097 Allow error handling for time out in http_client_asio handle_connect
* PR#1094 Avoid tripping over 32 bit time_t mistakes.
* PR#1093 Don't initialize atomic_flag with 0.
-- cpprestsdk team <askcasablanca@microsoft.com>  WED, 24 Apr 2019 10:57:00 -0800",23202799
271,False,False,2019-03-27T06:59:37Z,2019-03-27T07:00:41Z,"* PR#1088 Fix data race, GitHub #1085
* PR#1084 Fix oauth nonces containing nulls.
* PR#1082 Workaround data-race on websocketpp's _htonll function
* PR#1080 Fix thread not joined
* PR#1076 Rewrite date formatting and parsing
-- cpprestsdk team <askcasablanca@microsoft.com>  TUE, 26 Mar 2019 11:57:00 -0800",23202799
272,False,False,2019-03-20T09:31:50Z,2019-03-20T09:32:25Z,"* PR##1073 Move get_jvm_env back into the crossplat namespace
* PR##1049 Add the missing ssl::context callback in websocket_client_config
* PR##1072 Gate stdext::checked_array_iterator usage on _ITERATOR_DEBUG_LEVEL
* PR##1051 Fix http_client_asio ""https"" with a proxy
* PR##1071 Add --vcpkg-root to repair UWP.
* PR##1041 Update Boost_for_android for Android R19
* PR##1064 Enable testing from root directory
* PR##1057 Returns int64 value in function of seeking to file end on x64 Windows.
* PR##1068 Don't close the output stream when reporting errors reading the body.
* PR##1053 Update vcpkg.
* PR##1032 Fix HTTP/1.0 'Keep-Alive' handling in http_client
* PR##1040 Disable WINHTTP_AUTOPROXY_OPTIONS machinery when using WINHTTP_ACCESS_TYPE_AUTOMATIC_PROXY.",23202799
273,False,False,2019-01-30T06:41:08Z,2019-01-30T06:41:44Z,"* PR#1023 Handle multi-byte unicode characters in json parsing
* PR#1033 Temporary fix for VS2013. Note that VS2013 is still not in support.",23202799
274,False,False,2019-01-19T01:04:44Z,2019-01-19T01:07:01Z,"* PR#973  Address gcc warnings-as-errors in compression code, test improvements
* PR#986  Prevent infinite loop during proxy authentication
* PR#987  Remove use of aligned_union that broke CentOS 7.
* PR#1004 #993, #1002: Add flexibility for iOS building. Adds command line args…
* PR#1009 gcc: Fix compilation with -fno-operator-names
* PR#1019 FIX: crash with std::logic_error when reusing a connection that timed out on the server
* PR#1021 handle null bytes when parsing utf8
* PR#1017 Add in support for adding i386 slice when building for 32-bit targets. Also improve messaging and add means to clean
* PR#1024 http_compression.cpp: fix build with gcc 4.7
* PR#1022 Resolve double free when WinHttpSendRequest fails",23202799
275,False,False,2018-11-14T20:48:56Z,2018-11-14T20:50:06Z,"* PR#938 Allow ppltasks.h and pplxtasks.h to co-exist
* PR#951 Fix incorrect const in reinterpret_cast
* PR#955 Fix UWP missing header
* PR#956 Adds support for OpenSSL 1.1.1
* PR#959 Fix Android build issue by remove the crossplat name space before android parameters
* PR#960 Update vcpkg to latest master to fix VS2015 build.
* PR#966 Fix string size for error message generated by windows_category
* PR#958 Add uri_builder::append_path_raw(...) to allow adding elements to path intentionally beginning with '/' (""//"" will result in the final path value)
* PR#952 cmake: add code to detect system brotli library
* PR#963 Fix Brotli compress_helper early termination issue
* PR#961 Fixes iOS builds and makes it more future proof",23202799
276,False,False,2018-10-31T06:03:22Z,2018-10-31T06:07:38Z,"cpprestsdk (2.10.7)
----------------------
* cpprestsdk now has Azure Pipelines continuous integration.
* Builds for Android and iOS were repaired, now checked in Azure Pipelines to make sure that doesn't bit-rot in the future.
* Several race conditions in the listener were worked around; the listeners remain experimental and are unlikely to productized in their current form; the race conditions are structural, but at least the client tests pass most of the time.
* Incorrect handling of connection pooling bug that caused segfaults on Ubuntu introduced in 2.10.4 has been repaired.
* websocketpp checked in 0.5.1 version has been changed to a submodule and updated to 0.8.1.
* Added an API to set the number of threads in the asio thread pool, see PR#883
* Legacy unmaintained Visual Studio project files have been deleted, please use CMake instead.
* PR#670 Export methods to set/get the ambient scheduler in cpprest dll
* PR#866 Add Transfer-Encoding compression support and extensible compression API
* PR#892 Improve utf8_to_utf16 speed for common path
* PR#897 added URI resolution according to RFC3986
* PR#935 Fix spelling mistakes across the library
* PR#936 Use pplx namespace consistently
* PR#937 Remove _ASYNCRTIMP from ~http_listener() and implement inline
* PR#940 Avoid using identifiers reserved by C++ in header guards
* PR#943 blackjack sample: use vector instead of shared pointer for array
-- cpprestsdk team <askcasablanca@microsoft.com>  MON, 30 Oct 2018 20:32:00 -0800

cpprestsdk (2.10.6)
----------------------
* PR#844 Fix clang build error
-- cpprestsdk team <askcasablanca@microsoft.com>  MON, 30 Aug 2018 16:51:00 -0800

cpprestsdk (2.10.5)
----------------------
* Issue#842 Fix incorrect `cpprest/version.h`
-- cpprestsdk team <askcasablanca@microsoft.com>  FRI, 17 Aug 2018 09:47:00 -0800

cpprestsdk (2.10.4)
----------------------
* Added a `.clang-format` to enable consistent formatting.
* Added support for `Host:` headers changing the checked CNAME field for SSL certificates in WinHTTP and Asio.
* PR#736 passes 0666 to open() for creating files to better match the default behavior for other http clients (wget, etc).
* PR#732 fixes a build issue with clang
* PR#737 taught our cmake to respect the GNUInstallDirs variables
* PR#762 improved handling of dead connections in the connection pool on Asio.
* PR#750 improved error handling in the accept() call in `http_listener`
* PR#776 improved the iOS buildsystem
-- cpprestsdk team <askcasablanca@microsoft.com>  WED, 15 Aug 2018 12:35:00 -0800

cpprestsdk (2.10.3)
----------------------
* Added a root `CMakeLists.txt` to improve support for VS2017 Open Folder.
* PR#809 improves support for `/permissive-` in MSVC
* Issue#804 fixed a regression due to compression support; we no longer fail on unknown Content-Encoding headers if we did not set Accepts-Encoding
* PR#813 fixes build failure with boost 1.63
* PR#779 PR#787 suppress and fix some warnings with new versions of gcc and clang
-- cpprestsdk team <askcasablanca@microsoft.com>  THU, 2 Aug 2018 15:52:00 -0800",23202799
277,False,False,2017-12-15T02:57:43Z,2017-12-15T03:04:54Z,"This is a minor, source only release. Please contact your distribution maintainers for updates to precompiled binaries.

* Improved CMake generation of UWP binaries.
* Fixed regression in CMake versions supported. As listed in the main CMakeLists.txt, we intend to only require 3.0.
* Mirrored changes in the main PPL sources to `Concurrency::details::do_while()`, which yield a significant compiler throughput improvement on MSVC
* Fix issues under `/permissive-`, an on-by-default flag for new projects in VS2017 15.5",23202799
278,False,False,2017-10-21T08:41:28Z,2017-10-21T07:56:37Z,"## Release Notes

This is a source only release. Please contact your distribution maintainers for updates to precompiled binaries.

* Removed VS2013 MSBuild files. Use CMake with the ""Visual Studio 12 2013"" generator.
* Added VS2017 MSBuild files for convenience. It is highly recommended to use [vcpkg](https://github.com/Microsoft/vcpkg) or CMake instead to build the product library.
* Added UWP versions of the Windows Store samples for VS2017.
* Updated minimum required cmake version to 3.0.
* Added CMake config-file support to installation. This should be consumed by doing:
```cmake
find_package(cpprestsdk REQUIRED)
target_link_libraries(my_executable PRIVATE cpprestsdk::cpprest)
```
* Fixed several race conditions and memory leaks in the ASIO `http_client`.
* Fixed process termination bug around certain exceptional cases in all `http_client`s.
* Improved handling of `/Zcwchar_t-` on MSVC. That doesn't make it a good idea.
* Fixed use-after-free in the Windows Desktop `http_client` exposed by VS2017.
* Totally overhaul the CMake buildsystem for much better support of Windows and more shared code between platforms.
* PR#550 adds all remaining official HTTP status codes to `http::status_codes`.
* PR#563 wraps SSL errors on Windows Desktop in `http_exception`s, with more readable descriptions.
* PR#562 and PR#307 fixes building with LibreSSL.
* PR#551 adds convenience wrappers `json::value::has_T_field(T)` for inspecting object values.
* PR#549 fixes a race condition in the ASIO client during header parsing.
* PR#495 fixes a memory leak during proxy autodetection on Windows Desktop.
* PR#496 and PR#500 expand proxy autodetection to also consider Internet Explorer settings on Windows Desktop.
* PR#498 fixes error when handling responses of type NoContent, NotModified, or from 100 to 199.
* PR#398 enables specifying the User Agent used in OAuth2 requests.
* PR#494 improves the BingRequest sample's handling of proxies.
* PR#516 enables certificate revocation checks on Windows Desktop.
* PR#502 improves compatibility with glibc 2.26.
* PR#507 adds `http_request::get_remote_address()` to expose the client's IP address for `http_listener`.
* PR#521 enables use of empty passwords on Windows in `web::credentials`.
* PR#526 and PR#285 improve compatibility with openssl 1.1.0.
* PR#527 fixes a bug in the ASIO `http_client` where the proxy is passed the same credentials as the target host.
* PR#504 makes `uri_builder::to_string()` and `uri_builder::to_uri()` `const`.
* PR#446 adds handling for the host wildchar `+` to the ASIO `http_listener`.
* PR#465 improves compatibility with clang on Linux.
* PR#454 improves compatibility with icc 17.0.
* PR#487 fixes static library builds of `test_runner` on non-Windows platforms.
* PR#415 handles malformed URL requests to the ASIO `http_listener` instead of crashing.
* PR#393 fixes a race condition in the websocketpp `websocket_client`.
* PR#259 fixes several races in the ASIO `http_listener` which result in memory leaks or use after free of the connection objects.
* PR#376 adds `http_client_config::set_nativesessionhandle_options()` which enables customization of the session handle on Windows Desktop.
* PR#365 updates our convenience OpenSSL build scripts for Android to use openssl 1.0.2k.
* PR#336 makes the ASIO `http_client` more consistent with the Windows clients by not appending the port when it is default. This improves compatibility with AWS S3.
* PR#251 dramatically improves UTF8/16 conversions from 6s per 1MB to 3s per 1GB (2000x improvement).
* PR#246 enables TLS 1.1 and 1.2 on Windows 7 and Windows 8.
* PR#308 enables limited IPv6 support to `http_client` and `http_server`, depending on the underlying platform.
* PR#309 fixes a bug in base64 encoding that previously read beyond the input array, causing segfaults/AVs.
* PR#233 adds compression support (deflate and gzip) for Windows Desktop and ASIO `http_client`s based on Zlib.
* PR#218 fixes a memory leak in the UWP `http_client` when processing headers.
* PR#260 fixes inappropriate handling of certain connections errors in the ASIO `http_listener`.",23202799
279,False,False,2016-10-18T19:30:28Z,2016-10-20T23:03:08Z,"### Release Notes

**Linux**
- Merged #70 & #65 which should fix building on CentOS/RedHat.
- #143 Work around SSL compression methods memory leak in ASIO.
- #82 Fixed ambiguous call to begin when using with boost library.
- #117 Fix header reading on linux listener using HTTPS.
- #97 Add support for basic authentication.
- #206 remove warnings-errors for system-headers under linux; honour http_proxy env-variable.

**OSX**
- #114 Removed redundant std::move() that was causing errors on Xcode 7.3 gcc.
- #140 Fix returning std::move causing build failure on osx.

**Android**
- #137 Fix android build script for linux, remove libiconv dependency.

**Windows**
- #150 Add static library for windows xp.
- #115 Added projects which target v140_xp to resolve Issue#113.
- #71 Add a project for compiling as a static lib.

**WebSockets**
- #102 Added websocket_client_config option for ssl verify mode.
- #217 Fixed race condition in Casablanca WinRT Websocket client.

**http_client**
- #131 Update to include access control allow origin.
- #156 add host based connection pool map on non windows http_clients.
- #161 Header parsing assumes whitespace after colon.
- #146 Fix ambiguous reference to ‘credentials’

**Uri**
- #149 Some perf improvements for uri related code.

**Json**
- #86 Fix obtaining raw string_t pointer from temporary.
- #96 Fix typo hexidecimal/hexadecimal.
- #116 Fixing latin1 to UTF-16 convertion.

**pplx**
- #47 Fixing .then to work with movable-only types.

**Misc**
- Switched license from Apache 2.0 to MIT
- Streamlined development model by removing the ""development"" branch. Please make PRs against master form this point forward and use tags to retrieve a specific stable version.
",23202799
280,False,False,2016-02-26T03:45:24Z,2016-02-26T19:43:59Z,"### Release Notes

**oauth 1.0**
- Merged #66 which adds proxy support for oauth1_config class.

**oauth 2.0**
- Merged #1 which adds proxy support for token_from_code and token_from_refresh methods.
- Merged #38: Include cpprest/details/web_utilities.h to bring in the definition for web_proxy.

**http_client**
- Merged #39: Add TLS extension SNI for boost asio based http_client. Resolves #35.
- Merged #40 which allows specifying a host header in http requests.
- Merged #41 which adds HTTP and HTTPS client proxy support for non-Windows platforms.
- Merged #55 which fixes a bug where http_client_asio took forever to cancel.

**http_listener**
- Merged #16: win32 http_listener response refactor.

**iOS**
- Merged #23 which fixes build errors on iOS. Resolves #12.

**Windows**
- Merged #26: Static lib compilation for UWP.

**Websockets**
-  Merged #30 which adds a CPPREST_EXCLUDE_WEBSOCKETS option to CMake to allow removing all OpenSSL and Boost dependencies.
-  Merged #37 which fixes C4592 warning under Visual Studio 2015 Update 1 in websockets++. Resolves #34.

**Buildsystem**
- a075fb2b fixes issues with MSBuild's multicore switch (/m).
- Merged #30 which adds PCH support for the Visual Studio generator via CMake.

**Miscellaneous**
- Merged #17 which removes an unused variable in streams.h .
- Merged #20 which adds unsolicited pong support with integration tests.
- Merged #43 which fixes compilation on FreeBSD.
",23202799
281,False,False,2013-05-22T18:59:04Z,2015-11-20T22:34:31Z,"### Release Notes

This release stabilizes several APIs, fixes multiple customer reported issues and adds the following improvements:  
- One msi for each Visual Studio release.  
- Minor additions to stream buffers.  
- Added the ability to programmatically control chunk size in http_client API.  
- NuGet support to ease project setup and SDK servicing. [https://nuget.org/packages/cpprestsdk/](https://nuget.org/packages/cpprestsdk/)  

<u>A note on breaking changes:</u> while we will make every attempt to minimize the number of breaking changes between each release of Casablanca, we cannot guarantee that there will be no breaking changes in a given update. Your code will need to be recompiled after picking up a new version of the code, and it may need some editing in order to continue to work.
",23202799
282,False,False,2013-07-08T21:35:54Z,2015-11-20T22:33:02Z,"### Release Notes

Release Notes:
-   [HTTP listener library](https://casablanca.codeplex.com/wikipage?title=HTTP%20Listener) (http_listener.h, this is still in the incubation phase under the experimental namespace )
-   Support for Windows Phone 8 (Incubation phase, has not undergone rigorous testing)
-   Added progress reporting capabilities to http client requests
-   Fixed several customer reported issues

Breaking changes:  
[Added new subfolders to make header files less generic](https://casablanca.codeplex.com/workitem/5):
-   compat
-   pplx
-   cpprest

[File name changes to reflect versioning](https://casablanca.codeplex.com/wikipage?title=Versioning&version=18)
",23202799
283,False,False,2013-08-22T06:16:02Z,2015-11-20T22:31:27Z,"### Release Notes

The following is a list of the major aspects of this release:  
-   Adding support for HTTPS for the Linux version of the library
-   Adding experimental support for Windows XP (client features only)
-   Some performance improvements, especially JSON parsing
-   Added size() and has_size() to stream buffers
-   Side-by-side installation with v1.1
-   As always, bug fixes

We are labeling this release 'Beta' since there are features that are still experimental, i.e. haven't been tested in depth:  
-   Windows Phone 8
-   Windows XP client features
-   http_listener

**Note on Visual Studio 2010 support**  

Our plan is to make this the last release that supports Visual Studio 2010. We're planning to add support for Visual Studio 2013 in the next release. However, if VS 2010 is still important to you, let us know: [https://casablanca.codeplex.com/discussions](https://casablanca.codeplex.com/discussions)
",23202799
284,False,False,2013-10-14T19:29:12Z,2015-11-20T22:29:40Z,"### Release Notes

This release fixes multiple customer reported issues as well as the following:
-   Full support for Dev12 binaries and project files
-   Full support for Windows XP
-   New sample highlighting the Client and Server APIs : BlackJack
-   Expose underlying native handle to set custom options on http_client
-   Improvements to Listener Library

**Note:** Dev10 binaries have been dropped as of this release, however the Dev10 project files are still available in the Source Code
",23202799
285,False,False,2013-11-14T23:08:09Z,2015-11-20T22:26:49Z,"### Release Notes

This is a point release that fixes the following issues with 1.3:  
- Two additional APIs to determine whether a json::value is a integer number or a double number (this fix was requested by a partner team at Microsoft)  
- Fix an issue with Casablanca WinRT binaries that caused them to be rejected by the App Store.
",23202799
286,False,False,2013-12-06T20:23:15Z,2015-11-20T22:25:32Z,"### Release Notes

Do you like having to mess with setting up header file includes, library, and dll paths? Consider trying out using our [Nuget package](https://casablanca.codeplex.com/wikipage?title=Using%20NuGet%20to%20add%20the%20C%2b%2b%20REST%20SDK%20to%20a%20VS%20project&referringTitle=Documentation) instead of our MSI. Whether you target desktop, XP, Windows store, Windows Phone all you have to do is just reference the package and you are ready to go.  

Please note XP and Windows Phone 8 development are only supported with Visual Studio 2012.  

In addition to the regular bug fixing this release includes the following:  
-   Json performance improvements, 3x to 4x improvements for parsing, 2x to 3x for serialization. With more improvements coming in future releases.
-   Added line/column information for Json parsing.
-   Added timeout options to http_listener - only implemented on Windows so far.
-   Added XP and Windows Phone 8 support to our Nuget package for VS 2012.
-   Added a new http_listener sample CasaLens.
-   Added project files for samples for VS 2013.
",23202799
287,False,False,2014-03-19T23:46:11Z,2015-11-20T22:17:45Z,"### Release Notes

Starting with 2.0.0 we are only distributing Windows binaries through our [NuGet package](https://casablanca.codeplex.com/wikipage?title=Using%20NuGet%20to%20add%20the%20C%2b%2b%20REST%20SDK%20to%20a%20VS%20project&referringTitle=Documentation). This allows us to be more efficient and not maintain an MSI. We also feel it gives users a better experience not having to mess with include paths, libs, and dlls.  

Here is a summary of the changes for this release, please note for the first time we made a couple of breaking API changes in our JSON library. We take breaking changes very seriously and believe these are valuable improvements that allow us to continue to expand and improve the API moving forward.  

## Misc
-   General bug fixes – including many reported on CodePlex
-   Removed MSIs – now only distributing Windows binaries through NuGet
-   Added Visual Studio debugger natvis file to NuGet package
-   Added support for cmake for non-Windows platforms

## WebSockets
-   Added initial Beta implementation for WebSockets on Windows store, other platforms will come in future releases

## Platform Support
-   Added support for OS X
-   Added support for iOS

## Http Client
-   Added support for request cancellation through cancellation_tokens for Windows platforms, others will be added in the future

## Json
-   Added 64 bit integer support. There is a new class json::number that can be retrieved with the json::value::as_number() API. It contains methods for testing and getting a number as int32, uint32, int64, and uint64.
-   Changed the underlying storage for arrays and added a new class json::array for operations specific to arrays. Can be obtained from the json::value::as_array() API.
-   Changed the underlying storage for objects and added a new class json::object for operations specific to objects. Can be obtained from the json::value::as_object() API.
-   **Breaking Change** - Changed how iteration over json arrays and objects is performed. No longer is an iterator of std::pair<json::value, json::value> returned. Instead there is a separate iterator for arrays and objects on the json::array and json::object class respectively. This allows us to make performance improvements and continue to adjust accordingly. The array iterator returns json::values, and the object iterator now returns std::pair<string_t, json::value>.
-   25% to 30% improvement for parsing and traversing the object model
-   **Breaking Change** - Const overload of index operator[] on json::value – in prior releases the behavior of the const/non-const overloads where different. This is inconsistent and confusing. The operator[] now can always end up modifying the underlying internal storage so is never const. If you want true const semantics, the json::value::at(…) API can be used.
-   Deprecated a couple of inconsistent/confusing or bad performance APIs, all have functional replacements
  -   json::value::to_string() – this API really performance serialization and is easy to confuse with json::value::as_string(). The replacement is json::value::serialize().
  -   json::value::get(…) – this API had bad performance since it returned a json::value with value semantics. It also can be confusing to use if you think you are modifying the underlying internal data. Instead use operator[] or json::value::at(…).

## Uris
-   Performance improvement avoiding std::isalnum’s global lock
-   Moved URI functionality from web::http namespace to just under web. For backwards compatibility using statements have been inserted for customers directly using from http_client.h.

## Http Listener
-   Breaking Change - Removed pipeline staging feature. It was fundamentally broken and didn’t work at all for processing responses.
-   Fixed issues with the close semantics of shutting down a listener.

## Streams
-   Deprecated ‘blittable’ versions of stream read/write. This API is dangerous and only works for trivial types on single byte character streams. It also has bad performance. The functionality can easily be accomplished with the other read/write overloads or getn/putn directly on the stream buffer.

## VS solution files and samples
-   Cleaned up our solution files and build instructions for all the platforms a bit
-   Made sure project files exist for both Visual Studio 2012 and 2013, when appropriate
",23202799
288,False,False,2014-04-03T02:53:01Z,2015-11-20T22:15:58Z,"### Release Notes

This is a point release that fixes the following customer reported issues:  
- Precision issue with parsing doubles in the JSON library.  
- http_client was not properly detecting the message body length when indicated by closing connection.  
- Query strings were encoded twice at the listener side.  
- Large file size of the CppRest Nuget package.  

Also, please note that we are only distributing Windows binaries through our [NuGet package](https://casablanca.codeplex.com/wikipage?title=Using%20NuGet%20to%20add%20the%20C%2b%2b%20REST%20SDK%20to%20a%20VS%20project&referringTitle=Documentation).
",23202799
289,False,False,2014-06-11T20:57:53Z,2015-11-20T22:06:07Z,"### Release Notes

Here is a summary of the changes included in this release:  

**Websockets Beta on non-Windows store platforms:**  
We now have initial beta implementation of websockets on all platforms: Linux, OS X, iOS, Windows Desktop.  
This library is written on top of Websocketpp, which uses boost. Hence you will need the Boost packages to build the C++ REST SDK on Windows. The ""How to setup, build, and run tests on Windows"" page describes how to fetch the Boost dependencies.  

**Windows Phone 8.1 support:**  
Windows Phone 8.1 binaries will be shipped with our NuGet Package.  

**Additional features:**
-   HTTPS support for http_listener on Windows.
-   Updated the Linux/OS X/iOS binary name to include the versioning.
-   Added XP support for 2013.
-   Additional Websockets features on Windows store: Added support for sending HTTP headers, authentication, proxies.
-   Miscellaneous bug fixes in streams, http_listener and other code cleanup.

A highlight of this release is it includes community contributions for some Casablanca features. A special thanks to the contributors for helping improve Casablanca for everyone. If you are interested in making contributions, contact us at askcasablanca at Microsoft dot com.  

Going forward, we will be doing all development publicly on CodePlex. This implies:
-   The “development” branch will always be up-to-date with our latest changes.
-   We will actively track the features and bug fixes that we are working on under the CodePlex:Issues section.
",23202799
290,False,False,2014-08-18T15:35:06Z,2015-11-20T22:02:05Z,"### Release Notes

### Features

**oAuth** _(experimental)_
-   Added library support for oAuth 2.0 and 1.0 in an experimental namespace while we fine tune the API.

**Android**
-   Added support for the Android platform. Please note SSL certification validation for the http_client isn't implemented yet, so using https with the http_client will fail during handshake unless certification validation is disabled. Will be fixed in next release, [bug 242](https://casablanca.codeplex.com/workitem/242). UPDATE: Please note this has been fixed in the development branch now.

### Bug Fixes & Improvements

**Linux**
-   Updated to requirements for Boost to version 1.54 and Ubuntu 14.04.

**OS X, iOS**
-   Replace internally to use boost locks instead of from standard library due to [bug](https://casablanca.codeplex.com/workitem/199).

**http_client**
-   Improve timeouts to be reset and work properly when data is still being written.
-   Added configuration option to buffer request body data on Windows Desktop. This can be helpful for situations where authentication challenges might occur.
-   Improved performance of Windows Desktop client significantly when dealing with HTTP responses if setting the chunksize appropriately.
-   Removed http_response::error_code() API. This was bad API that shouldn't have existed. Error codes are reported through http_exception with a std::error_code.
-   Added option to extract_string and extract_json to force regardless of Content-Type header and treat as UTF-8.
-   Added tcp socket connection pooling on our non-Windows http_client implementation.
-   Implemented http_client cancellation on Linux/iOS/OS X.
-   Implemented SSL server certificate checking for iOS/OS X.

**http_listener**
-   Fix a merge error that accidentally removed https support on Windows.
-   Improve close semantics so you no longer have to make sure to respond to all requests and destroy all http_request/http_response instances, [bug 205](https://casablanca.codeplex.com/workitem/205).
-   Fix an issue where an error during processing could cause a hang on iOS/OS X/Linux.

**websocket client**
-   Adding support for Windows Phone 8.1.
-   BREAKING API CHANGE - Removed the APIs for sending message fragments, we only support sending full messages.
-   BREAKING API CHANGE - moved specifying the host URI from the constructor to the connect API.

**json**
-   Added application/x-json to known MIME types. [Bug 197](https://casablanca.codeplex.com/workitem/197).

**miscellaneous**
-   Changes to make work for FreeBSD 10+
-   Added options to cmake for building samples, tests, separately
-   Removed a bunch of unnecessary defines from the Linux/apple/windows compat header files.
",23202799
291,False,False,2014-11-21T22:27:56Z,2015-11-20T21:57:45Z,"### Release Notes

#### Please note this will be the last release that we include binaries for Visual Studio 2012 in our NuGet package.

**http_client**
-   Implemented server certificate verification on Android. [#242](https://casablanca.codeplex.com/workitem/242)
-   Added usage of Boost ssl::context::default_workarounds for compatibility with somewhat broken servers.
-   Fixed issue with server certification verification if multiple requests are made on iOS, OS X, and Android.
-   Remove unnecessary setting of Content-Length header in HTTP requests to zero.
-   Updated documentation for http_request default constructor and made default to the HTTP GET method to avoid ambiguity. [#273](https://casablanca.codeplex.com/workitem/273)
-   For sending request bodies added overloads on Windows for directly working with UTF-8 strings. This saves copies and extra moves on many platforms.
-   Fixed several issues around timeouts and cancellation with the Boost based implementation. Also addressed several places timeouts weren't being handle properly. [#280](https://casablanca.codeplex.com/workitem/280)
-   Improved error messages with WinHttp based implementation to include error code and message in the exception what() string.
-   Fixed an issue where a blocking wait was being used to close the response stream and any exceptions coming out of the returned task were not handled.

**websocket_client**
-   All of the websocket features have been moved out of the experimental namespace.
-   Implemented 'wss' support for Android/iOS/OSX/Linux/Windows desktop. [#255](https://casablanca.codeplex.com/workitem/255)
-   HTTP headers for initial HTTP request can be specified now on the non-winrt implementation as well. [#251](https://casablanca.codeplex.com/workitem/251)
-   Added subprotocol API support. New APIs exist on <span class=""codeInline"">websocket_client_config</span> class. [206](https://casablanca.codeplex.com/workitem/206)
-   Added overloads for <span class=""codeInline"">websocket_outgoing_msg::set_utf8_message() and websocket_outgoing_msg::set_binary_message()</span> which allows the user to not specify stream length. [#152](https://casablanca.codeplex.com/workitem/152)
-   Poco is no longer used as test server for WinRT tests, Websocketpp is used in all cases. [#221](https://casablanca.codeplex.com/workitem/221)
-   Improved parameter passing in many locations, adding r-value references for string message data.
-   Improved error messages with both the websocketpp and winrt implementations.
-   Updated websocketpp library to 0.3.0 version.
-   Added a Visual Studio visualizer for websockets. [#120](https://casablanca.codeplex.com/workitem/120)
-   Fixed spelling mistake on an API. Renamed websocket_incoming_message::messge_type() to websocket_incoming_message::message_type().
-   Storage improvements on websocket message classes. Saving a heap allocation, a pointer, and a size_t.
-   Fixed connection abort\disconnect issue in winrt implementation. [#181](https://casablanca.codeplex.com/workitem/181)

**http_listener**
-   Initiating multiple <span class=""codeInline"">close()</span> calls on an <span class=""codeInline"">http_listener</span> no longer results in a race condition. Note: <span class=""codeInline"">~http_listener</span> does invoke <span class=""codeInline"">close()</span>, even though the user should close it before destruction. [#192](https://casablanca.codeplex.com/workitem/192)

**streams**
-   Writing to standard C++ I/O streams with <span class=""codeInline"">read_to_end()</span> will now throw an exception if it fails. [#244](https://casablanca.codeplex.com/workitem/244)
-   Fixed reading files larger than 4GB on Windows, if on 64bit. [#161](https://casablanca.codeplex.com/workitem/161)
-   Including the <span class=""codeInline"">streams.h</span> header file no longer injects a specialization into <span class=""codeInline"">std::</span>. [#125](https://casablanca.codeplex.com/workitem/125)
-   Fixed several places that could cause blocking waits. [#135](https://casablanca.codeplex.com/workitem/135)
-   Removed an unnecessary size_t from container buffer, saving space.

**json**
-   Adding the ability to perform exception free parsing. All the parsing APIs now take a std::error_code as a second parameter by reference.
-   Fixed issues around JSON library assuming the current local is ""C"". [#118](https://casablanca.codeplex.com/workitem/118)
-   Added overload when constructing json string values to indicate whether or not the string contains any characters that need to be escaped. If the string is known to not contain any characters that need escaping, then the performance is better.
-   Fixed issue with Unicode escaping for code points over 127. [#252](https://casablanca.codeplex.com/workitem/252)

**misc**
-   The <span class=""codeInline"">run_tests.sh</span> script has been removed. The tests can be run by invoking the testrunner directly. [#182](https://casablanca.codeplex.com/workitem/182)
-   Various reference documentation improvements.
-   Updated .gitignore to account for NuGet packages directory. [#282](https://casablanca.codeplex.com/workitem/282)
-   Passwords are now stored in memory encrypted. The API web::credentials::password() has been deprecated.
-   Renamed some folders to use lower case names.

**Windows**
-   Added support for Visual Studio 2015 for desktop applications. [#278](https://casablanca.codeplex.com/workitem/278). Please note websockets are not included with Visual Studio 2015 yet.
-   Added support for Windows Phone 8.1 Silverlight. [#227](https://casablanca.codeplex.com/workitem/227)
-   Fixed issue with the XP project file not loading correctly in the solution. [#262](https://casablanca.codeplex.com/workitem/262)
-   Visual Studio project files have there packages.config separated out, only pulling in the exact NuGet packages necessary for that project now. [#285](https://casablanca.codeplex.com/workitem/285)
-   Added OpenSSL as a new dependency on Windows desktop, for secure websockets. Due to the unconditional dependency this causes the OpenSSL dlls by default to be included in the Windows Store app package. There are a variety of ways to temporarily to work around this issue. The vcxproj file can be directly edited to remove importing the OpenSSL targets file. Or the NuGet package can be installed from the using the [NuGet package manager console](http://docs.nuget.org/docs/start-here/Using-the-Package-Manager-Console) to avoid the dependencies:
  -   Install-Package -Id cpprestsdk -IgnoreDependencies

**Android**
-   Updated to Android NDK r10.
-   Moved from using gcc to clang.
-   Moved to produce a static library as the default instead of a shared library.
-   Added a [NuGet package](https://www.nuget.org/packages/cpprestsdk.android/) for cross platform development with [Visual Studio 2015](http://blogs.msdn.com/b/vcblog/archive/2014/11/12/cross-platform-mobile-development-with-visual-c.aspx), currently only supporting the ARM architecture.

**iOS**
-   Updated iOS 8 SDK.
-   Updated iOS build script to use a patch to fix the Boost version used to be 1.56.
",23202799
292,False,False,2014-12-23T20:34:10Z,2015-11-20T21:55:35Z,"### Release Notes

**oauth**
-   Fixed memory leak with OAuth 1 in the success case. [#321](https://casablanca.codeplex.com/workitem/321?FocusElement=CommentTextBox)
-   OAuth1 added support for parameters in POST request body if Content-Type is application/x-www-form-urlencoded.
-   OAuth1 fixed some parameters which were incorrectly encoded twice.
-   OAuth1 added support for additional provider parameters on the token.

**websocket_client**
-   Added a new websocket_client class, websocket_client_class, that supports using callbacks instead for receiving messages and when the connection is closed. [#15](https://casablanca.codeplex.com/workitem/163)
-   Fixed issues around the websocket_client destructor taking the loader lock causing hangs/crashes if dynamically loading/unloading in a dll at runtime on Windows. [#309](http://ttps://casablanca.codeplex.com/workitem/309), [#233](https://casablanca.codeplex.com/workitem/233)
-   Fixed memory leaks coming from OpenSSL when using secure websocket client.

**http_client**
-   Fixed http_client constructor taking parameters by value and performing a lot of moves and sometimes copying again. Now everything cleaner is passed by const reference. In the future if performance critical another overload can be added.
-   Removed unnecessary exception_ptr stored per request on all but WinRT platforms, saving space.
-   Misc cleanup in asio based http_client, renaming classes to not contain 'linux', making more data/methods private, removing some unnecessary usage of shared_ptr parameters and unnecessary indirection.
-   Fixed memory leak in asio based http_client with 'https' requests. [#326](https://casablanca.codeplex.com/workitem/326)
-   Fixed race condition in asio based http_client when obtaining a connection from the connection pool. [#320](https://casablanca.codeplex.com/workitem/320?FocusElement=CommentTextBox)
-   Deprecated http_client_config::set_guarantee_order(...) option. It is confusing and simplifies the implementation if removed. If request ordering is a requirement it can always be done manually with task continuations. In the future a better option to expose would be to configure the max number of allowed concurrent connections.
-   Fixed an issue in Boost based http_client where connections that encounter an error were being pooled for reuse. Now all connections that hit any errors are properly shutdown and closed.

**http_listener**
-   Updated to Boost based implementation to include underlying Boost error code in exceptions. [#224](https://casablanca.codeplex.com/workitem/224)
-   Updated a bunch of parameters in Boost based implementation to pass by const reference instead of by value.
-   Fixed problem in Boost based implementation where if an error occurred while processing the request body then the event from http_request::content_ready() won't be signaled. [#220](https://casablanca.codeplex.com/workitem/220)

**uri**
-   Fixed issue with uri_builder not including user information when calling to_string() and to_uri(). [#329](https://casablanca.codeplex.com/workitem/329)

**json**
-   Fixed a small memory leak in locale support for json library.

**miscellaneous**
-   Moved all the non public headers under the cpprest include folder into a details subfolder.
-   Removed a bunch of unnecessary pragma warning suppressions. This removes a ton of warnings when using Clang.
-   Renamed a bunch of source files to better reflect their contents. For example http_linux.cpp is now http_client_asio.cpp.
-   Cleaned up and combined the *_compat.h header files into one more manageable file making it easier to share settings.
-   Removed a bunch of unnecessary macros/defines.
-   Public API code documentation improvements for reference docs.
-   Fixed a conversion bug in datetime::utc_now() causing the seconds to be off potentially by 100 nanoseconds.
-   Added /detectleaks option for TestRunner when running on Windows.

**Windows**
-   Updated all the solution files to use the VS2013 shared projects feature. With this change all the source code is present in the IDE regardless of the platform. Now it is easier to develop in VS for other platforms as well.
-   Removed the _MS_WINDOWS macro, _WIN32 should be used instead.
-   Updated NuGet package to include CPPREST_TARGET_XP define if targeting XP, otherwise http_client_config size mismatches can occur leading to crashes.
-   Fixed an issue with _PHONE8_ define causing problems if not defined when targeting Windows Phone 8. The macro has now been removed.
-   We now statically link with OpenSSL on Windows and so our NuGet package no longer has the OpenSSL dependency. This makes deployment easier for customers. [#308](https://casablanca.codeplex.com/workitem/308?FocusElement=CommentTextBox)
-   Worked around a VS2015 compiler devirtualization bug causing AVs, using /d2notypeopt. [#314](https://casablanca.codeplex.com/workitem/314), [#315](https://casablanca.codeplex.com/workitem/315)
-   Changed name of powershell VS setup script for VS2015.

**Android**
-   Added Android vcxproj files for Visual Studio and included them in the solution files.
-   Fixed incorrect _M_ARM macro check that lead to websockets being excluded on Android.
-   Added support for the Windows x86 emulator. Android NuGet package now contains binaries for it as well.
-   Fixed lots of warning with Clang, turned on treating warnings as errors when building on Windows. [#323](https://casablanca.codeplex.com/workitem/323)
-   Added vxproj files for tests and an Android test runner.

**iOS**
-   Added a XCode unit test bridge to enable easily running tests for iOS. Can be used from command line with xcodebuild. [#105](https://casablanca.codeplex.com/workitem/105)
",23202799
293,False,False,2015-03-18T20:39:39Z,2015-11-20T21:53:05Z,"### Release Notes

**NuGet Packages**  
The NuGet packages have been significantly restructured. Instead of having one massive package containing binaries for all the different platforms we support, each individual Visual Studio project file now produces its own package. For example for Windows desktop using the v120 toolset the following package contains everything you need:  

> [cpprestsdk.v120.windesktop.msvcstl.dyn.rt-dyn](https://www.nuget.org/packages/cpprestsdk.v120.windesktop.msvcstl.dyn.rt-dyn/)

Another example, for Windows store applications with the v120 toolset the following package contains everything you need:  

> [cpprestsdk.v120.winapp.msvcstl.dyn.rt-dyn](https://www.nuget.org/packages/cpprestsdk.v120.winapp.msvcstl.dyn.rt-dyn/)

Splitting into smaller package allows users to pick only the binaries that are actually needed saving download time and storage space. As part of this we've stopped stripping symbols so our packages contain full pdbs. If you download the source code from CodePlex you have full source code debugging.  

For backwards compatibility, and ease of use for people who want everything in one download, each individual package is pulled together into an aggregate package containing all the packages as dependencies.  

> [cpprestsdk](https://www.nuget.org/packages/cpprestsdk/)

Please note binaries for Visual Studio 2012 have been removed from the Nuget package. The project files still are in the repository and remaining building. At a future release we will remove the project files as well.  

**Android**
-   Fixed issue in CMakeLists.txt where parenthesis were incorrectly used instead of brackets.
-   Fixed issue in CMakeLists.txt where pplxlinux.cpp source file was missing.
-   Added Android TestRunner packing androidproj to build.

**Windows**
-   Fixed several code analysis warnings.
-   Updating NuGet package for missing OpenSSL license, also patched 2.4.0's NuGet package.
-   Fixed not working on XP issue because of crypto API. [#331](https://casablanca.codeplex.com/workitem/331), [#334](https://casablanca.codeplex.com/workitem/334)
-   Fixed several functions missing an explicit calling convention. This caused problems if you changed the calling convention from the cdecl.
-   Added support for Windows on Devices/Galileo. [#217](https://casablanca.codeplex.com/workitem/217)
-   Added option to force using PPLX on Windows threadpool instead of PPL on the Concurrency Runtime. Library can be rebuilt using CPPREST_FORCE_PPLX macro. For some scenarios with lots of tasks this can lead to performance improvements and better CPU utilization. With VS2015 PPL tasks run on the Windows threadpool by default. [#341](https://casablanca.codeplex.com/workitem/341)
-   Updated all binaries to use whole program optimizations, slightly decreasing binary size and small potential performance improvements.
-   Merged pull request adding support for CMake for Windows desktop.

**OSX**
-   Merged a pull request to work around a FindOpenSSL.cmake issue, enabling it to find Homebrew's copy.
-   Added support for iOS 64bit simulator. [#196](https://casablanca.codeplex.com/workitem/196)

**websocket_client**
-   Fixed a race condition in Websocket++ based implementation during websocket client destructor which would sometimes result in an AV/Segfault.
-   Added proxy support for Websocket++ based implementation.
-   Added support for Server Name Indication (SNI) to Websocket++ based implementation.
-   Updated server certificate verification to accept SERVER_GATED_CRYPTO and SGC_NETSCAPE usage for Websocket++ based implementation on Windows.

**pplx**
-   Merged a pull request lazy instantiating the underlying threadpool used. Allows for forking processes in certain circumstances. [#68](https://casablanca.codeplex.com/workitem/68)

**http_client**
-   Made std::function parameter to http_client::add_handler passed by const reference.
-   Fixed invalid check in WinHTTP based implementation causing autologon security level to be high if credentials are not provided.
-   Added extract_utf8string and extract_utf16string to http_request and http_response classes. This allows uses either UTF-8 or UTF-16, instead of utility::string_t, more efficiently regardless of the platform.
-   Implemented native handle API for non-Windows platforms exposing Boost.Asio structures. This allows for configuring additional options like client certificates for example. [#168](https://casablanca.codeplex.com/workitem/168)
-   Fixed bug in Boost.Asio based implementation that incorrectly caused multiple handshakes to occur when reusing connections with HTTPS.
-   Fixed bug incorrectly setting the Content-Length header when not using the ""C"" locale.

**json**
-   Fixed issue where the JSON library assumes char is a signed type, however C++ doesn't guarantee this. On ARM with Clang for example char is an unsigned type. This lead to incorrect parsing.

**miscellaneous**
-   Merged pull request adding http_constants.dat to be installed with 'make install'.
-   Deprecated utility function web::http::bind, this was an implementation detail and really never should have been part of the API.
-   Added overloads that accept a std::locale for utility::conversions::print_string and utility::conversions::scan_string.
-   Fixed several locations where a stringstream was being used and assumed the ""C"" locale was set.
-   Merged pull request fixing bug with nullptr from SafeInt3.hpp with GCC. [#340](https://casablanca.codeplex.com/workitem/340)
-   Moved internal safeint types to msl::safeint3 namespace to avoid conflicting with Visual Studio versions. [#216](https://casablanca.codeplex.com/workitem/216)

**tests**
-   Fixed race conditions in close_callback_client_from_server
-   Added proper synchronization to test_websocket_server (preventing some race conditions). [#305](https://casablanca.codeplex.com/workitem/305)
",23202799
294,False,False,2015-06-01T17:35:58Z,2015-11-20T21:49:12Z,"### Release Notes

**streams**
-   Deprecated the streambuf::putn API. In some cases with file streams this API makes a copy. To be more efficient and not break existing code a new function putn_nocopy has been created. This makes it clear to users they need to ensure the pointer data provided is valid until the returned task is completed.
-   File streams cleanup improvements: replacing C style casts, updating some shared_ptr parameters to const reference, and removed unnecessary data structures saving heap allocations and space. Fixes [#353](https://casablanca.codeplex.com/workitem/353), [#126](https://casablanca.codeplex.com/workitem/126)

**json**
-   Added ability to erase elements from a json array or object. [#147](http://casablanca.codeplex.com/workitem/147)
-   Added missing static factories for working with 64bit integers to the json::value class. [#351](http://casablanca.codeplex.com/workitem/351)
-   Fixed improper serialization of control characters that should always be Unicode escaped.
-   Fixed issue with parsing and then serializing not properly escaping necessary characters if parsed originally from a stream. [#259](https://casablanca.codeplex.com/workitem/259)
-   Updated json::value::as_number() and json::value::as_string() to return by const reference.
-   Made json::object copy constructor not private. Also removed a few unnecessary copy constructors and stick with compiler generated.

**http_listener**
-   Fixed potential crash on Windows that could occur in some cases if the client sent and invalid URI. [#267](http://casablanca.codeplex.com/workitem/267)
-   Fixed potential hang on Windows if running on a single core machine. [#106](https://casablanca.codeplex.com/workitem/106)
-   Merged [pull request](https://casablanca.codeplex.com/SourceControl/network/forks/gandziej/issue375/contribution/8194#!/tab/changes) fixing issue with listeners not being properly remove if port is in use on non-Windows. [#375](http://casablanca.codeplex.com/workitem/375)

**websocket_client**
-   Updated Websocket++ version to 0.5.1.
-   Added tests for Windows Runtime websockets client. [#223](https://casablanca.codeplex.com/workitem/223)
-   Removed unnecessary extra event in Windows Runtime implementation from websocket client.

**oauth 2.0**
-   Allow conversions for the OAuth 'expires_in' field from a JSON string value to a numeric value. [#381](https://casablanca.codeplex.com/workitem/381)

**pplx**
-   Merged [pull request](https://casablanca.codeplex.com/SourceControl/network/forks/LeonidCSIT/379/contribution/8218) fixing deadlock if an exception occurs while trying to schedule a task. [#379](https://casablanca.codeplex.com/workitem/379)

**miscellaneous**
-   Updated some code documentation comments to improve reference documentation.
-   Merged [pull request](https://casablanca.codeplex.com/SourceControl/network/forks/tiki4/centos7/contribution/8119) qualifying web::credentials namespace in http_client authentication_tests.cpp to avoid collisions with OpenSSL.
-   Fixed locale based test cases to silently pass if the necessary locale isn't installed on the machine. [#354](http://casablanca.codeplex.com/workitem/354)
-   Removed a bunch of unnecessary MSBuild properties from test vcxproj files. [#264](https://casablanca.codeplex.com/workitem/264)
-   Changed safeint.hpp to use pragma once instead of ifdef guard.

**Windows**
-   Removed DllMain and global process exiting flag as no longer needed.
-   Removed Visual Studio 2012 project files. VS2012 is no longer supported.
-   Added support for Visual Studio 2015 RC, preview is no longer supported.
-   Fixed problem with CasaLens sample not compiling due to std::bind with some versions of Visual Studio 2015.
-   Removed a bunch of Windows specific string conversion code, replaced with C++ standard equivalent.
-   Fixed a potential deadlock on Windows XP when using CPPREST_FORCE_PPLX. [#374](https://casablanca.codeplex.com/workitem/374?FocusElement=CommentTextBox)
-   Updated to Boost version 1.58.
-   Updated to OpenSSL version 1.0.2a.
-   Added support for Universal Windows Platform (UWP).
-   Added support for websockets with Windows Desktop with Visual Studio 2015. [#277](https://casablanca.codeplex.com/workitem/277)
-   Merged [pull request](https://casablanca.codeplex.com/SourceControl/network/forks/jrudd/Development/contribution/8231) adding version information to the dlls. [#318](https://casablanca.codeplex.com/workitem/318)

**iOS**
-   Updated Boost dependency to version 1.57.
-   Improvements to script for building Boost, including no longer building for OS X, adding x86_64 simulator, and always using latest iOS SDK available on the machine. [#196](https://casablanca.codeplex.com/workitem/196)
-   Removed dependency on Boost.Locale and libiconv, replaced with C++ standard equivalent.
-   Fixed issue including CMakeLists.txt from another CMake project. [#372](https://casablanca.codeplex.com/workitem/372)

**Ubuntu**
-   Fixed remaining warnings with GCC and removed warning suppression in CMakeLists.txt. [#253](https://casablanca.codeplex.com/workitem/253)
-   Removed dependency on Boost.Locale and libiconv.

**Android**
-   Removed dependency on Boost.Locale and libiconv.
-   Added a workaround using -funwind-tables compilation option since not included by default with Visual Studio Android support. [#388](https://casablanca.codeplex.com/workitem/388)
",23202799
295,False,False,2015-11-21T02:07:02Z,2015-11-23T20:17:43Z,"### Release Notes

**websockets**
-   Merged [pull request](https://casablanca.codeplex.com/SourceControl/network/forks/LocutusOfBorg/casablanca2/contribution/8257) allowing through CMake to use an external version of Websocket++. [#294](https://casablanca.codeplex.com/workitem/294)
-   Fixed potential AV with the Windows Runtime websocket client, if the task returned from the close function wasn't waited to complete before running the destructor.
-   Merged [pull request](https://casablanca.codeplex.com/SourceControl/network/forks/jicailiu/xsapi/contribution/8357) fixing potential AV with the Windows Runtime websocket_client, if the destructor was run without the user waiting on the task returned from connect to complete. Technically users should always make sure to wait for the connection to succeed or fail, this just helps incase that wasn't done.
-   Merged [pull request](https://github.com/Microsoft/cpprestsdk/pull/1) for Adding proxy support for token_from_code and token_from_refresh methods.

**http_client**
-   Merged [pull request](https://casablanca.codeplex.com/SourceControl/network/forks/kreuzerkrieg/casablancatimeout/contribution/8363) adding support for timeouts down to the microsecond level. Please note not all platforms support this fine granularity, some only down to milliseconds.
-   Fixed issue where Boost.Asio based http_client incorrectly used the http_client_config timeout setting for determining how long to keep around connections in the pool before closing.

**http_listener**
-   Fixed bug with Boost.Asio based http_listener where the incoming request body stream write head wasn't closed. [#325](https://casablanca.codeplex.com/workitem/325)
-   Merged [pull request](https://casablanca.codeplex.com/SourceControl/network/forks/evanc/mshpccasablanca/contribution/8481) to enable https listener and client ca

**uri_builder**
-   Updated uri_builder::append_query API that operators on a provided key and value to percent encode the '&', ';', '=' characters to avoid any confusion. [#396](https://casablanca.codeplex.com/workitem/396)

**miscellaneous**
-   Fixed issue with utf16_to_utf8 utility function when encoding certain surrogate pairs. [#392](https://casablanca.codeplex.com/workitem/392)
-   Merged a couple of pull requests ([here](https://casablanca.codeplex.com/SourceControl/network/forks/LocutusOfBorg/casablanca2/contribution/8258), [here](https://casablanca.codeplex.com/SourceControl/network/forks/LocutusOfBorg/casablanca2/contribution/8259), and [here](https://casablanca.codeplex.com/SourceControl/network/forks/LocutusOfBorg/casablanca2/contribution/8262)) fixing several issues with arm64. [#312](https://casablanca.codeplex.com/workitem/312), [#291](https://casablanca.codeplex.com/workitem/291)
-   Merged [pull request](https://casablanca.codeplex.com/SourceControl/network/forks/LocutusOfBorg/casablanca2/contribution/8260) fixing double include issues when building with CMake.
-   Merged [pull request](https://casablanca.codeplex.com/SourceControl/network/forks/LocutusOfBorg/casablanca2/contribution/8263) fixing cast issue on FreeBSD.
-   Removed unnecessary heap allocation and cleaned up a bit the scoped_c_thread_locale::c_locale() implementation.

**Windows**
-   Removed some unnecessary _MSC_VER macro checks as Visual Studio 2012 is no longer supported.
-   Fixed several incorrect assumptions of thread safe function local static initialization with Visual Studio 2013. [#391](https://casablanca.codeplex.com/workitem/391)
-   Updated OpenSSL dependency to version 1.0.2d. [#398](https://casablanca.codeplex.com/workitem/398)

**Android**
-   Removed unused files for building libiconv from Build_android folder.
-   Fixed the NuGet Package issue for Android on VS2015, [#400](https://casablanca.codeplex.com/workitem/400)

**iOS**
-   Added .gitignore to the Build_iOS folder to ignore the downloaded build dependencies. [#373](https://casablanca.codeplex.com/workitem/373)
",23202799
296,False,False,2020-03-18T22:06:50Z,2020-03-19T10:01:59Z,See [CHANGES.md](https://github.com/PointCloudLibrary/pcl/blob/master/CHANGES.md#-1101-18032020-) for an exhaustive list of fixes and enhancements included in this minor release.,8162615
297,False,False,2020-01-19T16:36:58Z,2020-01-19T16:51:33Z,"PCL now defaults to the C++14 standard. Most of the Boost classes that we use were replaced with alternatives from the standard library. One notable exception are smart pointers. PCL still makes extensive use of `boost::shared_ptr`. However, several layers of abstraction  have been added to prepare for a smooth switch to `std::shared_ptr` in the next release:
  * Added `pcl::make_shared` and `Class::Ptr`/`Class::ConstPtr` type-aliases. Use these instead of  direct names like `{boost, std}::shared_ptr` or `{boost, std}::make_shared` with PCL types.
  * Added `pcl::shared_ptr` that offers the same abstraction for non-PCL types.

Please use the above-mentioned functions/aliases in downstream projects to ensure source code level compatibility with PCL 1.10 and future PCL releases.

See [CHANGES.md](https://github.com/PointCloudLibrary/pcl/blob/master/CHANGES.md#-1100-19012020-) for an exhaustive list newly added features, deprecations, and other changes.",8162615
298,False,False,2018-11-26T11:53:54Z,2018-11-26T11:56:21Z,"## *= 1.9.1 (26.11.2018) =*

### `Modules:`

#### `Uncategorized:`

* Add missing visualization section from the changelog generation. [[#2634]](https://github.com/PointCloudLibrary/pcl/pull/2634)

#### `CMake:`

* Fix development version check on DISSECT_VERSION. [[#2633]](https://github.com/PointCloudLibrary/pcl/pull/2633)
* Remove CMake policy CMP0054 setting. [[#2627]](https://github.com/PointCloudLibrary/pcl/pull/2627)
* PCLConfig.cmake - POP policy-stack before return() [[#2626]](https://github.com/PointCloudLibrary/pcl/pull/2626)
* Remove CMake config installation folder only when empty [[#2622]](https://github.com/PointCloudLibrary/pcl/pull/2622)
* Downgrade grabber dependency message level to STATUS. [[#2620]](https://github.com/PointCloudLibrary/pcl/pull/2620)
* Migrate CMake policy 0048 [[#2608]](https://github.com/PointCloudLibrary/pcl/pull/2608)
* Bump CMake minimum version to 3.1. [[#2605]](https://github.com/PointCloudLibrary/pcl/pull/2605)
* Bump version to 1.9.0-dev [[#2602]](https://github.com/PointCloudLibrary/pcl/pull/2602)
* Search in $EIGEN_ROOT first while looking for Eigen [[#2592]](https://github.com/PointCloudLibrary/pcl/pull/2592)

#### `libpcl_visualization:`

* address conflict between visualization and VTK head [[#2612]](https://github.com/PointCloudLibrary/pcl/pull/2612)

#### `PCL Tutorials:`

* Bump CMake minimum version to 3.1. [[#2605]](https://github.com/PointCloudLibrary/pcl/pull/2605)

#### `PCL Tests:`

* Refactor `SHOTEstimation` and `SHOTColorEstimation` tests [[#2636]](https://github.com/PointCloudLibrary/pcl/pull/2636)

#### `CI:`

* Set up azure pipelines for macOS High Sierra [[#2635]](https://github.com/PointCloudLibrary/pcl/pull/2635)
* Enable Windows builds on Azure Pipelines [[#2632]](https://github.com/PointCloudLibrary/pcl/pull/2632)
* Add Ubuntu16.04 based build on Azure Pipelines [[#2611]](https://github.com/PointCloudLibrary/pcl/pull/2611)
* Remove documentation job from Travis [[#2604]](https://github.com/PointCloudLibrary/pcl/pull/2604)",8162615
299,False,False,2018-11-06T19:16:59Z,2018-11-06T19:22:08Z,"## *= 1.9.0 (06.11.2018) =*

### `New Features:`

*Newly added functionalities.*

* **[common][visualization]** Add Viridis color LUT [[#2420]](https://github.com/PointCloudLibrary/pcl/pull/2420)
* **[octree]** Implementation of the iterator 'OctreeLeafNodeBreadthIterator'. [[#2204]](https://github.com/PointCloudLibrary/pcl/pull/2204)
* **[octree]** Implementation of the iterator 'OctreeFixedDepthIterator'. [[#1983]](https://github.com/PointCloudLibrary/pcl/pull/1983)
* **[ci]** Enable Global Tests on Windows CI [[#2137]](https://github.com/PointCloudLibrary/pcl/pull/2137)
* **[features]** Add GASD global point cloud descriptor [[#1652]](https://github.com/PointCloudLibrary/pcl/pull/1652)
* **[visualization]** Add overload to `PCLVisualizer::addText3D()` that allows specifying text orientation [[#2038]](https://github.com/PointCloudLibrary/pcl/pull/2038)
* **[features]** FLARELocalReferenceFrameEstimation class added [[#1571]](https://github.com/PointCloudLibrary/pcl/pull/1571)
* **[surface][tools]** Add new mls projection method. Deprecated `MovingLeastSquares::setPolynomialFit()`. [[#1960]](https://github.com/PointCloudLibrary/pcl/pull/1960)

### `Deprecated:`

*Deprecated code scheduled to be removed after two minor releases.*

* **[octree]** Implementation of the iterator 'OctreeLeafNodeBreadthIterator'. [[#2204]](https://github.com/PointCloudLibrary/pcl/pull/2204)
* **[common][segmentation]** Provide proper EuclideanClusterComparator method depreciation. New Pragma macro. New Deprecated type. [[#2096]](https://github.com/PointCloudLibrary/pcl/pull/2096)
* **[io]** Add support pcl::PointXYZRGBA to pcl::VLPGrabber. Deprecate rgb signatures. [[#2102]](https://github.com/PointCloudLibrary/pcl/pull/2102)
* **[surface][tools]** Add new mls projection method. Deprecated `MovingLeastSquares::setPolynomialFit()`. [[#1960]](https://github.com/PointCloudLibrary/pcl/pull/1960)

### `Removed:`

*Removal of deprecated code.*

* **[filters][io][surface][visualization]** Removal of deprecated code in filters, io, surface and visualization modules [[#2077]](https://github.com/PointCloudLibrary/pcl/pull/2077)
* **[common]** Remove deprecated ros headers [[#2075]](https://github.com/PointCloudLibrary/pcl/pull/2075)
* **[registration]** Remove registration module deprecated methods [[#2076]](https://github.com/PointCloudLibrary/pcl/pull/2076)
* **[sample_consensus]** Remove deprecated functions and variables from SAC module [[#2071]](https://github.com/PointCloudLibrary/pcl/pull/2071)
* **[common]** Removal of PCA deprecated constructor [[#2070]](https://github.com/PointCloudLibrary/pcl/pull/2070)

### `Behavioral changes:`

*Changes in the expected default behavior.*

* **[common]** PointCloudDepthAndRGBtoXYZRGBA: initialize with the default alpha value (fix #2476) [[#2533]](https://github.com/PointCloudLibrary/pcl/pull/2533)
* **[octree]** Reverse octree's depth first iterator order [[#2332]](https://github.com/PointCloudLibrary/pcl/pull/2332)
* **[common]** `PointXYZRGBL` `label` field is now default constructed to 0 [[#2462]](https://github.com/PointCloudLibrary/pcl/pull/2462)
* **[io]** Fix PLYReader is_dense behavior [[#2133]](https://github.com/PointCloudLibrary/pcl/pull/2133)

### `API changes:`

*Changes to the API which didn't went through the proper deprecation and removal cycle.*

* **[octree]** Implementation of the iterator 'OctreeLeafNodeBreadthIterator'. [[#2204]](https://github.com/PointCloudLibrary/pcl/pull/2204)
* **[sample_consensus]** Const-qualify most of the methods in SAC model classes [[#2270]](https://github.com/PointCloudLibrary/pcl/pull/2270)
* **[simulation]** Use GLuint rather than size_t to represent OpenGL indices. [[#2238]](https://github.com/PointCloudLibrary/pcl/pull/2238)
* **[visualization]** Fix access specifier in `PointCloudColorHandlerRGBAField` [[#2226]](https://github.com/PointCloudLibrary/pcl/pull/2226)
* **[docs]** Misc. typos (cont.) [[#2215]](https://github.com/PointCloudLibrary/pcl/pull/2215)
* **[octree]** OctreeIterators special member revision [[#2108]](https://github.com/PointCloudLibrary/pcl/pull/2108)
* **[io]** Add support pcl::PointXYZRGBA to pcl::VLPGrabber. Deprecate rgb signatures. [[#2102]](https://github.com/PointCloudLibrary/pcl/pull/2102)
* **[surface][tools]** Add new mls projection method. Deprecated `MovingLeastSquares::setPolynomialFit()`. [[#1960]](https://github.com/PointCloudLibrary/pcl/pull/1960)
* **[surface]** Add ability to cache mls results [[#1952]](https://github.com/PointCloudLibrary/pcl/pull/1952)

### `ABI changes:`

*Changes that cause ABI incompatibility but are still API compatible.*

* **[surface]** Missing pcl::MovingLeastSquaresOMP declaration without /openmp [[#2324]](https://github.com/PointCloudLibrary/pcl/pull/2324)
* **[common][filters][surface]** Improved docstrings and error messages [[#2300]](https://github.com/PointCloudLibrary/pcl/pull/2300)
* **[common]** Modified `GlasbeyLUT` indexing type to `size_t` [[#2297]](https://github.com/PointCloudLibrary/pcl/pull/2297)
* **[octree]** Implementation of the iterator 'OctreeFixedDepthIterator'. [[#1983]](https://github.com/PointCloudLibrary/pcl/pull/1983)
* **[common][segmentation]** Provide proper EuclideanClusterComparator method depreciation. New Pragma macro. New Deprecated type. [[#2096]](https://github.com/PointCloudLibrary/pcl/pull/2096)
* **[gpu]** Allow specifying decimation step in convertToTsdfCloud [[#2099]](https://github.com/PointCloudLibrary/pcl/pull/2099)
* **[apps]** More warning suppression in pcl apps [[#2080]](https://github.com/PointCloudLibrary/pcl/pull/2080)
* **[io]** Removed unused member from ply_parser [[#2066]](https://github.com/PointCloudLibrary/pcl/pull/2066)
* **[filters]** Fixes remove_indices in UniformSampling [[#1902]](https://github.com/PointCloudLibrary/pcl/pull/1902)
* **[visualization]** Add accessor for current rendering framerate in PCLVisualizer [[#1974]](https://github.com/PointCloudLibrary/pcl/pull/1974)
* **[simulation]** Redo: Simulation: enable returning of organized point clouds [[#1687]](https://github.com/PointCloudLibrary/pcl/pull/1687)
* **[registration]** Added option to specify translation and rotation convergence deltas in ICP and NDT algorithms. [[#1724]](https://github.com/PointCloudLibrary/pcl/pull/1724)

### `Modules:`

#### `Uncategorized:`

* Change Log generation tool. Automates change log generation. [[#2396]](https://github.com/PointCloudLibrary/pcl/pull/2396)
* Compatibility reports generation script [[#2410]](https://github.com/PointCloudLibrary/pcl/pull/2410)
* Update logo [[#2547]](https://github.com/PointCloudLibrary/pcl/pull/2547)
* Never close stale issues/prs [[#2400]](https://github.com/PointCloudLibrary/pcl/pull/2400)
* Fix typos in the whole codebase [[#2217]](https://github.com/PointCloudLibrary/pcl/pull/2217)
* Fixed typo and rearragend items in the issue template [[#2197]](https://github.com/PointCloudLibrary/pcl/pull/2197)
* Change Stale daysTillClose to 100 years [[#2166]](https://github.com/PointCloudLibrary/pcl/pull/2166)
* set stale daysUntilClose to a really big number [[#2162]](https://github.com/PointCloudLibrary/pcl/pull/2162)
* Stale set up [[#2101]](https://github.com/PointCloudLibrary/pcl/pull/2101)

#### `CMake:`

* Fix checks for user-provided CXX flags [[#2579]](https://github.com/PointCloudLibrary/pcl/pull/2579)
* Fix FLANN path to lower case [[#2576]](https://github.com/PointCloudLibrary/pcl/pull/2576)
* Use pkg-config to find Flann [[#2563]](https://github.com/PointCloudLibrary/pcl/pull/2563)
* Update FindBoost versions [[#2558]](https://github.com/PointCloudLibrary/pcl/pull/2558)
* Add PCL_BUILD_WITH_QHULL_DYNAMIC_LINKING_WIN32 option [[#2552]](https://github.com/PointCloudLibrary/pcl/pull/2552)
* Fix app/CMakeLists to enable Apps under Windows [[#2550]](https://github.com/PointCloudLibrary/pcl/pull/2550)
* When configuring with WITH_DOCS, but Doxygen is not available, prevent generation. [[#2516]](https://github.com/PointCloudLibrary/pcl/pull/2516)
* CMake: Do not include test targets in PCLConfig.cmake [[#2458]](https://github.com/PointCloudLibrary/pcl/pull/2458)
* CMake Set temporarily the policy CMP0074 to OLD [[#2454]](https://github.com/PointCloudLibrary/pcl/pull/2454)
* prevent GCC flags propagating to NVCC [[#2430]](https://github.com/PointCloudLibrary/pcl/pull/2430)
* Mark visualization as an optional dependency of tools [[#2439]](https://github.com/PointCloudLibrary/pcl/pull/2439)
* Do not mark imported libraries as GLOBAL in PCLConfig [[#2435]](https://github.com/PointCloudLibrary/pcl/pull/2435)
* Intel fixes [[#2432]](https://github.com/PointCloudLibrary/pcl/pull/2432)
* Export `-march=native` for Clang and prevent it from being included during cross compilation. [[#2416]](https://github.com/PointCloudLibrary/pcl/pull/2416)
* Do not search for PCL components that have been found already [[#2428]](https://github.com/PointCloudLibrary/pcl/pull/2428)
* Move SSE compiler options to `PCL_COMPILE_OPTIONS`. Expose PCL as a CMake imported target. [[#2100]](https://github.com/PointCloudLibrary/pcl/pull/2100)
* Add Visual Studio compiler option /FS for Ninja build [[#2414]](https://github.com/PointCloudLibrary/pcl/pull/2414)
* Use rpath in the target's install name [[#2241]](https://github.com/PointCloudLibrary/pcl/pull/2241)
* Improve QHull finder script [[#2344]](https://github.com/PointCloudLibrary/pcl/pull/2344)
* Fix link order issue with boost [[#2236]](https://github.com/PointCloudLibrary/pcl/pull/2236)
* Mark found PCL component libraries and include dirs as advanced [[#2235]](https://github.com/PointCloudLibrary/pcl/pull/2235)
* Prevent search for disabled optional dependencies in targets. [[#2229]](https://github.com/PointCloudLibrary/pcl/pull/2229)
* Fix installation rules for ml module [[#2192]](https://github.com/PointCloudLibrary/pcl/pull/2192)
* Fix conditional branch of Visual C++ 2017 [[#2121]](https://github.com/PointCloudLibrary/pcl/pull/2121)
* Add *_USE_STATIC options to PCLConfig [[#2086]](https://github.com/PointCloudLibrary/pcl/pull/2086)
* Add search path suffixes for Vcpkg [[#2085]](https://github.com/PointCloudLibrary/pcl/pull/2085)
* Update finder scripts for Ensenso, OpenNI, and OpenNI2 [[#2061]](https://github.com/PointCloudLibrary/pcl/pull/2061)
* Fix PACKAGE to include cmake/Modules directory [[#2053]](https://github.com/PointCloudLibrary/pcl/pull/2053)
* Unifies Find scripts in PCLConfig [[#1421]](https://github.com/PointCloudLibrary/pcl/pull/1421)
* CUDA 9 Arch Flags [[#2047]](https://github.com/PointCloudLibrary/pcl/pull/2047)
* Suppress log when PCL_FIND_QUIETLY is turned on. [[#2032]](https://github.com/PointCloudLibrary/pcl/pull/2032)
* fix /MP option not generated for Visual Studio. [[#2031]](https://github.com/PointCloudLibrary/pcl/pull/2031)
* Generate pkgconfig for 2d module [[#1979]](https://github.com/PointCloudLibrary/pcl/pull/1979)
* Update Find Boost [[#1972]](https://github.com/PointCloudLibrary/pcl/pull/1972)
* Added CUDA compute capability 5.3 [[#1929]](https://github.com/PointCloudLibrary/pcl/pull/1929)
* Fix issue with finding pcl deployed out of path [[#1923]](https://github.com/PointCloudLibrary/pcl/pull/1923)
* Add new gtest path [[#1920]](https://github.com/PointCloudLibrary/pcl/pull/1920)

#### `libpcl_2d:`

* Avoid huge index jumps in `RandomSample`. Remove `io` dependency from `2d`. [[#2141]](https://github.com/PointCloudLibrary/pcl/pull/2141)
* Fix header names [[#2079]](https://github.com/PointCloudLibrary/pcl/pull/2079)
* Generate pkgconfig for 2d module [[#1979]](https://github.com/PointCloudLibrary/pcl/pull/1979)

#### `libpcl_common:`

* Fix docstrings [[#2591]](https://github.com/PointCloudLibrary/pcl/pull/2591)
* Throw an early exception to prevent divide by zero error (#2481) [[#2530]](https://github.com/PointCloudLibrary/pcl/pull/2530)
* Relax requirements in eigen22d test. Always provide a normalized result in `pcl::transformPlane`. [[#2503]](https://github.com/PointCloudLibrary/pcl/pull/2503)
* **[behavior]** PointCloudDepthAndRGBtoXYZRGBA: initialize with the default alpha value (fix #2476) [[#2533]](https://github.com/PointCloudLibrary/pcl/pull/2533)
* Throw `UnorganizedPointCloudException` in `PointCloud::at` [[#2521]](https://github.com/PointCloudLibrary/pcl/pull/2521)
* Add missing const specifier for getters in `PCLBase`. [[#2502]](https://github.com/PointCloudLibrary/pcl/pull/2502)
* swap the header in pcl::PointCloud::swap [[#2499]](https://github.com/PointCloudLibrary/pcl/pull/2499)
* Add header guard and copyright info to polynomial_calculations.hpp [[#2500]](https://github.com/PointCloudLibrary/pcl/pull/2500)
* Add `header` to the print output of `PointCloud` [[#2498]](https://github.com/PointCloudLibrary/pcl/pull/2498)
* Fix force recalculation option in `BivariatePolynomialT::calculateGradient` [[#2479]](https://github.com/PointCloudLibrary/pcl/pull/2479)
* Fix various errors and typos in the docstrings and tutorials [[#2486]](https://github.com/PointCloudLibrary/pcl/pull/2486)
* Fix a bug in `PointRGBtoI` color conversion [[#2475]](https://github.com/PointCloudLibrary/pcl/pull/2475)
* Provide `operator<<` for `Intensity32u` point type [[#2467]](https://github.com/PointCloudLibrary/pcl/pull/2467)
* **[behavior]** `PointXYZRGBL` `label` field is now default constructed to 0 [[#2462]](https://github.com/PointCloudLibrary/pcl/pull/2462)
* Add some missing eigen alignment operators [[#2433]](https://github.com/PointCloudLibrary/pcl/pull/2433)
* Intel fixes [[#2432]](https://github.com/PointCloudLibrary/pcl/pull/2432)
* **[new-feature]** Add Viridis color LUT [[#2420]](https://github.com/PointCloudLibrary/pcl/pull/2420)
* Remove malloc header to restore builds on BSDs [[#2374]](https://github.com/PointCloudLibrary/pcl/pull/2374)
* Add support for multiple extensions in `parse_file_extension_argument ()`. [[#2347]](https://github.com/PointCloudLibrary/pcl/pull/2347)
* Improve speed of `transformPointCloud/WithNormals()` functions [[#2247]](https://github.com/PointCloudLibrary/pcl/pull/2247)
* Add RGB constructor that takes R, G, and B components [[#2329]](https://github.com/PointCloudLibrary/pcl/pull/2329)
* **[abi]** Improved docstrings and error messages [[#2300]](https://github.com/PointCloudLibrary/pcl/pull/2300)
* **[abi]** Modified `GlasbeyLUT` indexing type to `size_t` [[#2297]](https://github.com/PointCloudLibrary/pcl/pull/2297)
* Add GASDSignatures to `PCL_POINT_TYPES` and `PCL_FEATURE_POINTTYPES` macros. [[#2295]](https://github.com/PointCloudLibrary/pcl/pull/2295)
* [PARSE] Constness of the API [[#2224]](https://github.com/PointCloudLibrary/pcl/pull/2224)
* Fix two ""unreachable code"" warnings in `pca.hpp` [[#2219]](https://github.com/PointCloudLibrary/pcl/pull/2219)
* Fix covariance calculation in PCA [[#2130]](https://github.com/PointCloudLibrary/pcl/pull/2130)
* **[abi][deprecation]** Provide proper EuclideanClusterComparator method depreciation. New Pragma macro. New Deprecated type. [[#2096]](https://github.com/PointCloudLibrary/pcl/pull/2096)
* **[removal]** Remove deprecated ros headers [[#2075]](https://github.com/PointCloudLibrary/pcl/pull/2075)
* Suppress (maybe) uninitialized warning [[#2073]](https://github.com/PointCloudLibrary/pcl/pull/2073)
* **[removal]** Removal of PCA deprecated constructor [[#2070]](https://github.com/PointCloudLibrary/pcl/pull/2070)
* [gcc] fixes -Wimplicit-fallthrough: common/io.h [[#2041]](https://github.com/PointCloudLibrary/pcl/pull/2041)
* Include pcl/point_cloud.h and pcl/point_types.h headers. [[#1962]](https://github.com/PointCloudLibrary/pcl/pull/1962)
* Add test for macro _USE_MATH_DEFINES. [[#1956]](https://github.com/PointCloudLibrary/pcl/pull/1956)
* instantiate: remove duplicate macro definition. Fixes #1924. [[#1925]](https://github.com/PointCloudLibrary/pcl/pull/1925)

#### `libpcl_cuda:`

* add support for latest Turing gpu and cuda 10 [[#2560]](https://github.com/PointCloudLibrary/pcl/pull/2560)
* Fix compilation issues with CUDA 9.1 [[#2212]](https://github.com/PointCloudLibrary/pcl/pull/2212)
* Fix some CUDA 9 related errors [[#2181]](https://github.com/PointCloudLibrary/pcl/pull/2181)
* Added CUDA compute capability 5.3 [[#1929]](https://github.com/PointCloudLibrary/pcl/pull/1929)

#### `libpcl_features:`

*  Solve issues with failing features tests [[#2544]](https://github.com/PointCloudLibrary/pcl/pull/2544)
* Update the OpenMP implementations of normal and FPFH estimation [[#2278]](https://github.com/PointCloudLibrary/pcl/pull/2278)
* Make `MomentOfInertia` instantiations consistent with the rest of the library [[#2266]](https://github.com/PointCloudLibrary/pcl/pull/2266)
* Docstring corrections [[#2143]](https://github.com/PointCloudLibrary/pcl/pull/2143)
* Improve Doxygen comments for HistogramInterpolationMethod [[#2111]](https://github.com/PointCloudLibrary/pcl/pull/2111)
* **[new-feature]** Add GASD global point cloud descriptor [[#1652]](https://github.com/PointCloudLibrary/pcl/pull/1652)
* Suppress (maybe) uninitialized warning [[#2073]](https://github.com/PointCloudLibrary/pcl/pull/2073)
* **[new-feature]** FLARELocalReferenceFrameEstimation class added [[#1571]](https://github.com/PointCloudLibrary/pcl/pull/1571)
* fix missing include file: from_meshes.h is using pcl::Vertices in it [[#2009]](https://github.com/PointCloudLibrary/pcl/pull/2009)
* Typo [[#1968]](https://github.com/PointCloudLibrary/pcl/pull/1968)

#### `libpcl_filters:`

* Corrections to CovarianceSampling class and corresponding test [[#2512]](https://github.com/PointCloudLibrary/pcl/pull/2512)
* Add the missing const modifier in `Filter::getRemovedIndices`. [[#2523]](https://github.com/PointCloudLibrary/pcl/pull/2523)
* Add const modifiers to getters of pcl::PassThrough [[#2524]](https://github.com/PointCloudLibrary/pcl/pull/2524)
* Add const specifiers for getters in VoxelGrid. [[#2526]](https://github.com/PointCloudLibrary/pcl/pull/2526)
* Copy the pose info from the input cloud to the output cloud in NaN removal functions [[#2522]](https://github.com/PointCloudLibrary/pcl/pull/2522)
* Fix misc. typos in tutorials and docstrings [[#2529]](https://github.com/PointCloudLibrary/pcl/pull/2529)
* Fix various errors and typos in the docstrings and tutorials [[#2486]](https://github.com/PointCloudLibrary/pcl/pull/2486)
* Add some missing eigen alignment operators [[#2433]](https://github.com/PointCloudLibrary/pcl/pull/2433)
* Add PointNormal to ExtractIndices Instantiate Types [[#2389]](https://github.com/PointCloudLibrary/pcl/pull/2389)
* **[abi]** Improved docstrings and error messages [[#2300]](https://github.com/PointCloudLibrary/pcl/pull/2300)
* Public access to `VoxelGrid` boost pointer. [[#2205]](https://github.com/PointCloudLibrary/pcl/pull/2205)
* Add const qualifiers to getters in `filter_indices.h` [[#2193]](https://github.com/PointCloudLibrary/pcl/pull/2193)
* Avoid huge index jumps in `RandomSample`. Remove `io` dependency from `2d`. [[#2141]](https://github.com/PointCloudLibrary/pcl/pull/2141)
* **[removal]** Removal of deprecated code in filters, io, surface and visualization modules [[#2077]](https://github.com/PointCloudLibrary/pcl/pull/2077)
* Suppress unused parameter warning [[#2074]](https://github.com/PointCloudLibrary/pcl/pull/2074)
* Suppress sign compare warnings [[#2068]](https://github.com/PointCloudLibrary/pcl/pull/2068)
* Transformation Fix for BoxClipper3D [[#1961]](https://github.com/PointCloudLibrary/pcl/pull/1961)
* **[abi]** Fixes remove_indices in UniformSampling [[#1902]](https://github.com/PointCloudLibrary/pcl/pull/1902)
* Inherit StatisticalOutlierRemoval<PCLPointCloud2> from FilterIndices [[#1663]](https://github.com/PointCloudLibrary/pcl/pull/1663)

#### `libpcl_gpu:`

* Remove sm_72 from CUDA 9.0 [[#2567]](https://github.com/PointCloudLibrary/pcl/pull/2567)
* Fix compilation issues with CUDA 9.1 [[#2212]](https://github.com/PointCloudLibrary/pcl/pull/2212)
* Fix compilation error in `gpu_people` code [[#2199]](https://github.com/PointCloudLibrary/pcl/pull/2199)
* Fix some CUDA 9 related errors [[#2181]](https://github.com/PointCloudLibrary/pcl/pull/2181)
* **[abi]** Allow specifying decimation step in convertToTsdfCloud [[#2099]](https://github.com/PointCloudLibrary/pcl/pull/2099)
* Fix the incorrect include directory. [[#2024]](https://github.com/PointCloudLibrary/pcl/pull/2024)
* need to include instantiate.hpp to use PCL_INSTANTIATE [[#1943]](https://github.com/PointCloudLibrary/pcl/pull/1943)
* Added CUDA compute capability 5.3 [[#1929]](https://github.com/PointCloudLibrary/pcl/pull/1929)
* Fix issue #1674 [[#1926]](https://github.com/PointCloudLibrary/pcl/pull/1926)

#### `libpcl_io:`

* Suppress miscelanious warnings [[#2556]](https://github.com/PointCloudLibrary/pcl/pull/2556)
* vtk2mesh: Add parsing support to the new RGBA scalar field added in vtk8 [[#2492]](https://github.com/PointCloudLibrary/pcl/pull/2492)
* Fix various errors and typos in the docstrings and tutorials [[#2486]](https://github.com/PointCloudLibrary/pcl/pull/2486)
* Improved obj file parsing efficiency. Make parsing robust against situations where there are more normals than points. Added unit tests. [[#2450]](https://github.com/PointCloudLibrary/pcl/pull/2450)
* `pcl::PCDReader::readHeader()` change `nr_points` type to `size_t` to avoid possible `int32` overflow [[#2408]](https://github.com/PointCloudLibrary/pcl/pull/2408)
* Fix raw_fallocate for Android and deal with unsupported filesystems. [[#2363]](https://github.com/PointCloudLibrary/pcl/pull/2363)
* Add low_level_io.h to the header list of the io module [[#2356]](https://github.com/PointCloudLibrary/pcl/pull/2356)
* Created header for low level I/O helpers. Fix for `::posix_fallocate` on Mac OSX [[#2354]](https://github.com/PointCloudLibrary/pcl/pull/2354)
* Added warnings when the input data is too large for compressed pcds [[#2323]](https://github.com/PointCloudLibrary/pcl/pull/2323)
* Allocate disk space with posix_fallocate before mmapping. [[#2325]](https://github.com/PointCloudLibrary/pcl/pull/2325)
* Fix cmake warning: Logical block closes with mis-matching arguments [[#2320]](https://github.com/PointCloudLibrary/pcl/pull/2320)
* Added PCL_IO_ENABLE_MAND_LOCKING cmake flag. [[#2315]](https://github.com/PointCloudLibrary/pcl/pull/2315)
* Added missing 8 bytes to compressed binary pcd length. [[#2281]](https://github.com/PointCloudLibrary/pcl/pull/2281)
* Remove useless size check in PLYReader::endHeaderCallback() [[#2246]](https://github.com/PointCloudLibrary/pcl/pull/2246)
* **[behavior]** Fix PLYReader is_dense behavior [[#2133]](https://github.com/PointCloudLibrary/pcl/pull/2133)
* `EnsensoGrabber` `uint` is undefined in Visual studio. [[#2223]](https://github.com/PointCloudLibrary/pcl/pull/2223)
* Add protection from invalid WIDTH values in PCD reader [[#2195]](https://github.com/PointCloudLibrary/pcl/pull/2195)
* `PLYReader` Cast cloud point step as 64-bit integer [[#2161]](https://github.com/PointCloudLibrary/pcl/pull/2161)
* `OpenNI2Device` Add device sensor check for IR and depth modesetting [[#2150]](https://github.com/PointCloudLibrary/pcl/pull/2150)
* Adds a check for when CreateFileMappingA fails [[#2146]](https://github.com/PointCloudLibrary/pcl/pull/2146)
* `PCDWriter`changed `toff` to `size_t` in `writeBinaryCompressed` [[#2144]](https://github.com/PointCloudLibrary/pcl/pull/2144)
* Prevent POINTS field parsing before point_step is specified [[#2131]](https://github.com/PointCloudLibrary/pcl/pull/2131)
* Check COUNT value specified in PCD files [[#2126]](https://github.com/PointCloudLibrary/pcl/pull/2126)
* Prevent mmapping more than the original PCD file size [[#2125]](https://github.com/PointCloudLibrary/pcl/pull/2125)
* **[api][deprecation]** Add support pcl::PointXYZRGBA to pcl::VLPGrabber. Deprecate rgb signatures. [[#2102]](https://github.com/PointCloudLibrary/pcl/pull/2102)
* **[removal]** Removal of deprecated code in filters, io, surface and visualization modules [[#2077]](https://github.com/PointCloudLibrary/pcl/pull/2077)
* Suppress strict alias warning [[#2072]](https://github.com/PointCloudLibrary/pcl/pull/2072)
* Suppress unused parameter warnings [[#2067]](https://github.com/PointCloudLibrary/pcl/pull/2067)
* **[abi]** Removed unused member from ply_parser [[#2066]](https://github.com/PointCloudLibrary/pcl/pull/2066)
* Suppress control reaches end of non-void function in io.h [[#2057]](https://github.com/PointCloudLibrary/pcl/pull/2057)
* Modify STRICT_ALIGN because macro expansion w/defined is undefined [[#2043]](https://github.com/PointCloudLibrary/pcl/pull/2043)
* Add necessary boost headers to pcl/io to build in CUDA mode [[#2025]](https://github.com/PointCloudLibrary/pcl/pull/2025)
* Fix MSVC compile issue related with ssize_t [[#2027]](https://github.com/PointCloudLibrary/pcl/pull/2027)
* Adds in-memory PCD serialization/deserialization; de-duplicates PCDReader::readHeader(). (take #2) [[#1986]](https://github.com/PointCloudLibrary/pcl/pull/1986)

#### `libpcl_kdtree:`

* Consistent ptr typedefs for kd tree flann [[#1607]](https://github.com/PointCloudLibrary/pcl/pull/1607)

#### `libpcl_keypoints:`

* Add `TrajkovicKeypoint2D/3D` to CMake build [[#2179]](https://github.com/PointCloudLibrary/pcl/pull/2179)

#### `libpcl_ml:`

* Fix installation rules for ml module [[#2192]](https://github.com/PointCloudLibrary/pcl/pull/2192)

#### `libpcl_octree:`

* **[behavior]** Reverse octree's depth first iterator order [[#2332]](https://github.com/PointCloudLibrary/pcl/pull/2332)
* Fix various errors and typos in the docstrings and tutorials [[#2486]](https://github.com/PointCloudLibrary/pcl/pull/2486)
* Make test conditions consistent with `OctreePointCloudSearch::boxSearch()` implementation. [[#2457]](https://github.com/PointCloudLibrary/pcl/pull/2457)
* `octree_key.h` suppress GCC 8 ignored-qualifier warning [[#2405]](https://github.com/PointCloudLibrary/pcl/pull/2405)
* **[api][deprecation][new-feature]** Implementation of the iterator 'OctreeLeafNodeBreadthIterator'. [[#2204]](https://github.com/PointCloudLibrary/pcl/pull/2204)
* **[abi][new-feature]** Implementation of the iterator 'OctreeFixedDepthIterator'. [[#1983]](https://github.com/PointCloudLibrary/pcl/pull/1983)
* Octree Iterator begin/end method and added tests [[#2174]](https://github.com/PointCloudLibrary/pcl/pull/2174)
* Remove parametrization of end iterators [[#2168]](https://github.com/PointCloudLibrary/pcl/pull/2168)
* Fix docstrings in octree test [[#2173]](https://github.com/PointCloudLibrary/pcl/pull/2173)
* **[api]** OctreeIterators special member revision [[#2108]](https://github.com/PointCloudLibrary/pcl/pull/2108)
* Remove unused variable from octree_viewer [[#2069]](https://github.com/PointCloudLibrary/pcl/pull/2069)
* Silence compile warning by removing superfluous call to std::max() [[#2014]](https://github.com/PointCloudLibrary/pcl/pull/2014)
* [OCTREE] Add bounding box checks in isVoxelOccupiedAtPoint() and deleteVoxelAtPoint() [[#1976]](https://github.com/PointCloudLibrary/pcl/pull/1976)

#### `libpcl_outofcore:`

* Explictly use mt19937 random generator for boost 1.67. [[#2338]](https://github.com/PointCloudLibrary/pcl/pull/2338)
* Fixed queryBBIncludes_subsample [[#1988]](https://github.com/PointCloudLibrary/pcl/pull/1988)

#### `libpcl_people:`

* Misleading indentation [[#2034]](https://github.com/PointCloudLibrary/pcl/pull/2034)

#### `libpcl_recognition:`

* Relax threshold in Hough3DGrouping test [[#2507]](https://github.com/PointCloudLibrary/pcl/pull/2507)
* Add some missing eigen alignment operators [[#2433]](https://github.com/PointCloudLibrary/pcl/pull/2433)
* Setting the resolution of the occupancy grid [[#2273]](https://github.com/PointCloudLibrary/pcl/pull/2273)
* Inline helper function gcCorrespSorter() [[#2248]](https://github.com/PointCloudLibrary/pcl/pull/2248)
* Misleading indentation [[#2034]](https://github.com/PointCloudLibrary/pcl/pull/2034)

#### `libpcl_registration:`

* Remove std::binary_function from Registration [[#2599]](https://github.com/PointCloudLibrary/pcl/pull/2599)
* Suppress miscelanious warnings [[#2556]](https://github.com/PointCloudLibrary/pcl/pull/2556)
* Relax precision requirements on TransformationEstimationLM test. [[#2497]](https://github.com/PointCloudLibrary/pcl/pull/2497)
* Relax rejector threshold in JointIterativeClosestPoint test. [[#2496]](https://github.com/PointCloudLibrary/pcl/pull/2496)
* Add some missing eigen alignment operators [[#2433]](https://github.com/PointCloudLibrary/pcl/pull/2433)
* Remove explicit initialization of `update_visualizer_` in `Registration`  [[#2423]](https://github.com/PointCloudLibrary/pcl/pull/2423)
* **[removal]** Remove registration module deprecated methods [[#2076]](https://github.com/PointCloudLibrary/pcl/pull/2076)
* Suppress (maybe) uninitialized warning [[#2073]](https://github.com/PointCloudLibrary/pcl/pull/2073)
* Remove unreachable code in DefaultConvergenceCriteria [[#1967]](https://github.com/PointCloudLibrary/pcl/pull/1967)
* **[abi]** Added option to specify translation and rotation convergence deltas in ICP and NDT algorithms. [[#1724]](https://github.com/PointCloudLibrary/pcl/pull/1724)

#### `libpcl_sample_consensus:`

* Revise direction test in SampleConsensusModelParallelLine/RANSAC to be consistent with set tolerance. [[#2491]](https://github.com/PointCloudLibrary/pcl/pull/2491)
* Fix error in SampleConsensusModelLine::isSampleGood [[#2488]](https://github.com/PointCloudLibrary/pcl/pull/2488)
* **[api]** Const-qualify most of the methods in SAC model classes [[#2270]](https://github.com/PointCloudLibrary/pcl/pull/2270)
* **[removal]** Remove deprecated functions and variables from SAC module [[#2071]](https://github.com/PointCloudLibrary/pcl/pull/2071)

#### `libpcl_search:`

* Correct testPoint for organized nearest neighbor search [[#2198]](https://github.com/PointCloudLibrary/pcl/pull/2198)

#### `libpcl_segmentation:`

* Add some missing eigen alignment operators [[#2433]](https://github.com/PointCloudLibrary/pcl/pull/2433)
* Add setter/getter for search method in ConditionalEuclideanClustering [[#2437]](https://github.com/PointCloudLibrary/pcl/pull/2437)
* Increase threshold for expected value in test_non_linear [[#2424]](https://github.com/PointCloudLibrary/pcl/pull/2424)
* Avoid infinite recursion in getPointCloudDifference [[#2402]](https://github.com/PointCloudLibrary/pcl/pull/2402)
* Correct setting of is_dense flag in SegmentDifferences. Deprecate unused parameter in method. [[#2380]](https://github.com/PointCloudLibrary/pcl/pull/2380)
* Dereference shared_ptr, fix for GCC8 [[#2299]](https://github.com/PointCloudLibrary/pcl/pull/2299)
* **[abi][deprecation]** Provide proper EuclideanClusterComparator method depreciation. New Pragma macro. New Deprecated type. [[#2096]](https://github.com/PointCloudLibrary/pcl/pull/2096)
* Removed normal related accessors and types from EuclideanClusterComparator [[#1542]](https://github.com/PointCloudLibrary/pcl/pull/1542)

#### `libpcl_simulation:`

* Add `const` qualifiers to `RangeLikelihood` getters. [[#2411]](https://github.com/PointCloudLibrary/pcl/pull/2411)
* **[api]** Use GLuint rather than size_t to represent OpenGL indices. [[#2238]](https://github.com/PointCloudLibrary/pcl/pull/2238)
* Support both RGB and RGBA colors in mesh loading [[#2036]](https://github.com/PointCloudLibrary/pcl/pull/2036)
* **[abi]** Redo: Simulation: enable returning of organized point clouds [[#1687]](https://github.com/PointCloudLibrary/pcl/pull/1687)
* Simulation: more access to camera parameters [[#1650]](https://github.com/PointCloudLibrary/pcl/pull/1650)

#### `libpcl_surface:`

* Fixed memory leak in Poisson's BSplineData [[#2572]](https://github.com/PointCloudLibrary/pcl/pull/2572)
* Suppress miscelanious warnings [[#2556]](https://github.com/PointCloudLibrary/pcl/pull/2556)
* Add some missing eigen alignment operators [[#2433]](https://github.com/PointCloudLibrary/pcl/pull/2433)
* Make pcl::MovingLeastSquares thread-safe [[#2418]](https://github.com/PointCloudLibrary/pcl/pull/2418)
* **[abi]** Missing pcl::MovingLeastSquaresOMP declaration without /openmp [[#2324]](https://github.com/PointCloudLibrary/pcl/pull/2324)
* **[abi]** Improved docstrings and error messages [[#2300]](https://github.com/PointCloudLibrary/pcl/pull/2300)
* opennurbs: fix `ON_Curve::EvaluatePoint` calculation [[#2185]](https://github.com/PointCloudLibrary/pcl/pull/2185)
* **[removal]** Removal of deprecated code in filters, io, surface and visualization modules [[#2077]](https://github.com/PointCloudLibrary/pcl/pull/2077)
* Suppress (maybe) uninitialized warning [[#2073]](https://github.com/PointCloudLibrary/pcl/pull/2073)
* Suppress sign compare warnings [[#2068]](https://github.com/PointCloudLibrary/pcl/pull/2068)
* Fix incorrect Ptr/ConstPtr typedefs in MovingLeastSquaresOMP [[#2055]](https://github.com/PointCloudLibrary/pcl/pull/2055)
* Replace float indices with Eigen Index [[#2017]](https://github.com/PointCloudLibrary/pcl/pull/2017)
* **[api][deprecation][new-feature]** Add new mls projection method. Deprecated `MovingLeastSquares::setPolynomialFit()`. [[#1960]](https://github.com/PointCloudLibrary/pcl/pull/1960)
* Avoid phantom surfces in marching cubes hoppe [[#1874]](https://github.com/PointCloudLibrary/pcl/pull/1874)
* **[api]** Add ability to cache mls results [[#1952]](https://github.com/PointCloudLibrary/pcl/pull/1952)

#### `PCL Apps:`

* Suppress miscelanious warnings [[#2556]](https://github.com/PointCloudLibrary/pcl/pull/2556)
* Fix 3d_rec_framework compilation error [[#2495]](https://github.com/PointCloudLibrary/pcl/pull/2495)
* Fix compilation issue in point cloud editor. [[#2490]](https://github.com/PointCloudLibrary/pcl/pull/2490)
* `demean_cloud` correct usage message. [[#2443]](https://github.com/PointCloudLibrary/pcl/pull/2443)
* Do not use deprecated method in openni_mls_smoothing app [[#2421]](https://github.com/PointCloudLibrary/pcl/pull/2421)
* add windows.h for includes GL/gl.h; handle cancel for denoiseWidget. [[#2267]](https://github.com/PointCloudLibrary/pcl/pull/2267)
* Add missing dependecy to apps [[#2251]](https://github.com/PointCloudLibrary/pcl/pull/2251)
* Suppress the final set of warnings in pcl apps [[#2082]](https://github.com/PointCloudLibrary/pcl/pull/2082)
* **[abi]** More warning suppression in pcl apps [[#2080]](https://github.com/PointCloudLibrary/pcl/pull/2080)

#### `PCL Docs:`

* Fix misc. typos in tutorials and docstrings [[#2529]](https://github.com/PointCloudLibrary/pcl/pull/2529)
* Fix various errors and typos in the docstrings and tutorials [[#2486]](https://github.com/PointCloudLibrary/pcl/pull/2486)
* Docstring typos' corrections. [[#2449]](https://github.com/PointCloudLibrary/pcl/pull/2449)
* `demean_cloud` correct usage message. [[#2443]](https://github.com/PointCloudLibrary/pcl/pull/2443)
* Set IMAGE_PATH explicitly in Doxygen config [[#2442]](https://github.com/PointCloudLibrary/pcl/pull/2442)
* Switch to using client-based search in Doxygen [[#2391]](https://github.com/PointCloudLibrary/pcl/pull/2391)
* **[api]** Misc. typos (cont.) [[#2215]](https://github.com/PointCloudLibrary/pcl/pull/2215)
* doc: misc. typos [[#2213]](https://github.com/PointCloudLibrary/pcl/pull/2213)
* Add url to API/ABI compatibity report [[#2116]](https://github.com/PointCloudLibrary/pcl/pull/2116)
* Improve Doxygen comments for HistogramInterpolationMethod [[#2111]](https://github.com/PointCloudLibrary/pcl/pull/2111)
* Update organized.h [[#1965]](https://github.com/PointCloudLibrary/pcl/pull/1965)
* Typo [[#1968]](https://github.com/PointCloudLibrary/pcl/pull/1968)
* Fixed spelling and grammar errors [[#1959]](https://github.com/PointCloudLibrary/pcl/pull/1959)
* Fixed error in documentation. [[#1957]](https://github.com/PointCloudLibrary/pcl/pull/1957)

#### `PCL Tutorials:`

* Fix dataset link in conditional euclidean clustering tutorial [[#2546]](https://github.com/PointCloudLibrary/pcl/pull/2546)
* Fix dead links in Walkthrough tutorial [[#2532]](https://github.com/PointCloudLibrary/pcl/pull/2532)
* Simplify explanation of PointXYZ structure in ""Writing PCD"" tutorial [[#2534]](https://github.com/PointCloudLibrary/pcl/pull/2534)
* Fix misc. typos in tutorials and docstrings [[#2529]](https://github.com/PointCloudLibrary/pcl/pull/2529)
* Fix a dead link to Radu Rusu's dissertation in the tutorial. [[#2508]](https://github.com/PointCloudLibrary/pcl/pull/2508)
* Fix various errors and typos in the docstrings and tutorials [[#2486]](https://github.com/PointCloudLibrary/pcl/pull/2486)
* Fix link to Institut Maupertuis's ensenso_extrinsic_calibration repo [[#2447]](https://github.com/PointCloudLibrary/pcl/pull/2447)
* Add settings for hypothesis verification [[#2274]](https://github.com/PointCloudLibrary/pcl/pull/2274)
* Fix ICP tutorial [[#2244]](https://github.com/PointCloudLibrary/pcl/pull/2244)
* Fix error in example code for estimate set of surface for a subset of points in the input dataset [[#2203]](https://github.com/PointCloudLibrary/pcl/pull/2203)
* Update message about legacy point cloud types in tutorial [[#2175]](https://github.com/PointCloudLibrary/pcl/pull/2175)
* Add descriptor unpacking to GASD tutorial [[#2167]](https://github.com/PointCloudLibrary/pcl/pull/2167)
* Fix convert to `Eigen::Map<const Eigen::Vector3f>` from Normal of `pcl::PointXYZINormal` [[#2128]](https://github.com/PointCloudLibrary/pcl/pull/2128)
* Fix the tutorial qt_visualizer compilation issue: qt4 -> qt5. [[#2051]](https://github.com/PointCloudLibrary/pcl/pull/2051)
* Fix several documentation typos [[#2020]](https://github.com/PointCloudLibrary/pcl/pull/2020)
* Replace literal include of wrong CMakeLists file with correct script [[#1971]](https://github.com/PointCloudLibrary/pcl/pull/1971)
* Update Ensenso tutorial for Ensenso X devices [[#1933]](https://github.com/PointCloudLibrary/pcl/pull/1933)

#### `PCL Examples:`

* Suppress strict alias warning [[#2072]](https://github.com/PointCloudLibrary/pcl/pull/2072)
* Suppress (maybe) uninitialized warning [[#2073]](https://github.com/PointCloudLibrary/pcl/pull/2073)
* Fix CPC/LCCP segmentation examples for VTK 7.1 [[#2063]](https://github.com/PointCloudLibrary/pcl/pull/2063)

#### `PCL Tests:`

* Corrections to Windows unit tests. [[#2596]](https://github.com/PointCloudLibrary/pcl/pull/2596)
* Relax eigen22f test criteria [[#2553]](https://github.com/PointCloudLibrary/pcl/pull/2553)
*  Solve issues with failing features tests [[#2544]](https://github.com/PointCloudLibrary/pcl/pull/2544)
* Relax requirements in eigen22d test. Always provide a normalized result in `pcl::transformPlane`. [[#2503]](https://github.com/PointCloudLibrary/pcl/pull/2503)
* Enable tests_2d and tests_io in AppVeyor. [[#2505]](https://github.com/PointCloudLibrary/pcl/pull/2505)
* Relax threshold in Hough3DGrouping test [[#2507]](https://github.com/PointCloudLibrary/pcl/pull/2507)
* Relax precision requirements on TransformationEstimationLM test. [[#2497]](https://github.com/PointCloudLibrary/pcl/pull/2497)
* Relax rejector threshold in JointIterativeClosestPoint test. [[#2496]](https://github.com/PointCloudLibrary/pcl/pull/2496)
* vtk2mesh: Add parsing support to the new RGBA scalar field added in vtk8 [[#2492]](https://github.com/PointCloudLibrary/pcl/pull/2492)
* Revise direction test in SampleConsensusModelParallelLine/RANSAC to be consistent with set tolerance. [[#2491]](https://github.com/PointCloudLibrary/pcl/pull/2491)
* Make test conditions consistent with `OctreePointCloudSearch::boxSearch()` implementation. [[#2457]](https://github.com/PointCloudLibrary/pcl/pull/2457)
* Increase threshold for expected value in test_non_linear [[#2424]](https://github.com/PointCloudLibrary/pcl/pull/2424)
* Replace floating point numerals when using `boost::posix_time`. Fix compatibility with Boost 1.67. [[#2422]](https://github.com/PointCloudLibrary/pcl/pull/2422)
* Cleanup and improve unit test coverage for transformPointCloud functions [[#2245]](https://github.com/PointCloudLibrary/pcl/pull/2245)
* Fixes and new assertion macro in ""pcl_tests.h"" [[#2237]](https://github.com/PointCloudLibrary/pcl/pull/2237)
* Add new gtest path [[#1920]](https://github.com/PointCloudLibrary/pcl/pull/1920)

#### `PCL Tools:`

* Allow the `pcl_uniform_sampling` tool to deal with several formats (PCD, PLY and VTK) as input or output point cloud [[#2348]](https://github.com/PointCloudLibrary/pcl/pull/2348)
* mesh_sampling tool: Add support for colors [[#2257]](https://github.com/PointCloudLibrary/pcl/pull/2257)
* Error message on non-recognized feature names [[#2178]](https://github.com/PointCloudLibrary/pcl/pull/2178)
* Suppress sign compare warnings [[#2068]](https://github.com/PointCloudLibrary/pcl/pull/2068)
* [OCTREE] Compute accurately the centroids of octree in 'pcl_octree_viewer' [[#1981]](https://github.com/PointCloudLibrary/pcl/pull/1981)
* **[api][deprecation][new-feature]** Add new mls projection method. Deprecated `MovingLeastSquares::setPolynomialFit()`. [[#1960]](https://github.com/PointCloudLibrary/pcl/pull/1960)
* [OCTREE] Fix pcl_octree_viewer [[#1973]](https://github.com/PointCloudLibrary/pcl/pull/1973)
* [OCTREE] Remove a useless field in octree_viewer. [[#1980]](https://github.com/PointCloudLibrary/pcl/pull/1980)

#### `CI:`

* Disable Travis email notifications. Update PCL logo endpoint. [[#2535]](https://github.com/PointCloudLibrary/pcl/pull/2535)
* Migrate Travis to the new travis-ci.com platform [[#2538]](https://github.com/PointCloudLibrary/pcl/pull/2538)
* Enable tests_2d and tests_io in AppVeyor. [[#2505]](https://github.com/PointCloudLibrary/pcl/pull/2505)
* Fix docs on Travis CI. [[#2441]](https://github.com/PointCloudLibrary/pcl/pull/2441)
* Disable SSE flags in AppVeyor. [[#2438]](https://github.com/PointCloudLibrary/pcl/pull/2438)
* Split (yet again) Travis test job into two and tweak timings in building apps [[#2182]](https://github.com/PointCloudLibrary/pcl/pull/2182)
* **[new-feature]** Enable Global Tests on Windows CI [[#2137]](https://github.com/PointCloudLibrary/pcl/pull/2137)
* Travis merge test jobs. Expose VTK include directory for the visualization module. [[#2163]](https://github.com/PointCloudLibrary/pcl/pull/2163)
* Remove unnecessary PPAs and packages from Travis [[#2153]](https://github.com/PointCloudLibrary/pcl/pull/2153)
* AppVeyor - Change to simple style of specify triplet [[#2135]](https://github.com/PointCloudLibrary/pcl/pull/2135)
* Initial Appveyor CI integration [[#2083]](https://github.com/PointCloudLibrary/pcl/pull/2083)
* Change Travis to use pip3 for installing sphinx [[#2124]](https://github.com/PointCloudLibrary/pcl/pull/2124)
* [TRAVIS] Enable the build of apps. [[#2012]](https://github.com/PointCloudLibrary/pcl/pull/2012)
* [TRAVIS] Enable the build of tools. [[#2007]](https://github.com/PointCloudLibrary/pcl/pull/2007)
* Disable tools build in CI. [[#2003]](https://github.com/PointCloudLibrary/pcl/pull/2003)
",8162615
300,False,False,2017-08-08T06:04:14Z,2017-08-08T06:11:31Z,"## ChangeList

* Replaced `make_shared` invocations on aligned allocated vars
  [[#1405]](https://github.com/PointCloudLibrary/pcl/pull/1405)
* Created an issue template for bug reporting
  [[#1637]](https://github.com/PointCloudLibrary/pcl/pull/1637)
* PCL logo image is now locally available
  [[#1677]](https://github.com/PointCloudLibrary/pcl/pull/1677)
* Updated the Windows all in one installer for MSVC15
  [[#1762]](https://github.com/PointCloudLibrary/pcl/pull/1762)
* Added compile support to VTK 7.1
  [[#1770]](https://github.com/PointCloudLibrary/pcl/pull/1770)
* Fixed badges markup in README.md
  [[#1873]](https://github.com/PointCloudLibrary/pcl/pull/1873)
* Replaced C-style `sqrtf` with `std::sqrt`
  [[#1901]](https://github.com/PointCloudLibrary/pcl/pull/1901)

### `CMake:`

* Tweaks to PCL_DEFINITIONS behavior (to be **deprecated** in future
  versions)
  [[#1478]](https://github.com/PointCloudLibrary/pcl/pull/1478)
* VTK directory can now be manually specified during configuration
  [[#1605]](https://github.com/PointCloudLibrary/pcl/pull/1605)
* Updated the find Boost cmake macro to support the latest versions plus 
  exported definitions now give priority to finding the same Boost version 
  PCL was compiled with.
  [[#1630]](https://github.com/PointCloudLibrary/pcl/pull/1630)
* Corrected PCL_ROOT in PCLConfig.cmake
  [[#1678]](https://github.com/PointCloudLibrary/pcl/pull/1678)
* Removed automatic override of VTK_LIBRARIES
  [[#1760]](https://github.com/PointCloudLibrary/pcl/pull/1760)
* Updated find boost versions
  [[#1788]](https://github.com/PointCloudLibrary/pcl/pull/1788)
  [[#1855]](https://github.com/PointCloudLibrary/pcl/pull/1855)
  [[#1856]](https://github.com/PointCloudLibrary/pcl/pull/1856)
* Updated CUDA compute capabilities
  [[#1789]](https://github.com/PointCloudLibrary/pcl/pull/1789)
* Extend linking of `delayimp.lib` to all MSVC version
  [[#1823]](https://github.com/PointCloudLibrary/pcl/pull/1823)
* Removal of `MSVCxx` variables
  [[#1830]](https://github.com/PointCloudLibrary/pcl/pull/1830)
* Fixed path link to Documents of Windows Start-Menu
  [[#1857]](https://github.com/PointCloudLibrary/pcl/pull/1857)
* Fixed CPack for Documents
  [[#1858]](https://github.com/PointCloudLibrary/pcl/pull/1858)
* Fixed bug present when Ensenso SDK path included spaces
  [[#1875]](https://github.com/PointCloudLibrary/pcl/pull/1875)
* `-D_FORCE_INLINES` definition added for CUDA targets to prevent
  issues between old versions of the CUDA Toolkit and new versions
  of gcc
  [[#1900]](https://github.com/PointCloudLibrary/pcl/pull/1900)
* Implemented new versioning scheme for PCL, employing the suffix
  `-dev` in between releases.
  [[#1905]](https://github.com/PointCloudLibrary/pcl/pull/1905)
* Corrected search paths for Eigen on Windows
  [[#1912]](https://github.com/PointCloudLibrary/pcl/pull/1912)
* SSE definitions are now exported and cleanup of Eigen's
  definitions
  [[#1917]](https://github.com/PointCloudLibrary/pcl/pull/1917)
* Added support to dynamic linking against FLANN on Windows
  [[#1919]](https://github.com/PointCloudLibrary/pcl/pull/1919)
* Add new search path for GTest to the finder script
  [[#1920]](https://github.com/PointCloudLibrary/pcl/pull/1920)
* Fix discovery of PCL deployed out of install path
  [[#1923]](https://github.com/PointCloudLibrary/pcl/pull/1923)


### `libpcl_2d:`

* Removed the non-free lena-grayscale-png image :( 
  [[#1676]](https://github.com/PointCloudLibrary/pcl/pull/1676)
* 2d library is no longer generated since it contained no symbols
  [[#1679]](https://github.com/PointCloudLibrary/pcl/pull/1679)

### `libpcl_common:`

* Changed default alpha value to 255 on all RGB(A) point types
  [[#1385]](https://github.com/PointCloudLibrary/pcl/pull/1385)
* Fixed an issue preventing aligned memory allocation on 32-bit Windows
  systems
  [[#1665]](https://github.com/PointCloudLibrary/pcl/pull/1665)
* Fixed compile error on test_common on MSVC
  [[#1689]](https://github.com/PointCloudLibrary/pcl/pull/1689)
* Fixed parallel plane test condition on `pcl::planeWithPlaneIntersection`
  [[#1698]](https://github.com/PointCloudLibrary/pcl/pull/1698)
* Fixed endless loop condition in `compute3DCentroid`
  [[#1704]](https://github.com/PointCloudLibrary/pcl/pull/1704)
* `toPCLPointCloud2` is not resilient to an empty pointcloud input
  [[#1723]](https://github.com/PointCloudLibrary/pcl/pull/1723)
* Normal accumulator `normalized()` is now resilient to a 0 filled vector
  [[#1728]](https://github.com/PointCloudLibrary/pcl/pull/1728)
* Defined additional types in `PointCloud` to ensure STL container
  compatibility
  [[#1741]](https://github.com/PointCloudLibrary/pcl/pull/1741)
* Aligned malloc now works on Android as well
  [[#1774]](https://github.com/PointCloudLibrary/pcl/pull/1774)
* Added missing include to boost shared_ptr in vertices
  [[#1790]](https://github.com/PointCloudLibrary/pcl/pull/1790)
* Prevent incorrect copy of adjacent point in `fromPCLPointCloud2()`
  [[#1813]](https://github.com/PointCloudLibrary/pcl/pull/1813)
* Restored `Eigen::umeyama` for Eigen 3.3+
  [[#1820]](https://github.com/PointCloudLibrary/pcl/pull/1820)
  [[#1887]](https://github.com/PointCloudLibrary/pcl/pull/1887)
* Fixed type in deprecation messages
  [[#1878]](https://github.com/PointCloudLibrary/pcl/pull/1878)
* Improved support for mingw aligned allocation
  [[#1904]](https://github.com/PointCloudLibrary/pcl/pull/1904)
* Added test for macro `_USE_MATH_DEFINES` to avoid warnings
  [[#1956]](https://github.com/PointCloudLibrary/pcl/pull/1956)

### `libpcl_cuda:`

* Fixed macro definitions for the Windows platform
  [[#1568]](https://github.com/PointCloudLibrary/pcl/pull/1568)

### `libpcl_features:`

* NormalEstimation[OMP] and FPFHEstimation[OMP] are now instantiated for
  the same types as the non OMP variants.
  [[#1642]](https://github.com/PointCloudLibrary/pcl/pull/1642)
* Prevention of the addition of duplicate keys in `PFHEstimation`
  [[#1701]](https://github.com/PointCloudLibrary/pcl/pull/1701)
* Bug fixes in OUR-CVFH
  [[#1827]](https://github.com/PointCloudLibrary/pcl/pull/1827)
* Fixed incorrect initialization of SHOT
  [[#1859]](https://github.com/PointCloudLibrary/pcl/pull/1859)
  [[#1876]](https://github.com/PointCloudLibrary/pcl/pull/1876)

### `libpcl_filters:`

* ExtractIndices filter now aborts prematurely and prints error verbose
  in case it detects an index which exceeds the size on the input data
  [[#1670]](https://github.com/PointCloudLibrary/pcl/pull/1670)
* Potential reduction of computational time of `ModelOutlierRemoval`
  [[#1735]](https://github.com/PointCloudLibrary/pcl/pull/1735)
* Improved code readability in CropBox
  [[#1817]](https://github.com/PointCloudLibrary/pcl/pull/1817)

### `libpcl_gpu:`

* Added support to NVidia Pascal GPUs
  [[#1824]](https://github.com/PointCloudLibrary/pcl/pull/1824)
* Fixed compilation error in KinfuLS
  [[#1872]](https://github.com/PointCloudLibrary/pcl/pull/1872)
* Fixed CUDA architecture check
  [[#1872]](https://github.com/PointCloudLibrary/pcl/pull/1872)

### `libpcl_io:`

* RGB values are now always saved as uint32 on PCD files
  [[#1385]](https://github.com/PointCloudLibrary/pcl/pull/1385)
* Fixed find RealSense macro and compilation error with RealSenseGrabber 
  on Windows
  [[#1560]](https://github.com/PointCloudLibrary/pcl/pull/1560)
* Unified verbose on OctreePointCloudCompression
  [[#1569]](https://github.com/PointCloudLibrary/pcl/pull/1569)
* Improved performance on saving PLY, OBJ and VTK files
  [[#1580]](https://github.com/PointCloudLibrary/pcl/pull/1580)
* Added support to the transparency property `Tr` on pcl::MTLReader
  and fixed issue with parsing of the material's properties.
  [[#1599]](https://github.com/PointCloudLibrary/pcl/pull/1599)
* Fixed function signature mismatch in auto_io
  [[#1625]](https://github.com/PointCloudLibrary/pcl/pull/1625)
* Fix `ASCIIReader::setInputFields` interface
  [[#1690]](https://github.com/PointCloudLibrary/pcl/pull/1690)
* Adopted pcl_isnan in test_buffers to prevent compilation problems on
  MSVC12
  [[#1694]](https://github.com/PointCloudLibrary/pcl/pull/1694)
* Fixed incorrect laser number test condition in VLP Grabber
  [[#1697]](https://github.com/PointCloudLibrary/pcl/pull/1697)
* Fixed bug verbose output of compression statistics
  [[#1749]](https://github.com/PointCloudLibrary/pcl/pull/1749)
* Fixed a bug in the parsing of PLY headers
  [[#1750]](https://github.com/PointCloudLibrary/pcl/pull/1750)
* Replacement of `boost::math::isnan` by `pcl_isnan`
  [[#1766]](https://github.com/PointCloudLibrary/pcl/pull/1766)
* Binary files written by `PCDWriter` now have the same permissions
  as the ASCII ones
  [[#1779]](https://github.com/PointCloudLibrary/pcl/pull/1779)
* Fixed ODR violation when compiling with both OpenNI and OpenNI2
  [[#1818]](https://github.com/PointCloudLibrary/pcl/pull/1818)
* PLYReader now also accepts the property `vertex_index`
  [[#1847]](https://github.com/PointCloudLibrary/pcl/pull/1847)
* Fixed bug in return value of `pcl_converter`
  [[#1903]](https://github.com/PointCloudLibrary/pcl/pull/1903)


### `libpcl_keypoints:`

* Fixed memory leak in `ISSKeypoint3D`
  [[#1815]](https://github.com/PointCloudLibrary/pcl/pull/1815)

### `libpcl_octree:`

* Fixed unexpected octree boundaries' reduction
  [[#1532]](https://github.com/PointCloudLibrary/pcl/pull/1532)
  [[#1906]](https://github.com/PointCloudLibrary/pcl/pull/1906)
* Fixed octree precompilation mechanism
  [[#1639]](https://github.com/PointCloudLibrary/pcl/pull/1639)
  [[#1916]](https://github.com/PointCloudLibrary/pcl/pull/1916)
* Fixed invalid cast in `OctreePointCloudVoxelCentroid`
  [[#1700]](https://github.com/PointCloudLibrary/pcl/pull/1700)

### `libpcl_recognition:`

* LineMOD bug fixes
  [[#1835]](https://github.com/PointCloudLibrary/pcl/pull/1835)
* Removed redundant definition of point types
  [[#1836]](https://github.com/PointCloudLibrary/pcl/pull/1836)

### `libpcl_registration:`

* Fixed GICP behavior when a guess is provided
  [[#989]](https://github.com/PointCloudLibrary/pcl/pull/989)
* Fixed compilation issues in NDT 2D with Eigen 3.3
  [[#1821]](https://github.com/PointCloudLibrary/pcl/pull/1821)
* NDT 2D state is now properly initialized
  [[#1731]](https://github.com/PointCloudLibrary/pcl/pull/1731)

### `libpcl_sample_consensus:`

* Improved error verbose in
  `SampleConsensusModelPlane::optimizeModelCoefficient`
  [[#1811]](https://github.com/PointCloudLibrary/pcl/pull/1811)

### `libpcl_segmentation:`

* Fixed bug in organized multiplane segmentation refine function where label 
  indices were not being updated correctly
  [[#1502]](https://github.com/PointCloudLibrary/pcl/pull/1502)
* Corrected function signature in lccp segmentation
  [[#1761]](https://github.com/PointCloudLibrary/pcl/pull/1761)
* Fixed bug in boundary checking in Organized Connected Component
  Segmentation
  [[#1800]](https://github.com/PointCloudLibrary/pcl/pull/1800)
* Clarified documentation in Super Voxel Clustering
  [[#1804]](https://github.com/PointCloudLibrary/pcl/pull/1804)
* Fixed bug causing unnecessary computation in Region Growing
  [[#1882]](https://github.com/PointCloudLibrary/pcl/pull/1882)

### `libpcl_surface:`

* Double pass mean and covariance estimation are now employed in
  `ConcaveHull::reconstruct`
  [[#1567]](https://github.com/PointCloudLibrary/pcl/pull/1567)
* GP3 bug fixes
  [[#1850]](https://github.com/PointCloudLibrary/pcl/pull/1850)
  [[#1879]](https://github.com/PointCloudLibrary/pcl/pull/1879)
* Fixed buggy index cast in bilateral upsampling
  [[#1914]](https://github.com/PointCloudLibrary/pcl/pull/1914)


### `libpcl_visualization:`

* Fixed bug in addPointCloudNormals which was ignoring view point information
  [[#1504]](https://github.com/PointCloudLibrary/pcl/pull/1504)
* Fixed bug camera FOV computation in PCLVisualizerInteractorStyle
  [[#1611]](https://github.com/PointCloudLibrary/pcl/pull/1611)
* Fixed a MSVC compilation error with the colormap LUT
  [[#1635]](https://github.com/PointCloudLibrary/pcl/pull/1635)
* Abort prematurely when the camera file cannot be opened on
  `PCLVisualizerInteractorStyle`
  [[#1776]](https://github.com/PointCloudLibrary/pcl/pull/1776)
* Fix to `addText3D`
  [[#1805]](https://github.com/PointCloudLibrary/pcl/pull/1805)
* Added some exception guards in OpenNI and OpenNI2 Viewer tools
  [[#1862]](https://github.com/PointCloudLibrary/pcl/pull/1862)

### `PCL Apps:`

* Fixed bug in point cloud editor app which allowed to select points behind
  the camera
  [[#1539]](https://github.com/PointCloudLibrary/pcl/pull/1539)
* Explicitly define OpenGL headers to fix build on Ubuntu arm64
  [[#1715]](https://github.com/PointCloudLibrary/pcl/pull/1715)
* Replaced the use of `slot` and `signals` keywords in QT apps for
  their `Q_*` counterparts to present name clashes with Boost Signals
  [[#1898]](https://github.com/PointCloudLibrary/pcl/pull/1898)

### `PCL Docs:`

* Fix docs generation on Windows
  [[#1717]](https://github.com/PointCloudLibrary/pcl/pull/1717)

### `PCL Tests:`

* Modularized the build of unit tests.
  [[#1768]](https://github.com/PointCloudLibrary/pcl/pull/1768)
* Removed invalid test condition on test_common_io
  [[#1884]](https://github.com/PointCloudLibrary/pcl/pull/1884)

### `PCL Tools:`

* `mesh2pcd` has now an option to explicitly disable visualization
  [[#1768]](https://github.com/PointCloudLibrary/pcl/pull/1768)
* `mesh_sampling` has now an option to explicitly disable visualization
  [[#1769]](https://github.com/PointCloudLibrary/pcl/pull/1769)
* Mesh sampling now has an option to include normal information
  [[#1795]](https://github.com/PointCloudLibrary/pcl/pull/1795)
* Fixed incorrect return value in pcl_converter
  [[#1903]](https://github.com/PointCloudLibrary/pcl/pull/1903)

### `PCL Tutorials:`

* Fixed a crash in the pcl_visualizer tutorial triggered in interactive
  mode
  [[#1631]](https://github.com/PointCloudLibrary/pcl/pull/1631)
* Fixed hyperlink in narf keypoint extraction
  [[#1777]](https://github.com/PointCloudLibrary/pcl/pull/1777)
* Typo corrections in random sample consensus
  [[#1865]](https://github.com/PointCloudLibrary/pcl/pull/1865)
* Updated matrix transform tutorial and added cube.ply mesh
  [[#1894]](https://github.com/PointCloudLibrary/pcl/pull/1894)
  [[#1897]](https://github.com/PointCloudLibrary/pcl/pull/1897)
* Updated Ensenso tutorial for Ensenso X devices
  [[#1933]](https://github.com/PointCloudLibrary/pcl/pull/1933)

### `CI:`

* Applied a workaround to a regression bug introduced by doxylink
  in the docs build job
  [[#1784]](https://github.com/PointCloudLibrary/pcl/pull/1784)
* Build jobs refactoring
  [[#1768]](https://github.com/PointCloudLibrary/pcl/pull/1768)
* Enable ccache to speed up builds in CI
  [[#1892]](https://github.com/PointCloudLibrary/pcl/pull/1892)
",8162615
301,False,True,2017-07-18T09:16:07Z,2017-07-18T11:22:35Z,,8162615
302,False,True,2017-07-02T10:43:11Z,2017-07-02T10:52:33Z,,8162615
303,False,False,2016-06-14T15:51:26Z,2016-06-15T19:47:58Z,,8162615
304,False,False,2014-09-10T21:22:57Z,2014-09-10T21:43:02Z,"We are proud to announce the new PCL version 1.7.2. This release incorporates more than 300 pull requests merged during the last eleven months. Together with dozens of bug fixes it brings support for _VTK6_ and _OpenNI 2_.

The most notable changes are:
- Added support for VTK6
  [[#363]](https://github.com/PointCloudLibrary/pcl/pull/363)
- Removed Google Test from the source tree and added it as a system dependency
  [[#731]](https://github.com/PointCloudLibrary/pcl/pull/731)
- Added support for QHull 2012 on non-Debian platforms
  [[#852]](https://github.com/PointCloudLibrary/pcl/pull/852)

### `libpcl_common:`
- Added `BearingAngleImage` class
  [[#198]](https://github.com/PointCloudLibrary/pcl/pull/198)
- Added `pcl::CPPFSignature` point type
  [[#296]](https://github.com/PointCloudLibrary/pcl/pull/296)
- Added `getRGBAVector4i()`, `getBGRVector3cMap()`, and `getBGRAVector4cMap()`
  to all point types containing RGB/RGBA fields
  [[#450]](https://github.com/PointCloudLibrary/pcl/pull/450)
- Added a family of ""has field"" functions to check presence of a particular
  field in a point type both at compile- and run-time
  [[#462]](https://github.com/PointCloudLibrary/pcl/pull/462)
- Added a function to copy data between points of different types
  [[#465]](https://github.com/PointCloudLibrary/pcl/pull/465)
- Added test macros for equality/nearness checks
  [[#499]](https://github.com/PointCloudLibrary/pcl/pull/499)
- Added `descriptorSize()` to all point types with descriptors
  [[#531]](https://github.com/PointCloudLibrary/pcl/pull/531)
- Added possibility to copy a cloud inside another one while interpolating
  borders
  [[#567]](https://github.com/PointCloudLibrary/pcl/pull/567)
- Added a function to determine the point of intersection of three non-parallel
  planes
  [[#571]](https://github.com/PointCloudLibrary/pcl/pull/571)
- Fixed a bug in HSV to RGB color conversion
  [[#581]](https://github.com/PointCloudLibrary/pcl/pull/581)
- Added a new `CentroidPoint` class
  [[#586]](https://github.com/PointCloudLibrary/pcl/pull/586)
- Templated intersection computation functions on scalar type
  [[#646]](https://github.com/PointCloudLibrary/pcl/pull/646)
- Templated functions in 'eigen.h' on scalar type
  [[#660]](https://github.com/PointCloudLibrary/pcl/pull/660)
- Added functions to transform points, vectors, lines, etc.
  [[#660]](https://github.com/PointCloudLibrary/pcl/pull/660)

### `libpcl_features:`
- Added a simple implementation of CPPF using normalised HSV values in the
  feature vector
  [[#296]](https://github.com/PointCloudLibrary/pcl/pull/296)
- Added `MomentOfInertiaEstimation` and `ROPSEstimation` features
  [[#319]](https://github.com/PointCloudLibrary/pcl/pull/319)
- Fixed a problem in `OURCVFHEstimation::computeRFAndShapeDistribution()`
  [[#738]](https://github.com/PointCloudLibrary/pcl/pull/738)
- Fixed undefined behavior in `OURCVFHEstimation::computeFeature()`
  [[#811]](https://github.com/PointCloudLibrary/pcl/pull/811)
- Fixed memory corruption error in OUR-CVFH
  [[#875]](https://github.com/PointCloudLibrary/pcl/pull/875)

### `libpcl_filters:`
- Added a function to set the minimum number of points required for a voxel to
  be used in `VoxelGrid`
  [[#434]](https://github.com/PointCloudLibrary/pcl/pull/434)
- Added `GridMinimum` filter
  [[#520]](https://github.com/PointCloudLibrary/pcl/pull/520)
- Added a morphological filter that operates on Z dimension
  [[#533]](https://github.com/PointCloudLibrary/pcl/pull/533)
- Added progressive morphological filter to extract ground returns
  [[#574]](https://github.com/PointCloudLibrary/pcl/pull/574)
- Added a filter to remove locally maximal points in the z dimension
  [[#577]](https://github.com/PointCloudLibrary/pcl/pull/577)
- Added an approximate version of the progressive morphological filter
  [[#665]](https://github.com/PointCloudLibrary/pcl/pull/665)
- Added `ModelOutlierRemoval` class that filters points in a cloud based on the
  distance between model and point
  [[#702]](https://github.com/PointCloudLibrary/pcl/pull/702)

### `libpcl_io:`
- Added experimental version of an OpenNI 2.x grabber
  [[#276]](https://github.com/PointCloudLibrary/pcl/pull/276)
  [[#843]](https://github.com/PointCloudLibrary/pcl/pull/843)
- Added support for IFS file format
  [[#354]](https://github.com/PointCloudLibrary/pcl/pull/354)
  [[#356]](https://github.com/PointCloudLibrary/pcl/pull/356)
- Added possibility to load `PCLPointCloud2` from OBJ files
  [[#363]](https://github.com/PointCloudLibrary/pcl/pull/363)
- Fixed loading and saving of PLY files
  [[#510]](https://github.com/PointCloudLibrary/pcl/pull/510)
  [[#579]](https://github.com/PointCloudLibrary/pcl/pull/579)
- Fixed race conditions in `PCDGrabber`
  [[#582]](https://github.com/PointCloudLibrary/pcl/pull/582)
- Fixed multi openni grabber buffer corruption
  [[#845]](https://github.com/PointCloudLibrary/pcl/pull/845)
- Fixed incompatibility with Boost 1.56 in `LZFImageWriter`
  [[#867]](https://github.com/PointCloudLibrary/pcl/pull/867)
- Fixed a bug in `PLYReader` which lead to deformation of point clouds when
  displayed in `CloudViewer` or `PCLVisualizer`
  [[#879]](https://github.com/PointCloudLibrary/pcl/pull/879)

### `libpcl_kdtree:`
- Fixed double memory free bug in `KdTreeFLANN`
  [[#618]](https://github.com/PointCloudLibrary/pcl/pull/618)

### `libpcl_keypoints:`
- Added a method `Keypoint::getKeypointsIndices ()`
  [[#318]](https://github.com/PointCloudLibrary/pcl/pull/318)
- Added keypoints based on Trajkovic and Hedley operator (2D and 3D versions)
  [[#409]](https://github.com/PointCloudLibrary/pcl/pull/409)

### `libpcl_octree:`
- Fixed a bug in `OctreePointCloudAdjacency::computeNeighbors()`
  [[#455]](https://github.com/PointCloudLibrary/pcl/pull/455)
- Accelerated `OctreePointCloudAdjacency` building by disabling dynamic key
  resizing
  [[#332]](https://github.com/PointCloudLibrary/pcl/pull/332)
- Fixed a bug with infinite points in `OctreePointCloudAdjacency`
  [[#723]](https://github.com/PointCloudLibrary/pcl/pull/723)

### `libpcl_people:`
- Added a possibility to define a transformation matrix for people tracker
  [[#606]](https://github.com/PointCloudLibrary/pcl/pull/606)

### `libpcl_recognition:`
- Allow PCL to be built against a system-wide installed metslib
  [[#299]](https://github.com/PointCloudLibrary/pcl/pull/299)
- Fixed a bug in `ObjRecRANSAC::addModel()`
  [[#269]](https://github.com/PointCloudLibrary/pcl/pull/269)
- Added `LINEMOD::loadTemplates()` (useful for object recognition systems that
  store templates for different objects in different files)
  [[#358]](https://github.com/PointCloudLibrary/pcl/pull/358)

### `libpcl_registration:`
- Fixed `SampleConsensusInitialAlignment::hasConverged()`
  [[#339]](https://github.com/PointCloudLibrary/pcl/pull/339)
- Added `JointIterativeClosestPoint`
  [[#344]](https://github.com/PointCloudLibrary/pcl/pull/344)
- Made correspondence rejectors to actually work with ICP
  [[#419]](https://github.com/PointCloudLibrary/pcl/pull/419)
- Added `GeneralizedIterativeClosestPoint6D` that integrates Lab color space
  information into the GICP algorithm
  [[#491]](https://github.com/PointCloudLibrary/pcl/pull/491)
- Fixed bugs and optimized `SampleConsensusPrerejective`
  [[#741]](https://github.com/PointCloudLibrary/pcl/pull/741)
- Fixed a bug in `TransformationEstimationSVDScale`
  [[#885]](https://github.com/PointCloudLibrary/pcl/pull/885)

### `libpcl_sample_consensus:`
- Unified `SampleConsensusModelNormalParallelPlane` with
  `SampleConsensusModelNormalPlane` to avoid code duplication
  [[#696]](https://github.com/PointCloudLibrary/pcl/pull/696)

### `libpcl_search:`
- `search::KdTree` can now be used with different KdTree implementations
  [[#81]](https://github.com/PointCloudLibrary/pcl/pull/81)
- Added a new interface to FLANN's multiple randomized trees for
  high-dimensional (feature) searches
  [[#435]](https://github.com/PointCloudLibrary/pcl/pull/435)
- Fixed a bug in the `Ptr` typdef in `KdTree`
  [[#820]](https://github.com/PointCloudLibrary/pcl/pull/820)

### `libpcl_segmentation:`
- Added `GrabCut` segmentation and a show-case application for 2D
  [[#330]](https://github.com/PointCloudLibrary/pcl/pull/330)
- Updated `RegionGrowingRGB::assembleRegion()` to speed up the algorithm
  [[#538]](https://github.com/PointCloudLibrary/pcl/pull/538)
- Fixed a bug with missing point infinity test in `RegionGrowing`
  [[#617]](https://github.com/PointCloudLibrary/pcl/pull/617)
- Fixed alignment issue in `SupervoxelClustering`
  [[#625]](https://github.com/PointCloudLibrary/pcl/pull/625)
- Added a curvature parameter to `Region3D` class
  [[#653]](https://github.com/PointCloudLibrary/pcl/pull/653)
- Fixed a minor bug in `OrganizedConnectedComponentSegmentation`
  [[#802]](https://github.com/PointCloudLibrary/pcl/pull/802)

### `libpcl_surface:`
- Fixed a bug in `EarClipping` where computation failed if all vertices have
  the same x or y component
  [[#130]](https://github.com/PointCloudLibrary/pcl/pull/130)
- Added support for unequal focal lengths along different axes in texture
  mapping
  [[#352]](https://github.com/PointCloudLibrary/pcl/pull/352)
- Speeded up bilateral upsampling
  [[#689]](https://github.com/PointCloudLibrary/pcl/pull/689)
- Reduced space usage in `MovingLeastSquares`
  [[#785]](https://github.com/PointCloudLibrary/pcl/pull/785)

### `libpcl_tracking:`
- Fixed Hue distance calculation in tracking `HSVColorCoherence`
  [[#390]](https://github.com/PointCloudLibrary/pcl/pull/390)
- Added pyramidal KLT tracking
  [[#587]](https://github.com/PointCloudLibrary/pcl/pull/587)

### `libpcl_visualization:`
- Added a new color handler `PointCloudColorHandlerRGBAField` that takes into
  account alpha channel
  [[#306]](https://github.com/PointCloudLibrary/pcl/pull/306)
- Fixed `PCLVisualizer` crashes on OS X
  [[#384]](https://github.com/PointCloudLibrary/pcl/pull/384)
- Added possibility to display texture on polygon meshes
  [[#400]](https://github.com/PointCloudLibrary/pcl/pull/400)
- Added ability to add and remove several coordinate systems
  [[#401]](https://github.com/PointCloudLibrary/pcl/pull/401)
- Added `ImageViewer::markPoints()`
  [[#439]](https://github.com/PointCloudLibrary/pcl/pull/439)
- Added `setWindowPosition()` and `setWindowName()` to `PCLPlotter`
  [[#457]](https://github.com/PointCloudLibrary/pcl/pull/457)
- Changed camera parameters display to be more user-friendly
  [[#544]](https://github.com/PointCloudLibrary/pcl/pull/544)
- Added `PCLVisualizer::updateCoordinateSystemPose()`
  [[#569]](https://github.com/PointCloudLibrary/pcl/pull/569)
- Fixed display of non-triangular meshes in `PCLVisualizer`
  [[#686]](https://github.com/PointCloudLibrary/pcl/pull/686)
- Added a capability to save and restore camera view in `PCLVisualizer`
  [[#703]](https://github.com/PointCloudLibrary/pcl/pull/703)
- Added `PCLVisualizer::getShapeActorMap()` function
  [[#725]](https://github.com/PointCloudLibrary/pcl/pull/725)
- Fixed undefined behavior when drawing axis in `PCLVisualizer`
  [[#762]](https://github.com/PointCloudLibrary/pcl/pull/762)
- Fixed HSV to RGB conversion in `PointCloudColorHandlerHSVField`
  [[#772]](https://github.com/PointCloudLibrary/pcl/pull/772)
- Fixed non-working key presses in visualization GUIs on Mac OS X systems
  [[#795]](https://github.com/PointCloudLibrary/pcl/pull/795)
- Fixed a bug in `PCLVisualizer::addCube()`
  [[#846]](https://github.com/PointCloudLibrary/pcl/pull/846)
- Fixed a bug in cone visualization and added possibility to set cone length
  [[#881]](https://github.com/PointCloudLibrary/pcl/pull/881)

### `PCL Tools:`
- Added a simple tool to compute Hausdorff distance between two point clouds
  [[#519]](https://github.com/PointCloudLibrary/pcl/pull/519)
- Updated `pcl_viewer` to use RGB color handler as default
  [[#556]](https://github.com/PointCloudLibrary/pcl/pull/556)
- Added a morphological tool `pcl_morph` to apply dilate/erode/open/close
  operations on the Z dimension
  [[#572]](https://github.com/PointCloudLibrary/pcl/pull/572)
- Added a tool `pcl_generate` to generate random clouds
  [[#599]](https://github.com/PointCloudLibrary/pcl/pull/599)
- Added a tool `pcl_grid_min` to find grid minimums
  [[#603]](https://github.com/PointCloudLibrary/pcl/pull/603)
- Added a tool `pcl_local_max` to filter out local maxima
  [[#604]](https://github.com/PointCloudLibrary/pcl/pull/604)
- Added optional depth image input to `pcl_png2pcd` converter
  [[#680]](https://github.com/PointCloudLibrary/pcl/pull/680)
- Fixed memory size calculation in `pcl_openni_pcd_recorder`
  [[#676]](https://github.com/PointCloudLibrary/pcl/pull/676)
- Added device ID parameter to `pcl_openni_pcd_recorder`
  [[#673]](https://github.com/PointCloudLibrary/pcl/pull/673)
- Added automatic camera reset on startup in `pcl_viewer`
  [[#693]](https://github.com/PointCloudLibrary/pcl/pull/693)
- Added a capability to save and restore camera view in `pcl_viewer`
  [[#703]](https://github.com/PointCloudLibrary/pcl/pull/703)
- Updated `pcl_pcd2png` tool to be able to paint pixels corresponding to
  infinite points with black. Added Glasbey lookup table to paint labels with
  a fixed set of highly distinctive colors.
  [[#767]](https://github.com/PointCloudLibrary/pcl/pull/767)
- Added `pcl_obj2pcd` tool
  [[#816]](https://github.com/PointCloudLibrary/pcl/pull/816)

### `PCL Apps:`
- Fixed disappearing cloud from selection in Cloud Composer
  [[#814]](https://github.com/PointCloudLibrary/pcl/pull/814)
",8162615
305,False,False,2013-10-07T13:09:35Z,2013-10-07T13:12:01Z,"- New pcl::io::savePNGFile() functions and pcd2png tool (deprecates organized_pcd_to_png).
- Support for Intel Perceptual Computing SDK cameras.
- New Dual quaternion transformation estimation algorithm.
- Bugfixes.
",8162615
306,False,False,2012-07-17T23:09:54Z,2013-09-05T18:31:52Z,"The most notable overall changes are:

### `PCL Tools:`
- Added a tool for interfacing the marching cubes algorithms
- Added a PLY To PCD conversion tool
- Added a command line tool for transforming datasets based on their viewpoint
- Implemented feature #605: New octree visualizer example (Contributed by Raphael Favier. Thanks!)
- Updated ""openni_save_image"" to save both RGB and depth images as TIFF
- Added two command line tools for converting PCD data into PLY and VTK formats
- Fix for #504: Make ShapeContext and SpinImage uniform (thanks David!)

### `libpcl_common:`
- Fixed bug #658: Compiler error: undefined reference for getEulerAngles in pcl/common (thanks Gioia!)
- Moved towards a unified ""eigen.h"" header that only includes the Eigen headers that we need. 
- Added boost 1.48 and 1.49
- Added a default ""PointRepresentation"" type for ""ShapeContext"" (thanks Elizabeth!)
- Added a new ""PlanarPolygon"" class for representing 2D planar polygon regions
- Added ""SetIfFieldExists"" functor helper to copy data from a variable into a point field, if it exists
- Added a helper functor (""CopyIfFieldExists"") for copying out specific data out of a PointT field. See ""test_common.cpp"" for usage examples
- Added point value initialization by default in constructors for ""PointXYZI"", ""Normal"", ""PointXYZHSV"", ""PointXYZRGBL"", and ""PointXYZRGB""
- Updating transforms.hpp to ensure that point fields are copied when applying affine transform to a specific set of indices.
- Added error messages on failure of aux functions for PointCloud2, ""pcl::concatenatePointCloud"" and ""pcl::concatenateFields""
- Fixed win32 compilation error on test_plane_intersection 
- Implemented plane intersection feature (feature #644) with a related unit test 
- Added kissfft library 
- Bugfix of eigen22 version for smallest eigenvalue/vector 
- Add specialization for pcl::RGB point type 
- Intensity field accessor moved from keypoints/sift to common to be shared by others 
- Fixed some valid usages of point traits (e.g. static_cast::type>(...) ) on GCC 4.4.3 by explicitly instantiating some assert template long before it should actually be needed. 
- Added ESF Histogram 640 to point types 

### `libpcl_filter:`
- Added command line option ""-keep"" to preserve the organized data structure after a ""Passthrough"" filter
- Implemented feature #663: flexible comparison for conditional_removal filter (Thanks Julian!)
- Fix for bug #672: ijk grid coordinates in VoxelGrid computed differently in different functions (thanks Nicholas!)
- Fix for #572: Example ""Euclidean Cluster Extraction"" crashes / bug in VoxelGrid filter
- Improved performance of 3x getFieldIndex and removed dependency on pcl_io
- Fixed and implemented feature #518: VoxelGrid<> performance improvement (roughly 50+ times) (thanks Radoslaw!)
- Fixed the visual studio compilation error described in feature #614 (thanks Remus!)
- Fixed bug #674 (Elements in leaf_layout_ in VoxelGrid are not reset between calls to VoxelGrid::filter), Thanks Nicholas for the patch!
- Work on issue 614: updated the PassThrough filter to derive from FilterIndices instead of Filter 
- Fix: use a makInfinite function to annihilate points in zero_padding cases 
- Add new class to handle convolution in 3D space for radial basis kernel 
- Modifying VoxelGridCovariance to allow for control over minimum number of points and eigen value inflation for singularity prevention. 

### `libpcl_visualization:`
- Overloaded ""addRectangle"" in ""ImageViewer"" with several useful methods that take as input 3D min-max points and organized datasets, as well as image masks to create 2D rectangles on screen
- Renamed ""addBox"" to ""addFilledRectangle"" in ""ImageViewer""
- Added ""addPlanarPolygon"" methods for ""ImageViewer"" to display planar polygonal contours in the image
- Added new ""addMask"" methods to ""ImageViewer"" for displaying 2D image masks from a given ""PointCloud<T>""
- ""PCLVisualizer"" now has a new ""addCube"" method for passing {x, y, z}_{min, max} directly to the screen (thanks Jeremie!)
- Patch for two cases of mismatched new/free cases for PCL<->VTK data exchange (thanks Peter!)
- Fixed a problem with ""removeLayer"" which was causing shapes to flicker on screen on sequences like: ""removeLayer; addShape; spinOnce""
- Added ""addLine"" to ""ImageViewer"" for displaying 2D lines
- Added ""PCLVisualizer::close"" to close the interactor window and ""PCLVisualizer::set{Size, Position}"" to set the window size and position on screen added image viewer to the docs
- Added better support for 2D image visualization (via ""pcl::visualization::ImageViewer""): add/remove layers with different transparency, add 2D shapes (rectangles, circles, points, etc)
- Added ""wasStopped"" to ""ImageViewer"" to check if the window has been closed
- Fixed an issue in pcd_viewer where the PointPicking callback wasn't functioning properly
- Added ""setPosition"" to ""pcl::visualization::ImageViewer"" for allowing the image viewer to be moved somewhere else on screen
- Added two additional ""addPointCloud"" helpers for directly displaying ""sensor_msgs::PointCloud2"" data 
- Added ""addPointCloud"" method for ""sensor_msgs::PointCloud2"" data (useful to bypass the conversion to XYZ for ""pcd_viewer"")
- Added the capability to remove a cloud when ""removeShape"" is called, to preserve API backward compatibility (a ""PolygonMesh"" is not treated as a ""CloudActor"" inside ""PCLVisualizer"")
- Fixed a bug where the scalars were not updated properly on ""updatePointCloud"" thus causing VTK warnings on the console
- Fixing issue #105 (PCLVisualizer::spinOnce don't work on Win32 system). Thanks Thibault and Alessio.
- Added ""PointXYZRGBA"" callbacks for ""OpenNIGrabber"" and ""PCLVisualizer"".
- Fixed two bugs where a segfault would occur in ""addPolygonMesh"" when the input cloud would be empty, as well as #563 : PCLVisualizer::addPolygonMesh crash (thanks Mourad!)
- Fixed a bug where changing the point color using ""setPointCloudRenderingProperties"" would not update the actor's colors on screen
- Fix for #532: ""PCLVizualizer::addCoordinateSystem()"" switch from ""Eigen::Matrix4f"" to ""Eigen::Affine3f"" (thanks Aurel!)
- Fix for #524: ctrl problem with pcd_viewer (thanks Mourad!)
- Adding opt in flag -use_vbos to pcl_visuzlier. It's still quite buggy, but shouldn't affect the visualizer unless this flag is passed. 
- Added vtkVertexBufferObject/Mapper and moved pcl_image_canvas_source2d 
- Added case handling where an actor might not have a valid viewpoint_transformation matrix resulting in a seg fault if pressing ALT+R 
- Fixed bug in displaying addCoordinateSystem
- Added method to visualize intensity gradients 
- Added zoom functionality for ALT + Scroll-Wheel 
- Merged openni_viewer_simple with openni_viewer with all the available options except XYZI 

### `libpcl_octree:`
- Fixed bug #693 - bounding box adaption affected change detection results
- Applied patch by Robert Huitl, Issue #651, define maxVoxelCount in octree raycasting
- Fixed OSX compiler warnings 
- Fixed bug #683 - octree depth changes during stream compression 
- Added new octree key class 
- Added bounding box checks in method isVoxelOccupiedAtPoint (octree pointcloud class) 
- Removed maxKeys limit in octree key generation method 
- Added range checks for integer keys in octree classes, extended octree key class 
- Fixed bug #620 (octree search fails if point cloud with indices is given) in octree pointcloud class 

### `libpcl_io:`
- Added ""DepthImage"" signals/callbacks for ""PCDGrabber""
- Support for loading TAR-ed LMT files
- Added support for TAR-PCD files for ""PCDGrabber"". Simply use ""tar cvf file.tar *.pcd"" and use ""PCDGrabber"" on it afterwards
- Fixed a bug in the ""PointCloud<MatrixXf>"" feature estimation and I/O regarding the fields ""count"" property
- Added a ""saveVTKFile"" method helper for saving ""sensor_msgs::PointCloud2"" data
- Added support for reading PCD ascii and binary files (binary_compressed not implemented yet!) for pcl::PointCloudEigen::MatrixXf datatypes.
- Implemented and tested a fix for feature request #558: Implement IO for PointCloud<MatrixXf>
- Adding missing openni_device files from install
- Fixed a bug in ply reader
- Fixed bug #683 - dropping empty point clouds during stream compression 
- Add functions to convert between PCL and VTK data structures. 
- Handle red_diffuse, blue_diffuse and green_diffuse vertex properties 
- Fix bug where normals were written before RGB 
- Bugfix for #627 - Wrong include path for ply header

### `libpcl_features:`
- Fixed bug #676 in PCL Feature Search (thanks Adam!)
- Fixes compilation problem on Windows due to size_t variable in omp loop.
- Implemented feature request #661: border management in integral image normal estimation
- Fixed PFHRGBEstimation bug, thanks Luis 
- Bug fix in SHOT feature, thanks wack 
- Fixed a bug which caused some normals to point in the wrong direction 
- Added Camera Roll histogram
- Fix bug in index used for normal selection 
- Added esf feature 
- Added setViewPoint functionality and useSensorOriginAsViewPoint method to reset the viewpoint 
- Fixed bug #576 - CVFH respect setIndices now  
- Fixed issue #550: Uninformative error in VFHEstimation (thanks David!)
- Fix #527: Bug in IntegralImageNormalEstimation (thanks Christoph!)
- Fixed #544: overflow in implicit constant conversion warnings (thanks David!)
- Modified SHOT omp so that the default computation of the reference frames
- SHOT: Fixed invalid access when keypoints have increased from the previous call.
- Setting sensor origin and orientation correctly for normal point cloud 
- Fixed a bug in estimating the orientation of the normal (view point wasn't initialized in the constructor) 
- Bug fix: if the cloud is not dense search for neighbours could raise an excpetion 
- Bug fix: SHOT accepts only radius search 

### `libpcl_segmentation:`
- Fixed a few issues in the new segmentation classes where some comparators didn't have the appropriate ""Ptr"" and ""ConstPtr"" well defined
- Fixed a bug where points passed onto the search method were not checked for NaN/Inf in ""pcl::SegmentDifferences""
- Added a missing ""setDistanceFromOrigin"" to ""SACSegmentationFromNormals"" for ""SACMODEL_NORMAL_PARALLEL_PLANE"" (thanks A. Barral)
- Fix for #134 (Prism Extraction on Table top (flipping normal fails))
- Fixed a segmentation fault in ""SACSegmentationFromNormals"" caused by calling ""segment"" without passing the input XYZ or normal data
- Fixed a bug in organized connected component segmentation. Previously would crash if the first pixel had a valid depth (doesn't occur on kinect data). 
- Bugfix of issue # 675: Euclidean cluster extraction access violation. Thanks to Icy for helping find the solution 
- Fixed bug #673 in EuclideanClusterExtraction 
- Added new code for min cut segmentation 
- Fixed bug #681: member variable was not set in constructor (thanks Bhaskara!) 
- Added a threshold to MultiPlaneSegmentation for curvature, allowing us to discard smooth (but non-planar) regions. 
- Added optional projection for multi_plane_segmentation. 
- Added some new comparators for use with OrganizedConnectedComponents including RGB and edge aware 
- Added additional fucnction call for segmentAndRefine. 
- Added a comparator for doing euclidean clustering on organized point clouds. 
- Added fast SeededHueSegmentation implementations 
- Fixed segfault in multi plane refinement and functorized the comparison. 
- Improved MultiPlaneSegmentation to allow refinement of regions, and support different comparators. 
- New classes AutomatedSegmentation, AutomatedTreeSegmentation 
- Added OrganizedConnectedComponentSegmentation, which is a general class for use with organized point clouds  and can take user specified comparators. 
- Added OrganizedMultiPlaneSegmentation which returns all planes in an organized cloud, along with the PlaneCoefficientComparator needed to do this. 

### `libpcl_surface:`
- Fixed a grave bug where ""setIndices"" was not used in ""ConvexHull""
- Added fix for #562: pcl::ConcaveHull crashes on an empty cloud (thanks Mourad!)
- Added ""PCLSurfaceBase"" base class for ""MeshConstruction"" and ""SurfaceReconstruction"", to unify the API around ""setSearchMethod(&Search)"" and ""reconstruct(&PolygonMesh)""
- Added GPU accelerated convex hull. 7x for Ramesses dataset (700k points)
- Added a setDimension function to concave hull, so users can specify desired dimensionality of the resulting hull. If no dimension is specified, one will be automatically determined.
- Fixed bug #692 - MovingLeastSquares indices issues
- Added curve fitting and trimming of surfaces to examples/surface/example_nurbs_fitting_surface.cpp
- Added iterative fitting routines for curve fitting surface::on_nurbs::Triangulation - added convertion functions for nurbs curve to line-polygon - added convertion functions for nurbs surface and curve to PolyMesh 
- Added flag to enable/disable usage of UmfPack for fast solving of sparse systems of equations - added triangulation functions to convert ON_NurbsSurface to pcl::PolygonMesh 
- Added bug fix in ConcaveHull, thanks to summer.icecream
- Added marching cubes using RBF and Hoppe SDF
- Pushed new functions that perform texture-mapping on meshes.
- Fix: issue #646 (vtk_smoothing not copied)
- Added new functionalities to TextureMapping: Find occlusions based on raytracing in octrees, UV mapping based on Texture resolution and camera focal lenght.
- Relaxing dimensionality check threshold on concave_hull, so that 3D hulls should no longer be calculated on 2D input. 
- Added poisson filter

### `libpcl_keypoints:`
- Added combined Harris keypoint detector to detect corners in image, in 3D and combined ones
- Fix bug #691 (Compiler error: undefined reference for setMinimalDistance in pcl/keypoints/harris_keypoint2D)
- Fixed the #637 pitfall in harris3D and harris6D 
- Added implementation of 2D corner detectors 

### `libpcl_geometry:`
- Added a new PCL library for computational geometry
- Added bugfix to remove self intersecting polygons 
- Fixed some refinement corner cases for polygon approximation 
- Added line iterator class for iterating over e.g. an image/organized cloud in the pixel space.

### `libpcl_search:`
- Added NaN checks in ""pcl::search::FlannSearch"" 
- Skip infinite neighbor candidates in pcl::search::OrganizedNeighbor::radiusSearch 
- Added point projection method for organized search 

### `libpcl_tracking:`
- Fixed issue #514: SpinImages segfault when using setKSearch (thanks David!)
- gcc-4.7 compatibility issues in pcl::tracking fixed. Thanks to Rich Mattes

### `libpcl_sample_consensus:`
- Implemented feature #589: Add sac_model_cone and sac_model_normal_sphere (contributed by Stefan Schrandt. Thanks!)
- Fix for #616: pcl::ProgressiveSampleConsensus<PointT>::getRandomSamples unimplemented (thanks Mourad!)
- Fix for #498: Bug in setOptimizeCoefficients for pcl::SACMODEL_SPHERE.
- Fixed bug #648: code was checking for plane perpendicular to given axis instead of parallel 
- Applied patch for feature request #649: Locally constrained model generation for Sample Consensus 

### `libpcl_registration:`
- Fixed issue #619: Cannot call pcl::registration::TransformationValidationEuclidean::validateTransformation (thanks Raphael!)
- Added code for #592: correspondence estimation based on normal shooting (coded by Aravindhan. Thanks!)
- Fixed #533: WarpPointRigid missing EIGEN_MAKE_ALIGNED_OPERATOR_NEW (thanks Radoslaw!)
- Correct overlapping grid distribution in 2D NDT implementation
",8162615
307,False,False,2012-02-23T10:21:04Z,2013-09-05T18:30:49Z,"The most notable overall changes are:
- new framework for PCL examples in the example/ folder
- added the ICCV 2011 tutorial code to the list of bundled applications
- a brand new PCL tracking library (`libpcl_tracking`)
- new, well-tested implementations for `OrganizedNeighbor` and `BruteForceSearch` in `libpcl_search`
- considerable speedups for: eigendecomposition, covariance matrix estimation, and normal estimation (now running at 30Hz on VGA data)
- a lot of bug fixes and code refactorizations and optimizations (thanks to everyone that contributed!)
- compilation now defaults to Eigen column major again, but all the code in PCL should compile and work against both row major and column major matrices.
- libpcl_range_image is now incorporated into pcl_common, no extra linking required.

### `libpcl_common`
- added two new methods to compute centroid and covariance at once. Both are faster than calculating first the centroid and afterwards the covariance matrix. The float versions of the new methods are twice as fast but less accurate, whereas the double versions are more accurate and about 35% faster.
- fixed a few issues in our ScopeTime class where the creation of the string as well as the cerr were contributing negatively to the time measurements
- added empty() to PointCloudEigen::MatrixXf to return whether the matrix is empty or not
- added size to PointCloudEigen::MatrixXf and fixed the constructor warnings exposed by -pedantic
- added two new Point Types: Axis and ReferenceFrame as they are used in the Reference Frame calculations
- added a helper functor (`CopyIfFieldExists`) for copying out specific data out of a PointT field. See `test_common.cpp` for usage examples
- implemented and tested a fix for feature request #558: Implement IO for PointCloud<MatrixXf>

### `libpcl_filters`
- refactored RandomSample to return sorted indices. In addition it now runs nearly twice as fast at it did previously.
- fixed and implemented feature #518: VoxelGrid<> performance improvement (roughly 50+ times)

### `libpcl_kdtree`
- removed unneeded mutices, added asserts instead of constant checks (the user is responsible for passing in valid data!) and sped up a few other things in KDTreeFLANN

### `libpcl_search`
- adapted use of flann::Matrix to new semantics of the 'stride' parameter, fixing incorrect results and a crash in FlannSearch
- changes that affect pcl_features, pcl_search, pcl_octree, pcl_registration, pcl_surface:
  - we used to have 3 ""overloads"" for nearestKSearch and 3 for radiusSearch that every class inheriting from pclk::KdTree or pcl::search::Search needed to implement. Because most of the children always had the same implementation (copy&paste) we moved it up in the base class, made the methods virtual, and only children that need to change that behavior will overwrite it.
  - the max_nn parameter from radiusSearch has been changed from int with a default value of -1 to an unsigned int with a default value of 0. Each radiusSearch implementation should check for 0 or >= max_points_in_cloud and branch accordingly (if needed).
  - const correctness is now implemented everywhere in all nearestKSearch and radiusSearch operations
- added an implementation of KdTreeFLANN for PointCloudEigen::MatrixXf data structures
- FlannSearch: don't include flann/matrix.h, move all FLANN includes to impl/flann_search.hpp. Also adapt max_nn parameter in radius search to change r3962 (pass 0 to search for all neighbors instead of -1)
- completely new and shiny `BruteForceSearch` and `OrganizedNeighbor` classes

### `libpcl_octree`
- fixed issue #513 (bug in octree iterator)
- fixed octree bounding box adaption
- fixed range test in getPointByIndex method (octree)
- fixed bug #604 & removed compiler warnings in Visual Studio 10
- fixed numerical problem in octree pointcloud class when points lie very close to the bounding box bounds
- improved performance with std::deque in OctreeBreadthFirstIterator class
- added breadth-first octree iterator and depth-first octree iterator classes, restructured octree iterator classes, moved ""getVoxelBounds"" method from OctreeIterator class to OctreePointCloud class

### `libpcl_sample_consensus`
- added explicit checks + errors for NaN covariance matrices
- fixed a crash on 32bit platforms (thanks bharath)
- fix for #498: Bug in setOptimizeCoefficients for pcl::SACMODEL_SPHERE. The issue actually exposed a grave bug introduced with r2755, when we switched from CMinPack to Eigen. The fix touches all segmentation models in pcl_sample_consensus using Levenberg-Marquardt, and TransformationEstimationLM in libpcl_registration. Also added unit test to catch this in the future.

### `libpcl_io`
- fix row-major/column-major issues in I/O (#578 related)
- fixed #593 by removing unimplemented method declarations
- added a `saveVTKFile` method helper for saving `sensor_msgs::PointCloud2` data
- added support for reading PCD ascii and binary files (binary_compressed not implemented yet!) for pcl::PointCloudEigen::MatrixXf datatypes.
- implemented and tested a fix for feature request #558: Implement IO for PointCloud<MatrixXf>
- added `PointXYZRGBA` callbacks for `OpenNIGrabber` and `PCLVisualizer`
- fixed issue #565
- fixed a few bugs in PCDReader regarding uint8/int8 data values and added a comprehensive unit test for all possible combinations of data types that we support in PCL
- added isValueFinite for checking whether a value T is finite or not, and rewrote the PCDReader bits of code that perform the is_dense checks
- integrated libply written by Ares Lagae as an independent component in io
- rely on ply library for PLY parsing, remove the old parser and use the freshly integrated libply, change the namespace ::ply to ::pcl::io::ply to avoid any potential issue

### `libpcl_surface`
- Updated convex hull.  It should now be somewhat faster, and allows users to optionally specify if the input is 2D or 3D, so the input dimension need not be calculated every time.
- fix for #562: pcl::ConcaveHull crashes on an empty cloud (thanks Mourad!)
- added option to ensure that triangle vertices are ordered in the positive direction around the normals in GreedyProjectionTriangulation
- fixed issue #489 in GreedyProjectionTriangulation
- fixed triangle vertex ordering issues in OrganizedFastMesh
- MarchingCubes now adheres to the new pcl_surface base class architecture
- added PCLSurfaceBase base class for MeshConstruction and SurfaceReconstruction, to unify the API around setSearchMethod(&Search) and reconstruct(&PolygonMesh)
- added marching_cubes_reconstruction tool

### `libpcl_features`
- fixed issue #550: Uninformative error in VFHEstimation (thanks David!)
- fix for #504: Make ShapeContext and SpinImage uniform (thanks David!). Note: this is an API breaking change, as `setInputCloudWithNormals`, which was deviating from the `FeatureEstimation` API is now replaced with patched `setInputCloud` and `setInputNormals`, thus no longer causing an error. However, we are confident with this change as the API was broken, so this is a bug fix.
- fixed a bug in the `PointCloud<MatrixXf>` feature estimation and I/O regarding the fields `count` property
- fixed an issue where the header stamp should only be copied from a PointCloud<T> into a PointCloud<MatrixXf> in PCL standalone, and not in PCL in ROS
- optimized RSD computation
- speeded up normal estimation in IntegralImageNormalEstimation
- renamed computeFeature (MatrixXf&) into computeFeatureEigen (MatrixXf&) and compute (MatrixXf&) into computeEigen (MatrixXf&) to keep the compiler happy, avoid multiple inheritance, and use clearer semantics between the two different output estimation methods
- fixed an issue where if radius would be defined for VFHEstimation, Feature::initCompute would error out
- fixed issue #539 (fpfh_estimation tutorial)
- fixed issue #544 (overflow in implicit constant conversion warnings)
- fixed issue #527 (bug in IntegralImageNormalEstimation)
- fixed issue #514 (SpinImages segfault when using setKSearch)

### `libpcl_registration`
- added TransformationValidation base class and TransformationValidationEuclidean as a measure to validate whether a final transformation obtained via TransformationEstimation when registering a pair of clouds was correct or not
- added getter/setter for maximum number of inner iterations to control number of optimizations in GeneralizedIterativeClosestPoint
- fixed issue #507
- fixed issue #533 (WarpPointRigid missing EIGEN_MAKE_ALIGNED_OPERATOR_NEW)
- fixed issue #464 (already defined function pointers)
- fixed a grave bug on 32bit architectures where MapAligned was used incorrectly

### `libpcl_segmentation`
- fixed a segmentation fault in SACSegmentationFromNormals caused by calling segment without passing the input XYZ or normal data
- added a missing `setDistanceFromOrigin` to `SACSegmentationFromNormals` for `SACMODEL_NORMAL_PARALLEL_PLANE` (thanks A. Barral)

### `libpcl_visualization`
- added `PointXYZRGBA` callbacks for `OpenNIGrabber` and `PCLVisualizer`
- fixed two bugs where a segfault would occur in `addPolygonMesh` when the input cloud would be empty, as well as #563 : PCLVisualizer::addPolygonMesh crash (thanks Mourad!)
- added the capability to remove a cloud when `removeShape` is called, to preserve API backward compatibility (a `PolygonMesh` is not treated as a `CloudActor` inside `PCLVisualizer`)
- fix #472: at startup the camera view pointis set to last added point cloud, but with the key combination ALT+r on can iterate through the view points of the visualized point clouds.
- added `addPointCloud` method for `sensor_msgs::PointCloud2` data (useful to bypass the conversion to XYZ for `pcd_viewer`)
- added `PCL_VISUALIZER_IMMEDIATE_RENDERING` for processing large datasets
- refactorized `pcd_viewer` to consume less memory by skipping the intermediate conversion to `PointCloud<PointXYZ>`, clearing the `PointCloud2` data once converted to VTK, and enabling intermediate mode
- added `setPosition` to `pcl::visualization::ImageViewer` for allowing the image viewer to be moved somewhere else on screen
- changed the `openni_image` viewer tool to display both RGB and depth images
- fixed a nasty bug where the scalars range were not correctly updated in the mapper on updatePointCloud thus causing weird VTK warnings at the console
- added setupInteractor to allow QVTK customizations
- pcd_grabber_viewer now shows the recorded images in PointXYZRGB clouds, and can use fps=0 and trigger each new frame manually by pressing SPACE
- fixed an BGR/RGB issue in image_viewer
- added setKeyboardModifier to change the default keyboard modifier from Alt to Shift or Ctrl so that in QVTK or other widgets, we can still use shortcuts like Mod+r, Mod+f, etc
- PCLVisualizer is now working with VTK compiled for cocoa, no X11 necessary on OS X
- build bundle executable for pcd_viewer if VTK is compiled with Cocoa. With that the keyboard events are handled by the application
- modified openni_passthrough to use QVTK instead of VTK
- added PCLVisualizer zoom in/out via /- [ alt]
- implemented feature #516 (pcd_viewer multiview with .vtk files)
- added showMonoImage for displaying a monochrome unsigned char 2D image in PCLVisualizer
- added setFullScreen and setWindowBorders methods to allow an user to change the full screen/border properties of the PCLVisualizer GUI
- fix for issue #519 (set the minimum number of cloud points to 1 in vtkLODActor)
- fix for issue #524 (ctrl problem with pcd_viewer)
- fix for issue #532 (PCLVizualizer::addCoordinateSystem() switch from Eigen::Matrix4f to Eigen::Affine3f)
- bug fix in pcd_grabber_viewer: now sorting the read .pcd file by name before showing them (was in random order before)
- fixed issue #525 (pcd_viewer did not handle nan values correctly in fields other than x, y, z)
- fixed a bug where changing the point color using setPointCloudRenderingProperties would not update the actor's colors on screen
- workaround for displaying FPS rate on PCLVisualizer - disabled backface culling because of known VTK issue
",8162615
308,False,False,2011-12-02T13:06:34Z,2013-09-05T18:29:28Z,"- fixed bug #428: in `PointCloudColorHandlerRGBField` where using an ""rgba"" field was causing an error in `pcd_viewer` (thanks Maurice!)
- fixed bug #404: in `PointCloudColorHandlerRGBField<sensor_msgs::PointCloud2>` where one of the offsets for Z was incorrectly calculated thus leading to erroneous data (thanks Lucas!)
  fixed bug #420: in `OrganizedNeighbor` where one of the `radiusSearch` signatures was working only if the cloud is _not_ organized (thanks Hanno!)
- fixed bug #421: `toROSMsg` referenced the address of a temporary return
- fixed bug #422: SHOT estimation did not work with different surface than keypoints
- fixed bug #430: an infinite loop in SAC methods if no valid model could be found
- fixed bug #433: `CropBox` did not update width and height member of output point cloud
- added missing using declarations for shot
- added a missing include file to transformation_estimation_point_to_plane.h; 
- added transformation_estimation_point_to_plane_lls.h/hpp to the CMakeLists file
- fixed an issue where the `is_dense` flag was not set appropriately when reading data from a binary file (thanks Updog!)
- fixed a bug in the `PLYWriter` class where the element camera was not correctly set thus leading to crashes in Meshlab (thanks Bruno!)
- fixed a bug in `PrincipalCurvaturesEstimation` where the _pc1_ and _pc2_ magnitudes were not normalized with respect to the neighborhood size, thus making comparisons of different neighborhoods impossible (thanks Steffen!)
- set the lighting off on `setShapeRenderingProperties` when the user tries to control the color of the object precisely
  fixed bug in `PointCloudColorHandlerRGBField<sensor_msgs::PointCloud2>` where y_point_offset and z_point_offset were not incremented
- fixed a bug in tools/compute_cloud_error
- fixed a crash in test_ii_normals.cpp
- removed unnecessary header from point_correspondence.h
- fixed unnormalized covariance matrix in `computeCovarianceMatrixNormalized`
- added missing include in std_msgs/Header.h
- added error checking for radius search in `extractEuclideanClusters`
- fixed a bug in `PassThrough` where NaN values were not correctly replaced by the user-specified value
- fixed a bug in ply_io when writing PolygonMesh
- fixed a bug in ply_io when unpacking rgb values
",8162615
309,False,False,2012-01-01T06:58:14Z,2013-09-05T18:27:00Z,"The most notable overall changes are:
- changed the default on the order of data in all Eigen matrices to be **row major** `-DEIGEN_DEFAULT_TO_ROW_MAJOR` (Eigen defaults to column major). Be careful if your code was using 1D index operators, as they might be broken! See http://eigen.tuxfamily.org/dox/TopicStorageOrders.html and http://listengine.tuxfamily.org/lists.tuxfamily.org/eigen/2011/12/msg00062.html.

### `libpcl_common`
- added float union to the pointXYZRGBL type, in order to aid PCD_viewer compatibility
- bugfix: `pcl::computeCovarianceMatrixNormalized` did not normalize for each implementation
- fixed bug #421: `at(u,v)` should return a const reference
- added `InitFailedException` and `UnorganizedPointCloudException`. Created `PCL_EXCEPTION` helper macro
- added the GFPFH global descriptor point type
- added gaussian kernel class and utilities
- added `isTrivial` to `pcl::PointRepresentation` which allows avoiding copy operations in special cases, thus speeding up operations like `rep->isValid (p)`
- added `eigen33` for smallest eigenvalue/vector and only eigenvalues version
- added `PointCloudColorHandlerHSVField` implementation
- deleted wrong definition of density in `pcl::transformPointCloud`
- added copy constructor for PCLBase
- fixed `PointCloud`'s in range inserter: width and height were not updated
- added `PCL_MAJOR_VERSION` and `PCL_MINOR_VERSION` #defines per Ryan's request
- fixed the `getMatrixXf` advanced user API call to return the correct values now that we are forcing Eigen Matrices to be row major in 1.x
- moved the content of `win32_macros.h` into `pcl_macros.h`
- added an `isFinite` method to check for x/y/z = NaN in point_types.hpp
- moved internal headers from `pcl/ros/point_traits.h` into `pcl/point_traits.h` and `pcl/ros/for_each_type.h` to `pcl/for_each_type.h` (these headers are for internal use only and should have never been imported by user code - however pcl_ros in perception_pcl_unstable will need to be modified when following trunk after this revision, as that is the only external piece of code that should import these headers)
- fixed one of the constructors for `pcl::PointCloud<T> (cloud, indices)` that was incomplete
- no longer checking ""frame_id"" parameters in header for operator += in `pcl::PointCloud<T>`
- added operator + for `pcl::PointCloud<T>`
- improved doxygen documentation all around `libpcl_common`
- added new specialization for `pcl::PointCloud<Eigen::MatrixXf>` - for _advanced users only_! (expect the API to change in trunk if needed)
- moved `NdCopyPointEigenFunctor` and `NdCopyEigenPointFunctor` from `voxel_grid.h` to `point_cloud.h`
- added `CloudProperties` class for optional properties for `pcl::PointCloud<Eigen::MatrixXf>`, and moved `sensor_origin_` and `sensor_orientation_` there (as `properties.sensor_origin` and `properties.sensor_orientation`), and removed `header`, while keeping `header.stamp` as `properties.acquisition_time`
- fixed the copy constructor (vector<size_t> -> vector<int>) and added an implementation for the + operator
- added a general convolution class. Convolution handles point cloud convolution in rows, columns and horizontal directions. Convolution allows for 3 policies: zero padding (default), borders mirroring and borders duplicating through `PointCloudSpring` class
- refactorized `PointCorrespondence` and `Correspondence` into the same thing, per issue #458
- added `ChannelProperties` in preparation for 2.0
- fixed bug #445: Overloaded the setIndices method in PCLBase so that it can accept `boost::shared_ptr<const std::vector> >`
- disabled unit test for `getMatrixXfMap` in DEBUG mode, as it was failing due to eigen's strictness on aligned/unaligned data, and added const+non consts versions

### `libpcl_filters`
- fixed bug in `random_sample.cpp`; The `PointCloud2` filter wasn't working causing the unit test to fail
- crop_box filter now supports `PointT` and `PointCloud2` point clouds
- added a normal space sampling filter
- fixed bug #433: `pcl::CropBox` doesn't update `width` and `height` member of output point cloud
- fixed bug #423 `CropBox` + `VoxelGrid` filters, order changes behaviour (using openni grabber)
- add `CropHull` filter for filtering points based on a 2D or 3D convex or concave hull. The ray-polygon intersection test is used, which relys on closed polygons/surfaces
- added clipper3D interface and a draft plane_clipper3D implementation
- removed spurious old `ColorFilter` class (obsolete, and it was never implemented - the skeleton was just lurking around)
- better Doxygen documentation to `PassThrough`, `VoxelGrid` and `Filter`
- moved the `set/getFilterLimits`, `set/getFilterFieldName`, and `get/setFilterLimitsNegative` from `Filter` into `VoxelGrid` and `PassThrough`, as they were the only filters using it. The rest were not, thus leading to user confusion and a bloated API.

### `libpcl_kdtree`
- fixed bug #442: reversed template parameters preventing use of nearestKSearchT and radiusSearchT in `pcl::search::Search` and `pcl::kdtree:KdTree`

### `libpcl_search`
- fixed a bug in `OrganizedNeighbor` where one of the `radiusSearch` signatures was working only if the cloud is _not_ organized (#420 - thanks Hanno!)
- updated `pcl::search:OrganizedNeighbor` to be back functional, radiusSearch is working back, 4-6x faster then KdTree, Knearest still need to implement this
- changed `pcl::search::FlannSearch`: fixed style of class and tests, moved impl to hpp
- cleaning up `OrganizedNearestNeighbor` as well as implementing one of the missing `radiusSearch` methods
- improved documentation for libpcl_search and silenced all Doxygen warnings
- removed auto (it needs to be completely rewritten and was left in a very bad state)
- made sure all the output of the search method is consistently returning 0 in case the nearest neighbor search failed and not -1
- updated kdtree wrapper code for the latest FLANN release

### `libpcl_octree`
- added method `getVoxelBounds` to octree iterator & removed result vector reserves
- improved documentation for `libpcl_octree` and silenced all Doxygen warnings

### `libpcl_sample_consensus`
- fixed an omission of the sample size declaration for `SACMODEL_PARALLEL_LINES` (thanks Benergy)
- replaced rand () with boost random number generators and fixed all failing unit tests
- workaround to get rid of infinite loops if no valid model could be found

### `libpcl_io`
- refactorization and consistent code indentation + make sure the timestamp is not set if we use PCL in ROS
- fixed an older issue where the `is_dense` flag was not set appropriately when reading data from a binary file (thanks Updog!)
- fixed an issue in the `PLYWriter` class where the element camera was not correctly set thus leading to crashes in Meshlab (thanks Bruno!)
- the VTK library loads vertex colors in PLY files as RGB. Added that to the polymesh loader.
- fixed 2 bugs in writing `PolygonMesh` and unpacking RGB
- fixed a bug in the .OBJ exporter to strip the path from the material library filename (thanks Robert!)
- added support for exporting vertex normals to the .OBJ (`pcl::io::saveOBJFile`) file exporter (thanks Robert!)
- fixed a 32bit/64bit issue in pointcloud compression
- added method to write obj files from `PolygonMesh`
- added serial number support for Windows using mahisorns patch. Thanks to mahisorn
- overloaded callbacks for `OpenNIGrabber` to output `PointCloud<Eigen::MatrixXf>` datasets
- added the possibility to write binary compressed Eigen data to disk using two new methods: `generateHeaderEigen` and `writeBinaryCompressedEigen`. Performance improvements to 30Hz I/O
- fix for #463 (Missing Symbol rgb_focal_length_SXGA_)
- fix: rgb values need to be packed before saving them in PointCloud2 for `PLYWriter`
- added example code for accessing synchronized image x depth data
- added support for the Stanford range_grid element and obj_info for PLY files. If you chosse to use range_grid instead of camera then only valid vertices will be written down to the PLY file.

### `lipcl_keypoints`
- added refine method for `Harris3D` corner detector
- rewrote big parts of the NARF keypoint extraction. Hopfully fixing some stability issues. Unfortunately still pretty slow for high resolution point clouds.
- fixed bug #461 (SIFT Keypoint result cloud fields not complete); cleaned up the line-wrapping in the error/warning messages

### `libpcl_surface`
- fixed a bug in `MarchingCubes`'s `getIndexIn1D` which led to the result variable to overflow when the data_size was larger than something around 2^10 (thanks Robert!)
- reviewed and slightly modified mls implementation. Added `MovingLeastSquaresOMP` OpenMP implementation
- new architecture for the mesh processing algorithms using VTK: `MeshProcessing`
- overloaded `reconstruction` and `performReconstruction` in `SurfaceReconstruction` to output a `PointCloud<T>` and `vector<Vertices>` as well
- added a new class called `MeshConstruction` per API design decision to split the surface reconstruction methods into topology preserving (`EarClipping,`OrganizedFastMesh`,`GreedyProjectionTriangulation`) and the rest. The new class implements a`reconstruction/performReconstruction`for`PolygonMesh`(for backwards compatibility purposes) and a faster set of the same methods for`vector<Vertices>`
- refactorized `GreedyProjectionTriangulation` by making it inherit from the new `MeshConstruction` base class, and removed a lot of old buggy code
- overloaded `performReconstruction (PointCloud<T> &, vector<Vertices> &)` per the new `SurfaceReconstruction` API
- fixed a bug in `OrganizedFastMesh` where the x/y/z indices were assumed to be 0/1/2, and made it part of the `MeshConstruction` API
- optimizations for `OrganizedFastMesh`. Now in 30Hz+ flavor.
- fixed a segfault from last night's `EarClipping` refactorization and improved the efficiency of the algorithm considerably
- updated `ConvexHull` and `ConcaveHull` to inherit from the new `MeshConstruction` class
- renamed `mesh_processing.h` to `processing.h` and `performReconstruction/reconstruct` to `performProcessing/process` for the new `MeshProcessing` API

### `libpcl_features`
- fixed bug #439: 3DSC unit test fails on MacOS
- fixed `IntegralImage2Dim` : setting first line to zero was buggy producing undefined output data.
- fixing an issue in `PrincipalCurvaturesEstimation` where the _pc1_ and _pc2_ magnitudes were not normalized with respect to the neighborhood size, thus making comparisons of different neighborhoods impossible (thanks Steffen!)
- fixed `ShapeContext3DEstimation` computation and unit tests by switching from `stdlib.h`'s random () to Boost.
- fixed a bug in `IntensityGradient`: need to demean also intensity values, otherwise its assumed that the hyperplane goes always through origin which is not true
- overloaded `compute` in `pcl::Feature` to save the output in an `PointCloud<Eigen::MatrixXf>`. Added partial specialization on `Eigen::MatrixXf` to all features and implemented `computeFeature (PointCloud<MatrixXf> &output)`
- major doxygenization work
- added optimization checks for `is_dense` for some features, implemented NaN output for most (per http://dev.pointclouds.org/issues/457)
- added new unit tests for the Eigen::MatrixXf output
- fixing the MacOS GCC 4.2.1 compiler segfault by removing the OpenMP #pragma (related to http://gcc.gnu.org/bugzilla/show_bug.cgi?id=35364 ?).
- fixed bug #468: refactored to make floor explicit.
- added a `setUseInternalCache` method for `PFHEstimation` to use the internal cache on demand only. Other fixes to PFH/FPFH/PPF signatures (histogram sums were not adding up to 100.0 in some cases)
- major improvements for integral images + added template specialization for one dimensional integral images

### `libpcl_registration`
- fixed some bugs in ELCH, thanks Frits for pointing them out
- Big ELCH cleanup.
  - elch.h (API changes):
  - Use Boost bundled properties for LoopGraph, every vertex stores a
    pointer to the corresponding point cloud in graph[vertex].cloud.
  - loop_graph_ is now stored as a shared_ptr.
  - loop_start_ and loop_end_ are saved as ints for now (will change in
    the future).
  - loop_transform_ is not stored as a pointer (may change in the future).
  - elch.hpp:
  - Remove call to PCLBase::initCompute() as ELCH doesn't use a single
    input cloud or indices.
  - Change loopOptimizerAlgorithm to use start and end of the loop as
    stored in the object.
  - Adapt to API changes in elch.h.
- added 2D implementation of Normal Distributions Transform for registration (Biber, Strasser; 2003), including example tool program.
- reworked internal `Registration` API: Remove private `computeTransformation` without guess, make `computeTransformation` with guess abstract, Adapt all classes implementing `Registration` accordingly.
- implemented `SampleConsensusInitialAlignment` with initial guess (thanks Dennis Guse)
- cleaned up the `CorrespondenceRejector` API, per #375
- apply Mourad's patch for #454; add more doc comments

### `libpcl_visualization`
- fixed an issue in `pcl::visualization::PointPickingCallback` where `iren->GetMousePosition ()` didn't seem to work on some VTK versions/systems, so we replaced it instead with `iren->GetEventPosition ()` (#444 - thanks Adam!)
- fixed a bug in `PointCloudColorHandlerRGBField<sensor_msgs::PointCloud2>` where one of the offsets for Z was incorrectly calculated thus leading to erroneous data (#404 - thanks Lucas!)
- set the lighting off on `setShapeRenderingProperties` when the user tries to control the color of the object precisely (maybe add a different lighting on/off property later?)
- revert `pcl::visualization::PCLVisualizer::setShapeRenderingProperties` vtk5.2, default in ubuntu LTS, doesn't support the SetLighting method on vtkActor
- fixed an issue in `PointCloudColorHandlerRGBField` where using an ""rgba"" field was causing an error in pcd_viewer (#428 - thanks Maurice!)
- added `PointCloudColorHandlerHSVField`
- fixed the `PointPickingCallback` behavior on Windows 7: `iren->GetShiftKey ()` returns 4 instead of 1 (thanks bepe)
- added `updateFeatureHistogram` functionality to `PCLHistogramVisualizer`, per #456 (thanks Asil!)
- added patch from Adam Stambler (Bug #396)
- added `removePolygonMesh` to make the API more user friendly (`addPolygonMesh` was already existing, but the polygon meshes were removed using `removeShape` until now)
- made the polygon meshes actually implement `CloudActor` structures internally, so that we can use different colors per vertex
- added `updatePolygonMesh` and improved the efficiency of `addPolygonMesh` for fast online rendering (i.e., produced via `OrganizedFastMesh`)
",8162615
310,False,False,2011-11-03T07:45:35Z,2013-09-05T18:26:00Z,"From 1.3 we are constructing the Changelist for each library separately, as they can in theory be mixed and matched with older versions (though we officially do not support this yet). The 
most notable overall changes are:
- **removed wxWidgets as a dependency from PCL** and implemented the Image visualization classes using VTK
- **removed cminpack as a dependency from PCL** and implemented the LM optimization functionality using Eigen
- added a new library called **PCL Search** (`libpcl_search`) that has a more uniform API for nearest neighbor searches and stripped the unneeded functionality from `libpcl_kdtree` and `libpcl_octree`. Search now wraps KdTree and Octree for NN calls. **This is a MINOR API BREAKING CHANGE**. To change your code switch from:

```
pcl::KdTree -> pcl::Search (if the purpose is to use one of its children for search)
pcl::KdTreeFLANN -> pcl::search::KdTree
pcl::OrganizedDataIndex -> pcl::search::OrganizedNeighbor
```
- **improved MacOS support**
- improved documentation and unit tests
- added lots of application examples and demos. Note: not all have a complete functionality... we will try to clean this up in 1.4 and future releases.

### Build system changes
- define PCL_ROOT environment variable using the NSIS installer
- removing test+python from the dependency graph
- fixed bug #374
- remove cminpack from PCLConfig.cmake cmake and 3rdparty (switched to Eigen's Levenberg-Marquardt implementation)
- update NSIS.template.in : use CPACK_PACKAGE_INSTALL_REGISTRY_KEY as the registry key
- added the capability to build an all-in-one installer
- fixed the build system to work 100% on Android and MacOS

### `libpcl_common`
- add overriding for operator[] to shorten code 
- add a `setIndices` method that computes indices of points in a region of interest
- add `demeanPointCloud` with indices as `PointIndices` as well
- added eigen allocator to correspondence vectors (`pcl::Correspondences`) and adapted all registration modules => be sure to use `pcl::Correspondences` instead of `std::vector<pcl::Correspondence>`
- fixed a few doxygen errors
- added simple stop watch for non-scoped function time measurements and made `ScodeTime` derived from `StopWatch`
- fixed a bug in `getRejectedQueryIndices`, wrong output when order of correspondences have been changed
- moved `getRejectedQueryIndices` to pcl/common/correspondence.h
- added more doxygen documentation to the registration components
- marked all `getRemainingCorrespondences`-functions as DEPRECATED, we sould replace them with purely stateless version outside the class body
- fixed a const missing in `PolynomialCalculationsT` (#388 - thanks Julian!)
- add `PCL_DEPRECATED` macro, closes #354.
- added `PointXYZHSV` type and the conversions for it
- added check for endianness for the Android platform

### `libpcl_search`
- BIG changes introduced - migration from `KdTree` to `pcl::Search`: moved `OrganizedDataIndex` and `OrganizedNeighbor` classes to `libpcl_search`
- added new templated methods for `nearestKSearch` and `radiusSearch` for situations when PointT is different than the one the KdTree object was created with (e.g., KdTree<PointT1> vs nearestKSearch (PointT2 &p...)
- added two new methods for `getApproximateIndices` where given a reference cloud of point type T1 we're trying to find the corresponding indices in a different cloud of point type T2
- refactorized a lot of code in search and octree to make it look more consistent with the rest of the API
- fixed a bug in octree_search which was semantically doing something bad: for each `radiusSearch`/`nearestKSearch`/`approxNearestSearch` call with a PointCloudConstPtr, the octree was getting recreated. Changed the API to be consistent with the rest of PCL (including pcl_search and pcl_kdtree) where we pass in a PointCloud instead of a PointCloudConstPtr which simply calls searchMethod (cloud.points[i], ...)
- minor code optimizations
- renamed organized_neighbor.h header in pcl_search (unreleased, therefore API changes OK!) to organized.h
- disabled the auto-search tuning as it wasn't really working. must clean this up further
- remove all `approxNearestSearch` methods from the base `pcl::Search` class as they did not belong there

### `libpcl_io`
- use `stringstream` instead of `atof` because of locale issues in IO (note that we can't use the `ifstream` directly because we have to check for the `nan` value)
- added locale independent PCD ASCII i/o
- implemented `setMapSynchronization` for `pcl::PCDWriter`. When set, `msync()` will be called before `munmap()` in the `pcl::PCDWriter::write*` calls, which guarantees data reliability. Though I/O performance is 300% better when unset, data corruption might occur on NFS systems, as indicated by http://www.pcl-developers.org/PCD-IO-consistency-on-NFS-msync-needed-td4885942.html.
- added new `writeBinaryCompressed` functionality for general purpose `sensor_msgs::PointCloud2` data (which is still our generic data container in PCL 1.x)
- added additional unit tests for binary_compressed
- fixed a grave bug in `PCDReader` (most likely introduced a few releases ago due to code refactorization) where the data was incorrectly copied if a PCD ASCII file had a field with multiple count elements (field.count) as first. Binary files are not affected by this bug. Added an unit test to catch this in the future.
- added functionality for `openni_grab_frame` (added optional command line options, optional output filename, chose output format)
- changed to new location of samplesconfig.xml for OpenNI
- added signal and slot blocking into grabber. Using blocking to skip first frame in `openni_grabber`, since it is corrupted
- added PLY format file support in binary and ascii mode (requires boost::iostreams library)

### `libpcl_keypoints`
- added 3D versions of Harris/Noble/Lowe/Tomasi and Curvature-based keypoint detection... scale space still missing
- work on making `SIFTKeypoint` more flexible by saving scale only when the output point type contains ""scale"" (the catch is that all point types must be correctly declared via our macros - see the modifications in test_keypoints.cpp). This allows us to use a `SIFTKeypoint<PointXYZRGB, PointXYZRGB>` and thus removes the constraint on using `copyPointCloud` afterwards.
- fixed an issue in `SIFTKeypoint` where width/height were not correctly set

### `libpcl_features`
- specialize std::vector for Eigen::Matrix4f (alignment issue with msvc 32bit) in `SHOTEstimation`
- added a faster (eigen-based) integral image calculation => sped up normal estimation to 15Hz
- added Unique Shape Context (USC) feature descriptor
- added Shape Context 3D feature descriptor
- fixed a bug in the normalization factor of VFH for the distance component (only affecting if set distance component is true)
- fixed a few bugs regarding Windows build introduced in earlier commits
- BIG changes introduced - migration from `KdTree` to `pcl::Search` 
- merged libpcl_range_image_border_extractor into libpcl_features. There's absolutely no reason why we should have 2 libraries generated from the features module.

### `libpcl_filters`
- added `FilterIndices` functionality #315
- added a `RandomSample` filter which makes use of indices #323
- added a new (very fast) class for data decimation: `ApproximateVoxelGrid`
- fix for #369 (StatisticalOutlierRemoval crash when input dataset is empty)
- implemented feature request #346

### `libpcl_octree`
- added function `genVoxelBounds` to octree pointcloud class
- added octree neighbor search class
- added octree-ray-tracing patch to octree_search class
- buxfix in octree ray traversal function `getIntersectedVoxelCentersRecursive`
- added unit test for `getIntersectedVoxelCentersRecursive`
- added method `getIntersectedVoxelIndices` for getting indices of intersected voxels and updated unit test
- refactorized a lot of code in search and octree to make it look more consistent with the rest of the API
- fixed a bug in octree_search which was semantically doing something bad: for each `radiusSearch`/`nearestKSearch`/`approxNearestSearch` call with a PointCloudConstPtr, the octree was getting recreated. Changed the API to be consistent with the rest of PCL (including pcl_search and pcl_kdtree) where we pass in a PointCloud instead of a PointCloudConstPtr which simply calls searchMethod (cloud.points[i], ...)
- minor code optimizations
- renamed organized_neighbor.h header in pcl_search (unreleased, therefore API changes OK!) to organized.h
- disabled the auto-search tuning as it wasn't really working. must clean this up further
- remove all `approxNearestSearch` methods from the base `pcl::Search` class as they did not belong there

### `libpcl_registration`
- fixed a minor bug in `CorrespondenceRejectorSampleConsensus`: `getRemainingCorrespondences` tried to nput_ although it should only use the given input correspondences
- added missing implementation for `TransformationEstimationLM` on correspondence vectors
- added eigen allocator to correspondence vectors (`pcl::Correspondences`) and adapted all registration modules --> be sure to use `pcl::Correspondences` instead of `std::vector<pcl::Correspondence>`
- fixing the API: a few left inconsistencies between `vector<Correspondence>` and `Correspondences`. The latter is to be preferred as it contains the Eigen aligned allocator.
- added new ELCH loop correction API (New pcl::registration::ELCH class (WIP), add Registration::Ptr typedef)
- added unit tests for the (new) registration API and all registration components
- Further cleaning up registration code and writing documentation.
  - fixed bug in getRejectedQueryIndices, wrong output when order of correspondences have been changed
  - moved getRejectedQueryIndices to pcl/common/correspondence.h
  - added more doxygen documentation to the registration components
  - marked all ""getRemainingCorrespondences""-functions as DEPRECATED, we sould replace them with purely stateless version outside the class body
- Update: remove ciminpack dependency and rely on eigen for LM
- Fixed a bug in ICP-NL by modifying `WarpPointRigid` to preserve the value of the 4th coordinate when warping; Re-enabled missing unit tests for ICP and ICP-NL
- Added point-to-plane ICP
- added nr_iterations_ and max_iterations_ to the initializer list (were mising)
- Fixed bugs in `WarpPointRigid3D` and `TransformationEstimationLM`
- fixed a problem where if no correspondences would be found via `nearestKSearch`, the RANSAC-based rejection scheme would fail (thanks to James for reporting this)
- changed the default LM implementation to use L2 instead of L2SQR
- Added a new `TransformationEstimationPointToPlaneLLS` class that uses a Linear Least-Squares approximation to minimize the point-to-plane distance between two point clouds
- Added the ability to specify the error function to be minimized in SAC-IA (see Feature #362)

### `libpcl_sample_consensus`
- reimplemented the Levenberg Marquardt code that was using cminpack with Eigen, thus dropping the cminpack dependency for PCL

### `libpcl_surface`
- fixed bug in surface/mls: when no search interface and no tree is given, mls creates its' own tree, but didn'tupdate the search method to use 
- added citation for Rosie's work (http://dl.acm.org/citation.cfm?id=1839808)
- added some error checking for missing/ill formed inputs for `MarchingCubes`
- don't delete smart pointers (thanks Chytu: http://www.pcl-users.org/Seg-fault-while-using-VTK-Smoother-tp3380114p3381648.html)
- added computation of area and volume for convex hulls.

### `libpcl_segmentation`
- added a labeled cluster euclidean segmentation method

### `libpcl_visualization`
- fixed an issue where `saveScreenshot` was not correctly initialized with the proper renderer, thus not saving the data
- supporting fontsize in addText (per feature #365)
- fixing the interactor style by ignoring all combinations in `OnChar` that we cover in `OnKeyDown` 
- added `removeAllShapes` and `removeAllPointClouds` per #353
- renamed `deleteText3D` to `removeText3D` to consolidate the API
- fixing the API: a few left inconsistencies between `vector<Correspondence>` and `Correspondences`. The latter is to be preferred as it contains the Eigen aligned allocator.
- added patch from Lucas Walter to fix pcl::visualization::PCLVisualizer::removeAllPointClouds and removeAllShapes
- fixed a few doxygen errors
- cleaned up the `PCLHistogramVisualizer` API by moving to a vtk interactor instead of ours, and removed unnecessary calls such as `saveScreenShot` (never used with the histogram visualizer, and most likely buggy), `wasStopped` and `resetStoppedFlag` (never used).
- removed `PCLVisualizerInteractor` and switched back to a better default `vktWindowRenderInteractor` for VTK >= 5.6. Adjusted and fixed the internal API. No public API changes were made (except the removal of the `PCLVisualizerInteractor` class which was never meant to be used externally anyway).
- cleaned up and implemented the `ImageViewer` class properly and demonstrated it in a single thread via openni_viewer. The other tool (openni_viewer_simple) will not work due to `CloudViewer` starting its own thread and thus clashing on the same OpenGL context.
- fixed the correct order in initializer list for ImageViewer
- **removed wxWidgets completely** from the codebase
- added implementation for `markPoint` to `ImageViewer` to mimic older wxWidgets-based code
- fixed an issue in `PCLVisualizerInteractorStyle` where mouse events were not properly mapped in Qt (#389 - thanks Adam!)
- added an extra field of view to the camera paramers (#392 - thanks Adam!)
- small bugfix when the radius_sphere was different than 1 for `renderViewTesselatedSphere`
",8162615
311,False,False,2011-10-16T13:57:00Z,2013-09-05T18:11:31Z,"### Additions, improvements, and optimizations
- Eliminated the `transform.h` header file < _API breaking change_ > (r2517)
  - the following functions have moved to `transforms.h`:
    - `transformXYZ` (renamed to `transformPoint`)
    - `getTransformedPointCloud` (replaced with `transformPointCloud`)
  - the following methods have been replaced with built-in Eigen methods:
    - `operator<<` (use `.matrix ()` )
    - `getRotationOnly` ( `.rotation ()` )
    - `getTranslation` ( `.translation ()` )
    - `getInverse` ( `.inverse ()` )
  - the following functions have move to `eigen.h`:
    - `getTransFromUnitVectorsZY`
    - `getTransFromUnitVectorsZY`
    - `getTransFromUnitVectorsXY`
    - `getTransFromUnitVectorsXY`
    - `getTransformationFromTwoUnitVectors`
    - `getTransformationFromTwoUnitVectors`
    - `getTransformationFromTwoUnitVectorsAndOrigin`
    - `getEulerAngles`
    - `getTranslationAndEulerAngles`
    - `getTransformation`
    - `getTransformation`
    - `saveBinary`
    - `loadBinary`
- Made major changes in pcl::registration (r2503)
  - all registration code now uses `TransformEstimation` objects (`TransformEstimationSVD` and `TransformEstimationLM` in particular) rather than the older `estimateRigidTransformationSVD` code. Each class inheriting from `pcl::Registration` can pass in a different estimator via `setTransformationEstimation`
  - simplified `TransformEstimationSVD` code
  - implemented `TransformEstimationLM` by moving away code from `IterativeClosestPointNonLinear` (which now uses the transformation object)
- replaced the `io/io.h` header file with `common/io.h` (for backwards compatibility, `io/io.h` will remain, but its use is deprecated)
- added unit test for `lineWithLineIntersection` (r2514)
- improved the VTK installation from source documentation for MacOS (r2589)
- updated the tutorials regarding usage of FindPCL.cmake vs. PCLConfig.cmake (r2567)
- added a new `PointCloud` constructor for copying a subset of points (r2562)
- made wxwidgets an optional dependency for visualization (r2559)
- added feature #334 (Enabling a library should enable all its library dependencies in CMake) implementation, (r2551)
- added an internal `estimateRigidTransformationSVD` method to `SampleConsensusModelRegistration` (r2502)
- added a `PCL_VISUALIZER_REPRESENTATION` property for `setShapeRenderingProperties` with three possible values:
  - `PCL_VISUALIZER_REPRESENTATION_POINTS` for representing data as points on screen 
  - `PCL_VISUALIZER_REPRESENTATION_WIREFRAME` for representing data as a surface wireframe on screen
  - `PCL_VISUALIZER_REPRESENTATION_SURFACE` for representing data as a filled surface on screen
    (r2500)
- optimized performance of `BoundaryEstimation` (approximately 25% faster) (r2497)
- added reference citation to `estimateRigidTransformationSVD` (r2492)
- added a new keypoint for uniformly sampling data over a 3D grid called `UniformSampling` (r2413)
- added a destructor to `VoxelGrid<sensor_msgs::PointCloud2>` (r2412)
- optimized the performance of `SampleConsensusModelLine` (r2404)
- changed the behavior of toc_print and toc from `pcl::console:TicToc` to return milliseconds (r2402)
- added a new model, `SAC_MODEL_STICK`, for 3D segmentation (r2400)
- added 2x point picking to `PCLVisualizer`; use Alt + Mouse Left click to select a pair of points and draw distances between them (r2388)
- added two new functions (`pcl::getMaxSegment`) for determining a maximum segment in a given set of points (r2386)
- moved filters/test/test_filters to test/test_filters (r2365)
- renamed the binary executable in the compression.rst tutorial (r2345)
- Updated library dependencies
  - removed the `libfeatures dependency` for `libpcl_surface (r2337)
  - removed the `libpcl_io dependency` from `libpcl_surface` (r2354)
  - removed `libpcl_io dependency` from `libpcl_keypoints` (r2364)
  - removed `libpcl_io dependency` for `libpcl_filters` (r2365)
  - removed `libpcl_io dependency` for `libpcl_registration` (r2372)
- added a new function, `pcl::concatenateFields` for concatenating the fields of two `sensor_msgs::PointCloud2` datasets (1933)
- added a new `countWithinDistance` method to `SampleConsensusModel` (r2326), and optimized RANSAC and RRANSAC by replacing calls to `selectWithinDistance` with `countWithinDistance` (r2327)
- added feature #330: new PCLVisualizer::addCube and pcl::visualization::createCube methods (r2322)
- added `correspondence.h` to the includes in `common/CMakeLists.txt` (r2260)
- implemented defaults for the search method, per http://www.pcl-developers.org/defaults-for-search-method-td4725514.html (r2219,r2220,r2222,r2225,r2226,r2228)
- exposed `pcl::PCLVisualizer::saveScreenshot (const std::string &filename)` (r2095)
- enabled `pcd_io.hpp` (r2085)
- added a new faster binary writer + cloud/indices (r2080)
- added `pcl::RGB` structure and switched bitshifting RGB code to use the `pcl::RGB` structure's members (r2077,r2078)
- added a new `IOException` class for read/write exceptions (r2068)
- added missing `set/getAngleThreshold` for `BoundaryEstimation`. Made class parameter protected. (r2067)
- added functions in `pcl::console` for parsing CSV arguments of arbitrary length (r2052)
- added new functionality to `OrganizedFastMesh` (r1996); Now support for modes: 
  - fixed triangle meshing (left and right) that create quads and always cut them in a fixed direction, 
  - adaptive meshing that cuts where possible and prefers larger differences in 'z' direction, as well as 
  - quad meshing 
- improved `OrganizedFastMesh`'s removal of unused points (r1996)
- CMake changes (r2592)
  - changed the install dir of PCLConfig.cmake in Windows
  - renamed CMAKE_INSTALL_DIR into PCLCONFIG_INSTALL_DIR
  - NSIS installer will add a key in Windows Registry at HKEY_LOCAL_MACHINE\Software\Kitware\CMake\Packages\PCL to help CMake find PCL (CMake >= 2.8.5) (NSIS.template.in)
  - reordered CMAKE_MODULE_PATH entries, for CMake to pick up our NSIS.template.in
  - fixed CPACK_PACKAGE_INSTALL_REGISTRY_KEY value

### Bug fixes
- fixed bugs in `PointCloud`
  - in `swap()`, the point data was swapped, but the width and height fields were not (r2562)
  - in `push_back()`, adding points did not update the width/height of the point cloud  (r2596)
  - in `insert()/erase()`, inserting or erasing points did not update the width/height of the point cloud (r2390)
- fixed bugs in `SampleConsensusModelRegistration`
  - if target_ wasn't given, would crash with a boost shared uninitialized error (r2501)
  - homogeneous coordinates were wrong (r2502)
- fixed a bug in `BoundaryEstimation` in case ""angles"" is empty (r2411)
- fixed a bug in `OrganizedFastMesh`'s adaptive cut triangulation; added a new unit test (r2138)
- fixed a bug in the openni_image viewer tool (r2511)
- fixed problems with Windows/MacOS ALT bindings in PCLVisualizer (r2558)
- fixed issues
  - #139 (`FPFHEstimation` for non-trivial indices) (r2528)
  - #303 (make `pcd_viewer` reset the camera viewpoint when no camera given) (r1915)
  - #338 (cylinder segmentation tutorial was referring to a different file) (r2396)
  - #339 (the direction of the normal was wrongly estimated when `setSearchSurface` was given) (r2395)
  - #340 (keep_organized_ bug in `ConditionalRemoval`) (r2433)
  - #342 (Allow QT to be used with PCL Visualizer) (r2489)
  - #343 (`empty()` member function of a point cloud is not const) (r2440)
  - #350 (Misspelling in `GreedyProjectionTriangulation::setMaximumSurfaceAgle()`) (r2556)
- added missing include in `correspondence_rejection.h` (r2393)
- corrected the headers included by `sample_consensus/sac_model.h` (r2550)
- removed duplicate content of NSIS.template.in (r2601)
- fixed various casting related compiler warnings (r2532)
- corrected typos in 
  - Windows tutorial (CMAKE_INSTALL_DIR => CMAKE_INSTALL_PREFIX) (r2595)
  - registration/icp.h documentation (reg => icp) (r2515)
  - several apps/tools console messages (wotks => works) (r2491)
  - how_features_work.rst tutorial (Muechen => Muenchen) (r2484)
",8162615
312,False,False,2011-08-31T18:16:54Z,2013-09-05T18:10:25Z,"- issues fixed: #224, #277, #288, #290, #291, #292, #293, #294, #295, #296, #297, #299, #302, #318, #319, #324, #325, #329
- Additional fixes:
  - fixed a segfault in PCLVisualizer::addPointCloudNormals
  - fixed PCLVisualizer hanging on 'q' press
  - fixed a bug in MLS
  - fixed a bug in test_io
  - fixed a bug in PointCloudColorHandlerGenericField
  - fixed a bug when writing chars to ASCII .PCD files
  - fixed several errors ""writing new classes"" tutorial
  - added missing parameter setter in the ""concave hull"" tutorial
",8162615
313,False,False,2011-07-18T15:41:50Z,2013-09-05T18:09:12Z,"- new 3D features: 
  - SHOT (Signature of Histograms of Orientations)
  - PPF (Point-Pair Features)
  - StatisticalMultiscaleInterestRegionExtraction
  - MultiscaleFeaturePersistence
- improved documentation: 
  - sample consensus model coefficients better explained
  - new tutorials (RadiusOutlierRemoval, ConditionalRemovalFilter, ConcatenateClouds, IterativeClosestPoint, KdTreeSearch, NARF Descriptor visualization, NARF keypoint extraction, ConcaveHull, PCLVisualizer demo)
- new surface triangulation methods: 
  - MarchingCubes, MarchingCubesGreedy
  - OrganizedFastMesh
  - SurfelSmoothing
  - SimplificationRemoveUnusedVertices
- new registration methods: 
  - PyramindFeatureMatching
  - CorrespondenceRejectorSampleConsensus
- new general purpose classes/methods: 
  - Synchronizer
  - distance norms
  - TextureMesh
  - PointCloud.{isOrganized, getMatrixXfMap)
  - SACSegmentation now works with PROSAC too
  - PCDViewer now reads VTK files
  - new Mouse and Keyboard events for PCLVisualizer
  - PCLVisualizer.{addText3D, addCoordinateSystem (Eigen::Matrix4f), deleteText3D, updatePointCloud, renderViewTesselatedSphere, resetCameraViewpoint, getCameras, getViewerPose}
  - ONIGrabber, DeviceONI
  - ImageRGB24, IRImage
  - generic FileReader + FileWriter
- optimizations: 
  - faster pipelinening by not recreating a fake set of indices everytime
  - rendering optimizations for PCLVisualizer
  - copyPointCloud is now faster and can copy the intersections of the fields in both input datasets
  - VoxelGrid is now ~20Hz for Kinect data
- new applications: 
  - VFH NN classification
  - 3D concave hulls
  - 3D convex hulls
  - ICP registration
  - Planar segmentation 
  - Stream compression
  - Range image viewer
  - Voxel Grid
  - IntegralImage normal estimation
- issues fixed: #75, #106, #118, #126, #132, #139, #156, #182, #184, #189, #197, #198, #199, #201, #202, #203, #210, #213, #211, #217, #223, #225, #228, #230, #231, #233, #234, #240, #247, #250, #251, #254, #255, #257, #258, #259, #261, #262, #264, #265, #266, #267, #268, #269, #273, #276, #278, #279, #281, #282, #283
",8162615
314,False,False,2011-06-29T19:16:05Z,2013-09-05T18:07:26Z,"_please note that version 1.0.0 had a flaw when creating ASCII pcd files. This version includes the tool pcd_convert_NaN_nan to fix this_
- added VTK file visualization to pcd_viewer
- hiding the cminpack/FLANN headers, thus reducing compile time for user code
- fixed `IntegralImageNormalEstimation`
- tutorial updates and fixes + new tutorials. Changed tutorial structure to split CPP files from RST text.
- better doxygen documentation for many functions
- fixed a bug in `ConditionalRemovalFilter` where the `keep_organized` condition was reversed
- removed `BorderDescription` and `Histogram<2>` from the list of explicit template instantiations
- added `PointXY` point registration macros
- added `ExtractIndicesSelf` unit test 
- fixed a lot of alignment issues on 32bit architectures
- PCD ascii files now have each individual line trimmed for trailing spaces
- internal changes for PCDReader/PCDWriter, where NAN data is represented as ""nan""
- sped up compilation with MSVC by adding /MP for multiprocessor builds
- added a voxel grid command line tool filter
- issues fixed: #242, #207, #237, #215, #236, #226, #148, #214, #218, #216, #196, #219, #207, #194, #192, #183, #178, #154, #174, #145, #155, #122, #220
- added support for PathScale pathcc compiler
- added support for Intel icc C++ compiler
- added support for GCC 4.6 C++ compiler
- added preliminary support for Clang C++ compiler
- FindPCL.cmake and PCLConfig.cmake completed
",8162615
315,False,False,2011-06-19T01:14:09Z,2013-09-05T18:06:12Z,"- completely standalone build system using CMake (not dependent on ROS anymore)
- tested on Win32/Win64, Linux (32/64) and MacOS (installers provided for all 3rd party dependencies and PCL)
- separated the entire codebase into multiple libraries that depend on each other. separate CMake declarations for each individual library.
- provide a FindPCL.cmake to ease integration
- many new unit tests + tutorials + improved Doxygen documentation (check http://www.pointclouds.org/documentation and http://docs.pointclouds.org)
- new liboctree interface for nearest neighbor/radius search with Octrees, change detection, and Point Cloud compression!
- added concave/convex hulls using QHull (dropped our old ConvexHull2D class)
- pcl::Registration improvements and bugfixes, sped up inner loops, added alignment methods with initial guess
- pcl::visualization bugfixes: multiple interactors are now possible, better threading support, sped up visualization (2-3x), addPolygonMesh helper methods
- new grabber interface for OpenNI-compatible camera interface: all 3 OpenNI cameras are supported (Kinect, Asus XTionPRO, PSDK)
- new grabber interface for streaming PCD files
- pcl::io bugfixes for PCD files using binary mode
- ROS_ macros are no longer valid, use PCL_ instead for printing to screen
- new PCA implementation, up to 4-5 times faster eigen decomposition code
- new CVFH feature, with higher performance than VFH for object recognition
",8162615
316,False,False,2011-03-03T00:34:43Z,2013-09-05T18:03:37Z,,8162615
317,False,False,2013-07-23T17:21:02Z,2013-07-23T18:34:49Z,"We are proud to announce the new PCL version 1.7.

After one year of development, there have been a lot of changes:
- We welcome three new modules: outofcore, people, recognition.
- PCL moved to git and onto Github.
- We separated the PCL and ROS data types. Please read https://github.com/PointCloudLibrary/pcl/wiki/Remove-ROS on how to convert your code.
- We had a flaw in the pcd viewpoint generation. If your point clouds seem to be flipped, please read https://github.com/PointCloudLibrary/pcl/wiki/pcd-viewpoint.
- the geometry lib has been converted into header only, resulting in a ABI change.
- If you are using your own point type, you need to define PCL_NO_PRECOMPILE before including any PCL headers.

The most notable overall changes are:

### `libpcl_common:`
- Added pcl::Intensity and pcl::Intensity8u point types
- Added pcl::RangeImageSpherical sub-class that is more suitable than pcl::RangeImage for some kinds of 360° range images (as discussed in [PCL-users] Range Image Projection)
- Added DefaultPointRepresentationpcl::Narf36 to allow pcl::Narf36 to be used with pcl::search (#915)

### `PCL Apps:`
- Added cloud_composer app
- Added PCLModeler, with a tree view scene explorer and multiple render windows support 
- Added client app for the point cloud streaming server 
- Added new server app for point cloud streaming to mobile devices (pcl_openni_mobile_server)
- Added a new demo for the connected component segmentation. Includes a QT gui that allows various features to be toggled on/off. 
- Added SHOT estimator wrapper using OMP
- Added openni_organized_multi_plane_segmentation to demonstrate the OrganizedMultiPlaneSegmentation class. 

### `libpcl_recognition:`
- Added a new tutorial for ""libpcl_recognition"" for Correspondence Grouping by Tommaso Cavallari (#666)
- Added support for .LMT file loading (which are TARed files for PCD masks and SQMMT linemod templates)
- Changes in the computation of the modality to improve performance 
- Fixed a compilation error on windows; for some reason 'NULL' needs to be explicitly casted to the pointer type 
- Added a model library class used for maintaining the object models to be recognized. 
- Changed the interface to make it less confusing to use. 
- Added a couple useful overloads for ""Houg###Grouping"" and ""GeometricConsistencyGrouping""
- Added CRHAlignment class. 
- Added Papazov HV method. 
- Fixed a bug in Poisson surface reconstruction that was causing the unit test to fail
- Added option for automatic selection of number of features in extractFeature
- Added a new greedy hypotheses verification method. 
- Added semi scale invariant linemod template detection 
- Fixed RF search radius in ""Houg###Grouping"" 
- Fixed some bugs in detection refinement along viewing direction  
- Fixed bug in LineRGBD::computeTransformedTemplatePoints (template point cloud's width and height fields were not set) 
- Converted uses of PointXYZRGB to PointXYZRGBA; converted std::cerr messages to PCL_DEBUG; minor reformatting to keep lines under 120 characters 
- Fixed some bugs related to bounding box computation and computation of transformed template point clouds 
- Added functionality to specify an object ID when loading templates in LineRGBD; 
- Added ""GeometricConsistencyGrouping"" clustering class 
- Added high level interface for RGBD version of linemod (not all parts are implemented yet) 
- Added SSE optimizations to improve detection speed 
- Added Ransac Correspondence Rejection into Houg###Grouping 
- Changed method for selecting features in color gradient modality 
- Added ""CorrespondenceGrouping"" abstract base class for correspondence grouping in pcl_recognitio
- Added cosine approximation in score computation 
- Added structure for hypotheses verification methods. Base abstract class 

### `libpcl_keypoints`
- Added implementation of the Intrinsic Shape Signature keypoint detector
- fixed crash caused by setNormals() in HarrisKeypoint3D (related to #745)

### `libpcl_outofcore:`
- Added support for PointCloud + gen LOD
- Added PointCloud2 support for outofcore queries via new ""queryBBIncludes"" method
- Added ""copyPointCloud"" support for PointCloud2 without indices
- Added feature: outofcore binary compressed pcd files to store point data on disk
- Bug fix: outofcore write buffer constant limitation fixed so outofcore_process will work with large 20M+ point TRCS data sets 
- Constants for write buffer changed to 2e12 to support insertion of very large point clouds until new serialization is implemented 
- Added getVoxelSideLength to octree_base for displaying of nodes in visualizer

### `libpcl_search:`
- FlannSearch: fixed wrong typedef (::Ptr would break if FlannDistance!=flann::L2) and compiler error
- Added new option in `FlannSearch`: FLANN KMeans Tree can now be uses as the search algorithm

### `libpcl_visualization:`
- Added specific methods to handle monochrome images represented by a PointCloud<Intensity> or a PointCloud<Intensity8u>
- Add area selection option to PCLVisualizer so user can get a whole area indexes
- Fix the ImageViewer shapes overlay using vtkContextItem so they now appear with transparent background

### `libpcl_tools:`
- Added a PNG to PCD converter

### `libpcl_io:`
- Added support for the Velodyne High Definition Laser (HDL)
- Add support for foo/bar vertex property in PLY file reading
",8162615
318,False,False,2020-02-06T21:10:58Z,2020-02-07T12:45:06Z,"<h2>February 7, 2020</h2>

<h3>Fixes</h3>
<ul>
<li>Telemetry dialog was not accessible for visually impaired people</li>
<li>Drum input palette worked incorrectly due to the changes involving single click behaviour</li>
<li>MuseScore crashed when pressing numbers/letters in a different voice when inputting tabs</li>
<li>Hidden pedal items were no longer displayed</li>
<li>""L"" letter could not be typed when entering text</li>
</ul>

More information is available in the release announcement https://musescore.org/en/3.4.2

<h4>Important note!</h4>
Revision number (in mscore/revision.h) is incorrect in the assets automatically generated by GitHub. Use 
<a href=""https://github.com/musescore/MuseScore/releases/download/v3.4.2/MuseScore-3.4.2.zip"">MuseScore-3.4.2.zip</a> instead.",4454793
319,False,False,2020-01-25T12:18:16Z,2020-01-25T13:45:06Z,"<h2>January 25, 2020</h2>

<h3>Fixes</h3>
<ul>
<li>MuseScore crashed after closing a menu bar pop-up window if no score is opened</li>
<li>Audio glitches on note input and playback happened on macOS and other platforms</li>
<li>Parts corruption happened on timewise delete of individual beats</li>
<li>Crash happened when undoing ""Beam middle"" setting on a single note</li>
<li>Pedal lines alignment applied to the whole system, not individual staff</li>
</ul>

More information is available in the release announcement https://musescore.org/en/3.4.1

<h4>Important note!</h4>
Revision number (in mscore/revision.h) is incorrect in the assets automatically generated by GitHub. Use 
<a href=""https://github.com/musescore/MuseScore/releases/download/v3.4.1/MuseScore-3.4.1.zip"">MuseScore-3.4.1.zip</a> instead.",4454793
320,False,False,2020-01-23T14:37:43Z,2020-01-24T12:21:50Z,"<h2>January 24, 2020</h2>

<h3>New</h3>
<ul>
<li>Apply palette elements with a single click if there is a selection in the score</li>
<li>Allow dragging notes horizontally</li>
<li>Slurs, hairpins and other elements can be edited after single click</li>
<li>Add middle adjustment handle for beams, for moving whole beam vertically</li>
</ul>
<h3>Improvements</h3>
<ul>
<li>Double click is not needed to reach edit mode anymore</li>
<li>Introduce section break properties, bend properties in the Inspector</li>
<li>Allow access to several properties window in the Inspector</li>
<li>Name of the newly created custom palette can be specified</li>
<li>Accessibility: improve speech for elements with spanners</li>
<li>Embed Tremolo Bar editor to the inspector</li>
</ul>
<h3>Fixes</h3>
<ul>
<li>""Don't play trill"" option silenced the note playback</li>
<li>Slurs on small staves were displaced in some cases</li>
<li>Barline handles were drawn incorrectly after dragging one</li>
<li>Strings in the Part dialogue were ambiguous</li>
<li>Y Offset value of fretboards didn't restore after undoing the values being changed from Edit Mode</li>
<li>Replacing a note with an accidental left the accidental on the new note</li>
<li>Adding Intervals (above/below) didn't take into consideration the accidental toggle state</li>
<li>Multiple chord symbols attached to same note didn't copy as part of the range</li>
<li>Strings in fret diagrams without ""X"" or ""O"" displayed as ""?"" on Linux</li>
<li>MuseScore crashed when changing a triplet's rest's duration</li>
<li>Images attached to rests weren't imported from MuseScore 2</li>
<li>Tremolo Bar dialog had multiple UX issues</li>
<li>AppImage: system printers weren't available in the print dialog</li>
</ul>

More information is available in the release announcement https://musescore.org/en/3.4

<h4>Important note!</h4>
Revision number (in mscore/revision.h) is incorrect in the assets automatically generated by GitHub. Use 
<a href=""https://github.com/musescore/MuseScore/releases/download/v3.4/MuseScore-3.4.0.zip"">MuseScore-3.4.0.zip</a> instead.",4454793
321,False,True,2020-01-18T13:49:25Z,2020-01-18T16:16:54Z,"<h2>January 18, 2020</h2>

<h3>New</h3>
<ul>
<li>Add middle adjustment handle for beams, for moving whole beam vertically</li>
<li>Add command-line option for transposing scores</li>
</ul>
<h3>Improvements</h3>
<ul>
<li>Embed Tremolo Bar editor to the inspector</li>
</ul>
<h3>Fixes</h3>
<ul>
<li>MuseScore crashed when changing the duration of a triplet's rest</li>
<li>Images attached to rests weren't imported from MuseScore 2</li>
<li>Tremolo Bar dialog had multiple UX issues</li>
<li>AppImage: system printers weren't available in the print dialog</li>
</ul>

More information is available in the release announcement https://musescore.org/en/3.4rc

<h4>Important note!</h4>
Revision number (in mscore/revision.h) is incorrect in the assets automatically generated by GitHub. Use 
<a href=""https://github.com/musescore/MuseScore/releases/download/v3.4rc/MuseScore-3.4.0-RC.zip"">MuseScore-3.4.0-RC.zip</a> instead.",4454793
322,False,True,2019-12-26T11:46:33Z,2019-12-26T16:41:35Z,"<h2>December 26, 2019</h2>

<h3>New</h3>
<ul>
<li>Apply palette elements with a single click if there is a selection in the score</li>
<li>Allow dragging notes horizontally</li>
<li>Slurs, hairpins and other elements can be edited after a single click</li>
</ul>
<h3>Improvements</h3>
<ul>
<li>Double click is not needed to reach edit mode anymore</li>
<li>Introduce bend properties in the Inspector</li>
<li>Name of the newly created custom palette can be specified</li>
<li>Accessibility: improve speech for elements with spanners</li>
</ul>
<h3>Fixes</h3>
<ul>
<li>""Don't play trill"" option silenced the note playback</li>
<li>Slurs on small staves were displaced in some cases</li>
<li>Barline handles were drawn incorrectly after dragging one</li>
<li>Strings in the Part dialogue were ambiguous</li>
<li>Y Offset value of fretboards didn't restore after undoing the values being changed from Edit Mode</li>
<li>Replacing a note with an accidental left the accidental on the new note</li>
<li>Adding Intervals (above/below) didn't take into consideration the accidental toggle state</li>
<li>Multiple chord symbols attached to same note didn't copy as part of the range</li>
<li>Strings in fret diagrams without ""X"" or ""O"" displayed as ""?"" on Linux</li>
</ul>

More information is available in the release announcement https://musescore.org/en/3.4beta

<h4>Important note!</h4>
Revision number (in mscore/revision.h) is incorrect in the assets automatically generated by GitHub. Use 
<a href=""https://github.com/musescore/MuseScore/releases/download/v3.4beta/MuseScore-3.4.0-Beta.zip"">MuseScore-3.4.0-Beta.zip</a> instead.",4454793
323,False,False,2019-12-04T08:11:41Z,2019-12-04T18:39:37Z,"<h2>December 4, 2019</h2>

<h3>Fixes</h3>
<ul>
<li>Palette names were scrambled and nearly impossible to read (Windows 7)</li>
<li>Scale of palette was incorrect for high and low DPI displays</li>
<li>Courtesy accidentals disappeared after an octave change using Ctrl(Cmd)+Up/Down</li>
<li>Crash reports could not be sent</li>
</ul>

More information is available in the release announcement https://musescore.org/en/3.3.4

<h4>Important note!</h4>
Revision number (in mscore/revision.h) is incorrect in the assets automatically generated by GitHub. Use 
<a href=""https://github.com/musescore/MuseScore/releases/download/v3.3.4/MuseScore-3.3.4.zip"">MuseScore-3.3.4.zip</a> instead.",4454793
324,False,False,2019-11-26T07:56:47Z,2019-11-26T10:26:40Z,"<h2>November 26, 2019</h2>

<h3>Improvements</h3>
<ul>
<li>Tie button behaves as a toggle now</li>
<li>Enable changing notes duration if selecting note stem, hook or a range</li>
<li>Visual improvements for palettes</li>
<li>Mark notes that are out of instrument range with red or yellow color even when they are selected</li>
<li>Save Online is now fully synchronised with the musescore.com upload page</li>
</ul>
<h3>Fixes</h3>
<ul>
<li>Export Pdf on Mac with Muse Jazz Text was garbled and unreadable if no printers were setup on a machine</li>
<li>Entering notes with mouse failed in Italian TAB</li>
<li>Scoreview jumped back to start of score during note input on (auto)save</li>
<li>Sticking could not be copy-pasted</li>
<li>Extensions could not be installed on macOS Catalina</li>
</ul>

More information is available in the release announcement https://musescore.org/en/3.3.3

<h4>Important note!</h4>
Revision number (in mscore/revision.h) is incorrect in the assets automatically generated by GitHub. Use 
<a href=""https://github.com/musescore/MuseScore/releases/download/v3.3.3/MuseScore-3.3.3.zip"">MuseScore-3.3.3.zip</a> instead.",4454793
325,False,False,2019-11-14T07:45:52Z,2019-11-14T13:28:19Z,"<h2>November 14, 2019</h2>

<h3>Fixes</h3>
<ul>
<li>MuseScore crashed on startup in some cases on Windows 7</li>
<li>""Save online"" failed in some cases</li>
<li>Palettes were incorrectly placed when using multiple HighDPI monitors and scaling</li>
<li>Palettes disappeared on Ubuntu 18.04 in some cases</li>
</ul>

More information is available in the release announcement https://musescore.org/en/3.3.2

<h4>Important note!</h4>
Revision number (in mscore/revision.h) is incorrect in the assets automatically generated by GitHub. Use 
<a href=""https://github.com/musescore/MuseScore/releases/download/v3.3.2/MuseScore-3.3.2.zip"">MuseScore-3.3.2.zip</a> instead.",4454793
326,False,False,2019-11-13T11:36:03Z,2019-11-13T13:12:30Z,"<h2>November 13, 2019</h2>

<h3>Fixes</h3>
<ul>
<li>MuseScore crashed on startup in some cases on Windows 7</li>
<li>Palettes were incorrectly placed when using multiple HighDPI monitors and scaling</li>
<li>Palettes disappeared on Ubuntu 18.04 in some cases</li>
</ul>

More information is available in the release announcement https://musescore.org/en/3.3.1

<h4>Important note!</h4>
Revision number (in mscore/revision.h) is incorrect in the assets automatically generated by GitHub. Use 
<a href=""https://github.com/musescore/MuseScore/releases/download/v3.3.1/MuseScore-3.3.1.zip"">MuseScore-3.3.1.zip</a> instead.",4454793
327,False,False,2019-10-31T10:27:44Z,2019-10-31T11:52:04Z,"<h2>October 31, 2019</h2>

<h3>New</h3>
<ul>
<li>Complete palettes redesign</li>
<li>Note Input workflow improvements</li>
<li>Native support for Roman numeral analysis and Nashville notation</li>
</ul>
<h3>Improvements</h3>
<ul>
<li>Chord Symbol Formatting not only for MuseJazz has been supported</li>
<li>Symbols can be attached to barlines</li>
<li>Multiple improvements to the Plugin API</li>
<li>Implement changing palette and palette cell properties on fly</li>
<li>Current workspace is automatically saved on each action that changes the workspace</li>
<li>Palettes and workspaces can be reset to the default state defined by the workspace you started customisations from</li>
<li>Improve algorithm for determining start point for note input</li>
<li>Move the viewport to show actual changes in the score if they are outside of the current view</li>
</ul>
<h3>Fixes</h3>
<ul>
<li>NVDA screen reader didn't work</li>
<li>Various MusicXML Import/Export fixes</li>
<li>Various fixes for the playback of tied notes, muted voices and notes being edited in parts</li>
<li>Sticking was not linked between score and parts</li>
<li>The presence of fretboard diagrams prevented input of chord symbols in other staves</li>
<li>Loop playback was set incorrectly in parts</li>
<li>Shortcuts navigation across the palettes was broken</li>
<li>Palettes and palette cells were not translated</li>
<li>It was impossible to enter successive sticking elements</li>
</ul>

More information is available in the release announcement https://musescore.org/en/3.3

<h4>Important note!</h4>
Revision number (in mscore/revision.h) is incorrect in the assets automatically generated by GitHub. Use 
<a href=""https://github.com/musescore/MuseScore/releases/download/v3.3/MuseScore-3.3.0.zip"">MuseScore-3.3.0.zip</a> instead.",4454793
328,False,True,2019-10-26T10:38:14Z,2019-10-26T11:45:21Z,"<h2>October 26, 2019</h2>
<h3>Improvements</h3>
<ul>
<li>Improve algorithm for determining start point for note input</li>
<li>Simplify and improve usability of the Note Input Workflow</li>
<li>Move the viewport to show actual changes in the score if they are outside of the current view</li>
</ul>
<h3>Fixes</h3>
<ul>
<li>Fix a couple of issues related to Roman Numerical Analysis</li>
</ul>

More information is available on https://musescore.org/en/3.3rc3

<h4>Important note!</h4>
Revision number (in mscore/revision.h) is incorrect in the assets automatically generated by GitHub. Use 
<a href=""https://github.com/musescore/MuseScore/releases/download/v3.3rc3/MuseScore-3.3.0-RC3.zip"">MuseScore-3.3.0-RC3.zip</a> instead.",4454793
329,False,True,2019-10-22T16:52:57Z,2019-10-22T18:15:11Z,"<h2>October 22, 2019</h2>
<h3>Improvements</h3>
<ul>
<li>Current workspace is automatically saved on each action that changes the workspace</li>
<li>Basic and Advanced workspaces are automatically marked as ""edited"" if you customise palettes or toolbars</li>
<li>Palettes and workspaces can be reset to the default state defined by the workspace you started customisations from</li>
<li>Add time delay when dragging palette elements to avoid occasional moving palette cells</li>
</ul>
<h3>Fixes</h3>
<ul>
<li>It was impossible to use keyboard with palettes on macOS if any additional window appears while working with the palettes</li>
<li>Filters (F6) for Lyrics and Chord Symbols were mixed up</li>
<li>Unable to consequently insert symbols from a palette in text editing mode</li>
<li>Lyrics Y offset in parts was lost on save/reload</li>
<li>It was impossible to enter successive sticking elements</li>
<li>MuseScore crashed when undoing adding an instrument in continuous view</li>
<li>Delete confirmation appeared several times when deleting multiple cells</li>
</ul>

More information is available on https://musescore.org/en/3.3rc2

<h4>Important note!</h4>
Revision number (in mscore/revision.h) is incorrect in the assets automatically generated by GitHub. Use 
<a href=""https://github.com/musescore/MuseScore/releases/download/v3.3rc2/MuseScore-3.3.0-RC2.zip"">MuseScore-3.3.0-RC2.zip</a> instead.",4454793
330,False,True,2019-10-02T17:56:27Z,2019-10-02T19:13:31Z,"<h2>October 02, 2019</h2>
<h3>New</h3>
<ul>
<li>Save Online is now fully synchronised with the musescore.com upload page</li>
</ul>
<h3>Improvements</h3>
<ul>
<li>Implement changing palette and palette cell properties on fly</li>
<li>Visual style of the palettes</li>
</ul>
<h3>Fixes</h3>
<ul>
<li>Loop playback was set incorrectly in parts</li>
<li>Shortcuts navigation across the palettes was broken</li>
<li>Changing workspaces when installing/removing extensions led to a crash</li>
<li>Palettes and palette cells were not translated</li>
<li>Save/Load palettes were not implemented</li>
</ul>

More information is available on https://musescore.org/en/3.3rc

<h4>Important note!</h4>
Revision number (in mscore/revision.h) is incorrect in the assets automatically generated by GitHub. Use 
<a href=""https://github.com/musescore/MuseScore/releases/download/v3.3beta2/MuseScore-3.3.0-RC.zip"">MuseScore-3.3.0-RC.zip</a> instead.",4454793
331,False,True,2019-09-17T17:44:10Z,2019-09-17T19:21:56Z,"<h3>Improvements</h3>
<ul>
<li>Various accessibility improvements improvements</li>
<ul>
<li>Made more elements available for screen readers</li>
<li>Improved the information interpreted by screen readers</li>
</ul>
</ul>
<h3>Fixes</h3>
<ul>
<li>""Single palette"" option was not implemented</li>
<li>Palettes appearance was broken and wasn't aligned with the MuseScore styling</li>
<li>Dark theme was not correctly supported in new palettes</li>
<li>Note value repeat section: setting ""Never"" was broken</li>
<li>Undo didn't restore a deleted frame</li>
<li>NVDA screen reader didn't work</li>
</ul>

More information is available on https://musescore.org/en/3.3beta2

<h4>Important note!</h4>
Revision number (in mscore/revision.h) is incorrect in the assets automatically generated by GitHub. Use 
<a href=""https://github.com/musescore/MuseScore/releases/download/v3.3beta2/MuseScore-3.3.0-Beta2.zip"">MuseScore-3.3.0-Beta2.zip</a> instead.",4454793
332,False,True,2019-08-31T19:31:52Z,2019-08-31T20:27:38Z,"<h3>New</h3>
<ul>
<li>Add support for Roman numeral analysis & Nashville notation</li>
<li>Complete redesign of the Palettes panel</li>
</ul>
<h3>Improvements</h3>
<ul>
<li>Symbols now can be added to barlines</li>
<li>Play Panel layout</li>
<li>In Edit mode, keyboard arrows now change horizontal offset rather than leading space</li>
<li>Multiple accessibility improvements</li>
<li>Multiple improvements to the Plugin API</li>
<li>Make use of the existing accordion palette</li>
</ul>
<h3>Fixes</h3>
<ul>
<li>Various fixes for the playback of tied notes, muted voices and notes being edited in parts</li>
<li>Sticking was not linked between score and parts</li>
<li>Note symbols were truncated in Tab Preview</li>
<li>Some Buttons looked grayed-out in dark mode</li>
<li>The presence of fretboard diagrams prevented input of chord symbols in other staves</li>
<li>Removing a custom workspace caused a crash</li>
<li>Multiple fixes for MusicXML Export/Import</li>
<li>Letter score in landscape orientation exported as A4 in score+parts PDF</li>
</ul>

More information is available on https://musescore.org/en/3.3beta

<h4>Important note!</h4>
Revision number (in mscore/revision.h) is incorrect in the assets automatically generated by GitHub. Use 
<a href=""https://github.com/musescore/MuseScore/releases/download/v3.3beta/MuseScore-3.3.0-Beta.zip"">MuseScore-3.3.0-Beta.zip</a> instead.",4454793
333,False,False,2019-07-06T09:44:00Z,2019-07-08T08:52:30Z,"<h3>Fixes</h3>
<ul>
<li>Articulations didn't play properly in MDL instruments</li>
<li>Tuplets layout was broken in some cases</li>
<li>Fingering jumped unpredictably in some cases</li>
<li>Score_and_Parts pdfs were garbled when using MuzeJazz font on macOS</li>
<li>Switching between workspaces erased the enabled plugins</li>
</ul>

<h4>Important note!</h4>
Revision number (in mscore/revision.h) is incorrect in the assets automatically generated by GitHub. Use 
<a href=""https://github.com/musescore/MuseScore/releases/download/v3.2.3/MuseScore-3.2.3.zip"">MuseScore-3.2.3.zip</a> instead.",4454793
334,False,False,2019-06-30T05:13:08Z,2019-06-30T10:34:24Z,"<h3>Fixes</h3>
<ul>
<li>Significant performance drop on macOS 10.14+ machines</li>
<li>The Menu Bar entries under Plug-Ins were empty</li>
</ul>

<h4>Important note!</h4>
<ul>
<li>Revision number (in mscore/revision.h) is incorrect in the assets automatically generated by GitHub. Use 
<a href=""https://github.com/musescore/MuseScore/releases/download/v3.2.2/Musescore-3.2.2.zip"">Musescore-3.2.2.zip</a> instead</li>
<li>macOS 10.10/10.11 packages will pass by Musescore 3.2.2 update",4454793
335,False,False,2019-06-28T11:09:53Z,2019-06-28T12:51:20Z,"<h3>New</h3>
<ul>
<li>Official builds for macOS 10.10 and 10.11 are now available</li>
</ul>
<h3>Fixes</h3>
<ul>
<li>Sticking was lost on reloading scores</li>
<li>The position data of articulations (above, below) was lost after saving</li>
<li>Empty score crashed when playing in some cases</li>
</ul>

Complete list of issues resolved is available <a href=""https://musescore.org/en/node/291445"">here</a>.
More information is available on https://musescore.org/en/3.2.1

<h4>Important note!</h4>

Revision number (in mscore/revision.h) is incorrect in the assets automatically generated by GitHub. Use 
<a href=""https://github.com/musescore/MuseScore/releases/download/v3.2.1/Musescore-3.2.1.zip"">Musescore-3.2.1.zip</a> instead.",4454793
336,False,False,2019-06-25T07:52:59Z,2019-06-25T09:33:05Z,"<h3>New</h3>
<ul>
<li>Default to dark theme on macOS if Dark Mode (available as of 10.14 Mojave) is the system-wide preference</li>
<li>Sticking (the process of assigning certain notes to either our left or right hand) as a new command</li>
</ul>
<h3>Improvements</h3>
<ul>
<li>Make basic colors of the application including voice colors consistent</li>
<li>7/8 time signature was added to advanced workspace and master palette</li>
<li>Avoid poor alignment of hairpins to dynamics bound to the segment before hairpin start</li>
<li>Add style settings allowing MDL templates to follow basic drum line notation rules better</li>
<li>Double/triple-clicking in a text editing mode now selects a word/paragraph respectively</li>
</ul>
<h3>Fixes</h3>
<ul>
<li>Playback tempo was incorrect when working in continuous view</li>
<li>Playback tempo set to defaults in some cases when editing score elements</li>
<li>Tempo changes set fermata time stretch to defaults</li>
<li>Tuplets and articulations were laid out incorrectly</li>
<li>Layout shift in a measure at start of a system happened in some cases</li>
<li>Multi-measure rests created unexpected key signatures in some cases</li>
<li>Key signature appeared in multi measure rest after being deleted from underlying measure</li>
<li>Side panels were not dockable after being undocked and closed once</li>
<li>Mixer panel disappeared in some cases</li>
<li>Mixer didn't remember changes in the channels</li>
<li>Changing clef didn't have an effect in combination with multi measure rest</li>
<li>Сopying/pasting a clef into an another clef crashed Musescore</li>
<li>Right-click / Edit Element with a different element selected led to crash</li>
<li>Exporting parts from a score didn't produce correct MIDI, MP3, WAV, OGG, and FLAC files</li>
</ul>

Complete list of issues resolved is available <a href=""https://musescore.org/en/node/291032"">here</a>.
More information is available on https://musescore.org/en/3.2

<h4>Important note!</h4>

Revision number (in mscore/revision.h) is incorrect in the assets automatically generated by GitHub. Use 
<a href=""https://github.com/musescore/MuseScore/releases/download/v3.2/Musescore-3.2.0.zip"">MuseScore-3.2.0.zip</a> instead.",4454793
337,False,False,2019-05-28T09:31:28Z,2019-05-28T11:26:56Z,"<h4>Important note!</h4>

Revision number (in mscore/revision.h) is incorrect in the assets automatically generated by GitHub. Use 
<a href=""https://github.com/musescore/MuseScore/releases/download/v3.1/MuseScore-3.0.5.zip"">MuseScore-3.1.0.zip</a> instead.

<h3>New</h3>
<ul>
<li>Single-note dynamics playback - long notes can play dynamic changes</li>
<li>Updated soundfont that supports single-note dynamics out of the box</li>
<li>High quality soundfont with better strings and synth instruments available as an extension in the Resource Manager</li>
<li>Option to completely disable Auto Placement</li>
<li>Elements can cross staves still participating in Auto Placement</li>
<li>Half-time/Double-time feature that shortens and lengthens rhythms on copy-pasting</li>
<li>Linearization feature that unrolls all repeats</li>
<li>Internal computational approach that allows creating 256th, 512th, 1024th notes and any kind of compound tuplets</li>
<li>Online documentation for Plugin API is available</li>
</ul>
<h3>Improvements</h3>
<ul>
<li>Playback starts immediately on large scores</li>
<li>Continuous view performance was significantly improved</li>
<li>The layout of the scores imported from MuseScore 2 is now preserved</li>
<li>Size and usability of Play Panel is now improved</li>
<li>Add chord symbol support for fret diagrams</li>
<li>Move the whole segment on dragging a note in edit mode</li>
<li>Allow changing duration of multiple notes</li>
<li>Select notes after deleting various elements</li>
<li>Make copy-pasting hairpins possible</li>
<li>Fix significant lag on iterating over notes with left-right arrows</li>
<li>UI refinements including more streamlined Inspector</li>
<li>""MuseScore File"" string (under File -> Save As...) now indicates which version you are about to save (MuseScore 3)</li>
</ul>
<h3>Fixes</h3>
<ul>
<li>System positions calculations allocated too much space</li>
<li>Courtesy clefs and key signatures were positioned incorrectly around repeat barlines</li>
<li>Cross-staff notation was incorrect in some cases</li>
<li>Barlines spanning was wrong in some cases</li>
<li>Barlines were incorrect when small and standard staves were mixed</li>
<li>Piano keyboard display didn't update when adding accidental using toolbar or palette</li>
<li>Side panels became undockable after being undocked and closed once</li>
<li>Could not add proper slur to grace notes when there were more than one</li>
<li>Layout of small staves was incorrect in some cases</li>
<li>Key signatures displayed incorrectly after clef change</li>
<li>Grace notes (after) collided with accidentals on main note</li>
<li>Key signature disappeared in all but first stave</li>
<li>Note's dot's visibility was incorrect when toggling visibility with note and dot selected</li>
<li>Couldn't pan score while playing when a note was selected</li>
<li>Instrument Change didn't transpose</li>
<li>Couldn't delete clef change at the start of a system</li>
<li>Accent-staccato didn't work in default template</li>
<li>Some properties were not kept on saving score</li>
<li>Incorrect key/time signatures and clefs appeared in the score in specific cases</li>
<li>User-modified barlines were not linking correctly between staves of a score, parts, and multimeasure rests</li>
<li>Ties were laid out incorrectly in some cases</li>
<li>Problems with layout of with beams, slurs, tuplets, and tremolo in cross-staff notation</li>
<li>Sizes and positions of some elements were not scaling correctly for small staves</li>
<li>Brackets didn't appear after section break</li>
<li>Users were automatically logged out after 5 hours when using Save Online</li>
<li>Phrasing in target measure was not cleared on copy-pasting</li>
<li>ChordIdentifier Plugin didn't work with MuseScore 3</li>
</ul>

More information is available on https://musescore.org/en/3.1",4454793
338,False,True,2019-05-23T07:44:11Z,2019-05-23T08:59:13Z,"<h4>Important note!</h4>

Revision number (in mscore/revision.h) is incorrect in the assets automatically generated by GitHub. Use 
<a href=""https://github.com/musescore/MuseScore/releases/download/v3.1rc/MuseScore-3.1.0-RC.zip"">MuseScore-3.1.0-RC.zip</a> instead.

Summary will be ready soon. Complete list of changes is available in <a href=""https://musescore.org/en/handbook/developers-handbook/release-notes/release-notes-musescore-3x/release-notes-notes-musescore"">Release Notes</a>.

<h3>New</h3>
<ul>
<li>Elements can cross staves still participating in autoplacement</li>
</ul>
<h3>Improvements</h3>
<ul>
<li>Playback starts immediately on large scores</li>
<li>Continuous view performance was significantly improved</li>
<li>The layout of the scores imported from MuseScore 2 is now preserved</li>
<li>Size and usability of Play Panel is now improved</li>
<li>Add chord symbol support for fret diagrams</li>
</ul>
<h3>Fixes</h3>
<ul>
<li>System positions calculations allocated too much space</li>
<li>Courtesy clefs and key signatures were positioned incorrectly around repeat barlines</li>
<li>Cross-staff notation was incorrect in some cases</li>
<li>Barlines spanning was wrong in some cases</li>
<li>Barlines were incorrect when small and standard staves were mixed</li>
<li>Piano keyboard display didn't update when adding accidental using toolbar or palette</li>
<li>Side panels became undockable after being undocked and closed once</li>
<li>Could not add proper slur to grace notes when there were more than one</li>
</ul>

More information is available on https://musescore.org/en/3.1rc",4454793
339,False,True,2019-05-05T03:19:24Z,2019-05-05T04:33:03Z,"<h4>Important note!</h4>

Revision number (in mscore/revision.h) is incorrect in the assets automatically generated by GitHub. Use 
<a href=""https://github.com/musescore/MuseScore/releases/download/v3.1beta2/MuseScore-3.1.0-Beta.zip"">MuseScore-3.1.0-Beta.zip</a> instead.

<h3>New</h3>
<ul>
<li>Option to completely disable Auto Placement</li>
</ul>
<h3>Improvements</h3>
<ul>
<li>""MuseScore File"" string (under File -> Save As...) now indicates which version you are about to save (MuseScore 3)</li>
<li>Move the whole segment on dragging a note in edit mode</li>
<li>Allow changing duration of multiple notes</li>
<li>Solo instruments related to selected measures if any when starting playback</li>
<li>Multiple fixes and improvements for fretboard diagrams</li>
</ul>
<h3>Fixes</h3>
<ul>
<li>Layout of small staves was incorrect in some cases</li>
<li>Key signatures displayed incorrectly after clef change</li>
<li>Grace notes (after) collided with accidentals on main note</li>
<li>Key signature disappeared in all but first stave</li>
<li>Note's dot's visibility was incorrect when toggling visibility with note and dot selected</li>
<li>Couldn't pan score while playing when a note was selected</li>
<li>Instrument Change didn't transpose</li>
<li>Couldn't delete clef change at the start of a system</li>
</ul>

More information is available on https://musescore.org/en/3.1beta",4454793
340,False,True,2019-04-12T07:49:07Z,2019-05-05T04:23:57Z,"<h4>Important note!</h4>

Revision number (in mscore/revision.h) is incorrect in the assets automatically generated by GitHub. Use 
<a href=""https://github.com/musescore/MuseScore/releases/download/v3.1beta/MuseScore-3.1.0-Beta.zip"">MuseScore-3.1.0-Beta.zip</a> instead.

<h3>New</h3>
<ul>
<li>Single-note dynamics playback - long notes can play dynamic changes</li>
<li>Updated soundfont that supports single-note dynamics out of the box</li>
<li>High quality soundfont with better strings and synth instruments available as an extension in the Resource Manager</li>
<li>Half-time/Double-time feature that shortens and lengthens rhythms on copy-pasting</li>
<li>Linearization feature that unrolls all repeats</li>
<li>Internal computational approach that allows creating 256th, 512th, 1024th notes and any kind of compound tuplets</li>
<li>Online documentation for Plugin API is available</li>
</ul>
<h3>Improvements</h3>
<ul>
<li>Select notes after deleting various elements</li>
<li>Make copy-pasting hairpins possible</li>
<li>Fix significant lag on iterating over notes with left-right arrows</li>
<li>UI refinements including more streamlined Inspector</li>
</ul>
<h3>Fixes</h3>
<ul>
<li>Accent-staccato didn't work in default template</li>
<li>Some properties were not kept on saving score</li>
<li>Incorrect key/time signatures and clefs appeared in the score in specific cases</li>
<li>User-modified barlines were not linking correctly between staves of a score, parts, and multimeasure rests</li>
<li>Ties were laid out incorrectly in some cases</li>
<li>Problems with layout of with beams, slurs, tuplets, and tremolo in cross-staff notation</li>
<li>Sizes and positions of some elements were not scaling correctly for small staves</li>
<li>Brackets didn't appear after section break</li>
<li>Users were automatically logged out after 5 hours when using Save Online</li>
<li>Phrasing in target measure was not cleared on copy-pasting</li>
<li>ChordIdentifier Plugin didn't work with MuseScore 3</li>
</ul>

More information is available on https://musescore.org/en/3.1beta",4454793
341,False,False,2019-03-12T11:19:53Z,2019-03-12T13:07:24Z,"<h4>Important note!</h4>

Revision number (in mscore/revision.h) is incorrect in the assets automatically generated by GitHub. Use 
<a href=""https://github.com/musescore/MuseScore/releases/download/v3.0.5/MuseScore-3.0.5.zip"">MuseScore-3.0.5.zip</a> instead.

<h3>Improvements</h3>
<ul>
<li>The whole chord sounds when iterating over notes with left-right arrows</li>
<li>Support more properties for fingering</li>
<li>Add more properties for Plugin API</li>
<li>Optimise New Score Wizard start time and layout calculations</li>
</ul>
<h3>Fixes</h3>
<ul>
<li>MuseScore 3.0.4 crashed on startup on macOS</li>
<li>Score margins and related staves positioning were calculated incorrectly</li>
<li>Spacers worked incorrectly when interacting with page borders</li>
<li>Measure counting was wrong when setting a custom offset value</li>
<li>Keyboard navigation in Single Page view worked incorrectly</li>
<li>MuseScore crashed on finishing work on Windows</li>
<li>MuseScore crashed when changing Time Signature in parts</li>
<li>MuseScore crashed when selecting a bracket in edit mode</li>
</ul>

More information is available on https://musescore.org/en/3.0.5",4454793
342,False,False,2019-02-28T11:31:10Z,2019-02-28T13:38:36Z,"<h4>Important note!</h4>

Revision number (in mscore/revision.h) is incorrect in the assets automatically generated by GitHub. Use MuseScore-3.0.4.zip instead.

<h3>Fixes</h3>
<ul>
<li>All instruments played as piano in some specific cases</li>
<li>""Save online"" login screen didn't work on Mac</li>
<li>Removing section break crashed the editor in some cases</li>
<li>Copying measure repeats didn't work</li>
<li>Brass Quartet and Brass Quintet templates couldn't be opened</li>
</ul>

More information is available on https://musescore.org/en/3.0.4",4454793
343,False,False,2019-02-26T12:42:41Z,2019-02-26T14:37:21Z,"<h4>Important note!</h4>

Revision number (in mscore/revision.h) is incorrect in the assets automatically generated by GitHub. Use MuseScore-3.0.3.zip instead.

<h3>New</h3>
<ul><li>New crash report facility</li></ul>
<h3>Improvements</h3>
<ul>
<li>Whole score playback can be turned on when in the Part tab using the mixer. Part playback works by default in in the Part tab</li>
<li>Improved global performance</li>
<li>Drag-and-drop user experience is improved</li>
</ul>
<h3>Fixes</h3>
<ul>
<li>Caesuras and sections breaks didn't cause pauses in playback</li>
<li>Some properties were not properly saved</li>
<li>Fermatas over barlines could not be added</li>
<li>Articulations could not be added to grace notes</li>
<li>Redundant key/time signatures appeared in Page/Continuous view and Parts</li>
<li>Visibility was not properly applied</li>
<li>Ties failed to be copied-pasted in a score with parts</li>
<li>Keyboard navigation in Continuous View was broken</li>
</ul>

More information is available on https://musescore.org/en/3.0.3",4454793
344,False,False,2019-01-30T12:34:27Z,2019-02-05T15:17:48Z,"<h3>Important note!</h3>
Revision number (in mscore/revision.h) is incorrect in the assets automatically generated by GitHub. Use MuseScore-3.0.2.zip instead.

<h3>Improvements</h3>
<ul>
<li>Reworked login screen when using Save Online allows signing in via Facebook and Google and creating an account from within the editor</li>
<li>New easy fingering input mode and other fingering improvements</li>
</ul>
<h3>Fixes</h3>
<ul>
<li>Plugins framework didn't work</li>
<li>Grace notes displayed the wrong size in TAB staves</li>
<li>Default window size was too large on a multi-monitor setup</li>
<li>Color was not available as a text style setting, including issues with coloring lyrics for different voices</li>
<li>Slurs were not exported properly to MusicXML</li>
<li>Tempo text was not imported properly from MusicXML</li>
</ul>

More information is available on https://musescore.org/en/3.0.2",4454793
345,False,False,2019-01-15T09:20:49Z,2019-01-15T10:00:18Z,"<h3>Important note!</h3>
Revision number (in mscore/revision.h) is incorrect in the assets available above (autogenerated by GitHub).

**Source code is available here:** 
https://download.musescore.com/releases/MuseScore-3.0.1/MuseScore-3.0.1.zip

<h2>Improvements</h2>

* Redesign of New Score Wizard makes it easier to search templates, provides better score previews, and significantly improves accessibility for blind users
* Reworked Mixer UI allows minimizing and making it dockable
* Better automatic placement of hairpins and dynamics
* Better import of 2.X scores

<h2>Fixes</h2>

* Properties were not saved properly in a number of cases
* Layout was broken after operations with measure rests and tuplets
* Time signatures appeared incorrectly in some cases and might lead to crash
* Using the implode tool on notes connected with slurs led to crashes
* Editing a barline was applied incorrectly
* Context menu on instrument names didn't appear
* Pages with landscape orientation were cropped when printing
* Playback went crazy on saving
* Tempo was applied incorrectly in certain cases involving fermatas
* Slurs were lost or detached in some cases
* Autoplacement couldn't be switched off for stems and arpeggio

More information is available on https://musescore.org/3.0.1",4454793
346,False,False,2020-01-14T21:17:39Z,2020-01-15T23:11:12Z,"TensorFlow Serving using TensorFlow 2.1.0
## Major Features and Improvements
* Add integration with [TensorBoard profiler service](https://www.tensorflow.org/tensorboard).

## Breaking Changes

## Bug Fixes and Other Changes

* Fix link for TFRecord in Saved Model Warmup documentation. (commit: 127a112a91bda3d7d3c3a56802632376bbe3e36e)
* Fix typo in http server log message. (commit: 509f6da062dc9b091ad6961a94740cf64e265c36)
* Be able to discard aspired-versions request from SourceRouter (commit: 10e4987502ee91fe74c6c179ed4ba52f17cc75b4)
* Use public tf.config APIs (commit: 87a4b2b28729bd269ab367742998b6f8426ea1b7)
* Fix copying of string tensor outputs by explicitly copying each (commit: 9544077bdb6eef9b20a0688a042155ee6dea011a)
* Migrate from std::string to tensorflow::tstring. (commit: e24571ac9ce390733f3b02188c7d740f08fff62d)
",50461701
347,False,False,2019-12-11T21:11:26Z,2019-12-11T23:54:14Z,"# Release 2.1
## Major Features and Improvements
* Be able to discard aspired-versions request from SourceRouter (commit: 10e4987502ee91fe74c6c179ed4ba52f17cc75b4)
* Adds integration with TensorBoard profiler service (commit: 91adea9716b57dd58427714427b944fbe9b3f89e)

## Breaking Changes

## Bug Fixes and Other Changes

* Fix link for TFRecord in Saved Model Warmup documentation. (commit: 127a112a91bda3d7d3c3a56802632376bbe3e36e)
* Use public tf.config APIs (commit: 87a4b2b28729bd269ab367742998b6f8426ea1b7)

## Thanks to our Contributors

This release contains contributions from many people at Google, as well as:

Minglotus-6
",50461701
348,False,False,2019-11-20T04:39:43Z,2019-11-20T06:19:26Z,TensorFlow Serving using TensorFlow 1.13.2,50461701
349,False,False,2019-10-18T23:42:33Z,2019-10-21T21:25:45Z,"TensorFlow Serving using TensorFlow 2.0.0

## Major Features and Improvements
* Some Tensorflow Text ops have been added to ModelServer (specifically constrained_sequence_op, sentence_breaking_ops, unicode_script_tokenizer, whitespace_tokenizer, wordpiece_tokenizer)

## Breaking Changes
* As previously announced[1](https://groups.google.com/a/tensorflow.org/forum/#!msg/announce/qXfsxr2sF-0/jHQ77dr3DAAJ)[2](https://github.com/tensorflow/community/blob/master/rfcs/20180907-contrib-sunset.md)[3](https://github.com/tensorflow/serving/releases/tag/1.15.0), Contrib ops will not be packaged with Tensorflow, and therefore will not be available in Tensorflow Serving. If serving with Tensorflow Serving >1.15, please ensure your models do not contain any tf.contrib ops. If you are critically dependent on custom ops, please review [this guide](https://github.com/tensorflow/serving/blob/master/tensorflow_serving/g3doc/custom_op.md) for instructions to statically build ops into the model server.
* After being [deprecated](https://developers.googleblog.com/2017/07/tensorflow-serving-10.html) for multiple years, as a part of tf.contrib deprecation, SessionBundle API will be removed starting from Tensorflow Serving 2.0 - if currently using SessionBundle, please migrate to SavedModel APIs.

## Bug Fixes and Other Changes
* Add a section in the documentation for testing custom op manually. (commit: 1b65af1d7fee4fe79b4152f94d5ea422e8a79cca)
* Add ops delegate library to enable running TF ops. (commit: 14112359d16b3e1e275c2ba70b0e078ce4863783)
* Add command line tool to load TF Lite model for manual testing/debugging. (commit: 0b0254d4a90550b1d7228334187e624bf4b31c37)
* Fixes broken relative docs links (commit: 12813143b22616091388e7659d7f69cfcf518269)
* Cleaning up BUILD visibility for tf_pyclif_proto_library intermediate targets. (commit: 81ed5ef2307eea4c9396fd34f33673be072cdcf3)
* Remove unused load statements from BUILD files (commit: d0e01a3c56b280c6602d6c14e97ef60882d317aa)
* Manual tests for model server and including tf.Text in serving build. (commit: 142d0adb5e2975689d80d8fc608c9684e96de078)
* Remove tensorflow/contrib/session_bundle as dependency for Tensorflow Serving. (commit: 1bdd3499f1fe4d99b3c3024080560350d493e29b)

## Thanks to our Contributors

This release contains contributions from many people at Google, as well as:

chaox",50461701
350,False,False,2019-10-17T21:55:45Z,2019-10-19T00:18:24Z,"TensorFlow Serving using TensorFlow 1.15.0

## Major Features and Improvements

## Breaking Changes
* As previously announced, Contrib ops will not be packaged with Tensorflow, and therefore will not be available in Tensorflow Serving. If serving with Tensorflow Serving >1.15, please ensure your models do not contain any tf.contrib ops. If you are critically dependent on custom ops, please review this guide for instructions to statically build ops into the model server.
* After being deprecated for multiple years, as a part of tf.contrib deprecation, SessionBundle API will be removed starting from Tensorflow Serving 2.0 - if currently using SessionBundle, please migrate to SavedModel APIs.

## Bug Fixes and Other Changes
* This release is based on TF version 1.15.0

## Thanks to our Contributors

This release contains contributions from many people at Google, as well as:

Abolfazl Shahbazi, chaox, gison93, Minglotus-6, William D. Irons, ynqa
",50461701
351,False,True,2019-10-09T03:24:58Z,2019-10-09T05:01:42Z,TensorFlow Serving using TensorFlow 1.15.0-rc3.,50461701
352,False,True,2019-09-26T20:56:40Z,2019-09-26T21:45:11Z,,50461701
353,False,False,2019-07-08T17:05:49Z,2019-07-08T17:50:37Z,"TensorFlow Serving using TensorFlow 1.12.3

## Major Features and Improvements

* No major features or improvements.

## Breaking Changes

* No breaking changes

## Bug Fixes and Other Changes

* This release is based on TF version 1.12.3.
",50461701
354,False,False,2019-06-28T20:33:27Z,2019-07-03T03:24:58Z,"TensorFlow Serving using TensorFlow 1.14.0.
                                                                                                                                            
## Major Features and Improvements                                                                                                                                        
                                                                                                                                                                          
* Use MKL-DNN contraction kernels by default. (commit: a075ebe5eff56f3311d6e2cc2d23e4e82567596b)                                                                          
* Add option to refuse to unload the last servable version. (commit: c8496b199cedf3e38a7ad0dc4c46db2b341b28e5)                                                            
* Add ability to disable periodic filesystem polling (#1295). (commit: 72450555c83ea5e6d18d05362192ad85613b23b1)                                                          
                                                                                                                                                                          
## Breaking Changes                                                                                                                                                       
                                                                                                                                                                          
* No breaking changes.                                                                                                                                                    
                                                                                                                                                                          
## Bug Fixes and Other Changes                                                                                                                                            
                                                                                                                                                                          
* Add `enforce_session_run_timeout` inside `Server::Options`. (commit: de030640ec6ed2cd504ee0ad9335fb93aebe51b5)                                                          
* Add -o option, to pass params to `docker` command. (commit: dd59021d3f807f23390afa8a2bc34a6f7029ed24)                                                                   
* Stop using reader locks (tf_shared_lock) on the read path of FastReadDynamicPtr. (commit: f04e583a6a700a4943a57b6758b3e131b0865e97)                                     
* Add saved model tags to logging metadata. These tags are used by (commit: 6320701645d5aeceac49a4f02cc629159559f143)                                                     
* Adds an option in `SessionBundleConfig` to repeat warmup replay n times per request. (commit: 15cd20263c8362f534afecbdf98b9d929eac70fd)                                 
* Improve tpu server warm up (commit: 63d31a33b4f6faeb0764bb159d403f2b49061aed)                                                                                           
* Official PIP package releases are now tied to a specific version of TensorFlow (commit: 9514c37d22f0b728e2db9e8c6f28fb11ebde0fad)                                       
* Bump the minimal Bazel version to 0.24.1 (commit: 96a716ca31f753b0c3efc1ef60779b77f5c60845)                                                                             
* Add new device type for TPU. (commit: c74861d61131e2248a70d9c72317df8c49eb8f1a)                                                                                         
* Fix incorrect formatting of decimal numbers in JSON output (#1332) (commit: d7c3b3deacbabf763ed44fb6932535016852e90a)                                                   
* Fixed the gzip uncompression support in the HTTP server for large request bodies. (commit: fb7835c7cd95c5b6b163cb2abd6a8b9a1a283689)                                    
* Add stack memory resource kind. (commit: e56e72b3e4b9a597832734208a3da455f6db1a04)                                                                                      
* Adds ModelServer test for loading SavedModel exported from Keras Sequential API (commit: 9578f3d10c786c6714b9a8b481dd74f454402477)                                      
* Ignore SIGPIPE for libevent，prevent the SIGPIPE signal from being raised (#1257) (commit: 8d88a5b3c4ac502113c798a470111ca65f47b0c2)                                    
* Fix #1367 (commit: 58af9011d72cbd062501c3f8066bf4d9eee04a7a)                                                                                                            
* Update Serving_REST_simple.ipynb (commit: 3870ba59a764d859fc137a8363588c94906e0f5f)                                                                                     
* Updates README with link to architecture overview (commit: d233a82e0a569d5ccd23a0cbada8099644698dc6)                                                                    
* Update example section to use Docker (commit: a5fc8bbc20f712fd6c4c148ff4d94a9231b79ceb)                                                                                 
                                                                                                                                                                          
## Thanks to our Contributors                                                                                                                                             
                                                                                                                                                                          
This release contains contributions from many people at Google, as well as:                                                                                               
                                                                                                                                                                          
G. Hussain Chinoy, Karthik Vadla, mkim301, yjhjstz ",50461701
355,False,True,2019-06-03T18:35:45Z,2019-06-03T22:58:14Z,"TensorFlow Serving using TensorFlow 1.14.0-rc0.
                                                                                                                                            
## Major Features and Improvements                                                                                                                                        
                                                                                                                                                                          
* Use MKL-DNN contraction kernels by default. (commit: a075ebe5eff56f3311d6e2cc2d23e4e82567596b)                                                                          
* Add option to refuse to unload the last servable version. (commit: c8496b199cedf3e38a7ad0dc4c46db2b341b28e5)                                                            
* Add ability to disable periodic filesystem polling (#1295). (commit: 72450555c83ea5e6d18d05362192ad85613b23b1)                                                          
                                                                                                                                                                          
## Breaking Changes                                                                                                                                                       
                                                                                                                                                                          
* No breaking changes.                                                                                                                                                    
                                                                                                                                                                          
## Bug Fixes and Other Changes                                                                                                                                            
                                                                                                                                                                          
* Add `enforce_session_run_timeout` inside `Server::Options`. (commit: de030640ec6ed2cd504ee0ad9335fb93aebe51b5)                                                          
* Add -o option, to pass params to `docker` command. (commit: dd59021d3f807f23390afa8a2bc34a6f7029ed24)                                                                   
* Stop using reader locks (tf_shared_lock) on the read path of FastReadDynamicPtr. (commit: f04e583a6a700a4943a57b6758b3e131b0865e97)                                     
* Add saved model tags to logging metadata. These tags are used by (commit: 6320701645d5aeceac49a4f02cc629159559f143)                                                     
* Adds an option in `SessionBundleConfig` to repeat warmup replay n times per request. (commit: 15cd20263c8362f534afecbdf98b9d929eac70fd)                                 
* Improve tpu server warm up (commit: 63d31a33b4f6faeb0764bb159d403f2b49061aed)                                                                                           
* Official PIP package releases are now tied to a specific version of TensorFlow (commit: 9514c37d22f0b728e2db9e8c6f28fb11ebde0fad)                                       
* Bump the minimal Bazel version to 0.24.1 (commit: 96a716ca31f753b0c3efc1ef60779b77f5c60845)                                                                             
* Add new device type for TPU. (commit: c74861d61131e2248a70d9c72317df8c49eb8f1a)                                                                                         
* Fix incorrect formatting of decimal numbers in JSON output (#1332) (commit: d7c3b3deacbabf763ed44fb6932535016852e90a)                                                   
* Fixed the gzip uncompression support in the HTTP server for large request bodies. (commit: fb7835c7cd95c5b6b163cb2abd6a8b9a1a283689)                                    
* Add stack memory resource kind. (commit: e56e72b3e4b9a597832734208a3da455f6db1a04)                                                                                      
* Adds ModelServer test for loading SavedModel exported from Keras Sequential API (commit: 9578f3d10c786c6714b9a8b481dd74f454402477)                                      
* Ignore SIGPIPE for libevent，prevent the SIGPIPE signal from being raised (#1257) (commit: 8d88a5b3c4ac502113c798a470111ca65f47b0c2)                                    
* Fix #1367 (commit: 58af9011d72cbd062501c3f8066bf4d9eee04a7a)                                                                                                            
* Update Serving_REST_simple.ipynb (commit: 3870ba59a764d859fc137a8363588c94906e0f5f)                                                                                     
* Updates README with link to architecture overview (commit: d233a82e0a569d5ccd23a0cbada8099644698dc6)                                                                    
* Update example section to use Docker (commit: a5fc8bbc20f712fd6c4c148ff4d94a9231b79ceb)                                                                                 
                                                                                                                                                                          
## Thanks to our Contributors                                                                                                                                             
                                                                                                                                                                          
This release contains contributions from many people at Google, as well as:                                                                                               
                                                                                                                                                                          
G. Hussain Chinoy, Karthik Vadla, mkim301, yjhjstz ",50461701
356,False,False,2019-02-26T00:45:00Z,2019-02-26T03:48:58Z,"TensorFlow Serving using TensorFlow 1.13.1

## Major Features and Improvements
* Support for TensorRT 5.0 (GPU docker image built against CUDA 10 and TensorRT 5.0)
* Support for listening gRPC over UNIX socket (commit: a25b0dad3984d3b154db1144df9d3b447b19aae6)
* New [GPU version of TensorFlow Serving API PIP package](https://pypi.org/project/tensorflow-serving-api-gpu/). This depends on the `tensorflow-gpu` instead of `tensorflow` PIP package, but is otherwise identical. (commit: 525c1af73ca543ce0165b3d22f0bbf21094fc443)
* [TF Serving end-to-end colab](tensorflow_serving/g3doc/tutorials/Serving_REST_simple.ipynb)! Training with Keras, serving with TF Serving and REST API (commit: 1ff8aadf20d75294aa4d496a807320603c6887c6)


## Breaking Changes
* No breaking changes.

## Bug Fixes and Other Changes

* Make error message for input size mismatch in `Predict` call even more actionable. (commit: 7237fb54c8d5898713e0bba7573add60cd19c25e)
* Document how to use the version policy to pin a specific version, or serve multiple versions, of a model. (commit: 2724bfee911f1d2294a9ceb705bbd09a2701c344)
* Document config reloading and model version labels. (commit: f4890afdc42f10f125cba64c3c2f2c01309ba2e2)
* Fix the compile error on ARM-32 in net_http/server. (commit: 5446fd973de228693c1652acd4922dc4b177f77a)
* Adds ModelSpec to SessionRunResponse. (commit: 58a22637ef5e3c50153eb42eff652137eb18c94a)
* Add MKL support (commit: 8f792532bea10d82fd3c3b126412d0546f54ae28)
* Fix default path of Prometheus metrics endpoint (commit: 9d05b0c17be47d3260ab58c2b9ac97e202699b96)
* Add monitoring metrics for saved model (export_dir) warm up latency. (commit: de0935b64ec972879ae623aa4f438282a4281dcc)
* Add more details/clarification to model version labels documentation. (commit: f9e6ac4d60a4044fc3b8c07719d0faaeae401dda)
* Split `--tensorflow_session_parallelism` flag into two new flags: `--tensorflow_intra_op_parallelism` and `--tensorflow_inter_op_parallelism` (commit: 71092e448c5432f4411f7333a02b274f0a3cdd3f)
* Update CPU Docker images to Ubuntu 18.04 (commit: 8023fba48c5b47a81fec25c17ba385a720650ef8)
* Upgrade to Bazel 0.20.0 (commit: fc0b75f2e325a187794bf437ff3227510d261afb)
* Update Python 2 scripts to be compatible with both Python 2 and 3 (commit: 846d443bb506f07242cd99347901f3ad5b7efe6a)

## Thanks to our Contributors

This release contains contributions from many people at Google, as well as:

Daniel Shi, Karthik Vadla, lapolonio, robert, Shintaro Murakami, Siju, Tom Forbes, Ville TöRhöNen",50461701
357,False,True,2019-02-13T19:45:04Z,2019-02-14T03:03:05Z,"TensorFlow Serving using TensorFlow 1.13.0-rc1

## Major Features and Improvements
* Support for TensorRT 5.0 (GPU docker image built against CUDA 10 and TensorRT 5.0)
* Support for listening gRPC over UNIX socket (commit: a25b0dad3984d3b154db1144df9d3b447b19aae6)
* New [GPU version of TensorFlow Serving API PIP package](https://pypi.org/project/tensorflow-serving-api-gpu/). This depends on the `tensorflow-gpu` instead of `tensorflow` PIP package, but is otherwise identical. (commit: 525c1af73ca543ce0165b3d22f0bbf21094fc443)
* [TF Serving end-to-end colab](tensorflow_serving/g3doc/tutorials/Serving_REST_simple.ipynb)! Training with Keras, serving with TF Serving and REST API (commit: 1ff8aadf20d75294aa4d496a807320603c6887c6)


## Breaking Changes
* No breaking changes.

## Bug Fixes and Other Changes

* Make error message for input size mismatch in `Predict` call even more actionable. (commit: 7237fb54c8d5898713e0bba7573add60cd19c25e)
* Document how to use the version policy to pin a specific version, or serve multiple versions, of a model. (commit: 2724bfee911f1d2294a9ceb705bbd09a2701c344)
* Document config reloading and model version labels. (commit: f4890afdc42f10f125cba64c3c2f2c01309ba2e2)
* Fix the compile error on ARM-32 in net_http/server. (commit: 5446fd973de228693c1652acd4922dc4b177f77a)
* Adds ModelSpec to SessionRunResponse. (commit: 58a22637ef5e3c50153eb42eff652137eb18c94a)
* Add MKL support (commit: 8f792532bea10d82fd3c3b126412d0546f54ae28)
* Fix default path of Prometheus metrics endpoint (commit: 9d05b0c17be47d3260ab58c2b9ac97e202699b96)
* Add monitoring metrics for saved model (export_dir) warm up latency. (commit: de0935b64ec972879ae623aa4f438282a4281dcc)
* Add more details/clarification to model version labels documentation. (commit: f9e6ac4d60a4044fc3b8c07719d0faaeae401dda)
* Split `--tensorflow_session_parallelism` flag into two new flags: `--tensorflow_intra_op_parallelism` and `--tensorflow_inter_op_parallelism` (commit: 71092e448c5432f4411f7333a02b274f0a3cdd3f)
* Update CPU Docker images to Ubuntu 18.04 (commit: 8023fba48c5b47a81fec25c17ba385a720650ef8)
* Upgrade to Bazel 0.20.0 (commit: fc0b75f2e325a187794bf437ff3227510d261afb)
* Update Python 2 scripts to be compatible with both Python 2 and 3 (commit: 846d443bb506f07242cd99347901f3ad5b7efe6a)

## Thanks to our Contributors

This release contains contributions from many people at Google, as well as:

Daniel Shi, Karthik Vadla, lapolonio, robert, Shintaro Murakami, Siju, Tom Forbes, Ville TöRhöNen",50461701
358,False,False,2018-11-06T20:34:19Z,2018-11-06T22:01:58Z,"TensorFlow Serving using TensorFlow 1.12.0

## Major Features and Improvements
* Add new REST API to [get model status](https://github.com/tensorflow/serving/blob/master/tensorflow_serving/g3doc/api_rest.md#model-status-api) from ModelServer (commit: 00e459f1604c40c073cbb9cb92d72cb6a88be9cd)
* Add new REST API to [get model metadata](https://github.com/tensorflow/serving/blob/master/tensorflow_serving/g3doc/api_rest.md#model-metadata-api) from ModelServer (fixes #1115) (commit: 97687024c3b7515d2f2979c35054f44c8f84d146)
* Support accepting gzipped REST API requests (fixes #1091) (commit: b94f6c89335782a7f175e8973c4f326375c55120)

## Breaking Changes

None

## Bug Fixes and Other Changes

* Update MKL build (commit: e11bd51540212242911dae00c8507e2852a5ad5a)
* Remove version pinning on pip packages (commit: 462072c2d78124c2769f820f7b63ee086de4e305)
* Update basic serving tutorials (commit: 33a4b052cedc39c21107bc99a090b59ca64ec568)
* Replacing legacy_init_op argument in SavedModelBuilder with main_op. (commit: 2fda31f905eefd2d108e9c84b8d7d55e4e482833)
* Add git hash for version metadata of model server and add tags for dev and nightly builds. (commit: 5c7740fc3d8d5c017643a8cc40a7202717b10dd6)
* Add error messages for specific cases when json for REST requests (commit: a17c89202e68bf19f369b9cbc97db7ced283b874)
* Python examples now run in a hermetic environment with all required dependencies (commit: 793fd90ee41ac34fa4c9261eef2d2c908dca9735)

## Thanks to our Contributors

This release contains contributions from many people at Google, as well as:

Charles Verge, demfier, Kamidi Preetham, Lihang Li, naurril, vfdev, Yu Zheng",50461701
359,False,True,2018-10-26T22:49:29Z,2018-10-26T23:37:44Z,"TensorFlow Serving using TensorFlow 1.12.0-rc2

## Major Features and Improvements
* Add new REST API to [get model status](https://github.com/tensorflow/serving/blob/master/tensorflow_serving/g3doc/api_rest.md#model-status-api) from ModelServer (commit: 00e459f1604c40c073cbb9cb92d72cb6a88be9cd)
* Add new REST API to [get model metadata](https://github.com/tensorflow/serving/blob/master/tensorflow_serving/g3doc/api_rest.md#model-metadata-api) from ModelServer (fixes #1115) (commit: 97687024c3b7515d2f2979c35054f44c8f84d146)
* Support accepting gzipped REST API requests (fixes #1091) (commit: b94f6c89335782a7f175e8973c4f326375c55120)

## Breaking Changes

## Bug Fixes and Other Changes

* Update MKL build (commit: e11bd51540212242911dae00c8507e2852a5ad5a)
* Remove version pinning on pip packages (commit: 462072c2d78124c2769f820f7b63ee086de4e305)
* Update basic serving tutorials (commit: 33a4b052cedc39c21107bc99a090b59ca64ec568)
* Replacing legacy_init_op argument in SavedModelBuilder with main_op. (commit: 2fda31f905eefd2d108e9c84b8d7d55e4e482833)
* Add git hash for version metadata of model server and add tags for dev and nightly builds. (commit: 5c7740fc3d8d5c017643a8cc40a7202717b10dd6)
* Add error messages for specific cases when json for REST requests (commit: a17c89202e68bf19f369b9cbc97db7ced283b874)
* Python examples now run in a hermetic environment with all required dependencies (commit: 793fd90ee41ac34fa4c9261eef2d2c908dca9735)

## Thanks to our Contributors

This release contains contributions from many people at Google, as well as:

Charles Verge, demfier, Kamidi Preetham, Lihang Li, naurril, vfdev, Yu Zheng",50461701
360,False,False,2018-10-23T19:38:40Z,2018-10-23T20:38:46Z,"TensorFlow Serving using TensorFlow 1.11.0

## Bug Fixes and Other Changes                                                                                                                                                                                                                                                                                                                                                                                                          
                                                                                                                                                                                                                                                                                                                                                                                                                                        
* Fix version of model server binary (Fixes #1134)                                                                                                                                                                                                                                                                                                                                                                                      
* Range check floating point numbers correctly (Fixes #1136).                                                                                                                                                                                                                                                                                                                                                                           
* Fix docker run script for same user and group name (Fixes #1137).                                                                                                                                                                                                                                                                                                                                                                     
* Fix GPU build (Fixes #1150)                                                                                                                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                                                                                                                                                        
## Thanks to our Contributors                                                                                                                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                                                                                                                                                        
This release contains contributions from many people at Google, as well as:                                                                                                                                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                                                                                                                                                                                                                
vfdev",50461701
361,False,False,2018-10-05T02:06:33Z,2018-10-05T17:58:53Z,"TensorFlow Serving using TensorFlow 1.11.0

## Major Features and Improvements

* Prometheus exporter for TF metrics (see https://github.com/tensorflow/serving/commit/021efbd3281aa815cab0b35eab6d6d25249c12d4 for details).

## Breaking Changes

* No breaking changes

## Bug Fixes and Other Changes

* Built against TensorFlow [1.11.0](https://github.com/tensorflow/tensorflow/releases/tag/v1.11.0)
* Accept integers for float/doubles in JSON REST API requests
* TF Serving API is now pre-built into Docker development images
* GPU Docker images are now built against cuDNN 7.2
* Add `--max_num_load_retries` flag to ModelServer (fixes #1099)
* Add user-configured model version labels to the stand-alone ModelServer binary.
* Directly import tensor.proto.h (the transitive import will be removed from tensor.h soon)
* Building optimized TensorFlow Serving binaries is now easier (see [docs](https://github.com/tensorflow/serving/g3doc/setup.md]) for details)
* Adds columnar format support for input/output tensors in Predict REST API (fixes #1047)
* Development Dockerfiles now produce a more optimized ModelServer
* Fixed TensorFlow Serving API PyPi package overwriting TensorFlow package.

## Thanks to our Contributors
                                                                                                                                                                                    
This release contains contributions from many people at Google, as well as:
                                                                                                      
Feisan, joshua.horowitz, Prashanth Reddy Basani, tianyapiaozi, Vamsi Sripathi, Yu Zheng",50461701
362,False,False,2018-09-21T17:59:13Z,2018-09-21T19:35:33Z,"TensorFlow Serving using TensorFlow 1.11.0-rc1
",50461701
363,False,False,2018-09-14T19:44:01Z,2018-09-15T02:56:13Z,"# Release 1.11.0-rc0

## Major Features and Improvements

* Prometheus exporter for TF metrics (see https://github.com/tensorflow/serving/commit/021efbd3281aa815cab0b35eab6d6d25249c12d4 for details).
* Added new REST API to [get status of model(s)](https://github.com/tensorflow/serving/blob/master/tensorflow_serving/g3doc/api_rest.md#model-status-api) from ModelServer.

## Breaking Changes

* No breaking changes

## Bug Fixes and Other Changes

* Built against TensorFlow [1.11.0-rc0](https://github.com/tensorflow/tensorflow/releases/tag/v1.11.0-rc0).
* Directly import tensor.proto.h (the transitive import will be removed from tensor.h soon)
* Building optimized TensorFlow Serving binaries is now easier (see [docs](https://github.com/tensorflow/serving/g3doc/setup.md]) for details)
* Adds columnar format support for input/output tensors in Predict REST API (fixes #1047)
* Development Dockerfiles now produce a more optimized ModelServer
* Fixed TensorFlow Serving API PyPi package overwriting TensorFlow package.
",50461701
364,False,False,2018-08-15T00:08:05Z,2018-08-15T00:58:40Z,"# Release 1.10.1
 
## Bug Fixes and Other Changes

* Fixed TensorFlow Serving API PyPi package overwriting TensorFlow package.
* Update Docker configs to fix https://github.com/tensorflow/tensorflow/issues/21518",50461701
365,False,False,2018-08-10T02:39:30Z,2018-08-10T05:07:19Z,"# Release 1.10.0
 
## Major Features and Improvements

* No major features or improvements.

## Breaking Changes

* TensorFlow Serving API now uses gRPC's GA release. The beta gRPC API has been deprecated, and will be removed in a future version of TensorFlow Serving. Please update your gRPC client code ([sample](https://github.com/tensorflow/serving/commit/aa35cfdb24016f6d88f82c53d45c8ce9fa550499#diff-e7d756a12c65a8b5ac90229b23523023))
* Docker images for GPU are built against NCCL 2.2, in following with TensorFlow 1.10.

## Bug Fixes and Other Changes

* Built against TensorFlow 1.10.0
* Added GPU serving Docker image.
* Repo cloning and shell prompt in example readme.
* Updated Docker instructions.
* Updated min Bazel version (0.15.0).
* Convert TF_CHECK_OKs to TF_ASSERT_OK in some unit tests.
* Remove error suppression (.IgnoreError()) from BasicManager.
* Add new bazel_in_docker.sh tool for doing hermetic bazel builds.
* Fix erroneous formatting of numbers in REST API output that are larger than 6 digits.
* Add support for Python 3 while also compatible with Python 2.7 in mnist_saved_model.py.
* Fix an incorrect link to Dockerfile.devel-gpu.
* Add util for get model status.
* Adding support for secure channel to ModelServer.
* Add version output to model server binary.
* Change ServerRequestLogger::Update to only create new and delete old loggers if needed.
* Have the Model Server interpret specific hard-coded model version labels ""stable"" and ""canary"" as the smallest and largest version#, respectively.
* Add half_plus_two CPU and GPU models to test data.",50461701
366,False,False,2018-08-06T19:03:48Z,2018-08-06T19:53:05Z,"TensorFlow Serving using TensorFlow 1.9.0
- Fix broken PIP packages (#999)
- Fix REST API output (#989)
- Updated Docker GPU configs (#1005)
",50461701
367,False,True,2018-07-31T23:09:09Z,2018-08-01T00:12:19Z,TensorFlow Serving using TensorFlow 1.10.0-rc1.,50461701
368,False,False,2018-07-11T00:36:54Z,2018-07-11T01:15:35Z,TensorFlow Serving using TensorFlow 1.9.0,50461701
369,False,True,2018-07-03T23:45:59Z,2018-07-04T21:31:34Z,TensorFlow Serving using TensorFlow 1.9.0-rc2,50461701
370,False,False,2018-06-29T04:51:04Z,2018-06-29T05:40:42Z,"TensorFlow Serving using TensorFlow 1.7.1.

Same serving sources as 1.7.0 release, but re-releasing binary packages to account new compiler flags introduced in 503cc0c (helps control memory blowup in ModelServer) and rebasing to TensorFlow 1.7.1 release.",50461701
371,False,False,2018-06-19T02:15:55Z,2018-06-28T21:47:20Z,"TensorFlow Serving 1.6.1 using TensorFlow 1.6.0.

Same sources as 1.6.0 release, but re-releasing binary packages to account new compiler flags introduced in https://github.com/tensorflow/serving/commit/503cc0c2da0c75c5f8d94be394439776771f2d5f (helps control memory blowup in ModelServer).",50461701
372,False,False,2018-07-07T07:37:47Z,2018-06-11T17:18:06Z,"TensorFlow Serving using TensorFlow 1.8.0.

This release now supports a [RESTful API](tensorflow_serving/g3doc/api_rest.md). You can now easily make classification, regression, and prediction requests to your TensorFlow models using JSON objects.",50461701
373,False,False,2018-04-16T16:32:10Z,2018-04-16T16:38:47Z,TensorFlow Serving using TensorFlow 1.7.0.,50461701
374,False,False,2018-03-16T18:39:20Z,2018-03-26T21:49:03Z,TensorFlow Serving using TensorFlow 1.6.0.,50461701
375,False,False,2018-01-30T00:43:59Z,2018-01-30T00:44:46Z,TensorFlow Serving using TensorFlow 1.5.0.,50461701
376,False,False,2017-11-06T19:56:03Z,2017-11-07T02:00:54Z,TensorFlow Serving using TensorFlow 1.4.0.,50461701
377,False,False,2017-08-18T22:36:23Z,2017-08-19T00:33:20Z,TensorFlow Serving using TensorFlow 1.3.0.,50461701
378,False,False,2017-08-03T19:16:45Z,2017-08-07T17:50:01Z,"New Features:
- Prebuilt ModelServer binary installable with apt-get and a PIP package for the Python client API. Install instructions can be found [here](https://www.tensorflow.org/serving/setup).
- Extended stable API: In addition to the original Predict function, we added Regress, Classify, and MultiInference. See the PredictionService for proto definitions.
- Batching scheduler moved into TensorFlow, and used in new Batch/Unbatch ops.
- Propagate ModelServer RPC deadline to Session::Run().

Updates:
- Deprecated SessionBundle format.
  - SessionBundle is deprecated. The ModelServer still works with it for now, but support is going away in the near future so it's no longer officially supported. Please move to use [SavedModel](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md) instead.
- Moved documentation to tensorflow.org along with the rest of TensorFlow - https://www.tensorflow.org/serving.
- Various bug fixes and code cleanups.
- Improved documentation and updated all codelabs to work with SavedModel.
",50461701
379,False,False,2017-06-20T20:46:36Z,2017-06-20T22:50:14Z,TensorFlow Serving running with TensorFlow 1.2.0.,50461701
380,False,False,2017-02-15T20:59:24Z,2017-02-15T22:27:56Z,"TensorFlow Serving running with TensorFlow 1.0.0.
",50461701
381,False,False,2017-02-01T17:40:42Z,2017-02-03T20:16:40Z,"New Features:
- Model Server binary in tensorflow_serving/model_servers with a PredictionService API.
- Support SavedModel format and added ability to upconvert legacy SessionBundle exports. See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md
  - NOTE: SessionBundle is now deprecated and we plan to end official support in the upcoming 1.0 release. Please move to use SavedModel.
- Multi-model batch scheduling: interleaveing batches for different models.
- Registry of servable types for Model Server to handle ones other than SessionBundle/SavedModel, including third-party ones not in TF-Serving codebase.
- Resource management: using model size estimates to avoid exceeding server memory capacity.
  Concurrent model loading & fast initial load.
- Request logging:
  - A protobuf based logging API.
  - Provides ability for users to log a configurable sample, or all, of the queries served.
- Support querying named signatures.

Other:
- Assembled core manager setup code into a ServerCore object.
- Various bug fixes.
- Documentation updates.
",50461701
382,False,False,2016-03-30T17:53:02Z,2016-03-30T17:58:32Z,"This release adds Docker support, and an end-to-end Inception tutorial. It also makes various minor fixes and clean-ups to code and documentation.

New features:
- Dockerfile and README for building a container with a TensorFlow Serving development environment.
- End-to-end example and tutorial for serving an InceptionV3 model in Kubernetes.
- Jenkins continuous integration.
- DynamicManager re-tries failed servable load attempts.
- Utility to wait until a manager has loaded certain servables.
- Utility for tracking the states of servables in a manager, by listening for servable state changes on an event bus.
- Modules for managing servable resources (but not yet integrated into DynamicManager).
- Add GetNamedSignature() to signatures, independent from any signature type.
- Misc. additions to util/.

Compatibility:
- Exporter supports both python 2.7 and python 3.4.
- Migrate to gRPC 0.13.
- Migrate to latest TensorFlow and TF-Models submodules.

Bug fixes:
- Allow importing graphs with no variable nodes.
- Misc small documentation bug-fixes.

Clean-ups:
- Depend on gRPC via a Bazel git repository, rather than via a git submodule.
- Eliminate the batching sub-namespace.
- Misc small code clean-ups.
- Misc minor documentation clean-ups.
",50461701
383,False,False,2016-02-13T00:04:12Z,2016-02-16T17:05:22Z,"TensorFlow Serving 0.4.0: initial public release.
",50461701
384,False,True,2019-05-09T12:55:02Z,2019-05-09T13:21:09Z,"### Added
- Conan build system
  - Major refactoring of how IncludeOS is built
  - Multiple ARCH is managed by Conan profiles and dependencies
  - 3rd party dependencies are now built and managed in Jenkins. All recipes can be found [here](https://github.com/includeos/conan)
    - Updated to libcxx, libcxxabi 7.0.1
    - Updated to GSL 2.0.0
  - Stable and latest binary packages can be found in [bintray](https://bintray.com/includeos/includeos)
  - A repo to install Conan configs for IncludeOS: [conan_config](https://github.com/includeos/conan_config)
  - Improvements to Jenkins integration, automatic uploads of latest/stable packages on master-merge/tags
- Experimental IPv6 (WIP) including SLAAC
  - IPv6/IPv4 dual stack integration
  - TCP/UDP client / server
  - Autoconfiguration with SLAAC
  - Configuration with config.json - see [#2114](https://github.com/includeos/IncludeOS/pull/2114)
- HAL (work in progress)
  - The OS is now backed by a common Machine structure that makes it easier to create new ports
  - A custom C++ allocator is available very early allowing the use of STL before libc is ready

### Changed
- Updates to workflow. All documented in the [README](README.md)
  - No more need for `INCLUDEOS_PREFIX` in env variables
  - Removed ARCH as part of the path to libraries/drivers/plugins/etc
    - Drivers and Plugins can be created outside includeos
- Moved IncludeOS repository from `hioa-cs` to `includeos` organization
- Major breaking changes in the OS API, in particular the OS class is removed, replaced with a smaller os namespace. Much of the code moved to new `kernel::` namespace.
- Relocated plugins/libraries/scripts:
  - [Hello World example](https://github.com/includeos/hello_world)
  - [Demos and examples](https://github.com/includeos/demo-examples)
  - [Mana](https://github.com/includeos/mana)
  - [Uplink](https://github.com/includeos/uplink)
  - [Vmrunner](https://github.com/includeos/vmrunner)
  - [Diskbuilder](https://github.com/includeos/diskbuilder)
  - [Vmbuild](https://github.com/includeos/vmbuild)
  - [MicroLB](https://github.com/includeos/microlb)

### Removed / archived
- Cleanup of unused/outdated scripts
  - `install.sh` is gone as it does no longer work with the Conan workflow
- mender client is [archived](https://github.com/includeos/mender)",21562567
385,False,True,2019-04-04T12:30:28Z,2019-04-04T12:55:07Z,"Fixes a security issue where the stack protector is not properly initialized. Stack protector is now initialized using a proper rng at boot time and this patch improves how our rng is seeded, now requiring `rdrand` or `rdseed` instructions as entropy sources to be present at boot by default, unless this requirement is explicitly disabled.

Huge thanks to Spencer Michaels and Jeff Dileo of NCC Group who first reported this issue and to Jeff who helped us come up with this patch set.
",21562567
386,False,True,2019-01-24T08:59:33Z,2019-01-24T09:56:43Z,"We’ve experienced issues with running out of memory due to lack of a way to limit speed/memory consumption in TCP. This happened when using our load balancer on links with different speed. This release mainly consists of fixes to this issue (and other issues found along the way).

### What’s new:
* Our own implementation of `std::memory_resource` to be used with the C++17 concept [polymorphic_allocator](https://en.cppreference.com/w/cpp/memory/polymorphic_allocator)
  * `Pmr_pool` and `Pmr_resource` keep track and limits the amount of bytes an allocator can allocate.
  * The implementation is very flexible and let us improve and make a more sophisticated memory solution down the road
* Changed our byte vector used around the OS (mainly TCP) to use polmorphic_allocator 
  * `using buffer  = std::pmr::vector<uint8_t>`
* Each TCP stack now have its own assigned memory pool (`Pmr_pool`), and each TCP connection now gets assigned its own resource (`Pmr_resource`)
  * Assigning memory to a TCP stack is done with `set_total_bufsize(const size_t size)` (default is set to 64MB)
* TCP connection no longer reports a static receive window, but instead a dynamic one based on how much memory used up in its resource
  * This helps throttling the connection when buffers aren’t released quickly enough, and avoids buffering more than the memory limit
* Added new `on_data()` callback to TCP connection with support functions `read_next()` and `next_size()`
  * Triggered every time new data is ready to be read (use `read_next()` on connection to retrieve)
  * Solves the issue of buffering having to be implemented on top - this is now done in the connection
  * Use either on_read or on_data depending on use case - as today, on_read has priority over on_data
  * The same functions are now also exposed in the `net::Stream` interface
* New TLS stream implementation and stream buffer class
  * Now utilizes the `on_data()` callback instead of on_read
  * Manages congestion and memory allocations for encryption better
* Various fixes and improvements in TCP
* MicroLB hardening, improvements and fixes

",21562567
387,False,True,2018-11-02T14:44:12Z,2018-11-05T13:50:29Z,"### Major features:
* Replaced newlib libc with musl libc - which includes POSIX
* Added a linux syscall layer to be compatible with musl
* TCP SACK option support (receiver side)

*Read more about our Linux compatibility [here](http://www.includeos.org/blog/2018/musl.html).*

### Minor features:
* Stateful TCP conntrack module
* New memory allocator as backend for mmap
* VFS plugin and config support
  * Now used to mount file descriptors for POSIX support - utilized by RNG and Syslog
* Timestamp plugin for stdout
* Statman and Bufferstore rewritten to use more modern C++
* Many features added to Linux platform (LTO, PGO, callstack generation etc.)

### Compatibility:
* Boot and vmrunner now supports solo5

### Experimental:
* New IPv6 implementation. Currently a work in progress
  * Including TCP API support
* MLDv2 and NDP (not finished)

### Fixes:
* Fixed a flag in vmxnet3 restricting it from receiving VLAN tagged frames
* DNS client hardening

### Other:
* TCP buffer sizes is now set per stack (and not per connection)
* DHCP now continues “forever” (but with less frequency)
* `net::Socket` is now using union address `net::Addr` which contains either a IPv4 or IPv6 address - many calls has now been replaced with net::Addr
* Print last received packet on panic
* Updated NaCl version
  * Timer type added, which makes it possible to have the service print a timestamp or information about memory, CPU and more at a set interval
  * New implementation under the hood, where each NaCl type can register into the transpiler dynamically
  * Updates to the Iface type which now incorporates the Vlan type (Vlan as its own type has been removed) 
  * Iface members added: `buffer_limit` and `send_queue_limit`
* Updated solo5 version
",21562567
388,False,True,2018-01-17T10:19:35Z,2018-01-29T07:34:37Z,IncludeOS v0.12.0-rc.2 with new bundles,21562567
389,False,True,2017-10-13T11:32:03Z,2017-10-13T11:51:04Z,"### Major features:
* LiveUpdate.  [Example](https://github.com/hioa-cs/IncludeOS/tree/master/examples/LiveUpdate), [blog post on liveupdate](http://www.includeos.org/blog/2017/liveupdate.html)
* Solo5 / ukvm support. [Example](https://github.com/hioa-cs/IncludeOS/blob/master/test_ukvm.sh), [Solo5/uvkm blog post](http://www.includeos.org/blog/2017/includeos-on-solo5-and-ukvm.html)
* WebSockets [Example](https://github.com/hioa-cs/IncludeOS/tree/master/examples/websocket)
* Built-in auto configuration of services using config.json. [Example](https://github.com/hioa-cs/IncludeOS/blob/master/examples/websocket/config.json)

### Multiarch / multiplatform:
* 64-bit support, now default. [IncludeOS 64-bit blog post](http://www.includeos.org/blog/2017/includeos-is-now-64bit.html)
* 32-bit chainloader for use with boot tool
* Reorganized for multiple platforms

### Networking:
* Support TCP options/features; Timestamp & Window Scaling (RFC 7323) and Delayed ACK
* Path MTU Discovery, RFC 1191 (IPv4) and partly RFC 1981 (IPv6). Disabled by default until more thoroughly tested in the wild. See [the unit test for example](https://github.com/hioa-cs/IncludeOS/tree/master/test/net/unit/path_mtu_discovery.cpp)
* Kernel hooks for filter chains. Will enable upcoming firewall / NAT functionality.
* Support for Virtual IPs in Inet and TCP
* Support for partial IP/TCP checksumming
* DNS Client caching.
* Inet Domain Name support.

### Utilities:
* Fixed size version of MemBitmap - allocates and owns storage.
* CMake now supports additional arguments (see #1404)
* CMake option for what CPU features to compile for.
* CRC64 and base64 implementations by @RicoAntonioFelix
* Script to easily [run IncludeOS instances in VMware](http://blog.includeos.org/2017/04/04/running-includeos-unikernels-with-vmware)

### Fixes:
* Time is now the same as the hosts time on all supported cloud vendors and hypervisors.
* Port_util now works correctly.

Extra special thanks to @RicoAntonioFelix for innumerable improvements, and to @dfct for help with TCP cleanup.",21562567
390,False,True,2017-05-21T09:48:19Z,2017-05-21T10:18:34Z,All dependencies should now be built without redzone,21562567
391,False,True,2017-04-04T12:59:11Z,2017-04-04T13:30:46Z,"cxxabi is now being built out of the LLVM source tree, invalidating previous bundles.  This IncludeOS dependency release adds a new dependency bundle, improved scripts for building the bundle and newlib updated to the latest version. 

**Update:**
We've added another bundle which contains 64bit builds of all deps as well, for upcoming x86_64 support.",21562567
392,False,True,2017-03-16T12:16:37Z,2017-03-16T12:32:02Z,"### Partial POSIX support
* Blocking sockets
* Syslog
* Tar/gzip
* Read only file support (read, open, stat, seek etc.)

### Replaced old build system with **CMake**
Extra special thanks to @andreashappe for getting us started!

### HTTP 1.1 support
* HTTP server functionality
* Simple, highly usable HTTP client

### Monorepo
All IncludeOS subprojects moved into main IncludeOS repo, including:
* Mana Web Application Framework
* Acorn Web Appliance service 

### Other notable features
* VFS (Virtual file system)
* System RNG (Thanks, @randombit!)
* Boot with Grub (Thanks @sarum90!)

### Utility classes
* CRC32 checksumming
* Fixed queue
* Path to regex
* URI support
* Syslogd with RFC5424 over UDP plugin
* TAR support, including gzip support with the help of uzlib.

### Dependencies
* http-parser - Efficient http parsing
* rapidjson (optional)
* uzlib 
* python-psutil
* python-jsonschema

### Tools
* Diskbuilder: Easily create and link a memdisk with the content of a directory
* boot tool: Python program to easily boot IncludeOS services",21562567
393,False,True,2016-09-01T18:15:13Z,2016-10-13T13:23:44Z,"### Platform support
- OpenStack support using IDE boot device
- Injectable support for platform specific protocols, like Unik instance registration

### Instrumentation
- Backtrace from ELF symbols
- Context buffer for crashes
- Real-time stack sampling for profiling

### Boot
- Stack and heap randomization
- Multiboot support

### Kernel features
- ACPI tables, ACPI shutdown
- xAPIC support
- Basic SMP support
- MSI-X support
- APIC timer
- Memory map of named, fixed memory ranges
- Improved timer system
- RTC that is auto-calibrated and inexpensive
- New driver injection system
- Statman: centrally located statistics for anything

### Networking
- Inet4 is now driver independent
- TCP modularized with lots of API changes and improvements

### Tooling and testing
- Building kernel with minimal code and stripped symbols
- Improvements to install scripts
- Automatic builds using Jenkins for PRs and main branches
- New automatic test suite for unit testing, using LEST

### Misc
- IPv4 addresses can now be created from string
- Code refactoring to make use of new C++ features and Core Guidelines
- Lots of bugfixes
",21562567
394,False,True,2016-09-05T22:16:55Z,2016-10-13T13:22:18Z,"- Fixed DHCP
- Relaxed too strict IP filter
- Major improvement to testrunner
- Various bugfixes and minor improvements
",21562567
395,False,True,2016-09-08T14:43:02Z,2016-10-13T13:21:15Z,"- Fixed CPU usage issue caused by PIT timeouts
- Added optional file system caching
- Various fixes and cleanups.
",21562567
396,False,True,2016-10-13T11:31:49Z,2016-10-13T13:03:58Z,"### Distro support
- Support for Arch (@GuzTech)
- Support for Fedora (@andreashappe)
- Support for LinuxMint (@h4tr3d)

### Examples
- 256-color mode VGA (@lefticus)
- Snake rewrite (@Voultapher)

### Kernel
- Stack switching utility (context). Create and use custom area in memory as
  stack for a provided delegate.
- CPUID (@gurka). Includes KVM feature support

### Misc
- Minor fixes and refactoring (@RicoAntonioFelix)
- Move ELF symbols (yet again) into its own section, but pre-pruned
- Further reductions in binary sizes
- Move stack to the old 640k conventional memory hole, reducing memory usage
- Updated logotype and READMEs

### Heap debugging
- Validate new and frees
- Buffer overflow checks (@gurka)
- Verbose mode for tracking allocations

### Utility
- Added Logger - ring buffer log utility
- Added Timer - makes it easier to start, stop and restart a task

### Profiling
- Add mode toggle for stack sampler allowing Switch between caller mode
  (show who calls function) and current mode (show current function).

### Networking
- Packet now travels through the network stack as a unique_ptr instead of
  shared_ptr (avoiding control block allocation)
- Isolated network layering a bit by moving ethernet address to hw::MAC_addr
- TCP optimizations
  - Fixed bug where read would result in double free
  - No longer sets up default callbacks, saving allocations
  - Minor reduction in size

### Testing
- Improvements to test automation
",21562567
397,False,True,2016-06-22T07:32:50Z,2016-06-22T07:38:12Z,"A few bugs were found and fixed after running a new stress test. The OS seems very stable now, having survived a continous flood of Arp, ICMP and HTTP packets, run in parallel over ~9 hours. The VM showed no signs of having problems and gave a HTTP request rate of 3327.1 conn/s. after the flood had ended.

### Test results:
- **Ping-flood:** `$ sudo ping -f 10.0.0.42`
  `101095327 packets transmitted, 101095294 received, 0% packet loss, time 31206908ms`
- **Arp-flood:** `$ sudo arping -w 100 10.0.0.42`
  `1715415846 packets transmitted, 857201224 packets received, 50% unanswered (0 extra)`
- **httperf:** `$ time httperf --hog --server 10.0.0.42 --num-conn 100000000` 

```
Total: connections 382691 requests 382690 replies 382690 test-duration 31343.418 s` 
...
Errors: total 0 client-timo 0 socket-timo 0 connrefused 0 connreset 0
Errors: fd-unavail 0 addrunavail 0 ftab-full 0 other 0

real    522m53.450s
user    74m18.515s
sys     448m57.559s
```

The connection rate on http was very poor, 12.2 req/s., but I guess that’s quite understandable. Asking httperf to do a 100 million requests as fast as it possible will very likely just suck up all the available outgoing sockets / file descriptors.
- **VM diagnostics:**
  `Current memory usage: 1122304 b, (1.122304 MB)`
  `Recv: 23726780 Sent: 277016620`

### Experiment details:
- The three tests were run individually in parallell, from separate processes / screens, towards the same, singular VM with one CPU core. The tests were stopped manually after having run overnight.
- After ending the flood, without restarting the VM, it gave the following response:
  `$ time httperf --hog --server 10.0.0.42 --num-conn 1000`

```
Connection rate: 3327.1 conn/s (0.3 ms/conn, <=1 concurrent connections)
Connection time [ms]: min 0.3 avg 0.3 max 1.6 median 0.5 stddev 0.0
Connection time [ms]: connect 0.2
Connection length [replies/conn]: 1.000

Request rate: 3327.1 req/s (0.3 ms/req)
Request size [B]: 62.0

Reply rate [replies/s]: min 0.0 avg 0.0 max 0.0 stddev 0.0 (0 samples)
Reply time [ms]: response 0.1 transfer 0.0
Reply size [B]: header 234.0 content 489.0 footer 0.0 (total 723.0)
Reply status: 1xx=0 2xx=1000 3xx=0 4xx=0 5xx=0

CPU time [s]: user 0.09 system 0.21 (user 29.5% system 70.2% total 99.7%)
Net I/O: 2553.3 KB/s (20.9*10^6 bps)

Errors: total 0 client-timo 0 socket-timo 0 connrefused 0 connreset 0
Errors: fd-unavail 0 addrunavail 0 ftab-full 0 other 0
```

_NOTE: We've seen much higher connection rates on other platforms (e.g. 16000 conn/s. has been reported), so the numbers above should not be taken as measure of IncludeOS performance._
",21562567
398,False,True,2016-06-08T22:03:26Z,2016-06-08T22:29:54Z,"## Block device, filesystem and memdisk
- Finished filesystem interface with sync and async calls
- Support for custom filesystems
- FAT 12/16/32 filesystem implementation
- Added the Memdisk disk device, linked in as binary section
- Added Virtio Block device driver
- Added Virtio Console device driver
- Automated MemDisk builder from disk image file
- Async class for automatic handling of async file transfers

## TCP - more or less complete rewrite
- State logic is now separated into classes
- ""Socket"" replaced with ""Connection"".
- Fully implemented RFC 793 ""TransmissionControl Protocol"".
- Retransmission, round trip time calculation (RFC 6298)
- Support options - MSS implemented.
- Congestion Control (New Reno) (RFC 5681 & 6582)
- Fixed checksum bug causing instability
- Send queue - queue several write requests which will be stored until fully acknowledged to be used for retransmission. Possible to avoid any copy by assigning a shared pointer to data.
- Fair packet distribution among connections.
- Packets with payload now released immediately after copying data once to a shared buffer, released to the user when subscribed.
- More events to subscribe to - OnConnect, OnDisconnect among others.

## Time
- Async timers, one-shot and repeating (using PIT)
- We finally have a wall clock! (RTC via CMOS)

## Test
- Added tests covering the major kernel and networking features
- New system for automating tests written in python
- Added support for LEST unit test framework (used in e.g. ./test/GSL)

## Misc
- UDP now has send queue to help maximize bandwidth
- Improvements in packet- and buffer-management increasing bandwidth
- Added an optional async terminal with TCP and Serial backend, support for Telnet
- C++ GSL now included with project, with some limited usage in the kernel
- New safer virtio interface with GSL
- Pretty boot
- Pretty boot screen
- Tons of bugfixes
- Updated to llvm 3.8, both libc++ and clang, also for OS X.

## Caveats:
- You currently can't use virtio-block devices together with virtio-net in Qemu, as they'll get the same IRQ number. This has been sorted in dev, but it's involved.
- The CMOS wall clock is super expensive - I counted about 200k cycles (!). This is because it has to do a lot of single-byte in- and out-instructions which all cause vm exits. We're working on a better way to keep time, possibly synchronizing with CMOS only now and then.

## Up next:

On our dev-branch we've replaced the classic PIC-based interrupt system with APIC / IOAPIC and MSI-x. We expect this to give a major boost to resource efficiency and it does make it possible to run virtio-net together with virtio-block. We're also working on a lot of web service stuff, but that's mostly in stealth-mode as of yet - we'll open it up when we have something we think you'll like.

Thanks a lot to the budding community of contributors - we have a long way to go but it feels like we're getting somewhere :-)
",21562567
399,False,True,2016-05-22T19:13:07Z,2016-05-22T19:44:27Z,"Detailed release notes will come with the actual release.
",21562567
400,False,True,2016-03-08T21:42:32Z,2016-03-08T23:42:27Z,"Detailed release notes will come with the actual release. 
",21562567
401,False,True,2015-12-01T19:52:55Z,2015-12-01T20:05:25Z,"In this pre-release:  
- DHCP 
- ARP-resolution 
- UDP Sockets (TCP sockets will be changed to match) 
- New network buffer management system 
- Rewritten the Dev-class with templatized getters 
- Improved virtualbox run-script (etc/vboxrun.sh) 
- Jenkins integration 
- VGA output (somewhat sketchy - rely on the serial port) 
- Successful build on Apple OSX (try ./etc/install_mac.sh) 
- Lots of cleanups, and pretty printing 
- Apache v2.0 license
",21562567
402,False,True,2015-11-03T14:21:12Z,2015-11-03T14:42:34Z,"- **Partial TCP** - enough to show a static webpage
- **Asynchronous timers** using the PIT (Polite ones - no context switches). You'll find them in ""class_pit.hpp"".
- **Major directory structure cleanup**, mostly split contents in ./src into folders.
- **Lots of work towards IPv6**
- **VirtualBox support** is back - but note, ARP is not done, so don't expect proper networking.
- **Install-script finally works - way differently**
  - We now install to - and build from $HOME/IncludeOS_install. Much better than installing by default to `/usr/local/IncludeOS/`. You can move that folder anywhere - just update the first line in the makefiles. (Yes, environment vars are probably what we'll do later, but we're also getting a package manager...)
  - The contents of the install-folder gets gzipped into a binary release bundle. This bundle can be extracted as-is, and there you have everything you need to build IncludeOS  (except for local dependencies such as clang). No need to build a cross-compiler!
",21562567
403,False,True,2015-09-09T21:18:43Z,2015-10-28T13:50:52Z,"Finally you can throw and catch all the exceptions you like. We don't explicitly throw any inside the kernel, but containers might.  You can also use `std::cout <<  ""standard strings"" << std::endl`, maps, vectors, lambdas etc.

**NOTE:**
- We still don't have threads, so no `std::async`. 
- Locale-stuff is pretty much duct-taped in - newlib doesn't have proper support
- No timers yet, but we're working on it, towards the TCP milestone.
- Binary sizes increase pretty drastically - ""Hello world"" is currently at about 500Kb. As a consequence, we'll probably add EASTL back in as a module, and make an optional build-path for that.
- `long double` math functions are not implemented - the interface is there to satisfy the `cmath` header, but no implementation. We think this is better than just using them as wrappers around the `double` versions - which you can use.
",21562567
404,False,True,2014-10-30T18:11:24Z,2015-10-28T13:51:00Z,"Since `alpha` usually means a release, and we haven't released anything yet, we'll call all versions up to the first actual release `vMajor.Minor.Patch-proto`. We decided earlier that [semantic versioning](http://semver.org/) is nice, even before we release anything, so expect a lot of major versions, since we're going to redo the API all the time.

New in this version:
- Standalone IP stack (so you can't get an IP stack instance via the interface anymore, which is an API change, and consequently this is a new Major release)
- IncludeOS now answers to ping
- There is a dedicated `test` folder which will build images named after the latest commit, or `DIRTY`
- The IP stack is called `Inet`, and everything network related is in the namespace `net`
- The UDP-service in `./examples/basic_udp` will assign itself an IP based on the mac-address assigned to it from Qemu. Later this conversion will also be used reversly, in Arp.
- We have a module system under way, and SQLite is the first module (it doesn't work yet)
",21562567
405,False,True,2014-10-23T09:34:33Z,2015-10-28T13:51:12Z,"Dangers:
-  Network buffers are not robust - if you spam the service with lots of UDP packets with no delay, it will break.
- The whole service loads into the first MB of memory, and expands from there, ignoring things like video memory
",21562567
406,False,True,2014-09-13T21:21:05Z,2015-10-28T13:51:19Z,"- The OS now builds into a static library, `os.a`, which gets installed for re-use. This also has the effect of allowing the linker to only extract the OS-objects required by the service. 
- A new service can be created by copying the `./seed`, which contains everything necessary to start developing. 
- The ""public"" ABI is separated from the OS-specific headers.
",21562567
407,False,True,2014-08-27T20:30:00Z,2015-10-28T13:49:55Z,"- The bootloader now loads the image in 32-bit code using LBA-mode (no bios-calls, no CHS)
- newlib is ported and works nicely so far (printf, malloc etc.) - but syscalls are only stubs. 

Still a lot of issues, but at least now we can print hexadecimal values:-)
",21562567
408,False,False,2020-01-21T08:29:59Z,2020-01-28T13:12:48Z,"The libvips Windows binary `vips-dev-w64-all-x.y.z.zip` contains ALL the file format loaders that libvips supports, including some very minor ones, and a complete copy of ImageMagick. It can process many different file types, but it is also rather vulnerable to hacking.

The `vips-dev-w64-web-x.y.z.zip` build contains only file format loaders that have been carefully tested and which are commonly used on the web. It won't load formats like openslide (for example), but it should be safer to use with untrusted input.

Changes since 8.9.0:

- fix new_from_file for openslide from CLI and C
- fix thumbnail autorot [janko]
- fix a warning with magicksave with no delay array [chregu]
- fix a race in tiled tiff load [kleisauke]
- better imagemagick init [LebronCurry]
- lock for metadata changes, fixing a race in highly threaded applications [jcupitt]
",1291410
409,False,False,2020-01-07T09:00:14Z,2019-12-09T07:47:03Z,"The libvips Windows binary `vips-dev-w64-all-x.y.z.zip` contains ALL the file format loaders that libvips supports, including some very minor ones, and a complete copy of ImageMagick. It can process many different file types, but it is also rather vulnerable to hacking.

The `vips-dev-w64-web-x.y.z.zip` build contains only file format loaders that have been carefully tested and which are commonly used on the web. It won't load formats like openslide (for example), but it should be safer to use with untrusted input.

See [this blog post](https://libvips.github.io/libvips/2019/12/11/What's-new-in-8.9.html) for a summary of the new features in 8.9.

Changes since 8.8:

- add vips_image_get/set_array_int()
- disable webp alpha output if all frame fill the canvas and are solid
- support arrays of delays for animated images [deftomat]
- add ""unlimited"" flag to svgload
- disable webp alpha output if all frames fill the canvas and are solid
- add ""compression"" option to heifsave [lovell]
- support webp and zstd compression in tiff
- loaders use ""minimise"" to close input files earlier
- integrate support for oss-fuzz [omira-sch]
- add vips_switch() / vips_case() ... fast many-way ifthenelse
- better const handling for arithmetic operators fixes comparisons against out  of range values
- sharpen restores input colourspace 
- handle alpha in heifload / heifsave [meyermarcel]
- add @interpretation and @format to rawload
- nifti load/save uses double for all floating point metadata
- add vips_error_buffer_copy()
- add VipsSource and VipsTarget: a universal IO class for loaders and savers
- jpeg, png, tiff (though not tiffsave), rad, svg, ppm and webp use the new IO class
- rewritten ppm load/save is faster and uses less memory
- add @no_strip option to dzsave [kalozka1]
- add iiif layout to dzsave
- fix use of resolution-unit metadata on tiff save [kayarre]
- support TIFF CIELAB images with alpha [angelmixu]
- support TIFF with premultiplied alpha in any band 
- block metadata changes on shared images [pvdz]
- RGB and sRGB are synonymous

",1291410
410,False,False,2019-11-28T16:39:25Z,2019-12-05T16:47:16Z,"The libvips Windows binary `vips-dev-w64-all-x.y.z.zip` contains ALL the file format loaders that libvips supports, including some very minor ones, and a complete copy of ImageMagick. It can process many different file types, but it is also rather vulnerable to hacking.

The `vips-dev-w64-web-x.y.z.zip` build contains only file format loaders that have been carefully tested and which are commonly used on the web. It won't load formats like openslide (for example), but it should be safer to use with untrusted input.

Changes since 8.8.3:

- improve compatibility with older imagemagick versions
- remove realpath, since it can fail on systems with grsec
- block metadata changes on shared images [pvdz]

",1291410
411,False,False,2019-09-16T15:59:52Z,2019-09-16T16:02:43Z,"The libvips Windows binary `vips-dev-w64-all-x.y.z.zip` contains ALL the file format loaders that libvips supports, including some very minor ones, and a complete copy of ImageMagick. It can process many different file types, but it is also rather vulnerable to hacking.

The `vips-dev-w64-web-x.y.z.zip` build contains only file format loaders that have been carefully tested and which are commonly used on the web. It won't load formats like openslide (for example), but it should be safer to use with untrusted input.

vips-8.8.3a.tar.gz is just vips-8.8.3.tar.gz, but with a single test removed to help it pass with a wider range of librsvg versions.

Changes since 8.8.2:

- revert sharpen restoring the input colourspace
- xres/yres tiffsave params were in pixels/cm [f--f]

",1291410
412,False,False,2019-08-30T10:00:25Z,2019-08-30T10:22:01Z,"The libvips Windows binary `vips-dev-w64-all-x.y.z.zip` contains ALL the file format loaders that libvips supports, including some very minor ones, and a complete copy of ImageMagick. It can process many different file types, but it is also rather vulnerable to hacking.

The `vips-dev-w64-web-x.y.z.zip` build contains only file format loaders that have been carefully tested and which are commonly used on the web. It won't load formats like openslide (for example), but it should be safer to use with untrusted input.

Changes since 8.8.1:

- better early shutdown in readers
- don't attempt to save large XMP to jpeg [tnextday]
- always fetch HEIC metadata from the main image [zhoux2016]
- fix loop in malformed ppm [Kyle-Kyle]
- better support for PNGs with long comment names
- fix build with GM
- add locks for pdfium load
- fix build with MSVC 
- fix a problem with shinkv tail processing [angelmixu]
- fix a read one byte beyond buffer bug in jpegload
- make GIF parsing less strict
- better feof() handling in GIF load
- clip coding and interpretation on vips image read
- check image bounds for GIF load
- prevent over-pre-shrink in thumbnail [kleisauke]
- fix sharpen with sigma 0.5 [2h4dl]
- sharpen restores input colourspace
- verify bands/format for coded images
- improve data_length handling for jpeg metadata
",1291410
413,False,False,2019-07-07T10:20:28Z,2019-07-07T11:30:30Z,"vips-8.8.1a.tar.gz is just vips-8.8.1.tar.gz, but with a single test removed to help it pass with a wider range of librsvg versions.

The libvips Windows binary `vips-dev-w64-all-x.y.z.zip` contains ALL the file format loaders that libvips supports, including some very minor ones, and a complete copy of ImageMagick. It can process many different file types, but it is also rather vulnerable to hacking.

The `vips-dev-w64-web-x.y.z.zip` build contains only file format loaders that have been carefully tested and which are commonly used on the web. It won't load formats like openslide (for example), but it should be safer to use with untrusted input.

Changes since 8.8.0:

- improve `realpath()` use on older libc
- better `magickload` error messages
- more consistent behaviour for `page-height` metadata
- fix for `composite` with many small images and some combinations of blend modes
- fix memleak in tiff pyr save to memory [scossu]
- `istiff` attempts to read the first directory rather than just testing the magic number [przemyslawpluta]
- much faster `ismagick()` [jcupitt]
- better behaviour for `vips_region_fetch()` if request lies partly ouside image
- remove 256 band limit in arithmetic.c [erdmann]
- disable Orc if building with CET [lovell]
- fix `vipsthumbnail` with pyr tiff [kleisauke]
- text autofit could occasionally terminate early [levmorozov]
- fewer warnings on `tiffload` [chregu]
- `vips_resize()` breaks aspect ratio and limits shrink to prevent <1px dimensions [lovell]
",1291410
414,False,False,2019-05-14T12:10:45Z,2019-05-21T15:16:54Z,"No changes from rc3.

The libvips Windows binary `vips-dev-w64-all-x.y.z.zip` contains ALL the file format loaders that libvips supports, including some very minor ones, and a complete copy of ImageMagick. It can process many different file types, but it is also rather vulnerable to hacking.

The `vips-dev-w64-web-x.y.z.zip` build contains only file format loaders that have been carefully tested and which are commonly used on the web. It won't load formats like openslide (for example), but it should be safer to use with untrusted input.

See [this blog post](https://libvips.github.io/libvips/2019/04/22/What's-new-in-8.8.html) for a summary of the new features in 8.8. 

Changes since 8.7.4

- much faster smartcrop [lovell]
- add low/high to smartcrop [jcupitt]
- add XMP support to png read/write [jcupitt]
- deprecate thumbnail auto_rotate, add no_rotate [jcupitt]
- implement thumbnail shrink-on-load for openslide images [jcupitt]
- add animated webp support [jcupitt]
- revise vips_cast() to improve behaviour with uint images [erdmann]
- add bandand()/or()/eor() to cplusplus binding [clcaalu]
- implement shrink-on-load for tiff pyramids [jcupitt]
- added vips_image_set_blob_copy() [jcupitt]
- don't stop composite on first non-transparent image [felixbuenemann, GDmac]
- add vips_rect_overlapsrect()
- composite is much faster at positioning subimages
- stop tiff pyr layers if width or height drop to 1 [gvincke]
- dzsave has a new skip_blanks option
- add vips_CMYK2XYZ() and vips_XYZ2CMYK(), plus associated routes 
- include cmyk and srgb fallback profiles
- add vips_profile_load() and use it everywhere
- fix race in temp filename creation [lhecker]
- add @reduction_effort param to webpsave [lovell]
- add @option_string param to thumbnail_buffer [kleisauke]
- add XMP, IPCT, ICC, EXIF etc. support to magickload/magicksave
- much lower memuse for gifload
- tilecache speedups
- add vips_heifload(), vips_heifsave()
- add heif thumbnail support to vips_thumbnail()
- free threadpool earlier, reducing mem growth for some long-running processes [jtorresfabra]
- add vips_region_fetch() / _width() / _height() for language bindings
- vips_text() supports justification
- move vips_image_set_kill() and iskilled() to the public API
- dzsave to szi sets suffix correctly [martinweihrauch]
- dzsave szi writes ""scan-properties.xml""
- add vips_image_(get|set)_image()
- add openslideload option to attach all associated images as metadata
- dzsave to szi will write all associated images
- remove old c++ and python interfaces
- vipsthumbnail can thumbnail animated and multipage images
- much better Windows build [kleisauke]",1291410
415,False,False,2019-01-18T12:52:04Z,2019-01-18T13:26:21Z,"`vips-x.y.x.tar.gz` is a source tarball containing a complete build system. Download this to build from source.

The libvips Windows binary `vips-dev-w64-all-x.y.z.zip` contains ALL the file format loaders that libvips supports, including some very minor ones, and a complete copy of ImageMagick. It can process many different file types, but it is also rather vulnerable to hacking.

The `vips-dev-w64-web-x.y.z.zip` build contains only file format loaders that have been carefully tested and which are commonly used on the web. It won't load formats like openslide (for example), but it should be safer to use with untrusted input.

Changes since 8.7.3:

- zero memory on allocate to prevent write of uninitialized memory under some error conditions [Balint Varga-Perke]
",1291410
416,False,False,2019-01-04T08:38:58Z,2019-01-04T09:29:42Z,"The libvips Windows binary `vips-dev-w64-all-x.y.z.zip` contains ALL the file format loaders that libvips supports, including some very minor ones, and a complete copy of ImageMagick. It can process many different file types, but it is also rather vulnerable to hacking.

The `vips-dev-w64-web-x.y.z.zip` build contains only file format loaders that have been carefully tested and which are commonly used on the web. It won't load formats like openslide (for example), but it should be safer to use with untrusted input.

Changes since 8.7.2:

- fix infinite loop for autofit with non-scaleable font 
- mapim was not offsetting by window offset [erdmann]
- better rounding for scale [kleisauke]
- fix a memleak in magick6load [kleisauke]",1291410
417,False,False,2018-12-05T14:24:26Z,2018-12-05T17:43:48Z,"The libvips Windows binary `vips-dev-w64-all-x.y.z.zip` contains ALL the file format loaders that libvips supports, including some very minor ones, and a complete copy of ImageMagick. It can process many different file types, but it is also rather vulnerable to hacking.

The `vips-dev-w64-web-x.y.z.zip` build contains only file format loaders that have been carefully tested and which are commonly used on the web. It won't load formats like openslide (for example), but it should be safer to use with untrusted input.

Changes since 8.7.1:

- more info output for temp files to help diagnose problems
- vips_text() could set the wrong DPI in autofit mode
- vips_text() leaked in autofit mode",1291410
418,False,False,2018-11-05T10:40:51Z,2018-11-05T12:13:53Z,"The libvips Windows binary `vips-dev-w64-all-x.y.z.zip` contains ALL the file format loaders that libvips supports, including some very minor ones, and a complete copy of ImageMagick. It can process many different file types, but it is also rather vulnerable to hacking.

The `vips-dev-w64-web-x.y.z.zip` build contains only file format loaders that have been carefully tested and which are commonly used on the web. It won't load formats like openslide (for example), but it should be safer to use with untrusted input.

Changes since 8.7.0:

- update function list in docs [janko-m] 
- test for g_str_to_ascii() [jcupitt]
- fix temp file open on Windows and fallback on linux [lovell]
",1291410
419,False,False,2018-09-10T13:35:49Z,2018-09-19T14:12:11Z,"The libvips Windows binary `vips-dev-w64-all-x.y.z.zip` contains ALL the file format loaders that libvips supports, including some very minor ones, and a complete copy of ImageMagick. It can process many different file types, but it is also rather vulnerable to hacking.

The `vips-dev-w64-web-x.y.z.zip` build contains only file format loaders that have been carefully tested and which are commonly used on the web. It won't load formats like openslide (for example), but it should be safer to use with untrusted input.

See [this blog post](http://jcupitt.github.io/libvips/2018/07/26/What's-new-in-8.7.html) for a summary of the new features in 8.7. 

Changes since 8.6.5

- add magicksave, save image with libMagick [dlemstra]
- remove jpeg thumbnail from EXIF if ""jpeg-thumbnail-data"" has been removed by user
- hough_line scales width to 0 - 180, not 0 - 360
- hough_line is 4x faster
- hough_circle is 2x faster
- add vips_sobel() and vips_canny() edge detectors
- add vips_rotate() ... a convenience method for vips_similarity()
- svgload was missing is_a [lovell]
- better header sniffing for small files
- drop incompatible ICC profiles before save
- better hasalpha rules
- create funcs always make MULTIBAND (ie. no alpha)
- use O_TMPFILE, if available [Alexander--]
- set ""interlaced=1"" for interlaced JPG and PNG images
- add PDFium PDF loader
- jpegload adds a jpeg-chroma-subsample field with eg. 4:4:4 for no
  chrominance subsampling.
- tiffload, pdfload, magickload set VIPS_META_N_PAGES ""n-pages"" metadata item
- add fontfile option to vips_text() [fangqiao]
- add vips_transpose3d() -- swap major dimensions in a volumetric image
- remove vips7 stuff from default API ... you must now #include it explicitly
- added vips_argument_get_id() to fix derived classes on win32 [angelmixu]
- fix compile with MSVC 2017 [angelmixu]
- pdfload has a option for background 
- vips7 C++ interface defaults off
- make members, getters and operators ""const"" in cpp API
- composite has params for x/y position of sub-images [medakk]
- add Mitchell kernel
- pyramid builders have a choice of 2x2 shrinkers [harukizaemon]
- add `palette` option to pngsave [felixbuenemann]
- add basic nifti load/save support
- support writing string-valued fields via libexif
- paste in the test suite from pyvips
- get EXIF tag names from tag plus ifd [@Nan619]
- escape ASCII control characters in XML
- magickload now sniffs some file types itself

Changes since 8.7.0-rc3

- reduce stack in arithmetic ops to help musl
- add docs for mosaic output
- add vips7 compat for nifti load and save",1291410
420,False,True,2018-08-20T07:45:46Z,2018-08-20T08:08:08Z,"Release candidate for the upcoming v8.7.0. Changes since rc1:

- update radiance load from upstream
- mapim could fail for float index images with coordinates out of int range
- scale openexr alpha to 0 - 255
- close input earlier, when we can [kleisauke]
- add vips_object_get_args() for language bindings [kleisauke]
",1291410
421,False,True,2018-07-25T16:17:13Z,2018-07-25T16:39:39Z,"Final pre-release for the upcoming libvips 8.7.0. 

Changes since 8.6.5:


- add magicksave, save image with libMagick [dlemstra]
- remove jpeg thumbnail from EXIF if ""jpeg-thumbnail-data"" has been removed by
  user
- hough_line scales width to 0 - 180, not 0 - 360
- hough_line is 4x faster
- hough_circle is 2x faster
- add vips_sobel() and vips_canny() edge detectors
- add vips_rotate() ... a convenience method for vips_similarity()
- svgload was missing is_a [lovell]
- better header sniffing for small files
- drop incompatible ICC profiles before save
- better hasalpha rules
- create funcs always make MULTIBAND (ie. no alpha)
- use O_TMPFILE, if available [Alexander--]
- set ""interlaced=1"" for interlaced JPG and PNG images
- add PDFium PDF loader
- jpegload adds a jpeg-chroma-subsample field with eg. 4:4:4 for no
  chrominance subsampling.
- tiffload, pdfload, magickload set VIPS_META_N_PAGES ""n-pages"" metadata item
- add fontfile option to vips_text() [fangqiao]
- add vips_transpose3d() -- swap major dimensions in a volumetric image
- remove vips7 stuff from default API ... you must now #include it explicitly
- added vips_argument_get_id() to fix derived classes on win32 [angelmixu]
- fix compile with MSVC 2017 [angelmixu]
- pdfload has a option for background 
- vips7 C++ interface defaults off
- make members, getters and operators ""const"" in cpp API
- composite has params for x/y position of sub-images [medakk]
- add Mitchell kernel
- pyramid builders have a choice of 2x2 shrinkers [harukizaemon]
- add `palette` option to pngsave [felixbuenemann]
- add basic nifti load/save support
- support writing string-valued fields via libexif
- paste in the test suite from pyvips
- get EXIF tag names from tag plus ifd [@Nan619]
- escape ASCII control characters in XML
- magickload now sniffs some file types itself
",1291410
422,False,False,2018-07-22T18:07:56Z,2018-07-25T10:13:36Z,"The libvips binary `vips-dev-w64-all-x.y.z.zip` contains ALL the file format loaders that libvips supports, including some very minor ones, and a complete copy of ImageMagick. It can process many different file types, but it is also rather vulnerable to hacking.

The `vips-dev-w64-web-x.y.z.zip` build contains only file format loaders that have been carefully tested and which are commonly used on the web. It won't load formats like openslide (for example), but it should be much safer to use with untrusted input images.

Changes since 8.6.4:

- fix a buffer overflow in the tiff reader [HongxuChen]",1291410
423,False,False,2018-06-13T15:23:21Z,2018-06-13T15:40:39Z,"The libvips binary `vips-dev-w64-all-x.y.z.zip` contains ALL the file format loaders that libvips supports, including some very minor ones, and a complete copy of ImageMagick. It can process many different file types, but it is also rather vulnerable to hacking.

The `vips-dev-w64-web-x.y.z.zip` build contains only file format loaders that have been carefully tested and which are commonly used on the web. It won't load formats like openslide (for example), but it should be much safer to use with untrusted input images.

Changes since 8.6.3:

- better fitting of fonts with overhanging edges [Adrià]
- revise C++ example [fangqiao]
- strict round down on jpeg shrink on load [davidwood]
- configure test for g++ 7.2 and composite.cpp
- don't Ping in magickload, too unreliable
- ensure WebP can add metadata when compiled with libwebpmux [lovell]
- improve accuracy of vector path convolution [felixbuenemann]
",1291410
424,False,True,2018-06-10T15:58:05Z,2018-06-10T15:59:35Z,"Since 8.6:

- add magicksave, save image with libMagick [dlemstra]
- remove jpeg thumbnail from EXIF if ""jpeg-thumbnail-data"" has been removed by user
- hough_line scales width to 0 - 180, not 0 - 360
- hough_line is 4x faster
- hough_circle is 2x faster
- add vips_sobel() and vips_canny() edge detectors
- add vips_rotate() ... a convenience method for vips_similarity()
- svgload was missing is_a [lovell]
- better header sniffing for small files
- drop incompatible ICC profiles before save
- better hasalpha rules
- create funcs always make MULTIBAND (ie. no alpha)
- use O_TMPFILE, if available [Alexander--]
- set ""interlaced=1"" for interlaced JPG and PNG images
- add PDFium PDF loader
- add @format option to magickload
- jpegload adds a jpeg-chroma-subsample field with eg. 4:4:4 for no chrominance subsampling.
- tiffload, pdfload, magickload set VIPS_META_N_PAGES ""n-pages"" metadata item
- add fontfile option to vips_text() [fangqiao]
- add vips_transpose3d() -- swap major dimensions in a volumetric image
- remove vips7 stuff from default API ... you must now #include it explicitly
- added vips_argument_get_id() to fix derived classes on win32 [angelmixu]
- fix compile with MSVC 2017 [angelmixu]
- pdfload has a option for background 
",1291410
425,False,False,2018-03-08T13:11:54Z,2018-03-08T15:29:12Z,"The libvips binary `vips-dev-w64-all-x.y.z.zip` contains ALL the file format loaders that libvips supports, including some very minor ones, and a complete copy of ImageMagick. It can process many different file types, but it is also rather vulnerable to hacking.

The `vips-dev-w64-web-x.y.z.zip` build contains only file format loaders that have been carefully tested and which are commonly used on the web. It won't load formats like openslide (for example), but it should be much safer to use with untrusted input images.

- the `8.6.3-1` windows builds fix a crash in libz configuation
- use `pkg-config` to find libjpeg, if we can
- better clean of output image in `vips_image_write()` fixes a crash writing twice to memory
- better rounding behaviour in convolution means we hit the vector path more often
- fix a crash if a delayed load failed [gsharpsh00ter]
- icc_import attaches the fallback profile if it used it, making `vipsthumbnail` behaviour with untagged CMYK images saner",1291410
426,False,False,2018-01-31T20:45:14Z,2018-01-31T20:48:23Z,"- vips_sink_screen() keeps a ref to the input image ... stops a rare race
- fix a minor accidental ABI break in 8.6.0 -> 8.6.1 [remicollet]
- fix read of plane-separate TIFFs with large strips [remicollet]
- fix a C++ warning in composite.cpp [lovell]
- remove number of images limit in composite
- composite allows 1 mode ... reused for all joins
- fix race in vips_sink() for threaded read of sequential images",1291410
427,False,True,2018-01-28T17:23:05Z,2018-07-24T22:00:21Z,"- add magicksave, save image with libMagick [dlemstra]
- dzsave to szi sets suffix correctly [martinweihrauch]
- dzsave szi writes ""scan-properties.xml""
- add vips_image_(get|set)_image()
- add openslideload option to attach all associated images as metadata
- dzsave to szi will write all associated images",1291410
428,False,False,2018-01-03T10:39:44Z,2018-01-03T11:07:26Z,"- fix mmap window new/free cycling 
- fix some compiler warnings
- remove the 64-image limit on bandary operations
- better version date [bmwiedemann]
- bump wrapper script version [bgilbert]
- fix a memleak on error during jpeg buffer write [lovell]
- fix misspelling of IPTC as IPCT [lovell]
- seq could be set on small images opened in random-access mode [aferrero2707]
- fix small memleak in dzsave [lovell]
- small speedup for rgb->g [lovell]
",1291410
429,False,False,2017-12-07T14:51:07Z,2017-12-08T14:20:54Z,"See the [install notes](http://jcupitt.github.io/libvips/install.html) for guidance on which package to download.

## Changes since 8.5

- supports FITS images with leading non-image HDUs, thanks benepo
- add vips_image_new_from_image() and vips_image_new_from_image1() ... make a
  constant image
- add new_from_image() to Python as well
- slight change to cpp new_from_image() to match py/C behaviour
- vips_conv(), vips_compass(), vips_convsep() default to FLOAT precision
- add FORCE resize mode to break aspect ratio
- add vips_thumbnail_image()
- better prefix guessing on Windows, thanks tumagonx
- savers support a ""page_height"" option for multipage save
- rename 'disc' as 'memory' and default off
- add vips_find_trim(), search for non-background areas 
- remove lcms1 support, it had bitrotted
- `join` tagged as seq
- support tiffsave_buffer for pyramids, thanks bubba
- thumbnail and vipsthumbnail have an option for rendering intent, thanks 
  kleisauke 
- set file create time on Windows, thanks dlong500
- remove python tests ... moved to pyvips test suite
- vips7 and vips8 python bindings default to off ... use the new pyvips
  binding instead
- better svgload: larger output, handle missing width/height, thanks lovell
- add vips_gravity() ... embed, but with direction rather than position
- vips_text() can autofit text to a box, thanks gargsms
- add vips_composite() / vips_composite2(): merge a set of images with 
  a set of blend modes
- better gobject-introspection annotations, thanks astavale  
- vips_image_write() severs all links between images, when it can ... thanks
  Warren and Nakilon
- vector path for convolution is more accurate and can handle larger masks
- linear and cubic kernels for reduce are higher quality
- added vips_value_set_blob_free()
- ""--size Nx"" to vipsthumbnail was broken, thanks jrochkind 
- fix build with gcc 7
- add vips_fill_nearest() ... fill pixels with nearest colour
- add VIPS_COMBINE_MIN, a new combining mode for vips_compass()
- vips_hist_find_indexed() now has a @combine parameter
- vips_affine() and vips_similarity() have a ""background"" parameter
- fix nasty jaggies on the edges of affine output, thanks chregu
- add gif-delay, gif-comment and gif-loop metadata
- add dispose handling to gifload
- dzsave outputs extra right and bottom overlap-only tiles, for closer spec
  adherence
- deprecate the ""centre"" option for vips_resize(): it's now always on
- setting the EXIF data block automatically sets other image tags
- add ""extend"" option to affine; resize uses it to stop black edges
",1291410
430,False,False,2017-10-11T10:24:43Z,2017-10-11T10:25:39Z,"- make --fail stop jpeg read on any libjpeg warning, thanks @mceachen
- don't build enumtypes so often, removing perl as a compile dependency
- fix a crash with heavy use of draw operations from language bindings, thanks @Nakilon",1291410
431,False,False,2017-08-18T21:08:43Z,2017-08-22T14:28:30Z,"- fix transparency detection in merge, thanks Haida
- define env var VIPS_WARNING to hide warning messages
- shut down dzsave output earlier to help mark-sweep bindings
- fix webp thumbnail upscale, thanks Kleis",1291410
432,False,False,2017-07-28T17:04:23Z,2017-07-29T10:57:48Z,"- better smartcrop
- transform cmyk->rgb automatically on write if there's an embedded profile and the saver does not support cmyk
- fix DPI mixup in svgload ... we were writing images about 20% too large, thanks Fosk",1291410
433,False,True,2017-12-01T13:37:15Z,2017-07-29T10:11:21Z,"Beta of 8.6, due in December 2017.

- supports fits images with leading non-image HDUs, thanks benepo
- add vips_image_new_from_image() and vips_image_new_from_image1() ... make a
  constant image
- add new_from_image() to Python as well
- slight change to cpp new_from_image() to match py/C behaviour
- vips_conv(), vips_compass(), vips_convsep() default to FLOAT precision
- add FORCE resize mode to break aspect ratio
- add vips_thumbnail_image()
- better prefix guessing on Windows, thanks tumagonx
- savers support a ""page_height"" option for multipage save
- rename 'disc' as 'memory' and default off
- add vips_find_trim(), search for non-background areas 
- remove lcms1 support, it had bitrotted
- `join` tagged as seq
- support tiffsave_buffer for pyramids, thanks bubba
- thumbnail and vipsthumbnail have an option for rendering intent, thanks kleisauke 
- try to reset create date on file create on Windows
- remove python tests ... moved to pyvips test suite
- vips7 and vips8 python bindings default to off ... use the new pyvips
  binding instead
- better svgload: larger output, handle missing width/height, thanks lovell
- better gobject-introspection annotations, thanks astavale 
- add vips_composite(): merge an array of images with porter-duff
- better gobject-introspection annotations, thanks astavale 
- vips_image_write() severs all links between images, when it can ... thanks
  Warren and Nakilon
- vector path for convolution is more accurate and can handle larger masks
- linear and cubic kernels for reduce are higher quality
- added vips_value_set_blob_free()
- ""--size Nx"" to vipsthumbnail was broken, thanks jrochkind 
- fix build with gcc 7
- add vips_fill_nearest() ... fill pixels with nearest colour
- add VIPS_COMBINE_MIN, a new combining mode for vips_compass()
- vips_hist_find_indexed() now has a @combine parameter
- vips_affine() and vips_similarity() have a ""background"" parameter
- fix nasty jaggies on the edges of affine output, thanks chregu
- add gif-delay, gif-comment and gif-loop metadata
- add dispose handling to gifload
- deprecate the ""centre"" option for vips_resize(): it's now always on
- setting the EXIF data block automatically sets other image tags
- dzsave outputs extra right and bottom overlap-only tiles, for closer spec
  adherence
",1291410
434,False,False,2017-05-29T09:19:21Z,2017-06-08T11:59:27Z,"- tiff read with start page > 0 could break edge tiles or strips
- raise b64 limit to allow for huge profiles (thanks jaume)
- fix error return in blob save (thanks jaume)
- tag `vipsprofile` as py2 (thanks ioquatix)
- don't cache `thumbnail` (thanks tomasc)",1291410
435,False,False,2017-05-15T10:21:13Z,2017-05-15T10:26:44Z,"- doc polishing
- more improvements for truncated PNG files, thanks juyunsang 
- improve corrupted jpg handling, thanks juyunsang
- fix small test suite issues on os x
",1291410
436,False,False,2017-01-10T09:43:50Z,2017-05-13T16:53:58Z,Need an 8.4 tarball on github for homebrew,1291410
437,False,False,2017-04-23T08:58:11Z,2017-04-23T10:08:29Z,Fix out of order read error for some image widths and thread numbers under heavy load.,1291410
438,False,False,2017-04-13T21:38:32Z,2017-04-15T09:52:08Z,"- more link fixing in docs 
- revise cache sizing again to help out of order errors under very heavy load, thanks @kleisauke
",1291410
439,False,False,2017-04-06T10:51:36Z,2017-04-06T12:14:49Z,"- better behaviour for truncated PNG files, thanks Yury
- missing proto for vips_tiffsave_buffer(), thanks greut
- move some docs from the wiki and blog into core libvips docs
- add support for markdown in docs",1291410
440,False,False,2017-03-27T09:05:03Z,2017-03-27T10:48:26Z,"The first supported release of libvips 8.5

https://jcupitt.github.io/libvips/2017/03/16/What's-new-in-8.5.html

has a summary of what's new in this version.",1291410
441,False,False,2020-03-10T21:24:26Z,2020-03-10T21:31:12Z,"## YSQL Changes
* [YSQL] Framework for expression pushdown. [#3297](https://github.com/yugabyte/yugabyte-db/issues/3297)
* [YSQL] Optimize relcache preloading by reducing the number of master RPCs. [#3049](https://github.com/yugabyte/yugabyte-db/issues/3049)
* [YSQL][Diesel ORM]  Fix crash for nested SELECT with set-returning function and LIMIT. [#3811](https://github.com/yugabyte/yugabyte-db/issues/3811)
* [YSQL] Fix error when ybctid value matches the partition boundary. [#3833](https://github.com/yugabyte/yugabyte-db/issues/3833)
* [YSQL][Hasura] Fix 'Missing base table ybctid' error for UPDATE with RETURNING clause. [#3805](https://github.com/yugabyte/yugabyte-db/issues/3805)
* [YSQL] Update on table with multiple FK tables crashes postgres. [#3583](https://github.com/yugabyte/yugabyte-db/issues/3583)


## System improvements
* [cdc] Fix DeleteTableWithCDCStream
* Ensure only Tablet leaders can confirm alter table. [#2236](https://github.com/yugabyte/yugabyte-db/issues/2236)
* Make OpenSSL usage thread-safe. [#3454](https://github.com/yugabyte/yugabyte-db/issues/3454)
* Revert removed timeout from RequestConsensusVote. [#3390](https://github.com/yugabyte/yugabyte-db/issues/3390)
* colocation: fix DFATAL on UI tables page (#3726). [#3726](https://github.com/yugabyte/yugabyte-db/issues/3726)
* Ignore writes from the same transaction while updating CQL indexes. [#3718](https://github.com/yugabyte/yugabyte-db/issues/3718)
* Update setting for default number of compaction threads. [#3561](https://github.com/yugabyte/yugabyte-db/issues/3561)
* Add functionality of resolving intents to transaction participant. [#1032](https://github.com/yugabyte/yugabyte-db/issues/1032)
* [cdc] Ability to Delete & List CDC Streams in yb-admin. [#3638](https://github.com/yugabyte/yugabyte-db/issues/3638)
* Set default manifest preallocation to 64k. [#3666](https://github.com/yugabyte/yugabyte-db/issues/3666)
* A workaround for encryption counter overflow. [#3707](https://github.com/yugabyte/yugabyte-db/issues/3707)
* Fixed SecureStream OOM during network partition. [#3842](https://github.com/yugabyte/yugabyte-db/issues/3842)
* Transactions could hang at transaction participant after write stopped. [#3823](https://github.com/yugabyte/yugabyte-db/issues/3823)
* Show backfill progress at master/tasks. [#3668](https://github.com/yugabyte/yugabyte-db/issues/3668)
* Fix apply of transaction with deleted tablets. [#3828](https://github.com/yugabyte/yugabyte-db/issues/3828)
* Comment out Connection::Shutdown info log. [#3842](https://github.com/yugabyte/yugabyte-db/issues/3842)


## Platform
* Fix health check failures when YSQL auth is enabled. [#3737](https://github.com/yugabyte/yugabyte-db/issues/3737)
* Adding under-replicated tablet servers to the master health check. [#1374](https://github.com/yugabyte/yugabyte-db/issues/1374)
* Fix Tab problem when going into Tables page on Yugabyte Cloud. [#3749](https://github.com/yugabyte/yugabyte-db/issues/3749)
* Only save usable AWS instance types. [#3626](https://github.com/yugabyte/yugabyte-db/issues/3626)
* Added APIs for querying audit table. [#3792](https://github.com/yugabyte/yugabyte-db/issues/3792)
* Generate Client Certificate for TLS enabled Universes. [#3839](https://github.com/yugabyte/yugabyte-db/issues/3839)
* Onprem - allow specifying homeDir, automatically exclude installing s3cmd and ntp. [#3834](https://github.com/yugabyte/yugabyte-db/issues/3834)
* Add sorting by default to the releases list and also a search bar to allow users to quickly access the desired release by entering part of the string. [#3563](https://github.com/yugabyte/yugabyte-db/issues/3563)
* Correctly disable ntp install for onprem


## Note

Prior to 2.0, YSQL was still in beta. As a result, 2.0 release includes a backward incompatible file format change for YSQL. This means that if you have an existing cluster running releases older than 2.0 with YSQL enabled, then you will not be able to upgrade to version 2.0+. Export from old cluster and import into a new 2.0+ cluster is needed for using existing data.",105944401
442,False,False,2020-03-03T22:08:00Z,2020-03-03T22:10:39Z,"## YSQL Changes
* [YSQL] Improve performance when running index scan to query data. [#3103](https://github.com/yugabyte/yugabyte-db/issues/3103)
* colocation: handle table tombstone compaction [#3360](https://github.com/yugabyte/yugabyte-db/issues/3360)

## System improvements
* Decrease log segment size for transaction status tablet. [#3699](https://github.com/yugabyte/yugabyte-db/issues/3699)
* Fix data race between ~Tablet and yb::tablet::Tablet::RegularDbFilesChanged(). [#3519](https://github.com/yugabyte/yugabyte-db/issues/3519)
* MiniMaster should set master_addresses on restart. [#3336](https://github.com/yugabyte/yugabyte-db/issues/3366)
* [cdc] Alter Replication Command for CDC. [#2838](https://github.com/yugabyte/yugabyte-db/issues/2838)
* Modify ldb Tool to be Encryption Aware. [#3455](https://github.com/yugabyte/yugabyte-db/issues/3455)
* Create database fails inside docker yugabyted. [#3742](https://github.com/yugabyte/yugabyte-db/issues/3742)

## Platform
* [YW] Change the Disk Usage widget on Universe overview page to show the latest value instead of the average


## Note 

Prior to 2.0, YSQL was still in beta. As a result, 2.0 release includes a backward incompatible file format change for YSQL. This means that if you have an existing cluster running releases older than 2.0 with YSQL enabled, then you will not be able to upgrade to version 2.0+. Export from old cluster and import into a new 2.0+ cluster is needed for using existing data.
",105944401
443,False,False,2020-02-24T23:50:38Z,2020-02-25T06:38:47Z,"We are excited to announce the general availability of YugabyteDB 2.1 release.

The blog posts below detail the features highlighted in the release notes on this page.
- [YugabyteDB 2.1 is GA: Scaling New Heights with Distributed SQL](https://blog.yugabyte.com/yugabytedb-2-1-is-ga-scaling-new-heights-with-distributed-sql/)
- [Achieving 10x Better Distributed SQL Performance in YugabyteDB 2.1](https://blog.yugabyte.com/achieving-10x-better-distributed-sql-performance-in-yugabytedb-2-1/)

## Generally Available Features

Performance improvements in Yugabyte SQL
- [YCSB](https://docs.yugabyte.com/latest/benchmark/ycsb-ysql/) - 10x gain since 2.0 release
- [TPC-C](https://docs.yugabyte.com/latest/benchmark/tpcc-ysql/) - first release to run the full TPC-C suite

Geo-distributed, multi-cloud clusters
- [Two data center (2DC) deployments](https://docs.yugabyte.com/latest/deploy/multi-dc/2dc-deployment/) for reducing cross-DC write latency
- [Read replicas](https://docs.yugabyte.com/latest/architecture/docdb/replication/#read-replicas) for reducing cross-DC read latency

Enterprise-grade security enhancements
- [Encryption at rest](https://docs.yugabyte.com/latest/secure/encryption-at-rest/)
- [Encryption in transit](https://docs.yugabyte.com/latest/secure/tls-encryption/)

## Beta Features
- [Yugabyte Cloud](https://www.yugabyte.com/cloud/) as fully-managed DBaaS
- [Colocated tables](https://docs.yugabyte.com/latest/explore/colocated-tables/) for reducing JOIN latency
- [yugabyted](https://docs.yugabyte.com/latest/reference/configuration/yugabyted/) for simplifying getting started UX
- [Change Data Capture (CDC)](https://docs.yugabyte.com/latest/explore/change-data-capture/) for streaming data out to external systems

## New & Improved Ecosystem Integrations Since 2.0 Release
- [Hasura GraphQL Engine](https://docs.yugabyte.com/latest/develop/graphql/hasura/)
- [Crossplane Multi-Cloud Control Plane](https://crossplane.io/docs/v0.8/stacks-guide-rook.html)
- [OpenEBS Storage Platform](https://blog.openebs.io/getting-started-with-openebs-and-cloud-native-distributed-sql-1d6c5c36e634)

## Changelog

### YSQL API
[YSQL] Fix table location cache for system and colocated tables. #3416
[YSQL] Enable ALTER TABLE IF EXISTS syntax. #3417
[YSQL] Use std::future in PgDocOp to fetch RPC result. #3240
[YSQL] Cleanup unique index if its creation fails. #3462
[YSQL] Eliminate redundant foreign key checks. #3328
[YSQL] Batch all write operations when possible. #2934
[YSQL] allow CREATE DATABASE ENCODING unicode/utf8 #3595
[YSQL] Fixed test wrong assumption in yb_dml_systable_scan.
[YSQL] Use smart pointers for YBqlOp and YBPgsqlOp. #3641
[YSQL] Provide a GFLAG to suppress unsupported error. #3633

### YCQL API
[YCQL] Add gflag to create YCQL tables as transactional by default; change GROUP from reserved word to keyword; fix duplicate column error message. #3313
[YCQL] Fixed unexpected 'Duplicate Object' error from the CatalogManager. #2475
[YCQL] Fixed: signal 11: seg fault: yb::ql::PreparedResult::PreparedResult. #3415
[YCQL] Application stuck in BoundStatement execution if a variable was not bound. #3419

### DocDB Distributed Store 
Set the default history retention duration to 120 seconds. #3373
Fix metrics error after resetting percentiles.. #3362
Extract classes from transaction_participant.cc to separate files. #1032
Recover after write stop. #3331
Fix issue with yugabyted process restart loop. #3207
Track replicated batches at transaction participant. #3220
Backfill Index Table. #448
[Colocation] Use 4 byte PG table ID as dockey prefix. #3365
YB inbound RPCs throttling on soft memory limit. #2563
BlockBasedMemory mem-trackers should use the ""tablet"" MetricsEntity instead of ""servers"". #3364
Mean for metrics histograms should be based on the current values, not historic values. #3470
Make yugabyted work with docker volume mounts. #3513
Added Graph to track Rocksdb write rejections. #2871
Fsync before WAL close. #3490
Enable percentiles for redis metrics. #3362
BlockBasedMemory mem-trackers may already exist in OpenKeyValueTablet. #3364
[cdc] Avoid race condition with CDCReadRpc. #3441
Call TransactionParticipant shutdown from Tablet shutdown. #3495
Point yugabyted to system conf file if present. #3169
Backfill Index Table - TServer side implementation for backfilling non-unique indices. #448
colocation: make reads aware of table tombstone #3359
Add ability to set hybrid time filter to existing rocksdb files. #1032
Server crash on startup after table truncate. #3524
Move all yugabyted modified data under central var dir. #3524
Add physical time to cdc_state table. #2837
docdb: iterate over intents past kTransactionId #3482
Prevent callback from detached rocksdb instance; prevent race condition between insert and truncate; disable rocksdb flush on truncate. #3288
Persist cdc min replicated index in the superblock. #3418
[CDC] Clean up cdc_state rows for deleted streams. #2529
yugabyted does not start with custom config file. #3634
[2DC] Create new BootstrapProducer API. #3319
Fix key processing on CDCProducer. #3582
Make yb-docker-ctl compatible with python3
Backfill index: handle failed master -> TS rpc. #3627
[cdc] Add Last Consumer Checkpoint to CDC Producer Metrics. #2154
Evict log cache at follower after operation was appended to log. #3665
Implement transaction sealing w/o abort. #3220
[Colocated] Master should issue AddTableToTable only for subsequent tables. #3681
Extract HeartbeatDataProvider from Heartbeater. #3571
Avoid sending apply intents from the follower. #3698

### Yugabyte Platform
YW Alerting improvements. #2892
Add the 'snooze alerts status' of a universe to the health check panel. #2891
Added UI support to be able to snooze and enable alerts. #2891
Add toggle to take backup button. #3341
Redirect yugaware logs from yugabyted into yugabyte-logs dir. #3516
Add features for the read only user.
Add endpoint to support creation of user roles in YB database(s).
Add ability to specify list of tables to backup. #3614
Fix metrics url check. #3653
Do not merge flags during a gflag update. #3533
Add option to add, delete users
[YW][#3211] Add ESC key binding to document to close any modal on the screen by calling the onHide callback.#3211
[YW][#3332] Add default value for currentProvider and fix eslint warnings. #3332
[YW][#3680] Enable multi-table backups in CreateBackups modal. #3680
Add authentication for registering new users.
[YW][OSS] Add support to disable the Enable/Disable Backup button on the Tables tab, and change color of disabled TableActions
Handle overall exceptions in a better way. #3676",105944401
444,False,False,2020-01-27T23:44:18Z,2020-01-29T02:24:31Z,"## YSQL Changes
* [YSQL] Colocation: Fix txn conflict issues due to absence of cotable ID in DocKey.[#3251](https://github.com/yugabyte/yugabyte-db/issues/3251)
* [YSQL] Table colocation drop flow. [#3035](https://github.com/yugabyte/yugabyte-db/issues/3035)
* [YSQL] Make parentheses optional for SPLIT clause. [#3308](https://github.com/yugabyte/yugabyte-db/issues/3308)
* [YSQL] Fixed restarted portal fields having wrong memory context. [#3377](https://github.com/yugabyte/yugabyte-db/issues/3377)
* [YSQL] IN clause pushdown for hash columns. [#3130](https://github.com/yugabyte/yugabyte-db/issues/3130) 
* [YSQL] Reorganized and fixed INDEX implementation. [#2959](https://github.com/yugabyte/yugabyte-db/issues/2959)
* Access pg_stat_statements contents at <tserver_ip>:13000/statements. [#3091](https://github.com/yugabyte/yugabyte-db/issues/3091)
* [colocation] Create table tombstone. [#3357](https://github.com/yugabyte/yugabyte-db/issues/3357)
* [YSQL] Fix memory leak for altering temporary table. [#3031](https://github.com/yugabyte/yugabyte-db/issues/3031)


## YCQL Changes 

* [YCQL]  Fixed Upgrade issue for SELECT from Indexed Table. [#3281](https://github.com/yugabyte/yugabyte-db/issues/3281)



## System improvements
* Fix race condition on RetryingTSRpcTask::UnregisterAsyncTask. [#3277](https://github.com/yugabyte/yugabyte-db/issues/3277)
* [2DC] Change cdc_state table format. [#3050](https://github.com/yugabyte/yugabyte-db/issues/3050) 
* Fix clock update during commit with committing transaction. [#2571](https://github.com/yugabyte/yugabyte-db/issues/2571)
* Don't check doc hybrid time at end of the key during rocksdb seek. [#3024](https://github.com/yugabyte/yugabyte-db/issues/3024)
* Fix redis keys command. [#3311](https://github.com/yugabyte/yugabyte-db/issues/3311)
* Move snapshot related classes from ent/ folder. [#1032](https://github.com/yugabyte/yugabyte-db/issues/1032)
* Use correct string end for char[] arg in Format function. [#3396](https://github.com/yugabyte/yugabyte-db/issues/3396)
* Fix SIGSEGV due to null consensus pointer in GetChanges. [#3289](https://github.com/yugabyte/yugabyte-db/issues/3289)
* Do not use TOMBSTONED tablets when load balancing across disks on a node. [#3374](https://github.com/yugabyte/yugabyte-db/issues/3374)
* Expose percentile metrics from histograms. [#3362](https://github.com/yugabyte/yugabyte-db/issues/3362)



## Platform
* [YW] UI change for RBAC update to make Profile section functional
* [YW] Refreshing on the Edit Universe page does not load AZSelectorTable [#3291](https://github.com/yugabyte/yugabyte-db/issues/3291)
*  Minor fix to ignore instances without memory specifications. [#3298](https://github.com/yugabyte/yugabyte-db/issues/3298)
* [YW] Fix missing property in newly generated cluster deviceInfo in ClusterFields. [#3290](https://github.com/yugabyte/yugabyte-db/issues/3290)
* Fix edit universe bug for region/zone update. [#3323](https://github.com/yugabyte/yugabyte-db/issues/3323)
* Cron expression validator on UI doesn't work correctly #3160. [#3160](https://github.com/yugabyte/yugabyte-db/issues/3160)
* AWS Instance Type Parsing Fix. [#3063](https://github.com/yugabyte/yugabyte-db/issues/3063)
* Added keyspace to multi-table backups. [#3343](https://github.com/yugabyte/yugabyte-db/issues/3343)
* Flow `assign_public_ip` through properly when creating GCP instance. [#3386](https://github.com/yugabyte/yugabyte-db/issues/3386)
* Added Audit trail for users. [#3370](https://github.com/yugabyte/yugabyte-db/issues/3370)


## Note on upgrades from pre 2.0 releases


Version 2.0 release includes a backward incompatible file format change for YSQL. Note: Prior to 2.0, YSQL was still in beta. This means that if you have an existing cluster running releases older than 2.0 with YSQL enabled, then you will not be able to upgrade to version 2.0 or higher release.


There are two ways to address the above note.

* If you don't care about preserving your existing data, then delete your cluster, and create a new
  cluster with 2.0.x.x
* If you want to continue using your existing data, then please save your data,
  delete the cluster, create a new cluster with 2.0.x.x and then load the previously saved data.
",105944401
445,False,False,2020-01-07T20:49:41Z,2020-01-07T20:52:25Z,"## YSQL Changes

* [YSQL] Fixed an issue with PgDocOp lifespan sometimes being too short.
* [YSQL] ""UPDATE"" fails if any ""NOT NULL"" columns aren't updated [#3174](https://github.com/yugabyte/yugabyte-db/issues/3174)
* [YSQL] Force network library initialization on postmaster startup on macOS. [2509](https://github.com/yugabyte/yugabyte-db/issues/2509)
 

## YCQL Changes 

* [YCQL] Table stuck in the keyspace after deletion [#3032](https://github.com/yugabyte/yugabyte-db/issues/3032)



## System improvements

* Implement one way bitmap and Extract CleanupTransaction from YBTransaction. [#3220](https://github.com/yugabyte/yugabyte-db/issues/3220)
* Improved rocksdb corruption error logging. [#2961](https://github.com/yugabyte/yugabyte-db/issues/2961)
* Added TCMalloc stats when dumping memory usage. [#3190](https://github.com/yugabyte/yugabyte-db/issues/3190)


## Platform

[YW] Fix infinitely updating state causing React to fail. Reason is calling setState repeatedly in componentDidUpdate will create an infinite depth nested state update.


## Note on upgrades from pre 2.0 releases


Version 2.0 release includes a backward incompatible file format change for YSQL. Note: Prior to 2.0, YSQL was still in beta. This means that if you have an existing cluster running releases older than 2.0 with YSQL enabled, then you will not be able to upgrade to version 2.0 or higher release.


There are two ways to address the above note.

* If you don't care about preserving your existing data, then delete your cluster, and create a new
  cluster with 2.0.x.x
* If you want to continue using your existing data, then please save your data,
  delete the cluster, create a new cluster with 2.0.x.x and then load the previously saved data.
",105944401
446,False,False,2020-01-03T19:40:28Z,2020-01-03T19:47:23Z,"## YSQL Changes

* [YSQL] Push down LIMIT clause for INDEX_ONLY_SCAN. [#3128](https://github.com/yugabyte/yugabyte-db/issues/3128)
* [YSQL] Drop DB persist, delete sys tables. [#2997](https://github.com/yugabyte/yugabyte-db/issues/2997)
* [YSQL] Correctly report unsupported features in plpgsql grammar. [#2005](https://github.com/yugabyte/yugabyte-db/issues/2005)
* [YSQL] Enable DISCARD statement in grammar. [#2491](https://github.com/yugabyte/yugabyte-db/issues/2491)
* [YSQL] Update only the assigned columns in UPDATE statement. [#3106](https://github.com/yugabyte/yugabyte-db/issues/3106)
* [YSQL] Move YBCPgSession and PgTxnManager into PgApiImpl. [#3053](https://github.com/yugabyte/yugabyte-db/issues/3053)
* [YSQL] Deprecate num_tablets in CreateTableRequestPB
* [YSQL] Support create colocated db/table . [#3033](https://github.com/yugabyte/yugabyte-db/issues/3033)




## YCQL Changes 
* [YCQL] Support conditional DMLs in transaction statement block. [#166](https://github.com/yugabyte/yugabyte-db/issues/166)
* [YCQL] Compatibility Issue - Not processing older format of protobuf message when picking index. [#3175](https://github.com/yugabyte/yugabyte-db/issues/3175)



## System improvements
* Enable CXX11 ABI. [#3116](https://github.com/yugabyte/yugabyte-db/issues/3116)
* Limited transactional DDL: each DDL statement in its own transaction. [#3108](https://github.com/yugabyte/yugabyte-db/issues/3108)
* Improved TcpStream::sending_ queue memory tracking. [#3041](https://github.com/yugabyte/yugabyte-db/issues/3041)
* Per service gauge counter for number of enqueued rpcs. [#2389](https://github.com/yugabyte/yugabyte-db/issues/2389)
* Handle GetChanges(MinimumOpID) as a Request for the First Log Entry. [#3036](https://github.com/yugabyte/yugabyte-db/issues/3036)
* Fixed vmodule logging configuration. [#3176](https://github.com/yugabyte/yugabyte-db/issues/3176)
* Log over-replicated tablets in load balancer. [#3173](https://github.com/yugabyte/yugabyte-db/issues/3173)
* Fix for stuck Inbound RPC connections due to hitting memory limit. [#2562](https://github.com/yugabyte/yugabyte-db/issues/2562)
* Retry transaction status table creation if it fails. [#3182](https://github.com/yugabyte/yugabyte-db/issues/3182)
* Add ability to set transaction priority range using SQL. [#3024](https://github.com/yugabyte/yugabyte-db/issues/3024)
* Delete provisional records RocksDB SSTable files. [#2186](https://github.com/yugabyte/yugabyte-db/issues/2186) 

## Platform
* [YW] Change Intro dialog to only appear on login. Add checkbox in Intro dialog for permanently hiding modal. [#3138](https://github.com/yugabyte/yugabyte-db/issues/3138)
* [Platform] Fix console errors in UI code [#2790](https://github.com/yugabyte/yugabyte-db/issues/2790)
* [YW] Fix backup Universe from changing to undefined url
* [Platform] Task history not reflecting when a encryption is enabled/disabled/rotated [#2929](https://github.com/yugabyte/yugabyte-db/issues/2929)
* Add per node metrics for health. [#2894](https://github.com/yugabyte/yugabyte-db/issues/2894)
* Implement RBAC in Yugaware. [#2793](https://github.com/yugabyte/yugabyte-db/issues/2793)
* Add chrony configuration while provision step. [#3038](https://github.com/yugabyte/yugabyte-db/issues/3038)



## Note on upgrades from pre 2.0 releases


Version 2.0 release includes a backward incompatible file format change for YSQL. Note: Prior to 2.0, YSQL was still in beta. This means that if you have an existing cluster running releases older than 2.0 with YSQL enabled, then you will not be able to upgrade to version 2.0 or higher release.


There are two ways to address the above note.

* If you don't care about preserving your existing data, then delete your cluster, and create a new
  cluster with 2.0.x.x
* If you want to continue using your existing data, then please save your data,
  delete the cluster, create a new cluster with 2.0.x.x and then load the previously saved data.",105944401
447,False,False,2019-12-14T06:18:47Z,2019-12-14T16:56:22Z,"## YSQL Changes
* [YSQL] enable client-to-server TLS encryption for postgres process in case use_client_to_server_encryption is set to true. [#2980](https://github.com/yugabyte/yugabyte-db/issues/2980) 
* [YSQL] Disable the unnecessary pggate-level auto read restarts. [#2812](https://github.com/yugabyte/yugabyte-db/issues/2812)
* [YSQL] yb-admin command to delete namespace, table and index. [#3069](https://github.com/yugabyte/yugabyte-db/issues/3069)
* [YSQL] Assertion failed on TRUNCATE TABLE command. [#1632](https://github.com/yugabyte/yugabyte-db/issues/1632)
* [YSQL] Consider HASH column when seeking index for ORDER BY clause. [#2792](https://github.com/yugabyte/yugabyte-db/issues/2792)

## YCQL Changes 
* [YCQL] Fixed 'kong migrations bootstrap' failure with yugabyte. [#2829](https://github.com/yugabyte/yugabyte-db/issues/2829)

## System improvements
* Add log retention by op id policy documentation. [#2773](https://github.com/yugabyte/yugabyte-db/issues/2773)
* Switch Linuxbrew to 20181203T161736. [#3044](https://github.com/yugabyte/yugabyte-db/issues/3044)
* Check transaction status after load. [#2186](https://github.com/yugabyte/yugabyte-db/issues/2186)
* [2DC] Make cdc_poller log messages more descriptive
* Lower max timeout on master async tasks from 1 hour to 15 minutes. [#1655](https://github.com/yugabyte/yugabyte-db/issues/1655)
* Cleanup intents written for foreign key check. [#3111](https://github.com/yugabyte/yugabyte-db/issues/3111)


## Platform
* [YW] Add a prometheus metrics export endpoint. [#2459](https://github.com/yugabyte/yugabyte-db/issues/2459)
* [YW] Recursively call task status API sequentially so there is no overlap. [#2998](https://github.com/yugabyte/yugabyte-db/issues/2998)
* [Platform] Move the CMK policy to be moved to KMS instead of having it universe level [#2942](https://github.com/yugabyte/yugabyte-db/issues/2942)


## Note on upgrades from pre 2.0 releases

Version 2.0 release includes a backward incompatible file format change for YSQL. Note: Prior to 2.0, YSQL was still in beta. This means that if you have an existing cluster running releases older than 2.0 with YSQL enabled, then you will not be able to upgrade to version 2.0 or higher release.


There are two ways to address the above note.

* If you don't care about preserving your existing data, then delete your cluster, and create a new
  cluster with 2.0.x.x
* If you want to continue using your existing data, then please save your data,
  delete the cluster, create a new cluster with 2.0.x.x and then load the previously saved data.
",105944401
448,False,False,2019-12-05T02:09:41Z,2019-12-05T02:14:02Z,"## System improvements
* Expose rocksdb max_write_buffer_number as a gflag. [#2935](https://github.com/yugabyte/yugabyte-db/issues/2935) 
* Roll forward master tablet deletion on fault during DeleteTable. [#2721](https://github.com/yugabyte/yugabyte-db/issues/2721)
* Batch Records on 2DC Consumer. [#2580](https://github.com/yugabyte/yugabyte-db/issues/2580)
* Use raft commit hybrid time for write batch frontier. [#2912](https://github.com/yugabyte/yugabyte-db/issues/2912)
* Remove aborted transaction from follower. [#2186](https://github.com/yugabyte/yugabyte-db/issues/2186)
* Add leader_stepdown to yb-admin.[#1943](https://github.com/yugabyte/yugabyte-db/issues/1943)
* [2DC] TLS support for 2DC
* CDC op id retention policy. [#2486](https://github.com/yugabyte/yugabyte-db/issues/2486)
* Fix double cleanup of provisional records. [#2186](https://github.com/yugabyte/yugabyte-db/issues/2186)
* Improved RPC heartbeats sending. [#2964](https://github.com/yugabyte/yugabyte-db/issues/2964)

## Platform
* [YW] Fix node metrics on Universe specific Nodes page. [#3006](https://github.com/yugabyte/yugabyte-db/issues/3006)
* Fix the host info query to be called only on provider config page. [#1342](https://github.com/yugabyte/yugabyte-db/issues/1342)


## Note on upgrades from pre 2.0 releases

Version 2.0 release includes a backward incompatible file format change for YSQL. Note: Prior to 2.0, YSQL was still in beta. This means that if you have an existing cluster running releases older than 2.0 with YSQL enabled, then you will not be able to upgrade to version 2.0 or higher release.

There are two ways to address the above note.

* If you don't care about preserving your existing data, then delete your cluster, and create a new
  cluster with 2.0.x.x
* If you want to continue using your existing data, then please save your data,
  delete the cluster, create a new cluster with 2.0.x.x and then load the previously saved data.
",105944401
449,False,False,2019-11-24T08:30:30Z,2019-11-24T08:35:42Z,"## YSQL changes
* [YSQL] Transparent read restarts for general queries. [#1237](https://github.com/yugabyte/yugabyte-db/issues/1237)
* [YSQL] Support row level security (RLS) as per Postgres. [#1870](https://github.com/yugabyte/yugabyte-db/issues/1870)
* [YSQL] use database type in catalog_manager for keyspace name uniqueness. [#1476](https://github.com/yugabyte/yugabyte-db/issues/1476)
* [YSQL] Enable fmgr cache for C functions. [#2596](https://github.com/yugabyte/yugabyte-db/issues/2596)
* [YSQL] fix delete from table returning * query with dropped columns. [#2398](https://github.com/yugabyte/yugabyte-db/issues/2398)
* [YSQL] Update catalog manager data while renaming YSQL table, DB and columns. [#2280](https://github.com/yugabyte/yugabyte-db/issues/2280)
* [YSQL] FOR [NO KEY] UPDATE. [#2842](https://github.com/yugabyte/yugabyte-db/issues/2842)
* Use transaction pool for YSQL. [#2909](https://github.com/yugabyte/yugabyte-db/issues/2909)
* [YSQL] Increase default PostgreSQL output buffer size; fix a bug with unnamed_stmt_psrc. [#2975](https://github.com/yugabyte/yugabyte-db/issues/2975)
* [YSQL] use ~/.yugabytedb as default certificate folder for ysqlsh [#2985](https://github.com/yugabyte/yugabyte-db/issues/2985)
* [YSQL] Pick transaction id such that its leader is local to transaction coordinator #2889

## System improvements
* [docdb] Speedup data loading in Master Leader startup. [#2663](https://github.com/yugabyte/yugabyte-db/issues/2663)
* [docdb] Speedup CREATE DATABASE for YSQL.
* Set Timeout and elapsed time in same units [#2826](https://github.com/yugabyte/yugabyte-db/issues/2826)
* Track memory taken by CDC producer. [#2888](https://github.com/yugabyte/yugabyte-db/issues/2888)
* Cleanup TIMED_OUT calls from /rpcz. [#2807](https://github.com/yugabyte/yugabyte-db/issues/2807)
* Improve logging of shutting down idle and broken connections. [#2918](https://github.com/yugabyte/yugabyte-db/issues/2918)
* Do not display user index tables as system tables in master UI. [#2921](https://github.com/yugabyte/yugabyte-db/issues/2921)
* CDC Producer Metrics. [#2154](https://github.com/yugabyte/yugabyte-db/issues/2954)
* yb-admin support for in-memory encryption keys. [#2916](https://github.com/yugabyte/yugabyte-db/issues/2916)
* Poll TCMalloc stats on update of root MemTracker. [#2566](https://github.com/yugabyte/yugabyte-db/issues/2566)
* Fix LB enable / disable handling. [#1942](https://github.com/yugabyte/yugabyte-db/issues/1942)
* Propagate hybrid time from follower. [#2956](https://github.com/yugabyte/yugabyte-db/issues/2956)

## Platform
* [Platform] - Rotate key with service should not rely on alias/cmk already existing [#2943](https://github.com/yugabyte/yugabyte-db/issues/2943)
* [YW] Enable alerts email button is not clickable [#2827](https://github.com/yugabyte/yugabyte-db/issues/2827)
* [Platform] - Fix SetUniverseKey task for unencrypted universes [#2976](https://github.com/yugabyte/yugabyte-db/issues/2976)
* Fix k8s metrics for CPU and Disk Usage.
* [Platform] Support instance profiles for default CMK policy [#2949](https://github.com/yugabyte/yugabyte-db/issues/2949)


## Note on upgrades from pre 2.0 releases

Version 2.0 release includes a backward incompatible file format change for YSQL. Note: Prior to 2.0, YSQL was still in beta. This means that if you have an existing cluster running releases older than 2.0 with YSQL enabled, then you will not be able to upgrade to version 2.0 or higher release.

There are two ways to address the above note.

* If you don't care about preserving your existing data, then delete your cluster, and create a new
  cluster with 2.0.x.x
* If you want to continue using your existing data, then please save your data,
  delete the cluster, create a new cluster with 2.0.x.x and then load the previously saved data.

",105944401
450,False,False,2019-11-19T20:52:09Z,2019-11-19T20:57:30Z,"## YSQL changes
* [YSQL] Change HINT text for unsupported ""alter procedure/function"". [#2718](https://github.com/yugabyte/yugabyte-db/issues/2718)
* [YSQL] Support client-server TLS encryption [#2471](https://github.com/yugabyte/yugabyte-db/issues/2471)
* [YSQL] Fix Master crash when deleting YSQL database [#2665](https://github.com/yugabyte/yugabyte-db/issues/2665)
* [YSQL] Fix read point for row lock stmt. [#2523](https://github.com/yugabyte/yugabyte-db/issues/2523)
* [YSQL] Transparent read restarts for aggregate queries. [#2216](https://github.com/yugabyte/yugabyte-db/issues/2216)
* [YSQL] Show oid for YSQL tables in master UI. [#1525](https://github.com/yugabyte/yugabyte-db/issues/1525)

## YCQL changes
* [YCQL] Server crashes on WHERE condition for key_column and collection_column. [#2638](https://github.com/yugabyte/yugabyte-db/issues/2638)
* [YCQL] NULL value for clustering PK column causes driver to keep retrying. [#2737](https://github.com/yugabyte/yugabyte-db/issues/2737)
* [YCQL] Support CREATE TABLE ... WITH NUM TABLETS. [#2448](https://github.com/yugabyte/yugabyte-db/issues/2448)
* [YCQL] Support nested user-defined types [#2729](https://github.com/yugabyte/yugabyte-db/issues/2729) 

## System improvements
* Pipe cmk policy into EncryptionAtRestService [#2714](https://github.com/yugabyte/yugabyte-db/issues/2714)
* [CDC] Include CDC consumer op ID while determining op ID to evict from cache. [#2317](https://github.com/yugabyte/yugabyte-db/issues/2217)
* [docdb] Roll forward master tablet deletion on fault during DeleteTable [#2721](https://github.com/yugabyte/yugabyte-db/issues/2721)
* Add optional placement_uuid to yb-admin. [#2589](https://github.com/yugabyte/yugabyte-db/issues/2589)
* Truncate fails after add_node, problem on bootstraping [#2804](https://github.com/yugabyte/yugabyte-db/issues/2804)
* Update glog to fix issue with stack trace symbolization. [#2800](https://github.com/yugabyte/yugabyte-db/issues/2800)
* Implement new write throttling algorithm based on number of SST files in leader and followers. [#2750](https://github.com/yugabyte/yugabyte-db/issues/2750)
* Improve sending CQL result from TServer. [#1450](https://github.com/yugabyte/yugabyte-db/issues/1450)
* Fix non transactional conflict resolution. [#2823](https://github.com/yugabyte/yugabyte-db/issues/2823)
* Do not flush rocksdb memtable when user drops table. [#2719](https://github.com/yugabyte/yugabyte-db/issues/2719)
* Add and update placement ID for read replicas. [#2876](https://github.com/yugabyte/yugabyte-db/issues/2876)
* [CDC] Use new GetChanges API on CDC Consumer. [#2863](https://github.com/yugabyte/yugabyte-db/issues/2863)
* Fix DeleteTable concurrency issues. [#2799](https://github.com/yugabyte/yugabyte-db/issues/2799)
* [2DC] Don't log CDC record data. [#2841](https://github.com/yugabyte/yugabyte-db/issues/2841)
* Add support for in memory universe keys [#2682](https://github.com/yugabyte/yugabyte-db/issues/2682)
* Lower consensus_max_batch_size_bytes default to 4MB. [#2739](https://github.com/yugabyte/yugabyte-db/issues/2739)
* Inbound RPC calls are not destroyed until timeout or service shutdown [#2887](https://github.com/yugabyte/yugabyte-db/issues/2887)
* Don't reset cdc_state checkpoint to 0.0. [#2897](https://github.com/yugabyte/yugabyte-db/issues/2897)
* Change failure handling in ProcessRpcStatus. [#2879](https://github.com/yugabyte/yugabyte-db/issues/2879)
* Do smart consumer producer tablet mapping. [#2679](https://github.com/yugabyte/yugabyte-db/issues/2679)
* Add Java Client Support for Encryption at Rest [#2906](https://github.com/yugabyte/yugabyte-db/issues/2906)
* Generate new rejection score on retry. [#2750](https://github.com/yugabyte/yugabyte-db/issues/2750)

## Platform
* [Platform] Add ability to turn off encryption at rest for an encrypted at rest universe [#2730](https://github.com/yugabyte/yugabyte-db/issues/2730)
* [Platform] Cache universe key registry in memory on YW side [#2770](https://github.com/yugabyte/yugabyte-db/issues/2770)
* [Platform] Add ability to launch aws instances with encryption enabled storage [#2759](https://github.com/yugabyte/yugabyte-db/issues/2759)
* [Platform] Scheduled backups for Single table and Full universe flows. 
* [Platform] Use a YW default CMK policy instead of the AWS default policy [#2896](https://github.com/yugabyte/yugabyte-db/issues/2896)
* [Platform] Enable support for Rotate Key/Disable Key/Enable Key flows. [#2927](https://github.com/yugabyte/yugabyte-db/issues/2927)
* [Platform] Integrate YW KMS with in-memory encryption at rest [#2915](https://github.com/yugabyte/yugabyte-db/issues/2915)
* [Platform] Rotate key with service should not rely on alias/cmk already existing [#2943](https://github.com/yugabyte/yugabyte-db/issues/2943)
* [Platform] Periodic job to set latest universe key into master from YW [#2728](https://github.com/yugabyte/yugabyte-db/issues/2728)

### Note on upgrades from pre 2.0 releases


Version 2.0 release includes a backward incompatible file format change for YSQL. Note: Prior to 2.0, YSQL was still in beta. This means that if you have an existing cluster running releases older than 2.0 with YSQL enabled, then you will not be able to upgrade to version 2.0 or higher release.


There are two ways to address the above note.

* If you don't care about preserving your existing data, then delete your cluster, and create a new  cluster with 2.0.x.x
* If you want to continue using your existing data, then please save your data,
  delete the cluster, create a new cluster with 2.0.x.x and then load the previously saved data.",105944401
451,False,False,2019-10-28T22:42:23Z,2019-10-28T22:48:30Z,"

## YSQL changes
* [YSQL] Build YBTupleID value with respect to DocDB column order. [#2438](https://github.com/yugabyte/yugabyte-db/issues/2438)
* [YSQL] Support TLS Server-Server Encryption through YSQL API. [#1845](https://github.com/yugabyte/yugabyte-db/issues/1845)
* [YSQL] Check constraints when doing UPDATE. [#2361](https://github.com/yugabyte/yugabyte-db/issues/2361)
* [YSQL] Add default password to yugabyte user for ysqlsh. [#2594](https://github.com/yugabyte/yugabyte-db/issues/2594)
* [YSQL] authentication and authorization. [#2610](https://github.com/yugabyte/yugabyte-db/issues/2610)
* [YSQL] client authentication update. [#2614](https://github.com/yugabyte/yugabyte-db/issues/2614)
* [YSQL] Enable FOR SHARE and FOR KEY SHARE row locking in YSQL SELECT statements. DMLs on tables with foreign key references work regardless of isolation level (previously only worked in `SERIALIZABLE` isolation)[#1199](https://github.com/yugabyte/yugabyte-db/issues/1199)
* [YSQL] Avoid namespace id resolving for import_namespace yb-admin command. [#2582](https://github.com/yugabyte/yugabyte-db/issues/2582)
* [YSQL] SERIALIZABLE READ ONLY DEFERRABLE. [#2161](https://github.com/yugabyte/yugabyte-db/issues/2161)


## YCQL changes
* [YCQL] Fix for SIGBUS TS crash on invalid statement. [#2476](https://github.com/yugabyte/yugabyte-db/issues/2476)
* [YCQL] A role shouldn't be able to modify the superuser status of itself or of a role granted to it. [#2505](https://github.com/yugabyte/yugabyte-db/issues/2505)
* [YCQL] Fix issue with permissions inheritance. [#2550](https://github.com/yugabyte/yugabyte-db/issues/2550)
* [YCQL] Mangling the column name in IndexTable for index selecting processing. [#741](https://github.com/yugabyte/yugabyte-db/issues/741)
* [YCQL] Wrong port sent for NEW_NODE topology change events. [#2607](https://github.com/yugabyte/yugabyte-db/issues/2607)
* [YCQL] Fixed: Cannot CREATE TYPE when user has CREATE permissions for keyspace. [#2556](https://github.com/yugabyte/yugabyte-db/issues/2556)
* [YCQL] Add support for IF clause in SELECT statement. [#2640](https://github.com/yugabyte/yugabyte-db/issues/2640)
* [YCQL] Add description for JSONB INDEX and IF clause in SELECT. [#2651](https://github.com/yugabyte/yugabyte-db/issues/2651)
* [YCQL] Not reserving keyword USER and WHEN. [#1661](https://github.com/yugabyte/yugabyte-db/issues/2661)
* [YCQL] EXPLAIN SELECT causes tserver to crash. [#2616](https://github.com/yugabyte/yugabyte-db/issues/2616)



## System improvements
* Added missing extractor checks into version_edit, so ldb doesn't crash. [#2510](https://github.com/yugabyte/yugabyte-db/issues/2510)
* Fix race in Batcher. [#2501](https://github.com/yugabyte/yugabyte-db/issues/2501)
* [2DC] Update checkpoint for replicated records, ignore tablet status while looking up peer. [#2487](https://github.com/yugabyte/yugabyte-db/issues/2487)
* Reduce log level while skipping over display of stats for tablets with state RaftGroupStatePB::SHUTDOWN. [#1488](https://github.com/yugabyte/yugabyte-db/issues/1488)
* [2DC] Send from_checkpoint only when consumer knows the last checkpoint. [#2522](https://github.com/yugabyte/yugabyte-db/issues/2522)
* Remove may exist state from YBTransaction. [#2501](https://github.com/yugabyte/yugabyte-db/issues/2501)
* [CDC] Setup Java Console Connector for CDC. [#2081](https://github.com/yugabyte/yugabyte-db/issues/2801)
* Fix operation memory double tracking. [#1436](https://github.com/yugabyte/yugabyte-db/issues/1436)
* Reinit total replicas to move when master leader fails during tserver blacklisting. [#2453](https://github.com/yugabyte/yugabyte-db/issues/2453)
* Display num sst files for tablets in yb_admin list_tablets_for_tablet_server. [#2536](https://github.com/yugabyte/yugabyte-db/issues/2536)
* Use boost::amotic for op_id_copy_ member (128 bits structure). [#2545](https://github.com/yugabyte/yugabyte-db/issues/2545)
* Derive proxy rpc addresses. [#1023](https://github.com/yugabyte/yugabyte-db/issues/1023)
* Update consensus meta term during local bootstrap. [#2570](https://github.com/yugabyte/yugabyte-db/issues/2570)
* Add metrics for thread count in each category. [#1785](https://github.com/yugabyte/yugabyte-db/issues/1785)
* Cleanup queue on timeout. [#2592](https://github.com/yugabyte/yugabyte-db/issues/2592)
* Do not call LogReader::Open() twice when skip_wal_rewrite is enabled. [#2124](https://github.com/yugabyte/yugabyte-db/issues/2124)
* Display num log segments for tablets in yb_admin list_tablets_for_tablet_server. [#2555](https://github.com/yugabyte/yugabyte-db/issues/2555)
* Fix Bug in YEDIS Keys Command. [#2381](https://github.com/yugabyte/yugabyte-db/issues/2381)
* Fix num tablets per table. [#2630](https://github.com/yugabyte/yugabyte-db/issues/2630)
* modify_placement_info clears read replica config. [#2628](https://github.com/yugabyte/yugabyte-db/issues/2628)
* Fix use of load balancer concurrent action limits. [#2624](https://github.com/yugabyte/yugabyte-db/issues/2624)
* Node should be able to transition from master to shell mode and back to master. [#2007](https://github.com/yugabyte/yugabyte-db/issues/2007)
* Use new linuxbrew (20191015T202549). [#2608](https://github.com/yugabyte/yugabyte-db/issues/2608)
* Remove in_memory_erase option and use SingleDelete instead of Delete. [#2569](https://github.com/yugabyte/yugabyte-db/issues/569)
* Fixed invalid read-time for RF==1 case. [#2394](https://github.com/yugabyte/yugabyte-db/issues/2394)
* Move Rpcs to CDC consumer from CDC poller. [#2549](https://github.com/yugabyte/yugabyte-db/issues/2549)
* [CDC] Make redirection to tablet leaders for GetChanges asynchronous. [#2503](https://github.com/yugabyte/yugabyte-db/issues/2503)

## Note on upgrades from pre 2.0 releases


Version 2.0 release includes a backward incompatible file format change for YSQL. Note: Prior to 2.0, YSQL was still in beta. This means that if you have an existing cluster running releases older than 2.0 with YSQL enabled, then you will not be able to upgrade to version 2.0 or higher release.


There are two ways to address the above note.

* If you don't care about preserving your existing data, then delete your cluster, and create a new  cluster with 2.0.x.x
* If you want to continue using your existing data, then please save your data,
  delete the cluster, create a new cluster with 2.0.x.x and then load the previously saved data.

",105944401
452,False,False,2019-10-08T21:47:30Z,2019-10-09T01:23:05Z,"



## YSQL changes

* [YSQL] Allow ALTER COLUMN add/set/drop identity. [#2226](https://github.com/yugabyte/yugabyte-db/issues/2226)
* [YSQL] PostgreSQL error code handling to avoid string-based error comparisons. [#1289](https://github.com/yugabyte/yugabyte-db/issues/1289)
* [YSQL] Fix duplicate key error being suppressed in COPY.  [#2289](https://github.com/yugabyte/yugabyte-db/issues/2289)
* [YSQL] VERIFY_RESULT creates undesirable copy of Result<T&>'s value.  [#2298](https://github.com/yugabyte/yugabyte-db/issues/2298)
* [YSQL] Warn on non-txn COPY with incompatible relation.  [#2278](https://github.com/yugabyte/yugabyte-db/issues/2278)
* [YSQL] Allow ALTER COLUMN add/set/drop identity. [#2226](https://github.com/yugabyte/yugabyte-db/issues/2226)
* [YSQL] PostgreSQL error code handling to avoid string-based error comparisons. [#1289](https://github.com/yugabyte/yugabyte-db/issues/1289)
* [YSQL] Aggregate pushdowns in YSQL. [#1851](https://github.com/yugabyte/yugabyte-db/issues/1851)
* [YSQL] Skip dropped columns when iterating through the columns for UPDATE statement. [#1969](https://github.com/yugabyte/yugabyte-db/issues/1969)
* [YSQL] Use keyspace id instead of name in requests from yb-admin to catalog_manager. [#1476](https://github.com/yugabyte/yugabyte-db/issues/1476)
* [YSQL] Fix insert into temp table in function body assertion error. [#1541](https://github.com/yugabyte/yugabyte-db/issues/1541)
* [YSQL] Fix memory leak in psql. [#2388](https://github.com/yugabyte/yugabyte-db/issues/2388)
* [YSQL] Add default password for yugabyte user. [#2465](https://github.com/yugabyte/yugabyte-db/issues/2465)

## YCQL changes

* [YCQL] Fixed permission check for DROP TYPE. [#2373](https://github.com/yugabyte/yugabyte-db/issues/2373)
* [YCQL] Fix for 'value too long' error code mapping. [#2116](https://github.com/yugabyte/yugabyte-db/issues/2116)
* [YCQL] 'expression not yet supported' error for old-format index update. [#2470](https://github.com/yugabyte/yugabyte-db/issues/2470)


## System improvements

* Do not retry flush/compact async tasks. [#2229](https://github.com/yugabyte/yugabyte-db/issues/2229)
* Make yb-admin log an error message instead of fatal-ing on failed init. [#2141](https://github.com/yugabyte/yugabyte-db/issues/2141)
* Propagate timeout to transaction. [#2334](https://github.com/yugabyte/yugabyte-db/issues/2334)
* Warn on non-txn COPY with incompatible relation. [#2278](https://github.com/yugabyte/yugabyte-db/issues/2278)
* [2DC] Add Exponential Backoff to CDC Consumer. [#2362](https://github.com/yugabyte/yugabyte-db/issues/2362)
* Add support for cotable id in EnumerateIntents (needed for transactional DDL). [#1404](https://github.com/yugabyte/yugabyte-db/issues/1404)
* TServer blacklisting for leadership role. [#1748](https://github.com/yugabyte/yugabyte-db/issues/1748)
* Avoid unnecessary RocksDB lookup when we have multiple ops to one tablet. [#2186](https://github.com/yugabyte/yugabyte-db/issues/2186)
* [2DC]  Reduce checkpoint frequency, avoid self looping in CDC producer, apply polling delay correctly. [#2364](https://github.com/yugabyte/yugabyte-db/issues/2364)
* Request intents cleanup even on failed replicas. [#2411](https://github.com/yugabyte/yugabyte-db/issues/2411)
* Add number of sst files to tables and tablets pages for tserver. [#2230](https://github.com/yugabyte/yugabyte-db/issues/2230)
* Fix role and term cache. [#2267](https://github.com/yugabyte/yugabyte-db/issues/2267)
* yb-admin add RF to add_read_replicas. [#2395](https://github.com/yugabyte/yugabyte-db/issues/2395)
* [2DC] Fix transaction status and record handling in CDC producer/consumer. [#2386](https://github.com/yugabyte/yugabyte-db/issues/2386)
* Handle concurrent shutdown and remote bootstrap. [#2428](https://github.com/yugabyte/yugabyte-db/issues/2428)
* [CDC] Fix bug in condition check for tablet leader. [#2449](https://github.com/yugabyte/yugabyte-db/issues/2449)
* Fix remote bootstrap for encryption at rest. [#2462](https://github.com/yugabyte/yugabyte-db/issues/2462) 
* Implement dynamic priorities for compaction tasks. [#2004](https://github.com/yugabyte/yugabyte-db/issues/2004)
* [2DC] Update checkpoint for replicated records, ignore tablet status while looking up peer. [#2487](https://github.com/yugabyte/yugabyte-db/issues/2487)
* [2DC] yb-admin command to pause/resume replication.  [#2367](https://github.com/yugabyte/yugabyte-db/issues/2367)

## Note on upgrades from pre 2.0 releases


Version 2.0 release includes a backward incompatible file format change for YSQL. Note: Prior to 2.0, YSQL was still in beta. This means that if you have an existing cluster running releases older than 2.0 with YSQL enabled, then you will not be able to upgrade to version 2.0 or higher release.


There are two ways to address the above note.

* If you don't care about preserving your existing data, then delete your cluster, and create a new  cluster with 2.0.x.x
* If you want to continue using your existing data, then please save your data,
  delete the cluster, create a new cluster with 2.0.x.x and then load the previously saved data.
",105944401
453,False,False,2019-09-17T01:28:05Z,2019-09-17T01:45:45Z,"## File format change


Version 2.0 release includes a backward incompatible file format change for YSQL. Note: Prior to 2.0, YSQL was still in beta. This means that if you have an existing cluster running releases older than 2.0 with YSQL enabled, then you will not be able to upgrade to version 2.0 or higher release.


There are two ways to address the above note.

* If you don't care about preserving your existing data, then delete your cluster, and create a new  cluster with 2.0.x.x
* If you want to continue using your existing data, then please save your data,
  delete the cluster, create a new cluster with 2.0.x.x and then load the previously saved data.


## YSQL Changes
* [YSQL] Add CREATE TABLE tablet splits to grammar.[#1486](https://github.com/YugaByte/yugabyte-db/issues/1486)
* [YSQL]  Add catch-all ysql configuration gflags.[#1140](https://github.com/YugaByte/yugabyte-db/issues/1140)
* [YSQL]  Allow ALTER TABLE ALTER COLUMN SET|DROP NOT NULL. [#1200](https://github.com/YugaByte/yugabyte-db/issues/1200) 
* [YSQL] Add retry logic to pgbench. [#2058](https://github.com/YugaByte/yugabyte-db/issues/2058)
* [YSQL] Optimize single-row UPDATE/DELETE statements. [#1028](https://github.com/YugaByte/yugabyte-db/issues/1028)
* [YSQL] IN predicate pushdown. [#1554](https://github.com/YugaByte/yugabyte-db/issues/1554)
* [YSQL] Add top-level ysql configuration gflags. [#1140](https://github.com/YugaByte/yugabyte-db/issues/1140)
* [YSQL] Add support for various ALTER TABLE ADD COLUMN variants. [#2055](https://github.com/YugaByte/yugabyte-db/issues/2055)
* [YSQL] Support UDTs, records. [#1676](https://github.com/YugaByte/yugabyte-db/issues/1676)
* [YSQL] Order range columns with respect to primary key descripttion. [#1250](https://github.com/YugaByte/yugabyte-db/issues/1250)
* [YSQL] Support ALTER TABLE ADD COLUMN with default value.  [#2055](https://github.com/YugaByte/yugabyte-db/issues/2055)
* [YSQL] Enable ANALYZE, VACUUM in grammar. [#2217](https://github.com/YugaByte/yugabyte-db/issues/2217)
* [YSQL] Non-transactional COPY in YSQL. [#1926](https://github.com/YugaByte/yugabyte-db/issues/1926)
* [YSQL] CREATE/DROP AGGREGATE, CAST, OPERATOR, OPERATOR CLASS. [#1981](https://github.com/YugaByte/yugabyte-db/issues/1981)
* [YSQL] Create yugabyte, system_platform as default database. [#2277](https://github.com/YugaByte/yugabyte-db/issues/2277)

## YCQL Changes
*  [YCQL] Fixed TS crash if a built-in function argument is a column. [#1944](https://github.com/YugaByte/yugabyte-db/issues/1944)

## System Improvements
* Propagate intents apply failure to client.[#1974](https://github.com/YugaByte/yugabyte-db/issues/1974)
* Check shutdown state while scheduling compaction.[#2100](https://github.com/YugaByte/yugabyte-db/issues/2100)
* Add leader check on master TS Write interface. [#1995](https://github.com/YugaByte/yugabyte-db/issues/1995)
* Correctly handle duplicate key in postgres layer. [#2012](https://github.com/YugaByte/yugabyte-db/issues/2012)
* Remove StopWatch from RocksDB Seek. [#2136](https://github.com/YugaByte/yugabyte-db/issues/2136)
* Avoid picking read time for the serializable transactions. [#2125](https://github.com/YugaByte/yugabyte-db/issues/2125)
* CDC: Producer and consumer master handshake to setup 2DC. [#1977](https://github.com/YugaByte/yugabyte-db/issues/1977)
* Optimized Drop Table Locking. [#2056](https://github.com/YugaByte/yugabyte-db/issues/2056)
* Reduce number of sys_catalog writes: skip no change heartbeats. [#1966](https://github.com/YugaByte/yugabyte-db/issues/1966)
* CDC: Consumer changes. [#1481](https://github.com/YugaByte/yugabyte-db/issues/1481)
* CDC: Add master master support. [#1824](https://github.com/YugaByte/yugabyte-db/issues/1824)
*  Increase WAL retention time when CDC stream is setup on table. [#2050](https://github.com/YugaByte/yugabyte-db/issues/2050)
* Apply changes received from producer universe. [#2153](https://github.com/YugaByte/yugabyte-db/issues/2153)
* CDC: Delete for DROP DATABASE. [#2114](https://github.com/YugaByte/yugabyte-db/issues/2114)
* Show Load Balancer state in Master UI. [#646](https://github.com/YugaByte/yugabyte-db/issues/646)
* Add support for error code categories to Status. [#2200](https://github.com/YugaByte/yugabyte-db/issues/2200)
* [2DC] Handle rpc controller errors and CDC consumer shutdown. [#2231](https://github.com/YugaByte/yugabyte-db/issues/2231)
* Don't apply transactions on tablets without intents. [#2070](https://github.com/YugaByte/yugabyte-db/issues/2070)
* Allow dynamic priorities in PriorityThreadPool. [#2004](https://github.com/YugaByte/yugabyte-db/issues/2004)
* Added rocksdb_universal_compaction_always_include_size_threshold. [#2085](https://github.com/YugaByte/yugabyte-db/issues/2085)
* Do full table name match while finding matching tables in 2DC. [#2250](https://github.com/YugaByte/yugabyte-db/issues/2250)
* Fix cleaning Raft log after transactional writes are stopped. [#2221](https://github.com/YugaByte/yugabyte-db/issues/2221)
* Fix handling of calls expired in queue. [#2269](https://github.com/YugaByte/yugabyte-db/issues/2269)
*  Load balancer should not be considered idle when tablet remote bootstrap. [#2193](https://github.com/YugaByte/yugabyte-db/issues/2193)
* [YSQ]: Fix number of tablets created for system tables. [#2293](https://github.com/YugaByte/yugabyte-db/issues/2293)
* Reduce fan-out and use tablet invoker for writing data. 
* SerializableReadWriteConflict needs better success probability.",105944401
454,False,False,2019-08-08T17:21:28Z,2019-08-08T17:32:47Z,"# Overview of Changes

**[IMPORTANT]** This version includes a backward incompatible file format change for YSQL. This means that if you have an existing cluster with YSQL schema, then you will not be able to connect to the YSQL database after upgrading to v1.3.1. There are two ways to work around this problem:

* If you don't care about preserving your existing data, then you can delete your older cluster, upgrade to v1.3.1 and create a new cluster.
* If you want to continue using your existing data, then please save your older data (in the form of SQL statements), delete the older cluster, upgrade to v1.3.1, create a new cluster and then load the previously saved data.

## YSQL Changes
* [YSQL] Fix error in nextval_internal retry.[#1783](https://github.com/YugaByte/yugabyte-db/issues/1783)
* [YSQL] Support bulk inserts for COPY FROM command.[#1590](https://github.com/YugaByte/yugabyte-db/issues/1590)
* [YSQL] Support for Triggers and Extensions.[#1156](https://github.com/YugaByte/yugabyte-db/issues/1156)
* [YSQL] Simplify gflags enabling YSQL.[#1691](https://github.com/YugaByte/yugabyte-db/issues/1691)
* [YSQL] Support NULLS LAST for SELECT.[#1734](https://github.com/YugaByte/yugabyte-db/issues/1734)

## System Improvements
* Extra cleanup of intents of aborted transactions to prevent repeated log messages.[#1722](https://github.com/YugaByte/yugabyte-db/issues/1722)
* Cleanup checkpoints on startup.[#498](https://github.com/YugaByte/yugabyte-db/issues/498)
* Unified yb::RandomAccessFile and rocksdb::RandomAccessFile.[#1661](https://github.com/YugaByte/yugabyte-db/issues/1661)
* Clear Pending Delete State on RPC Failure.[#424](https://github.com/YugaByte/yugabyte-db/issues/424)
* Do not crash yb-master process if we fail to find a namespace when listing tables.[#1716](https://github.com/YugaByte/yugabyte-db/issues/1716)
* Allow consecutive master restarts to succeed.[#1074](https://github.com/YugaByte/yugabyte-db/issues/1074)
* Change soft memory limit handling.[#1437](https://github.com/YugaByte/yugabyte-db/issues/1437)
* Use log prefix in MvccManager.[#1835](https://github.com/YugaByte/yugabyte-db/issues/1835)
* Fix handling timeout of a local call in the service.[#1866](https://github.com/YugaByte/yugabyte-db/issues/1866)
* Fixed TS crash due to NULL name in the PTBindVar object.[#1821](https://github.com/YugaByte/yugabyte-db/issues/1821)
* Add /tables view to tablet server ui.[#1830](https://github.com/YugaByte/yugabyte-db/issues/1830)
* Add ability to avoid using the compaction thread pool for flushes.[#1874](https://github.com/YugaByte/yugabyte-db/issues/1874)
* Tablet leader tracking at catalog manager.[#1881](https://github.com/YugaByte/yugabyte-db/issues/1881)
* Allow in memory erase of intents.[#1240](https://github.com/YugaByte/yugabyte-db/issues/1240)
* Fix assignment order of propagated_safe_time and propagated.[#1889](https://github.com/YugaByte/yugabyte-db/issues/1889)
* Memory monitor should not flush tablet that is already flushing.[#1880](https://github.com/YugaByte/yugabyte-db/issues/1880)
* Fixed potential race condition in memory-based flush.[#1859](https://github.com/YugaByte/yugabyte-db/issues/1859)",105944401
455,False,False,2019-07-16T02:54:23Z,2019-07-16T03:29:14Z,"# Overview of Changes

**[IMPORTANT]** This version includes a backward incompatible file format change for YSQL. This means that if you have an existing cluster with
YSQL schema, then you will not be able to connect to the YSQL database after upgrading to v1.3.0. There are two ways to work around this problem:

* If you don't care about preserving your existing data, then you can delete your older cluster, upgrade to v1.3.0 and create a new cluster.
* If you want to continue using your existing data, then please save your older data (in the form of SQL statements), delete the older cluster, upgrade to v1.3.0, create a new cluster and then load the previously saved data.

## YSQL Changes
* [YSQL] Enable DO statements (a.k.a anonymous blocks).[#1656](https://github.com/YugaByte/yugabyte-db/issues/1656)
* [YSQL] Fix transaction read restart logic causing stale reads and lost writes.[#1646](https://github.com/YugaByte/yugabyte-db/issues/1646)
 * [YSQL] Enable beta-features by default.[#1639](https://github.com/YugaByte/yugabyte-db/issues/1639)
* [YSQL] Fix value overwrite check in REPEATABLE READ isolation mode in YSQL.[#1577](https://github.com/YugaByte/yugabyte-db/issues/1577)
* [YSQL] Allow SELECT from sequences.[#999](https://github.com/YugaByte/yugabyte-db/issues/999)
* [YSQL] Avoid auto-retrying non-DML requests.[#1333](https://github.com/YugaByte/yugabyte-db/issues/1333)
* [YSQL] Set the read point correctly at REPEATABLE READ isolation when turning a read-only transaction into a read-write one.
* [YSQL] Add new key column `ybindexkeysuffix` to YSQL index table [format change].[#1058](https://github.com/YugaByte/yugabyte-db/issues/1058)
* [YSQL] Add support for setval().[#1003](https://github.com/YugaByte/yugabyte-db/issues/1003)
* [YSQL] YSQL catalog cache consistency checking via tablet server shared memory.[#1457](https://github.com/YugaByte/yugabyte-db/issues/1457) 
*  [YSQL] Fix persistence issue with catalog version.[#1629](https://github.com/YugaByte/yugabyte-db/issues/1629)

## YCQL Changes
* Added built-in function toJson() for YCQL SELECT statement.[#992](https://github.com/YugaByte/yugabyte-db/issues/992)

## System Improvements
* Add Master UI page for tracking async tasks.[#1145](https://github.com/YugaByte/yugabyte-db/issues/1145)
* Use rw_spinlock in meta cache to decrease lock contention.[#1667](https://github.com/YugaByte/yugabyte-db/issues/1667)
* Change default maximum per-tablet RPC batch size to 32mb.[#1440](https://github.com/YugaByte/yugabyte-db/issues/1440)
* Fix for flushing old tablets based on memory usage.[#1672](https://github.com/YugaByte/yugabyte-db/issues/1672)
* Replaced OS_LINUX with __linux__ for ifdefs.[#1711](https://github.com/YugaByte/yugabyte-db/issues/1711)
* Unified yb::SequentialFile and rocksdb::SequentialFile.[#1661](https://github.com/YugaByte/yugabyte-db/issues/1661)
* Add a compact_table command to yb-admin.[#1735](https://github.com/YugaByte/yugabyte-db/issues/1735)
* Automatically filter out YSQL sys catalog tables from YBClient calls.[#1537](https://github.com/YugaByte/yugabyte-db/issues/1537)
* Add TLS support to java yb-client.
* Allow pausing a compaction when another compaction with a higher priority is scheduled.[#1314](https://github.com/YugaByte/yugabyte-db/issues/1314)
* Fixed Tablet::Truncate to re-enable auto compactions.[1765](https://github.com/YugaByte/yugabyte-db/issues/1765)
* Fix race condition in PriorityThreadPool.[#1775](https://github.com/YugaByte/yugabyte-db/issues/1775)
",105944401
456,False,False,2019-06-30T07:34:31Z,2019-07-10T18:17:54Z,"# Overview of Changes

**[IMPORTANT]** This version includes a backward incompatible file format change for YSQL. This means that if you have an existing cluster with
YSQL schema, then you will not be able to connect to the YSQL database after upgrading to v1.2.12. There are two ways to work around this problem:

* If you don't care about preserving your existing data, then you can delete your older cluster, upgrade to v1.2.12 and create a new cluster.
* If you want to continue using your existing data, then please save your older data (in the form of SQL statements), delete the older cluster, upgrade to v1.2.12, create a new cluster and then load the previously saved data.

## YSQL Changes
* [YSQL] Fix scan operator when range key is not fully-specified.[#1576](https://github.com/YugaByte/yugabyte-db/issues/1576)
* [YSQL] Fix ORDER BY range column of a secondary index.[#1591](https://github.com/YugaByte/yugabyte-db/issues/1591)
* [YSQL] Add YSQL RPCs to tserver utilz page.[#1446](https://github.com/YugaByte/yugabyte-db/issues/1446)

## System Improvements
*  Resolve ABA problem in LockFreeStackResolve ABA problem in LockFreeStack.[#1561](https://github.com/YugaByte/yugabyte-db/issues/1561)
* Fix recursive locking in Batcher.[#1584](https://github.com/YugaByte/yugabyte-db/issues/1584)
* Use boost::atomic for 16-bytes structures.[#1189](https://github.com/YugaByte/yugabyte-db/issues/1189)
* Fix integer overflow during Raft log read path.[#1606](https://github.com/YugaByte/yugabyte-db/issues/1606)
* Fix concurrent access to primary table info in RaftGroupMetadata.[#1631](https://github.com/YugaByte/yugabyte-db/issues/1631)
* A new priority-aware thread pool implementation for compactions and flushes.[#1314](https://github.com/YugaByte/yugabyte-db/issues/1314)
* Create mem trackers that reflects TC Malloc stats.[#1633](https://github.com/YugaByte/yugabyte-db/issues/1633)
* Make sure we don't read an invalid replicate index from the footer.[#1625](https://github.com/YugaByte/yugabyte-db/issues/1625)

# Performance Benchmarks

This section gives an overview of the performance of this release. The benchmarks were done on the following setup:
* 3 nodes with 16-vCPUs
* Replication factor = 3
* Each key-value is ~64 bytes (combined)
* See [setup details]() for more info

## Summary

| API          | Workload            | Type              | Throughput | Latency  | Avg CPU on DB node |
| --------- | ---------------  | ------------- | -----------  | -------- | ------------------- |
| YCQL      | KeyValue             | 100% Reads |   218K           |  1.17ms  | 48%      |
| YCQL      | KeyValue             | 100% Writes |   73K            |   3.5ms   | 44%     |
| YCQL      | Batched Writes   | 100% Writes | 247K            |   26ms   | 52%     |
| YCQL      | Secondary Index | 100% Reads |   187K          |   1.4ms   | 44%     |
| YCQL      | Secondary Index | 100% Writes |   5K             |   12.9ms   | 51%    |


## Details

### YCQL KeyValue

```
	Workload CassandraKeyValue with 256 writers and 0 readers: 
+--------------------------------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+
| Metric                         | mean      | min       | max       | std.dev   | median    | 1%        | 5%        | 10%       | 90%       | 95%       | 99%       |
| Read throughput, ops/sec       | 0         | 0         | 0         | 0         | 0         | 0         | 0         | 0         | 0         | 0         | 0         |
| Read latency, ms/op            | 0         | 0         | 0         | 0         | 0         | 0         | 0         | 0         | 0         | 0         | 0         |
| Write throughput, ops/sec      | 73037.05  | 68884.95  | 74102.43  | 1211.67   | 73480.55  | 68884.95  | 68884.95  | 71993.35  | 74051.57  | 74102.43  | 74102.43  |
| Write latency, ms/op           | 3.50      | 3.45      | 3.72      | 0.06      | 3.48      | 3.45      | 3.45      | 3.45      | 3.55      | 3.72      | 3.72      |
| Load tester CPU, user, %       | 16.91     | 14.90     | 18.10     | 0.88      | 17.30     | 14.90     | 14.91     | 15.18     | 17.70     | 18.08     | 18.10     |
| Load tester CPU, system, %     | 9.20      | 7.60      | 10.10     | 0.83      | 9.65      | 7.60      | 7.60      | 7.72      | 9.90      | 10.09     | 10.10     |
| Cluster node CPU, user, %      | 32.93     | 23.80     | 38        | 3.45      | 32.45     | 23.80     | 24.31     | 30.13     | 37.20     | 37.49     | 38        |
| Cluster node CPU, system, %    | 15.43     | 12.70     | 16.60     | 0.82      | 15.40     | 12.70     | 13.22     | 14.43     | 16.30     | 16.50     | 16.60     |
+--------------------------------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+

	Workload CassandraKeyValue with 192 writers and 16 readers: 
+--------------------------------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+
| Metric                         | mean      | min       | max       | std.dev   | median    | 1%        | 5%        | 10%       | 90%       | 95%       | 99%       |
| Read throughput, ops/sec       | 18493.93  | 17156.62  | 19190.41  | 587.15    | 18606.10  | 17156.62  | 17156.62  | 17440.30  | 19151.33  | 19190.41  | 19190.41  |
| Read latency, ms/op            | 0.87      | 0.83      | 0.93      | 0.03      | 0.86      | 0.83      | 0.83      | 0.83      | 0.92      | 0.93      | 0.93      |
| Write throughput, ops/sec      | 60571.82  | 58544.09  | 62509.31  | 983.23    | 60550.72  | 58544.09  | 58544.09  | 59035.93  | 62380.73  | 62509.31  | 62509.31  |
| Write latency, ms/op           | 3.17      | 3.07      | 3.28      | 0.05      | 3.17      | 3.07      | 3.07      | 3.08      | 3.25      | 3.28      | 3.28      |
| Load tester CPU, user, %       | 17.68     | 16        | 20.70     | 0.87      | 17.55     | 16        | 16.06     | 17.20     | 18.39     | 20.58     | 20.70     |
| Load tester CPU, system, %     | 8.73      | 8.10      | 10.40     | 0.54      | 8.50      | 8.10      | 8.11      | 8.22      | 9.58      | 10.36     | 10.40     |
| Cluster node CPU, user, %      | 35.62     | 32.90     | 38.80     | 1.71      | 34.95     | 32.90     | 33.41     | 33.72     | 38.10     | 38.39     | 38.80     |
| Cluster node CPU, system, %    | 15.38     | 14.90     | 15.80     | 0.19      | 15.40     | 14.90     | 15.01     | 15.10     | 15.60     | 15.70     | 15.80     |
+--------------------------------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+

	Workload CassandraKeyValue with 128 writers and 64 readers: 
+--------------------------------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+
| Metric                         | mean      | min       | max       | std.dev   | median    | 1%        | 5%        | 10%       | 90%       | 95%       | 99%       |
| Read throughput, ops/sec       | 71301.76  | 64468.86  | 78149.80  | 6074.55   | 69364.13  | 64468.86  | 64468.86  | 64563.72  | 78080.94  | 78149.80  | 78149.80  |
| Read latency, ms/op            | 0.90      | 0.82      | 0.99      | 0.08      | 0.92      | 0.82      | 0.82      | 0.82      | 0.99      | 0.99      | 0.99      |
| Write throughput, ops/sec      | 42974.61  | 40464.12  | 45473.25  | 1883.46   | 42860     | 40464.12  | 40464.12  | 40927.76  | 45053.88  | 45473.25  | 45473.25  |
| Write latency, ms/op           | 2.98      | 2.82      | 3.16      | 0.13      | 2.98      | 2.82      | 2.82      | 2.84      | 3.13      | 3.16      | 3.16      |
| Load tester CPU, user, %       | 21.46     | 19.10     | 23.30     | 1.28      | 21.60     | 19.10     | 19.15     | 20        | 23.08     | 23.29     | 23.30     |
| Load tester CPU, system, %     | 10.17     | 9.20      | 10.90     | 0.56      | 10.30     | 9.20      | 9.21      | 9.31      | 10.80     | 10.89     | 10.90     |
| Cluster node CPU, user, %      | 38.31     | 28.30     | 41.60     | 3.01      | 39.80     | 28.30     | 34.10     | 34.34     | 41.09     | 41.20     | 41.60     |
| Cluster node CPU, system, %    | 13.11     | 11.10     | 14        | 0.51      | 13.15     | 11.10     | 11.66     | 12.80     | 13.50     | 13.60     | 14        |
+--------------------------------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+

	Workload CassandraKeyValue with 64 writers and 128 readers: 
+--------------------------------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+
| Metric                         | mean      | min       | max       | std.dev   | median    | 1%        | 5%        | 10%       | 90%       | 95%       | 99%       |
| Read throughput, ops/sec       | 113115.50 | 111032.59 | 114690.37 | 1211.91   | 113593.04 | 111032.59 | 111032.59 | 111280.88 | 114639.78 | 114690.37 | 114690.37 |
| Read latency, ms/op            | 1.13      | 1.11      | 1.15      | 0.01      | 1.13      | 1.11      | 1.11      | 1.12      | 1.15      | 1.15      | 1.15      |
| Write throughput, ops/sec      | 21349.23  | 20717.49  | 21753.92  | 264.27    | 21335.10  | 20717.49  | 20717.49  | 20915.45  | 21699.52  | 21753.92  | 21753.92  |
| Write latency, ms/op           | 3.00      | 2.94      | 3.09      | 0.04      | 3         | 2.94      | 2.94      | 2.95      | 3.06      | 3.09      | 3.09      |
| Load tester CPU, user, %       | 23.54     | 21.80     | 27.90     | 1.24      | 23.50     | 21.80     | 21.81     | 22.03     | 24.36     | 27.72     | 27.90     |
| Load tester CPU, system, %     | 10.43     | 9.60      | 12.10     | 0.53      | 10.45     | 9.60      | 9.61      | 9.71      | 10.79     | 12.03     | 12.10     |
| Cluster node CPU, user, %      | 38.33     | 34.30     | 42.90     | 3.03      | 37.40     | 34.30     | 34.62     | 35.21     | 42.60     | 42.89     | 42.90     |
| Cluster node CPU, system, %    | 11.41     | 10.30     | 12.40     | 0.52      | 11.30     | 10.30     | 10.60     | 10.80     | 12.10     | 12.20     | 12.40     |
+--------------------------------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+

	Workload CassandraKeyValue with 0 writers and 256 readers: 
+--------------------------------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+
| Metric                         | mean      | min       | max       | std.dev   | median    | 1%        | 5%        | 10%       | 90%       | 95%       | 99%       |
| Read throughput, ops/sec       | 218803.58 | 209206.20 | 225392    | 4068.91   | 218849.97 | 209206.20 | 209206.20 | 213317.10 | 224702.67 | 225392    | 225392    |
| Read latency, ms/op            | 1.17      | 1.14      | 1.22      | 0.02      | 1.17      | 1.14      | 1.14      | 1.14      | 1.20      | 1.22      | 1.22      |
| Write throughput, ops/sec      | 0         | 0         | 0         | 0         | 0         | 0         | 0         | 0         | 0         | 0         | 0         |
| Write latency, ms/op           | 0         | 0         | 0         | 0         | 0         | 0         | 0         | 0         | 0         | 0         | 0         |
| Load tester CPU, user, %       | 31.19     | 13        | 34.70     | 4.52      | 32.20     | 13        | 13        | 30.10     | 33.10     | 34.70     | 34.70     |
| Load tester CPU, system, %     | 13.48     | 5.70      | 16.20     | 2.08      | 13.70     | 5.70      | 5.70      | 12.80     | 15.70     | 16.20     | 16.20     |
| Cluster node CPU, user, %      | 36.82     | 17.10     | 46.40     | 6.92      | 34.90     | 17.10     | 20.36     | 31.92     | 45.70     | 45.90     | 46.40     |
| Cluster node CPU, system, %    | 7.30      | 5.60      | 9.70      | 1.54      | 6.50      | 5.60      | 5.70      | 5.70      | 9.50      | 9.50      | 9.70      |
+--------------------------------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+
```


### YCQL Secondary Index

```
	Workload CassandraSecondaryIndex with 64 writers and 0 readers: 
+--------------------------------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+
| Metric                         | mean      | min       | max       | std.dev   | median    | 1%        | 5%        | 10%       | 90%       | 95%       | 99%       |
| Read throughput, ops/sec       | 0         | 0         | 0         | 0         | 0         | 0         | 0         | 0         | 0         | 0         | 0         |
| Read latency, ms/op            | 0         | 0         | 0         | 0         | 0         | 0         | 0         | 0         | 0         | 0         | 0         |
| Write throughput, ops/sec      | 4957.63   | 4654.57   | 5466.63   | 190.85    | 4935.75   | 4654.57   | 4654.57   | 4701.88   | 5270.11   | 5466.63   | 5466.63   |
| Write latency, ms/op           | 12.92     | 11.71     | 13.75     | 0.48      | 12.96     | 11.71     | 11.71     | 12.15     | 13.61     | 13.75     | 13.75     |
| Load tester CPU, user, %       | 2.23      | 2         | 3.20      | 0.28      | 2.10      | 2         | 2         | 2         | 2.64      | 3.20      | 3.20      |
| Load tester CPU, system, %     | 1.55      | 1.40      | 1.80      | 0.11      | 1.50      | 1.40      | 1.40      | 1.40      | 1.80      | 1.80      | 1.80      |
| Cluster node CPU, user, %      | 32.02     | 29.60     | 33.70     | 0.96      | 32.20     | 29.60     | 29.70     | 30.62     | 33.26     | 33.38     | 33.70     |
| Cluster node CPU, system, %    | 19.25     | 17.80     | 20        | 0.52      | 19.30     | 17.80     | 18.06     | 18.42     | 19.88     | 19.94     | 20        |
+--------------------------------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+

	Workload CassandraSecondaryIndex with 32 writers and 64 readers: 
+--------------------------------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+
| Metric                         | mean      | min       | max       | std.dev   | median    | 1%        | 5%        | 10%       | 90%       | 95%       | 99%       |
| Read throughput, ops/sec       | 59031.00  | 57817.73  | 62446.65  | 1109.89   | 58745.42  | 57817.73  | 57817.73  | 58043.71  | 60768.14  | 62446.65  | 62446.65  |
| Read latency, ms/op            | 1.08      | 1.02      | 1.11      | 0.02      | 1.09      | 1.02      | 1.02      | 1.06      | 1.10      | 1.11      | 1.11      |
| Write throughput, ops/sec      | 3131.73   | 3076.68   | 3206.08   | 31.21     | 3127.82   | 3076.68   | 3076.68   | 3089.73   | 3176.39   | 3206.08   | 3206.08   |
| Write latency, ms/op           | 10.22     | 9.98      | 10.40     | 0.10      | 10.23     | 9.98      | 9.98      | 10.08     | 10.36     | 10.40     | 10.40     |
| Load tester CPU, user, %       | 14.97     | 14.20     | 15.70     | 0.41      | 15        | 14.20     | 14.20     | 14.52     | 15.62     | 15.70     | 15.70     |
| Load tester CPU, system, %     | 8.25      | 7.20      | 8.60      | 0.34      | 8.30      | 7.20      | 7.20      | 7.60      | 8.60      | 8.60      | 8.60      |
| Cluster node CPU, user, %      | 37.01     | 34.70     | 40.10     | 1.55      | 36.50     | 34.70     | 34.92     | 35.22     | 39.18     | 39.32     | 40.10     |
| Cluster node CPU, system, %    | 14.41     | 13.80     | 14.80     | 0.26      | 14.50     | 13.80     | 13.90     | 14.02     | 14.80     | 14.80     | 14.80     |
+--------------------------------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+

	Workload CassandraSecondaryIndex with 16 writers and 128 readers: 
+--------------------------------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+
| Metric                         | mean      | min       | max       | std.dev   | median    | 1%        | 5%        | 10%       | 90%       | 95%       | 99%       |
| Read throughput, ops/sec       | 104821.67 | 99481.21  | 120241.63 | 7320.25   | 101330.40 | 99481.21  | 99481.21  | 99546.21  | 119939.73 | 120241.63 | 120241.63 |
| Read latency, ms/op            | 1.23      | 1.06      | 1.29      | 0.08      | 1.26      | 1.06      | 1.06      | 1.07      | 1.29      | 1.29      | 1.29      |
| Write throughput, ops/sec      | 1949.49   | 1929.03   | 1990.20   | 17.51     | 1943.61   | 1929.03   | 1929.03   | 1931.10   | 1978.04   | 1990.20   | 1990.20   |
| Write latency, ms/op           | 8.21      | 8.04      | 8.29      | 0.07      | 8.23      | 8.04      | 8.04      | 8.09      | 8.28      | 8.29      | 8.29      |
| Load tester CPU, user, %       | 19.35     | 18.10     | 22.90     | 1.18      | 19        | 18.10     | 18.10     | 18.26     | 21.06     | 22.90     | 22.90     |
| Load tester CPU, system, %     | 8.89      | 8.40      | 10.30     | 0.59      | 8.60      | 8.40      | 8.40      | 8.40      | 10.06     | 10.30     | 10.30     |
| Cluster node CPU, user, %      | 40.96     | 36.50     | 44.20     | 2.31      | 41.90     | 36.50     | 36.72     | 37.20     | 43.18     | 43.62     | 44.20     |
| Cluster node CPU, system, %    | 11.82     | 11.10     | 12.30     | 0.33      | 11.90     | 11.10     | 11.10     | 11.20     | 12.20     | 12.24     | 12.30     |
+--------------------------------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+

	Workload CassandraSecondaryIndex with 0 writers and 256 readers: 
+--------------------------------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+
| Metric                         | mean      | min       | max       | std.dev   | median    | 1%        | 5%        | 10%       | 90%       | 95%       | 99%       |
| Read throughput, ops/sec       | 187239.42 | 185195.56 | 188133.96 | 804.53    | 187287.10 | 185195.56 | 185195.56 | 185805.85 | 188109.85 | 188133.96 | 188133.96 |
| Read latency, ms/op            | 1.37      | 1.36      | 1.38      | 0.01      | 1.37      | 1.36      | 1.36      | 1.36      | 1.38      | 1.38      | 1.38      |
| Write throughput, ops/sec      | 0         | 0         | 0         | 0         | 0         | 0         | 0         | 0         | 0         | 0         | 0         |
| Write latency, ms/op           | 0         | 0         | 0         | 0         | 0         | 0         | 0         | 0         | 0         | 0         | 0         |
| Load tester CPU, user, %       | 19.78     | 0.90      | 29.40     | 11.76     | 26.90     | 0.90      | 0.99      | 1.50      | 27.87     | 29.17     | 29.40     |
| Load tester CPU, system, %     | 8.55      | 0.70      | 14        | 4.88      | 11.45     | 0.70      | 0.74      | 1         | 11.80     | 13.67     | 14        |
| Cluster node CPU, user, %      | 34.88     | 12.30     | 48.50     | 9.85      | 36.65     | 12.30     | 16.62     | 22.21     | 48.20     | 48.36     | 48.50     |
| Cluster node CPU, system, %    | 8.70      | 4.30      | 17.20     | 4.21      | 7.70      | 4.30      | 4.50      | 4.67      | 16.56     | 16.93     | 17.20     |
+--------------------------------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+
```

### YCSB

```
+--------------+----------------------+--------------------+--------------------+--------------------+
| Workload     | Throughput (ops/sec) | Op Type            | Avg Latency (us)   | 99th% Latency (us) |
| workloada    | 75054.10             | READ               | 2527.53            | 20895              |
|              |                      | UPDATE             | 4032.19            | 25391              |
|              |                      |                    |                    |                    |
| workloadb    | 89653.56             | READ               | 2711.76            | 7967               |
|              |                      | UPDATE             | 3391.83            | 8983               |
|              |                      |                    |                    |                    |
| workloadc    | 89456.49             | READ               | 2753.47            | 7939               |
|              |                      |                    |                    |                    |
| workloadd    | 87712.48             | READ               | 2765.26            | 8327               |
|              |                      | INSERT             | 3598.85            | 9671               |
|              |                      |                    |                    |                    |
| workloade    | 16485.62             | INSERT             | 14684.71           | 70847              |
|              |                      | SCAN               | 14963.57           | 70271              |
|              |                      |                    |                    |                    |
| workloadf    | 49282.21             | READ               | 2956.77            | 20815              |
|              |                      | READ-MODIFY-WRITE  | 7039.35            | 29743              |
|              |                      | UPDATE             | 4074.65            | 23871              |
|              |                      |                    |                    |                    |
+--------------+----------------------+--------------------+--------------------+--------------------+
```

",105944401
457,False,False,2019-04-17T21:36:44Z,2019-04-17T21:48:07Z,"# Overview of Changes

**[IMPORTANT]** This version includes a backward incompatible file format change for YSQL. This means that if you have an existing cluster with
YSQL schema, then you will not be able to connect to the YSQL database after upgrading to v1.2.4. There are two ways to work around this problem:

* If you don't care about preserving your existing data, then you can delete your older cluster, upgrade to v1.2.4 and create a new cluster.
* If you want to continue using your existing data, then please save your older data (in the form of SQL statements), delete the older cluster, upgrade to v1.2.4, create a new cluster and then load the previously saved data.

## YSQL Changes
* Added support for primary keys. It is now possible to create a table with a primary key. [#955](https://github.com/YugaByte/yugabyte-db/issues/955)
* Added support for temporary tables. [#805](https://github.com/YugaByte/yugabyte-db/issues/1090)
* Added support for CYCLE option in CREATE SEQUENCE statement. [#993](https://github.com/YugaByte/yugabyte-db/issues/993)
* Enabled `SET TRANSACTION READ WRITE` statement. [#1081](https://github.com/YugaByte/yugabyte-db/issues/1081)
* Support RelationType in TableInfo to distinguish between system tables, user tables and user indexes. [#906](https://github.com/YugaByte/yugabyte-db/issues/906)

## Bug Fixes
* Fixed a crash in tserver that is observed while inserting null value into an indexed column. [#945](https://github.com/YugaByte/yugabyte-db/issues/945)
* Fixed a bug where indexes on system catalog tables were not being updated during DDL. [#1083](https://github.com/YugaByte/yugabyte-db/issues/1083)
* Fixed detection of single row transactions on tables that have primary keys.
* Fixed MiniMaster startup race condition in test infrastructure. [#1040](https://github.com/YugaByte/yugabyte-db/issues/1040)

## System Improvements
* Reduce per-connection overhead for cache preloading. [#1090](https://github.com/YugaByte/yugabyte-db/issues/1090) [#1091](https://github.com/YugaByte/yugabyte-db/issues/1091)
* Faster release of sending buffers to reduce memory consumption when leader sends large updates to followers who are lagging behind. [#1079](https://github.com/YugaByte/yugabyte-db/issues/1079)
* Parallelize DNS resolution while filling system.peers and system.local tables [#1000](https://github.com/YugaByte/yugabyte-db/issues/1000)
* Script for post-processing test results and generating JSON-based result files.
* Improve stability of QLTransactionTest.IntentsCleanupAfterRestart. [#1102](https://github.com/YugaByte/yugabyte-db/issues/1102)

# Key Commits

- [[`f2ecaa1`](https://github.com/YugaByte/yugabyte-db/commit/f2ecaa1c58fcce2e488f15af1840309e8e6a8885)]  [YSQL] Fix single-row-txn detection after primary key change
- [[`90680ca`](https://github.com/YugaByte/yugabyte-db/commit/90680caa7188b92d9a045db57f52d05f76174834)]  [#1102]: Improve stability of QLTransactionTest.IntentsCleanupAfterRestart
- [[`a4c614f`](https://github.com/YugaByte/yugabyte-db/commit/a4c614f4a314b45bc23101c58cb8a49f05fbbd47)]  JSON-based test reports
- [[`33835b0`](https://github.com/YugaByte/yugabyte-db/commit/33835b0735a2a1020d938336dc8092225373a20d)]  [#1079]: Release sending buffers as soon as possible
- [[`1bc77da`](https://github.com/YugaByte/yugabyte-db/commit/1bc77da5fb80b004dac68c7e77a17a54676772ed)]  ENG-4682 (#906): Support RelationType (user table, index, system table) in TableInfo
- [[`1dedcd1`](https://github.com/YugaByte/yugabyte-db/commit/1dedcd1f4481d50a32517f3af2b4d5e188abf17d)]  ENG-4943 #945 [YSQL] Correct handling for NULL value in indexed column
- [[`465b6d6`](https://github.com/YugaByte/yugabyte-db/commit/465b6d6f68d8d19dba6c35c0f95be52507dc6d77)]  [YSQL] #1090 #1091 Reduce per-connection overhead for cache preloading
- [[`382b89c`](https://github.com/YugaByte/yugabyte-db/commit/382b89cf56ae68345592c32b615479688314e402)]  [YSQL] ENG-4601 (#805): Add support for temporary tables
- [[`5165f01`](https://github.com/YugaByte/yugabyte-db/commit/5165f01dca2f5240395fb5fd4b7664e67e928864)]  #1081 [YSQL] Enable READ WRITE transaction
- [[`9f31c41`](https://github.com/YugaByte/yugabyte-db/commit/9f31c41daed596d6adfd04472464782689fe89d4)]  ENG-4927: #1040: Fix MiniMaster startup race condition
- [[`be0908b`](https://github.com/YugaByte/yugabyte-db/commit/be0908b45827c69ff010d9263ff865310ce722a1)]  [YSQL] #955: Handle primary key as an index
- [[`4b48e25`](https://github.com/YugaByte/yugabyte-db/commit/4b48e25b3a1fb01b0ea0067b1d59c9e0feae8c21)]  ENG-4872: #1000: Parallel DNS resolution while filling system.peers and system.local tables
- [[`4096f59`](https://github.com/YugaByte/yugabyte-db/commit/4096f596b5d3428e44bbc139757865ed979cd12c)]  ENG-4900: Add external mini cluster test with TLS support
- [[`34ee0fc`](https://github.com/YugaByte/yugabyte-db/commit/34ee0fc1c891db6cd7aa22447854a5afb0edfd01)]  [YSQL] #1083: Handle sys catalog index updates
- [[`ac52116`](https://github.com/YugaByte/yugabyte-db/commit/ac52116e9ad6136427630939a90becd40c7f54ae)]  #993: [YSQL] Add support for CYCLE option in CREATE SEQUENCE
- [[`3149f36`](https://github.com/YugaByte/yugabyte-db/commit/3149f3694320d53dc4a94f8ebb0dd892f79bc581)]  ENG-4363, #668: Support JSON operator on INSERT (Part 1 - Refactoring)
- [[`a3ea483`](https://github.com/YugaByte/yugabyte-db/commit/a3ea483329710ff7b01c68ca54198864ccf6db1b)]
- [[`b3a60ee`](https://github.com/YugaByte/yugabyte-db/commit/b3a60ee7615b430c00e62c2105916c7d74417dbc)]  [yb-docker-ctl] Save initdb log (#1087)
- [[`b131fbc`](https://github.com/YugaByte/yugabyte-db/commit/b131fbc41cabba6e862d4a5c55c902309e97d792)]  ENG-4888: #1031: Make YCQL index name optional
- [[`9d333f7`](https://github.com/YugaByte/yugabyte-db/commit/9d333f7c988aca9755fab64c10b996b2a0fddfa4)]  #1064: Fix data race with YQL permissions cache
- [[`4a56fe1`](https://github.com/YugaByte/yugabyte-db/commit/4a56fe1c11d36e45cfd05898818633bcbeb21feb)]  #1038: Change FLAGS_remote_boostrap_rate_limit_bytes_per_sec to FLAGS_remote_bootstrap_rate_limit_bytes_per_sec
- [[`56a6029`](https://github.com/YugaByte/yugabyte-db/commit/56a6029cc614fa5e390949130d285aa1e587ea30)]  #752: Add TLS encryption support to yb-admin.
- [[`d9b6385`](https://github.com/YugaByte/yugabyte-db/commit/d9b63854ac04b1f13f6d4c425f838be50495ca6c)]  [YSQL] #1066: Fix memory leak in ResourceOwner
- [[`fb4c1a2`](https://github.com/YugaByte/yugabyte-db/commit/fb4c1a263a4469e24aa7284da86e1651b21fd2cd)]  Added yb-docker-ctl to CE (#1077)
- [[`046b4b6`](https://github.com/YugaByte/yugabyte-db/commit/046b4b6278bf4c0a75d9fa0f5a227fd418888def)]  ENG-4855: #977: Handle restart read in YSQL
- [[`30725bf`](https://github.com/YugaByte/yugabyte-db/commit/30725bf31270df89640a0813b540dce02c849312)]  ENG-4343: #655: Pick transaction read time at tablet server when possible
- [[`0341b29`](https://github.com/YugaByte/yugabyte-db/commit/0341b2961a772f1c7d4ab071b3fdb537ab80d349)]  [YSQL] #1067: Buffer create index write operations only for initdb
- [[`78ca75a`](https://github.com/YugaByte/yugabyte-db/commit/78ca75a92dc26e6b961953dbb7355698ecb02201)]  [#1050]: Add Tablet Server capabilities
- [[`9d724d5`](https://github.com/YugaByte/yugabyte-db/commit/9d724d5de38531f6029f22ff949f6bdcb491268a)]  ENG-4790: Removing most of yb-loadtester from repo due to migration to standalone yb-sample-apps repo
- [[`bbcc67b`](https://github.com/YugaByte/yugabyte-db/commit/bbcc67b5de8950d9aef760aec9c6fb57c1770821)]  ENG-4891: Removing the SQL RPCs button.
- [[`14279cc`](https://github.com/YugaByte/yugabyte-db/commit/14279cc3162ae435ee22e425cbd81de19c16bbd6)]  [YCQL] #1042: Fix ASAN issue in YCQL executor restart
- [[`cc3584f`](https://github.com/YugaByte/yugabyte-db/commit/cc3584fcc9e3b159ae12fea08fb05f9e5169b1e4)]  ENG-4800: #952: Use call buffer for receive from socket
- [[`8715be3`](https://github.com/YugaByte/yugabyte-db/commit/8715be3cc23f5c9b69462c6a48dd1b39c665c56b)]  [YSQL] #1051: Bulk insert in initdb
- [[`987abc6`](https://github.com/YugaByte/yugabyte-db/commit/987abc64527bdde5f2bf3f9d548023c38e86fe4e)]  ENG-4877 (#1009): yb-ctl enhancements
- [[`0f261a9`](https://github.com/YugaByte/yugabyte-db/commit/0f261a961e46b11391e8051af52c8261977cdef6)]  [YSQL] 1049 ASAN reported memory leaks in Postgres
- [[`9eaf15b`](https://github.com/YugaByte/yugabyte-db/commit/9eaf15b81f330a028ea22c685d9d3b9bd0217941)]  Add a new pattern for NFS directories: /Volumes/net
- [[`3a61698`](https://github.com/YugaByte/yugabyte-db/commit/3a616982fd71c21e26546dbbad6af2423938fa72)]  [#1041]: Skip dumping of finished call
- [[`a322d95`](https://github.com/YugaByte/yugabyte-db/commit/a322d95ec7531ca05323d3b869e17724f47b82b9)]  [YSQL] #711 Add support for all datatypes
- [[`7e2c89c`](https://github.com/YugaByte/yugabyte-db/commit/7e2c89c9b2aa5e66eee4da6465982c63654ff3fb)]  [#1030]: Add transactional retry writes tests        2) Second
- [[`request`](https://github.com/YugaByte/yugabyte-db/commit/request)]licated.    Fixed by returning AlreadyPresent status and handling it in
- [[`callbac`](https://github.com/YugaByte/yugabyte-db/commit/callback.)] not handled correctly.    For instance when request cannot be processed because of service shutdown, we could stop retrying to apply the operation.    Fixed by correct handling of such errors.
- [[`509c5a2`](https://github.com/YugaByte/yugabyte-db/commit/509c5a2bcaeeaa427aa4b7d208c2cc5d417afa5a)]  #921: Fixed: [YCQL] improve error messages related to index DDL
- [[`e48b7da`](https://github.com/YugaByte/yugabyte-db/commit/e48b7da0d6a5409c2951212d6ca38ec71356ffa4)]  ENG-4468: Always perform only one server rpc call for readiness check.
- [[`0f8fdd9`](https://github.com/YugaByte/yugabyte-db/commit/0f8fdd9d538fbfe881e158997fd48535c614139b)]  [YSQL] ENG-4831 (#969): Enable drop cascade
- [[`85836b5`](https://github.com/YugaByte/yugabyte-db/commit/85836b5938195b6b4aad63a0402aeb41aa0561d4)]  Allow spaces around equality sign in @RunWith(value=SomeClass) annotation
- [[`e533efc`](https://github.com/YugaByte/yugabyte-db/commit/e533efc6c9b2781601c9bf7e7a72b82ab9207f5c)]  ENG-4844, #949: Treat TUPLE as a keyword
- [[`40dd31f`](https://github.com/YugaByte/yugabyte-db/commit/40dd31f91ca05abf6e8878ef4f8a98ad0a17806a)]  [#984]: Allow running C++ test by specifying only gtest_filter
- [[`9cb4f10`](https://github.com/YugaByte/yugabyte-db/commit/9cb4f10cde2a9cecd0ef1b28139654e0030a9410)]  ENG-4746: #925: Implement change_blacklist & get_universe_config commands in yb-admin
- [[`9e28eee`](https://github.com/YugaByte/yugabyte-db/commit/9e28eee62748c205f283c08164f4b0462da92f6e)]  [YSQL] #995: Raise error on unsupported WHERE condition with secondary index
- [[`9fd097e`](https://github.com/YugaByte/yugabyte-db/commit/9fd097e47130dfd018f3b94556735c94c5dd5bc3)]  [#965] Reduce the number of concurrent connections to YB masters and tservers from PostgreSQL backend processes
- [[`7ea3cd0`](https://github.com/YugaByte/yugabyte-db/commit/7ea3cd0541100fe7e20ac0f64fb80299b2f0f20f)]  [YSQL] ENG-4839 (#976): Handle postgres session termination correctly in YB mode
- [[`f55f1c0`](https://github.com/YugaByte/yugabyte-db/commit/f55f1c0bc13698f89be160addacc0c92d6005f4e)]  #991: Fixed TestRpc.TestDisconnect
- [[`aa8c4ec`](https://github.com/YugaByte/yugabyte-db/commit/aa8c4ec18ec46dbda7d71d1cc3b461a94e299a26)]  #999: [YSQL] SELECTing directly from a sequence throws an error
- [[`8d226ce`](https://github.com/YugaByte/yugabyte-db/commit/8d226ceaa4be2270900be2013292fdb114bf6cd4)]  ENG-4852: Do not pass Datum data types to ybc_pgate
- [[`f702d72`](https://github.com/YugaByte/yugabyte-db/commit/f702d726e9de8981e263b57a40ef89e49566e677)]  [YSQL] #979: Fix ORDER BY query using secondary index
- [[`66a94f3`](https://github.com/YugaByte/yugabyte-db/commit/66a94f313604a71e331d2a39d875d3d22b9fd123)]  ENG-4840 (#987): Fix incorrect count for system tablet leader count
- [[`c847562`](https://github.com/YugaByte/yugabyte-db/commit/c84756224e1d93610c8d696b50781e6c6d022f6e)]  #964: Change compaction and remote bootstrap rate defaults.
- [[`5ed041c`](https://github.com/YugaByte/yugabyte-db/commit/5ed041c276818d71ae007facf8f6dc1251f25afb)]  #788 Optimize select statements where a clustering-key needs to be in a given range
- [[`0c00885`](https://github.com/YugaByte/yugabyte-db/commit/0c00885779e696371fcd685d118c5008a5fd2dca)]  [#933]: Leader lease revocation
- [[`03b996d`](https://github.com/YugaByte/yugabyte-db/commit/03b996d7c89947a841ae83115ca3a1e537dfba55)]  ENG-4746: #925: Migrate missing java yb-cli functionality to yb-admin (Preparation)",105944401
458,False,False,2019-03-13T00:54:21Z,2019-03-13T16:33:34Z,"# Overview of Changes

Theme of this release: PostgreSQL, PostgreSQL, PostgreSQL! YSQL is a distributed PostgreSQL that can **scale-out**, **tolerate failures** and has **no single point of failure**.


Support has been added for a ton of Postgres functionality. The following is a list of some of the functionality:

### DDL statements
* CREATE, DROP and TRUNCATE tables

### Data types
* All primitive types including numeric types (integers and floats), text data types, byte arrays, date-time types
* Support for UUID and SERIAL
* Support for JSONB

### DML statements
* INSERT, UPDATE, SELECT and DELETE statements
* JOIN, WHERE clauses, GROUP BY, ORDER BY, LIMIT, OFFSET and SEQUENCES

### Transactions
* ABORT, ROLLBACK, BEGIN, END, and COMMIT

### Miscellaneous
* Expressions: Built-in functions and operators
* VIEWs
* EXPLAIN PLAN
* PREPARE-BIND-EXECUTE
* JDBC Support



# Key Commits

- [[`aef1a1f`](https://github.com/YugaByte/yugabyte-db/commit/aef1a1fa7eb1c43872fab267e40cb988708d2873)]  ENG-4683 (#874): Fix user table UI to exclude transactions and sequences tables
- [[`c60921f`](https://github.com/YugaByte/yugabyte-db/commit/c60921f4b0147745a1264a5a2a5f744196199763)]  ENG-4681 [YSQL] Support INTERVAL for date/time datatypes
- [[`4927d38`](https://github.com/YugaByte/yugabyte-db/commit/4927d383b5d79fbd6cf0ef9cf7a0c46fa5d37579)]  [YSQL] ENG-4807 (#957) Fix logs wrongly reporting that YugaByte transactions are not enabled
- [[`4e69172`](https://github.com/YugaByte/yugabyte-db/commit/4e69172eed3b7991cf068ad634931856aa67763b)]  ENG-4780 (#930): Fix postgres server crash while creating index on existing table with data
- [[`f004732`](https://github.com/YugaByte/yugabyte-db/commit/f0047327ccb4233947634492232326a403fb7543)]  #972: ENG-4808: Fixed TabletInvoker::SelectTabletServer
- [[`652bb5e`](https://github.com/YugaByte/yugabyte-db/commit/652bb5ec708b6fbc9980d16318ef3c4d0b9ed3f0)]  [#959]: Groups threads by stack trace in /threadz
- [[`d33eaa9`](https://github.com/YugaByte/yugabyte-db/commit/d33eaa9873134704db80a62b3ae88a5231c26183)]  #665: [YSQL] Enable support for sequences
- [[`53a1331`](https://github.com/YugaByte/yugabyte-db/commit/53a1331739ea76416965b893de78c66ae6f04553)]  ENG-4801 (#944): yb-ctl improvements for easier onboarding
- [[`dce09da`](https://github.com/YugaByte/yugabyte-db/commit/dce09da4707defb6d92025c76e95950ddb1e8804)]  ENG-4585: #796: Created test that covers case when thread pool is not yet ready for intents cleanup
- [[`bb40833`](https://github.com/YugaByte/yugabyte-db/commit/bb4083370953e66c1615e8a3129acccc0d8cec9c)]  ENG-4468: (#871) Add support for checking if tserver is ready for IO requests.
- [[`e570c1c`](https://github.com/YugaByte/yugabyte-db/commit/e570c1cd29d0c7aa2723370bf660fbf57d2257cf)]  [ENG-3928] [#967] Wait for NFS-based paths to exist in run_tests_on_spark.py
- [[`3399b88`](https://github.com/YugaByte/yugabyte-db/commit/3399b88154b4f85210154fc017429d8aa830b803)]  [YSQL] #255: Separate YCQL, YSQL and YEDIS namespaces
- [[`064d366`](https://github.com/YugaByte/yugabyte-db/commit/064d366b35d64e7750490aaf79ee3c4bd79fa623)]  ENG-4749: #887: Handle failure of delete at start of iteration in PgLibPqTest.SerializableColoring test
- [[`88bb343`](https://github.com/YugaByte/yugabyte-db/commit/88bb343baa11e21cece540b58c3d9edc6db97154)]  #961 Fix instantiation of round-robin policy
- [[`1037c47`](https://github.com/YugaByte/yugabyte-db/commit/1037c47730e15a6a468cc1d9a29c054bcfe2e7e1)]  ENG-4577: Log Replay Count Bugfix and Test #782
- [[`57ca114`](https://github.com/YugaByte/yugabyte-db/commit/57ca114747282d6d08af6abaee5c493700933201)]  ENG-4725: #932: Write RPC should take into account retryable_rpc_single_call_timeout_ms
- [[`e9424ab`](https://github.com/YugaByte/yugabyte-db/commit/e9424abcd8830c492e32ef85aa16cbededc61621)]  [YSQL] #943 Optimize single-row write transactions to avoid distributed txn path.
- [[`c545fb5`](https://github.com/YugaByte/yugabyte-db/commit/c545fb5e8804edb3761343b58ff5217e5173cd36)]  ENG-4783: Misc fixes in shared lock manager
- [[`45bc122`](https://github.com/YugaByte/yugabyte-db/commit/45bc12225159fae64de39402e5ceea63601dcb75)]  ENG-4783: Fixed LockBatch move ctor/assignment
- [[`3db5d55`](https://github.com/YugaByte/yugabyte-db/commit/3db5d550d57d38e0cd62fa7880f93528caede90e)]  Cleanup of stray processes, NFS issues workaround, DXR integration, adjusting RPC timeout and using random PG ports in YSQL
- [[`36431db`](https://github.com/YugaByte/yugabyte-db/commit/36431dbe0d864a55449e02b50e7652e88aeb0bf4)]  Update PostgreSQL code as of the following commit:
- [[`3952394`](https://github.com/YugaByte/yugabyte-db/commit/3952394051cdf1d45882638e3e239ec625db94ff)]  [YSQL] ENG-4757: #902: Restart transaction when it was first executed operation and read restart is required
- [[`d563e50`](https://github.com/YugaByte/yugabyte-db/commit/d563e504ee2769851e3f52f20ff803181fec47ce)]  ENG-4577: Log Replay Count Bugfix and Test #782
- [[`1ed9e95`](https://github.com/YugaByte/yugabyte-db/commit/1ed9e95de4f8502c097a543e1e890376d6f42c29)]  ENG-3558: #920: Replace our own implementation of VarInt with BIGNUM from OpenSSL
- [[`2f6dedc`](https://github.com/YugaByte/yugabyte-db/commit/2f6dedcfc3497967dc0a687e0768e373a2f592cb)]  [#836][ENG-4638] Fix KEYS to not Surface Deleted Keys
- [[`7cf6ccd`](https://github.com/YugaByte/yugabyte-db/commit/7cf6ccdd0760d2e946d114b5c5d55f96be7d705a)]  [#918]: Add a pool of pre-created transaction records to avoid a Raft round-trip for transaction creation on the write path
- [[`7b59cc8`](https://github.com/YugaByte/yugabyte-db/commit/7b59cc8a40be7ce036e4f3a463fade09e14fbac3)]  #897: Fixed yb-tserver failure on SELECT COUNT(column) where column contains null value
- [[`b0314eb`](https://github.com/YugaByte/yugabyte-db/commit/b0314eb7e7e6ebc3a7f4d5a7467e87e95dd0ce2d)]  [YCQL] #916 Making STATIC an unreserved-keyword. Removing REFERENCES from keyword list.
- [[`c886b86`](https://github.com/YugaByte/yugabyte-db/commit/c886b86fc6624309c065e20bb4a3e70880dc121d)]  [YSQL] #917: Support DROP INDEX
- [[`81a80ab`](https://github.com/YugaByte/yugabyte-db/commit/81a80ab31d9263d898ead85bef39c8c474861460)]  [YCQL] (#878) : Add uuid() builtin function support.
- [[`99cc736`](https://github.com/YugaByte/yugabyte-db/commit/99cc7366349abc9b87aeec05854d3002da9d8826)]  ENG-4672: Provide more information (version,
- [[`a101e74`](https://github.com/YugaByte/yugabyte-db/commit/a101e74abcaee6d48e5c8ec2f3dfad6d633b668f)]  ENG-4656 (#852): Enabled pg_depend
- [[`c839f8c`](https://github.com/YugaByte/yugabyte-db/commit/c839f8cb97729747a93973ee82bf2c41dda04ee9)]  Avoid using NFS-shared local Maven repository directory for running Java tests on macOS
- [[`396ff88`](https://github.com/YugaByte/yugabyte-db/commit/396ff8887aa6528b3375c6d884c4070f0bf9ac63)]  [#914]: Split doc_operation into multiple files
- [[`78776a5`](https://github.com/YugaByte/yugabyte-db/commit/78776a50b96712db1666a7906a29421a5958c711)]  [YCQL] #835 Allow OFFSET to be used as column names and identifiers
- [[`362502d`](https://github.com/YugaByte/yugabyte-db/commit/362502dcaca3e9776f15f250273ff621eb7dfb30)]  ENG-4636 (#834): Make transaction failure messages more user friendly
- [[`a746743`](https://github.com/YugaByte/yugabyte-db/commit/a74674335e7273c916d3a4736ff6af20677e56f5)]  #904: ENG-4735: Fixed race between deleting obsolete files and creating new output SST file
- [[`845cdb4`](https://github.com/YugaByte/yugabyte-db/commit/845cdb46a2a5dfcaa0874f80592a8dec308c04a8)]  ENG-4717: #891: Not submitted write operation should block tablet peer shutdown
- [[`1125d1e`](https://github.com/YugaByte/yugabyte-db/commit/1125d1e26a1b8d240ff0bf3e79ff7258c79c1556)]  #771 [YEDIS] Close connection on pub/sub limit
- [[`ae1e30c`](https://github.com/YugaByte/yugabyte-db/commit/ae1e30cd7c86dbec78e3b622992cd7870aa1d961)]  #768 Ping in subscribe mode should return a multi-bulk string
- [[`dd97847`](https://github.com/YugaByte/yugabyte-db/commit/dd97847ee354d81366d48a1baaa43705f2c5ab10)]  [YSQL] ENG-4734 Fix data race with ysql_catalog_version #903
- [[`08c9bbf`](https://github.com/YugaByte/yugabyte-db/commit/08c9bbf38088d85abf31e7c09c6ddea3807ec177)]  ENG-4410 (#696): Retry resolving master addresses instead of erroring out immediately
- [[`3ce7386`](https://github.com/YugaByte/yugabyte-db/commit/3ce7386800c785750a9bb49d18fb9313e8776d91)]  ENG-4680 (#873): Save postgres logs in tserver/logs directory
- [[`1dd8e4b`](https://github.com/YugaByte/yugabyte-db/commit/1dd8e4be765d891fb1164f159867f669282c7cb0)]  ENG-4692 (#868): Enable access share mode for table lock
- [[`63a0d61`](https://github.com/YugaByte/yugabyte-db/commit/63a0d61d3931191c3b5d2b6a5cfd4b1438a7edbf)]  ENG-4692 (#868): Enable support for read only transactions
- [[`3779a86`](https://github.com/YugaByte/yugabyte-db/commit/3779a868ac4ecfaf1574c0a35a16d7c4c816d90c)]  #862: ENG-4728: Use libbacktrace only in debug builds and in single-threaded mode to avoid high memory consumption
- [[`827ff02`](https://github.com/YugaByte/yugabyte-db/commit/827ff026eb4b9faf29e57766df23c6e372797373)]  [YSQL] Basic framework for cache consistency with multi-head DDLs #679
- [[`299c718`](https://github.com/YugaByte/yugabyte-db/commit/299c7189be9505c0203e2c47a4a174e614c1faf4)]  Add pre- for leader election logging
- [[`bfd2019`](https://github.com/YugaByte/yugabyte-db/commit/bfd201901ad4a5ddbca4524b1c94b234c42f72a0)]  #895: Rate-limit the warning of unsupported YCQL consistency level.
- [[`ff38980`](https://github.com/YugaByte/yugabyte-db/commit/ff389800265ef57575082d1f1d85adf441ddeb56)]  Break the long test TestPgRegressPgTypes into two separate tests
- [[`492c67c`](https://github.com/YugaByte/yugabyte-db/commit/492c67c8b2906872140b617507a0bbb461fc5c8b)]  Bump up master memory limit threshold for ASAN and TSAN
- [[`abc6a2e`](https://github.com/YugaByte/yugabyte-db/commit/abc6a2ead184c764a7732cfb2d76213e729364c0)]  ENG-4680 (#873): Save postgres logs in tserver/logs directory
- [[`ff9f36d`](https://github.com/YugaByte/yugabyte-db/commit/ff9f36d2e24af19769c57421c07421476c9609f3)]  ENG-3648: #604: Preelections
- [[`48411de`](https://github.com/YugaByte/yugabyte-db/commit/48411de2bcebfdff7555e8bb41d9fc65dd3ad968)]  ENG-4713: Correctly handle openssl buffer overflow
- [[`ec5cdf5`](https://github.com/YugaByte/yugabyte-db/commit/ec5cdf5edfd97000e7ca91172ada153245597a59)]  ENG-4522 (#769) : Support for ALTER TABLE command
- [[`ce84a16`](https://github.com/YugaByte/yugabyte-db/commit/ce84a163afdc2111b31567e882b10126fb14a991)]  #821: Fix the race condition that causes the master to get stuck on aborting tasks.
- [[`b7989a7`](https://github.com/YugaByte/yugabyte-db/commit/b7989a74aa70ca62651195d433167e185e185b3f)]  [ENG-4658] Work around for the ""shuf: No such file or directory"" error when trying to a pick worker host for remote compilation
- [[`c87cc63`](https://github.com/YugaByte/yugabyte-db/commit/c87cc6370789fd5e930da736093a2f37f7327400)]  BUG: fixed memleak by destroying icu Timezone
- [[`aefcb85`](https://github.com/YugaByte/yugabyte-db/commit/aefcb852dd847998cf992deddb475f95d45b73bb)]  Using YugaByte BINARY internal type to store UUID
- [[`99c7f6c`](https://github.com/YugaByte/yugabyte-db/commit/99c7f6c467d7735b3fdb9a4b43717406eb44d627)]  Fixed bugs when appending data of type CHAR(n) to tuple
- [[`b75341a`](https://github.com/YugaByte/yugabyte-db/commit/b75341a846ac138e0c4948c7cd6fc7874a1e775e)]  [YSQL] ENG-4538, #711: DATE and TIME support
- [[`95f0718`](https://github.com/YugaByte/yugabyte-db/commit/95f07188a631c054b7ea914b110b5be4ad3bc388)]  [#862] Upgrade to gperftools 2.7 to pick up tcmalloc bug fixes
- [[`6444b19`](https://github.com/YugaByte/yugabyte-db/commit/6444b19e63b15397e028271e0a622c99f3f15ba5)]  [ENG-4666] [#862] Implement a global memory limit for the master and stop the master if exceeded
- [[`edaa248`](https://github.com/YugaByte/yugabyte-db/commit/edaa2485d47f60790c25a9a37fecd1542e2cd8ef)]  Improvements to yb_money, yb_numeric and yb_numeric_big tests
- [[`5b73676`](https://github.com/YugaByte/yugabyte-db/commit/5b73676acdd51afda76dd2973243b5de4d16befb)]  #798: Concurrent create-table calls can result in ""Table Not Found""
- [[`1305434`](https://github.com/YugaByte/yugabyte-db/commit/1305434fb760fb13d6b48493cf450a402706cdf3)]  [YSQL] #865 Fix crash when copying heaptuple
- [[`7f35bad`](https://github.com/YugaByte/yugabyte-db/commit/7f35bad10b1752a6ef8dbdb75efa490c3d6404f9)]  [#867]: Add deadline to DocDB lock manager
- [[`3f939b4`](https://github.com/YugaByte/yugabyte-db/commit/3f939b47be1d7474459b6bd98ddbb364e902162c)]  ENG-4602: [YCQL] Add support for more timezone formats #806
- [[`4e93a27`](https://github.com/YugaByte/yugabyte-db/commit/4e93a2713550335b3da01f2922ea772a8d857395)]  ENG-4646, #711: Enable support for MONEY datatype
- [[`fb7333b`](https://github.com/YugaByte/yugabyte-db/commit/fb7333b2348e3e201f47d1cf94f7dc090c2ea80b)]  Add LLVM 6.0.1 back as an option in thirdparty
- [[`61516d1`](https://github.com/YugaByte/yugabyte-db/commit/61516d1ea2c0524fcfc553f353c1df42d415694e)]  #843:  Fix a bug in YBCInitializeRelCache that was causing the default values for tables to be loaded incorrectly
- [[`e5edba5`](https://github.com/YugaByte/yugabyte-db/commit/e5edba58096e25362c3dd6db864b3c53d5cc403f)]  ENG-4079: #673: Add serializable isolation support to YSQL API
- [[`57ad672`](https://github.com/YugaByte/yugabyte-db/commit/57ad6725e58434edf9bcde05e9eb9987e323270f)]  ENG-4352: #662: Add more RPC related Metrics
- [[`cf12af0`](https://github.com/YugaByte/yugabyte-db/commit/cf12af0f05f90faa57c921e665aede83f2c47565)]  ENG-4605 (#813): Fix log warning for master replicas        This
- [[`0c8f53b`](https://github.com/YugaByte/yugabyte-db/commit/0c8f53b5e456af9e1267d3a16386fd7c7c13a089)]  Move imported tests to yugabyte/java/yb-jedis-tests/src/test/java/redis/
- [[`b9ac01b`](https://github.com/YugaByte/yugabyte-db/commit/b9ac01be3ab9885ce735143eaaf684e9b3adf91c)]  [YQL] #807 Support for UUID Datatype
- [[`8b86a63`](https://github.com/YugaByte/yugabyte-db/commit/8b86a63cacacb91167d46fa256c9b847952edcec)]  (#641): Allow num_cpus to be explicitly passed for container environments; use std::thread::hardware_concurrency() as default
- [[`b5464c9`](https://github.com/YugaByte/yugabyte-db/commit/b5464c9051984a7fdafcb59ac71d72dfe2bec101)]  ENG-4537: #711: Decimal/Numeric support
- [[`fade5be`](https://github.com/YugaByte/yugabyte-db/commit/fade5beb2c10edf4217b9de75474598b5ecf2361)]  [YSQL] #715 Fixed ""="" operator for char-based datatype.
- [[`4066f1e`](https://github.com/YugaByte/yugabyte-db/commit/4066f1e6cc01ce9269bcd788dc5f9404a17e8577)]  [YSQL]  (#559)  Support secondary index in DML
- [[`8af2a9e`](https://github.com/YugaByte/yugabyte-db/commit/8af2a9ef44e01b3450a118156947ca994d85966c)]  ENG-4617: Added yb_completed_tests folder to track finished Mac Jenkins tests
- [[`a2850d7`](https://github.com/YugaByte/yugabyte-db/commit/a2850d717caadce92db7274b3270c26c8a70afbe)]  ENG-3271: JSON secondary indexes on attributes (PART 2) #741
- [[`41ef4e3`](https://github.com/YugaByte/yugabyte-db/commit/41ef4e357131522c531efd940e5a0543f694ea88)]  ENG-4614 (#820): UPSERT of JSONB column should not crash the server
- [[`f9fc9b2`](https://github.com/YugaByte/yugabyte-db/commit/f9fc9b2b2e825bfaa1b33d3c56b510b26d1f0662)]  [YSQL] #711 Framework for DataType Support
- [[`2aafd92`](https://github.com/YugaByte/yugabyte-db/commit/2aafd92eb2c95faadc772fc0c5b55b9b689174e9)]  [ENG-4578] [#783] Create Memtable Arena Allocation Gflag
- [[`e60e3ec`](https://github.com/YugaByte/yugabyte-db/commit/e60e3ecd4fd50834833a1eb9a2e7de8eb948b17d)]  Import tests from YB-JEDIS into Yugabyte
- [[`e1a073c`](https://github.com/YugaByte/yugabyte-db/commit/e1a073cdc63e1fe5e90d6e9eb23bf87ff9dbb698)]  [#760] AtEOXact_Snapshot should set FirstXactSnapshot to false on exit in YugaByte-enabled mode
- [[`676797a`](https://github.com/YugaByte/yugabyte-db/commit/676797ac2b92eb0a87d99212908c87630e4cecc2)]  [#839] Fix a bug in migration from old to new intent type set format
- [[`823ff34`](https://github.com/YugaByte/yugabyte-db/commit/823ff346dd0c662c0e84f25ff8d39f1acae8a0ef)]  #822: ENG-4624: Do not retry at ql/executor layer on a timeout; timeout retries already happen at ybclient layer
- [[`b56ee9e`](https://github.com/YugaByte/yugabyte-db/commit/b56ee9ed481bc0c867eb5578b98db46efb5006a0)]  #824: Only count votes from VOTERS in the active config for determining replicated OpIds
- [[`a3fe830`](https://github.com/YugaByte/yugabyte-db/commit/a3fe830fe5714a92c48c65d6531db99166f64a12)]  [#828]: Disable transaction RPCs timeout in QLTransactionTest.ChangeLeader
- [[`2b63f89`](https://github.com/YugaByte/yugabyte-db/commit/2b63f89aefabe344baddc469014e3c4f566dd679)]  [YSQL] #714 Fix wrong syscatalog metadata after create table failure
- [[`dba6d1f`](https://github.com/YugaByte/yugabyte-db/commit/dba6d1f7a00b97e2e62121bdf1b6d0d82001f3f0)]  ENG-4626: Improve TLS certificate verification failure reporting
- [[`48b225c`](https://github.com/YugaByte/yugabyte-db/commit/48b225c5a15429cbeb2ba46271a487ac76d6c512)]  ENG-4079: #673: Handle SELECT statements without a WHERE clause in a transaction with serializable isolation
- [[`3aa3aff`](https://github.com/YugaByte/yugabyte-db/commit/3aa3affabc8703924e68e7e056a3902bb8af3608)]  [YSQL] (#761) Enable YugaByte distributed transactions in the PostgreSQL API by default
- [[`1970e09`](https://github.com/YugaByte/yugabyte-db/commit/1970e09025dc1f40a5a06cafebb967f73b73fd2e)]  ENG-4619: During a partition, tservers can log ~250,000 ""Leader Master has changed"" messages per minute #823
- [[`4ecd7dd`](https://github.com/YugaByte/yugabyte-db/commit/4ecd7dd056f6e927389448290d2b7ff8756492a1)]  ENG-4593 (#826) Enable JSONB functions and add tests
- [[`f68aaa8`](https://github.com/YugaByte/yugabyte-db/commit/f68aaa8cd4e8a9d3eb8852215e629bf5a4d6877f)]  [#825]: Decrease number of concurrent threads in SerializableTxnTest.Increment in sanitized mode
- [[`0f8d64f`](https://github.com/YugaByte/yugabyte-db/commit/0f8d64f2926fca646628f1a942f5becb7ce923fb)]  ENG-4581: #792: Disable compactions until tablet bootstrap is done
- [[`0e53760`](https://github.com/YugaByte/yugabyte-db/commit/0e53760c609888852b4b2b08ef0da282217eacb5)]  #750: ENG-4499: Changed status code names and phrasing to eliminate ""SQL""
- [[`ece81a5`](https://github.com/YugaByte/yugabyte-db/commit/ece81a596e795efb593b2c70eb74746c73e5b474)]  #631: [YSQL] Enable not null constraints and check constraints
- [[`b0c357b`](https://github.com/YugaByte/yugabyte-db/commit/b0c357bf61882017995fd553ae42ad1c06f50344)]  ENG-4461: #723: Use consistent read snapshot for operations within a SQL statement
- [[`ef8a651`](https://github.com/YugaByte/yugabyte-db/commit/ef8a651bb2f2a3357b88ac86bf7daad09d789865)]  #817: ENG-4595: Don't use consistent read point for single shard operations
- [[`2712401`](https://github.com/YugaByte/yugabyte-db/commit/27124017cd96d0c03c2c5c3c4fca16588a114c25)]  [YSQL] ENG-4572 #814 Clean up stray backends after tests.
- [[`9d1e3a8`](https://github.com/YugaByte/yugabyte-db/commit/9d1e3a8ead2e5aab0e111ecc3086ee51c52ab26c)]  [#812]: Use yb::Thread in rocksdb ThreadPool
- [[`c463104`](https://github.com/YugaByte/yugabyte-db/commit/c4631044175cd7244d7a819ff394a4a00b0c4548)]  ENG-4566: #795: Use DNS names when validating TLS certificate
- [[`28d67dd`](https://github.com/YugaByte/yugabyte-db/commit/28d67dd2e78302232e278d2fd7a3909ec8b743ee)]  Splitting PgRegress testsuite to avoid TIMEOUT
- [[`19fa40b`](https://github.com/YugaByte/yugabyte-db/commit/19fa40b0c460bc08fd1bdcceaf3163e2ea4139dc)]  ENG-4496: Add hostname and username to YB diagnostic information (call-home)
- [[`26d06db`](https://github.com/YugaByte/yugabyte-db/commit/26d06db9d4d780d6ab37b0c53f9a21eece15f08b)]  ENG-743 (#793) : [YSQL] Support COPY statement
- [[`11ed907`](https://github.com/YugaByte/yugabyte-db/commit/11ed90746a59dc92ffd9a7bff00401f2c43ad3c8)]  [#803]: Increase timing in RpcStubTest.TestDontHandleTimedOutCalls
- [[`326501f`](https://github.com/YugaByte/yugabyte-db/commit/326501ff1e7d74f04c3bca1ae0b69e99b0b8e49b)]  ENG-4351: #661: Show out of limit memory consumption in web interface
- [[`268b438`](https://github.com/YugaByte/yugabyte-db/commit/268b4384a80c7f891d61d0bedf8c8428d6f96e54)]  [YSQL] #699 Enable Support for SET, SHOW, and RESET
- [[`fab7fe4`](https://github.com/YugaByte/yugabyte-db/commit/fab7fe474e07f94a241a33fe482d67c2a8385abc)]  ENG-4501 (#745): fix incorrect LOG line reporting flush/compaction stats
- [[`55968b6`](https://github.com/YugaByte/yugabyte-db/commit/55968b64db28797823e2d3384709d964bb88ef71)]  ENG-3271: JSON secondary indexes on attributes #741
- [[`3f40371`](https://github.com/YugaByte/yugabyte-db/commit/3f40371bcb076643a217725a13441639abd1ff71)]  ENG-4423 (#707) : added statement to logtrace for CQL and Redis
- [[`fbb88ab`](https://github.com/YugaByte/yugabyte-db/commit/fbb88abb1585a1e4ace7149827254da8a32a1e5e)]  [#791]: Handle case when thread pool is not yet ready for intents cleanup
- [[`e15bdb9`](https://github.com/YugaByte/yugabyte-db/commit/e15bdb926f6ca3bb3ff3bba16db7cfacbb0b2169)]  [YSQL] #712 Support COUNT(table.*) and fix COUNT(*) for tables without primary key
- [[`c8dc68c`](https://github.com/YugaByte/yugabyte-db/commit/c8dc68ca77aeb35bd814add4478893e0042839f4)]  ENG-4564: Added python@2 to brew install
- [[`afc3cce`](https://github.com/YugaByte/yugabyte-db/commit/afc3cce42181683e95425e9fe8abda3673c3b0a1)]  [#779]: Store postgres table metadata in all master replicas
- [[`f8d1e03`](https://github.com/YugaByte/yugabyte-db/commit/f8d1e03b27a77f94d93cc6a3c4ba82843bf4ff28)]  [YSQL] #786 Raise error for indexing on column of unsupported type
- [[`1aee234`](https://github.com/YugaByte/yugabyte-db/commit/1aee2344d1cbf6f48afb7f3d9ebcac8700b7afca)]  [#784] Correctly set flushed frontier to the given value in a version edit
- [[`ebedb36`](https://github.com/YugaByte/yugabyte-db/commit/ebedb3670aebf4cb869e0e752cc1b8fee6c1579d)]  #559: [YQL] Basic Postgres secondary index support
- [[`c2651f8`](https://github.com/YugaByte/yugabyte-db/commit/c2651f834fb21b2cf8d14c91581f3e9eb9e2c666)]  [YSQL] #698 Support for CREATE TABLE AS SELECT
- [[`766761e`](https://github.com/YugaByte/yugabyte-db/commit/766761e1eb6aec7d6dee1472f23f6e199384a49b)]  (#710) [YSQL] support for pushdown of bind variables
- [[`7457a46`](https://github.com/YugaByte/yugabyte-db/commit/7457a469e4d26cff1917e7d5ca6911af6f8ab4af)]  [#781] Report elapsed time and timeout for synchronous leader master RPCs
- [[`5860eb6`](https://github.com/YugaByte/yugabyte-db/commit/5860eb6b5677d9dbc7652eb7854434b07c4a35da)]  [#780] Flushed frontier should be allowed to go back when restoring a snapshot
- [[`75045b6`](https://github.com/YugaByte/yugabyte-db/commit/75045b691e0d4e923d1f8e6fdad16d74fa51bc80)]  ENG-4535: Fix for thirdparty libs build is failing on ""include-what-you-use"" for gcc builds
- [[`66dd49b`](https://github.com/YugaByte/yugabyte-db/commit/66dd49be809dd6d1ce190d5ec796484de8a0bc51)]  [#773] [ENG-4531] Fix a bug with recovering flushed OpId and hybrid time on tablet server restart
- [[`444e5dd`](https://github.com/YugaByte/yugabyte-db/commit/444e5ddd79c2e37b8c5a894b77337f7413afb1da)]  [#650]: Exit postgres when tserver is closed
- [[`f9b8162`](https://github.com/YugaByte/yugabyte-db/commit/f9b8162601b63a58c9ea47e1fb02b655875d6f9e)]  ENG-3501: Extended set of cassandra C++ driver test cases.
- [[`41055f2`](https://github.com/YugaByte/yugabyte-db/commit/41055f2b3db45767474e6767f6ff41ec34cf1d80)]  #766 Add a redis_version section to the redis INFO string
- [[`8a30216`](https://github.com/YugaByte/yugabyte-db/commit/8a3021674f0fb508bfbe29a7ec0034a701c2202b)]  ENG-4479 #740 Use PostgreSQL process started by tablet server for Java-based PostgreSQL API tests
- [[`70218be`](https://github.com/YugaByte/yugabyte-db/commit/70218be3bc79defdf159d147b2fee2a1f7e83224)]  [#767]: Don't use custom leader_failure_max_missed_heartbeat_periods in MasterFailoverTest
- [[`d80be8f`](https://github.com/YugaByte/yugabyte-db/commit/d80be8fe5aa9f7d96083313d4c289e6a4dfe8f20)]  Fix unstable TTL test TestRedisService.TestTtlPrimitive
- [[`9ed0489`](https://github.com/YugaByte/yugabyte-db/commit/9ed0489d545d59d8915bf35a49c8a33443d6f0af)]  #632: [YSQL] Re-enable default values for columns in PostgreSQL tables
- [[`a6a27e9`](https://github.com/YugaByte/yugabyte-db/commit/a6a27e9389c29771eaccfecebbe5951425f3ba99)]  #700: A user must have the ALTER permission on a table to create an index on it
- [[`cb025d6`](https://github.com/YugaByte/yugabyte-db/commit/cb025d6c71581933bdd22e9db571508cb3058602)]  ENG-3413: CreateTable should take into account blacklisted nodes #314
- [[`718d6df`](https://github.com/YugaByte/yugabyte-db/commit/718d6dfb9f48c95c9ca023a0af3a2f716a133c15)]  #577: Add leader status cache to avoid locking replica state
- [[`64ad445`](https://github.com/YugaByte/yugabyte-db/commit/64ad445f3170e0442516b845d88f897748ea9b4b)]  [#756]: Transaction with serializable isolation should not conflict with committed transaction
- [[`34c576c`](https://github.com/YugaByte/yugabyte-db/commit/34c576c94d3664b19650f8f7dbc0f8cee8c208f6)]  Enabling Clang static analyzer and add the include-what-you-use tool
- [[`0fbc88e`](https://github.com/YugaByte/yugabyte-db/commit/0fbc88e3794be67027f189a33c6090c4aff4bcee)]  Disable pg_wrapper-test in TSAN mode
- [[`a0c220f`](https://github.com/YugaByte/yugabyte-db/commit/a0c220f88d294e812713411880256dfb3a9f7b42)]  [#748]: Check if the leader is ready while updating propagated safe time
- [[`3ff5e5e`](https://github.com/YugaByte/yugabyte-db/commit/3ff5e5e4982ded3945c84ef8201291f7814e5177)]  Basic Tests Tracking Supported Features
- [[`dc42ea0`](https://github.com/YugaByte/yugabyte-db/commit/dc42ea07f47efe50b9e7aac4e15b4a8a1e677342)]  #749 Persist co-located table metadata in tablet metadata
- [[`69394aa`](https://github.com/YugaByte/yugabyte-db/commit/69394aa65fc07e96d71debda4afd24b776a5325a)]  Cleanup PgStatement to return statement type via a virtual function
- [[`13fa8cb`](https://github.com/YugaByte/yugabyte-db/commit/13fa8cb7936e1bc1796bf2dec23b8de7610ec127)]  [#747] Fix TSAN issues in QLTransactionTest.WriteConflictsWithRestarts
- [[`dc11643`](https://github.com/YugaByte/yugabyte-db/commit/dc116434a857c569fbe28a5ec22de7cc6b46940c)]  Remove old unused cache and nvm_cache files and the nvml dependency
- [[`cb5ea06`](https://github.com/YugaByte/yugabyte-db/commit/cb5ea06a40d78a0f2126bc253055b88d88ebe7f0)]  ENG-4350: #660: Don't replicate lease before replicating no op
- [[`42eecc6`](https://github.com/YugaByte/yugabyte-db/commit/42eecc6b2b9858c17a5b73cd3a12a93f480afb81)]  #746: Remove file block manager
- [[`af08421`](https://github.com/YugaByte/yugabyte-db/commit/af0842112623964839fe9ba963f31867d4fdfab2)]  ENG-4079: #673: Add read intents for serializable isolation during write
- [[`77bbc16`](https://github.com/YugaByte/yugabyte-db/commit/77bbc168a8775265b2a15bf744741653248fca41)]  ENG-4340 #651 Reduce initdb log spew
- [[`5835be4`](https://github.com/YugaByte/yugabyte-db/commit/5835be40db619efff4e047c4bc7b93247cfce792)]  #730 Fix flushed frontier going backwards during a compaction
- [[`05659bc`](https://github.com/YugaByte/yugabyte-db/commit/05659bc9d44f581b1efb62bd4d1e466440012b59)]  Update boost source tarball checksum in thirdparty_src_checksums.txt
- [[`72a5447`](https://github.com/YugaByte/yugabyte-db/commit/72a5447b1f2b8399611991922aa34fea1f1963b9)]  #704 Return a ""Snapshot too old"" error on attempts to read compacted-away data, e.g. during very long-running transactions
- [[`9a60540`](https://github.com/YugaByte/yugabyte-db/commit/9a60540d816217939dd81eebf5db858b7cb08185)]  [YSQL] #658 RETURNING Support
- [[`12a688d`](https://github.com/YugaByte/yugabyte-db/commit/12a688d0dc6d8f7bd48bbd5cb562e6ae554b77e6)]  ENG-4424: #708: Increase timeout waiting for transactions cleanup in tests
- [[`77cbebd`](https://github.com/YugaByte/yugabyte-db/commit/77cbebd5dbb29f28850b572d6d78ac6061539269)]  ENG-4429: Fixed yb_release prefix handling for symlinks
- [[`2007245`](https://github.com/YugaByte/yugabyte-db/commit/200724538a80abe5499da5a095c1ac7a5000ebf4)]  #709 Skip rebuilding PostgreSQL if it has not changed since previous build
- [[`03c18ce`](https://github.com/YugaByte/yugabyte-db/commit/03c18ce1983a161613e884a5c437ba019430be4c)]  ENG-4383: Added bin/psql symlink into release
- [[`5fe8101`](https://github.com/YugaByte/yugabyte-db/commit/5fe8101adc99728b31c18399ca411b8da9fc6288)]  [#706]: Treat not found transaction as aborted        It does not check result of write operation, so it could try to
- [[`3ed9810`](https://github.com/YugaByte/yugabyte-db/commit/3ed9810e9a269e6f62ed553488f66fc217544c76)]  [#705]: Hold mutex while updating obsolete_manifests_
- [[`0f2a0c1`](https://github.com/YugaByte/yugabyte-db/commit/0f2a0c1be7bccf02f91ce7d53c4ab98a21c41c90)]  #653: Disable replica cache refresh by default.
- [[`3d5122c`](https://github.com/YugaByte/yugabyte-db/commit/3d5122cd29e5b8977d70ab03caf7a70e44763b77)]  ENG-4079: #673: Replace intent type with intent type set
- [[`986d014`](https://github.com/YugaByte/yugabyte-db/commit/986d01424a8b346fbd601f75df2e8f13cdd46573)]  [YSQL] #693 TRUNCATE Support
- [[`8a4cdef`](https://github.com/YugaByte/yugabyte-db/commit/8a4cdef2074469541c07c045d478cfadd16f922a)]  [#691]: Wait for tablet peer leadership in TabletServerTestBase
- [[`f938535`](https://github.com/YugaByte/yugabyte-db/commit/f9385355e16a3453b4f65437fffa8b9f035ca839)]  [#690]: Increase allowed error for MacOS in TestMonoTime.TestCondition
- [[`b395f07`](https://github.com/YugaByte/yugabyte-db/commit/b395f074b0741d3027aa73bae425b2e60cda6077)]  [#689]: Use proxy_uuid in system.peers
- [[`5d87393`](https://github.com/YugaByte/yugabyte-db/commit/5d87393ecefa2c7cf05adde946c82e3ebcc724c7)]  [#688]: Use correct path for FSManager in TabletServerTest.TestRpcServerRPCFlag
- [[`5398a99`](https://github.com/YugaByte/yugabyte-db/commit/5398a9929bbeb0430769d2df2390be2213a4eee8)]  [ENG-4172] [#569] Introduce Timeout to DocDB Range Scan Queries
- [[`aad6e5e`](https://github.com/YugaByte/yugabyte-db/commit/aad6e5e5e3d76da5ecccbe51829da542b72da12a)]  ENG-4394: Fixed DBImpl::NotifyOnCompactionCompleted
- [[`87ef37d`](https://github.com/YugaByte/yugabyte-db/commit/87ef37d51c5264f5935c5ebd0c5a9889f93e8f1b)]  #687: Fixed QLTabletTest.GCLogWithRestartWithoutWrites/GCLogWithoutWrites TSAN issue
- [[`250aaad`](https://github.com/YugaByte/yugabyte-db/commit/250aaadcc6188633b7baa8c8b0dcae5166c924c8)]  [ENG-3923] #336 Handle slow subscribers
- [[`85d662d`](https://github.com/YugaByte/yugabyte-db/commit/85d662dbb168abc356a3aa72c87b01aba897bcbd)]  #683: Pick better auto defaults for max_background_flushes
- [[`d66fab0`](https://github.com/YugaByte/yugabyte-db/commit/d66fab00bb65fc49fb4ff9346d03f17ad7858fe2)]  Re-enable transactions in PostgreSQL
- [[`c8a8f22`](https://github.com/YugaByte/yugabyte-db/commit/c8a8f22e2564201bb86f336d6a0ffb86ad9c46ab)]  ENG-4027: Freezing Linuxbrew
- [[`e989665`](https://github.com/YugaByte/yugabyte-db/commit/e989665ac56b45cc67650fdb79f4a121ed8cc5c1)]  ENG-4353: #663: Release buffers when Socket is closed
- [[`d18616c`](https://github.com/YugaByte/yugabyte-db/commit/d18616cbfdcdad2313889140dfd10b75b8f3a008)]  ENG-4079: #673: Persist ""read intents"" for read operations done as part of serializable read-write transactions
- [[`6fad9ea`](https://github.com/YugaByte/yugabyte-db/commit/6fad9ea87468ca8d2624c74360f7e2e37ef15697)]  ENG-4386: Postgres libs linking order is wrong
- [[`9903b97`](https://github.com/YugaByte/yugabyte-db/commit/9903b9725a603c5c56535fcd53f0fb90131db691)]  [#682]: Increase lifetime of Rpcs object used by heartbeater
- [[`7aa6a27`](https://github.com/YugaByte/yugabyte-db/commit/7aa6a272daaa4610dcf5b6ce9b204bfaf9fdcb47)]  #653: ENG-4341 - Refresh tablet replicas periodically for ConsistentPrefix reads
- [[`3a276ba`](https://github.com/YugaByte/yugabyte-db/commit/3a276bafb6bc1d021d7c428bc0df74fa7d4f1ed8)]  Refreshed the README on github
- [[`0b062e5`](https://github.com/YugaByte/yugabyte-db/commit/0b062e5684c16eed46724997f1e25fed90c5c448)]  [#680]: Suppress dwarf_lookup_pc
- [[`c611ff3`](https://github.com/YugaByte/yugabyte-db/commit/c611ff30c4635668db38c4d24dbd4d7d85b39092)]  #677: ENG-4389: Master process can fail on startup if FQDN is not resolvable yet.
- [[`0aa5d44`](https://github.com/YugaByte/yugabyte-db/commit/0aa5d44cf373c66b0ff2024538d449cba7576b9a)]  Disable a couple of tests on macOS after enabling test parallelization
- [[`56b3bfe`](https://github.com/YugaByte/yugabyte-db/commit/56b3bfe6ffcdd99b694354fc6883ee97e3dbb450)]  #676: ENG-4388: psql wrapper script needs to be updated
- [[`94ef7cf`](https://github.com/YugaByte/yugabyte-db/commit/94ef7cf8c0a61a50b08e19d60e658ae927cf2102)]  [ENG-4233] Fix Failing Read Replicas
- [[`4d6a913`](https://github.com/YugaByte/yugabyte-db/commit/4d6a913c0958416391a2474483007234138513e5)]  #654 Allow for disabling load balancer for cql load tester
- [[`d3c895e`](https://github.com/YugaByte/yugabyte-db/commit/d3c895e3384efd1bccc54ba626daf0496e42130d)]  #675 Fix broken table links in yb-master Web UI.
- [[`c8cbfb9`](https://github.com/YugaByte/yugabyte-db/commit/c8cbfb9273671dbdffdd2ea34457713bff6b2e5f)]  Run tests in parallel using Spark on macOS (as we already do on Linux)
- [[`3aee3ba`](https://github.com/YugaByte/yugabyte-db/commit/3aee3ba99ef709f678c20d174e9fb5d25f3b6e1a)]  [YSQL] #565 UPDATE support
- [[`c81947c`](https://github.com/YugaByte/yugabyte-db/commit/c81947c300e546063853098c49399f47c2cee631)]  #674: Reduce duration of lock on catalog manager for Postgres sys catalog read and write operations.
- [[`c7f8499`](https://github.com/YugaByte/yugabyte-db/commit/c7f8499bed2cb02a2484c2aefd87759cfc4fa194)]  #639: Basic Postgres schema support
- [[`f8de7c4`](https://github.com/YugaByte/yugabyte-db/commit/f8de7c4f11ffd6712415cc467676c98a58df6c2e)]  #243: Fix thread restriction under RemoteTablet::GetRemoteTabletServers().
- [[`20afe12`](https://github.com/YugaByte/yugabyte-db/commit/20afe123f4ade765345235ffd35e8783cf8aeed0)]  [#672]: Remove cpp_redis and tacopie from 3rd party libraries
- [[`067963c`](https://github.com/YugaByte/yugabyte-db/commit/067963c1b58b30b8baf3aac9dc0f1bb89f6fe2f6)]  #638: Support Postgres tables without user-specified primary key.
- [[`78cddf4`](https://github.com/YugaByte/yugabyte-db/commit/78cddf47977aa1682748c733bcef93b4c25101ec)]  #611: Support new Cassandra Java driver versions
- [[`3832009`](https://github.com/YugaByte/yugabyte-db/commit/38320097cc8abd11be9e3c2fad3170f2b73c9fca)]  ENG-4079: #673: Extract base class and utility functions from QLTransactionTest
- [[`ae39261`](https://github.com/YugaByte/yugabyte-db/commit/ae3926193b6f6976f011c8cfdb66e62c734b8947)]  #670: Fix SEGV when setting paging state on uncovered index query.
- [[`e001a9d`](https://github.com/YugaByte/yugabyte-db/commit/e001a9d4ec169b7a67b8529c5dc5d34375d2c256)]  [#671]: Enable Thread Safety Analysis in Clang
- [[`8729c04`](https://github.com/YugaByte/yugabyte-db/commit/8729c04af5b013beea2a662a8983af3cd0105b23)]  #554 [YSQL] Move PostgreSQL catalog tables to YugaByte Master
- [[`0edd204`](https://github.com/YugaByte/yugabyte-db/commit/0edd20448173d42fefa836a62d2c824b04a9c573)]  ENG-4280 #615 ENG-4283 #618: Take prefix locks for rows with compound primary keys
- [[`25d12de`](https://github.com/YugaByte/yugabyte-db/commit/25d12ded9e814f36f7df2b93a12cb6729cfa1ebc)]  #488: ENG-3917: Occasional delay in deletion of compacted files.
- [[`0c3e33f`](https://github.com/YugaByte/yugabyte-db/commit/0c3e33fcf2564107ab5c21ea07f80d899360ac43)]  [YCQL] #589 Update YugaByte scanner to match BISON's new API
- [[`89d4d63`](https://github.com/YugaByte/yugabyte-db/commit/89d4d63303a323eaacd2a60a41107068d6622951)]  Limit total size of mini-cluster logs in C++ and Java; fix remote_build.py
- [[`98ebafb`](https://github.com/YugaByte/yugabyte-db/commit/98ebafb8f45a1cac4118e032124b617c0404eb02)]  [ENG-4263] #597: Implement Rename as a best effort mechanism.
- [[`bcefe70`](https://github.com/YugaByte/yugabyte-db/commit/bcefe708384f496cf8417f021ac8e668d086eab9)]  #516: Remove psql from the bin directory in the distribution package and remove psql third-party dependency
- [[`4916c63`](https://github.com/YugaByte/yugabyte-db/commit/4916c635cf67f5ae1ea302c90c1dcb152f2756a8)]  ENG-4334: #642: Fix double registration of write request
- [[`fc2f99e`](https://github.com/YugaByte/yugabyte-db/commit/fc2f99e7c599650aee191bd2c0aaf1f92b6593e0)]  ENG-4335: #644: Fix TrimTrailingWhitespaceFromEveryLine
- [[`f90bf4b`](https://github.com/YugaByte/yugabyte-db/commit/f90bf4b15b09b7ab4bdd4908f96f58475689c237)]  [YSQL] #645 Seg fault occurred when deleting from table
- [[`6e798f9`](https://github.com/YugaByte/yugabyte-db/commit/6e798f9a9affffa1f9a477effd401943d1dbc653)]  #640: Use call_once for InitializeSystemInfo
- [[`6e5454c`](https://github.com/YugaByte/yugabyte-db/commit/6e5454c5b84014e0efaed5d1ee6e9d9a8b0f5169)]  #632: [YSQL] Enable default values for columns in YSQL
- [[`2d5e4a0`](https://github.com/YugaByte/yugabyte-db/commit/2d5e4a0e130e855823cc3c84868e46a2e8b38259)]  Fix a bug with local-command(s)/keys in a redis pipeline.
- [[`f78748c`](https://github.com/YugaByte/yugabyte-db/commit/f78748c999815a1de5b12e5ee939b8ef57ad8bdd)]  #552: DELETE statement support in PostgreSQL
- [[`7e8a990`](https://github.com/YugaByte/yugabyte-db/commit/7e8a990a6e87f93f2b93e7fa14fa9eb578464ef2)]  ENG-4129: Fix RateLimiter tests for MacOS
- [[`6201f0b`](https://github.com/YugaByte/yugabyte-db/commit/6201f0ba15f250b826575c463f468b91f8598464)]  Remove restriction on source addresses of PostgreSQL connections
- [[`c9a6663`](https://github.com/YugaByte/yugabyte-db/commit/c9a6663aed9b1d6dca8bad08a4dfe036e2ab3a70)]  ENG-4291: #626: Handle term change correctly during sys catalog load
- [[`da1abd3`](https://github.com/YugaByte/yugabyte-db/commit/da1abd32b9ae128e011d566f0976c6491f2ec77c)]  #636: Changing yb-ctl to start PostgreSQL child process in each tablet server
- [[`4c08e34`](https://github.com/YugaByte/yugabyte-db/commit/4c08e347f75572ecf69d2fca4a11a08a2335fcc2)]  #596: ENG-4228: Remove failed non-voter replicas unconditionally
- [[`a88cd0e`](https://github.com/YugaByte/yugabyte-db/commit/a88cd0eac4761ed576ae5f7cb4f75bebfc30fdb6)]  ENG-4282: #617: Fix IsRangeOperation for the case when range key is partially specified
- [[`7577fc3`](https://github.com/YugaByte/yugabyte-db/commit/7577fc3b0304bd2db5fe28d576a27f9179c5cff0)]  #630: Run PostgreSQL as a child process of tablet server
- [[`f8162af`](https://github.com/YugaByte/yugabyte-db/commit/f8162af83cd61d18c41c351be929c66ddad47a01)]  ENG-4281: #616: Fix order of release lock and MVCC manager notification
- [[`f2a56d8`](https://github.com/YugaByte/yugabyte-db/commit/f2a56d845f3b36b4c1b719caf3183e0078c10047)]  #608: ENG-3570 - Occasional/intermittent FATAL during remote bootstrap: flushed opID higher than in WAL
- [[`1321035`](https://github.com/YugaByte/yugabyte-db/commit/13210352d30c2808322ba099ac6d0d2aae87618e)]  ENG-4289: #625: Handle empty response in InetAddress::FromString
- [[`5ca7b1f`](https://github.com/YugaByte/yugabyte-db/commit/5ca7b1f5d2a10c562ee2da45b3b0762735069619)]  #619: ENG-3994 - GRANT ALL should only grant the permissions supported by the resource
- [[`0d5f3bb`](https://github.com/YugaByte/yugabyte-db/commit/0d5f3bb5a96fd16c004d7ff531ecbc5a16e67c93)]  #541 Support copying all tables from a namespace to another
- [[`95802be`](https://github.com/YugaByte/yugabyte-db/commit/95802be665b2a291c2d08d5c12ada5ad76dd14b3)]  #593: Resources without permissions granted to them, still appear when querying system_auth.role_permissions
- [[`793b4cd`](https://github.com/YugaByte/yugabyte-db/commit/793b4cda090ad8e2624388656542accefe09564c)]  [ENG-3921] #336 Forward pub-sub messages to other nodes in the cluster
- [[`5cf0188`](https://github.com/YugaByte/yugabyte-db/commit/5cf01889a1b4589a82085e578b5f4746c6614a5d)]  ENG-4123: #537: Ignore duplicate write requests
- [[`6eaa1ec`](https://github.com/YugaByte/yugabyte-db/commit/6eaa1eca72129d2c190ab7abcef858b3869bc36e)]  ENG-4240: #613: Fix checking of tablet presence during transaction CLEANUP
- [[`e609694`](https://github.com/YugaByte/yugabyte-db/commit/e6096946e13c63c562cfaf02fd9b7a351d203616)]  Restore sys catalog table name
- [[`4c8c5a4`](https://github.com/YugaByte/yugabyte-db/commit/4c8c5a4a68b23669a9f306ac242e18395e00eccf)]  #606: ENG-4102 - A role shouldn't be able to delete itself
- [[`117de1d`](https://github.com/YugaByte/yugabyte-db/commit/117de1d4044f5e09618b90d8a26320a6ab21076a)]  Support for System Columns
- [[`b2b7630`](https://github.com/YugaByte/yugabyte-db/commit/b2b76303d71291a6b90bb865e0a1f4fc5f563dc2)]  [ENG-4239] Add Date and Time datatypes to yb-client
- [[`f68dee5`](https://github.com/YugaByte/yugabyte-db/commit/f68dee5e8ef73767f826198f17679058b085fa3c)]  #609: Add retry to InsertTestRowsRemote
- [[`292cb1b`](https://github.com/YugaByte/yugabyte-db/commit/292cb1b12f15acf0134367b776e851bbf2861376)]  #610: Add retry to DeleteTableTest::GetLeaderUUID
- [[`7f4912f`](https://github.com/YugaByte/yugabyte-db/commit/7f4912f399073173392bcb77a22b813df3a90ac1)]  ENG-1333. Report errors in LoadBalancer.
- [[`0d50c0c`](https://github.com/YugaByte/yugabyte-db/commit/0d50c0c6f8c426c8da820abf9ae253a9cc5c6e6d)]  ENG 3889: Only a SUPERUSER role can alter the SUPERUSER status of another role
- [[`c908298`](https://github.com/YugaByte/yugabyte-db/commit/c908298ec4cb871fb957af36d9118b0e632c95b6)]  #538: ENG-3471: Fixed write-if handling in case leader is not ready to serve
- [[`af34729`](https://github.com/YugaByte/yugabyte-db/commit/af34729019a66419191b056e236dd6de8b9485a4)]  #543: Support creating Postgres sys catalog tables in yb-master
- [[`c640994`](https://github.com/YugaByte/yugabyte-db/commit/c640994efdc3cc698949c944424699430d58c6ea)]  [ENG-4131] Fix ClientTest_TestWriteTimeout
- [[`ac8600a`](https://github.com/YugaByte/yugabyte-db/commit/ac8600a7aacead6171c39460b204dfd5f53a0f79)]  #603: Propagate leader term
- [[`9a3823e`](https://github.com/YugaByte/yugabyte-db/commit/9a3823e30d5096ae6e429767736faed62265e614)]  #605: Change the /mem-trackers internal UI page to a tree-like view
- [[`3072e66`](https://github.com/YugaByte/yugabyte-db/commit/3072e66c64fdb83db321a25bcce487253e83396c)]  #602: Skip calling Done in QLProcessor::Reschedule
- [[`fac2acd`](https://github.com/YugaByte/yugabyte-db/commit/fac2acd342f8a3827959b89630ee4ea0a22afae8)]  #512: ENG-3501: Added JSON fields checks into the C++ driver test.
- [[`04f6b9f`](https://github.com/YugaByte/yugabyte-db/commit/04f6b9fae8537e1d33b041ad4c10e5ad5c0b7bc0)]  #598: Add MemTrackers to RocksDB
- [[`6617193`](https://github.com/YugaByte/yugabyte-db/commit/6617193ce4126423c984b018ef29834abef711d5)]  #600: ENG-4234: Handle failure in LookupTabletDone
- [[`adf6560`](https://github.com/YugaByte/yugabyte-db/commit/adf6560f0e99c1503b414ce92163a86a3d1b9ae8)]  ENG-3885: Only a SUPERUSER role should be able to drop another SUPERUSER role
- [[`e1e717e`](https://github.com/YugaByte/yugabyte-db/commit/e1e717e4d7e684bc7186decad7f6db38ff82c055)]  ENG-4224 Export BUILD_TYPE in yb_build.sh and reduce username-related failures of run_tests_on_spark.py
- [[`ee3e45a`](https://github.com/YugaByte/yugabyte-db/commit/ee3e45a53517a2a494732de528697a0236f2aaea)]  #585: Only a SUPERUSER role can create another SUPERUSER role
- [[`09b2558`](https://github.com/YugaByte/yugabyte-db/commit/09b25582d09fd295b88d946d51e0316b410e8a51)]  ENG-4232: Updated C++ Cassandra driver version to 2.9.0-yb-2. (Fixed RapidJson version.)
- [[`058a1e4`](https://github.com/YugaByte/yugabyte-db/commit/058a1e4fc4286e699fb942d4f00fea23e8167adf)]  Allowing the use of a custom (non-default location) Homebrew installation on macOS
- [[`aad1797`](https://github.com/YugaByte/yugabyte-db/commit/aad1797af895eb61f8529fd5b4770c3e354bd5ae)]  Clean up handling of system tables in catalog manager.
- [[`a1b53a6`](https://github.com/YugaByte/yugabyte-db/commit/a1b53a62c84b3d3e3deedf957ad93e14e130fcb4)]  #592: Fix syntax for ALTER ROLE
- [[`ca97afb`](https://github.com/YugaByte/yugabyte-db/commit/ca97afb77a0c2222c8538b9cb2856f691948eb17)]  ENG-4187: Fixed ASAN & TSAN issues in the cassandra driver test.
- [[`0e68a53`](https://github.com/YugaByte/yugabyte-db/commit/0e68a539e762b0b34319fccae28ef185af86407d)]  (#573) ENG-4192 Implement minTimeUUID/maxTimeUUID in YCQL
- [[`a63e1f9`](https://github.com/YugaByte/yugabyte-db/commit/a63e1f9119809bb9aa4736985bb8f2624c5962fa)]  #587: TABLE keyword should be optional in GRANT/REVOKE PERMISSION statements
- [[`f8a4d19`](https://github.com/YugaByte/yugabyte-db/commit/f8a4d1950cb79046fa21f0acbe401cf43ae5d154)]  #584: Avoid dropping COMMITTED record from logs and relax status handling in release mode
- [[`9a51dd1`](https://github.com/YugaByte/yugabyte-db/commit/9a51dd12a845b3ca0395430a73afbf89b7e73249)]  #591: Extended lifetime of RequestScope while writing provisional records
- [[`2e73b50`](https://github.com/YugaByte/yugabyte-db/commit/2e73b50b465aa649c8f062a2a3abc7930de79485)]  #590: Use rescheduler for aborting transaction in ExecContext::Reset
- [[`0d583ac`](https://github.com/YugaByte/yugabyte-db/commit/0d583acbd878432644290e2ea6f7d65913571bc6)]  #581: Use correct check when QL executor should be rescheduled
- [[`836fc6a`](https://github.com/YugaByte/yugabyte-db/commit/836fc6a697a97698fd93b0199384f57973c348df)]  ENG-3601: #570: Use Prometheus compatible names for mem tracker metrics
- [[`5ef6fe8`](https://github.com/YugaByte/yugabyte-db/commit/5ef6fe80d120dd4e3fe9975a020c2e779d160a30)]  #567: Resolves fatal error when starting cluster in RF1 with PostgreSQL enabled.
- [[`046c0f1`](https://github.com/YugaByte/yugabyte-db/commit/046c0f150e109697d6f0ef094aa42d5af33258cc)]  Remove the old PGSQL service and parser from our code base because we are now using PostgreSQL codebase directly
- [[`4a3a8e4`](https://github.com/YugaByte/yugabyte-db/commit/4a3a8e439c56cb775a1a8c9a73208eeaef75bcf4)]  #572: Change defaults of rpc threads/queues and tablets.
- [[`9561c35`](https://github.com/YugaByte/yugabyte-db/commit/9561c35162f1d842e6c4563dea85166a22a52f49)]  #41: ENG-4170: Implemented ALTER KEYSPACE statement.
- [[`528b5d6`](https://github.com/YugaByte/yugabyte-db/commit/528b5d678726fd7679287bc29e3344ba4f6f493d)]  #580: Make ReplicaState::LogPrefix lockfree
- [[`521c35e`](https://github.com/YugaByte/yugabyte-db/commit/521c35ecaffcf94326a97f178283bdc9222efb10)]  #576: Use std::mutex in RaftConsensus instead of simple_spinlock
- [[`91487ce`](https://github.com/YugaByte/yugabyte-db/commit/91487ce8ac65038533997b269705c95ca622617b)]  #575: Avoid calling CompleteWithStatus under lock
- [[`ee65667`](https://github.com/YugaByte/yugabyte-db/commit/ee6566741bc972a913e0c07825d2cebaff2bf8d4)]  #564: Fix performance degradation with authorization enforcement
- [[`33178f3`](https://github.com/YugaByte/yugabyte-db/commit/33178f3f9d9f8785f414febb6b56d5e898106b80)]  [ENG-4171] [#568] Fix ZRANGEBYSCORE SegFault.
- [[`7acb661`](https://github.com/YugaByte/yugabyte-db/commit/7acb66115165e1ece51085bf625417cfb396f4df)]  ENG-3601: #570: Export memtracker stats as metrics
- [[`f7829b0`](https://github.com/YugaByte/yugabyte-db/commit/f7829b0769db9f313fb75e7461a45809d5badb14)]  #536 ENG-4128 Create transaction-status table on DDL path
- [[`ab986ef`](https://github.com/YugaByte/yugabyte-db/commit/ab986ef7d18f3bebf6136a8dd96b2cf517c74c7b)]  [#566] Enable TIMESTAMP type in PostgreSQL; fix float test on ASAN by disabling UBSAN on float.c
- [[`960cb2c`](https://github.com/YugaByte/yugabyte-db/commit/960cb2c8e1a060de9a7978812e1aa6f5633262bc)]  Fixes #164: Select statement using uncovered index
- [[`0325a4f`](https://github.com/YugaByte/yugabyte-db/commit/0325a4f23ca1972eeea4f4f3db8fe676b707de1e)]  #512: ENG-3501: New Cassandra C++ driver test with YB ExternalMiniCluster.
- [[`93cc7d8`](https://github.com/YugaByte/yugabyte-db/commit/93cc7d89ba8f7ab707ccb24eefe5a1146ffe8459)]  Adding tests for float4 and float8 PostgreSQL types
- [[`751c17c`](https://github.com/YugaByte/yugabyte-db/commit/751c17cd76da54cda4eaca2e76f17afef6b3f80a)]  Fix macOS packaging script so that it accepts @loader_path library paths
- [[`0313d20`](https://github.com/YugaByte/yugabyte-db/commit/0313d20583a4586cbff672c4f65e4036a9d15742)]  ENG-4125: A drop table/keyspace/role statement should automatically revoke all the permissions granted on the deleted resource
- [[`7c1d28d`](https://github.com/YugaByte/yugabyte-db/commit/7c1d28d7307f7241c3b7eff68cbce2f706db6bce)]  ENG-4151: Modify sample apps to accept username/password for Cassandra workloads
- [[`adaee62`](https://github.com/YugaByte/yugabyte-db/commit/adaee6286883687badfc9d5198ddfc1f95a17889)]  #512: ENG-3501: Added cassandra-cpp-driver to yugabyte/thirdparty.
- [[`c98a687`](https://github.com/YugaByte/yugabyte-db/commit/c98a687b81085cd54e88664522c1a8f06fe3709b)]  Update minimum CMake version to 3.7.0 for FindICU module
- [[`52fb4a4`](https://github.com/YugaByte/yugabyte-db/commit/52fb4a489be01064c0980d13ed19a95e85511fee)]  yb_release.py: don't complain about the default YB_THIRDPARTY_DIR being different from that in the build descriptor file
- [[`6c346c1`](https://github.com/YugaByte/yugabyte-db/commit/6c346c1ece850ecee697670861b86b4a6e808302)]  When creating a new resource (table/keyspace/role), the role creating it should get all the permissions on the resource
- [[`47dc36b`](https://github.com/YugaByte/yugabyte-db/commit/47dc36ba1cc3fd6a2d989a50c1394a61fea548f2)]  Re-enable yb_int4.sql and yb_int8.sql tests, fix overflow handling in ASAN
- [[`d3b589d`](https://github.com/YugaByte/yugabyte-db/commit/d3b589d85fd086565c1fec52e2c398e666dfe4ea)]  #526: Resolve query error after switching role in cqlsh
- [[`fd1a4ec`](https://github.com/YugaByte/yugabyte-db/commit/fd1a4ec02d102feededc44eee51a240e26a23621)]  YSQL Optimize SELECT with fully-specified multi-column primary key
- [[`7e073ae`](https://github.com/YugaByte/yugabyte-db/commit/7e073ae9d3e8a2622aa51b0eaaae2d53f57843e1)]  DELETE and UPDATE Basic Support
- [[`28f4650`](https://github.com/YugaByte/yugabyte-db/commit/28f4650e971f7f25bf3cd5575f6209482fa66e3e)]  Fixes for Monitor/Config commands
- [[`2cbd2dc`](https://github.com/YugaByte/yugabyte-db/commit/2cbd2dc54ff4690fe0e9ec8a5e8663c88bdd0631)]  #73: ENG-2665 - Cassandra Authorization: Enforcement
- [[`42e5e82`](https://github.com/YugaByte/yugabyte-db/commit/42e5e82d6dafceb85e0103c35941c8efac34fa6d)]  [#523] Enabling more data PostgreSQL types, adding a pg_regress based test suite, and fixing a bug with YBPgStatement lifecycle in the YB FDW
- [[`cda791b`](https://github.com/YugaByte/yugabyte-db/commit/cda791be0252b9b15e973e7fcc97b82b529477ec)]  [ENG-3920] Pt. 1/3 Refactor existing monitor architecture to support local implementation of Publish/Subscribe
- [[`50b527f`](https://github.com/YugaByte/yugabyte-db/commit/50b527fb2e0fa52f90141f6607dfe94e002bd6bb)]  ENG-4124: Handle schedule failures in tests correctly
- [[`286ea60`](https://github.com/YugaByte/yugabyte-db/commit/286ea60fdb6a9cf38c654e0da4c09a25ccd3c926)]  ENG-4101: Introduce intrusive MPSC queue and use it in preparer
- [[`0451cc4`](https://github.com/YugaByte/yugabyte-db/commit/0451cc45698b480dbc20a7efa6cec2b1d7d4ccdc)]  ENG-3397. Redis KEYS
- [[`1441732`](https://github.com/YugaByte/yugabyte-db/commit/14417326b41993e19bdc7c8308a0b34d33300600)]  #522: Convert VERSION SysCatalog entry into flexible config entry.
- [[`eed35bc`](https://github.com/YugaByte/yugabyte-db/commit/eed35bcf17037603c7581d171b591cbce0874dff)]  ENG-4118: Make all files within a release archive owner-writable to avoid errors during deployment
- [[`9cf50c4`](https://github.com/YugaByte/yugabyte-db/commit/9cf50c4fe24631e950a33c1995071f2b8ac50d4f)]  Fix LinkedListTest.TestLoadWhileOneServerDownAndVerify test
- [[`89aa768`](https://github.com/YugaByte/yugabyte-db/commit/89aa76814b9c93186e65f1a24e60247bb69ae311)]  Enable some supported YB-Postgres features in parser
- [[`8947924`](https://github.com/YugaByte/yugabyte-db/commit/89479240911d18929a972ed8cdc0756031757ecd)]  SELECT with fully-specified multi-column primary key
- [[`4952508`](https://github.com/YugaByte/yugabyte-db/commit/4952508e21c8096cef3634b63f42a1dfd0b53dfb)]  Update thirdparty version for Jenkins on Linux
- [[`1ac4b39`](https://github.com/YugaByte/yugabyte-db/commit/1ac4b39af16d40062810af180ac8148c4a590527)]  #73: ENG-2665 - Cassandra Authorization: Permissions cache
- [[`fa1b53f`](https://github.com/YugaByte/yugabyte-db/commit/fa1b53f350ba4092beef05527aa209ea58fc9b02)]  Rename StringPiece to GStringPiece to un-break the build on Ubuntu 18.04
- [[`1dc6d31`](https://github.com/YugaByte/yugabyte-db/commit/1dc6d31c5ea359e7d4efaa2c49d2695955448a83)]  ENG-3861: #505: Fix check that reactor could accept new tasks
- [[`b710c64`](https://github.com/YugaByte/yugabyte-db/commit/b710c645377784d2c75a006cdea62a4817544f18)]  #507 Fix TestPgTransactions#testTransactionConflicts: read requests could get stuck if transaction status tablet leader changes
- [[`b7fc14d`](https://github.com/YugaByte/yugabyte-db/commit/b7fc14ddba5666b915aaff3bc0ce3e23a845299b)]  ENG-4037: Add ability to specify transaction start time externally
- [[`f5bb57f`](https://github.com/YugaByte/yugabyte-db/commit/f5bb57fcb79611d3886c572400701e020c87db2d)]  ENG-4032: Support date string literal before 1400 AD in YCQL.
- [[`c753f84`](https://github.com/YugaByte/yugabyte-db/commit/c753f8450dc43dadd6b4475f83d9ba2ccd1bcb0c)]  #482: Raise error when the WHERE clause of a SELECT DISTINCT statement contains reference to a range or non-static columns.
- [[`e71032d`](https://github.com/YugaByte/yugabyte-db/commit/e71032d407b786886c3793f2fca08d8d0abb1c58)]  Allow SET SESSION TRANSACTION and DROP DATABASE
- [[`feec3e6`](https://github.com/YugaByte/yugabyte-db/commit/feec3e6aa6630107f24d639dadf1f729cbbb13c4)]  [ENG-3779] Expose JSONB type via yb-client
- [[`f62a4ee`](https://github.com/YugaByte/yugabyte-db/commit/f62a4eec21febb75145ca355da20c2d2c857457e)]  Report errors for unsupported PostgreSQL features in YugaByte
- [[`20c37fe`](https://github.com/YugaByte/yugabyte-db/commit/20c37fe0c649dc62860359ed52c0d855a94747ee)]  ENG-4044 Fix how we handle PostgreSQL's text datum to unbreak SELECT with a text key specified
- [[`95fcba2`](https://github.com/YugaByte/yugabyte-db/commit/95fcba2211a3ff790f1910368dd0321ad9ceaf29)]  Support for PostgreSQL in the macOS packaging script
- [[`a3f2e87`](https://github.com/YugaByte/yugabyte-db/commit/a3f2e8722ae07854beea90cb434605e0a34ff0ff)]  Unset the LANG env var when launching PostgreSQL server
- [[`8d14d9b`](https://github.com/YugaByte/yugabyte-db/commit/8d14d9b3b75b58b0eaa933397d6dbd36e012bf70)]  Decrease execution time of QLTransactionTest.RemoteBootstrap
- [[`2715679`](https://github.com/YugaByte/yugabyte-db/commit/271567944493c3f9153a041c56f6b46dc386d72f)]  ENG-3949: #479: Decrease log flooding from distributed transactions
- [[`ba68646`](https://github.com/YugaByte/yugabyte-db/commit/ba686460e8b9a9d283032e70ba48e1c085cd5063)]  Misc extensions and fixes related to YB-PostgreSQL
- [[`883f9a9`](https://github.com/YugaByte/yugabyte-db/commit/883f9a97f93f6fecc14cad634417c50b58af1ab4)]  Fix how arguments are being passed to the constructor of the MacLibraryPackager class
- [[`87f7429`](https://github.com/YugaByte/yugabyte-db/commit/87f74297cc25fcdbf1f3855d66d8be37da5732db)]  Integrating PostgreSQL with YugaByte distributed transactions; adding PostgreSQL to yb-ctl and the release package
- [[`438a60c`](https://github.com/YugaByte/yugabyte-db/commit/438a60c58162f4ce540e393f88e6632a23031d78)]  #493: Fix various issues with transactions and restarts
- [[`d2b3c76`](https://github.com/YugaByte/yugabyte-db/commit/d2b3c7652aeb2c143c4b50f8948335e68d54a4f6)]  ENG-3898 Extend SELECT query support for YB-PostgreSQL
- [[`f9a851f`](https://github.com/YugaByte/yugabyte-db/commit/f9a851f6fb3b9340dae9da41ec0eabc0116c1014)]  Increase the default CQL queue limit to 5k
- [[`d27d140`](https://github.com/YugaByte/yugabyte-db/commit/d27d140c5a3e40716cfe2ce9f9c9c53ff46b8b8d)]  ENG-3836. Changed DCHECK to Status return in load balancer.
- [[`90656c8`](https://github.com/YugaByte/yugabyte-db/commit/90656c83d8a1a2d7d63a39b87a07563191eee26b)]  ENG-3987: Fixed GCC version handling
- [[`ef610e4`](https://github.com/YugaByte/yugabyte-db/commit/ef610e48eb36badf6d73a587e3c1a22ab5426a97)]  ENG-3871: Test failure in TestMultipleLeaderRestarts
- [[`4786d33`](https://github.com/YugaByte/yugabyte-db/commit/4786d33ef3abfee2397c866b675172d1e0d55b63)]  ENG-3965: Change timeout handling in RPC
- [[`1ddc98b`](https://github.com/YugaByte/yugabyte-db/commit/1ddc98be2f49880c8a5560d6f3634b8384627299)]  #471: Implement YCQL date and time standard functions
- [[`d7debca`](https://github.com/YugaByte/yugabyte-db/commit/d7debca731b381ff8b2c5153f15e2b48a9ae1b56)]  Add seconds to Alive column.
- [[`2b5fc7e`](https://github.com/YugaByte/yugabyte-db/commit/2b5fc7edcfb12a2ee24efdcefd0059669829a8fa)]  ENG-3874: Write empty batch with
- [[`453b81c`](https://github.com/YugaByte/yugabyte-db/commit/453b81c0276a74b66c1956dce75339d6b0c215dc)]  Full scan support for Postgres API
- [[`627a03f`](https://github.com/YugaByte/yugabyte-db/commit/627a03f2277a24753f4fb3435e7776de096fa70d)]  ENG-3959. Add set_preferred_zones command to yb-admin.
- [[`406a278`](https://github.com/YugaByte/yugabyte-db/commit/406a278eaaaf226eb5c03ade56bf3c64924299f3)]  (#492) ENG-3416: Fix end-key calculation for range deletes
- [[`86a103a`](https://github.com/YugaByte/yugabyte-db/commit/86a103ac751ecab0e5bc1190e4a26749277f151d)]  #490 (ENG-3981) Avoid creating checkpoints dir for system.transactions table
- [[`1308465`](https://github.com/YugaByte/yugabyte-db/commit/1308465b5e0fcf05a60344638635a81a8a8cb2ee)]  #472: Support boolean datatype in YCQL primary key column
- [[`2d2f378`](https://github.com/YugaByte/yugabyte-db/commit/2d2f378206045866e44aa20ee693e437229378f6)]  #471: Support date and time datatypes in YCQL
- [[`48adf81`](https://github.com/YugaByte/yugabyte-db/commit/48adf81b88eca952b4a9afe0ff7cb434f9f9ba0a)]  #485 (ENG-3962) fix Tablet::AlterSchema() to flush tablet metadata when schema version changes because of index change also.
- [[`54c2645`](https://github.com/YugaByte/yugabyte-db/commit/54c2645d16b9e15b6d1fcc7286ca49216f2372ba)]  ENG-2326: #484 : Periodic sync for Remote bootstrap
- [[`27c5898`](https://github.com/YugaByte/yugabyte-db/commit/27c5898c53cc8e8d3fb59fdbaf54e3e2f2b4063f)]  ENG-3862: Add an intermediate state when scheduling a delay in RpcRetrier
- [[`03bde5a`](https://github.com/YugaByte/yugabyte-db/commit/03bde5a52471fccb1c221fd56f2286d5fa78ce87)]  Avoid using ntp_adjtime in default clock
- [[`d6e5118`](https://github.com/YugaByte/yugabyte-db/commit/d6e511868c55df8585e78380f3bcb0eb2a96499d)]  Stabilize TestPgWrapper: correctly shut down backends on SIGTERM, and fix pointer corruption caused by implicit function declarations
- [[`88e1d69`](https://github.com/YugaByte/yugabyte-db/commit/88e1d6994d12bc70acfc37108d509f920974ada5)]  ENG-3949: #479: Fix removing from list of transactions that should be cleaned.
- [[`c71ed15`](https://github.com/YugaByte/yugabyte-db/commit/c71ed159d7584480f60c768f26b46cce1126b677)]  PR #429: Adding SimpleQueryTest suite from Apache Cassandra to Yugabyte DB's YCQL testsuite:
- [[`aba3ba1`](https://github.com/YugaByte/yugabyte-db/commit/aba3ba1f43837d6ed9a17516c7c4e691230b1012)]  ENG-3916. ZRangeByScore LIMIT option.
- [[`749601b`](https://github.com/YugaByte/yugabyte-db/commit/749601b6a9c6368849c78c1c87fbd851fc154c58)]  #480 ENG-3954: Check if a transaction is aborted
- [[`928220a`](https://github.com/YugaByte/yugabyte-db/commit/928220af81cddf476fc710d495018d1c4371c0dd)]  #369 Fix AlterTableRandomized.TestRandomSequence
- [[`f81514d`](https://github.com/YugaByte/yugabyte-db/commit/f81514d1caa8f893e2b99849c33477f6932cc87e)]  ENG-3650: Patch old transactions status table type in sys catalog
- [[`9904950`](https://github.com/YugaByte/yugabyte-db/commit/9904950c6654e3b92af7e92374f98c32edbe4f3d)]  [#386] Switch ResettableHeartbeater with Periodic timer
- [[`f2c3643`](https://github.com/YugaByte/yugabyte-db/commit/f2c3643c36661a9da10024985f5844cb453ed63d)]  ENG-3896: Allow DESCRIBE permission on ROLE resource only
- [[`ad371b9`](https://github.com/YugaByte/yugabyte-db/commit/ad371b90dcdc9092eedcea8e31f0cb0ae7f4d6f3)]  ENG-3650: Remove the dependency of transaction coordinator on transaction participant
- [[`f9f1fbb`](https://github.com/YugaByte/yugabyte-db/commit/f9f1fbb5b200fac5431bc53a4efcd4d3ba760c7e)]  ENG-3897: Remove calling MVCC w/o lease specified during intents cleanup
",105944401
459,False,False,2018-09-19T22:49:11Z,2018-09-19T23:35:47Z,"## Overview of Changes
* Distributed multi-shard/multi-table ACID transactions!
* Global & consistent secondary indexes
* UNIQUE constraint on secondary indexes
* Native JSON data type
* Public/private IP bindings for multi/hybrid cloud or multi-region deployments
* User authentication 
* Redis-compatibility features added to our YEDIS API:
  * “Read from followers” for tunable read consistency
  * Support for multiple databases or namespaces
  * Support for MONITOR, EXPIRE, TTL
* Bug fixes and performance enhancements
* Plus excellent progress on the Postgres-compatible SQL API!

## Key Commits
- [[`068f64f`](https://github.com/YugaByte/yugabyte-db/commit/068f64f1be3f0ed8a86fb2efc47516d0da1f1c89)]  Fixes #49 #111 #465 Efficiently support IN conditions for clustering columns
- [[`92d442a`](https://github.com/YugaByte/yugabyte-db/commit/92d442afaa6c0af795f9008f1909eddcfc33378b)]  [#386] Switch ResettableHeartbeater with Periodic timer
- [[`4ff9e7c`](https://github.com/YugaByte/yugabyte-db/commit/4ff9e7c5f19dee5eda0477aa8794838c678170a7)]  Remove TTL from init marker on TS type.
- [[`7b28dd7`](https://github.com/YugaByte/yugabyte-db/commit/7b28dd72674f0a10718f44f1ec133d66fcb138b6)]  Cap max pre-allocated file size for compactions at 1G
- [[`887820d`](https://github.com/YugaByte/yugabyte-db/commit/887820dc2f87c593a0820f43dddd8d06dccbad26)]   Fix hang during tserver shutdown
- [[`afef8f2`](https://github.com/YugaByte/yugabyte-db/commit/afef8f26145a3c74e43e6731c1336ccbc7f16c90)]  Fixes #469: Optimize QLResultSet to serialize rows results directly
- [[`2fdad35`](https://github.com/YugaByte/yugabyte-db/commit/2fdad350c6ea5cf49719b1a6f0751bf4e4006ef0)]  #456: Update committed hybrid time from WAL records
- [[`7e4108a`](https://github.com/YugaByte/yugabyte-db/commit/7e4108ac675fa29c356cdbfad38ff659155f8659)]  #467: Fix several issues with remote bootstrap
- [[`0d9feb2`](https://github.com/YugaByte/yugabyte-db/commit/0d9feb266d6c6bca121ea05dc5652e795c2ba74a)]  #338 Preliminary support for Redis Lists
- [[`d902325`](https://github.com/YugaByte/yugabyte-db/commit/d90232585c1b7df099b6a10070e28f7ab8964850)]  #334 Redis (P)ExpireAt Support
- [[`d4865d4`](https://github.com/YugaByte/yugabyte-db/commit/d4865d44370e712f09dd69007447e0df0684bffc)]  #460: Add handling of controller status in GetMasterEntryForHosts
- [[`19c9fed`](https://github.com/YugaByte/yugabyte-db/commit/19c9fed4899f4ee468f54a056ee1b660024a0065)]  Add memory limit to ram ratio (#458)
- [[`c6538a8`](https://github.com/YugaByte/yugabyte-db/commit/c6538a88dcadd9545ccf4fb2b33a4cb7dc246016)]  Added broadcast address for stable pod IDs in K8s. This fixes master/tserver pod failure cases. (#464)
- [[`cdbf60c`](https://github.com/YugaByte/yugabyte-db/commit/cdbf60c8be62f539f4f2be3cb917d60dfad216fb)]  [#289] Cleanup intents for aborted transactions in the compaction path
- [[`a0a2072`](https://github.com/YugaByte/yugabyte-db/commit/a0a2072b8a305bcd2c4bcdefb3b1b2105752a0d8)]  #459: Upgrading k8s yb cluster fails when bind address is private ip of pod.
- [[`8438e9f`](https://github.com/YugaByte/yugabyte-db/commit/8438e9f30ad36c5c98080fdacbaa9b0a26230eb6)]   #418: Increase default network rate for remote bootstrap
- [[`653871a`](https://github.com/YugaByte/yugabyte-db/commit/653871a6c98a38e069caacc92539750bf6c56859)]  Prevent PeerMessageQueue from being deleted while Peer could use it
- [[`6022cae`](https://github.com/YugaByte/yugabyte-db/commit/6022cae2797dce15e30f527453cce85f6d192cb4)]  Add loadbalancer option (#450)
- [[`154810c`](https://github.com/YugaByte/yugabyte-db/commit/154810cc5f5ddfb4c29633f3bfc4bfe8fa6ab596)]  (#418) Rate limiter for remote bootstrap
- [[`e4a55b9`](https://github.com/YugaByte/yugabyte-db/commit/e4a55b988a15f152c67067fe318f5d3349a95b85)]  #451: Fix double reply in case of read from follower during startup
- [[`5842ed6`](https://github.com/YugaByte/yugabyte-db/commit/5842ed619830c9216837a93eb33355d07f8e9ed4)]  Expose raw size in tablet-server metrics #439
- [[`3bd4f37`](https://github.com/YugaByte/yugabyte-db/commit/3bd4f37b1043e7b9f16d63dc1a54c17782146950)]  #451: Check result of weak_ptr lock, before doing actual call in LocalYBInboundCall
- [[`900a733`](https://github.com/YugaByte/yugabyte-db/commit/900a7337f5bacdacfdeff2c5402cbe51998ee41c)]  Fix CassandraSecondaryIndex degradation
- [[`f8a83c2`](https://github.com/YugaByte/yugabyte-db/commit/f8a83c209a4aef4c2a230f31aa3605b303ea6150)]  Use scoped_refptr for pggate classes so we can get rid of maps from raw to shared pointers
- [[`41b9a6e`](https://github.com/YugaByte/yugabyte-db/commit/41b9a6ed111d733089d09b98b07f5b27a7547332)]  #384 Rename ApplyAsync to ApplyOperation and get rid of the unused apply thread pool
- [[`6cc4bfb`](https://github.com/YugaByte/yugabyte-db/commit/6cc4bfb9678ced4d1fc3fb8222ddbe54b2e40109)]  Reverse scan should handle intents.
- [[`48a3d8f`](https://github.com/YugaByte/yugabyte-db/commit/48a3d8f732d1b26d8b5b8a36d033ba7d6d8331d7)]  Set in-memory master address list in tserver after a full move.
- [[`5a460b8`](https://github.com/YugaByte/yugabyte-db/commit/5a460b87f628a2f4d701cd621c3ef2147456487c)]  #444: IntentAwareIterator is missing intents even during a forward scan
- [[`d355997`](https://github.com/YugaByte/yugabyte-db/commit/d355997a75b100da538b68c33c5a709b88273e34)]  Fixes #445 Invalid start_doc_key error with IN condition and paging state
- [[`78c4c26`](https://github.com/YugaByte/yugabyte-db/commit/78c4c26492a6ebbf3ce6830416c1b730b315b324)]  Split tables in YB /tables view by system/index/user
- [[`e33a2bb`](https://github.com/YugaByte/yugabyte-db/commit/e33a2bbd050fcb8119f54c215ba25bcc329a88a8)]  IntentAwareIterator could miss intents from the same transaction
- [[`e940d61`](https://github.com/YugaByte/yugabyte-db/commit/e940d616a66fec1bc20098b434e1f96ac416c176)]  #403 Support Deleting and Recreating a Redis Table online.
- [[`2a4fb09`](https://github.com/YugaByte/yugabyte-db/commit/2a4fb09169da3a4c08740e88388576251312589a)]  #432: Add ""transactions"" and ""is_unique"" columns to system_schema.indexes
- [[`898e432`](https://github.com/YugaByte/yugabyte-db/commit/898e4322c78a5794f0a105d3d9ccaf1eab331fee)]  Integrate basic PostgreSQL statements from the external PostgreSQL process with the internal YugaByte PostgreSQL API
- [[`82884f9`](https://github.com/YugaByte/yugabyte-db/commit/82884f9eb864c200681a33f1f75d7c4ba60935db)]  Skip cleanup when transaction is not loaded
- [[`4be4c9b`](https://github.com/YugaByte/yugabyte-db/commit/4be4c9b7e562c7f9f8a7f994fa6fcc316a42c28b)]  Fixes #441: Return selected columns of ""select * ..."" with index in the same order of the table columns.
- [[`b2164ff`](https://github.com/YugaByte/yugabyte-db/commit/b2164ff7f98bf5449083701382e3daa12bd55c05)]  Fixes #434: Deletes of specific range key incorrectly deleting all rows for that partition key
- [[`b052e13`](https://github.com/YugaByte/yugabyte-db/commit/b052e13ff88f1385bf331af54a56075fcc95ca04)]  Fix to execute GetSegmentsSnapshot using lock
- [[`1c6e237`](https://github.com/YugaByte/yugabyte-db/commit/1c6e2377bafda21132e99ebd30f280d66254e116)]  #428: Support remote bootstrap for very large tablets
- [[`eb04e90`](https://github.com/YugaByte/yugabyte-db/commit/eb04e9081c8f1e90d4f67bc117155318af8271f3)]  Add file_macro to CCACHE_SLOPPINESS for better ccache hit ratio
- [[`36953b4`](https://github.com/YugaByte/yugabyte-db/commit/36953b4c153bec0452fc8be2939ab6618788ffbf)]  #388: Support batch request of DMLs on table with secondary index
- [[`d55bad6`](https://github.com/YugaByte/yugabyte-db/commit/d55bad6ba2c6b7289cf627af29d61829bf9f465e)]  Fix handling of write intents for aborted transaction
- [[`73a5e9d`](https://github.com/YugaByte/yugabyte-db/commit/73a5e9d295909cf3cd13b66369b96c3b2b38c672)]  Ignore error when removing index from the indexed table while dropping an index.
- [[`9d0085a`](https://github.com/YugaByte/yugabyte-db/commit/9d0085a1b76a1c740015581c0b7a520d83bec435)]  [#427] Change CQL wire protocol to move the JSONB type
- [[`b5d66ea`](https://github.com/YugaByte/yugabyte-db/commit/b5d66ea35cbe543faab93315afe8fcf74e5061b6)]  Make master and tserver have their own overrides (#426)
- [[`94be2b1`](https://github.com/YugaByte/yugabyte-db/commit/94be2b144226be3be40df8f792dc62e7ebd0ba59)]  Fix UpdateTransaction call during cleanup
- [[`03a3e47`](https://github.com/YugaByte/yugabyte-db/commit/03a3e477802020a2b509f9cf43d08283495f612a)]  #423: Truncate indexes when truncating a table
- [[`7e82039`](https://github.com/YugaByte/yugabyte-db/commit/7e820398a7aacab4890e2a26d60fd5e7e82d71c5)]  Remove intents of aborted transactions
- [[`8758c9f`](https://github.com/YugaByte/yugabyte-db/commit/8758c9f5f8ce9b7b1b976b013ce623153df4776e)]  #343 Implement Select and CreateDB commands.
- [[`026b582`](https://github.com/YugaByte/yugabyte-db/commit/026b582d03cf7263591da2ce6a67d8bbca3897d6)]  Allow overriding the UUID to be used for new instance metadata for a fresh master or tserver
- [[`03079e3`](https://github.com/YugaByte/yugabyte-db/commit/03079e3392e7dfbb8ae17eff3cc160d04d9bbe98)]  Allow remote compiler execution mode for Postgres build
- [[`8765bab`](https://github.com/YugaByte/yugabyte-db/commit/8765bab16c3f6ce6b7aa8fd5b7a9d2e6643bb13a)]  #415: End a query always when LIMIT clause is hit.
- [[`e65b6ed`](https://github.com/YugaByte/yugabyte-db/commit/e65b6ed72d1ee5a5c366df402a71cdaefae06803)]  #397: Added ability to specify multiple endpoints for master
- [[`9bc7dc1`](https://github.com/YugaByte/yugabyte-db/commit/9bc7dc139fc90992a9c7e4dc0ddbe0223c80d5c0)]  #410: Remove unused CQLRpcServerEnv
- [[`7b925bd`](https://github.com/YugaByte/yugabyte-db/commit/7b925bdce58766fca1149668befa02cca7f85e51)]  Support for SELECT in Postgres API
- [[`74751e8`](https://github.com/YugaByte/yugabyte-db/commit/74751e87ab249f154c94f8b48e021f54a2c1404a)]  #407: Refactor CQL write dependency check
- [[`ee502c7`](https://github.com/YugaByte/yugabyte-db/commit/ee502c74ce0c2b98197e4e0206abd53946ed83f9)]  (#398) Make secondary index update RPC calls async
",105944401
460,False,False,2018-08-15T21:14:16Z,2018-08-17T04:52:06Z,"
## Overview of changes

The following are some of the key fixes and features in this release:

* Basic helm chart support to deploy Kubernetes clusters
* Various bug fixes and performance improvements
* YEDIS
  * Auth support for Redis
  * Safety flags to disable dropping data, for example using commands such as `FLUSHALL`
* YCQL
  * Added support for ""broadcast address"" to enable public and private IP support
  * Ability to return fine-grained errors in CAS (compare and set) and batch statements
  * Support for weak secondary indexes for higher ingest performance


## Key Commits

- [[`76a3550`](https://github.com/YugaByte/yugabyte-db/commit/76a3550dc739f94a805b645b958f275539d0efd9)]  #401: Clean up YCQL batch execution
- [[`ad4abee`](https://github.com/YugaByte/yugabyte-db/commit/ad4abee0171f36eff7966ea3422809a8cddfa494)]  #382: Unable to initialize catalog manager with docker.
- [[`6db30ec`](https://github.com/YugaByte/yugabyte-db/commit/6db30ec0ea028acb83f07ebf6476b2941f6b84bb)]  Updated the pom file to include new Cassandra driver changes.
- [[`5d1774d`](https://github.com/YugaByte/yugabyte-db/commit/5d1774d7cc30f75e1b44f164795d855218d7106c)]  Clean up the use of SQL statement string in statement processor
- [[`083465c`](https://github.com/YugaByte/yugabyte-db/commit/083465cfa7cfd84fc119843912294690aaf80ba9)]  IsLoadBalanced check made per cluster.
- [[`e9606c6`](https://github.com/YugaByte/yugabyte-db/commit/e9606c6024bc0ebaa328a0d1840b74c01f33355b)]  (#375) Optimize queries with IN list to execute in parallel when reasonable
- [[`2048e79`](https://github.com/YugaByte/yugabyte-db/commit/2048e792c4bc11c57a1e906a189bad249ce567cd)]  #385: Add CassandraUniqueSecondaryIndex workload
- [[`048e821`](https://github.com/YugaByte/yugabyte-db/commit/048e82183a5e068f32bfe0c81f4c8486068b83ad)]  Fixed snapshot files collecting in the RemoteBootstrapSession and related test.
- [[`0dcb7f0`](https://github.com/YugaByte/yugabyte-db/commit/0dcb7f075513580e08b2c17995a786ebdb6f729c)]  #377: Move unique index duplicate-value check to index tablet.
- [[`b5502ef`](https://github.com/YugaByte/yugabyte-db/commit/b5502efa49d9bba1d08693ad1f210be7d99f5696)] In TabletPeer, we should not access try to call log() before the log is initialized
- [[`7cb3df0`](https://github.com/YugaByte/yugabyte-db/commit/7cb3df003f670763e387585150a5443e5e0d413c)]  Add batch update test for weak secondary index
- [[`76aac82`](https://github.com/YugaByte/yugabyte-db/commit/76aac824e15bb7f5c34cf67e7d4cdb3d4f37286a)]  Specify correct parent mem tracker for outbound connections
- [[`189260f`](https://github.com/YugaByte/yugabyte-db/commit/189260f154d9dec4bd076fe911b07a41823c0441)]  Public/private IP support in YB
- [[`059317c`](https://github.com/YugaByte/yugabyte-db/commit/059317c97290334ec37e743e5f01b0af25020656)]  #350 Avoid blocking in Peer::Close()
- [[`d898ee1`](https://github.com/YugaByte/yugabyte-db/commit/d898ee1cd321fff92c1d95cfebb432bba316748e)]  A macro-based DSL for C-to-C++ APIs for PostgreSQL integration
- [[`7e6fddd`](https://github.com/YugaByte/yugabyte-db/commit/7e6fdddb0c4b5d0bca329d86ef29baa946087082)]  [ENG-3454] Don't close Jedis after each pipeline batch.
- [[`5a062dd`](https://github.com/YugaByte/yugabyte-db/commit/5a062dd54a568c29903f2262e413d5f66c0f7cb8)]  Improve performance when sending peer's requests (#350)
- [[`a921f98`](https://github.com/YugaByte/yugabyte-db/commit/a921f98c77007e80e98f8ab4aee65ebf0c4df992)]  (#347) [YCQL] provide mechanism for DML operations to return finer-grained errors
- [[`b2fa67b`](https://github.com/YugaByte/yugabyte-db/commit/b2fa67b2364d601eb215a04ab9cea0fd48f9c713)]  ENG-3580: Fix abort scheduled async RPC task
- [[`c0abc0f`](https://github.com/YugaByte/yugabyte-db/commit/c0abc0f9c7fbd9ba7243c159e2d953cc2ff22f00)]  #373: Persist index info in tablet metadata.
- [[`eca8f18`](https://github.com/YugaByte/yugabyte-db/commit/eca8f1812c498e9ac797414a7779da8cc9027452)]  [ENG-3484] #335 Implement Redis Monitor command
- [[`28b4386`](https://github.com/YugaByte/yugabyte-db/commit/28b4386839917431dcf11e59cdf473eec2690524)]  (#374) Add suport for partition_hash() builtin function.
- [[`a5a78cd`](https://github.com/YugaByte/yugabyte-db/commit/a5a78cdf03dc60bf331ed96b218fd74ca7acb20e)]  [ENG-1735] #283 Implement Auth support for Redis
- [[`93cd133`](https://github.com/YugaByte/yugabyte-db/commit/93cd13383633ac4aeb47956ca5f27cdcc93657f3)]  [ENG-3543] #357 Fix error messages for Redis
- [[`0197104`](https://github.com/YugaByte/yugabyte-db/commit/0197104724822fbe11220be904fde5e21816f163)]  ENG-3546: CQL TLS Encryption
- [[`2848cd6`](https://github.com/YugaByte/yugabyte-db/commit/2848cd6c66ef19940207a3cd0daa40290cf21028)]  ENG-3326: Fixed reverse scan infinite loop issue.
- [[`10ef4e2`](https://github.com/YugaByte/yugabyte-db/commit/10ef4e256e363ab1aa0f2912c11ca0fbf742061a)]  [#145] Sum for Varint or decimal columns
- [[`5985d82`](https://github.com/YugaByte/yugabyte-db/commit/5985d82c2470851c175fc63e6514139b3b4133f4)]  ENG-3564: #361 Support for Alter Role
- [[`b4f2b82`](https://github.com/YugaByte/yugabyte-db/commit/b4f2b8259a9bd11c6fcd885a054dd62fbf67509c)]  #366: Update README.md to have a section for running the C++ and Java tests.
- [[`7e8e85e`](https://github.com/YugaByte/yugabyte-db/commit/7e8e85e5f2bd5740a651a5d110737e891002ddce)]  (#349) Enhance YCQL grammar to support interchanging order of OFFSET and LIMIT clauses.
- [[`a8dd107`](https://github.com/YugaByte/yugabyte-db/commit/a8dd107ceb1c70f6cfe16617af168387e08750ad)]  #362: Cache index table metadata in tserver when updating an index
- [[`f31cfc9`](https://github.com/YugaByte/yugabyte-db/commit/f31cfc9e397fdb32add937ebae111b2cde7c5d9b)]  ENG-3472: #346: Clean committed transaction in TransactionParticipant
- [[`16f1d6f`](https://github.com/YugaByte/yugabyte-db/commit/16f1d6f6daeb09f04b8261c2b24344859ba67bca)]  ENG-3529 #351: Refresh master leader when server queue is full
- [[`cedfae3`](https://github.com/YugaByte/yugabyte-db/commit/cedfae3f5ad8181130c1882fcdc16cfef9505593)]  ENG-3527: Implement weak secondary index
- [[`b595fe5`](https://github.com/YugaByte/yugabyte-db/commit/b595fe5a3702f788bd86c0c7c6b37e2ba1dfc4b1)]  #345 Fixed the return type of ""PING"" by adding a flag for returning a Simple String vs Bulk String
- [[`2bd0312`](https://github.com/YugaByte/yugabyte-db/commit/2bd0312fe4f9388daca5b861df76cd74a2db780e)]  #352: CREATE INDEX syntax changes
- [[`81ac392`](https://github.com/YugaByte/yugabyte-db/commit/81ac392482b910521e488c53ea7b97004a908620)]  Clean up the C API for PostgreSQL integration with YB data fabric and use YBCStatus
- [[`50fb6d2`](https://github.com/YugaByte/yugabyte-db/commit/50fb6d2363eb1b608b3be5c903e99a137d37e260)]  ENG-3493: add ELSE ERROR to YCQL
- [[`0f8ca9c`](https://github.com/YugaByte/yugabyte-db/commit/0f8ca9ce7b5f738277e35d9d3f48e2ff8cbc3ed1)]  Remove some unnecessary functionality from yb_fdw
- [[`5009728`](https://github.com/YugaByte/yugabyte-db/commit/5009728989291fc2f1b8cab95c08f59ac0bc31de)]  (#339) Support YCQL offset clause in docdb and our paging state.
- [[`a5719bd`](https://github.com/YugaByte/yugabyte-db/commit/a5719bdb61f887d6ab6f6271f134ec87a055ae60)]  Generate PostgreSQL catalog script for YugaByte DB
- [[`9343596`](https://github.com/YugaByte/yugabyte-db/commit/934359647a6c8dece46fa4c776883d242c9d1260)]  (#339) Add grammar and semantic analysis for offset clause.
- [[`6847aff`](https://github.com/YugaByte/yugabyte-db/commit/6847aff222b8f546591348365f3f659e0d0cd73e)]  ENG-1756: Support Redis ""CLUSTER SLOTS""
- [[`708ea83`](https://github.com/YugaByte/yugabyte-db/commit/708ea8333f5004e1173ecafb90d34b3d15cdc910)]  ENG-2929 : Shell master start should not allow master_addresses flag to be set.
- [[`6716483`](https://github.com/YugaByte/yugabyte-db/commit/6716483274ee44dce04f0e730eb70f49080d31e7)]  Set up a placeholder foreign data wrapper yb_fdw using file_fdw
- [[`607173b`](https://github.com/YugaByte/yugabyte-db/commit/607173b5c1730674e2963c53ab44ba6222343a6f)]  Allow specifying YB master addresses to use inside pggate with an env var
- [[`160ab8e`](https://github.com/YugaByte/yugabyte-db/commit/160ab8e6f4bc1e5349ef9064482c83c4cc1509bd)]  Refactor PostgresSecondaryIndex workload.
- [[`3aa2066`](https://github.com/YugaByte/yugabyte-db/commit/3aa2066c0f511098dbc20ce64d1e24e9735f6895)]  ENG-3453: Settings for TLS encryption
- [[`8c229db`](https://github.com/YugaByte/yugabyte-db/commit/8c229db7726a5942fbc8abaeb5e550bb6c3686c3)]  Add load-balancing test for query with secondary index
- [[`d2366eb`](https://github.com/YugaByte/yugabyte-db/commit/d2366eb0af582667a1f137b5b6ab487e08471b9f)]  ENG-3475: Remove compaction filter for provisional DB
- [[`a062473`](https://github.com/YugaByte/yugabyte-db/commit/a062473e778cbcd4a4c48bc6aa41fa083321b190)]  ENG-3481: added option to disable flushall in redis (#337)",105944401
461,False,False,2018-07-18T05:02:59Z,2018-07-18T05:05:17Z,"
## Overview of changes

Here are some key features and fixes:

- Support for unique constraints to ensure that a column does not have duplicate values in YCQL.
- Support fine grained selection and update of JSON attributes, built-in JSON operators in YCQL.
- Support for AVERAGE, blob conversion functions in YCQL.
- Ability to read from the local datacenter when using YEDIS.
- Support ZSCORE in YEDIS.
- Support bounded staleness for follower reads.
- Presto integration.

## Key Commits

- [[`ab0611e`](https://github.com/YugaByte/yugabyte-db/commit/ab0611ef761924bfca711ac5bd05ead5c0495fad)]  ENG-3453: Add TLS support to RPC layer
- [[`70fcb1b`](https://github.com/YugaByte/yugabyte-db/commit/70fcb1b04e99c739f7dc9c0b51b02de62a2c1a6c)]  Add a workload to test secondary indexes in postgres.
- [[`b06d6c3`](https://github.com/YugaByte/yugabyte-db/commit/b06d6c32fbe3d708c88d682d34d2df95c56835eb)]  Use thread pool to pickup status tablet when wait is disallowed
- [[`979fbc8`](https://github.com/YugaByte/yugabyte-db/commit/979fbc8a10945c7cc30c2a4543687a1843ce969b)]  Ensure we allow the same column multiple times in WHERE and IF clauses for json and collection columns
- [[`aa3621e`](https://github.com/YugaByte/yugabyte-db/commit/aa3621e96a4815a8962a1bb2922216fe0712244d)]  Fix check failure when reading in future
- [[`8e0bf34`](https://github.com/YugaByte/yugabyte-db/commit/8e0bf3437f6b90b831c74bcbcbe3d06d62d94c6f)]  #322: Always raise unique constraint error for unique secondary index violation
- [[`bc58df3`](https://github.com/YugaByte/yugabyte-db/commit/bc58df331051fc3030fe607f1ed4f7cb42f06e3d)]  Fix TSAN issue with sys_catalog in catalog manager
- [[`43c1146`](https://github.com/YugaByte/yugabyte-db/commit/43c1146b7a12e180894308c1964154c5ab0e612e)]  (#331) ENG-3407: Pick local transaction status tablet
- [[`25177f6`](https://github.com/YugaByte/yugabyte-db/commit/25177f680da1102f9c78bfcab6f40e0501b6e3d5)]  Remove redundant delete from index table
- [[`9879ada`](https://github.com/YugaByte/yugabyte-db/commit/9879adac051b8eaf528e07c92b3372ad38d2cacc)]  #276: Bounded staleness for follower reads
- [[`c6e0c4d`](https://github.com/YugaByte/yugabyte-db/commit/c6e0c4d3ebee2ed2be904a283d31e76ff7927142)]  #322: Abort transaction on failed DML.
- [[`b8ddceb`](https://github.com/YugaByte/yugabyte-db/commit/b8ddceb13c4e469541bd3d34f174e9ad0629db24)]  #322: Implement unique secondary index
- [[`7ccda6f`](https://github.com/YugaByte/yugabyte-db/commit/7ccda6f0bfd3012d23f32ffe05b72320acfe421b)]  #327: Fix missing null index column values.
- [[`642e0e7`](https://github.com/YugaByte/yugabyte-db/commit/642e0e705be14f6fff6230ca6f599392feacf1ae)]  #325: Fix SEGV when creating an index with an unsupported index column datatype.
- [[`97f32b2`](https://github.com/YugaByte/yugabyte-db/commit/97f32b2e64467a20cfb7694d80145629814f02c4)]  #287: Fix occasional inconsistent read of data written in a distributed transaction
- [[`405396a`](https://github.com/YugaByte/yugabyte-db/commit/405396a1dbc566107d0e64acd5f1e2b9aab2ca9e)]  #293: Use a separate RocksDB for provisional records
- [[`d0779bd`](https://github.com/YugaByte/yugabyte-db/commit/d0779bd01880d54fbecc7429cfa87ee66898c98a)]  #294: Tserver misses new master info in some cases.
- [[`9582136`](https://github.com/YugaByte/yugabyte-db/commit/9582136dc18b13856e0ddc08d98ee691b23ef7b7)]  (#294) Fix tserver overwriting master address list in-memory.
- [[`1c3a235`](https://github.com/YugaByte/yugabyte-db/commit/1c3a235965549b808a18a94caaf6c18d5efb9fb0)]   #311 Prefer local tserver, or tservers in the same zone when redis_allow_reads_from_followers is set
- [[`a855a96`](https://github.com/YugaByte/yugabyte-db/commit/a855a96c82f55500fd645b32648d571087d4d125)]  ENG-3378 cqlsh: ""select * from system.transactions"" crashes tserver.
- [[`de1a8f9`](https://github.com/YugaByte/yugabyte-db/commit/de1a8f9174800219951733bdc3b5750bcb6e6d91)]  (#303): Handle multiple updates to same column in SET expression appropriately.
- [[`c846c6c`](https://github.com/YugaByte/yugabyte-db/commit/c846c6c9713fe2aa2fe9a32fc7b3c80c089996d3)]  Support fine grained updates for JSON columns.
- [[`41f4982`](https://github.com/YugaByte/yugabyte-db/commit/41f49828b88fc7332b02959236cbc127c3ca0b9b)]  #310: Fixes for yb-ctl setup_redis wait and num_shards
- [[`25c75f4`](https://github.com/YugaByte/yugabyte-db/commit/25c75f4dcf2b96bf3634252842998e24c34518eb)]  Add support of NTP clock to master
- [[`6287d0a`](https://github.com/YugaByte/yugabyte-db/commit/6287d0a5cbcd00068348f83493e741466ff31081)]  ENG-3282: #313: Use HostPort in Proxy instead of Endpoint
- [[`03dc761`](https://github.com/YugaByte/yugabyte-db/commit/03dc7618aff9a80e016afa2a410938feb765e59b)]  ENG-2724 Strongly Typed Uuids
- [[`3146d18`](https://github.com/YugaByte/yugabyte-db/commit/3146d18e03b837438f524a8b2129e9c65fa42af3)]  Implement transaction read restart
- [[`c2e0f20`](https://github.com/YugaByte/yugabyte-db/commit/c2e0f209a3463e353d16832a9a08b8693698c3cd)]  Add metric to track read requests requiring restart.
- [[`57d40c6`](https://github.com/YugaByte/yugabyte-db/commit/57d40c6e58fec4ff2615d00dddd003ccb91ed4d4)]  #312 Fix handling of min value as token upper bound
- [[`3ac9146`](https://github.com/YugaByte/yugabyte-db/commit/3ac9146650af5632d2e60e1b621a9962d972e2f8)]  Add metric to track expired transactions.
- [[`103f074`](https://github.com/YugaByte/yugabyte-db/commit/103f0745e1d816b25a83ebb2f5ff95f39c491f00)]  #307: Fix occasional ""SetTransaction with non empty batcher"" error when committing a distributed transaction
- [[`7bb3972`](https://github.com/YugaByte/yugabyte-db/commit/7bb3972ee0b19ff5e1a5ce0880e1022bce4826ea)]  ENG-3317: Fix issues with high concurrent transaction aborts because of write conflicts
- [[`99f0ae1`](https://github.com/YugaByte/yugabyte-db/commit/99f0ae1a7e156dcbfbf4061cfdbcceaef89d5a19)]  #264 Implement blob conversion functions in YQL (simple data types).
- [[`4b450cd`](https://github.com/YugaByte/yugabyte-db/commit/4b450cdc5bc0ab1f87a3fdfc4a91282550b0b8a3)]  #238: Retry distributed transaction on conflicts
- [[`eddf548`](https://github.com/YugaByte/yugabyte-db/commit/eddf5485f96fc704ad1f90a821a272e553cd1c5e)]  (#291) [YCQL] Aggregation functions headers
- [[`0be501d`](https://github.com/YugaByte/yugabyte-db/commit/0be501db6dffd6a9aa73065d6d2410ce0941403d)]  ENG-3293: implement secondary index workload
- [[`40d75b7`](https://github.com/YugaByte/yugabyte-db/commit/40d75b7e4805f17cc28fae8556a4908a9cb2ac0d)]  Remove error logging and reduce pool overflow log rate.
- [[`5b4b4b4`](https://github.com/YugaByte/yugabyte-db/commit/5b4b4b4a1f9271a48a211291b6939b5207b13675)]  #296 Add the size_estimates system table to YCQL
- [[`9aca5e0`](https://github.com/YugaByte/yugabyte-db/commit/9aca5e006c54e279c3d52a6f90d807925ba7a82e)]  Update Spark and Cassandra driver versions
- [[`4f1d848`](https://github.com/YugaByte/yugabyte-db/commit/4f1d848e94096f0fe98988027bb1d6a5e43fca49)]  (#26) Implement CAST(expr as Typename) builtin function (especially for json)
- [[`2dfc031`](https://github.com/YugaByte/yugabyte-db/commit/2dfc031d5bc0e2944e128a091bbc749b7fed4a07)]  (#290): Add support for avg in YCQL
- [[`30c425f`](https://github.com/YugaByte/yugabyte-db/commit/30c425f001bfd6f603b1228faa8c54cdad98b00c)]  ENG-3213: Implement IsLeaderLoadBalanced RPC
- [[`9a13bde`](https://github.com/YugaByte/yugabyte-db/commit/9a13bdec86a78efed62a187ecba6c45a63ee2764)]  Remove ExecContext::Error overloaded APIs
- [[`1c011ea`](https://github.com/YugaByte/yugabyte-db/commit/1c011eafd1851d81a3bebd78b816e7214b0ea189)]  #277: Add metric to track distribute transaction conflicts
- [[`71f1d82`](https://github.com/YugaByte/yugabyte-db/commit/71f1d8216a53d1d1df6dc3d136d00c2035813898)]  Ensure json scalar strings don't require quotes.
- [[`28845be`](https://github.com/YugaByte/yugabyte-db/commit/28845be45e9316bc147ab532251f901ab541460c)]  Fix some sample apps to honor the user specified table name.
- [[`49edf46`](https://github.com/YugaByte/yugabyte-db/commit/49edf46b0420fd8383f3fd315e44760e17f5edec)]  Add custom numeric opcode to builtin function directory.
- [[`deb2fc5`](https://github.com/YugaByte/yugabyte-db/commit/deb2fc51846fffb3ff2d27ae658461fa98318dfb)]  #282: Enhance master change config to remove a dead peer.
- [[`56803e3`](https://github.com/YugaByte/yugabyte-db/commit/56803e325b614b961b80cc479969273675787566)]  ENG-3184: Two read buffers per connection should not count towards the read buffer limit
- [[`5dae084`](https://github.com/YugaByte/yugabyte-db/commit/5dae0846426f6858c6e7d29bb12d59158ca4163d)]  Reduce rpc timeout defaults for redis
- [[`f619ccd`](https://github.com/YugaByte/yugabyte-db/commit/f619ccdc88be92192e3b9d78598a40ca042b948e)]  ENG-3239. Remove repeated log.
- [[`94d19c0`](https://github.com/YugaByte/yugabyte-db/commit/94d19c02a9478ea8ee3f720e469241186a10b7ec)]  (#175) ENG 3108: Implement ZSCORE
- [[`5bfb330`](https://github.com/YugaByte/yugabyte-db/commit/5bfb330fcec662ee97b4797b959ac01a28f32be4)]  ENG-3217: Introduce interval for update consumption of root mem tracker
- [[`92ce6d0`](https://github.com/YugaByte/yugabyte-db/commit/92ce6d0b7f452664ce07185171802a501eb5767e)]  #260 Accept lowercase options expire_in expire_at. Improve the error messages when the absolute timestamp is incorrect
- [[`eb5b0f8`](https://github.com/YugaByte/yugabyte-db/commit/eb5b0f8b7bc5e203c6b74a8253d61d05a7aaa573)]  #259 Fix inconsistencies in YCQL keyword list
- [[`5d48691`](https://github.com/YugaByte/yugabyte-db/commit/5d48691fe9830b24554eb475a6a83e1754ccc7aa)]  #237: Fix transaction status leadership change
- [[`7bf8cbb`](https://github.com/YugaByte/yugabyte-db/commit/7bf8cbbe887a905154927aef3b44a077aad2b248)]  (#163) Support fine grained selection of json attributes in CQL.
- [[`5cc9357`](https://github.com/YugaByte/yugabyte-db/commit/5cc9357d0ce6c27387761fb03e1da9ce636edb74)]  (#162) Add support in docdb to correctly evaluate json operators.
",105944401
462,False,False,2018-05-04T04:08:15Z,2018-05-04T04:43:11Z,"## YugaByte DB 1.0 release  🔥🍾

## Overview of changes

Big payload!

- PostgreSQL API beta support
- Cassandra API enhancements (now called *YugaByte Cloud Query Language* or *YCQL*):
    - Introduced a JSONB data type for storing documents
    - Added a personalization and a timeseries workload to the sample apps
- Redis API enhancements (now called *YugaByte Dictionary Service* or *YEDIS*):
    - Introduced follower reads
    - Added more command coverage (like `ZRANGE`, `TSLastN`, etc)
- Distributed transactions enhancements
    - Increased transactions perf
    - Fixed some corner case error conditions
- Lots of performance improvements
    - Improved core decoding logic to boost perf on 2-core machines
    - Better handling during huge spikes (backpressure)
    - Handle large network buffers better when getting large memory-buffer requests


## Key Commits

- [[`0d07add`](https://github.com/YugaByte/yugabyte-db/commit/0d07add220f536fcf3b27402ea0086776198fa79)]  #239 Callback should keep a reference to Synchronizer in UpdateReplica
- [[`10338ff`](https://github.com/YugaByte/yugabyte-db/commit/10338ff0e482ce41d2a43732f880bfdeb7803fee)]  Consensus: Use periodic timers for failure detection
- [[`f1e12eb`](https://github.com/YugaByte/yugabyte-db/commit/f1e12ebab800582f810cae2ce4abbf4637158a77)]  Loose-ends for PostgreSQL support
- [[`e9f3735`](https://github.com/YugaByte/yugabyte-db/commit/e9f37352e85abfbb82106707791c648c73863b68)]  Table splits should be created based on primary cluster tserver count.
- [[`193cd4c`](https://github.com/YugaByte/yugabyte-db/commit/193cd4ca2127d235a4e53d384e5a948010211b39)]  (#162) Add grammar and parsing for basic json where clause filtering.
- [[`0bc9d69`](https://github.com/YugaByte/yugabyte-db/commit/0bc9d698fb12c38a167c7cb97be49fd2f3991f49)]  #198 Show only Cassandra keyspaces and tables in cqlsh
- [[`39ef45d`](https://github.com/YugaByte/yugabyte-db/commit/39ef45d8e863e1497bbdf8d546de0f7ceb6cd39f)]  Fix bug in Postgres SSL negotiation handling
- [[`95aa22e`](https://github.com/YugaByte/yugabyte-db/commit/95aa22e3c16dc9bf845e568be6debce128f03db4)]  Read replicas should not show up as LEARNERSs
- [[`a5bbca4`](https://github.com/YugaByte/yugabyte-db/commit/a5bbca47e662952e93f038e63189a17372081dea)]  Avoid using spinlocks in the ts_tablet_manager.
- [[`ec4ae20`](https://github.com/YugaByte/yugabyte-db/commit/ec4ae20c54312dd8b3cee1f1397081aef4545d7d)]  Fix value validation in CassandraTransactionalKeyValue load-tester.
- [[`c19b14f`](https://github.com/YugaByte/yugabyte-db/commit/c19b14fdb609d8ed83491f7791f70fee33875277)]  Fix intermittent ""Pool is CLOSING"" exception in the write-only setup phase of Java load-tester
- [[`c560765`](https://github.com/YugaByte/yugabyte-db/commit/c560765b75de66782fe798481e5ab102b6f2c6bc)]  Adding java support for shared thirdparty
- [[`c52c55e`](https://github.com/YugaByte/yugabyte-db/commit/c52c55e4cd1a8aca673c240644bc86960230ccee)]  Automatically set network buffer limits based on available memory
- [[`7ba423c`](https://github.com/YugaByte/yugabyte-db/commit/7ba423c12b32a1118435ed20a14e31ca4881d767)]  LogCache improvements: SpaceUsed outside lock and fix race on next_sequential_op_index_
- [[`7892a2a`](https://github.com/YugaByte/yugabyte-db/commit/7892a2adee1a3c334d0a61cb5a73b8010fff7530)]  Limit max wait in SetPermanentUuidForRemotePeer
- [[`9bf8fce`](https://github.com/YugaByte/yugabyte-db/commit/9bf8fcea3b34c0128ce5045f4072771995844b0a)]  Use atomic variable for state in TabletPeer
- [[`43cda3b`](https://github.com/YugaByte/yugabyte-db/commit/43cda3b4cb9c19763dbb17e2fff0505e1402b57b)]  Further reduce writers for batch CQL workloads.
- [[`7458489`](https://github.com/YugaByte/yugabyte-db/commit/745848902041377826f914fcbfba0d7604cb9fee)]  Removed filenames from error messages
- [[`e0b4b5d`](https://github.com/YugaByte/yugabyte-db/commit/e0b4b5d742ff359a4f6c7922dc77b5d2d3c9c190)]  Add links for Cassandra, Redis and PGSQL API RPCs in progress in tserver.
- [[`aad076c`](https://github.com/YugaByte/yugabyte-db/commit/aad076c318d62cc7097eeed066a6b680bad227de)]  Reduce default logging from reactor.
- [[`be18db9`](https://github.com/YugaByte/yugabyte-db/commit/be18db9646452f0c0627ba0fc537c81c5c64723f)]  Fix TSAN version of TestRedisService.TestHMGetTiming
- [[`bb204e4`](https://github.com/YugaByte/yugabyte-db/commit/bb204e4411beffda750a1512fda61cdaccf789ea)]  #236: Fixed TestPathUtil.TestODirectFileCreationInDir
- [[`26552c5`](https://github.com/YugaByte/yugabyte-db/commit/26552c5274b5cbd717ed65c90061c6e1ffd0b3ba)]  Linting error for common due to new lib yb_bfpg
- [[`e86a336`](https://github.com/YugaByte/yugabyte-db/commit/e86a3369645bca93b4600a2d4d32f3f47cf21f86)]  #197: Fix DoсDB compaction filter to skip transaction metadata
- [[`222341b`](https://github.com/YugaByte/yugabyte-db/commit/222341b666fb0d0c4f3c6d8659af8d4738715986)]  Switch RaftConsensus to shared_ptr
- [[`3cdeecf`](https://github.com/YugaByte/yugabyte-db/commit/3cdeecf0778bb953a68f70e7d0f3ef04e8f92a3f)]  Load balancer does not respect replication factor
- [[`a9fcc08`](https://github.com/YugaByte/yugabyte-db/commit/a9fcc0834fe801506da9cf53529ce6e25e857b20)]  #196: Fix ""Commit of expired transaction"" error under high-load distributed transactions
- [[`9b6df54`](https://github.com/YugaByte/yugabyte-db/commit/9b6df54f29a0b5d6f2bc3d764222615d266e294d)] Harden CreateTable validation in CatalogManager
- [[`5dc30fc`](https://github.com/YugaByte/yugabyte-db/commit/5dc30fc45a9e63c8e2ffa983e4b7161ccf0f24a3)]  Improve DocDB and IntentAwareIterator performance
- [[`92ac433`](https://github.com/YugaByte/yugabyte-db/commit/92ac433ef9d866c887d79c0ac609b2b5f8162df3)]  Keep pending operation counter disabled on tablet shutdown
- [[`49c9d4a`](https://github.com/YugaByte/yugabyte-db/commit/49c9d4a1bd61ce64a9e63157d58cd2765e0257d5)]  Postgresql Support
- [[`7b12cce`](https://github.com/YugaByte/yugabyte-db/commit/7b12cce17745647e1870f7f7b44a9a71068ceecd)]  Allow integration of distributed txns with NTP clocks such as AWS time sync service
- [[`d6d130b`](https://github.com/YugaByte/yugabyte-db/commit/d6d130bc427a44e790556e9374ece6fcef4a02ed)]  #194: Some java client wait APIs could incorrectly exit due to overflow.
- [[`b125942`](https://github.com/YugaByte/yugabyte-db/commit/b1259425dd394853ca2263989f073d1bd42504eb)]  Fix postgres port in java mini cluster
- [[`7482468`](https://github.com/YugaByte/yugabyte-db/commit/748246882128d313147e67da3172a1911be8090c)]  #170: New TsRevRangeByTimestamp redis command
- [[`8797e39`](https://github.com/YugaByte/yugabyte-db/commit/8797e3936cac93cb9d299fefb2561859ed906c0f)]  Implement ZRANGE for Sorted Sets.
- [[`158def7`](https://github.com/YugaByte/yugabyte-db/commit/158def7058cde83a4f3bdda0172b3923f07d62ec)]  Improve performance of IntentAwareIterator
- [[`91e6e02`](https://github.com/YugaByte/yugabyte-db/commit/91e6e02303b9a6986dad4b501991420026464c9f)]  #159: Added psql 3rd party
- [[`9ba8436`](https://github.com/YugaByte/yugabyte-db/commit/9ba84368f3f30ddef0489a81cff6057cd3867bb9)]  Async DNS resolution of peers
- [[`a7d1447`](https://github.com/YugaByte/yugabyte-db/commit/a7d1447712e6b2e46da48ea6bfb3a9f1f5af0d40)]  Removed exclusive index bounds in ZRevRange.
- [[`d0679af`](https://github.com/YugaByte/yugabyte-db/commit/d0679af3e839ba7fe8e62cf8dc2cd072fee3e4a9)]  #23: Use cassandra driver's DNS resolution
- [[`b67e03c`](https://github.com/YugaByte/yugabyte-db/commit/b67e03c226a8aecf1e0c0e216ac0de1f15d31066)]  #82 Do not tombstone a tablet even if new tserver doesn't get promoted
- [[`d537ed2`](https://github.com/YugaByte/yugabyte-db/commit/d537ed2caa2fba7320b29922ac02a32f50db72ac)]  #87 Expire based on time spent in the queue
- [[`1796740`](https://github.com/YugaByte/yugabyte-db/commit/17967400a17b7cf7448b2e8c252d4d9baa23b327)]  (#141) DocDB filtering on minor compactions
- [[`08762c7`](https://github.com/YugaByte/yugabyte-db/commit/08762c7a3914b90d91bf7723a3ada9af66797434)]  #148: Fixed clqsh wrapper
- [[`be2d598`](https://github.com/YugaByte/yugabyte-db/commit/be2d598a6ed00b2fbe8b72810b6b070788c2e0e1)] Basic jsonb implementation with support at C++ SQL processor level.
- [[`c9d74a2`](https://github.com/YugaByte/yugabyte-db/commit/c9d74a224db0e1c331eb8cc321d9859540ab19a6)]  #110: Allow redis reads from followers
- [[`d78db0f`](https://github.com/YugaByte/yugabyte-db/commit/d78db0f56d838056246642a8a9adf3b6f798fab8)]  Remove transaction_table_num_replicas flag.
- [[`e640ac7`](https://github.com/YugaByte/yugabyte-db/commit/e640ac7ed5c057d8ee0e010cd6b7b3af3dbc36bf)]  Add support for arrays in our jsonb serialization format.
- [[`05d100c`](https://github.com/YugaByte/yugabyte-db/commit/05d100cb257fa125a7a9a67010b26227f2ac8275)] Additional data types for jsonb serialization.
- [[`907243a`](https://github.com/YugaByte/yugabyte-db/commit/907243ab26b68eed4e0b88a01e51f302a97591c4)]  (#109) Support TSCard for redis time series.
- [[`17c3081`](https://github.com/YugaByte/yugabyte-db/commit/17c308166075c550747fa857538e5e6fe42f2a19)]  Make the appenders use a thread pool
- [[`c2555ed`](https://github.com/YugaByte/yugabyte-db/commit/c2555edc99c0196344e4ea8ea081aa4ab7976fdd)]  Allow YBClient callback(s) to run in a separate threadpool
- [[`9cd6a2f`](https://github.com/YugaByte/yugabyte-db/commit/9cd6a2fc484d17da1485f177ec321e9cfda6adfb)]  Limit the total amount of memory consumed by network read buffers
- [[`8f2f390`](https://github.com/YugaByte/yugabyte-db/commit/8f2f390b2f8353048f1f83636b938cbf9aad99a1)]  add gflag to enable/disable compression of sstables
- [[`29058a0`](https://github.com/YugaByte/yugabyte-db/commit/29058a0006e3dd4d2344975bb355b4f6f58d22c1)]  #109 Implement TSLastN functionality for redis time series.
- [[`89a0269`](https://github.com/YugaByte/yugabyte-db/commit/89a0269503904bb63dcc92896be13fbd43ef0de2)]  Change defaults for Kernel Watchdog
- [[`4c5813a`](https://github.com/YugaByte/yugabyte-db/commit/4c5813a9d8d518cc3cf5fdcba38f52fd846f6c7c)]  Detecting if the data/log/wals allow file creation with O_DIRECT.
- [[`409704d`](https://github.com/YugaByte/yugabyte-db/commit/409704d4d21e9bd7da66f40f0459eef53f7fbbe0)]  Increase performance of FastDecodeSignedVarInt.
- [[`74536a0`](https://github.com/YugaByte/yugabyte-db/commit/74536a0736472292967c703fc59f517ea3a6f060)]  PrimitiveValue write time is being accessed without being initialized
- [[`95f3092`](https://github.com/YugaByte/yugabyte-db/commit/95f309205fcc721f36bdd70eff321aca06d094c9)]  Create yugabyte-statefulset-local-ssd-gke.yaml
- [[`ee306e0`](https://github.com/YugaByte/yugabyte-db/commit/ee306e096512c43b9889a807c9b28cab64812ffd)]  Add a Cassandra batch timeseries app.
- [[`37f9c6e`](https://github.com/YugaByte/yugabyte-db/commit/37f9c6ead979495d98188641451f264ba87dcc51)]  Fix failed task transition kStateWaiting -> kStateRunning
- [[`6d981be`](https://github.com/YugaByte/yugabyte-db/commit/6d981beb8c03eee73e3456aa593f6d56df95ad59)]  Fix batch/transaction inter-statement dependency analysis for multiple writes.
- [[`561b811`](https://github.com/YugaByte/yugabyte-db/commit/561b8117da2820dcb56d1c8ea7361a33cee27eb6)]  Avoid overhead of encoding read_time_.global_limit in IntentAwareIterator::SeekForward().
- [[`57946b9`](https://github.com/YugaByte/yugabyte-db/commit/57946b9d437d415495ca428ea76b47e0d1c926c2)]  Cassandra Personalization Workload
- [[`1192f57`](https://github.com/YugaByte/yugabyte-db/commit/1192f57c82472813bef9a15c090b008f39646c21)]  Avoid overhead of decoding DocHyridTime in IntentAwareIterator::SkipFutureRecords.
",105944401
463,False,True,2018-03-21T19:42:42Z,2018-03-21T21:27:32Z,"## Overview of changes

* Basic jsonb serialization and de-serialization to support a document datatype
* Lots of performance improvements
    * Improved performance when running on 2 core machines with auto-tuning of various gflags
    * Reduced lock contention
    * Eliminated unnecessary memory copies
* YugaByte DB can now run on ZFS filesystem
* Initial secondary index read/write support
* Handling large requests in Redis and memory protection on violating max command size


## Key commits

- [[`cdf48e3`](https://github.com/YugaByte/yugabyte-db/commit/cdf48e37c08aa35d69223a6d78476a9b18c5b74d)]  Fix hybrid time going backwards because of logical component overflow
- [[`0bf401e`](https://github.com/YugaByte/yugabyte-db/commit/0bf401ef266bc6313fe8afc416e74cb5397b35b8)]  Add RPC read buffers to MemTracker
- [[`451b7f8`](https://github.com/YugaByte/yugabyte-db/commit/451b7f85a42c97b504b00a3b10fa032ffc495bff)]  Misc client template simplifications
- [[`e27d429`](https://github.com/YugaByte/yugabyte-db/commit/e27d4296c6e9d62e446450f87b4b4321836b8807)]  #103 Do not crash due to block size mismatch on ZFS
- [[`218ddcd`](https://github.com/YugaByte/yugabyte-db/commit/218ddcd3e2d87d5706962c7b7f73e238ac62c7a7)]  Remove log spew from TabletServiceImpl::Read
- [[`956deb2`](https://github.com/YugaByte/yugabyte-db/commit/956deb2c1f4f1f4d1c6e360be8223af86f241b9b)]  #101 pick better auto-defaults for max number of compactions
- [[`28ca802`](https://github.com/YugaByte/yugabyte-db/commit/28ca8021e07c22a4920aeda2681a2e6c68c62924)]  Keep java client API to pass in number of tablets for redis table creation.
- [[`e321311`](https://github.com/YugaByte/yugabyte-db/commit/e32131149d9208eab29645ac3bfda0e302e4c2a2)]  Secondary index read/write
- [[`e463718`](https://github.com/YugaByte/yugabyte-db/commit/e463718f333a79b82afbd65d09319adf428333f3)]  Fix macOS build issue in physical_time.cc
- [[`f4a1c89`](https://github.com/YugaByte/yugabyte-db/commit/f4a1c89e46d546de77588c3d8e1eb39195109983)]  Fix build in pg_server_main.cc
- [[`5a91590`](https://github.com/YugaByte/yugabyte-db/commit/5a915901ec756bfb3edd5221617faa736f2872e7)]  #1 Enable building on gcc 7 on Ubuntu 17.10
- [[`6f9bdef`](https://github.com/YugaByte/yugabyte-db/commit/6f9bdefa91242a3cbd5a3e48b5db0e1c52ccc5b7)]  Add version info to log file including build timestamp and git
- [[`f9bafcc`](https://github.com/YugaByte/yugabyte-db/commit/f9bafccf43b9f9d9138491f8ddb1402f69032706)]  New clock abstraction layer
- [[`2826097`](https://github.com/YugaByte/yugabyte-db/commit/28260973b39b785be31ffc60ee4af1444fa9c209)]  Change defaults on server side for some flags.
- [[`0440305`](https://github.com/YugaByte/yugabyte-db/commit/0440305c04e30517e545a289758f92fbe1b3d0a2)]  Fix missing comma in ybctl for pgsql service display.
- [[`a18d393`](https://github.com/YugaByte/yugabyte-db/commit/a18d393ab24f9d0cb793b832be98d3e279c68bd8)]  Remove number of tablets from redis table creation client APIs.
- [[`26f909e`](https://github.com/YugaByte/yugabyte-db/commit/26f909e36ec73f9c9026c1f389dbc07907cf8533)]  RPC support for processing commands from  Postgresql clients.
- [[`40786a4`](https://github.com/YugaByte/yugabyte-db/commit/40786a4d4b81e5f9ec7636c50cd9f3a9f9bd191b)]  #97: Fix for Fatal failure on scaling down kubernetes cluster
- [[`a60c81f`](https://github.com/YugaByte/yugabyte-db/commit/a60c81f26f81fc611e5f0e94a96115837f25e6f2)]  Report the stored log entry header CRC in the CRC mismatch error message.
- [[`4c6baeb`](https://github.com/YugaByte/yugabyte-db/commit/4c6baeb5bc117424cd5a0eaa327310d2af1d4c3f)]  Remove semi-colon requirement after ""begin transaction"" plus misc code cleanup.
- [[`5104ad2`](https://github.com/YugaByte/yugabyte-db/commit/5104ad23ba1abb1494ae487ea9e389371fd87e3a)]  #98: Remove pointer to TableReader from MultiLevelIndexReader
- [[`4327930`](https://github.com/YugaByte/yugabyte-db/commit/432793073de75f298eb7be4efa14cb9b50395f75)]  Quick fix of SegFault during reads.
- [[`44640b0`](https://github.com/YugaByte/yugabyte-db/commit/44640b0c98ebd8e0a7a95df9f4edda549350a844)]  Avoid copying of QLValue and QLValuePB.
- [[`960f19f`](https://github.com/YugaByte/yugabyte-db/commit/960f19f41d0caecb4dd201b718e4551b222298d8)]  Do not print a failure message when remote bootstrap is started successfully
- [[`5b16cf1`](https://github.com/YugaByte/yugabyte-db/commit/5b16cf1ae9bb5387eeb96893de745111136e77b1)]  Send num shards parameter to master from yb-ctl.
- [[`c311ad3`](https://github.com/YugaByte/yugabyte-db/commit/c311ad31ef2dc6145c9fd017dbb007769b772129)]  Master removal needs to remove yb-data contents for shell mode.
- [[`2726eac`](https://github.com/YugaByte/yugabyte-db/commit/2726eac1a936c62c5a0cd65452691ff43684e8f0)]  Resolving bug where the placement info that gets allocated to a master/tserver is off by one respect to the command line argument.
- [[`280fdc0`](https://github.com/YugaByte/yugabyte-db/commit/280fdc0ef1e4f98631fd914026368bccb4ad1e08)]  Fix ScopedPendingOperation to return Status::Busy error when unavailable.
- [[`d16bc28`](https://github.com/YugaByte/yugabyte-db/commit/d16bc28973ced62d8adf648b35beb6a5a43d76cb)] Backoff exponentially for server too busy errors
- [[`e0b78dc`](https://github.com/YugaByte/yugabyte-db/commit/e0b78dc9c131683c5dfd36e7b85f18d3f19e2743)]  Set upperbound for intent iterator in IntentAwareIterator.
- [[`7147469`](https://github.com/YugaByte/yugabyte-db/commit/7147469fb06dd68d8520ff52f254da9e14290df0)]  Miscellaneous test improvements, and better diagnostics before a fatal error in MvccManager::AddPending
- [[`6be69a8`](https://github.com/YugaByte/yugabyte-db/commit/6be69a8fb9e218b6c8d3401337bd600348f81449)]  Handle case when read buffer is full and command is not fully transferred yet
- [[`72de5cb`](https://github.com/YugaByte/yugabyte-db/commit/72de5cb6a67c3adeeaa02fbe7f2e7888c84db0b3)]  Put ValueType::kIntentPrefix's before all non-intent ValueTypes.
- [[`ed45995`](https://github.com/YugaByte/yugabyte-db/commit/ed45995adc5104be7178cfbd2d5469cc4cb5a777)]  Handle dependencies for libraries in mac_library_packager.py
- [[`556f710`](https://github.com/YugaByte/yugabyte-db/commit/556f71084f7fe337985e15b0053bc13456f2ea47)]  TSAN Race Condition between Register and Load Balancer.
- [[`e2f4b9b`](https://github.com/YugaByte/yugabyte-db/commit/e2f4b9ba11cb5cb0c73ddf4be12b08192d3656b8)]  Fix the increment of SQLProcessor_ExecuteRequest metric.
- [[`2871820`](https://github.com/YugaByte/yugabyte-db/commit/287182025e2603ded21cab76ea1864233bd82f54)]  #93 Fix trying to read ahead of the log while preparing peer request
- [[`b1d4d7f`](https://github.com/YugaByte/yugabyte-db/commit/b1d4d7f94333858b6c1e7404ad28ff5e0a18e74a)]  #90:  Reduce lock contention in TabletInvoker::IsLocalCall
- [[`0250c13`](https://github.com/YugaByte/yugabyte-db/commit/0250c13d36b0941b599cb9d27b9b02489d7a0243)]  #88: Fix return value from XX and NX options
- [[`63363df`](https://github.com/YugaByte/yugabyte-db/commit/63363dfe2dda4c69f8a33587660e271ede662faa)]  Basic jsonb serialization and de-serialization code.
- [[`897a925`](https://github.com/YugaByte/yugabyte-db/commit/897a92564dd7258f3fcfffe11518fcde1e4731d6)]  #86: Accept lowercase options for SET
- [[`679b57b`](https://github.com/YugaByte/yugabyte-db/commit/679b57b28c49d1bec9f4e57707eef48092677d07)]  Fix bug timezone parsing for timestamp literals
- [[`4902d06`](https://github.com/YugaByte/yugabyte-db/commit/4902d06cd16550ff9f179ce7253174718e085377)]  Allow flushing all tablets of a given table",105944401
464,False,True,2018-03-21T19:03:17Z,2018-03-21T19:35:21Z,"## Overview of changes

* Enables high data density by turning multi-level indexing on by default. This allows efficient queries even where there is a lot of data per node.
* Core performance fixes to run better on lightweight (2 vCPU) machines
* Better handling of huge io spikes. The scenario is having many more requests from the clients than what the database cluster can handle.
* Tuning the Redis query layer performance

## Key commits

- [[`a4498b4`](https://github.com/YugaByte/yugabyte-db/commit/a4498b4b344b7a04c64f09eaa30b7667040b3c8d)]  #88: Ensure we check TTL when we look up the type of a subdoc
- [[`beae94d`](https://github.com/YugaByte/yugabyte-db/commit/beae94d819091d531d90973144279d7b8312054b)]  Remove Scoped watch stack from outbound calls. Gflags for consensus log
- [[`abe90b1`](https://github.com/YugaByte/yugabyte-db/commit/abe90b142d79dd129a21ac651f88391cc690ed78)]  Make the appenders use a thread pool
- [[`6b33e8d`](https://github.com/YugaByte/yugabyte-db/commit/6b33e8d0b2dbe49188b42cbe17c65bd320feffe3)]  Bundle yb-prof.py in the release package.
- [[`e94574c`](https://github.com/YugaByte/yugabyte-db/commit/e94574cc844c52d69df94b041e8d9ab8cb6de224)]  Change defaults for the number of concurrent tserver-to-master RPCs and Redis buffer size
- [[`e96545a`](https://github.com/YugaByte/yugabyte-db/commit/e96545a39f0007b3e957398b6586c13acd2f968f)]  Allow std::atomic<MonoTime> usage with clang and libstdc++
- [[`13724f5`](https://github.com/YugaByte/yugabyte-db/commit/13724f57e7b9886f6e7c6260803c3c3f27d6df13)]  Remove unnecessary encoding and decoding from DocDB
- [[`b36c90e`](https://github.com/YugaByte/yugabyte-db/commit/b36c90e67dc23b6d50ca4010929a93ce629b2a52)]  Spawn a shell master when adding a new master.
- [[`702d528`](https://github.com/YugaByte/yugabyte-db/commit/702d5280188def1bef44f5f1e8a3b54c944d9165)]  Use multi-level indexes by default
- [[`72ffc21`](https://github.com/YugaByte/yugabyte-db/commit/72ffc21fadc9327c746fe9ac355ada8e19c3b6bf)] Fixing reactor-test: DelayedTask::AbortTask should still call the callback for tasks that    have not been scheduled
- [[`c0c4c7b`](https://github.com/YugaByte/yugabyte-db/commit/c0c4c7b5f9efe264b4d6d0ad94af29228d6d9057)]  Add paging to table iterator to fix RaftConsensusITest.TestAutoCreateReplica",105944401
465,False,True,2018-03-09T22:12:42Z,2018-03-09T22:55:18Z,"## Overview of changes

- Support for using Kubernetes style cnames in YugaByte CQL client natively! The sample applications can easily be run as a Kubernetes service now.
- Lots of perf fixes for running YugaByte on machines with large number of CPUs.
- Added built-in time functions such as now(), totimestamp(), tounixtimestamp() and unixtimestampof().
- Support for high-performance batch transaction codepath with intra-batch dependencies.

## Key commits

- [[`fadfd84`](https://github.com/YugaByte/yugabyte-db/commit/fadfd84a9ad9d6ba2a3a3e7219ad94b08fc5ee79)] Use a separate thread pool for consensus service
- [[`71fc829`](https://github.com/YugaByte/yugabyte-db/commit/71fc829ed687d619d0fb246d2b151288a018d5fc)] Initialize being_compacted to false
- [[`db55a6f`](https://github.com/YugaByte/yugabyte-db/commit/db55a6f8d8877e22cc7f17317db74374bc16ae5e)] Support Kubernetes style cname in YugaByteDB clients
- [[`c27f929`](https://github.com/YugaByte/yugabyte-db/commit/c27f9291ac272237f58a475fc3da287c00bf1cef)] Correct apply of repeated keys in txn
- [[`8ceaeb9`](https://github.com/YugaByte/yugabyte-db/commit/8ceaeb99866e6cc090854ecf95d4c5d1adcbd62b)] Enable creating multiple outstanding pipelines per IO thread
- [[`699a58e`](https://github.com/YugaByte/yugabyte-db/commit/699a58ea97de94d972c557f3d9b66b31a159f015)] Handle intra-dependency in batch request / transaction
- [[`39100f4`](https://github.com/YugaByte/yugabyte-db/commit/39100f44a90a58dae274427978fbb1e51385d631)] Replace upgrade lock with shared_lock and unique_lock
- [[`f17b2a8`](https://github.com/YugaByte/yugabyte-db/commit/f17b2a87c0a8d130ed7d7a93061775f822ba8249)] Implementing now(), totimestamp(), tounixtimestamp() and unixtimestampof() functions for YQL.
- [[`024730e`](https://github.com/YugaByte/yugabyte-db/commit/024730ed74f295d1bb74e6a94cea91befacd471a)] Use circular buffer for receive
- [[`c619be7`](https://github.com/YugaByte/yugabyte-db/commit/c619be7590675c70e32698a2b3938e59d6d74473)] Reserve the number of subkeys from ParseCollection
- [[`de6a268`](https://github.com/YugaByte/yugabyte-db/commit/de6a2686fd10365814b7ddbacc9abd98b18a4a0d)] Handle intra-dependency in batch request / transaction
- [[`a26f8d2`](https://github.com/YugaByte/yugabyte-db/commit/a26f8d2bf9928681c01c9b5ca7e013b6d71770e6)] Need to remove the special tserver service queue sizes on ""low-cpu"" machines.
- [[`3857155`](https://github.com/YugaByte/yugabyte-db/commit/38571553dd7b6da21a3a3f69b28bc88afcd7a2fa)] Change distributed transaction test cases to test writing to the same hash / primary key in the same transaction.
- [[`99d4adb`](https://github.com/YugaByte/yugabyte-db/commit/99d4adba12496ab5a58881e6283a763fa1f20531)] Group lookup tablet requests
- [[`0bd8878`](https://github.com/YugaByte/yugabyte-db/commit/0bd88783557165750aa9fb96ccba8bd2e7e25861)] Set iterate_upper_bound to avoid seeking over deleted keys in RocksDB.
- [[`88cf84e`](https://github.com/YugaByte/yugabyte-db/commit/88cf84e58ee835c3b030d58c84e449e685761727)] Introduce limits for queued commands and don't drop connection on read buffer overflow
- [[`2250acb`](https://github.com/YugaByte/yugabyte-db/commit/2250acbdaeb7aa4d6fb67afe75bb0fff2575d119)] #59: Set GIT_DIR to /tmp when building AWS SDK so that it does not pick up YugaByte DB version as its own
- [[`b4a9b8e`](https://github.com/YugaByte/yugabyte-db/commit/b4a9b8e7772763ccaf5d03b8d1040b3768bd5101)] Reduce log spew for unavailable peer
- [[`0261099`](https://github.com/YugaByte/yugabyte-db/commit/0261099d0a5012fba1fa40ed7084a62e79c8b988)] Make Redis read buffer size and number of concurrent master lookups in meta cache configurable
- [[`f3e9672`](https://github.com/YugaByte/yugabyte-db/commit/f3e9672b4f1d660ad7b97fbcf9f382d89a133ffc)] Gflag for block cache num shards
- [[`b0553d9`](https://github.com/YugaByte/yugabyte-db/commit/b0553d93197ee32b628a4bdcbcaad0aba52740d4)] Porting nonredundant functionalities of local_cluster_ctl to yb-ctl.
- [[`dc6e2e2`](https://github.com/YugaByte/yugabyte-db/commit/dc6e2e2583caba27e24e6a6df8bb36546301ce43)] Log spew during tablet startup under load.
- [[`4ad88df`](https://github.com/YugaByte/yugabyte-db/commit/4ad88df8127ec4539ee6cf49099bc989f47e70c8)] system_redis.redis should not be counted as an user table
- [[`7302b1f`](https://github.com/YugaByte/yugabyte-db/commit/7302b1fecb44e1f31a0c3828f1f83e80132bb3a9)] Correct handling of failure to retry RPC command
- [[`f90a83f`](https://github.com/YugaByte/yugabyte-db/commit/f90a83f54ec3a12353298be7acf8708c291649f7)] Fix TransactionManager destruction
",105944401
466,False,True,2018-02-16T21:38:26Z,2018-02-22T00:35:20Z,"
## Overview of changes

- Support for natively running YugaByte DB using Kubernetes StatefulSets! YugaByte DB now works in GKE as well.
- Distributed transactions supported at isolation level SNAPSHOT ISOLATION.
- HINCRBY support in Redis API.
- Defaults for CQL client driver switched to strong consistency.
- Lots of performance enhancements and fixes. Notably - lock free hybric clock implementation. New [YugaByte perf report](https://github.com/YugaByte/yugabyte-db/blob/master/docs/yb-perf-0.9.5rc-Feb-13.md) uploaded.
- Improved debuggability - added slow query logging for Redis. 
- Overhauled the third party build system to make it more readable and easy to maintain.


## Thanks

- @mchang31415 for reporting a number of perf issues.
- @praneeth-nimmagadda for reporting issues with the `COUNTER` datatype.
- @nickhristov for pointing out that duplicate primary keys in a batch are not getting loaded

## Key commits

- [[`2150bee`](https://github.com/YugaByte/yugabyte-db/commit/2150bee06359797430fefbc2162678e1cce7ce00)]    Added AWS C++ SDK 3rd party.
- [[`8d8030f`](https://github.com/YugaByte/yugabyte-db/commit/8d8030fa1c9cad2a4f3498b89728aefc8b1f4b49)]    Fix TransactionManager destruction
- [[`9546e7e`](https://github.com/YugaByte/yugabyte-db/commit/9546e7ec77d53cff8603b4de406d3b25f7d9f675)]    Fix counter column datatype in system_schema.columns.
- [[`3074f56`](https://github.com/YugaByte/yugabyte-db/commit/3074f56ac1306a82992845442b04ded0a4d408bd)]    Allow multiple writes of the same row within a batch request.
- [[`8ee1288`](https://github.com/YugaByte/yugabyte-db/commit/8ee1288fb956bc35320f356a319b255d913e81b1)]    Update 3rd party version for mac
- [[`cfd54dd`](https://github.com/YugaByte/yugabyte-db/commit/cfd54dda2062b3efaaa887719a45b176ae9c6e7b)]    Periodic timers
- [[`2292067`](https://github.com/YugaByte/yugabyte-db/commit/22920671ca2ececa486c6655d162c6a61fc939a2)]    Implement HIncrBy
- [[`7a7421f`](https://github.com/YugaByte/yugabyte-db/commit/7a7421f451e47f60b5e3f87334bd26d338560fd8)]    Fix a CHECK failure due to handling of slow responses when looking for leader master
- [[`bed88c9`](https://github.com/YugaByte/yugabyte-db/commit/bed88c9bf5d70c20f32c04921a327427a2942c17)]    Create cloud-machine-types-analysis.md
- [[`90ae07b`](https://github.com/YugaByte/yugabyte-db/commit/90ae07b51a6583f2b581782031809da821106516)]    Update yb-perf-0.9.5rc-Feb-13.md
- [[`ab9deaa`](https://github.com/YugaByte/yugabyte-db/commit/ab9deaa0b0f104a3c7d99f2ddd976ca41dc7b5b8)]    Set defaults for read_pool_* flags
- [[`eb32648`](https://github.com/YugaByte/yugabyte-db/commit/eb3264897b2f643670e33d9459d8014575976d0c)]    #51: Kubernetes cname only tries the first ip address on GKE (#53)
- [[`2dbd7e8`](https://github.com/YugaByte/yugabyte-db/commit/2dbd7e8975493f1daaf689fda626d602e03cabfb)]    Update yugabyte-statefulset.yaml
- [[`0c87387`](https://github.com/YugaByte/yugabyte-db/commit/0c87387035679f8272f2cdd562eef5abf360ef68)]    Fix master UI to show only running tables
- [[`c294304`](https://github.com/YugaByte/yugabyte-db/commit/c2943047811790c31c81826a1a566afdec445c40)]    Capture by reference to avoid copies during HMGet
- [[`c6d2635`](https://github.com/YugaByte/yugabyte-db/commit/c6d2635571b2c6b76e1194de8aa0f268537c3e05)]    High CPU usage in CleanWaitingConnections
- [[`d4fd22c`](https://github.com/YugaByte/yugabyte-db/commit/d4fd22c905b214966c8150dc8b914cfffa1c2690)]    Print slow queries for Redis. Similar to CQL
- [[`6488bfd`](https://github.com/YugaByte/yugabyte-db/commit/6488bfde976be38be12042432704c63adf1f0e60)]    Set GLOG flag so that we do not sync for WARNING messages
- [[`e230091`](https://github.com/YugaByte/yugabyte-db/commit/e230091365a7ca620c0a619bc763dee53518c73f)]    Fix parsing of tcmalloc max thread cache bytes.
- [[`54121c0`](https://github.com/YugaByte/yugabyte-db/commit/54121c07e927cb8f0bad7169cc3fc26faba65d71)]    Added tests for ImportSnapshotMeta.
- [[`072595a`](https://github.com/YugaByte/yugabyte-db/commit/072595a26ad8baf6a6de9a20adb3708416a1ee09)]    Update Cassandra Java driver versions to use default YB_STRONG consistency level.
- [[`c62d02a`](https://github.com/YugaByte/yugabyte-db/commit/c62d02a8fdd2f0421dc5f91cf406ee2c805374d1)]    Make HybridClock Now/Update lock-free
- [[`4fa3118`](https://github.com/YugaByte/yugabyte-db/commit/4fa311868451e5f5c9ad1d0e41fae3513bc809cf)]    Parallelize reads for Redis ops in the same TabletService::Read request
- [[`8cd931c`](https://github.com/YugaByte/yugabyte-db/commit/8cd931cd2c7cb440b57cf8645022fa31f1dbcb02)]    Increase tcmalloc local thread cache size for tservers.
- [[`3ef0019`](https://github.com/YugaByte/yugabyte-db/commit/3ef001965a0481c40bb7c3d874acb7ce21fe66fc)]    Reuse iterator for Redis Operations
- [[`dfb16c9`](https://github.com/YugaByte/yugabyte-db/commit/dfb16c9bc02664447eb87d124e3abf083b92c7d4)]    Prevent core dumps for LOG(FATAL) and CHECK.
- [[`07ffec9`](https://github.com/YugaByte/yugabyte-db/commit/07ffec98e57ea37de1064034a7f4e20a7a381390)]    Fix QLTabletTest.SkewedClocks and other safe time logic in MvccManager
- [[`58c97d3`](https://github.com/YugaByte/yugabyte-db/commit/58c97d388fc7fe48bff765769b9e2b1f40ceea08)]    Change YQL transaction isolation level to SNAPSHOT_ISOLATON.",105944401
467,False,False,2020-03-10T17:48:19Z,2020-03-10T18:16:16Z,"- Feature: New ``general.parallel_download=<num threads>`` configuration, for parallel installation of binaries, to speed up populating packages in a cache. (https://github.com/conan-io/conan/pull/6632). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1583)
- Feature: Fixed inability to run execute `test` and `install` separately, that is, without `build` step. Added `meson_test()` method, which executes `meson test` (compared to `ninja test` in `test()`). Added `meson_install()` method, which executes `meson install` (compared to `ninja install` in `install()`). (https://github.com/conan-io/conan/pull/6574). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1568)
- Feature: Update python six dependency to 1.14.0. (https://github.com/conan-io/conan/pull/6507)
- Feature: Add environment variable 'CONAN_V2_MODE' to enable Conan v2 behavior. (https://github.com/conan-io/conan/pull/6490). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1578)
- Feature: Implement `conan graph clean-modified` subcommand to be able to clean the modified state of a lockfile and re-use it later for more operations. (https://github.com/conan-io/conan/pull/6465). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1542)
- Feature: Allow building dependency graphs when using lockfiles even if some requirements are not in the lockfiles. This can happen for example when ``test_package/conanfile.py`` has other requirements, as they will not be part of the lockfile. (https://github.com/conan-io/conan/pull/6457). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1585)
- Feature: Implement a new package-ID computation that includes transitive dependencies even when the direct dependencies have remove them, for example when depending on a header-only library that depends on a static library. (https://github.com/conan-io/conan/pull/6451). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1575)
- Fix: inspect command can be executed without remote.json (#6558) (https://github.com/conan-io/conan/pull/6559)
- Fix: Raise an error if ``MSBuild`` argument ``targets`` is not a list, instead of splitting a string passed as argument instead of a list. (https://github.com/conan-io/conan/pull/6555)
- Bugfix: Check the `CMP0091` policy and set `CMAKE_MSVC_RUNTIME_LIBRARY` accordingly to `CONAN_LINK_RUNTIME` if it's set to `NEW`. (https://github.com/conan-io/conan/pull/6626)
- Bugfix: Fix error parsing `system_libs` from `conanbuildinfo.txt` file. (https://github.com/conan-io/conan/pull/6616)
- Bugfix: Environment variables from the profiles are not set in the _conaninfo.txt_ file of the packages exported with the `export-pkg` command. (https://github.com/conan-io/conan/pull/6607)
- BugFix: Set the ``self.develop=True`` attribute for recipes when they are used with ``conan export-pkg``, in all methods, it was previously only setting it for the ``package()`` method. (https://github.com/conan-io/conan/pull/6585)
- Bugfix: set CMAKE_OSX_DEPLOYMENT_TARGET for iOS, watchOS and tvOS. (https://github.com/conan-io/conan/pull/6566)
- Bugfix: Parse function of GCC version from command line now works with versions `>=10`. (https://github.com/conan-io/conan/pull/6551)
- Bugfix: improve Apple frameworks lookups with CMake integration (https://github.com/conan-io/conan/pull/6533)",47190624
468,False,False,2020-03-03T23:43:52Z,2020-03-05T13:19:59Z,"- Bugfix: Fixed crashing of recipes using both ``python_requires`` and ``build_id()``. (https://github.com/conan-io/conan/pull/6618)
- Bugfix: Conan should not append generator_platform to the Visual Studio generator if it is already specified by the user. (https://github.com/conan-io/conan/pull/6549)",47190624
469,False,False,2020-02-14T12:15:40Z,2020-03-03T09:38:13Z,"- Bugfix: Fixing locking system for metadata file so it can be accessed concurrently. (https://github.com/conan-io/conan/pull/6543)
- Bugfix: Manage the dirty state of the cache package folder with conan export-pkg. (https://github.com/conan-io/conan/pull/6517)
- Bugfix: BugFix: Add quotes to virtualenv scripts, so they don't crash in pure sh shells. (https://github.com/conan-io/conan/pull/6516)
- Bugfix: Upload was silently skipping exceptions, which could result in packages not uploaded, but user not realizing about the error. (https://github.com/conan-io/conan/pull/6515)
- BugFix: Add ``system_libs`` to ``premake`` generator. (https://github.com/conan-io/conan/pull/6496)",47190624
470,False,False,2020-02-12T14:06:50Z,2020-02-13T07:53:21Z,"- Bugfix: Do not re-evaluate lockfiles nodes, only update the package reference, otherwise the build-requires are broken. (https://github.com/conan-io/conan/pull/6529)
- Bugfix: Fixing locking system for metadata file so it can be accessed concurrently. (https://github.com/conan-io/conan/pull/6524)",47190624
471,False,False,2020-02-11T10:17:31Z,2020-02-11T12:07:58Z,"- Fix: Increase ``six`` version to allow more modern releases. (https://github.com/conan-io/conan/pull/6509)
- Fix: remove `GLOBAL` from targets to avoid conflicts when using `add_subdirectory`. (https://github.com/conan-io/conan/pull/6488). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1551)
- Fix: Avoid caching revision ""0"" under api V2 (revisions enabled) in the download cache. (https://github.com/conan-io/conan/pull/6475). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1552)
- Bugfix: Manage the ``dirty`` state of the cache package folder with ``conan export-pkg``. (https://github.com/conan-io/conan/pull/6498)
- BugFix: Add ``system_libs`` to ``premake`` generator. (https://github.com/conan-io/conan/pull/6495)
- Bugfix: Upload was silently skipping exceptions that could leave the packages dirty. Long uploads or large compressing times in non-terminals (piped output, like in CI systems) crashed, leaving packages dirty too, but not reporting any error. (https://github.com/conan-io/conan/pull/6486)
- BugFix: Add quotes to ``virtualenv`` scripts, so they don't crash in pure sh shells. (https://github.com/conan-io/conan/pull/6265)",47190624
472,False,False,2020-02-05T10:24:41Z,2020-02-05T14:34:19Z,"- Feature: Set conan generated CMake targets as `GLOBAL` so that they can be used with an `ALIAS` for consumers. (https://github.com/conan-io/conan/pull/6438). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1534)
- Feature: Deduce `compiler.base.runtime` for Intel compiler settings when using Visual Studio as the base compiler. (https://github.com/conan-io/conan/pull/6424)
- Feature: Allow defining an extra user-defined properties .props file in ``MSBuild`` build helper. (https://github.com/conan-io/conan/pull/6374). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1533)
- Feature: Force the user to read that Python 2 has been deprecated. (https://github.com/conan-io/conan/pull/6336). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1523)
- Feature: Add opt-in `scm_to_conandata` for the SCM feature: Conan will store the data from the SCM attribute in the `conandata.yml` file (except the fields `username` and `password`). (https://github.com/conan-io/conan/pull/6334). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1522)
- Feature: Implement a download cache, which can be shared and concurrently used among different conan user homes, selectable configuring ``storage.download_cache`` in ``conan.conf``. (https://github.com/conan-io/conan/pull/6287). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1544)
- Feature: Some improvements in the internal of lockfiles. Better ordering of nodes indexes. Separation of ``requires`` and ``build-requires``. Better ``status`` field, with explicit ``exported``, ``built`` values. (https://github.com/conan-io/conan/pull/6237)
- Feature: ``imports`` functionality can import from ""symbolic"" names, preceded with @, like @bindirs, @libdirs, etc. This allows importing files from variable package layouts, including custom ``package_info()`` layouts (like ``cpp_info.bindirs = [""mybin""]`` can be used with ``src=""@bindirs""``), and editable package layouts (https://github.com/conan-io/conan/pull/6208). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1547)
- Feature: Improve output messages for parallel uploads: the text of the uploaded files contains to which packages they belong and the output for CI is clearer. (https://github.com/conan-io/conan/pull/6184)
- Feature: Adds ``vcvars_append`` variable (defaulting to ``False``) to ``CMake`` and ``Meson`` build helpers constructors, so when they need to activate the Visual Studio environment via ``vcvars`` (for Ninja and NMake generators), the ``vcvars`` environment is appended at the end, giving precedence to the environment previously defined. (https://github.com/conan-io/conan/pull/6000). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1543)
- Fix: Use CCI package reference for example command. (https://github.com/conan-io/conan/pull/6463)
- Fix: Generators `cmake` and `cmake_multi` use the name defined in `cpp_info.name` (reverts change from 1.21.1 as stated). (https://github.com/conan-io/conan/pull/6429)
- Fix: Cleaning ``LD_LIBRARY_PATH`` environment in ``SCM`` commands for ""pyinstaller"" installations, as SSL can fail due to using old SSL stuff from Conan instead from git/svn. (https://github.com/conan-io/conan/pull/6380)
- Fix: Recipe substitution for `scm` (old behavior) fixed for multiline comments in Python 3.8. (https://github.com/conan-io/conan/pull/6355). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1526)
- Fix: Avoid warning in ""detect"" process with Python 3.8, due to Popen with ``bufsize=1`` (https://github.com/conan-io/conan/pull/6333)
- Fix: Propagate server error (500) in `checksum_deploy`. (https://github.com/conan-io/conan/pull/6324)
- Fix: Fixed wrong CMake command line with ``-G Visual Studio 15 ARM`` for ``armv8`` architectures. (https://github.com/conan-io/conan/pull/6312)
- Fix: Add all the system_libs and requirements to the CMake targets constructed by the generators. It will impact header-only libraries that are consumed using targets (previously they were missing some information). (https://github.com/conan-io/conan/pull/6298)
- Fix: Avoid WindowsStore ``tools.vcvars()`` management when the environment is already set. (https://github.com/conan-io/conan/pull/6296)
- Fix: When the token is empty, and ``conan user myuser -p=mypass -r=remote`` is used, the user-password are send in HttpBasic so it can be used for completely protected servers that do not expose the ping endpoint. (https://github.com/conan-io/conan/pull/6254)
- Fix: Add `cpp_info.<config>` information to `cmake_find_package_multi` and `cmake_find_package` generators. (https://github.com/conan-io/conan/pull/6230). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1508)
- Fix: Multi-generators cannot be used without `build_type` setting. A failure is forced to `cmake_find_package_multi` and `visual_studio_multi` as it was in `cmake_multi`. (https://github.com/conan-io/conan/pull/6228)
- Fix: Fix typo in error message from ``tools.get()``. (https://github.com/conan-io/conan/pull/6204)
- Fix: Raise error for symlinks in Windows that point to a different unit. (https://github.com/conan-io/conan/pull/6201)
- BugFix: Avoid included profiles overwriting variables in the current profile. (https://github.com/conan-io/conan/pull/6398)
- Bugfix: Lockfiles were not correctly applying locked ``options`` to packages, which produced incorrect evaluation of ``requirements()`` method. (https://github.com/conan-io/conan/pull/6395)
- Bugfix: Fix broken compression of .tgz files due to Python 3.8 changing tar default schema. (https://github.com/conan-io/conan/pull/6355). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1526)
- Bugfix: Include MacOS frameworks definitions in autotools LDFLAGS (also Meson). (https://github.com/conan-io/conan/pull/6309)
- Bugfix: Apply ``system_libs`` information in autotools build helper. (https://github.com/conan-io/conan/pull/6309)
- Bugfix: The ``environment_append()`` helper does not modify the argument anymore, which caused problems if the argument was reused. (https://github.com/conan-io/conan/pull/6285)
- Bugfix: Include ""Package ID Unknown"" nodes in ``conan graph build-order``, as they need to be processed in that order. (https://github.com/conan-io/conan/pull/6251)
- Bugfix: `--raw` argument is ignored when searching for a specific reference. (https://github.com/conan-io/conan/pull/6241)
- Bugfix: Avoid raising a version conflict error when aliases have not been resolved yet, typically for aliased ``build-requires`` that are also in the ``requires``. (https://github.com/conan-io/conan/pull/6236)
- Bugfix: ``conan inspect`` now is able to properly show name and version coming from ``set_name()`` and ``set_version()`` methods. (https://github.com/conan-io/conan/pull/6214)",47190624
473,False,False,2020-01-30T16:09:00Z,2020-01-31T15:25:21Z,"- Fix: Recipe substitution for scm (old behavior) fixed for multiline comments in Python 3.8 (https://github.com/conan-io/conan/pull/6439)
- Bugfix: Fix broken compression of .tgz files due to Python 3.8 changing tar default schema. (https://github.com/conan-io/conan/pull/6439)
- Bugfix: Append `CONAN_LIBS` in `cmake` generator to avoid overwriting user-defined libs. (https://github.com/conan-io/conan/pull/6433)",47190624
474,False,False,2020-01-10T10:59:27Z,2020-01-14T10:48:17Z,"- Fix: Fix options type detection using `six.string_types`. (https://github.com/conan-io/conan/pull/6322)
- Fix: Fix minor issues in `cmake` and `cmake_multi` generators: wrong variable used in `conan_find_apple_frameworks` macro. (https://github.com/conan-io/conan/pull/6295)
- Fix: Generators `cmake` and `cmake_multi` use the name of the package instead of `cpp_info.name` (this change is to be reverted in 1.22) (https://github.com/conan-io/conan/pull/6288)
- Bugfix: Fixing readout of backslashes for virtualenv generator files so they are not interpreted as escape characters. (https://github.com/conan-io/conan/pull/6320)
- Bugfix: Fix uninformative crash when ``tools.download()`` gets a 403 and it is not providing an ``auth`` field. (https://github.com/conan-io/conan/pull/6317)
- Bugfix: Enhance validation of the `short_paths_home` property to correctly handle the scenarios where it is set to a path that contains the value of the Conan cache path, but is not a subdirectory of it. (https://github.com/conan-io/conan/pull/6304)
- Bugfix: Fixes `cpp_info.name` vs. `cpp_info.names` issue in `pkg_config` generator (https://github.com/conan-io/conan/pull/6223)",47190624
475,False,False,2019-12-10T10:56:29Z,2019-12-10T11:06:08Z,"- Feature: The generator `cmake_find_package_multi` generates a `PackageConfigVersion.cmake` file that allows using `find_package` with the `VERSION` argument. (https://github.com/conan-io/conan/pull/6063). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1484)
- Feature: Support for Intel compiler. (https://github.com/conan-io/conan/pull/6052). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1479)
- Feature: Allow setting different cpp_info name for each generator that supports that property using the new cpp_info.names[""generator_name""] property. (https://github.com/conan-io/conan/pull/6033). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1489)
- Feature: Provide `_INCLUDE_DIR` variables in the `cmake_find_package` generator (https://github.com/conan-io/conan/pull/6017)
- Feature: Information in the `artifacts.properties` file is sent using matrix-params too when a package is uploaded to a server (if it has the capability). This will be the recommended way to send these properties to Artifactory (release TBD) to bypass Nginx blocking properties with periods. (https://github.com/conan-io/conan/pull/6014). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1487)
- Feature: New `tools.check_min_cppstd` and `tools.valid_min_cppstd` to check if the cppstd version is valid for a specific package. (https://github.com/conan-io/conan/pull/5997). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1467)
- Feature: New parameter for `tools.patch` to opt-in applying fuzzy patches. (https://github.com/conan-io/conan/pull/5996). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1466)
- Feature: Environment variables for virtual environments are stored in `.env` files containing just the key-value pairs. It will help other processes that need to read these variables to run their own commands. (https://github.com/conan-io/conan/pull/5989)
- Feature: New argument of `conan upload` command `--parallel` to upload packages using multithreading. (https://github.com/conan-io/conan/pull/5856). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1250)
- Feature: New ``python_requires`` declared as Conanfile class attributes. Includes extension of base class, they affect the binary packageID with ``minor_mode`` default mode. They are also locked in lockfiles. (https://github.com/conan-io/conan/pull/5804). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1495)
- Feature: Accept logging level as logging names (https://github.com/conan-io/conan/pull/5772). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1419)
- Fix: Add the RES_DIRS as variable to the variables when using the ``cmake_find_package`` generator. (https://github.com/conan-io/conan/pull/6166)
- Fix: Fix SyntaxWarning when comparing a literal with for identity in Python 3.8 (https://github.com/conan-io/conan/pull/6165)
- Fix: Remove recipe linter from codebase, it is no longer a built-in feature. It has been moved to hooks. Install the hook and update your ""conan.conf"" to activate it. (https://github.com/conan-io/conan/pull/6152). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1488)
- Fix: Make lockfiles invariant when the graph doesn't change. Now 2 different lockfiles captured with the same resulting graph in 2 different instants will be identical. (https://github.com/conan-io/conan/pull/6139)
- Fix: Make the ``compatible_packages`` feature to follow the ``--build=missing`` build policy. Packages that find a compatible binary will not fire a binary build with the ""missing"" build policy. (https://github.com/conan-io/conan/pull/6134). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1491)
- Fix: Fix create command build policy help message to reflect correct behavior. (https://github.com/conan-io/conan/pull/6131). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1483)
- Fix: Improved error message when sources can't be retrieved from remote (https://github.com/conan-io/conan/pull/6085)
- Fix: Raise a meaningful error when the `settings.yml` file is invalid (https://github.com/conan-io/conan/pull/6059)
- Fix: Move the warning about mixing 'os' and 'os_build' to just before the pre_export stage (https://github.com/conan-io/conan/pull/6021)
- Bugfix: Implement ``SystemPackageTool.installed(package_name)`` as described in the documentation. (https://github.com/conan-io/conan/pull/6198)
- Bugfix: Remove carriage returns from build info `.json` file to avoid Artifactory errors in some cases when publishing the build info to the remote. (https://github.com/conan-io/conan/pull/6180)
- Bugfix: Upload correct packages when specifying revisions and fail with incorrect ones. (https://github.com/conan-io/conan/pull/6143)
- Bugfix: Fix different problems when using `conan download` with revisions. (https://github.com/conan-io/conan/pull/6138)
- Bugfix: Make sure ``set_version()`` runs in the ``conanfile.py`` folder, not in the current folder, so relative paths are not broken if executing from a different location. (https://github.com/conan-io/conan/pull/6130). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1490)
- Bugfix: Fix the help message for `conan export-pkg` command for the --options parameter. (https://github.com/conan-io/conan/pull/6092)
- Bugfix: Use a context manager to change the folder during `build_package` to avoid propagating the directory change to other tasks. (https://github.com/conan-io/conan/pull/6060)
- Bugfix: The `AutoToolsBuildEnvironment` build helper now uses the `win_bash` parameter of the constructor when calling to `configure()`. (https://github.com/conan-io/conan/pull/6026)
- Bugfix: Conan's virtualenvironments restore the environment to the state it was before activating them (previously it was restored to the state it was when the `conan install` was run). (https://github.com/conan-io/conan/pull/5989)",47190624
476,False,False,2019-12-03T13:37:14Z,2019-12-03T13:56:37Z,"- Bugfix: Removing `--skip-env`  and `--multi-module` arguments  for `conan_build_info --v2`. Now the environment is not captured (will be handled by the Artifactory plugin) and recipes and packages are saved as different modules in build info. (https://github.com/conan-io/conan/pull/6169). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1486)
",47190624
477,False,False,2019-11-19T14:51:32Z,2019-11-19T15:00:24Z,"- Feature: Added traces to `check_output` internal call to log the called command and the output as INFO traces (can be adjusted with `export CONAN_LOGGING_LEVEL=20`) (https://github.com/conan-io/conan/pull/6091)
- Bugfix: Using `scm` with `auto` values with a `conanfile.py` not being in the root scm folder it failed to export the right source code directory if not using `--ignore-dirty` and the repo was not pristine. (https://github.com/conan-io/conan/pull/6098)
- Bugfix: Fix `conan_build_info` command when conan_sources.tgz not present in a remote. (https://github.com/conan-io/conan/pull/6088)",47190624
478,False,False,2019-11-11T14:46:38Z,2019-11-11T14:58:23Z,"- Bugfix: Using the `scm` feature with `auto` fields was not using correctly the freeze sources from the local user directory from the second call to `conan create`. (https://github.com/conan-io/conan/pull/6048)
- Bugfix: Each Apple framework found using CMake `find_library` is stored in a different `CONAN_FRAMEWORK_<name>_FOUND` variable (https://github.com/conan-io/conan/pull/6042)",47190624
479,False,False,2019-11-06T08:50:59Z,2019-11-06T09:06:57Z,- Bugfix: Fix Six package version to be compatible with Astroid (https://github.com/conan-io/conan/pull/6031),47190624
480,False,False,2019-11-05T09:31:24Z,2019-11-05T09:43:22Z,- Bugfix: Fixed authentication with an Artifactory repository without anonymous access enabled. (https://github.com/conan-io/conan/pull/6022),47190624
481,False,False,2019-11-04T10:57:35Z,2019-11-04T11:09:35Z,"- Feature: Provide `CONAN_FRAMEWORKS` and `CONAN_FRAMEWORKS_FOUND` for Apple frameworks in CMake generators and `conan_find_apple_frameworks()` macro helper in CMake generators. (https://github.com/conan-io/conan/pull/6003). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1472)
- Feature: Saving profile list as a json file (https://github.com/conan-io/conan/pull/5954). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1449)
- Feature: Improve `conan_build_info` command maintaining old functionality. (https://github.com/conan-io/conan/pull/5950). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1456)
- Feature: Add `--json `argument  to the `config home` subcommand to output the result to a JSON file. (https://github.com/conan-io/conan/pull/5946). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1464)
- Feature: Add `cpp_info.build_modules` to manage build system modules like additional CMake functions in packages (https://github.com/conan-io/conan/pull/5940). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1465)
- Feature: Add support for Clang 10. (https://github.com/conan-io/conan/pull/5936)
- Feature: Store `md5` and `sha1` checksums of downloaded and uploaded packages in `metadata.json`. (https://github.com/conan-io/conan/pull/5910)
- Feature: Allow the possibility to avoid `x86_64` to `x86` building when cross-building. (https://github.com/conan-io/conan/pull/5904). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1445)
- Feature: Allow to specify encoding for `tools.load`, `tools.save` and `tools.replace_in_files`. (https://github.com/conan-io/conan/pull/5902). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1446)
- Feature: Add support for gcc 7.4. (https://github.com/conan-io/conan/pull/5898). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1438)
- Feature: New ``set_name()`` and ``set_version()`` member methods to dynamically obtain the name and version (at export time). (https://github.com/conan-io/conan/pull/5881). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1444)
- Feature: New binary compatibility mode. Recipes can define in their ``package_id()`` an ordered list of binary package variants that would be binary compatible with the default one. These variants will be checked in order if the main package ID is not found (missing), and the first one will be installed and used. (https://github.com/conan-io/conan/pull/5837). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1468)
- Feature: Support for DNF system package manager (Fedora 31+ and others) when present. (https://github.com/conan-io/conan/pull/5791). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1462)
- Feature: Refactor Conan Upload, Download and Compress progress bars. (https://github.com/conan-io/conan/pull/5763)
- Feature: Add `system_deps` attribute for cpp_info and deps_cpp_info. (https://github.com/conan-io/conan/pull/5582). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1395)
- Feature: The `scm` feature does not replace the `scm.revision=""auto""` field with the commit when uncommitted changes unless ``--scm-dirty`` argument is specified. The recipe in the local cache will be kept with `revision=auto`. (https://github.com/conan-io/conan/pull/5543). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1471)
- Feature: The `conan upload` command forbids to upload a recipe that uses the `scm` feature containing `revision=auto` or `url=auto`, unless `--force` is used. (https://github.com/conan-io/conan/pull/5543). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1471)
- Feature: The `scm` feature captures the local sources in the local cache during the export, avoiding later issues of modified local sources. (https://github.com/conan-io/conan/pull/5543). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1471)
- Fix: Deprecate argument `--build-order` in `conan info` command. (https://github.com/conan-io/conan/pull/5965). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1451)
- Fix: Avoid doing complex ``conan search --query`` in the server, do them always in the client. (https://github.com/conan-io/conan/pull/5960)
- Fix: Improved ``conan remove --help`` message for ``--packages`` (https://github.com/conan-io/conan/pull/5899)
- Fix: Improved cmake compiler check message to explain the problem with different compiler versions when installing dependencies (https://github.com/conan-io/conan/pull/5858)
- Fix: Adds support for transitive dependencies to b2 generator. (https://github.com/conan-io/conan/pull/5812)
- Fix: Add support for recipes without `settings.compiler` in b2 generator. (https://github.com/conan-io/conan/pull/5810)
- Fix: Add and remove out-of-tree git patches (#5320) (https://github.com/conan-io/conan/pull/5761)
- Fix: Add quiet output for `inspect --raw`. (https://github.com/conan-io/conan/pull/5702)
- Bugfix: Allow ``conan download`` for packages without user/channel (https://github.com/conan-io/conan/pull/6010)
- Bugfix: Avoid erroneous case-sensitive conflict for packages without user/channel. (https://github.com/conan-io/conan/pull/5981)
- Bugfix: Fix crashing when using lockfiles with a ``conanfile.txt`` instead of ``conanfile.py``. (https://github.com/conan-io/conan/pull/5894)
- Bugfix: Fix incorrect propagation of build-requires to downstream consumers, resulting in missing dependencies in ``deps_cpp_info``. (https://github.com/conan-io/conan/pull/5886)
- Bugfix: Adds the `short_paths_home` property to `ConanClientConfigParser` to validate that it is not a subdirectory of the conan cache. (https://github.com/conan-io/conan/pull/5864). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1436)
- Bugfix: Use imported python requires' `short_path` value instead of the defined in the `conanfile` that imports it. (https://github.com/conan-io/conan/pull/5841)
- Bugfix: Avoid repeated copies of absolute paths when using `self.copy()`. (https://github.com/conan-io/conan/pull/5792)
- Bugfix: Downstream overrides to exact dependencies versions are always used, even if the upstream has a version range that does not satisfy the override. (https://github.com/conan-io/conan/pull/5713)",47190624
482,False,False,2019-10-29T12:51:48Z,2019-10-29T13:04:24Z,"- Fix: Fixed range of pylint and astroid requirements to keep compatibility with python 2 (https://github.com/conan-io/conan/pull/5987)
- Fix: Force ``conan search --query`` queries to be resolved always in the client to avoid servers failures due to unsupported syntax (https://github.com/conan-io/conan/pull/5970)
- Bugfix: Use cpp_info.name lower case in pkg-config generator when defined (https://github.com/conan-io/conan/pull/5988)
- Bugfix: Fix ``cpp_info.name`` not used in cmake find generators for dependencies (https://github.com/conan-io/conan/pull/5973)
- Bugfix: Fixed bug when overriden dependencies that don't exist and make the CMake generated code crash (https://github.com/conan-io/conan/pull/5971)
- Bugfix: Fixed bug when overriden dependencies that don't exist and make the CMake generated code crash (https://github.com/conan-io/conan/pull/5945)",47190624
483,False,False,2019-10-16T13:38:23Z,2019-10-16T13:49:18Z,"- Feature: Implement ``self.info.shared_library_package_id()`` to better manage shared libraries package-ID, specially when they depend on static libraries (https://github.com/conan-io/conan/pull/5893). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1442)
- Bugfix: Allow ``conan install pkg/[*]@user/channel`` resolving to a reference, not a path. (https://github.com/conan-io/conan/pull/5908)
- Bugfix: The dependency overriding mechanism was not working properly when using the same version with different build metadata (`1.2.0+xyz` vs `1.2.0+abc`). (https://github.com/conan-io/conan/pull/5903)
- Bugfix: Artifactory was returning an error on the first login attempt because the server capabilities were not assigned correctly. (https://github.com/conan-io/conan/pull/5880)
- Bugfix: conan export failed if there is no user/channel and a lockfile is applied (https://github.com/conan-io/conan/pull/5875)
- Bugfix: SCM component failed for url pointing to local path in Windows with backslash. (https://github.com/conan-io/conan/pull/5875)
- Bugfix: Fix `conan graph build-order` output so it uses references including its recipe revision (https://github.com/conan-io/conan/pull/5863)",47190624
484,False,False,2019-10-03T13:42:50Z,2019-10-03T14:02:23Z,"- Bugfix: Use imported python requires' `short_path` value instead of the defined in the `conanfile` that imports it. (https://github.com/conan-io/conan/pull/5849)
- Bugfix: Fix regression in ``visual_studio`` generator adding a ``<Lib>`` task. (https://github.com/conan-io/conan/pull/5846). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1430)",47190624
485,False,False,2019-09-30T08:52:35Z,2019-09-30T09:10:13Z,"- Feature: Show deprecation warning message for Python 3.4 (https://github.com/conan-io/conan/pull/5829). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1424)
- Feature: Update settings.yml file with macOS, watchOS, tvOS, iOS version numbers (https://github.com/conan-io/conan/pull/5823)
- Feature: Add clang 9 to the settings.yml file (https://github.com/conan-io/conan/pull/5786). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1420)
- Feature: Show suggestions when typing an incorrect command conan command. (https://github.com/conan-io/conan/pull/5725)
- Feature: Client support for using refresh tokens in the auth process with Artifactory. (https://github.com/conan-io/conan/pull/5662)
- Feature: Add GCC  9.2 to default settings.yml file (https://github.com/conan-io/conan/pull/5650). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1394)
- Feature: Add subcommand for enabling and disabling remotes (https://github.com/conan-io/conan/pull/5623). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1392)
- Feature: New `conan config home` command for getting Conan home directory (https://github.com/conan-io/conan/pull/5613). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1387)
- Feature: Adds `name` attribute to `CppInfo` and use `cpp_info.name` in all CMake and pkg-config generators as the find scripts files names, target names, etc. (https://github.com/conan-io/conan/pull/5598). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1393)
- Feature: Enhanced vs-generator by providing more properties that can be referenced by other projects; added library paths also to <Lib> so it's possible to compile static libraries that reference other libs (https://github.com/conan-io/conan/pull/5564)
- Feature: Better support OSX frameworks by declaring `cppinfo.frameworks`. (https://github.com/conan-io/conan/pull/5552). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1414)
- Feature: Virtual environment generator for gathering only the PYTHONPATH. (https://github.com/conan-io/conan/pull/5511). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1369)
- Fix: ``conan upload`` with a reference without user and channel and package id ``name/version:package_id`` should work (https://github.com/conan-io/conan/pull/5824)
- Fix: Dropped support for python 3.4.  That version is widely being dropped by the python community. Since Conan 1.19, the tests won't be run with python 3.4 and we won't be aware if something is not working correctly. (https://github.com/conan-io/conan/pull/5820). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1424)
- Fix: Apply lockfile to the node before updating with downstream requirements (https://github.com/conan-io/conan/pull/5771)
- Fix: Make `conan new` generate default options as a dictionary (https://github.com/conan-io/conan/pull/5767)
- Fix: Output  search result for remotes in order by version, as local search (https://github.com/conan-io/conan/pull/5723)
- Fix: Excluded also `ftp_proxy` and `all_proxy` variables from the environment when proxy configuration is specified in the `conan.conf` file. (https://github.com/conan-io/conan/pull/5697)
- Fix: Relax restriction on the future python dependency (https://github.com/conan-io/conan/pull/5692)
- Fix: Call `post_package` hook before computing the manifest (https://github.com/conan-io/conan/pull/5647)
- Fix: Show friendly message when can't get remote path (https://github.com/conan-io/conan/pull/5638)
- Fix: Detect the number of CPUs used by Docker (#5464) (https://github.com/conan-io/conan/pull/5466). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1359)
- Bugfix: Set Ninja to use `cpu_count` value when building with `parallel` option with CMake (https://github.com/conan-io/conan/pull/5832)
- Bugfix: output of references without user/channel is done with _/_, like in lockfiles. (https://github.com/conan-io/conan/pull/5817)
- Bugfix: A lockfile generated from a consumer should be able to generate a build-order too. (https://github.com/conan-io/conan/pull/5800)
- Bugfix: Fix system detection on Solaris. (https://github.com/conan-io/conan/pull/5630)
- Bugfix: `SVN` uses `username` and `password` if provided (https://github.com/conan-io/conan/pull/5601)
- Bugfix: Use the final package folder as the `conanfile.package_folder` attribute for the `pre_package` hook. (https://github.com/conan-io/conan/pull/5600)
- BugFix: Fix crash with custom generators using ``install_folder`` (https://github.com/conan-io/conan/pull/5569)",47190624
486,False,False,2019-09-24T07:54:17Z,2019-09-24T08:02:50Z,"- Bugfix: A [bug](https://github.com/urllib3/urllib3/issues/1683) in `urllib3` caused bad encoded URLs causing failures when using any repository from Bintray, like `conan-center`. (https://github.com/conan-io/conan/pull/5801)",47190624
487,False,False,2019-09-12T08:57:18Z,2019-09-12T09:05:38Z,- Fix: ``package_id`` should be used for ``recipe_revision_mode`` (https://github.com/conan-io/conan/pull/5729). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1410),47190624
488,False,False,2019-09-10T10:39:20Z,2019-09-10T11:11:36Z,- Fix: Version ranges resolution using references without user/channel (https://github.com/conan-io/conan/pull/5707),47190624
489,False,False,2019-08-30T11:21:49Z,2019-08-30T12:40:45Z,"- Feature: Add opt-out for Git shallow clone in `SCM` feature (https://github.com/conan-io/conan/pull/5677). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1400)
- Fix: Use the value of argument `useEnv` provided by the user to the `MSBuild` helper also to adjust `/p:UseEnv=false` when the arg is `False`. (https://github.com/conan-io/conan/pull/5609)
- Bugfix: Fixed assertion when using nested build_requires that depend on packages that are also used in the main dependency graph (https://github.com/conan-io/conan/pull/5689)
- Bugfix: When Artifactory doesn't have the anonymous access activated, the conan client wasn't able to capture the server capabilities and therefore never used the `revisions` mechanism. (https://github.com/conan-io/conan/pull/5688)
- Bugfix: When no `user/channel` is specified creating a package, upload it to a remote using  `None` as the ""folder"" in the storage, instead of `_`. (https://github.com/conan-io/conan/pull/5671)
- Bugfix: Using the version ranges mechanism Conan wasn't able to resolve the correct reference if a library with the same name but different user/channel was found in an earlier remote. (https://github.com/conan-io/conan/pull/5657)
- Bugfix: Broken cache package collection for packages without user/channel (https://github.com/conan-io/conan/pull/5607)",47190624
490,False,False,2019-08-08T09:26:17Z,2019-08-08T09:48:23Z,- Bugfix: The `scm` feature was trying to run a checkout after a shallow clone. (https://github.com/conan-io/conan/pull/5571),47190624
491,False,False,2019-07-30T11:35:41Z,2019-07-30T11:44:50Z,"- Feature: Output current revision from references in local cache when using a pattern (https://github.com/conan-io/conan/pull/5537). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1381)
- Feature: New parameter ``--skip-auth`` for the ``conan user`` command to avoid trying to authenticate when the client already has credentials stored. (https://github.com/conan-io/conan/pull/5532). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1377)
- Feature: Allow patterns in per-package settings definitions, not only the package name (https://github.com/conan-io/conan/pull/5523). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1372)
- Feature: Search custom settings (#5378) (https://github.com/conan-io/conan/pull/5521). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1371)
- Feature: shallow git clone (https://github.com/conan-io/conan/pull/5514). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1380)
- Feature: Add context manager for set_dirty (#3835) (https://github.com/conan-io/conan/pull/5444). Docs: [:page_with_curl:](https://github.com/conan-io/docs/issues/1231)
- Feature: The ""user/channel"" fields are now optional. e.g: `conan create .` is valid if the `name` and `version` are declared in the recipe. e.g: `conan create . lib/1.0@` to omit user and channel. The same for other commands. The `user` and `channel` can also be omitted while specifying requirements in the conanfiles. (https://github.com/conan-io/conan/pull/5381). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1375)
- Fix: Remove ``conan graph clean-modified`` command, it is automatic and no longer necessary. (https://github.com/conan-io/conan/pull/5533). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1378)
- Fix: Incomplete references (for local conanfile.py files) are not printed with `@None/None` anymore. (https://github.com/conan-io/conan/pull/5509)
- Fix: Discard empty string values in SCM including `subfolder` (https://github.com/conan-io/conan/pull/5459)
- Bugfix: The `stderr` was not printed when a command failed running the `tools.check_output` function. (https://github.com/conan-io/conan/pull/5548)
- Bugfix: Avoid dependency (mainly build-requires) being marked as skipped when another node exists in the graph that is being skipped because of being private (https://github.com/conan-io/conan/pull/5547)
- Bugfix: fix processing of UTF-8 files with BOM (https://github.com/conan-io/conan/pull/5506)
- Bugfix: apply http.sslVerify to the current Git command only (https://github.com/conan-io/conan/pull/5470)
- Bugfix: Do not raise when accessing the metadata of editable packages (https://github.com/conan-io/conan/pull/5461)
- Bugfix: Use cxxFlags instead of cppFlags in ``qbs`` generator. (https://github.com/conan-io/conan/pull/5452). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1354)",47190624
492,False,False,2019-07-25T14:19:08Z,2019-07-25T14:32:19Z,"- Bugfix: Lock transitive python-requires in lockfiles, not only direct ones. (https://github.com/conan-io/conan/pull/5531)",47190624
493,False,False,2019-07-22T14:02:29Z,2019-07-22T14:36:18Z,"- Feature: support 7.1 clang version (https://github.com/conan-io/conan/pull/5492)
- Bugfix: When a profile was detected, for GCC 5.X the warning message about the default `libcxx` was not shown. (https://github.com/conan-io/conan/pull/5524)
- Bugfix: Update python-dateutil dependency to ensure availability of `dateutil.parser.isoparse` (https://github.com/conan-io/conan/pull/5485)
- Bugfix: Solve regression in ``conan info <ref>`` command, incorrectly reading the graph_info.json and lockfiles (https://github.com/conan-io/conan/pull/5481)
- Bugfix: Trailing files left when packages are not found in conan info and install, restricted further installs with different case in Windows, without ``rm -rf ~/.conan/data/pkg_name`` (https://github.com/conan-io/conan/pull/5480)
- Bugfix: The lock files mechanism now allows to update a node providing new information, like a retrieved package revision, if the ""base"" reference was the same. (https://github.com/conan-io/conan/pull/5467)
- Bugfix: search command table output has invalid HTML code syntax (https://github.com/conan-io/conan/pull/5460)",47190624
494,False,False,2019-07-09T14:13:34Z,2019-07-09T14:26:26Z,"- Feature: Better UX for no_proxy (#3943) (https://github.com/conan-io/conan/pull/5438). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1347)
- Feature: Show warning when URLs for remotes is invalid (missing schema, host, etc). (https://github.com/conan-io/conan/pull/5418)
- Feature: Implementation of lockfiles. Lockfiles store in a file all the configuration, exact versions (including revisions), necessary to achieve reproducible builds, even when using version-ranges or package revisions. (https://github.com/conan-io/conan/pull/5412). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1350)
- Feature: Change progress bar output to tqdm to make it look better (https://github.com/conan-io/conan/pull/5407)
- Feature: Define 2 new modes and helpers for the package binary ID: ``recipe_revision_mode`` and ``package_revision_mode``, that take into account the revisions. The second one will use all the information from dependencies, resulting in fully deterministic and complete package IDs: if some dependency change, it will be necessary to build a new binary of consumers (https://github.com/conan-io/conan/pull/5363). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1345)
- Feature: Add apple-clang 11.0 to settings.yml (#5328) (https://github.com/conan-io/conan/pull/5357). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1327)
- Feature: SystemPackageTool platform detection (#5026) (https://github.com/conan-io/conan/pull/5215). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1291)
- Fix: Enable the definition of revisions in conanfile.txt (https://github.com/conan-io/conan/pull/5435)
- Fix: Improve resolution of version ranges for remotes (https://github.com/conan-io/conan/pull/5433)
- Fix: The conan process returns `6` when a `ConanInvalidConfiguration` is thrown during `conan info`. (https://github.com/conan-io/conan/pull/5421)
- Fix: Inspect missing attribute is not an error (#3953) (https://github.com/conan-io/conan/pull/5419)
- Fix: Allow --build-order and --graph together for conan info (#3447) (https://github.com/conan-io/conan/pull/5417)
- Fix: Handling error when reference not found using conan download (https://github.com/conan-io/conan/pull/5399)
- Fix: Update Yum cache (#5370) (https://github.com/conan-io/conan/pull/5387)
- Fix: Remove old folder for conan install (#5376) (https://github.com/conan-io/conan/pull/5384)
- Fix: Add missing call to super constructor to `VirtualEnvGenerator`. (https://github.com/conan-io/conan/pull/5375)
- Fix: Force forward slashes in the variable `$PROFILE_DIR` (https://github.com/conan-io/conan/pull/5373). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1333)
- Fix: Accept a list for the requires attribute (https://github.com/conan-io/conan/pull/5371). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1332)
- Fix: Remove packages when version is asterisk (#5297) (https://github.com/conan-io/conan/pull/5346)
- Fix: Make conan_data visible to pylint (#5327) (https://github.com/conan-io/conan/pull/5337)
- Fix: Improve the output to show the remote (or cache) that a version range is resolved to. (https://github.com/conan-io/conan/pull/5336)
- Fix: Deprecated ``conan copy|download|upload <ref> -p=ID``, use ``conan .... <pref>`` instead (https://github.com/conan-io/conan/pull/5293). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1317)
- Fix: `AutoToolsBuildEnvironment` is now aware of `os_target` and `arch_target` to calculate the gnu triplet when declared. (https://github.com/conan-io/conan/pull/5283)
- Fix: Better message for gcc warning of libstdc++ at default profile detection (https://github.com/conan-io/conan/pull/5275)
- Bugfix: `verify_ssl` field in SCM being discarded when used with `False` value. (https://github.com/conan-io/conan/pull/5441)
- Bugfix: enable retry for requests (https://github.com/conan-io/conan/pull/5400)
- Bugfix: Allow creation and deletion of files in ``tools.patch`` with ``strip>0`` (https://github.com/conan-io/conan/pull/5334)
- Bugfix: Use case insensitive comparison for SHA256 checksums (https://github.com/conan-io/conan/pull/5306)",47190624
495,False,False,2019-06-14T06:42:07Z,2019-06-14T06:54:15Z,"- Feature: Print nicer error messages when receive an error from Artifactory. (https://github.com/conan-io/conan/pull/5326)
- Fix: Make ``conan config get storage.path`` return an absolute, resolved path (https://github.com/conan-io/conan/pull/5350)
- Fix: Skipped the compiler version check in the cmake generator when a `-s compiler.toolset` is specified (Visual Studio). (https://github.com/conan-io/conan/pull/5348)
- Fix: Constraint transitive dependency ``typed-ast`` (required by astroid) in python3.4, as they stopped releasing wheels, and it fails to build in some Windows platforms with older SDKs. (https://github.com/conan-io/conan/pull/5324)
- Fix: Accept v140 and VS 15.0 for CMake generator (#5318) (https://github.com/conan-io/conan/pull/5321)
- Fix: Accept only .lib and .dll as Visual extensions (#5316) (https://github.com/conan-io/conan/pull/5319)
- Bugfix: Do not copy directories inside a symlinked one (https://github.com/conan-io/conan/pull/5342)
- Bugfix: Conan was retrying the upload when failed with error 400 (request error). (https://github.com/conan-io/conan/pull/5326)",47190624
496,False,False,2019-06-12T05:26:27Z,2019-06-12T08:50:00Z,"- Fix: Accept v140 and VS 15.0 for CMake generator (#5318) (https://github.com/conan-io/conan/pull/5331)
- Fix: Constraint transitive dependency typed-ast (required by astroid) in python3.4, as they stopped releasing wheels, and it fails to build in some Windows platforms with older SDKs. (https://github.com/conan-io/conan/pull/5331)",47190624
497,False,False,2019-06-11T13:28:14Z,2019-06-11T13:39:24Z,"- Because of an issue with the deploy pipeline this version has been released with mixed changes from 1.16.X branch. Please, use 1.15.4",47190624
498,False,False,2019-06-04T06:53:56Z,2019-06-04T07:04:55Z,"- Feature: The `conan upload` command can receive now the full package reference to upload a binary package. The `-p` argument is now deprecated. (https://github.com/conan-io/conan/pull/5224). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1300)
- Feature: Add hooks `pre_package_info` and `post_package_info` (https://github.com/conan-io/conan/pull/5223). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1293)
- Feature: New build mode `--build cascade` that forces building from sources any node with dependencies also built from sources. (https://github.com/conan-io/conan/pull/5218). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1296)
- Feature: Print errors and warnings to `stderr` (https://github.com/conan-io/conan/pull/5206)
- Feature: New ``conan new --template=mytemplate`` to initialize recipes with your own templates (https://github.com/conan-io/conan/pull/5189). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1286)
- Feature: Allow using wildcards to remove system requirements sentinel from cache. (https://github.com/conan-io/conan/pull/5176). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1294)
- Feature: Implement conan.conf ``retry`` and ``retry-wait`` and ``CONAN_RETRY`` and ``CONAN_RETRY_WAIT`` to configure all retries for all transfers, including upload, download, and ``tools.download()``. (https://github.com/conan-io/conan/pull/5174). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1295)
- Feature: Support yaml lists in workspace ``root`` field. (https://github.com/conan-io/conan/pull/5156). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1288)
- Feature: Add gcc 8.3 and 9.1 new versions to default *settings.yml* (https://github.com/conan-io/conan/pull/5112)
- Feature: Retry upload or download for error in response message (e.g. status is '500') (https://github.com/conan-io/conan/pull/4984)
- Fix: Do not retry file transfer operations for 401 and 403 auth and permissions errors. (https://github.com/conan-io/conan/pull/5278)
- Fix: Copy symlinked folder when using `merge_directories` function (https://github.com/conan-io/conan/pull/5237)
- Fix: Add the ability to avoid the `/verbosity` argument in CMake command line for MSBuild (https://github.com/conan-io/conan/pull/5220). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1292)
- Fix: self.copy with symlinks=True does not copy symlink if the .conan directory is a symlink #5114 (https://github.com/conan-io/conan/pull/5125)
- Fix: Export detected_os from tools.oss (#5101) (https://github.com/conan-io/conan/pull/5102). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1276)
- Fix: Use `revision` as the SVN's `peg_revision` (broken for an edge case) (https://github.com/conan-io/conan/pull/5029)
- Bugfix: ``--update`` was not updating ``python_requires`` using version ranges. (https://github.com/conan-io/conan/pull/5265)
- Bugfix: ``visual_studio`` generator only adds "".lib"" extension for lib names without extension, otherwise (like "".a"") respect it. (https://github.com/conan-io/conan/pull/5254)
- Bugfix: Fix `conan search` command showing revisions timestamps in a different time offset than UTC. (https://github.com/conan-io/conan/pull/5232)
- Bugfix: Meson build-helper gets correct compiler flags, AutoTools build environment adds compiler.runtime flags (https://github.com/conan-io/conan/pull/5222)
- Bugfix: The `cmake_multi` generator was not managing correctly the `RelWithDebInfo` and `MinSizeRel` build types. (https://github.com/conan-io/conan/pull/5221)
- Bugfix: Check that registry file exists before removing it (https://github.com/conan-io/conan/pull/5219)
- Bugfix: do not append ""-T "" if generator doesn't support it (https://github.com/conan-io/conan/pull/5201)
- Bugfix: ``conan download`` always retrieve the sources, also with ``--recipe`` argument, which should only skip download binaries, not the sources. (https://github.com/conan-io/conan/pull/5194)
- Bugfix: Using `scm` declared in a superclass failed exporting the recipe with the error `ERROR: The conanfile.py defines more than one class level 'scm' attribute`. (https://github.com/conan-io/conan/pull/5185)
- Bugfix: Conan command returns 6 (Invalid configuration) also when the settings are restricted in the recipe (https://github.com/conan-io/conan/pull/5178)
- Bugfix: Make sure that proxy ""http_proxy"", ""https_proxy"", ""no_proxy"" vars are correctly removed if custom ones are defined in the conan.conf. Also, avoid using ``urllib.request.getproxies()``, they are broken. (https://github.com/conan-io/conan/pull/5162)
- Bugfix: Use `copy()` for deploy generator so that permissions of files are preserved. Required if you want to use the deploy generator to deploy executables. (https://github.com/conan-io/conan/pull/5136)",47190624
499,False,False,2019-05-31T11:22:23Z,2019-05-31T11:36:53Z,"- Bugfix: Fix bug with python-requires not being updated with ``--update`` if using version-ranges. (https://github.com/conan-io/conan/pull/5266)
- Bugfix: Fix computation of ancestors performance regression (https://github.com/conan-io/conan/pull/5260)",47190624
500,False,False,2019-05-16T11:21:40Z,2019-05-16T11:34:30Z,"- Fix: Fix regression of ``conan remote update --insert`` using the same URL it had before (https://github.com/conan-io/conan/pull/5110)
- Fix: Fix migration of *registry.json|txt* file including reference to non existing remotes. (https://github.com/conan-io/conan/pull/5103)
- Bugfix: Avoid crash of commands copy, imports, editable-add for packages using python_requires (https://github.com/conan-io/conan/pull/5150)",47190624
501,False,False,2019-05-06T08:50:39Z,2019-05-06T08:59:48Z,"- Feature: Updated the generated *conanfile.py* in ``conan new`` to the new [conan-io/hello].(https://github.com/conan-io/hello) repository (https://github.com/conan-io/conan/pull/5069). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1269)
- Feature: The `MSBuild` build helper allows the parameter `toolset` with `False` value to skip the toolset adjustment. (https://github.com/conan-io/conan/pull/5052). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1260)
- Feature: Add GCC 9 to default settings.yml (https://github.com/conan-io/conan/pull/5046). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1257)
- Feature: You can disable broken symlinks checks when packaging using `CONAN_SKIP_BROKEN_SYMLINKS_CHECK` env var or `config.skip_broken_symlinks_check=1` (https://github.com/conan-io/conan/pull/4991). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1272)
- Feature: New ``deploy`` generator to export files from a dependency graph to an installation folder (https://github.com/conan-io/conan/pull/4972). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1262)
- Feature: Create `tools.Version` with _limited_ capabilities (https://github.com/conan-io/conan/pull/4963). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1253)
- Feature: Default filename for workspaces: `conanws.yml` (used in install command) (https://github.com/conan-io/conan/pull/4941). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1243)
- Feature: Add install folder to command 'conan workspace install' (https://github.com/conan-io/conan/pull/4940). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1261)
- Feature: Add `compiler.cppstd` setting (mark `cppstd` as deprecated) (https://github.com/conan-io/conan/pull/4917). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1266)
- Feature: Add a `--raw` argument to `conan inspect` command to get an output only with the value of the requested attributes (https://github.com/conan-io/conan/pull/4903). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1240)
- Feature: ``tools.get()`` and ``tools.unzip()`` now handle also ``.gz`` compressed files (https://github.com/conan-io/conan/pull/4883). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1230)
- Feature: Add argument `--force` to command `profile new` to overwrite existing one (https://github.com/conan-io/conan/pull/4880). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1176)
- Feature: Get commit message (https://github.com/conan-io/conan/pull/4877). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1175)
- Fix: Remove sudo from Travis CI template (https://github.com/conan-io/conan/pull/5073). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1270)
- Fix: Handle quoted path and libraries in the premake generator (https://github.com/conan-io/conan/pull/5051)
- Fix: A simple addition to ensure right compiler version is found on windows. (https://github.com/conan-io/conan/pull/5041)
- Fix: Include CMAKE_MODULE_PATH for CMake find_dependency (#4956) (https://github.com/conan-io/conan/pull/5021)
- Fix: Add default_package_id_mode in the default conan.conf (#4947) (https://github.com/conan-io/conan/pull/5005). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1248)
- Fix: Use back slashes for ``visual_studio`` generator instead of forward slashes (https://github.com/conan-io/conan/pull/5003)
- Fix: Adding `subparsers.required = True` makes both Py2 and Py3 print an error when no arguments are entered in commands that have subarguments (https://github.com/conan-io/conan/pull/4902)
- Fix: Example bare package recipe excludes `conanfile.py` from copy (https://github.com/conan-io/conan/pull/4892)
- Fix: More meaningful error message when a remote communication fails to try to download a binary package. (https://github.com/conan-io/conan/pull/4888)
- Bugfix: ``conan upload --force`` force also the upload of package binaries, not only recipes (https://github.com/conan-io/conan/pull/5088)
- BugFix: MSYS 3.x detection (https://github.com/conan-io/conan/pull/5078)
- Bugfix: Don't crash when an editable declare a ``build_folder`` in the layout, but not used in a workspace (https://github.com/conan-io/conan/pull/5070)
- Bugfix: Made compatible the `cmake_find_package_multi` generator with `CMake < 3.9` (https://github.com/conan-io/conan/pull/5042)
- Bugfix: Fix broken local development flow (``conan source``, ``conan build``, ``conan package``, ``conan export-pkg``) with recipes with ``python-requires`` (https://github.com/conan-io/conan/pull/4979)
- Bugfix: 'tar_extract' function was failing if there was a linked folder in the working dir that matches one inside the tar file. Now we use the `destination_dir` as base directory to check this condition. (https://github.com/conan-io/conan/pull/4965)
- Bugfix: Remove package folder in ``conan create`` even when using ``--keep-build`` (https://github.com/conan-io/conan/pull/4918)",47190624
502,False,False,2019-04-30T16:35:22Z,2019-04-30T16:42:35Z,"- Bugfix: Uncompressing a `tgz` package with a broken symlink failed while touching the destination file. (https://github.com/conan-io/conan/pull/5065)
- Bugfix: The symlinks compressed in a `tgz` had invalid nonzero size. (https://github.com/conan-io/conan/pull/5064)
- Bugfix: Fixing exception of transitive build-requires mixed with normal requires (https://github.com/conan-io/conan/pull/5056)",47190624
503,False,False,2019-04-25T09:15:58Z,2019-04-25T09:48:03Z,"- Bugfix: Fixed error while using Visual Studio 2019 with Ninja generator. (https://github.com/conan-io/conan/pull/5028)
- Bugfix: Solved errors in concurrent uploads of same recipe (https://github.com/conan-io/conan/pull/5014)
- Bugfix: Fixed a bug that intermittently raised  `ERROR: 'NoneType' object has no attribute 'file_sums'` when uploading a recipe. (https://github.com/conan-io/conan/pull/5012)
- Bugfix: Bug in `cmake_find_package_multi` caused `CMake` to find incorrect modules in `CMake` modules paths when only `Config` files should be taken into account. (https://github.com/conan-io/conan/pull/4995)
- Bugfix: Fix skipping binaries because of transitive ``private`` requirements (https://github.com/conan-io/conan/pull/4987)
- Bugfix: Fix broken local development flow (conan source, conan build, conan package, conan export-pkg) with recipes with python-requires (https://github.com/conan-io/conan/pull/4983)",47190624
504,False,False,2019-04-11T10:16:21Z,2019-04-11T10:23:39Z,"- Bugfix: ``build-requires`` and ``private`` requirements that resolve to a dependency that is already in the graph won't span a new node, nor will be ``build-requires`` or ``private``. They can conflict too. (https://github.com/conan-io/conan/pull/4937)",47190624
505,False,False,2019-04-11T08:44:31Z,2019-04-11T08:56:46Z,"- Bugfix: ``build-requires`` and ``private`` requirements that resolve to a dependency that is already in the graph won't span a new node, nor will be ``build-requires`` or ``private``. They can conflict too. (https://github.com/conan-io/conan/pull/4937)
- Bugfix: Run a full metadata migration in the cache to avoid old ``null`` revisions in package metadata (https://github.com/conan-io/conan/pull/4934)",47190624
506,False,False,2019-04-01T08:44:53Z,2019-04-01T09:22:31Z,"- Fix: Print a message for unhandled Conan errors building the API and collaborators (https://github.com/conan-io/conan/pull/4869)
- Bugfix: Client does not require credentials for anonymous downloads from remotes. (https://github.com/conan-io/conan/pull/4872)
- Bugfix: Fix a migration problem of ``conan config install`` for Conan versions 1.9 and older (https://github.com/conan-io/conan/pull/4870)",47190624
507,False,False,2019-03-28T13:20:49Z,2019-03-28T13:32:01Z,"- Feature: Allow the user to configure the path to the CACERT file used in requests (https://github.com/conan-io/conan/pull/4835). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1136)
- Feature: support new architectures s390 and s390x (https://github.com/conan-io/conan/pull/4810). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1140)
- Feature: `--build` parameter now applies fnmatching onto the whole reference, allowing to control rebuilding in a much broader way. (https://github.com/conan-io/conan/pull/4787). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1141)
- Feature: Add config variable `general.error_on_override` and environment variable `CONAN_ERROR_ON_OVERRIDE` (defaulting to `False`) to configure if an overridden requirement should raise an error when overridden from downstream consumers. (https://github.com/conan-io/conan/pull/4771). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1128)
- Feature: Allow to specify `revision_mode` for each recipe, values accepted are `scm` or `hash` (default) (https://github.com/conan-io/conan/pull/4767). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1126)
- Feature: Sort library list name when calling tools.collect_libs (https://github.com/conan-io/conan/pull/4761). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1124)
- Feature: Add `cmake_find_package_multi` generator. (https://github.com/conan-io/conan/pull/4714). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1114)
- Feature: Implement ``--source-folder`` and ``--target-folder`` to ``conan config install`` command to select  subfolder to install from the source origin, and also the destination folder within the cache. (https://github.com/conan-io/conan/pull/4709). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1131)
- Feature: Implement ``--update`` argument for ``python-requires`` too. (https://github.com/conan-io/conan/pull/4660)
- Fix: Apply environment variables from profile and from requirements to ``conan export-pkg`` (https://github.com/conan-io/conan/pull/4852)
- Fix: Do not run `export_sources` automatically for python_requires (https://github.com/conan-io/conan/pull/4838)
- Fix: Show the correct profile name when detect a new one (#4818) (https://github.com/conan-io/conan/pull/4824)
- Fix: Allow using ``reference`` object in workspaces in templates for out of source builds (https://github.com/conan-io/conan/pull/4812). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1135)
- Fix: Look for ``vswhere`` in ``PATH`` when using ``tools.vswhere()`` (https://github.com/conan-io/conan/pull/4805)
- Fix: SystemPackageTools doesn't run sudo when it's not found (#4470) (https://github.com/conan-io/conan/pull/4774). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1127)
- Fix: Show warning if repo is not pristine and using SCM mode to set the revisions (https://github.com/conan-io/conan/pull/4764)
- Fix: avoid double call to ``package()`` method (https://github.com/conan-io/conan/pull/4748). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1133)
- Fix: The `cmake_paths` generator now declares the `CONAN_XXX_ROOT` variables in case some exported cmake module file like `XXXConfig.cmake` has been patched with the `cmake.patch_config_paths()` to replace absolute paths to the local cache. (https://github.com/conan-io/conan/pull/4719). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1115)
- Fix: Do not distribute the tests in the python package nor in the installers. (https://github.com/conan-io/conan/pull/4713)
- Fix: add support for CMake generator platform (https://github.com/conan-io/conan/pull/4708). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1125)
- Fix: Fix corrupted packages with missing conanmanifest.txt files (https://github.com/conan-io/conan/pull/4662)
- Fix: Include information about all the configurations in the JSON generator (https://github.com/conan-io/conan/pull/4657). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1129)
- Bugfix: Fixed authentication management when a server returns 401 uploading a file. (https://github.com/conan-io/conan/pull/4857)
- Bugfix: Fixed recipe revision detection when some error output or unexpected output was printed to the stdout running the `git` command. (https://github.com/conan-io/conan/pull/4854)
- Bugfix: The error output was piped to stdout causing issues while running git commands, especially during the detection of the scm revision (https://github.com/conan-io/conan/pull/4853)
- Bugfix: ``conan export-pkg`` should never resolve build-requires (https://github.com/conan-io/conan/pull/4851)
- bugfix: The `--build` pattern was case sensitive depending on the os file system, now it is always case sensitive, following the `conan search` behavior. (https://github.com/conan-io/conan/pull/4842)
- Bugfix:  Fix metadata not being updated for ``conan export-pkg`` when using  ``--package-folder`` (https://github.com/conan-io/conan/pull/4834)
- Bugfix: `--build` parameter now is always case-sensitive, previously it depended to the file system type. (https://github.com/conan-io/conan/pull/4787). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1141)
- Bugfix: Raise an error if source files cannot be correctly copied to build folder because of long paths in Windows. (https://github.com/conan-io/conan/pull/4766)
- Bugfix: Use the same interface in ``conan_basic_setup()`` for the ``cmake_multi`` generator (https://github.com/conan-io/conan/pull/4721). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1121)
",47190624
508,False,False,2019-03-27T11:32:56Z,2019-03-27T14:49:28Z,- Bugfix: Revision computation failed when a git repo was present but without commits (https://github.com/conan-io/conan/pull/4830),47190624
509,False,False,2019-03-21T14:10:44Z,2019-03-21T14:24:55Z,"- Bugfix: Installing a reference with ""update"" and ""build outdated"" options raised an exception. (https://github.com/conan-io/conan/pull/4790)
- Bugfix: Solved bug with build-requires transitive build-requires (https://github.com/conan-io/conan/pull/4783)
- Bugfix: Fixed workspace crash when no layout was specified (https://github.com/conan-io/conan/pull/4783)
- Bugfix: Do not generate multiple ``add_subdirectories()`` for workspaces build-requires (https://github.com/conan-io/conan/pull/4783)",47190624
510,False,False,2019-03-15T07:42:44Z,2019-03-15T07:55:18Z,- Bugfix: Fix computation of graph when transitive diamonds are processed. (https://github.com/conan-io/conan/pull/4737),47190624
511,False,False,2019-03-07T09:21:08Z,2019-03-07T11:36:04Z,"- Feature: Added with_login parameter to tools.run_in_windows_bash() (https://github.com/conan-io/conan/pull/4673). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1103)
- Feature: The `deb` and `windows` Conan installers now use Python 3. (https://github.com/conan-io/conan/pull/4663)
- Feature: Allow configuring in *conan.conf* a different default ``package_id`` mode. (https://github.com/conan-io/conan/pull/4644). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1106)
- Feature: Apply Jinja2 to layout files before parsing them (https://github.com/conan-io/conan/pull/4596). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1093)
- Feature: Accept a PackageReference for the command  `conan get` (argument `-p` is accepted, but hidden) (https://github.com/conan-io/conan/pull/4494). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1070)
- Feature: Re-implement Workspaces based on Editable packages. (https://github.com/conan-io/conan/pull/4481). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1086)
- Feature: Removed old ""compatibility"" mode of revisions. (https://github.com/conan-io/conan/pull/4462). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1105)
- Fix: When revisions enabled, add the revision to the json output of the info/install commands. (https://github.com/conan-io/conan/pull/4667)
- Fix: JSON output for `multi_config` now works in `install` and `create` commands (https://github.com/conan-io/conan/pull/4656)
- Fix: Deprecate 'cppflags' in favor of 'cxxflags' in class CppInfo (https://github.com/conan-io/conan/pull/4611). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1091)
- Fix: Return empty list if env variable is an empty string (https://github.com/conan-io/conan/pull/4594)
- Fix: `conan profile list` will now recursively list profiles. (https://github.com/conan-io/conan/pull/4591)
- Fix: `Instance of 'TestConan' has no 'install_folder' member` when exporting recipe (https://github.com/conan-io/conan/pull/4585)
- Fix: SCM replacement with comments below it (https://github.com/conan-io/conan/pull/4580)
- Fix: Remove package references associated to a remote in *registry.json* when that remote is deleted (https://github.com/conan-io/conan/pull/4568)
- Fix:  Fixed issue with Artifactory when the anonymous user is enabled, causing the uploads to fail without requesting the user and password. (https://github.com/conan-io/conan/pull/4526)
- Fix: Do not allow an alias to override an existing package (https://github.com/conan-io/conan/pull/4495)
- Fix: Do not display the warning when there are files in the package folder (#4438). (https://github.com/conan-io/conan/pull/4464)
- Fix: Renamed the `conan link` command to `conan editable` to put packages into editable mode (#4481) . Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1086)
- Bugfix: Solve problem with loading recipe python files in Python 3.7 because of ``module.__file__ = None`` (https://github.com/conan-io/conan/pull/4669)
- Bugfix: Do not attempt to upload non-existing packages, due to empty short_paths folders, or to explicit ``upload -p=id`` command. (https://github.com/conan-io/conan/pull/4615)
- Bugfix: Fix LIB overwrite in ``virtualbuildenv`` generator (https://github.com/conan-io/conan/pull/4583)
- Bugfix: Avoid ``str(self.settings.xxx)`` crash when the value is None. (https://github.com/conan-io/conan/pull/4571). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1089)
- Bugfix: Build-requires expand over the closure of the package they apply to, so they can create conflicts too. Previously, those conflicts were silently skipped, and builds would use an undetermined version and configuration of dependencies. (https://github.com/conan-io/conan/pull/4514)
- Bugfix: meson build type actually reflects recipe shared option (https://github.com/conan-io/conan/pull/4489)
- Bugfix: Fixed several bugs related to revisions. (https://github.com/conan-io/conan/pull/4462). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1105)
- Bugfix: Fixed several bugs related to the package `metadata.json` (https://github.com/conan-io/conan/pull/4462). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1105)",47190624
512,False,False,2019-02-18T13:32:35Z,2019-02-18T13:42:35Z,"- Fix: Fix potential downgrade from future 1.13 to 1.12 (https://github.com/conan-io/conan/pull/4547)
- Fix: Remove output warnings in MSBuild helper. (https://github.com/conan-io/conan/pull/4518)
- Fix: Revert default cmake generator on Windows (#4265) (https://github.com/conan-io/conan/pull/4509). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1072)
- Bugfix: Fixed problem with conanfile.txt [imports] sections using the '@' character. (https://github.com/conan-io/conan/pull/4539). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1078)
- Bugfix: Fix search packages function when remote is called `all` (https://github.com/conan-io/conan/pull/4502)",47190624
513,False,False,2019-02-08T13:41:02Z,2019-02-08T13:48:20Z,"- Bugfix: Regression in ``MSBuild`` helper, incorrectly ignoring the ``conan_build.props`` file because of using a relative path instead of absolute one. (https://github.com/conan-io/conan/pull/4488)",47190624
514,False,False,2019-02-05T09:06:25Z,2019-02-05T09:14:43Z,"- Bugfix: GraphInfo parsing of existing graph_info.json files raises KeyError over ""root"". (https://github.com/conan-io/conan/pull/4458)
- Bugfix: Transitive Editable packages fail to install (https://github.com/conan-io/conan/pull/4448)",47190624
515,False,False,2019-01-30T15:56:19Z,2019-01-30T16:17:10Z,"- Feature: Add JSON output to 'info' command (https://github.com/conan-io/conan/pull/4359). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1050)
- Feature: Remove system requirements conan folders (not installed binaries) from cache (https://github.com/conan-io/conan/pull/4354). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1038)
- Feature: Updated *CONTRIBUTING.md* with code style (https://github.com/conan-io/conan/pull/4348)
- Feature: Updated OS versions for apple products (https://github.com/conan-io/conan/pull/4345)
- Feature: add environment variable CONAN_CACHE_NO_LOCKS to simplify debugging (https://github.com/conan-io/conan/pull/4309). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1019)
- Feature: The commands `conan install`, `conan info`, `conan create` and `conan export-pkg` now can receive multiple profile arguments. The applied profile will be the composition of them, prioritizing the latest applied. (https://github.com/conan-io/conan/pull/4308). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1036)
- Feature: Added ``get_tag()`` methods to ``tools.Git()`` and ``tools.SVN()`` helpers. (https://github.com/conan-io/conan/pull/4306). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1020)
- Feature: Package reference is now accepted as an argument in ``conan install --build`` (https://github.com/conan-io/conan/pull/4305). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1017)
- Feature: define environment variables for CTest (https://github.com/conan-io/conan/pull/4299). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1018)
- Feature: Added a configuration entry at the `conan.conf` file to be able to specify a custom `CMake` executable. (https://github.com/conan-io/conan/pull/4298). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1025)
- Feature: Skip ""README.md"" and ""LICENSE.txt"" during the installation of a custom config via `conan config install`. (https://github.com/conan-io/conan/pull/4259). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1016)
- Feature: allow to specify MSBuild verbosity level (https://github.com/conan-io/conan/pull/4251). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1012)
- Feature: add definitions to MSBuild build helper (and ``tools.build_sln_command()``) (https://github.com/conan-io/conan/pull/4239). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1024)
- Feature: Generate deterministic short paths on Windows (https://github.com/conan-io/conan/pull/4238)
- Feature: The `tools.environment_append()` now accepts unsetting variables by means of appending such variable with a value equal to None. (https://github.com/conan-io/conan/pull/4224). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1003)
- Feature: Enable a new ``reference`` argument in ``conan install <path> <reference>``, where ``reference`` can be a partial reference too (identical to what is passed to ``conan create`` or ``conan export``. This allows defining all pkg,version,user,channel fields of the recipe for the local flow. (https://github.com/conan-io/conan/pull/4197). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1045)
- Feature: Added support for new architecture ``ppc32`` (https://github.com/conan-io/conan/pull/4195). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1001)
- Feature: Added support for new architecture ``armv8.3`` (https://github.com/conan-io/conan/pull/4195). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1001)
- Feature: Added support for new architecture ``armv8_32`` (https://github.com/conan-io/conan/pull/4195). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1001)
- Feature: Add experimental support for packages in editable mode (https://github.com/conan-io/conan/pull/4181). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1009)
- Fix: Conditionally expand list-like environment variables in ``virtualenv`` generator (https://github.com/conan-io/conan/pull/4396)
- Fix: get_cross_building_settings for MSYS (https://github.com/conan-io/conan/pull/4390)
- Fix: Implemented retrial of output to stdout stream when the OS (Windows) is holding it and producing IOError for output (https://github.com/conan-io/conan/pull/4375)
- Fix: Validate CONAN_CPU_COUNT and output user-friendly message for invalid values (https://github.com/conan-io/conan/pull/4372)
- Fix: Map ``cpp_info.cppflags`` to ``CONAN_CXXFLAGS`` in ``make`` generator. (https://github.com/conan-io/conan/pull/4349). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1037)
- Fix: Use ``*_DIRS`` instead of ``*_PATHS`` ending for varaibles generated by the ``make`` generator: ``INCLUDE_DIRS``, ``LIB_DIRS``, ``BIN_DIRS``, ``BUILD_DIRS`` and ``RES_DIRS`` (https://github.com/conan-io/conan/pull/4349). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1037)
- Fix: Bumped requirement of pyOpenSSL on OSX to `>=16.0.0, <19.0.0` (https://github.com/conan-io/conan/pull/4333)
- Fix: Fixed a bug in the migration of the server storage to the revisions layout. (https://github.com/conan-io/conan/pull/4325)
- Fix: ensure tools.environment_append doesn't raise trying to unset variables (https://github.com/conan-io/conan/pull/4324). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1023)
- Fix: Improve error message when a server (like a proxy), returns 200-OK for a conan api call, but with an unexpected message. (https://github.com/conan-io/conan/pull/4317)
- Fix: ensure is_windows, detect_windows_subsystem, uname work under MSYS/Cygwin (https://github.com/conan-io/conan/pull/4313)
- Fix: uname shouldn't use -o flag, which is GNU extention (https://github.com/conan-io/conan/pull/4311)
- Fix: ``get_branch()`` method of ``tools.SVN()`` helper now returns only the branch name, not the tag when present. (https://github.com/conan-io/conan/pull/4306). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1020)
- Fix: Conan client now always include the `X-Checksum-Sha1` header in the file uploads, not only when checking if the file is already there with a remote supporting checksum deploy (Artifactory) (https://github.com/conan-io/conan/pull/4303)
- Fix: SCM optimization related to `scm_folder.txt` is taken into account only for packages under development. (https://github.com/conan-io/conan/pull/4301)
- Fix: Update premake generator, rename conanbuildinfo.premake -> conanbuildinfo.premake.lua, conan_cppdefines -> conan_defines (https://github.com/conan-io/conan/pull/4296). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1032)
- Fix: Using ``yaml.safe_load`` instead of ``load`` (https://github.com/conan-io/conan/pull/4285)
- Fix: Fixes default CMake generator on Windows to use MinGW Makefiles. (https://github.com/conan-io/conan/pull/4281). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1026)
- Fix: Visual Studio toolset is passed from settings to the MSBuild helper (https://github.com/conan-io/conan/pull/4250). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1052)
- Fix: Handle corner cases related to SCM with local sources optimization (https://github.com/conan-io/conan/pull/4249)
- Fix: Allow referring to projects created by b2 generator for dependencies with absolute paths. (https://github.com/conan-io/conan/pull/4211)
- Fix: Credentials are removed from SCM `url` attribute if Conan is automatically resolving it. (https://github.com/conan-io/conan/pull/4207). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/996)
- Fix: Remove client/server versions check on every request. Return server capabilities only in `ping` endpoint. (https://github.com/conan-io/conan/pull/4205)
- Fix: Updated contributing guidelines to the new workflow (https://github.com/conan-io/conan/pull/4173)
- Bugfix: Fixes config install when copying hooks (https://github.com/conan-io/conan/pull/4412)
- BugFix: Meson generator was failing in case of package_folder == None (test_package using Meson) (https://github.com/conan-io/conan/pull/4391)
- BugFix: Prepend environment variables are applied twice in conanfile (https://github.com/conan-io/conan/pull/4380)
- Bugfix: Caching of several internal loaders broke the conan_api usage (https://github.com/conan-io/conan/pull/4362)
- Bugfix: Removing usage of FileNotFoundError which is Py3 only (https://github.com/conan-io/conan/pull/4361)
- Bugfix: Custom generator allow to use imports (https://github.com/conan-io/conan/pull/4358). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/1043)
- Bugfix: conanbuildinfo.cmake won't fail if ``project()`` LANGUAGE is None, but the user defines ``CONAN_DISABLE_CHECK_COMPILER``. (https://github.com/conan-io/conan/pull/4276)
- Bugfix: Fix version ranges containing spaces and not separated by commas. (https://github.com/conan-io/conan/pull/4273)
- Bugfix: When running consecutively Conan python API calls to `create` the default profile object became modified and cached between calls. (https://github.com/conan-io/conan/pull/4256)
- Bugfix: Fixes a bug in the CMake build helper about how flags are appended (https://github.com/conan-io/conan/pull/4227)
- Bugfix: Apply the environment to the local conan package command (https://github.com/conan-io/conan/pull/4204)
- Bugfix: b2 generator was failing when package recipe didn't use compiler setting (https://github.com/conan-io/conan/pull/4202)",47190624
516,False,False,2019-01-08T11:37:41Z,2019-01-08T13:10:17Z,"- Bugfix: The migrated data in the server from a version previous to Conan `1.10.0` was not migrated creating the needed indexes. This fixes the migration and creates the index on the fly for fixing broken migrations. Also the server doesn't try to migrate while running but warns the user to run `conan server --migrate` after doing a backup of the data, avoiding issues when running the production servers like gunicorn where the process doesn't accept input from the user. (https://github.com/conan-io/conan/pull/4229)",47190624
517,False,False,2018-12-20T12:02:06Z,2018-12-20T12:14:11Z,- BugFix: Fix `conan config install` requester for zip file download (https://github.com/conan-io/conan/pull/4172),47190624
518,False,False,2018-12-19T10:16:32Z,2018-12-19T12:14:00Z,"- Feature: Store verify_ssl argument in `conan config install` (https://github.com/conan-io/conan/pull/4158). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/976)
- Feature: Tox launcher to run the test suite. (https://github.com/conan-io/conan/pull/4151)
- Feature: Allow ``--graph=file.html`` html output using local *vis.min.js* and *vis.min.css* resources if they are found in the local cache (can be deployed via ``conan config install``) (https://github.com/conan-io/conan/pull/4133). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/972)
- Feature: Improve client DEBUG traces with better and more complete messages. (https://github.com/conan-io/conan/pull/4128)
- Feature: Server prints the configuration used at startup to help debugging issues. (https://github.com/conan-io/conan/pull/4128)
- Feature: Allow hooks to be stored in folders (https://github.com/conan-io/conan/pull/4106). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/979)
- Feature: Remove files containing Macos meta-data (files beginning by `._`) (https://github.com/conan-io/conan/pull/4103). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/978)
- Feature: Allow arguments in git clone for `conan config install` (https://github.com/conan-io/conan/pull/4083). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/975)
- Feature: Display the version-ranges resolutions in a cleaner way. (https://github.com/conan-io/conan/pull/4065)
- Feature: allow ``conan export . version@user/channel`` and ``conan create . version@user/channel`` (https://github.com/conan-io/conan/pull/4062). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/982)
- Fix: `cmake_find_package` generator not forwarding all dependency properties (https://github.com/conan-io/conan/pull/4125)
- Fix: Recent updates in python break ConfigParser with % in values, like in path names containing % (jenkins) (https://github.com/conan-io/conan/pull/4122)
- Fix: The property file that the `MSBuild()` is now generated in the `build_folder` instead of a temporary folder to allow more reproducible builds. (https://github.com/conan-io/conan/pull/4113). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/980)
- Fix: Fixed the check of the return code from Artifactory when using the checksum deploy feature. (https://github.com/conan-io/conan/pull/4100)
- Fix: Evaluate always SCM attribute before exporting the recipe (https://github.com/conan-io/conan/pull/4088). Docs: [:page_with_curl:](https://github.com/conan-io/docs/pull/981)
- Fix: Reordered Python imports (https://github.com/conan-io/conan/pull/4064)
- Bugfix: In ftp_download function there is extra call to ftp.login() with empty args. This causes ftp lib to login again with empty credentials and throwing exception because authentication is required by server. (https://github.com/conan-io/conan/pull/4092)
- Bugfix: Take into account ``os_build`` and ``arch_build`` for search queries. (https://github.com/conan-io/conan/pull/4061)
",47190624
519,False,False,2018-12-17T13:33:45Z,2018-12-17T13:53:59Z,"- Bugfix: Fixed bad URL schema in ApiV2 that could cause URLs collisions (https://github.com/conan-io/conan/pull/4138)
",47190624
520,False,False,2018-12-11T10:34:21Z,2018-12-11T10:44:20Z,"- Fix: Handle some corner cases of python_requires (https://github.com/conan-io/conan/pull/4099)
- Bugfix: Add v1_only argument in Conan server class (https://github.com/conan-io/conan/pull/4096)
- Bugfix: Handle invalid use of `python_requires` when imported like `conans.python_requires` (https://github.com/conan-io/conan/pull/4090)",47190624
521,False,False,2018-12-04T17:06:03Z,2018-12-04T17:25:37Z,"- Feature: Merged ""revisions"" feature code in develop branch, still disabled by default until it gets stabilized. (https://github.com/conan-io/conan/pull/3055)
- Feature: CMake global variable to disable Conan output ``CONAN_CMAKE_SILENT_OUTPUT`` (https://github.com/conan-io/conan/pull/4042)
- Feature: Added new ``make`` generator. (https://github.com/conan-io/conan/pull/4003)
- Feature: Deploy a conan snapshot package to [test.pypi.org](https://test.pypi.org/project/conan/) for every develop commit. (https://github.com/conan-io/conan/pull/4000)
- Fix: Using the `scm` feature when Conan is not able to read the gitignored files (local optimization mechanism) print a warning to improve the debug information but not crash. (https://github.com/conan-io/conan/pull/4045)
- Fix: The `tools.get` tool (download + unzip) now supports all the arguments of the `download` tool. e.g: `verify`, `retry`,  `retry_wait` etc. (https://github.com/conan-io/conan/pull/4041)
- Fix: Improve ``make`` generator test (https://github.com/conan-io/conan/pull/4018)
- Fix: Add space and dot in ``conan new --help`` (https://github.com/conan-io/conan/pull/3999)
- Fix: Resolve aliased packages in python_requires (https://github.com/conan-io/conan/pull/3957)
- Bugfix: Better checks of package reference ``pkg/version@user/channel``, avoids bugs for conanfile in 4 nested folders and ``conan install path/to/the/file`` (https://github.com/conan-io/conan/pull/4044)
- Bugfix: Running Windows subsystem scripts crashed when the PATH environment variable passed as a list. (https://github.com/conan-io/conan/pull/4039)
- Bugfix: Fix removal of conanfile.py with ``conan source`` command and the removal of source folder in the local cache when something fails (https://github.com/conan-io/conan/pull/4033)
- Bugfix: A `conan install` with a reference failed when running in the operating system root folder because python tried to create the directory even when nothing is going to be written. (https://github.com/conan-io/conan/pull/4012)
- Bugfix: Fix qbs generator mixing sharedlinkflags and exelinkflags (https://github.com/conan-io/conan/pull/3980)
- Bugfix: compiler_args generated ""mytool.lib.lib"" for Visual Studio libraries that were defined with the ``.lib`` extension in the ``self.cpp_info.libs`` field of ``package_info()``. (https://github.com/conan-io/conan/pull/3976)
",47190624
522,False,False,2018-11-20T07:37:19Z,2018-11-20T07:50:24Z,"- Bugfix: SVN API changes are relevant since version 1.9 (https://github.com/conan-io/conan/pull/3954)
- Bugfix: Fixed bug in `vcvars_dict` tool when using `filter_known_paths` argument. (https://github.com/conan-io/conan/pull/3941)
",47190624
523,False,False,2018-11-08T10:24:49Z,2018-11-08T11:00:42Z,"- Fix: Fix regression introduced in 1.7, setting ``amd64_x86`` when no ``arch_build`` is defined. (https://github.com/conan-io/conan/pull/3918)
- Fix: Do not look for binaries in other remotes than the recipe, if it is defined. (https://github.com/conan-io/conan/pull/3890)
- Bugfix: `sudo --askpass` breaks Centos 6 package installation. The sudo version on Centos 6 is 1.8.6. The option of askpass for sudo version 1.8.7 or older is `sudo -A`. (https://github.com/conan-io/conan/pull/3885)
",47190624
524,False,False,2018-10-30T11:51:26Z,2018-10-30T12:19:20Z,"1.9.0
====

- Feature: Support for ``srcdirs`` in ``package_info()``. Packages can package sources, and specify their location, which will be propagated to consumers. Includes support for CMake generator. (https://github.com/conan-io/conan/pull/3857)
- Feature: Added `remote_name` and `remote_url` to upload json output. (https://github.com/conan-io/conan/pull/3850)
- Feature: Add environment variable `CONAN_USE_ALWAYS_SHORT_PATHS` to let the consumer override short_paths behavior from recipes (https://github.com/conan-io/conan/pull/3846)
- Feature: Added ``--json`` output to ``conan export_pkg`` command (https://github.com/conan-io/conan/pull/3809)
- Feature: Add `conan remote clean` subcommand (https://github.com/conan-io/conan/pull/3767)
- Feature: New `premake` generator incorporated to the Conan code base from the external generator at https://github.com/memsharded/conan-premake. (https://github.com/conan-io/conan/pull/3751)
- Feature: New `conan remote list_pref/add_pref/remove_pref/update_pref` commands added to manage the new Registry entries for binary packages. (https://github.com/conan-io/conan/pull/3726)
- Feature: Add cpp_info data to json output of ``install`` and``create`` commands at package level. (https://github.com/conan-io/conan/pull/3717)
- Feature: Now the default templates of the `conan new` command use the docker images from the `conanio` organization: https://hub.docker.com/u/conanio (https://github.com/conan-io/conan/pull/3710)
- Feature: Added `topics` attribute to the `ConanFile` to specify topics (a.k.a tags, a.k.a keywords) to the recipe. (https://github.com/conan-io/conan/pull/3702)
- Feature: PEP8 code improvements. (https://github.com/conan-io/conan/pull/3691)
- Feature: Internal refactor to the remote registry to manage a json file. Also improved internal interface. (https://github.com/conan-io/conan/pull/3676)
- Feature: Implement reusage of sources (``exports_sources``) in recipes used as ``python_requires()``. (https://github.com/conan-io/conan/pull/3661)
- Feature: Added support for Clang >=8 and the new versioning schema, where only the major and the patch is used. (https://github.com/conan-io/conan/pull/3643)
- Fix: Renamed Plugins as Hooks (https://github.com/conan-io/conan/pull/3867)
- Fix: Adds GCC 8.2 to default settings.yml (https://github.com/conan-io/conan/pull/3865)
- Fix: Hidden confusing messages `download conaninfo.txt` when requesting the server to check package manifests. (https://github.com/conan-io/conan/pull/3861)
- Fix: The `MSBuild()` build helper doesn't adjust the compiler flags for the build_type anymore because they are adjusted by the project itself. (https://github.com/conan-io/conan/pull/3860)
- Fix: Add ``neon`` as linux distro for SystemPackageTools (https://github.com/conan-io/conan/pull/3845)
- Fix: remove error that was raised for custom compiler & compiler version, while checking ``cppstd`` setting. (https://github.com/conan-io/conan/pull/3844)
- Fix: do not allow wildcards in command `conan download <ref-without-wildcards>` (https://github.com/conan-io/conan/pull/3843)
- Fix: do not populate `arch` nor `arch_build` in autodetected profile if `platform.machine` returns an empty string. (https://github.com/conan-io/conan/pull/3841)
- Fix: The registry won't remove a reference to a remote removed recipe or package. (https://github.com/conan-io/conan/pull/3838)
- Fix: Internal improvements of the ConanFile loader (https://github.com/conan-io/conan/pull/3837)
- Fix: environment variables are passed verbatim to generators. (https://github.com/conan-io/conan/pull/3836)
- Fix: Implement dirty checks in the cache build folder, so failed builds are not packaged when there is a ``build_id()`` method. (https://github.com/conan-io/conan/pull/3834)
- Fix: `vcvars` is also called in the `CMake()` build helper when `clang` compiler is used, not only with `Visual Studio`compiler. (https://github.com/conan-io/conan/pull/3832)
- Fix: Ignore empty line when parsing output inside `SVN::excluded_files` function. (https://github.com/conan-io/conan/pull/3830)
- Fix: Bump version of tqdm requirement to ``>=4.28.0`` (https://github.com/conan-io/conan/pull/3823)
- Fix: Handling corrupted lock files in cache (https://github.com/conan-io/conan/pull/3816)
- Fix: Implement download concurrency checks, to allow simultaneous download of the same package (as header-only) while installing different configurations that depend on that package. (https://github.com/conan-io/conan/pull/3806)
- Fix: `vcvars` is also called in the `CMake()` build helper when using `Ninja` or `NMake` generators. (https://github.com/conan-io/conan/pull/3803)
- Fix: Fixed ``link_flags`` management in ``MSBuild`` build helper (https://github.com/conan-io/conan/pull/3791)
- Fix: Allow providing ``--profile`` argument (and settings, options, env, too) to ``conan export-pkg``, so it is able to correctly compute the binary package_id in case the information captured in the installed conaninfo.txt in previous ``conan install`` does not contain all information to reconstruct the graph. (https://github.com/conan-io/conan/pull/3768)
- Fix: Upgrade dependency of tqdm to >=4.27: solves issue with weakref assertion. (https://github.com/conan-io/conan/pull/3763)
- Fix: Use XML output to retrieve information from SVN command line if its client version is less than 1.8 (command ``--show-item`` is not available). (https://github.com/conan-io/conan/pull/3757)
- Fix: SVN v1.7 does not have ``-r`` argument in ``svn status``, so functionality ``SVN::is_pristine`` won't be available. (https://github.com/conan-io/conan/pull/3757)
- Fix: Add ``--askpass`` argument to ``sudo`` if it is not an interactive terminal (https://github.com/conan-io/conan/pull/3727)
- Fix: The remote used to download a binary package is now stored, so any update for the specific binary will come from the right remote. (https://github.com/conan-io/conan/pull/3726)
- Fix: Use XML output from SVN command line interface to compute if the repository is pristine. (https://github.com/conan-io/conan/pull/3653)
- Fix: Updated templates of the `conan new` command with the latest conan package tools changes. (https://github.com/conan-io/conan/pull/3651)
- Fix: Improve error messages if conanfile was not found (https://github.com/conan-io/conan/pull/3554)
- BugFix: Fix conflicting multiple local imports for python_requires (https://github.com/conan-io/conan/pull/3876)
- Bugfix: do not ask for the username if it is already given when login into a remote. (https://github.com/conan-io/conan/pull/3839)
- Bugfix:  `yum update` needs user's confirmation, which breaks system update in Centos non-interactive terminal. (https://github.com/conan-io/conan/pull/3747)
",47190624
525,False,False,2018-10-19T11:35:06Z,2018-10-19T11:51:26Z,"1.8.4 
===

- Feature: Increase debugging information when an error uploading a recipe with different timestamp occurs. (https://github.com/conan-io/conan/pull/3801)
- Fix: Changed `tqdm` dependency to a temporarily forked removing the ""man"" directory write permissions issue installing the `pip` package. (https://github.com/conan-io/conan/pull/3802)
- Fix: Removed `ndg-httpsclient` and `pyasn` dependencies from OSX requirements file because they shouldn't be necessary. (https://github.com/conan-io/conan/pull/3802)
",47190624
526,False,False,2018-10-17T09:31:30Z,2018-10-17T09:42:57Z,"1.8.3
===

- Feature: New attributes `default_user` and `default_channel` that can be declared in a conanfile to specify the `user` and `channel` for conan local methods when neither `CONAN_USERNAME` and `CONAN_CHANNEL` environment variables exist. (https://github.com/conan-io/conan/pull/3758)
- Bugfix: AST parsing of ``conanfile.py`` with shebang and encoding header lines was failing in python 2. This fix also allows non-ascii chars in ``conanfile.py`` if proper encoding is declared. (https://github.com/conan-io/conan/pull/3750)",47190624
527,False,False,2018-10-10T16:15:20Z,2018-10-10T16:23:10Z,"1.8.2
===

- Fix: Fix misleading warning message in ``tools.collect_libs()`` (https://github.com/conan-io/conan/pull/3718)
- BugFix: Fixed wrong naming of ``--sbindir`` and ``--libexecdir`` in AutoTools build helper. (https://github.com/conan-io/conan/pull/3715)
",47190624
528,False,False,2018-10-10T10:59:04Z,2018-10-10T11:08:47Z,"1.8.1
===

- Fix: Remove warnings related to python_requires(), both in linter and due to Python2. (https://github.com/conan-io/conan/pull/3706)
- Fix: Use *share* folder for ``DATAROOTDIR`` in CMake and AutoTools build helpers. (https://github.com/conan-io/conan/pull/3705)
- Fix: Disabled apiv2 until the new protocol becomes stable. (https://github.com/conan-io/conan/pull/3703)",47190624
529,False,False,2018-10-09T09:53:07Z,2018-10-09T10:04:22Z,"1.8.0
===

- Feature: Allow `conan config install` to install configuration from a folder and not only from compressed files. (https://github.com/conan-io/conan/pull/3680)
- Feature: The environment variable CONAN_DEFAULT_PROFILE_PATH allows the user to define the path (existing) to the default profile that will be used by Conan. (https://github.com/conan-io/conan/pull/3675)
- Feature: New ``conan inspect`` command that provides individual attributes of a recipe, like name, version, or options. Work with ``-r=remote`` repos too, and is able to produce ``--json`` output. (https://github.com/conan-io/conan/pull/3634)
- Feature: Validate parameter for ConanFileReference objects to avoid unnecessary checks (https://github.com/conan-io/conan/pull/3623)
- Feature: The environment variable `CONAN_DEFAULT_PROFILE_PATH` allows the user to define the path (absolute and existing) to the default profile that will be used by Conan. (https://github.com/conan-io/conan/pull/3615)
- Feature: Warning message printed if Conan cannot deduce an architecture of a GNU triplet. (https://github.com/conan-io/conan/pull/3603)
- Feature: The ``AutotoolsBuildEnvironment`` and ``CMake`` build helpers now adjust default for the GNU standard installation directories: ``bindir``, ``sbin``, ``libexec``, ``includedir``, ``oldincludedir``,  ``datarootdir`` (https://github.com/conan-io/conan/pull/3599)
- Feature: Added ``use_default_install_dirs`` in ``AutotoolsBuildEnvironment.configure()`` to opt-out from the defaulted installation dirs. (https://github.com/conan-io/conan/pull/3599)
- Feature: Clean repeated entries in the ``PATH`` when ``vcvars`` is run, mitigating the max size of the env var issues. (https://github.com/conan-io/conan/pull/3598)
- Feature: Allow ``vcvars`` to run if ``clang-cl`` compiler is detected. (https://github.com/conan-io/conan/pull/3574)
- Feature: Added python 2 deprecation message in the output of the conan commands. (https://github.com/conan-io/conan/pull/3567)
- Feature: The ``conan install`` command now prints information about the applied configuration. (https://github.com/conan-io/conan/pull/3561)
- Feature: New naming convention for conanfile reserved/public/private attributes. (https://github.com/conan-io/conan/pull/3560)
- Feature: Experimental support for Conan plugins. (https://github.com/conan-io/conan/pull/3555)
- Feature: Progress bars for files unzipping. (https://github.com/conan-io/conan/pull/3545)
- Feature: Improved graph propagation performance from ``O(n2)`` to ``O(n)``. (https://github.com/conan-io/conan/pull/3528)
- Feature: Added ``ConanInvalidConfiguration`` as the standard way to indicate that a specific configuration is not valid for the current package. e.g library not compatible with Windows. (https://github.com/conan-io/conan/pull/3517)
- Feature: Added ``libtool()`` function to the `tools.XCRun()` tool to locate the system ``libtool``. (https://github.com/conan-io/conan/pull/3515)
- Feature: The tool ``tools.collect_libs()`` now search into each folder declared in ``self.cpp_info.libdirs``. (https://github.com/conan-io/conan/pull/3503)
- Feature:  Added definition ``CMAKE_OSX_DEPLOYMENT_TARGET`` to the ``CMake`` build helper following the ``os.version`` setting for ``Macos``. (https://github.com/conan-io/conan/pull/3486)
- Feature: The upload of files now uses the `conanmanifest.txt` file to know if a file has to be uploaded or not. It avoid associated issues with the metainformation of the files permissions contained in the `tgz` files. (https://github.com/conan-io/conan/pull/3480)
- Feature: The `default_options` in a `conanfile.py` can be specified now as a dictionary. (https://github.com/conan-io/conan/pull/3477)
- Feature: The command `conan config install` now support relative paths. (https://github.com/conan-io/conan/pull/3468)
- Feature: Added a definition `CONAN_IN_LOCAL_CACHE` to the `CMake()` build helper. (https://github.com/conan-io/conan/pull/3450)
- Feature: Improved `AptTool` at `SystemPackageTool` adding a function `add_repository` to add new apt repositories. (https://github.com/conan-io/conan/pull/3445)
- Feature: Experimental and initial support for the REST apiv2 that will allow transfers in one step and revisions in the future. (https://github.com/conan-io/conan/pull/3442)
- Feature: Improve the output of a `conan install` command printing dependencies when a binary is not found. (https://github.com/conan-io/conan/pull/3438)
- Feature: New `b2` generator. It replaces the old incomplete `boost_build` generator that is now deprecated. (https://github.com/conan-io/conan/pull/3416)
- Feature: New ``tool.replace_path_in_file`` to replace Windows paths in a file doing case-insensitive comparisson and indisctinct path separators comparisson: ""/"" == ""\\"" (https://github.com/conan-io/conan/pull/3399)
- Feature: **[Experimental]** Add SCM support for SVN. (https://github.com/conan-io/conan/pull/3192)
- Fix: ``None`` option value was not being propagated upstream in the dependency graph (https://github.com/conan-io/conan/pull/3684)
- Fix: Apply ``system_requirements()`` always on install, in case the folder was removed. (https://github.com/conan-io/conan/pull/3647)
- Fix: Included ``bottle`` package in the development requirements (https://github.com/conan-io/conan/pull/3646)
- Fix: More complete architecture list in the detection of the gnu triplet and the detection of the build machine architecture. (https://github.com/conan-io/conan/pull/3581)
- Fix: Avoid downloading the manifest of the recipe twice for uploads. Making this download quiet, without output. (https://github.com/conan-io/conan/pull/3552)
- Fix: Fixed ``Git`` scm class avoiding to replace any character in the ``get_branch()`` function. (https://github.com/conan-io/conan/pull/3496)
- Fix: Removed login username syntax checks that were no longer necessary. (https://github.com/conan-io/conan/pull/3464)
- Fix: Removed bad duplicated messages about dependency overriding when using conan alias. (https://github.com/conan-io/conan/pull/3456)
- Fix: Improve `conan info` help message. (https://github.com/conan-io/conan/pull/3415)
- Fix: The generator files are only written in disk if the content of the generated file changes. (https://github.com/conan-io/conan/pull/3412)
- Fix: Improved error message when parsing a bad conanfile reference. (https://github.com/conan-io/conan/pull/3410)
- Fix:  Paths are replaced correctly on Windows when using ``CMake().patch_config_files() ``. (https://github.com/conan-io/conan/pull/3399)
- Fix: Fixed `AptTool` at `SystemPackageTool` to improve the detection of an installed package. (https://github.com/conan-io/conan/pull/3033)
- BugFix: Fixes ``python_requires`` overwritten when using more than one of them in a recipe (https://github.com/conan-io/conan/pull/3628)
- BugFix: Fix output overlap of decompress progress and plugins (https://github.com/conan-io/conan/pull/3622)
- Bugfix: Check if the ``system_requirements()`` have to be executed even when the package is retrieved from the local cache. (https://github.com/conan-io/conan/pull/3616)
- Bugfix: All API calls are now logged into the ``CONAN_TRACE_FILE`` log file. (https://github.com/conan-io/conan/pull/3613)
- Bugfix: Renamed ``os`` (reserved symbol) parameter to ``os_`` in the ``get_gnu_triplet`` tool. (https://github.com/conan-io/conan/pull/3603)
- Bugfix: ``conan get`` command now works correctly with enabled ``short paths``. (https://github.com/conan-io/conan/pull/3600)
- Bugfix: Fixed ``scm`` replacement of the variable when exporting a conanfile. (https://github.com/conan-io/conan/pull/3576)
- Bugfix: Apiv2 was retrying the downloads even when a 404 error was raised. (https://github.com/conan-io/conan/pull/3562)
- Bugfix: Fixed ``export_sources`` excluded patterns containing symlinks. (https://github.com/conan-io/conan/pull/3537)
- Bugfix: Fixed bug with transitive private dependencies. (https://github.com/conan-io/conan/pull/3525)
- Bugfix: ``get_cased_path`` crashed when the path didn't exist. (https://github.com/conan-io/conan/pull/3516)
- BugFix: Fixed failures when Conan walk directories with files containing not ASCCI characters in the file name. (https://github.com/conan-io/conan/pull/3505)
- Bugfix: The `scm` feature now looks for the repo root even when the `conanfile.py` is in a subfolder. (https://github.com/conan-io/conan/pull/3479)
- Bugfix: Fixed `OSInfo.bash_path()` when there is no `windows_subsystem`. (https://github.com/conan-io/conan/pull/3455)
- Bugfix: AutotoolsBuildEnvironment was not defaulting the output library directory causing broken consumption of packages when rebuilding from sources in different Linux distros using lib64 default. (https://github.com/conan-io/conan/pull/3388)
",47190624
530,False,False,2018-09-18T15:08:57Z,2018-09-18T15:22:15Z,"- Bugfix: Fixed a bug in apiv2.
- Fix: Disabled apiv2 by default until it gets more stability",47190624
531,False,False,2018-09-06T15:53:57Z,2018-09-06T16:03:36Z,"1.7.3
===

- Bugfix: Uncontrolled exception was raised while printing the output of an error downloading a file.
- Bugfix: Fixed ``*:option`` pattern for conanfile consumers.",47190624
532,False,False,2018-09-04T15:06:37Z,2018-09-04T15:19:34Z,"- Bugfix: Reverted default options initialization to empty string with ""varname="".
- Bugfix: Fixed `conan build` command with `--test` and `--install` arguments.",47190624
533,False,False,2018-08-31T08:08:51Z,2018-08-31T08:19:38Z,"- Fix: Trailing sentences in Conan help command.
- Fix: Removed hardcoded ``-c init.templateDir=`` argument in ``git clone`` for ``conan config install``, in favor of a new ``--args`` parameter that allows custom arguments.
- Fix: SCM can now handle nested subfolders.
- BugFix: Fix ``conan export-pkg`` unnecessarily checking remotes.
",47190624
534,False,False,2018-08-29T07:50:05Z,2018-08-29T08:13:50Z,"- Feature: Support for C++20 in CMake > 3.12.
- Feature: Included support for Python 3.7 in all platforms.
- Feature: **[Experimental]** ``python_requires`` function allows to require Conan packages with python code even to extend the
  ``ConanFile`` class.
- Feature: ``CMake`` method ``patch_config_paths`` replaces absolute paths to Conan package's dependencies as well as Conan package itself.
- Feature: ``MSBuild`` and ``VisualStudioBuildEnvironment`` build helpers adjust the ``/MP`` flag to build code in parallel using multiple
  cores.
- Feature: Added ``print_errors`` parameter to ``tools.PkgConfig()`` helper.
- Feature: Added :command:`--query` flag to :command:`conan upload`.
- Feature: ``virtualenv``/``virtualbuildenv``/``virtualrunenv`` generators now create bash scripts in Windows for its use in subsystems.
- Feature: Improved version ranges resolution speed trough caching of remote requests.
- Feature: Improved result of ``tools.vcvars_dict(only_diff=True)`` including a list return type that can be used with
  ``tools.environment_append()``.
- Fix: ``AutoToolsBuildEnvironment`` build helper now keeps the ``PKG_CONFIG_PATHS`` already set in the environment previously.
- Fix: The SCM feature keeps the ``.git`` folder during the copy of a local directory to the local cache.
- Fix: The SCM feature now exclude correctly the ignored folders by git during the copy of a local directory to the local cache.
- Fix: Conan messages correctly spell ""overridden"" now.
- Fix: ``MSBuild`` build helper arguments using quotes.
- Fix: ``vcvars_command`` and ``MSBuild`` build helper use the ``amd64_x86`` when Visual Studio > 12 and cross building for x86.
- Fix: Disabled ``-c init.TemplateDir`` in :command:`conan config install` from a git repository.
- Fix: Clang compiler check in ``cmake`` generator.
- Fix: Detection of zypper package tool on latest versions of openSUSE.
- Fix: Improved help output of some commands.
- BugFix: ``qmake`` generator hyphen.
- Bugfix: Git submodules being initialized from repo *HEAD* prior to checking out the referenced revision when using ``scm`` attribute.
- BugFix: Declaration ``default_options`` without value, e.g. ``default_options = ""config=""``. Now it will throw an exception.
- BugFix: Deactivate script in ``virtualenv`` generator causes PS1 to go unset.
- BugFix: Apply general scope options to a consumer ConanFile first.
- BugFix: Fixed detection of valid repository for git in SCM feature.
",47190624
535,False,False,2018-07-27T08:06:27Z,2018-07-27T08:38:03Z,"1.6.1 
===

- Bugfix: ``conan info --build-order`` was showing duplicated nodes for build-requires and private dependencies.
- Fix: Fixed failure with the `alias` packages when the name of the package (excluded the version) was different from the aliased package.  Now it is limited in the `conan alias` command.",47190624
536,False,False,2018-07-19T14:41:45Z,2018-07-19T15:55:08Z,"1.6.0
-----

- Feature: Added new ``self.run(..., run_environment=True)`` argument, that applies automatically ``PATH``, ``LD_LIBRARY_PATH`` and
  ``DYLD_LIBRARY_PATH`` environment variable, from the dependencies, to the execution of the current command.
- Feature: Added new ``tools.run_environment()`` as a shortcut of using ``tools.environment_append`` and ``RunEnvironment()`` together.
- Feature: Added new ``self.run(..., ignore_errors=True)`` argument, that inhibits launching an exception if the commands fails, user can
  capture the return code.
- Feature: Improved ``tools.Git`` to allow capturing the current branch and enabling to export a package with version based on the branch and commit.
- Feature: The ``json`` generator now outputs the settings and options
- Feature: `conan remote list --raw` prints remote info in a format valid for *remotes.txt*, so it can be used for ``conan config install``
- Feature: Visual Studio generator creates *conanbuildinfo.props* file using ``$(USERPROFILE)`` macro.
- Feature: Added ``filename`` parameter to ``tools.get()`` in case it cannot be deduced from URL.
- Feature: Propagated ``keep_permissions`` and ``pattern`` parameters from ``tools.get()`` to ``tools.unzip()``.
- Feature: Added XZ extensions to ``unzip()``. It will only work in Python 3 with lzma support enabled, producing an error otherwise.
- Feature: Added ``FRAMEWORK_SEARCH_PATHS`` var to the XCode generator to support packaging Apple Frameworks. 
- Feature: Added `conan build --test` and ``should_configure`` attribute to control test stage. 
- Feature: New tools to convert between files with LF and CRLF line endings: `tools_unix2dos` and `tools_dos2unix`.
- Feature: Added `conan config install [url] --type=git` to force cloning git repo for ``http://...`` git urls.
- Feature: Improved output information when a package is missing in a remote, showing who is the package requiring the missing one.
- Feature: Improved the management of an upload interruption, avoiding uploads of incomplete tarballs.
- Feature: Added new ``LLVM`` toolsets to the base ``settings.yml`` (Visual Studio).
- Feature: Created plugin for pylint with the previous Conan checks (run in the export), enabling to use the plugin in IDEs and command line to check the correctness of the recipes.
- Feature: Improved ``deb`` installer to guarantee that runs correctly in Debian 9 and other distros.
- Fix: Fixed `conan search -q` and `conan remove -q` to not return packages that don't have the setting specified in the query.
- Fix: Fixed ``SystemPackageTool`` when calling to update with ``sudo`` not enabled  and ``mode=verify`.
- Fix: Removed ``pyinstaller`` shared libraries from the linker environment for any conan subprocess.
- BugFix: The ``YumTool`` now calls ``yum update`` instead of ``yum check-update``.
- Bugfix: Solved bug using ``--manifest`` parameter with `conan create` causing the deletion of information of the dependency graph.
- Bugfix: Solved bug in the ``build`` method of the ``Version`` model, not showing correctly the version build field.
- Bugfix: Fixed Conan crash with a dependency tree containing transitive private nodes.

",47190624
537,False,False,2018-07-05T06:12:25Z,2018-07-05T06:26:10Z,"1.5.2 
====

- Bugfix: Fixed bug with pre-1.0 packages with sources. 
- Bugfix: Fixed regression in private requirements.",47190624
538,False,False,2018-06-29T16:02:42Z,2018-06-29T16:15:57Z,"1.5.1
===

- Bugfix: Sources in the local cache weren't removed when using `scm` pointing to the local source directory, causing changes in local sources not applied to the `conan create` process.
- Bugfix: Fixed bug causing duplication of build requires in the dependency graph.",47190624
539,False,False,2018-06-28T10:39:10Z,2018-06-28T10:48:28Z,"1.5.0 
-----

- Feature: ``conan search <pkg-ref> -r=all`` now is able to search for binaries too in all remotes
- Feature: Dependency graph improvements: ``build_requires`` are represented in the graph (visible in ``conan info``, also in the HTML graph). ``conan install`` and ``conan info`` commands shows extended information of the binaries status (represented in colors in HTML graph). The dependencies declaration order in recipes is respected (as long as it doesn't break the dependency graph order).
- Feature: improved remote management, it is possible to get binaries from different remotes.
- Feature: ``conan user`` command is now able to show authenticated users.
- Feature: New ``pattern`` argument to ``tools.unzip()`` and ``tools.untargz`` functions, that allow efficient extraction of certain files only.
- Feature : Added Manjaro support for ``SystemPackageTools``.
- Feature: Added ``Macos`` ``version`` subsettings in the default ``settings.yml`` file, to account for the ""min OSX version"" configuration.
- Feature: SCM helper argument to recursively clone submodules
- Feature: SCM helper management of subfolder, allows using ``exports`` and ``exports_sources``, manage symlinks, and do not copy files that are "".gitignored"". Also, works better in the local development flow.
- Feature: Modifies user agent header to output the Conan client version and the Python version. Example: Conan/1.5.0 (Python 2.7.1)
- Fix: The ``CMake`` helper now doesn't require a compiler input to deduce the default generator.
- Fix: ``conan search <pattern>`` now works consistently in local cache and remotes.
- Fix: proxy related environment variables are removed if ``conan.conf`` declares proxy configuration.
- Fix: Fixed the parsing of invalid JSON when Microsoft ``vswhere`` tool outputs invalid non utf-8 text.
- Fix: Applying ``winsdk`` and ``vcvars_ver`` to MSBuild and vcvars_command for VS 14 too.
- Fix: Workspaces now support ``build_requires``
- Fix: ``CMake`` helper now defines by default CMAKE_EXPORT_NO_PACKAGE_REGISTRY
- Fix: settings constraints declared in recipes now don't error for single strings (instead of a list with a string element)
- Fix: ``cmake_minimum_required()`` is now before ``project()`` in templates and examples.
- Fix: CONAN_SYSREQUIRES_MODE=Disabled now doesn't try to udpate the system packages registry.
- Bugfix: Fixed SCM origin path of windows folder (with backslashes)
- Bugfix: Fixed SCM dictionary order when doing replacement.
- Bugfix: Fixed auto-detection of apple-clang 10.0
- Bugfix: Fixed bug when doing a ``conan search`` without registry file (just before installation)",47190624
540,False,False,2018-06-22T09:41:15Z,2018-06-22T09:54:22Z,- Bugfix:  The package_id recipe method was being called twice causing issues with `info` objects being populated with wrong information.,47190624
541,False,False,2018-06-11T15:21:46Z,2018-06-11T15:43:30Z,"1.4.4
-----

- Bugfix: Fix link order with private requirements.
- Bugfix: Removed duplicate `-std` flag in CMake < 3 or when the standard is not yet supported by `CMAKE_CXX_STANDARD`.
- Bugfix: Check `scm` attribute to avoid breaking recipes with already defined one.
- Feature: Conan workspaces.",47190624
542,False,False,2018-06-06T08:45:38Z,2018-06-06T08:57:20Z,"- Bugfix: Added system libraries to the `cmake_find_package` generator.
- Fix: Added SIGTERM signal handler to quit safely.
- Bugfix: Fixed miss-detection of `gcc 1` when no gcc was on a Linux machine.
",47190624
543,False,False,2018-06-04T10:45:07Z,2018-06-04T10:58:57Z,"1.4.2
===

Bugfix: Fixed multi-config packages #2981
Bugfix: Fixed `cppstd` management with CMake and 20 standard.",47190624
544,False,False,2018-05-31T15:14:40Z,2018-05-31T15:24:59Z,"1.4.1 
----

- Bugfix: Solved issue with symlinks making recipes to fail with `self.copy`.
- Bugfix: Fixed c++20 standard usage with modern compilers and the creation of the ``settings.yml`` containing the settings values.
- Bugfix: Fixed error with cased directory names in Windows.
- BugFix: Modified confusing warning message in the SCM tool when the remote couldn't be detected.",47190624
545,False,False,2018-05-30T09:31:34Z,2018-05-30T09:45:23Z,"1.4.0
-----
- Feature: Added scm conanfile attribute, to easily clone/checkout from remote repositories and to capture the remote and commit in the exported recipe when the recipe and the sources lives in the same repository. 
- Feature: Added ``cmake_paths`` generator to create a file setting ``CMAKE_MODULE_PATH`` and ``CMAKE_PREFIX_PATH`` to the packages folders.
  It can be used as a CMake toolchain to perform a transparent CMake usage, without include any line of cmake code related to Conan.
- Feature: Added ``cmake_find_package`` generator that generates one ``FindXXX.cmake`` file per each dependency both with classic CMake approach and modern
  using transitive CMake targets. Read more :ref:`here <cmake_find_package_generator>`.
- Feature: Added :command:`conan search --json` json output to the command.
- Feature: CMake build helper now sets ``PKG_CONFIG_PATH`` automatically and receives new parameter ``pkg_config_paths`` to override it.
- Feature: CMake build helper doesn't require to specify ""arch"" nor ""compiler"" anymore when the generator is ""Unix Makefiles"".
- Feature: Introduced default settings for GCC 8, Clang 7.
- Feature: Introduced support for c++ language standard c++20.
- Feature: Auto-managed ``fPIC`` option in AutoTools build helper.
- Feature: ``tools.vcvars_command()`` and ``tools.vcvars_dict()`` now take ``vcvars_ver`` and ``winsdk_version`` as parameters.
- Feature: ``tools.vcvars_dict()`` gets only the env vars set by vcvars with new parameter ``only_diff=True``.
- Feature: Generator ``virtualbuildenv`` now sets Visual Studio env vars via ``tool.vcvars_dict()``.
- Fix: Message ""Package '1' created"" in package commands with ``short_paths=True`` now shows package ID.
- Fix: ``tools.vcvars_dict()`` failing to create dictionary due to newlines in vcvars command output.
- Bugfix: ``tools.which()`` returning directories instead of only files.
- Bugfix: Inconsistent local cache when developing a recipe with ``short_paths=True``.
- Bugfix: Fixed reusing MSBuild() helper object for multi-configuration packages.
- Bugfix: Fixed authentication using env vars such as ``CONAN_PASSWORD`` when ``CONAN_NON_INTERACTIVE=True``.
- Bugfix: Fixed Android api_level was not used to adjust CMAKE_SYSTEM_VERSION.
- Bugfix: Fixed MSBuild() build helper creating empty XML node for runtime when the setting was not declared.
- Bugfix: Fixed ``default_options`` not supporting ``=`` in value when specified as tuple.
- Bugfix: AutoToolsBuildEnvironment build helper's ``pkg_config_paths`` parameter now sets paths relative to the install folder or absolute
  ones if provided.
",47190624
546,False,False,2018-05-10T08:30:36Z,2018-05-10T08:59:01Z,"1.3.3 
===

- Bugfix: Fixed encoding issues writing to files and calculating md5 sums.",47190624
547,False,False,2018-05-07T19:00:27Z,2018-05-07T19:10:18Z,"1.3.2
-----

- Bugfix: Fixed md5 computation of conan .tgz files for the recipe, exported sources and packages due to file ordering and flags.
- Bugfix: Fixed broken ``run_in_windows_bash`` due to the wrong argument.
- Bugfix: Fixed ``VisualStudioBuildEnvironment`` when toolset was not defined.
- Bugfix: Fixed ``conan download -p=wrong_id`` command
- Fix: Added apple-clang 9.1",47190624
548,False,False,2018-05-03T15:23:58Z,2018-05-03T15:41:37Z,"1.3.1
===

- Bugfix: Fixed regression with `AutoToolsBuildEnvironment` build helper that raised exception with not supported architectures during the calculation of the GNU triplet.
- Bugfix: Fixed `pkg_config` generator, previously crashing when there was no library directories in the requirements.
- Bugfix: Fixed `conanfile.run()` with `win_bash=True`  quoting the paths correctly.
- Bugfix: Recovered parameter ""append"" to the `tools.save` function.
- Bugfix: Added support (documented but missing) to delete options in `package_id()` method using `del self.info.options.<option>`",47190624
549,False,False,2018-04-30T14:10:32Z,2018-04-30T14:29:01Z,"
1.3.0
-----

- Feature: Added new build types to default ``settings.yml``: **RelWithDebInfo** and **MinSizeRel**.
  Compiler flags will be automatically defined in build helpers that do not understand them (``MSBuild``, ``AutotoolsBuildEnvironment``)
- Feature: Improved package integrity. Interrupted downloads or builds shouldn't leave corrupted packages.
- Feature: Added ``conan upload --json`` json output to the command.
- Feature: new `conan remove --locks` to clear cache locks. Useful when killing conan.
- Feature: New **CircleCI** template scripts can be generated with the `conan new` command.
- Feature: The CMake() build helper manages the fPIC flag automatically based on the options ``fPIC`` and ``shared`` when present.
- Feature: Allowing requiring color output with ``CONAN_COLOR_DISPLAY=1`` environment variable.
  If ``CONAN_COLOR_DISPLAY`` is not set rely on tty detection for colored output
- Feature: New `conan remote rename` and `conan add --force` commands to handle remotes.
- Feature: Added parameter ``use_env`` to the ``MSBuild().build()`` build helper method to control the ``/p:UseEnv`` msbuild argument.
- Feature: Timeout for downloading files from remotes is now configurable (defaulted to 60 seconds)
- Fix: Use International Units for download/upload transfer sizes (Mb, Kb, etc).
- Fix: Removed duplicated paths in ``cmake_multi`` generated files.
- Fix: Removed false positive linter warning for local imports.
- Fix: Improved command line help for positional arguments
- Fix `-ks` alias for `--keep-source` argument in `conan create` and `conan export`.
- Fix: removed confusing warnings when ``self.copy()`` doesn't copy files in the ``package()`` method.
- Fix: ``None`` is now a possible value for settings with nested subsettings in ``settings.yml``.
- Fix: if ``vcvars_command`` is called and Visual is not found, raise an error instead of warning.
- Bugfix: ``self.env_info.paths`` and ``self.env_info.PATHS`` both map now to PATHS env-var.
- Bugfix: Local flow was not correctly recovering state for option values.
- Bugfix: Windows NTFS permissions failed in case USERDOMAIN env-var was not defined.
- Bugfix: Fixed generator ``pkg_config`` when there are absolute paths (not use prefix)
- Bugfix: Fixed parsing of settings values with ``""=""`` character in conaninfo.txt files.
- Bugfix: Fixed misdetection of MSYS environments (generation of default profile)
- Bugfix: Fixed string scaping in CMake files for preprocessor definitions.
- Bugfix: ``upload --no-overwrite`` failed when the remote package didn't exist.",47190624
550,False,False,2018-04-10T14:22:53Z,2018-04-10T14:32:08Z,Bugfix: Fixed bug introducing in the previous bug fix of the scons generator.,47190624
551,False,False,2018-04-10T09:31:14Z,2018-04-10T09:42:47Z,"1.2.2
===

- Bugfix: Removed invalid version field from scons generator.",47190624
552,False,False,2018-04-03T09:02:07Z,2018-04-03T09:13:56Z,"1.2.1
===

- Feature: Support for `apple-clang 9.1`
- Bugfix: `compiler_args` generator manage correctly the flag for the `cppstd` setting.
- Bugfix: Replaced exception with a warning message (recommending the `six` module) when using `StringIO` class from the `io` module.",47190624
553,False,False,2018-03-28T10:23:39Z,2018-03-28T10:46:35Z,"1.2.0
-----

- Feature: The command `conan build` has new ``--configure, --build, --install`` arguments to control the different stages of the
  ``build()`` method.
- Feature: The command `conan export-pkg` now has a `--package-folder` that can be used to export an exact copy of the
  provided folder, irrespective of the ``package()`` method. It assumes the package has been locally created with a previous
  `conan package` or with a `conan build` using a ``cmake.install()`` or equivalent feature.
- Feature: New ``json`` generator, generates a json file with machine readable information from dependencies.
- Feature: Improved proxies configuration with ``no_proxy_match`` configuration variable.
- Feature: New `conan upload` parameter `--no-overwrite` to forbid the overwriting of recipe/packages if they have
  changed.
- Feature: Exports are now copied to ``source_folder`` when doing `conan source`.
- Feature: ``tools.vcvars()`` context manager has no effect if platform is different from Windows.
- Feature: `conan download` has new optional argument `--recipe` to download only the recipe of a package.
- Feature: Added ``CONAN_NON_INTERACTIVE`` environment variable to disable interactive prompts.
- Feature: Improved ``MSbuild()`` build helper using ``vcvars()`` and generating property file to adjust the runtime automatically. New method ``get_command()`` with the call to ``msbuild`` tool. Deprecates ``tools.build_sln_command()`` and ``tools.msvc_build_command()``.
- Feature: Support for clang 6.0 correctly managing cppstd flags.
- Feature: Added configuration to specify a client certificate to connect to SSL server.
- Feature: Improved ``ycm`` generator to show json dependencies.
- Feature: Experimental ``--json`` parameter for `conan install` and `conan create` to generate a JSON file with install information.
- Fix: `conan install --build` does not absorb more than one parameter.
- Fix: Made conanfile templates generated with `conan new` PEP8 compliant.
- Fix: `conan search` output improved when there are no packages for the given reference.
- Fix: Made `conan download` also retrieve sources.
- Fix: Pylint now runs as an external process.
- Fix: Made ``self.user`` and ``self.channel`` available in test_package.
- Fix: Made files writable after a ``deploy()`` or ``imports()`` when ``CONAN_READ_ONLY_CACHE```/``general.read_only_cache``
  environment/config variable is ``True``.
- Fix: Linter showing warnings with ``cpp_info`` object in ``deploy()`` method.
- Fix: Disabled linter for Conan pyinstaller as it was not able to find the python modules.
- Fix: `conan user -r=remote_name` showed all users for all remotes, not the one given.
- BugFix: Python reuse code failing to import module in ``package_info()``.
- BugFix: Added escapes for backslashes in ``cmake`` generator.
- BugFix: `conan config install` now raises error if `git clone` fails.
- BugFix: Alias resolution not working in diamond shaped dependency trees.
- BugFix: Fixed builds with Cygwin/MSYS2 failing in Windows with `self.short_paths=True` and NTFS file systems due to ACL permissions.
- BugFix: Failed to adjust architecture when running Conan platform detection in ARM devices.
- BugFix: Output to StringIO failing in Python 2.
- BugFix: `conan profile update` not working to update ``[env]`` section.
- BugFix: `conan search` not creating default remotes when running it as the very first command after Conan installation.
- BugFix: Package folder was not cleaned after the installation and download of a package had failed.",47190624
554,False,False,2018-03-05T16:26:39Z,2018-03-05T16:46:43Z,"1.1.1
===

- Feature: `build_sln_command` and `msvc_build_command` receive a new optional parameter `platforms` to match the definition of the `sln` Visual Studio project architecture. (Typically Win32 vs x86 problem).
- Bufix:  Flags for Visual Studio command (cl.exe) using ""-"" instead of ""/"" to avoid problems in builds using AutoTools scripts with Visual Studio compiler.
- Bugfix: Visual Studio runtime flags adjusted correctly in `AutoToolsBuildEnvironment` build helper
- Bugfix: `AutoToolsBuildEnvironment` build helper now adjust the correct build flag, not using eabi suffix, for architecture x86.

 ",47190624
555,False,False,2018-02-27T11:59:16Z,2018-02-27T12:14:03Z,"1.1.0
-----

- Feature: New ``$ conan create --keep-build`` option that allows re-packaging from conan local cache, without re-building.
- Feature: ``$ conan search <pattern> -r=all`` now searches in all defined remotes.
- Feature: Added setting ``cppstd`` to manage the C++ standard. Also improved build helpers to adjust the standard automatically when the user activates the setting.``AutoToolsBuildEnvironment``, ``CMake``, ``MSBuild`` and ``VisualStudioBuildEnvironment``
- Feature: New ``compiler_args`` generator, for directly calling the compiler from command line, for multiple compilers: VS, gcc, clang.
- Feature: Defined ``sysrequires_mode`` variable (``CONAN_SYSREQUIRES_MODE`` env-var) with values ``enabled, verify, disabled`` to control the installation of system dependencies via ``SystemPackageTool`` typically used in [system_requirements()](http://docs.conan.io/en/latest/reference/conanfile/methods.html#system-requirements) method.
- Feature: automatically apply ``pythonpath`` environment variable for dependencies containing python code to be reused to recipe ``source()``, ``build()``, ``package()`` methods.
- Feature: ``CMake`` new ``patch_config_paths()`` methods that will replace absolute paths to conan package path variables, so cmake find scripts are relocatable.
- Feature: new ``--test-build-folder`` command line argument to define the location of the *test_package* build folder, and new conan.conf ``temp_test_folder`` and environment variable ``CONAN_TEMP_TEST_FOLDER``, that if set to True will automatically clean the test_package build folder after running.
- Feature: Conan manages relative urls for upload/download to allow access the server from different configured networks or in domain subdirectories.
- Feature: Added ``CONAN_SKIP_VS_PROJECTS_UPGRADE`` environment variable to skip the upgrade of Visual Studio project when using [build_sln_commmand](http://docs.conan.io/en/latest/reference/tools.html#tools-build-sln-command), the [msvc_build_command](http://docs.conan.io/en/latest/reference/tools.html#tools-msvc-build-command) and the [MSBuild](http://docs.conan.io/en/latest/reference/build_helpers/visual_studio.html#msbuild) build helper.
- Feature: Improved detection of Visual Studio installations, possible to prioritize between multiple installed Visual tools with the ``CONAN_VS_INSTALLATION_PREFERENCE`` env-var and ``vs_installation_preference`` conan.conf variable.
- Feature: Added ``keep_path`` parameter to ``self.copy()`` within the ``imports()`` method.
- Feature: Added ``[build_requires]`` section to *conanfile.txt*.
- Feature: Added new ``$ conan help <command>`` command, as an alternative to ``--help``.
- Feature: Added ``target`` parameter to ``AutoToolsBuildEnvironment.make`` method, allowing to select build target on running make
- Feature: The ``CONAN_MAKE_PROGRAM`` environment variable now it is used by the ``CMake()`` build helper to set a custom make program.
- Feature: Added ``--verify-ssl`` optional parameter to ``$ conan config install`` to allow self-signed SSL certificates in download.
- Feature: ``tools.get_env()`` helper method to automatically convert environment variables to python types.
- Fix: Added a visible warning about ``libcxx`` compatibility and the detected one for the default profile.
- Fix: Wrong detection of compiler in OSX for gcc frontend to clang.
- Fix: Disabled *conanbuildinfo.cmake* compiler checks for unknown compilers.
- Fix: ``visual_studio`` generator added missing *ResourceCompile* information.
- Fix: Don't output password from URL for ``conan config install`` command.
- Fix: Signals exit with error code instead of 0.
- Fix: Added package versions to generated SCons file.
- Fix: Error message when package was not found in remotes has been improved.
- Fix: ``conan profile`` help message.
- Fix: Use gcc architecture flags -m32, -m64 for MinGW as well.
- Fix: ``CMake`` helper do not require settins if ``CONAN_CMAKE_GENERATOR`` is defined.
- Fix: improved output of package remote origins.
- Fix: Profiles files use same structure as ``conan profile show`` command.
- Fix: *conanpath.bat* file is removed after conan Windows installer uninstall.
- Fix: Do not add GCC-style flags -m32, -m64, -g, -s to MSVC when using ``AutoToolsBuildEnvironment``
- Fix: ""Can't find a binary package"" message now includes the Package ID.
- Fix: added clang 5.0 and gcc 7.3 to default *settings.yml*.
- Bugfix:  ``build_id()`` logic does not apply unless the ``build_id`` is effectively changed.
- Bugfix: ``self.install_folder`` was not correctly set in all necessary cases.
- Bugfix: ``-update`` option does not ignore local packages for version-ranges.
- Bugfix: Set ``self.develop=True`` for ``export-pkg`` command.
- Bugfix: Server HTTP responses were incorrectly captured, not showing errors for some server errors.
- Bugfix: Fixed ``config`` section update for sequential calls over the python API.
- Bugfix: Fixed wrong ``self.develop`` set to ``False`` for ``conan create`` with ``test_package``.
- Deprecation: Removed **conan-transit** from default remotes registry.",47190624
556,False,False,2018-01-30T15:00:23Z,2018-01-30T15:09:55Z,"1.0.4
-----

- Bugfix: Fixed default profile defined in *conan.conf* that includes another profile
- Bugfix: added missing management of ``sysroot`` in *conanbuildinfo.txt* affecting ``conan build`` and ``test_package``
- Bugfix: Fixed warning in ``conan source`` because of incorrect management of settings.
- Bugfix: Fixed priority order of environment variables defined in included profiles
- Bugfix: NMake error for parallel builds from the ``CMake`` build helper have been fixed
- Bugfix: Fixed options pattern not applied to root node (``-o *:shared=True`` not working for consuming package)
- Bugfix: Fixed shadowed options by package name (``-o *:shared=True -o Pkg:other=False`` was not applying ``shared`` value to Pkg)
- Fix: Using ``filter_known_paths=False`` as default to ``vcvars_dict()`` helper.
- Fix: Fixed wrong package name for output messages regarding build-requires
- Fix: Added correct metadata to conan.exe when generated via pyinstaller
",47190624
557,False,False,2018-01-22T17:17:57Z,2018-01-22T17:38:05Z,"1.0.3
-----
- Bugfix: Correct load of stored settings in conaninfo.txt (for ``conan build``) when ``configure()`` remove some setting
- Bugfix: Correct use of unix paths in Windows subsystems (msys, cygwing) when needed
- Fix: fixed wrong message for ``conan alias --help``
- Fix: Normalized all arguments to ``--xxx-folder`` in command line help ",47190624
558,False,False,2018-01-16T14:13:50Z,2018-01-16T14:25:24Z,"1.0.2
-----

- Fix: Adding a warning message for simultaneous use of ``os`` and ``os_build`` settings.
- Fix: Do not raise error from *conanbuildinfo.cmake* for Intel MSVC toolsets.
- Fix: Added more architectures to default *settings.yml* ``arch_build`` setting.
- Fix: using ``--xxx-folder`` in command line help messages.
- Bugfix: using quotes for Windows bash path with spaces.
- Bugfix: tools.vcvars/vcvars_dict including windows and windows/system32 directories in the path.",47190624
559,False,False,2018-01-12T18:31:20Z,2018-01-12T18:41:32Z,"1.0.1 
-----
- Fix: ``conan new`` does not generate cross-building (like ``os_build``) settings by default. They make only sense for dev-tools used as ``build_requires``
- Fix: ``conaninfo.txt`` file does not dump settings with None values


:warning: Important
===============

Please don’t use cross-build settings `os_build`, `arch_build` for standard packages and libraries. There were some errors in the docs, using them for all packages. They are only useful for packages that are used via build_requires, like cmake_installer or mingw_installer.",47190624
560,False,False,2018-01-10T12:23:10Z,2018-01-10T12:49:44Z,"1.0.0
-----

- Bugfix: Fixed bug from ``remove_from_path`` due to Windows path backslash
- Bugfix: Compiler detection in *conanbuildinfo.cmake* for Visual Studio using toolchains like LLVM (Clang)
- Bugfix: Added quotes to bash path.",47190624
561,False,False,2018-01-08T17:03:34Z,2018-01-08T17:14:16Z,"1.0.0-beta.5 
=========
- Fix: Errors from remotes different to a 404 will raise an error. Disconnected remotes have to be removed from remotes or use explicit remote with ``-r myremote``
- Fix: cross-building message when building different architecture in same OS
- Fix: ``conan profile show`` now shows profile with same syntax as profile files
- Fix: generated test code in ``conan new`` templates will not run example app if cross building.
- Fix: ``conan export-pkg`` uses the conanfile.py folder as the default ``--source-folder``
- Bugfix: ``conan download`` didn't download recipe if there are no binaries. Force recipe download.
- Bugfix: Fixed blocked ``self.run()`` when stderr outputs large tests, due to full pipe.",47190624
562,False,False,2018-01-04T12:52:17Z,2018-01-04T15:07:35Z,"1.0.0-beta4
------------

- Feature: ``run_in_windows_bash`` accepts a dict of environment variables to be prioritised inside the bash shell, mainly intended to control the priority of the tools in the path. Use with ``vcvars`` context manager and ``vcvars_dict``, that returns the PATH environment variable only with the Visual Studio related directories 
- Fix: Adding all values to ``arch_target``
- Fix: ``conan new`` templates now use new ``os_build`` and ``arch_build`` settings
- Fix: Updated ``CMake`` helper to account for ``os_build`` and ``arch_build`` new settings
- Fix: Automatic creation of *default* profile when it is needed by another one (like ``include(default)``)
- BugFix: Failed installation (non existing package) was leaving lock files in the cache, reporting a package for ``conan search``
- BugFix: Environment variables are now applied to ``build_requirements()`` for ``$ conan install .``
- BugFix: Dependency graph was raising conflicts for diamonds with ``alias`` packages
- BugFix: Fixed ``conan export-pkg`` after a ``conan install`` when recipe has options",47190624
563,False,False,2017-12-28T11:04:40Z,2017-12-28T11:58:40Z,"1.0.0-beta3
------------

Install with: `pip install conan==1.0.0b3`

- Fix: Upgraded pylint and astroid to latest
- Fix: Fixed ``build_requires`` with transitive dependencies to other build_requires
- Fix: Improved pyinstaller creation of executable, to allow for py3-64 bits (windows)
- Deprecation: removed all ``--some_argument``, use instead ``--some-argument`` in command line.
",47190624
564,False,True,2017-12-23T06:55:14Z,2017-12-23T06:58:19Z,"1.0.0-beta.2 (23-December-2017)
=========================

**Install with:** `pip install conan==1.0.0b2`

- Fixed: Mandatory path parameter in `conan install` and `conan info`.",47190624
565,False,True,2017-12-22T17:51:46Z,2017-12-22T17:57:56Z,"1.0.0-beta1
========

**Install with:** `pip install conan==1.0.0b1`

- Feature: New command line UI. Most commands use now the path to the package recipe, like ``conan export . user/testing``
  or ``conan create folder/myconanfile.py user/channel``.
- Feature: Better cross-compiling. New settings model for ``os_build``, ``arch_build``, ``os_target``, ``arch_target``.
- Feature: Better Windows OSS ecosystem, with utilities and settings model for MSYS, Cygwing, Mingw, WSL
- Feature: ``package()`` will not warn of not copied files for known use cases.
- Feature: reduce the scope of definition of `cpp_info`, `env_info`, `user_info` attributes to `package_info()`
  method, to avoid unexpected errors.
- Feature: extended the use of addressing folder and conanfiles with diffeent names for `source`, `package` and `export-pkg`
  commands
- Feature: added support for Zypper system package tool
- Fix: Fixed application of build requires from profiles that didn't apply to requires in recipes
- Fix: Improved ""test package"" message in output log
- Fix: updated CI templates generated with ``conan new``
- Deprecation: Removed ``self.copy_headers`` and family for the ``package()`` method
- Deprecation: Removed ``self.conanfile_directory`` attribute.


**Breaking changes**
---------------------

  - The new command line UI breaks command line tools and integration. Most cases, just add a ``.`` to the command.
  - Removed ``self.copy_headers``, ``self.copy_libs``, methods for ``package()``. Use ``self.copy()`` instead.
  - Removed ``self.conanfile_directory`` attribute. Use ``self.source_folder``, ``self.build_folder``, etc.
    instead",47190624
566,False,False,2017-12-15T14:56:57Z,2017-12-15T14:59:49Z,"0.30.3 (15-December-2017)
=====================

- Reverted CMake() and Meson() build helpers to keep old behavior.
- Forced Astroid dependency to < 1.6 because of py3 issues.",47190624
567,False,False,2017-12-14T09:43:02Z,2017-12-14T09:52:42Z,"- Fix: CMake() and Meson() build helpers and relative directories. #2152 
- Fix: ``ycm`` generator, removed the access of ``cpp_info`` to generators, keeping the access to ``deps_cpp_info``. #2149
",47190624
568,False,False,2017-12-13T10:59:46Z,2017-12-13T11:17:23Z,"- Added missing migration corresponding to the new gcc major versions (5, 6, 7).
",47190624
569,False,False,2017-12-12T16:58:00Z,2017-12-13T11:17:18Z,"0.30.0
-------

- Feature: Introduced major versions for gcc (5, 6, 7) as defaults settings for OSS packages, as minors are compatible by default
- Feature: ``VisualStudioBuildEnvironment`` has added more compilation and link flags.
- Feature: new ``MSBuild`` build helper that wraps the call to ``msvc_build_command`` with the correct application of environment
  variables with the improved ``VisualStudioBuildEnvironment``
- Feature: ``CMake`` and ``Meson`` build helpers got a new ``cache_build_dir`` argument for ``configure(cache_build_dir=None)``
  that will be used to define a build directory while the package is being built in local cache, but not when built locally
- Feature: ``conanfiles`` got a new ``apply_env`` attribute, defaulted to ``True``. If false, the environment variables from
  dependencies will not be automatically applied. Useful if you don't want some dependency adding itself to the PATH by default,
  for example
- Feature: allow recipes to use and run python code installed with ``conan config install``
- Feature: ``conanbuildinfo.cmake`` now has ``KEEP_RPATHS`` as argument to keep the RPATHS, as opposed to old SKIP_RPATH which
  was confusing. Also, it uses set(CMAKE_INSTALL_NAME_DIR """") to keep the old behavior even for CMake >= 3.9
- Feature: ``conan info`` is able to get profile information from the previous install, instead of requiring it as input again
- Feature: ``tools.unix_path`` support MSYS, Cygwin, WSL path flavors
- Feature: added ``destination`` folder argument to ``tools.get()`` function
- Feature: ``SystemPackageTool`` for apt-get now uses ``--no-install-recommends`` automatically.
- Feature: ``visual_studio_multi`` generator now uses toolsets instead of IDE version to identify files.
- Fix: generators failures print traces to help debugging
- Fix: typos in generator names, or non-existing generator now raise an Error instead of a warning
- Fix: ``short_paths`` feature is active by default in Windows. If you want to opt-out, you can use ``CONAN_USER_HOME_SHORT=None``
- Fix: ``SystemPackageTool`` doesn't use sudo in Windows
- BugFix: Not using parallel builds for Visual<10 in cmake build helper
- Deprecation: ``conanfile_directory`` shouldn't be used anymore in recipes. Use ``source_folder``, ``build_folder``, etc


  **Breaking changes**

  - ``scopes`` have been completely removed. You can use environment variables, or the ``conanfile.develop`` or ``conanfile.in_local_cache``
    attributes instead.
  - Command ``test_package`` has been removed. Use ``conan create`` instead, and ``conan test`` for just running package tests.
  - ``werror`` behavior is now by default. Dependencies conflicts will now error, and have to be fixed. 
  - ``short_paths`` feature is again active by default in Windows, even with Py3.6 and system LongPathsEnabled.
  - ``ConfigureEnvironment`` and ``GCC`` build helpers have been completely removed
",47190624
570,False,False,2017-12-02T08:24:16Z,2017-12-02T08:42:33Z,"0.29.2
=====

- Updated python cryptography requirement for OSX due the pyOpenSSL upgrade. See more: https://pypi.python.org/pypi/pyOpenSSL ",47190624
571,False,False,2017-11-23T12:44:10Z,2017-11-23T12:51:16Z,"0.29.1 
------

- Support for OSX High Sierra
- Reverted concurrency locks to counters, removed ``psutil`` dependency
- Implemented migration for settings.yml (for new VS toolsets)
- Fixed encoding issues in conan_server",47190624
572,False,False,2017-11-21T10:17:34Z,2017-11-21T12:06:52Z,"0.29.0 
-------
- Feature: Support for WindowsStore (WinRT, UWP)
- Feature: Support for Visual Studio Toolsets.
- Feature: New ``boost-build`` generator for generic bjam (not only Boost)
- Feature: new ``tools.PkgConfig`` helper to parse pkg-config (.pc) files.
- Feature: Added ``self.develop`` conanfile variable. It is true for ``conan create`` packages and for local development.
- Feature: Added ``self.keep_imports`` to avoid removal of imported files in the ``build()`` method. Convenient for re-packaging.
- Feature: Autodected MSYS2 for ``SystemPackageTool``
- Feature: ``AutoToolsBuildEnvironment`` now auto-loads ``pkg_config_path`` (to use with ``pkg_config`` generator)
- Feature: Changed search for profiles. Profiles not found in the default ``profiles`` folder, will be searched for locally. Use ``./myprofile`` to force local search only.
- Feature: Parallel builds for Visual Studio (previously it was only parallel compilation within builds)
- Feature: implemented syntax to check options with ``if ""something"" in self.options.myoption``
- Fix: Fixed CMake dependency graph when using TARGETS, that produced wrong link order for transitive dependencies.
- Fix: Trying to download the ``exports_sources`` is not longer done if such attribute is not defined
- Fix: Added output directories in ``cmake`` generator for RelWithDebInfo and MinSizeRel configs
- Fix: Locks for concurrent access to local cache now use process IDs (PIDs) to handle interruptions and inconsistent states. Also, adding messages when locking.
- Fix: Not remove the .zip file after a ``conan config install`` if such file is local
- Fix: Fixed ``CMake.test()`` for the Ninja generator
- Fix: Do not crete local conaninfo.txt file for ``conan install <pkg-ref>`` commands.
- Fix: Solved issue with multiple repetitions of the same command line argument
- BugFix: Don't rebuild conan created (with conan-create) packages when ``build_policy=""always""``
- BugFix: ``conan copy`` was always copying binaries, now can copy only recipes
- BugFix: A bug in download was causing appends insteads of overwriting for repeated downloads.
- Development: Large restructuring of files (new cmd and build folders)
- Deprecation: Removed old CMake helper methods (only valid constructor is ``CMake(self)``)
- Deprecation: Removed old ``conan_info()`` method, that was superseded by ``package_id()``




 **Breaking changes**
----------------------

  - CMAKE_LIBRARY_OUTPUT_DIRECTORY definition has been introduced in ``conan_basic_setup()``, it will send shared libraries .so
    to the ``lib`` folder in Linux systems. Right now it was undefined.
  - Profile search logic has slightly changed. For ``-pr=myprofile``, such profile will be searched both in the default folder
    and in the local one if not existing. Use ``-pr=./myprofile`` to force local search only.
  - The ``conan copy`` command has been fixed. To copy all binaries, it is necessary to explicit ``--all``, as other commands do
  - The only valid use of CMake helper is ``CMake(self)`` syntax
  - If using ``conan_info()``, replace it with ``package_id()``",47190624
573,False,False,2017-10-31T16:50:04Z,2017-10-31T16:58:57Z,"0.28.1 
------

- BugFix: Downloading (``tools.download``) of files with ``content-encoding=gzip`` were raising an exception because the downloaded content length didn't match the ``content-length``

😈  Happy Halloween!
",47190624
574,False,False,2017-10-26T15:16:39Z,2017-10-27T16:14:34Z,"0.28.0
-------

This is a big release, with many important and core changes. Also with a huge number of community contributions, thanks very much!

**Important!**, see the ""Breaking changes"" at the end of the document.

 - Feature: Major revamp of most conan commands, making command line arguments homogeneous. Much better development flow adapting to user layouts, with ``install-folder``, ``source-folder``, ``build-folder``, ``package-folder``.
 - Feature: new ``deploy()`` method, useful for installing binaries from conan packages.
 - Feature: Implemented some **concurrency** support for the conan local cache. Parallel ``conan install ``and ``conan create`` for different configurations should be possible.
 - Feature: options now allow patterns in the command line: ``-o *:myoption=myvalue`` applies to all packages.
 - Feature: new ``pc`` generator that generates files from dependencies for ``pkg-config``
 - Feature: new ``Meson`` helper, similar to ``CMake`` for Meson build system. Works well with ``pc`` generator.
 - Feature: Support for read-only cache with ``CONAN_READ_ONLY_CACHE`` environment variable
 - Feature: new ``visual_studio_multi`` generator to load Debug/Release, 32/64 configs at once 
 - Feature: new ``tools.which`` helper to locate executables
 - Feature: new ``conan --help`` layout
 - Feature: allow to override compiler version in ``vcvars_command``
 - Feature: ``conan user`` interactive (and not exposed) password input for empty ``-p`` argument
 - Feature: Support for ``PacManTool`` for ``system_requirements()`` for ArchLinux
 - Feature: Define VS toolset in ``CMake`` constructor and from environment variable CONAN_CMAKE_TOOLSET
 - Feature: ``conan create`` now accepts ``werror`` argument
 - Feature: ``AutoToolsBuildEnvironment`` can use ``CONAN_MAKE_PROGRAM`` env-var to define make program
 - Feature: added xcode9 for apple-clang 9.0, clang 5 to default settings.yml
 - Feature: deactivation of ``short_paths`` in Windows 10 with Py3.6 and long path support is automatic
 - Feature: show unzip progress by percentage, not by file (do not clutters output)
 - Feature: do not use ``sudo`` for system requirements if already running as root
 - Feature: ``tools.download`` able to use headers/auth
 - Feature: conan does not longer generate bytecode from recipes (no more .pyc, and more efficient)
 - Feature: add parallel argument to ``build_sln_command`` for VS
 - Feature: Show warning if vs150comntools is an invalid path
 - Feature: ``tools.get()`` now has arguments for hash checking
 - Fix: upload pattern now accepts ``Pkg/*``
 - Fix: improved downloader, make more robust, better streaming
 - Fix: ``tools.patch`` now support adding/removal of files
 - Fix: The ``default`` profile is no longer taken as a base and merged with user profile. Use explicit ``include(default)`` instead.
 - Fix: Properly manage x86 as cross building with autotools
 - Fix: ``tools.unzip`` removed the unnecessary long-paths check in Windows
 - Fix: ``package_info()`` is no longer executed at install for the consumer conanfile.py
 - BugFix: source folder was not being correctly removed when recipe was updated
 - BugFix: fixed ``CMAKE_C_FLAGS_DEBUG`` definition in ``cmake`` generator
 - BugFix: ``CMAKE_SYSTEM_NAME`` is now Darwin for iOS, watchOS and tvOS
 - BugFix: ``xcode`` generator fixed handling of compiler flags
 - BugFix: pyinstaller hidden import that broke .deb installer
 - BugFix: ``conan profile list`` when local files matched profile names

  **Breaking changes**
  ----------------------

  This is an important release towards stabilizing conan and moving out of beta. Some breaking changes have been done, but mostly to command line arguments, so they should be easy to fix. Package recipes or existing packages shouldn't break.
  Please **update**, it is very important to ease the transition of future stable releases. Do not hesitate to ask questions, or for help, if you need it. This is a possibly not complete list of things to take into account:

  - The command ``conan install`` doesn't accept ``cwd`` anymore, to change the directory where the generator
    files are written, use the ``--install-folder`` parameter.
  - The command ``conan build`` now requires the path to the ``conanfile.py`` (optional before)
  - The command ``conan package`` not longer re-package a package in the local cache, now it only operates in a user local folder. The recommended way to re-package a package is using ``conan build`` and then ``conan export-pkg``.
  - Removed ``conan package_files`` in favor of a new command ``conan export-pkg``. It requires a local recipe with a ``package()`` method.
  - The command ``conan source`` no longer operates in the local cache. now it only operates in a user local folder. If you used ``conan source`` with a reference to workaround the concurrency, now it natively supported, you can remove the command call and trust concurrent install processes.
  - The command ``conan imports`` doesn't accept ``-d, --dest`` anymore, use ``--imports-folder`` parameter instead.
  - If you specify a profile in a conan command, like conan create or conan install the base profile `~/.conan/profiles/default` won’t be applied.
    Use explicit ``include`` to keep the old behavior.",47190624
575,False,False,2017-09-20T07:16:59Z,2017-09-20T08:55:44Z,"0.27.0
-------
- Feature: ``conan config install <url>`` new command. Will install remotes, profiles, settings, conan.conf and other files into the local conan installation. Perfect to synchronize configuration among teams
- Feature: improved traceback printing when errors are raised for more context. Configurable via env
- Feature: filtering out non existing directories in ``cpp_info`` (include, lib, etc), so some build systems doesn't complain of them.
- Feature: Added include directories to ResourceCompiler and to MIDL compiler in ``visual_studio`` generator
- Feature: new ``visual_studio_legacy`` generator for Visual Studio 2008
- Feature: show path where manifests are locally stored
- Feature: ``replace_in_file`` now raises error if replacement is not done (opt-out parameter)
- Feature: enabled in conan.conf ``[proxies]`` section ``no_proxy=url1,url2`` configuration (to skip proxying for those URLs), as well as ``http=None`` and ``https=None`` to explicitely disable them.
- Feature: new conanfile ``self.in_local_cache`` attribute for conditional logic to apply in user folders local commands
- Feature: ``CONAN_USER_HOME_SHORT=None`` can disable the usage of ``short_paths`` in Windows, for modern Windows that enable long paths at the system level
- Feature: ``if ""arm"" in self.settings.arch`` is now a valid check (without casting to str(self.settings.arch))
- Feature: added ``--cwd`` argument to ``conan source`` local method.
- Fix: unzip crashed for 0 Bytes zip files
- Fix: ``collect_libs`` moved to the ``tools`` module
- Bugfix: fixed wrong regex in ``deps_cpp_info`` causing issues with dots and dashes in package names
- Development: Several internal refactors (tools module, installer), testing (using VS2015 as default, removing VS 12 in testing). Conditional CI in travis for faster builds in developers, downgrading to CMake 3.7 in appveyor
- Deprecation: ``dev_requires`` have been removed. Superseded by ``build_requires`` while not documented at all.
- Deprecation: sources tgz files for exported sources no longer contain "".c_src"" subfolder. Packages created with 0.27 will be incompatible with conan < 0.25",47190624
576,False,False,2017-09-05T17:21:22Z,2017-09-05T17:30:08Z,"0.26.1
=====

- Bugfix: fixed parsing of conanbuildinfo with package names containing a dot.
- Feature: added apple-clang 9.0 to default settings.
- Fix: conan copy command now supports symlinks.
- Fix: fixed removal of ""export_source"" folder when files have no permissions

",47190624
577,False,False,2017-08-31T14:31:36Z,2017-08-31T14:54:27Z,"0.26.0 
-------

- Feature: ``conan profile`` command has implemented ``update``, ``new``, ``remove`` subcommands, with ``--detect``, to allow creation, edition and management of profiles.
- Feature: ``conan package_files`` command now can call recipe ``package()`` method if ``--build_folder`` or ``--source_folder`` arguments are defined
- Feature: graph loading algorithm improved to avoid repeating nodes. Results in much faster times for dense graphs, and avoids duplications of private requirements.
- Feature: authentication based on environment variables. Allows very long processes without tokens being expired.
- Feature: Definition of Visual Studio runtime setting ``MD`` or ``MDd`` is now automatic based on build type, not necessary to default in profile.
- Feature: Capturing ``SystemExit`` to return user error codes to the system with ``sys.exit(code)``
- Feature: Added SKIP_RPATH argument to cmake ``conan_basic_setup()`` function
- Feature: Optimized uploads, now uploads will be skipped if there are no changes, irrespective of timestamp
- Feature: Automatic detection of VS 15-2017, via both a ``vs150comntools`` variable, and using ``vswhere.exe``
- Feature: Added NO_OUTPUT_DIRS argument to cmake ``conan_basic_setup()`` function
- Feature: Add support for Chocolatey system package manager for Windows.
- Feature: Improved in conan user home and path storage configuration, better error checks.
- Feature: ``export`` command is now able to export recipes without name or version, specifying the full reference.
- Feature: Added new default settings, Arduino, gcc-7.2
- Feature: Add conan settings to cmake generated file
- Feature: new ``tools.replace_prefix_in_pc_file()`` function to help with .pc files.
- Feature: Adding support for system package tool ``pkgutil`` on Solaris
- Feature: ``conan remote update`` now allows ``--insert`` argument to change remote order
- Feature: Add ``verbose`` definition to ``CMake`` helper.
- Fix: ``conan package`` working locally failed if not specified build_folder
- Fix: Search when using wildcards for version like ``Pkg/*@user/channel``
- Fix: Change current working directory to the conanfile.py one before loading it, so relative python imports or code work.
- Fix: ``package_files`` command now works with ``short_paths`` too.
- Fix: adding missing require of tested package in test_package/conanfile build() method
- Fix: path joining in ``vcvars_command`` for custom VS paths defined via env-vars
- Fix: better managing string escaping in CMake variables
- Fix: ``ExecutablePath`` assignment has been removed from the ``visual_studio`` generator.
- Fix: removing ``export_source`` folder containing exported code, fix issues with read-only files and keeps cache consistency better.
- Fix: Accept 100 return code from yum check-update
- Fix: importing *.so files from the ``conan new`` generated test templates
- Fix: progress bars display when download/uploads are not multipart (reported size 0)
- Bugfix: fixed wrong OSX ``DYLD_LIBRARY_PATH`` variable for virtual environments
- Bugfix: ``FileCopier`` had a bug that affected ``self.copy()`` commands, changing base reference directory.
",47190624
578,False,False,2017-07-20T15:53:32Z,2017-07-20T16:03:26Z,"0.25.1
------

- Bugfix: Build requires are now applied correctly to test_package projects.
- Fix: Fixed search command to print an error when --table parameter is used without a reference.
- Fix: install() method of the CMake() helper, allows parallel building, change build folder and custom parameters.
- Fix: Controlled errors in migration, print warning if conan is not able to remove a package directory.",47190624
579,False,False,2017-07-19T15:50:13Z,2017-07-19T15:59:15Z,"0.25.0 
-------

  This release introduces a new layout for the local cache, with dedicated ``export_source`` folder to store the source code exported with ``exports_sources`` feature, which is much cleaner than the old ``.c_src`` subfolder. A migration is included to remove from the local cache packages with the old layout.


- Feature: new ``conan create`` command that supersedes ``test_package`` for creating and testing package. It works even without the test_package folder, and have improved management for user, channel. The test_package recipe no longer defines ``requires``
- Feature: new ``conan get`` command that display (with syntax highlight) package recipes, and any other file from conan: recipes, conaninfo.txt, manifests, etc.
- Feature: new ``conan alias`` command that creates a special package recipe, that works like an **alias** or a **proxy** to other package, allowing easy definition and transparent management of ""using the latest minor"" and similar policies. Those special alias packages do not appear in the dependency graph.
- Feature: new ``conan search --table=file.html`` command that will output an html file with a graphical representation of available binaries
- Feature: created **default profile**, that replace the ``[settings_default]`` in **conan.conf** and augments it, allowing to define more things like env-vars, options, build_requires, etc.
- Feature: new ``self.user_info`` member that can be used in ``package_info()`` to define custom user variables, that will be translated to general purpose variables by generators.
- Feature: ``conan remove`` learned the ``--outdated`` argument, to remove those package binaries that are outdated from the recipe, both from local cache and remotes
- Feature: ``conan search`` learned the ``--outdated`` argument, to show only those package binaries that are outdated from the recipe, both from local cache and remotes
- Feature: Automatic management ``CMAKE_TOOLCHAIN_FILE`` in ``CMake`` helper for cross-building.
- Feature: created ``conan_api``, a python API interface to conan functionality.
- Feature: new ``cmake.install()`` method of ``CMake`` helper.
- Feature: ``short_paths`` feature now applies also to ``exports_sources``
- Feature: ``SystemPackageTool`` now supports **FreeBSD** system packages
- Feature: ``build_requires`` now manage options too, also default options in package recipes
- Feature: ``conan build`` learned new ``--package_folder`` argument, useful if the build system perform the packaging
- Feature: ``CMake`` helper now defines by default ``CMAKE_INSTALL_PREFIX`` pointing to the current package_folder, so ``cmake.install()`` can transparently execute the packaging.
- Feature: improved command UX with ``--cwd`` arguments to allow define the current directory for the command
- Feature: improved ``VisualStudioBuildEnvironment``
- Feature: transfers now show size (MB, KB) of download/uploaded files, and current status of transfer.
- Feature: ``conan new`` now has arguments to generate CI scripts for Gitlab CI.
- Feature: Added ``MinRelSize`` and ``RelWithDebInfo`` management in ``CMake`` helper.
- Fix: make ``mkdir``, ``rmdir``, ``relative_dirs`` available for import from ``conans`` module.
- Fix: improved detection of Visual Studio default under cygwin environment.
- Fix: ``package_files`` now allows symlinks
- Fix: Windows installer now includes conan_build_info tool.
- Fix: appending environment variables instead of overwriting them when they come from different origins: upstream dependencies and profiles.
- Fix: made opt-in the check of package integrity before uploads, it was taking too much time, and provide little value for most users.
- Fix: Package recipe linter removed some false positives
- Fix: default settings from conan.conf do not fail for constrained settings in recipes.
- Fix: Allowing to define package remote with ``conan remote add_ref`` before download/upload.
- Fix: removed duplicated BUILD_SHARED_LIBS in test_package
- Fix: add ""rhel"" to list of distros using yum.
- Bugfix: allowing relative paths in ``exports`` and ``exports_sources`` fields
- Bugfix: allow custom user generators with underscore",47190624
580,False,False,2017-06-16T07:47:23Z,2017-06-16T08:00:33Z,"
0.24.0 
-------
- Feature: ``conan new`` new arguments to generate **Travis-CI** and **Appveyor** files for Continuous Integration
- Feature: Profile files with `include()` and variable declaration
- Feature: Added ``RelWithDebInfo/MinRelSize`` to cmake generators
- Feature: Improved linter, removing false positives due to dynamic conanfile attributes
- Feature: Added ``tools.ftp_download()`` function for FTP retrieval
- Feature: Managing symlinks between folders.
- Feature: ``conan remote add`` command learned new ``--insert`` option to add remotes in specific order.
- Feature: support multi-config in the ``SCons`` generator
- Feature: support for gcc 7.1+ detection
- Feature: ``tools`` now are using global ``requests`` and ``output`` instances. Proxies will work for ``tools.download()``
- Feature: ``--json`` parameter added to ``conan info`` command to create a JSON with the ``build_order``.
- Fix: update default repos, now pointing to Bintray.
- Fix: printing ``outdated from recipe`` also for remotes
- Fix: Fix required slash in ``configure_dir`` of ``AutoToolsBuildEnvironment``
- Fix: command ``new`` with very short names, now errors earlier.
- Fix: better error detection for incorrect ``Conanfile.py`` letter case.
- Fix: Improved some cmake robustness using quotes to avoid cmake errors
- BugFix: Fixed incorrect firing of building due to ``--build`` patterns error
- BugFix: Fixed bug with options incorrectly applied to ``build_requires`` and crashing
- Refactor: internal refactors toward having a python api to conan functionality
",47190624
581,False,False,2017-06-11T15:23:20Z,2017-06-11T15:31:34Z,,47190624
582,False,False,2017-06-05T11:15:58Z,2017-06-05T11:30:04Z,"0.23.1
-------

- BugFix: Fixed bug while packaging symlinked folders in build folder, and target not being packaged.
- Relaxed OSX requirement of pyopenssl to <18",47190624
583,False,False,2017-06-01T09:08:27Z,2017-06-01T09:27:41Z,"0.23.0 (01-June-2017)
---------------------------
- Feature: new ``build_requires`` field and ``build_requirements()`` in package recipes
- Feature: improved commands (source, build, package, package_files) and workflows for local development of packages in user folders.
- Feature: implemented ``no_copy_source`` attribute in recipes to avoid the copy of source code from ""source"" to ""build folder"". Created new ``self.source_folder``, ``self.build_folder``, ``self.package_folder`` for recipes to use.
- Feature: improved ``qmake`` generator with multi-config support, resource directories
- Feature: improved exception capture and formatting for all recipe user methods exceptions
- Feature: new ``tools.sha256()`` method
- Feature: folder symlinks working now for packages and upload/download
- Feature: added ``set_find_paths()`` to ``cmake-multi``, to set CMake FindXXX.cmake paths. This will work only for single-config build-systems.
- Feature: using environment variables for ``configure()``, ``requirements()`` and ``test()`` methods
- Feature: added a ``pylintrc`` environment variable in ``conan.conf`` to define a PYLINTRC file with custom style definitions (like indents).
- Feature: fixed ``vcvars`` architecture setting
- Fix: Make ``cacert.pem`` folder use CONAN_USER_HOME if existing
- Fix: fixed ``options=a=b`` option definition
- Fix: ``package_files`` command allows ``--force`` argument to overwrite existing instead of failing
- BugFix: Package names with underscore when parsing ``conanbuildinfo.txt``
",47190624
584,False,False,2017-05-03T12:06:55Z,2017-05-03T12:14:54Z,- Fixed CMake generator (in targets mode) with linker/exe flags like ``--framework XXX`` containing spaces.,47190624
585,False,False,2017-04-20T07:13:04Z,2017-04-20T07:29:59Z,Fix: Recovered username regular expression to solve problems with usernames starting with non-alphabetical characters.,47190624
586,False,False,2017-04-18T14:26:56Z,2017-04-18T14:44:21Z,"- Fix:  ""-"" symbol available again in usernames. 
- Fix: Added ``future`` requirement to solve an error with pyinstaller generating the Windows installer.",47190624
587,False,False,2017-04-18T08:05:27Z,2017-04-18T09:05:56Z,"0.22.0 
--------

- Feature: ``[build_requires]`` can now be declared in ``profiles`` and apply them to build packages. Those requirements are only installed if the package is required to build from sources, and do not affect its package ID hash, and it is not necessary to define them in the package recipe. Ideal for testing libraries, cross compiling toolchains (like Android), development tools, etc.
- Feature: Much improved support for cross-building. Support for cross-building to **Android** provided, with toolchains installable via ``build_requires``.
- Feature: New ``package_files`` command, that is able to create binary packages directly from user files, without needing to define ``build()`` or ``package()`` methods in the the recipes.
- Feature: command ``conan new`` with a new ``--bare`` option that will create a minimal package recipe, usable with the ``package_files`` command.
- Feature: Improved ``CMake`` helper, with ``test()`` method, automatic setting of BUILD_SHARED_LIBS, better management of variables, support for parallel compilation in MSVC (via /MP)
- Feature: new ``tools.msvc_build_command()`` helper that both sets the Visual vcvars and calls Visual to build the solution. Also ``vcvars_command`` is improved to return non-empty string even if vcvars is set, for easier concatenation.
- Feature: Added package recipe linter, warning for potential errors and also about Python 3 incompatibilities when running from Python 2. Enabled by default can be opt-out.
- Feature: Improvements in HTML output of ``conan info --graph``
- Feature: allow custom path to bash, as configuration and environment variable.
- Fix: Not issuing an unused variable warning in CMake for the CONAN_EXPORTED variable
- Fix: added new ``mips`` architectures and latest compiler versions to default settings.yml
- Fix: Unified username allowed patterns to those used in package references.
- Fix: hadrcoded vs15 version in tools.vcvars",47190624
588,False,False,2017-04-04T14:10:18Z,2017-04-04T14:29:41Z,"0.21.2
--------

- Bugfix: virtualenv generator quoting environment variables in Windows. ",47190624
589,False,False,2017-03-23T17:04:32Z,2017-03-23T17:13:50Z,"0.21.1
--------

- BugFix: Fixed missing dependencies in ``AutoToolsBuildEnvironment``
- BugFix: Escaping single quotes in html graph of ``conan info --graph=file.html``
- BugFix: Fixed loading of auth plugins in conan_server
- BugFix: Fixed ``visual_studio`` generator creating XML with dots.",47190624
590,False,False,2017-03-21T15:10:57Z,2017-03-21T15:41:13Z,"0.21.0 (21-March-2017)
-------------------------------

- Feature: ``conan info --graph`` or ``--graph=file.html`` will generate a dependency graph representation in dot or html formats.
- Feature: Added better support and tests for Solaris Sparc.
- Feature: custom authenticators are now possible in ``conan_server`` with plugins.
- Feature: extended ``conan info`` command with path information and filter by packages.
- Feature: enabled conditional package binaries removal with ``conan remove`` with query syntax
- Feature: enabled generation and validation of manifests from ``test_package``.
- Feature: allowing ``options`` definitions in profiles
- Feature: new ``RunEnvironment`` helper, that makes easier to run binaries from dependent packages
- Feature: new ``virtualrunenv`` generator that activates environment variable for execution of binaries from installed packages, without requiring ``imports`` of shared libraries.
- Feature: adding new version modes for ABI compatibility definition in ``package_id()``.
- Feature: Extended ``conan new`` command with new option for ``exports_sources`` example recipe.
- Feature: ``CMake`` helper defining parallel builds for gcc-like compilers via ``--jN``, allowing user definition with environment variable and in conan.conf.
- Feature: ``conan profile`` command now show profiles in alphabetical order.
- Feature: extended ``visual_studio`` generator with more information and binary paths for execution with DLLs paths.
- Feature: Allowing relative paths with $PROFILE_DIR place holder in ``profiles``
- Fix: using only file checksums to decide for modified recipe in remote, for possible concurrent builds & uploads.
- Fix: Improved ``--build`` modes management, with better checks and allowing multiple definitions and mixtures of conditions
- Fix: Replaced warning for non-matching OS to one message stating the cross-build
- Fix: local ``conan source`` command (working in user folder) now properly executes the equivalent of ``exports`` functionality
- Fix: Setting command line arguments to cmake command as CMake flags, while using the TARGETS approach. Otherwise, arch flags like -m32 -m64 for gcc were not applied.
- BugFix: fixed ``conan imports`` destination folder issue.
- BugFix: Allowing environment variables with spaces
- BugFix: fix for CMake with targets usage of multiple flags. 
- BugFix: Fixed crash of ``cmake_multi`` generator for ""multi-config"" packages.",47190624
591,False,False,2017-03-06T09:40:27Z,2017-03-06T10:03:39Z,"0.20.3
--------

- Fix: Added opt-out for ``CMAKE_SYSTEM_NAME`` automatically added when cross-building, causing users
 providing their own cross-build to fail
- BugFix: Corrected usage of ``CONAN_CFLAGS`` instead of ``CONAN_C_FLAGS`` in cmake targets",47190624
592,False,False,2017-03-02T10:33:04Z,2017-03-02T10:56:33Z,"- Fix: Regression of `visual_studio`generator using `%(ExecutablePath)` instead of `$(ExecutablePath)`
- Fix: Regression for `--build=outdated --build=Pkg` install pattern
",47190624
593,False,False,2017-03-01T10:56:44Z,2017-03-01T12:41:11Z,"## 0.20.1
- Fix: Disabled the use of cached settings and options from installed `conaninfo.txt`
- Fix: Revert the use of quotes in `cmake` generator for flags.
- Fix: Allow comments in artifacts.properties
- Fix: Added missing commit for CMake new helpers
",47190624
594,False,False,2017-02-27T13:59:28Z,2017-02-27T18:04:31Z,"## 0.20.0 
- Feature: Largely improved management of **environment variables**, declaration in `package_info()`,
  definition in profiles, in command line, per package, propagation to consumers.
- Feature: New build helpers `AutotoolsBuildEnvironment`, `VisualStudioBuildEnvironment`, which
  deprecate `ConfigureEnvironment`, with much better usage of environment variables
- Feature: New `virtualbuildenv` generator that will generate a composable environment with build
  information from installed dependencies.
- Feature: New `build_id()` recipe method that allows to define logic to build once, and package
  multiple times without building. E.g.: build once both debug and release artifacts, then package
  separately.
- Feature: **Multi-config packages**. Now packages can provide multi-configuration packages, like
  both debug/release artifacts in the same package, with `self.cpp_info.debug.libs = [...]` syntax.
  Not restricted to debug/release, can be used for other purposes.
- Feature: new `conan config` command to manage, edit, display `conan.conf` entries
- Feature: Improvements to `CMake` build helper, now it has `configure()` and `build()` methods
  for common operations.
- Feature: Improvements to `SystemPackageTool` with detection of installed packages, improved 
  implementation, installation of multi-name packages.
- Feature: Unzip with `tools.unzip` maintaining permissions (Linux, OSX)
- Feature: `conan info` command now allows profiles too
- Feature: new tools `unix_path()`, `escape_windows_cmd()`, `run_in_windows_bash()`, useful
  for autotools projects in Win/MinGW/Msys
- Feature: new context manager `tools.chdir`, to temporarily change directory.
- Feature: CMake using `CMAKE_SYSTEM_NAME` for cross-compiling.
- Feature: Artifactory build-info extraction from traces
- Feature: Attach custom headers to artifacts uploads with an `artifacts.properties` file.
- Feature: allow and copy symlinks while `conan export`
- Fix: removing quotes in some cmake variables that were generating incorrect builds
- Fix: providing better error messages for non existing binaries, with links to the docs
- Fix: improved error messages if `tools.patch` failed
- Fix: adding `resdirs` to `cpp_info` propagated information, and cmake variables, for directories
  containing resources and other data.
- Fix: printing error messages if a `--build` policy doesn't match any package
- Fix: managing VS2017 by `tools`. Still the manual definition of `vs150comntools` required.
- Bug fix: crashes when not supported characters were dumped to terminal by logger
- Bug fix: wrong executable path in Visual Studio generator

**NOTE**: It is important that you upgrade at least to 0.19.3 version if you are using remotes with packages that might be created with 0.20.0 version.
",47190624
595,False,False,2017-02-27T10:01:11Z,2017-02-27T10:20:17Z,"## 0.19.3
- Fix: backward compatibility for new environment variables. New features to be introduced in 0.20
  will produce that `conaninfo.txt` will not be correctly parsed, and then the package would be ""missing"".
  This will happen for packages created with 0.20 and consumed with older than 0.19.3

**NOTE**: It is important that you upgrade at least to this version if you are using remotes with packages
that might be created with latest conan releases (like conan.io).
",47190624
596,False,False,2017-02-15T09:45:18Z,2017-02-15T09:55:22Z,"- Bug fix: Fixed issue with remotes behind forwarding proxy
- Bug fix: Fixed `exports_sources` with nested folders bug
",47190624
597,False,False,2017-02-02T09:00:22Z,2017-02-02T09:07:12Z,"## 0.19.1
- Bug fix: Fixed issue with `conan copy` followed by `conan upload` due to the new `exports_sources`
  feature.
",47190624
598,False,False,2017-01-31T13:20:37Z,2017-01-31T14:49:30Z,"## 0.19.0
- Feature: `exports_sources` allows to snapshot sources (like `exports`) but retrieve them strictly
  when necessary, to build from sources. This can largely improve install times for package recipes
  containing sources
- Feature: new configurable **tracer** able to create structured logs of conan actions: commands, API calls, etc
- Feature: new logger for `self.run` actions, able to log information from builds and other commands
  to files, that can afterwards be packaged together with the binaries.
- Feature: support for **Solaris SunOS**
- Feature: `Version` helper improved with `patch, pre, build` capabilities to handle `1.3.4-alpha2+build1` versions
- Feature: compress level of tgz is now configurable via `CONAN_COMPRESSION_LEVEL` environment variable,
  default 9. Reducing it can lead to faster compression times, at the expense of slightly bigger archives
- Feature: Add **powershell** support for virtualenv generator in Windows
- Feature: Improved `system_requirements()` raising errors when failing, retrying if not successful,
  being able to execute in user space for local recipes
- Feature: new cmake helper macro `conan_target_link_libraries()`
- Feature: new cmake `CONAN_EXPORTED` variable, can be used in CMakeLists.txt to differentiate building
  in the local conan cache as package and building in user space
- Fix: improving the caching of options from `conan install` in conaninfo.txt and precedence.
- Fix: conan definition of cmake output dirs has been disabled for `cmake_multi` generator
- Fix: `imports()` now uses environment variables at ""conan install"" (but not at ""conan imports"" yet)
- Fix: `conan_info()` method has been renamed to `package_id()`. Backward compatibility is maintained,
  but it is strongly encouraged to use the new name.
- Fix: `conan_find_libraries` now use the NO_CMAKE_FIND_ROOT_PATH parameter for avoiding issue while cross-compiling
- Fix: disallowing duplicate URLs in remotes, better error management
- Fix: improved error message for wildcard uploads not matching any package
- Fix: remove deprecated `platform.linux_distribution()`, using new ""distro"" package
- Bugfix: fixed management of `VerifySSL` parameter for remotes
- Bugfix: fixed misdetection of compiler version in conanbuildinfo.cmake for apple-clang
- Bugfix: fixed trailing slash in remotes URLs producing crashes
- Refactor: A big refactor has been do to `options`. Nested options are no longer supported, and
  `option.suboption` will be managed as a single string option.

This has been a huge release with contributors of 11 developers. Thanks very much to all of them!
",47190624
599,False,False,2017-01-11T14:12:13Z,2017-01-11T14:54:07Z,"## 0.18.1
- Bug Fix: Handling of transitive private dependencies in modern cmake targets
- Bug Fix: Missing quotes in CMake macro for modern cmake targets
- Bug Fix: Handling LINK_FLAGS in cmake modern targets
- Bug Fix: Environment variables no propagating to test project with test_package command
",47190624
600,False,False,2017-01-03T12:11:36Z,2017-01-03T12:22:58Z,"## 0.18.0 
- Feature: uploads and downloads with **retries** on failures. This helps to avoid having to fully
  rebuild on CI when a network transfer fails
- Feature: added **SCons** generator
- Feature: support for **Python 3.6**, with several fixes. Added Python 3.6 to CI.
- Feature: show package dates in `conan info` command
- Feature: new `cmake_multi` generator for multi-configuration IDEs like Visual Studio and XCode
- Feature: support for **Visual Studio 2017**, VS-15
- Feature: **FreeBSD** now passes test suite
- Feature: `conan upload` showing error messages or URL of remote
- Feature: **wildcard or pattern upload**. Useful to upload multiple packages to a remote.
- Feature: allow defining **settings as environment variables**. Useful for use cases like dockerized builds.
- Feature: improved `--help` messages
- Feature: cmake helper tools to launch conan directly from cmake
- Added **code coverage** for code repository
- Fix: conan.io badges when containing dash
- Fix: manifests errors due to generated .pyc files
- Bug Fix: unicode error messages crashes
- Bug Fix: duplicated build of same package binary for private dependencies
- Bug Fix: duplicated requirement if using version-ranges and `requirements()` method.
",47190624
601,False,False,2016-12-21T14:37:06Z,2016-12-21T14:51:13Z,"- Fixed a bug with `ConfigureEnvironment` helper ignoring libcxx setting. #791
",47190624
602,False,False,2016-12-15T16:46:08Z,2016-12-15T17:06:18Z,"- Fixed bug related with `conan install --all` that generated corrupted packages. Thanks to @yogeva
- Improved case sensitive folder management.
- Fixed appveyor links in README.
",47190624
603,False,False,2016-12-13T10:53:22Z,2016-12-13T11:05:59Z,"- Feature: support for **modern cmake** with cmake `INTERFACE IMPORTED` targets defined per package
- Feature: support for more advanced queries in search.
- Feature: new `profile list|show` command, able to list or show details of profiles
- Feature: adding preliminary support for **FreeBSD**
- Feature: added new `description` field, to document package contents.
- Feature: generation of **imports manifest** and `conan imports --undo` functionality to remove
  imported files
- Feature: optional SSL certificate verification for remotes, to allow self signed certificates
- Feature: allowing custom paths in profiles, so profiles can be easily shared in teams, just
  inside the source repository or elsewhere.
- Feature: fields `user` and `channel` now available in conan recipes. That allows to declare
  requirements for the same user/channel as the current package, for example.
- Feature: improved conan.io package web, adding description.
- Fix: allow to modify cmake generator in `CMake` helper class.
- Fix: added `strip` parameter to `tools.patch()` utility
- Fix: removed unused dependency to Boto
- Fix: wrong line endings in Windows for conan.conf
- Fix: proper automatic use of `txt` and `env` generators in `test_package`
- Bug fix: solved problem when uploading python packages that generated .pyc at execution
- Bug fix: crash when duplicate requires were declared in conanfile
- Bug fix: crash with existing imported files with symlinks
- Bug fix: options missing in ""copy install command to clipboard"" in web
",47190624
604,False,False,2016-12-05T19:12:33Z,2016-12-05T19:21:46Z,"- Fixed bug of `conan test_package` when using arguments as scopes.
",47190624
605,False,False,2016-11-29T07:09:48Z,2016-11-29T09:30:13Z,"## 0.16.0  (19-November-2016)

**Upgrade**: The `--build=outdated` feature had a change in the hash computation, it might report
outdated binaries from recipes. You can re-build the binaries or ignore it (if you haven't changed
your recipes without re-generating binaries)
- Feature: **version ranges**. Conan now supports defining requirements with version range expressions
  like `Pkg/[>1.2,<1.9||1.0.1]@user/channel`. Check the :ref:`version ranges reference <version_ranges>` for details
- Feature: decoupled `imports` from normal install. Now `conan install --no-imports` skips the
  imports section.
- Feature: new `conan imports` command that will execute the imports section without running install
- Feature: **overriding settings per package**. Now it is possible to specify individual settings
  for each package. This can be specified both in the command line and in `profiles`
- Feature: **environment variables** definition in the command line, global and per package. This
  allows to define specific environment variables as the compiler (CC, CXX) for a specific package.
  These environment variables can also be defined in `profiles`. Check :ref:`profiles reference <profiles>`
- Feature: Now conan files copies handle **symlinks**, so files are not duplicated. This will
  save some space and improve download speed in some large packages. To enable it, use
  `self.copy(..., links=True)`
- Fix: Enabling correct use of **MSYS** in Windows, by using the Windows `C:/...` path instead of
  the MSYS ones
- Fix: Several fixes in `conan search`, both local and in remotes
- Fix: Manifests line endings and order fix, and hash computation fixed (it had wrong ordering)
- Fix: Removed http->https redirection in conan_server that produced some issues for SSL reversed
  proxies
- Fix: Taking into account ""ANY"" definition of settings and options
- Fix: Improved some error messages and failures to encode OS errors with unicode characters
- Update: added new arch `ppc64` to default settings
- Update: updated python-requests library version
- Fix: Using `generator()` instead of compiler to decide on cmake multi-configuration for Ninja+cl
  builds
- Improved and completed documentation
",47190624
606,False,False,2016-11-08T13:01:56Z,2016-11-08T13:14:26Z,"## 0.15.0 (08-November-2016)
- Feature: New `--build=outdated` functionality, that allows to build the binary packages for
  those dependencies whose recipe has been changed, or if the binary is not existing. Each
  package binary stores a hash of the recipe to know if they have to be regenerated (are outdated).
  This information is also provided in the `conan search <ref>` command. Useful for package
  creators and CI.
- Feature: Extended the `short_paths` feature for Windows path limit to the `package` folder, so package
  with very long paths, typically in headers in nested folder hierarchies are supported.
- Feature: New `tool.build_sln_command()` helper to `build()` Microsoft Visual Studio solution (.sln)
  projects
- Feature: Extended the `source` and `package` command, so together with `build` they can be fully
  executed in a user folder, as a convenience for package creation and testing.
- Feature: Extending the scope of `tools.pythonpath` to work in local commands too
- Improved the parsing of `profiles` and better error messages
- Not adding `-s` compiler flag for clang, as it doesn't use it.
- Automatic generation of `conanenv.txt` in local cache, warnings if using local commands and no
  `conanbuildinfo.txt` and no `conanenv.txt` are present to cache the information form install
- Fix: Fixed bug when using empty initial requirements (`requires = """"`)
- Fix: Added `glob` hidden import to pyinstaller
- Fix: Fixed minor bugs with `short_paths` as local search not listing packages
- Fix: Fixed problem with virtual envs in Windows with paths separator (using / instead of )
- Fix: Fixed parsing of conanbuildinfo.txt, so the root folder for each dependency is available in local
  commands too
- Fix: Fixed bug in `test_package` with the test project using the `requirements()` method.
",47190624
607,False,False,2016-10-20T21:34:16Z,2016-10-20T21:44:53Z,"- Fixed bug with `short_paths` feature in windows.
- Improved error messages for non-valid `profile` text files.
- Remove downloaded tgz package files from remotes after decompress them. 
- Fixed bug with `install --all` and `short_paths` feature
",47190624
608,False,False,2016-10-20T10:10:29Z,2016-10-20T10:27:28Z,"## 0.14.0 (20-October-2016)
- Feature: Added profiles, as user predefined settings and environment variables (as CC and CXX
  for compiler paths). They are stored in files in the conan cache, so they can be easily edited,
  added, and shared. Use them with `$ conan install --profile=name`
- Feature: `short_paths` feature for Windows now also handle long paths for the final package,
  in case that a user library has a very long final name, with nested subfolders.
- Feature: Added `tools.cpu_count()` as a helper to retrieve the number of cores, so it can be
  used in concurrent builds
- Feature: Detects cycles in the dependency graph, and raise error instead of exhausting recursion
  limits
- Feature: Conan learned the `--werror` option that will raise error and stop installation under
  some cases treated as warnings otherwise: Duplicated dependencies, or dependencies conflicts
- Feature: New `env` generator that generates a text file with the environment variables defined
  by dependencies, so it can be stored. Such file is parsed by `$ conan build` to be able to use
  such environment variables for `self.deps_env_info` too, in the same way it uses the `txt`
  generator to load variables for `self.deps_cpp_info`.
- Fix: Do not print progress bars when output is a file
- Fix: Improved the local conan search, using options too in the query `conan search -q option=value`
- Fix: Boto dependency updated to 2.43.0 (necessary for ArchLinux)
- Fix: Simplified the `conan package` command, removing unused and confusing options, and more
  informative messages about errors and utility of this command.
- Fix: More fixes and improvements on `ConfigureEnvironment`, mainly for Windows
- Fix: Conan now does not generate a `conanbuildinfo.txt` file when doing `$ conan install <PkgRef>`
- Bug fix: Files of a package recipe are ""touched"" to update their timestamps to current time when
  retrieved, otherwise some build systems as Ninja can have problems with them.
- Bug fix: `qmake` generator now uses quotes to handle paths with spaces
- Bug fix: Fixed `OSInfo` to return the short distro name instead of the long one.
- Bug fix: fixed transitivy of ``private` dependencies
",47190624
609,False,False,2016-10-13T13:52:10Z,2016-10-17T07:27:03Z,"## 0.13.3 (13-October-2016)

This minor solves some problems with `ConfigureEnvironment`, mainly for Windows, but also fixes
other things:
- Fixed concatenation problems in Windows for several environment variables. Fixed problems with
  path with spaces
- A batch file is created in Windows to be called, as `if defined` structures doesn't seem to
  work in the command line.
- The `vcvars_command` from `tools` now checks the Visual Studio environment variable, if it is
  already set, it will check it with the current project settings, throwing an error if not matching,
  returning an empty command if matches.
- Added a `compile_flags` property to `ConfigureEnvironment`, to be passed in the command line
  to the compiler, but not as environment variables
- Added `defines` to environment for nix systems, it was not being handled before
- Added new tests, compiling simple projects and diamond dependencies with cmake, cl (msvc), gcc (gcc in linux, mingw in win)
  and clang (OSX), for a better coverage of the `ConfigureEnvironment` functionality.
- Fixed wrong `CPP_INCLUDE_PATH`, it is now `CPLUS_INCLUDE_PATH`
",47190624
610,False,False,2019-12-16T19:34:39Z,2019-12-16T19:54:14Z,"- Added: [#5699](https://github.com/ethereum/aleth/pull/5699) EIP 2046: Reduced gas cost for static calls made to precompiles.
- Added: [#5741](https://github.com/ethereum/aleth/pull/5741) Support for individual EIP activation to facilitate EIP-centric network upgrade process.
- Added: [#5752](https://github.com/ethereum/aleth/pull/5752) [#5753](https://github.com/ethereum/aleth/pull/5753) [#5809](https://github.com/ethereum/aleth/pull/5809) Implement EIP1380 (reduced gas costs for call-to-self).
- Added: [#5859](https://github.com/ethereum/aleth/pull/5859) EIP-2384 Istanbul/Berlin Difficulty Bomb Delay and **Muir Glacier** fork support.
- Changed: [#5750](https://github.com/ethereum/aleth/pull/5750) Use `testeth -t <SUITE_NAME> -- --testfile <PATH>` to run the tests from file at any path. Use `testeth -t <SUITE_NAME> -- --testfile <PATH> --singletest <TEST_NAME>` to run only single test from any file.
- Changed: [#5801](https://github.com/ethereum/aleth/pull/5801) `testeth -t BlockchainTests` command now doesn't run the tests for the forks before Istanbul. To run those tests use a separate LegacyTests suite with command `testeth -t LegacyTests/Constantinople/BlockchainTests`.
- Changed: [#5807](https://github.com/ethereum/aleth/pull/5807) Optimize selfdestruct opcode in LegacyVM by reducing state accesses in certain out-of-gas scenarios.
- Changed: [#5806](https://github.com/ethereum/aleth/pull/5806) Optimize selfdestruct opcode in aleth-interpreter by reducing state accesses in certain out-of-gas scenarios.
- Changed: [#5837](https://github.com/ethereum/aleth/pull/5837) [#5839](https://github.com/ethereum/aleth/pull/5839) [#5845](https://github.com/ethereum/aleth/pull/5845) [#5846](https://github.com/ethereum/aleth/pull/5846) Output format of `testeth --jsontrace` command changed to better match output of geth's evm tool and to integrate with evmlab project.
- Changed: [#5848](https://github.com/ethereum/aleth/pull/5848) `aleth-vm --codefile <PATH>` now reads bytecode file from path and `aleth-vm --codefile - <bytecode>` now reads bytecode from standard input.
- Changed: [#5864](https://github.com/ethereum/aleth/pull/5864) Allow a user to send multiple transactions before a new block is mined.
- Removed: [#5760](https://github.com/ethereum/aleth/pull/5760) Official support for Visual Studio 2015 has been dropped. Compilation with this compiler is expected to stop working after migration to C++14.
- Removed: [#5840](https://github.com/ethereum/aleth/pull/5840) The list of precompiled contracts is not required in config files anymore.
- Removed: [#5850](https://github.com/ethereum/aleth/pull/5850) accounts section is now optional in config files.
- Fixed: [#5792](https://github.com/ethereum/aleth/pull/5792) Faster and cheaper execution of RPC functions which query blockchain state (e.g. getBalance).
- Fixed: [#5811](https://github.com/ethereum/aleth/pull/5811) RPC methods querying transactions (`eth_getTransactionByHash`, `eth_getBlockByNumber`) return correct `v` value.
- Fixed: [#5821](https://github.com/ethereum/aleth/pull/5821) `test_setChainParams` correctly initializes custom configuration of precompiled contracts.
- Fixed: [#5826](https://github.com/ethereum/aleth/pull/5826) Fix blocking bug in database rebuild functionality - users can now rebuild their databases via Aleth's '-R' switch.
- Fixed: [#5827](https://github.com/ethereum/aleth/pull/5827) Detect database upgrades and automatically rebuild the database when they occur.
- Fixed: [#5852](https://github.com/ethereum/aleth/pull/5852) Output correct original opcodes instead of synthetic `PUSHC`/`JUMPC`/`JUMPCI` in VM trace.
- Fixed: [#5829](https://github.com/ethereum/aleth/pull/5829) web3.eth.getBlock now returns block size in bytes. This requires a (automatic) database rebuild which can take a while depending on how many blocks are in the local chain.
- Fixed: [#5866](https://github.com/ethereum/aleth/pull/5866) Update output of `debug_accountRangeAt` and `eth_getTransactionCount` RPC functions to conform to Geth's output.
- Fixed: [#5865](https://github.com/ethereum/aleth/pull/5865) Fix bug which causes syncing to become permanently stuck.
",15460666
611,False,True,2019-12-12T08:04:16Z,2019-12-12T08:22:44Z,,15460666
612,False,True,2019-12-10T20:07:33Z,2019-12-10T20:25:56Z,,15460666
613,False,False,2019-11-22T15:10:46Z,2019-11-22T15:43:02Z,"- Fixed: [#5834](https://github.com/ethereum/aleth/pull/5834) Fix segmentation fault during sync.
- Fixed: [#5841](https://github.com/ethereum/aleth/pull/5841) Revert the change introduced in 1.7.0 to wait 2 secods after sending `Disconnect` to peer before closing the socket, as it caused instabilty during sync.
",15460666
614,False,False,2019-11-18T16:30:12Z,2019-11-18T16:51:32Z,- Fixed: [#5830](https://github.com/ethereum/aleth/pull/5830) Fix cost of ECADD and ECMULL for Istanbul in Mainnet and Ropsten chain configs.,15460666
615,False,False,2019-11-14T09:27:55Z,2019-11-14T09:58:53Z,"- Added: [#5537](https://github.com/ethereum/aleth/pull/5537) Creating Ethereum Node Record (ENR) at program start.
- Added: [#5571](https://github.com/ethereum/aleth/pull/5571) Support Discovery v4 ENR Extension messages.
- Added: [#5557](https://github.com/ethereum/aleth/pull/5557) Improved debug logging of full sync.
- Added: [#5564](https://github.com/ethereum/aleth/pull/5564) Improved help output of Aleth by adding list of channels.
- Added: [#5575](https://github.com/ethereum/aleth/pull/5575) Log active peer count and peer list every 30 seconds.
- Added: [#5580](https://github.com/ethereum/aleth/pull/5580) Enable syncing from ETC nodes for blocks < dao hard fork block.
- Added: [#5591](https://github.com/ethereum/aleth/pull/5591) Network logging bugfixes and improvements and add p2pcap log channel.
- Added: [#5588](https://github.com/ethereum/aleth/pull/5588) Testeth prints similar test suite name suggestions, when the name passed in `-t` argument is not found.
- Added: [#5593](https://github.com/ethereum/aleth/pull/5593) Dynamically updating host ENR.
- Added: [#5624](https://github.com/ethereum/aleth/pull/5624) Remove useless peers from peer list.
- Added: [#5634](https://github.com/ethereum/aleth/pull/5634) Bootnodes for Rinkeby and Goerli.
- Added: [#5640](https://github.com/ethereum/aleth/pull/5640) Support EIP-1702 Generalized Account Versioning Scheme (active only in Experimental fork.)
- Added: [#5691](https://github.com/ethereum/aleth/pull/5691) Istanbul support: EIP-2028 Transaction data gas cost reduction.
- Added: [#5696](https://github.com/ethereum/aleth/pull/5696) [#5708](https://github.com/ethereum/aleth/pull/5708) Istanbul support: EIP-1344 ChainID opcode.
- Added: [#5700](https://github.com/ethereum/aleth/pull/5700) [#5725](https://github.com/ethereum/aleth/pull/5725) Istanbul support: EIP 1884 Repricing for trie-size-dependent opcodes.
- Added: [#5701](https://github.com/ethereum/aleth/issues/5701) Outputs ENR text representation in admin.nodeInfo RPC.
- Added: [#5705](https://github.com/ethereum/aleth/pull/5705) Istanbul support: EIP 1108 Reduce alt_bn128 precompile gas costs.
- Added: [#5707](https://github.com/ethereum/aleth/pull/5707) Aleth waits for 2 seconds after sending disconnect to peer before closing socket.
- Added: [#5709](https://github.com/ethereum/aleth/pull/5709) [#5728](https://github.com/ethereum/aleth/pull/5728) Istanbul support: EIP-2200 Structured Definitions for Net Gas Metering.
- Added: [#5751](https://github.com/ethereum/aleth/pull/5751) Istanbul support: EIP-152 Add BLAKE2 compression function `F` precompile.
- Added: [#5755](https://github.com/ethereum/aleth/pull/5755) testeth now runs `stChainId`, `stSLoadTest`, `stSelfBalance` tests for Istanbul.
- Added: [#5758](https://github.com/ethereum/aleth/pull/5758) Istanbul support: activation in Ropsten config.
- Added: [#5762](https://github.com/ethereum/aleth/pull/5762) aleth-vm supports `--network Istanbul` option.
- Changed: [#5532](https://github.com/ethereum/aleth/pull/5532) The leveldb is upgraded to 1.22. This is breaking change on Windows and the old databases are not compatible.
- Changed: [#5559](https://github.com/ethereum/aleth/pull/5559) Update peer validation error messages.
- Changed: [#5568](https://github.com/ethereum/aleth/pull/5568) Improve rlpx handshake log messages and create new rlpx log channel.
- Changed: [#5570](https://github.com/ethereum/aleth/pull/5570) Now it's not necessary to recompile with VMTRACE flag to get VM trace log. Just use `testeth -- --vmtrace` or `aleth -v 4 --log-vmtrace`.
- Changed: [#5576](https://github.com/ethereum/aleth/pull/5576) Moved sstore_combinations and static_Call50000_sha256 tests to stTimeConsuming test suite. (testeth runs them only with `--all` flag)
- Changed: [#5589](https://github.com/ethereum/aleth/pull/5589) Make aleth output always line-buffered even when redirected to file or pipe.
- Changed: [#5602](https://github.com/ethereum/aleth/pull/5602) Better predicting external IP address and UDP port.
- Changed: [#5605](https://github.com/ethereum/aleth/pull/5605) Network logging bugfixes and improvements and add warpcap log channel.
- Changed: [#5628](https://github.com/ethereum/aleth/pull/5628) Don't try to endlessly reconnect to official Ethereum bootnodes.
- Changed: [#5632](https://github.com/ethereum/aleth/pull/5632) RocksDB support is disabled by default. Enable with `-DROCKSB=ON` CMake option.
- Changed: [#5648](https://github.com/ethereum/aleth/pull/5648) `BlockChainTests` suite is split into `BlockChainTests/ValidBlocks` and `BlockChainTests/InvalidBlocks`.
- Changed: [#5678](https://github.com/ethereum/aleth/pull/5678) Enable optimizer in aleth-interpreter by default.
- Changed: [#5675](https://github.com/ethereum/aleth/pull/5675) Disconnect from peer when syncing is disabled for peer.
- Changed: [#5676](https://github.com/ethereum/aleth/pull/5676) When receiving large batches of new block hashes, process up to 1024 hashes instead of disabling the peer.
- Changed: [#5719](https://github.com/ethereum/aleth/pull/5719) Enable support for Visual Studio 2017 on Windows.
- Changed: [#5713](https://github.com/ethereum/aleth/pull/5713) Propagate new blocks after PoW check rather than after import into the blockchain.
- Changed: [#5734](https://github.com/ethereum/aleth/pull/5734) debug_accountRangeAt RPC method is renamed to debug_accountRange to conform with geth and retesteth requirements.
- Changed: [#5735](https://github.com/ethereum/aleth/pull/5735) `testeth -t GeneralStateTests` and `testeth -t BCGeneralStateTests` commands now don't run the tests for the forks before Istanbul. To run those tests use a separate `LegacyTests` suite with commands `testeth -t LegacyTests/Constantinople/GeneralStateTests` and `testeth -t LegacyTests/Constantinople/BCGeneralStateTests -- --all`
- Changed: [#5810](https://github.com/ethereum/aleth/pull/5810) [EVMC] has been upgraded to version 7.0.0.
- Removed: [#5631](https://github.com/ethereum/aleth/pull/5631) Removed PARANOID build option.
- Fixed: [#5562](https://github.com/ethereum/aleth/pull/5562) Don't send header request messages to peers that haven't sent us Status yet.
- Fixed: [#5581](https://github.com/ethereum/aleth/pull/5581) Fixed finding neighbour nodes in Discovery.
- Fixed: [#5599](https://github.com/ethereum/aleth/pull/5600) Prevent aleth from attempting concurrent connection to node which results in disconnect of original connection.
- Fixed: [#5609](https://github.com/ethereum/aleth/pull/5609) Log valid local enode-address when external IP is not known.
- Fixed: [#5627](https://github.com/ethereum/aleth/pull/5627) Correct testeth --help log output indentation.
- Fixed: [#5644](https://github.com/ethereum/aleth/pull/5644) Avoid attempting to sync with disconnected peers.
- Fixed: [#5647](https://github.com/ethereum/aleth/pull/5647) test_importRawBlock RPC method correctly fails in case of import failure.
- Fixed: [#5664](https://github.com/ethereum/aleth/pull/5664) Behavior in corner case tests about touching empty Precompiles now agrees with geth's results.
- Fixed: [#5662](https://github.com/ethereum/aleth/pull/5662) Correct depth value when aleth-interpreter invokes `evmc_host_interface::call` callback.
- Fixed: [#5666](https://github.com/ethereum/aleth/pull/5666) aleth-interpreter returns `EVMC_INVALID_INSTRUCTION` when `INVALID` opcode is encountered and `EVMC_UNKNOWN_INSTRUCTION` for undefined opcodes.
- Fixed: [#5706](https://github.com/ethereum/aleth/pull/5706) Stop tracking sent transactions after they've been imported into the blockchain.
- Fixed: [#5687](https://github.com/ethereum/aleth/pull/5687) Limit transaction queue's dropped transaction history to 1024 transactions.
- Fixed: [#5718](https://github.com/ethereum/aleth/pull/5718) Avoid checking contract balance or destination account existence when executing self-destruct operations on Frontier and Homestead.
- Fixed: [#5803](https://github.com/ethereum/aleth/pull/5803) Client version string reported by RPC and devp2p now better matches the format used by other clients. This will allow aleth to be correctly listed on ethernodes.org.",15460666
616,False,True,2019-11-12T14:27:21Z,2019-11-12T14:59:48Z,,15460666
617,False,True,2019-11-12T13:12:38Z,2019-11-12T13:29:11Z,,15460666
618,False,True,2019-07-17T13:03:28Z,2019-07-17T13:20:49Z,,15460666
619,False,True,2019-05-16T13:44:24Z,2019-05-16T14:01:51Z,,15460666
620,False,False,2019-04-16T15:48:41Z,2019-04-16T17:55:18Z,"- Added: [#5485](https://github.com/ethereum/aleth/pull/5485) aleth-bootnode now by default connects to official Ethereum bootnodes. This can be disabled with `--no-bootstrap` flag.
- Added: [#5505](https://github.com/ethereum/aleth/pull/5505) Allow building with libc++ on Linux.
- Added: [#5514](https://github.com/ethereum/aleth/pull/5514) Improved logging in case of RPC method failures.
- Added: [#5526](https://github.com/ethereum/aleth/pull/5526) Improved logging when loading chain config json containing syntax error.
- Changed: [#5464](https://github.com/ethereum/aleth/pull/5464) Upgrade OS and compilers in the docker image for tests.
- Changed: [#5560](https://github.com/ethereum/aleth/pull/5560) Upgrade [ethash](https://github.com/chfast/ethash) library to version 0.4.4.
- Removed: [#5538](https://github.com/ethereum/aleth/pull/5538) Removed --private flag from aleth command-line arguments.
- Fixed: [#5483](https://github.com/ethereum/aleth/pull/5483) Don't ping the same node more than once in a row; also fixes the assertion failure.
- Fixed: [#5512](https://github.com/ethereum/aleth/pull/5512) Calling `eth_call` without `from` argument. 
- Fixed: [#5502](https://github.com/ethereum/aleth/pull/5502) Fix Discovery terminating prematurely because of race condition.
- Fixed: [#5452](https://github.com/ethereum/aleth/pull/5452) Correctly handle Discovery messages when the peer changes public key.
- Fixed: [#5519](https://github.com/ethereum/aleth/pull/5519) Correctly handle Discovery messages with known public key but unknown endpoint.
- Fixed: [#5523](https://github.com/ethereum/aleth/pull/5523) [#5533](https://github.com/ethereum/aleth/pull/5533) Fix syncing terminating prematurely because of race condition.
- Fixed: [#5539](https://github.com/ethereum/aleth/pull/5539) Fix logic for determining if dao hard fork block header should be requested.
- Fixed: [#5547](https://github.com/ethereum/aleth/pull/5547) Fix unnecessary slow-down of eth_flush RPC method.
- Fixed: [#5548](https://github.com/ethereum/aleth/pull/5548) Fix rlp tool for long hexadecimal string inputs.
- Fixed: [#5181](https://github.com/ethereum/aleth/issues/5181) Fix building on PowerPC architecture where -mtune=generic is not available.
",15460666
621,False,True,2019-04-11T09:38:47Z,2019-04-11T10:04:22Z,,15460666
622,False,True,2019-04-09T14:46:38Z,2019-04-09T15:06:34Z,,15460666
623,False,True,2019-02-14T10:03:51Z,2019-02-14T11:03:14Z,,15460666
624,False,False,2019-01-24T18:07:26Z,2019-01-24T18:28:58Z,,15460666
625,False,False,2019-01-16T14:37:04Z,2019-01-16T14:57:23Z,,15460666
626,False,False,2019-01-15T10:58:35Z,2019-01-15T11:19:47Z,,15460666
627,False,True,2019-01-14T07:54:53Z,2019-01-14T08:15:42Z,,15460666
628,False,True,2019-01-09T13:52:27Z,2019-01-09T14:13:20Z,,15460666
629,False,True,2019-01-09T11:57:49Z,2019-01-09T12:19:59Z,,15460666
630,False,True,2018-12-07T19:37:13Z,2018-12-07T19:53:56Z,,15460666
631,False,True,2018-11-22T16:55:55Z,2018-11-22T17:11:59Z,,15460666
632,False,True,2018-11-08T20:11:06Z,2018-11-08T20:28:50Z,,15460666
633,False,True,2018-11-03T07:52:14Z,2018-11-03T08:08:22Z,,15460666
634,False,True,2018-10-25T09:12:05Z,2018-10-25T09:28:53Z,,15460666
635,False,True,2018-10-16T10:52:41Z,2018-10-16T11:14:16Z,,15460666
636,False,False,2018-10-04T16:44:59Z,2018-10-04T17:14:00Z,,15460666
637,False,True,2018-09-17T15:20:50Z,2018-09-17T15:49:53Z,,15460666
638,False,True,2018-09-17T12:14:39Z,2018-09-17T12:40:07Z,,15460666
639,False,True,2018-09-17T11:30:28Z,2018-09-17T11:48:16Z,,15460666
640,False,True,2018-09-07T11:47:57Z,2018-09-07T12:23:41Z,,15460666
641,False,True,2018-08-28T13:58:32Z,2018-08-28T14:29:52Z,,15460666
642,False,True,2018-08-22T13:50:44Z,2018-08-22T14:08:20Z,,15460666
643,False,True,2018-08-20T15:39:42Z,2018-08-20T16:05:46Z,,15460666
644,False,True,2018-08-18T13:08:17Z,2018-08-18T13:30:44Z,,15460666
645,False,True,2018-08-10T13:14:11Z,2018-08-10T13:31:45Z,,15460666
646,False,True,2018-08-10T10:21:07Z,2018-08-10T10:36:49Z,,15460666
647,False,True,2018-07-30T09:51:05Z,2018-08-07T12:37:27Z,,15460666
648,False,True,2018-07-30T09:33:04Z,2018-07-30T09:52:49Z,,15460666
649,False,True,2018-06-16T19:13:10Z,2018-06-16T20:27:19Z,,15460666
650,False,True,2018-05-16T13:53:07Z,2018-05-16T18:39:38Z,This is a development snapshot starting the 1.4 release series of cpp-ethereum.,15460666
651,False,True,2017-04-07T17:56:28Z,2017-04-10T17:19:48Z,"The binaries are built from the following commits:

 - eth_2018-04-05_artful: 5ac09111bd0b6518365fe956e1bdb97a2db82af1
 - eth_2018-04-05_trusty: 5ac09111bd0b6518365fe956e1bdb97a2db82af1
 - aleth_2018-06-20_artful: d661ac4fec0aeffbedcdc195f67f5ded0c798278
 - aleth_2018-06-20_trusty: d661ac4fec0aeffbedcdc195f67f5ded0c798278",15460666
652,False,True,2015-02-24T17:03:43Z,2015-02-20T21:13:58Z,"Vast numbers of updates to Mix, Solidity, AlethZero, ethereum.js.

Various minor protocol changes.
",15460666
653,False,True,2015-01-13T12:20:20Z,2014-12-18T15:31:09Z,"The seventh in the Proof-of-Concept release and the final pre-audit alterations to the consensus protocol.

For binaries & installation/usage instructions, please use the [wiki](https://github.com/ethereum/cpp-ethereum/wiki).
",15460666
654,False,True,2014-10-05T18:05:01Z,2014-09-27T13:44:53Z,"Important additions for PoC-6:

Protocol
- Modified GHOST protocol targets 4 second block time.
- More efficient block-hashing, hashing uses header rather than block.
- Parallel downloading of blockchain from multiple peers.

Virtual machine:
- CALLSTATELESS opcode
- EXTCODECOPY opcode works for external contracts
- DUP_, SWAP_ opcodes
",15460666
655,False,True,2014-07-23T23:06:47Z,2014-07-23T14:50:34Z,"The 5th in the line of the Proof-of-Concept series.

This release includes:
- a HTML/JS front-end API;
- a JavaScript console;
- inbuilt support for Serpent and LLL;
- a full-featured debugger with random-access (step backwards!) capabilities;
- a fully syntax-highlighted, debugger-integrated block explorer;
- a powerful state diff engine;
- a visual miner;
- various protocol updates.

Not to mention countless other fixes and improvements.

![screenshot from 2014-07-16 18 41 38](https://cloud.githubusercontent.com/assets/138296/3672334/f80e1eee-125d-11e4-8cba-49ae11b1601e.png)

Note: Linux users can build from source with the instructions on the Wiki.

Community builders, please contact us (well... me) to get your build listed here.
",15460666
656,False,False,2018-05-10T12:37:40Z,2018-05-10T13:08:31Z,"
Changes from 5.17.0:

- Features:
  - ADDED: `table` plugin now optionally returns `distance` matrix as part of response [#4990](https://github.com/Project-OSRM/osrm-backend/pull/4990)
  - ADDED: New optional parameter `annotations` for `table` that accepts `distance`, `duration`, or both `distance,duration` as values [#4990](https://github.com/Project-OSRM/osrm-backend/pull/4990)
- Infrastructure:
   - ADDED: Updated libosmium and added protozero and vtzero libraries [#5037](https://github.com/Project-OSRM/osrm-backend/pull/5037)
   - CHANGED: Use vtzero library in tile plugin [#4686](https://github.com/Project-OSRM/osrm-backend/pull/4686)
- Profile:
   - ADDED: Bicycle profile now returns classes for ferry and tunnel routes. [#5054](https://github.com/Project-OSRM/osrm-backend/pull/5054)
   - ADDED: Bicycle profile allows to exclude ferry routes (default to not enabled) [#5054](https://github.com/Project-OSRM/osrm-backend/pull/5054)
",2436255
657,False,False,2018-04-20T12:59:15Z,2018-04-20T14:19:20Z,"  - Changes from 5.17.0:
    - Bugfixes:
      - FIXED: Do not combine a segregated edge with a roundabout [#5039](https://github.com/Project-OSRM/osrm-backend/issues/5039)
",2436255
658,False,False,2018-04-20T10:15:59Z,2018-04-20T10:50:30Z,"  - Changes from 5.17.0:
    - Bugfixes:
      - FIXED: Do not combine a segregated edge with a roundabout [#5039](https://github.com/Project-OSRM/osrm-backend/issues/5039)",2436255
659,False,False,2018-04-19T10:36:14Z,2018-04-19T11:34:39Z,"  - Changes from 5.16.0:
    - Bugfixes:
      - FIXED: deduplication of route steps when waypoints are used [#4909](https://github.com/Project-OSRM/osrm-backend/issues/4909)
      - FIXED: Use smaller range for U-turn angles in map-matching [#4920](https://github.com/Project-OSRM/osrm-backend/pull/4920)
      - FIXED: Remove the last short annotation segment in `trimShortSegments` [#4946](https://github.com/Project-OSRM/osrm-backend/pull/4946)
      - FIXED: Properly calculate annotations for speeds, durations and distances when waypoints are used with mapmatching [#4949](https://github.com/Project-OSRM/osrm-backend/pull/4949)
      - FIXED: Don't apply unimplemented SH and PH conditions in OpeningHours and add inversed date ranges [#4992](https://github.com/Project-OSRM/osrm-backend/issues/4992)
      - FIXED: integer overflow in `DynamicGraph::Renumber` [#5021](https://github.com/Project-OSRM/osrm-backend/pull/5021)
    - Profile:
      - CHANGED: Handle oneways in get_forward_backward_by_key [#4929](https://github.com/Project-OSRM/osrm-backend/pull/4929)
      - FIXED: Do not route against oneway road if there is a cycleway in the wrong direction; also review bike profile [#4943](https://github.com/Project-OSRM/osrm-backend/issues/4943)
      - CHANGED: Make cyclability weighting of the bike profile prefer safer routes more strongly [#5015](https://github.com/Project-OSRM/osrm-backend/issues/5015)
    - Guidance:
      - CHANGED: Don't use obviousness for links bifurcations [#4929](https://github.com/Project-OSRM/osrm-backend/pull/4929)
      - FIXED: Adjust Straight direction modifiers of side roads in driveway handler [#4929](https://github.com/Project-OSRM/osrm-backend/pull/4929)
      - CHANGED: Added post process logic to collapse segregated turn instructions [#4925](https://github.com/Project-OSRM/osrm-backend/pull/4925)
      - ADDED: Maneuver relation now supports `straight` as a direction [#4995](https://github.com/Project-OSRM/osrm-backend/pull/4995)
      - FIXED: Support spelling maneuver relation with British spelling [#4950](https://github.com/Project-OSRM/osrm-backend/issues/4950)
    - Tools:
      - ADDED: `osrm-routed` accepts a new property `--memory_file` to store memory in a file on disk. [#4881](https://github.com/Project-OSRM/osrm-backend/pull/4881)
      - ADDED: `osrm-datastore` accepts a new parameter `--dataset-name` to select the name of the dataset. [#4982](https://github.com/Project-OSRM/osrm-backend/pull/4982)
      - ADDED: `osrm-datastore` accepts a new parameter `--list` to list all datasets loaded into memory. [#4982](https://github.com/Project-OSRM/osrm-backend/pull/4982)
      - ADDED: `osrm-datastore` accepts a new parameter `--only-metric` to only reload the data that can be updated by a weight update (reduces memory for traffic updates). [#5002](https://github.com/Project-OSRM/osrm-backend/pull/5002)
      - ADDED: `osrm-routed` accepts a new parameter `--dataset-name` to select the shared-memory dataset to use. [#4982](https://github.com/Project-OSRM/osrm-backend/pull/4982)
    - NodeJS:
      - ADDED: `OSRM` object accepts a new option `memory_file` that stores the memory in a file on disk. [#4881](https://github.com/Project-OSRM/osrm-backend/pull/4881)
      - ADDED: `OSRM` object accepts a new option `dataset_name` to select the shared-memory dataset. [#4982](https://github.com/Project-OSRM/osrm-backend/pull/4982)
    - Internals
      - CHANGED: Updated segregated intersection identification [#4845](https://github.com/Project-OSRM/osrm-backend/pull/4845) [#4968](https://github.com/Project-OSRM/osrm-backend/pull/4968)
      - REMOVED: Remove `.timestamp` file since it was unused [#4960](https://github.com/Project-OSRM/osrm-backend/pull/4960)
    - Documentation:
      - ADDED: Add documentation about OSM node ids in nearest service response [#4436](https://github.com/Project-OSRM/osrm-backend/pull/4436)
    - Performance
      - FIXED: Speed up response time when lots of legs exist and geojson is used with `steps=true` [#4936](https://github.com/Project-OSRM/osrm-backend/pull/4936)
      - FIXED: Return iterators instead of vectors in datafacade_base functions [#4969](https://github.com/Project-OSRM/osrm-backend/issues/4969)
    - Misc:
      - ADDED: expose name for datasource annotations as metadata [#4973](https://github.com/Project-OSRM/osrm-backend/pull/4973)",2436255
660,False,False,2018-03-13T18:36:03Z,2018-03-18T12:18:11Z,"- Bugfixes:
  - FIXED: Properly calculate annotations for speeds, durations and distances when waypoints are used with mapmatching [#4949](https://github.com/Project-OSRM/osrm-backend/pull/4949)",2436255
661,False,False,2017-12-18T14:18:05Z,2017-12-18T17:21:12Z,"   - Bugfixes:
      - FIXED #4727: Erroring when a old .core file is present.
      - FIXED #4642: Update checks for EMPTY_NAMEID to check for empty name strings
      - FIXED #4738: Fix potential segmentation fault",2436255
662,False,False,2017-11-29T12:29:21Z,2017-12-01T15:07:11Z,"
- Changes from 5.14.0
  - Bugfixes:
    - FIXED: don't use removed alternative candidates in `filterPackedPathsByCellSharing`

- Changes from 5.13
  - API:
    - ADDED: new RouteStep property `driving_side` that has either ""left"" or ""right"" for that step
  - Misc:
    - ADDED: Bundles a rough (please improve!) driving-side GeoJSON file for use with `osrm-extract --location-dependent-data data/driving_side.geojson`
    - CHANGED: Conditional turn parsing is disabled by default now
    - ADDED: Adds a tool to analyze turn instruction generation in a dataset.  Useful for tracking turn-by-turn heuristic changes over time.
    - CHANGED: Internal refactoring of guidance code as a first step towards a re-runnable guidance pipeline
    - ADDED: Now publishing Node 8.x LTS binary modules
  - Profile:
    - CHANGED: Remove dependency on turn types and turn modifier in the process_turn function in the `car.lua` profile. Guidance instruction types are not used to influence turn penalty anymore so this will break backward compatibility between profile version 3 and 4.
   - Guidance:
     - ADDED: New internal flag on ""segregated intersections"" - in the future, will should allow collapsing of instructions across complex intersection geometry where humans only perceive a single maneuver
     - CHANGED: Decrease roundabout turn radius threshold from 25m to 15m - adds some ""exit the roundabout"" instructions for moderately sized roundabouts that were being missed previously
   - Docker:
     - CHANGED: switch to alpine 3.6, and use a multistage build to reduce image size
  - Build:
    - FIX: use LUA_LIBRARY_DIRS to propertly detect Lua on all platforms
  - Docs:
    - FIX: clarify description of roundabout exit instructions
  - Bugfixes:
      - FIXED: Fix bug where merge instructions got the wrong direction modifier ([PR #4670](https://github.com/Project-OSRM/osrm-backend/pull/4670))
      - FIXED: Properly use the `profile.properties.left_hand_driving` property, there was a typo that meant it had no effect
      - FIXED: undefined behaviour when alternative candidate via node is same as source node ([#4691](https://github.com/Project-OSRM/osrm-backend/issues/4691))
      - FIXED: ensure libosrm.pc is pushed to the correct location for pkgconfig to find it on all platforms
      - FIXED: don't consider empty names + empty refs as a valid name for u-turns",2436255
663,False,False,2017-10-30T19:49:24Z,2017-11-01T13:51:49Z,"# 5.13.0

This release has some exciting new features: We know have relation support in the lua profiles, and support using location dependent data. In addition to that we deprecated CoreCH, since MLD is superior.

  - Changes from 5.12:
    - Profile:
      - Append cardinal directions from route relations to ref fields to improve instructions; off by default see `profile.cardinal_directions`
      - Support of `distance` weight in foot and bicycle profiles
      - Support of relations processing
      - Added `way:get_location_tag(key)` method to get location-dependent tags https://github.com/Project-OSRM/osrm-backend/wiki/Using-location-dependent-data-in-profiles
      - Added `forward_ref` and `backward_ref` support
      - Left-side driving mode is specified by a local Boolean flag `is_left_hand_driving` in `ExtractionWay` and `ExtractionTurn`
      - Support literal values for maxspeeds in NO, PL and ZA
    - Infrastructure:
      - Lua 5.1 support is removed due to lack of support in sol2 https://github.com/ThePhD/sol2/issues/302
      - Fixed pkg-config version of OSRM
      - Removed `.osrm.core` file since CoreCH is deprecated now.
    - Tools:
      - Because of boost/program_options#32 with boost 1.65+ we needed to change the behavior of the following flags to not accept `={true|false}` anymore:
        - `--use-locations-cache=false` becomes `--disable-location-cache`
        - `--parse-conditional-restrictions=true` becomes `--parse-conditional-restrictions`
        - The deprecated options `--use-level-cache` and `--generate-edge-lookup`
    - Bugfixes:
      - Fixed #4348: Some cases of sliproads pre-processing were broken
      - Fixed #4331: Correctly compute left/right modifiers of forks in case the fork is curved.
      - Fixed #4472: Correctly count the number of lanes using the delimter in `turn:lanes` tag.
      - Fixed #4214: Multiple runs of `osrm-partition` lead to crash.
      - Fixed #4348: Fix assorted problems around slip roads.
      - Fixed #4420: A bug that would result in unnecessary instructions, due to problems in suffix/prefix detection
    - Algorithm
      - Deprecate CoreCH functionality. Usage of CoreCH specific options will fall back to using CH with core_factor of 1.0
      - MLD uses a unidirectional Dijkstra for 1-to-N and N-to-1 matrices which yields speedup.
",2436255
664,False,False,2017-09-11T16:25:24Z,2017-10-04T17:42:08Z,"This release brings some exciting new changes. On the guidance front we now emit additional `exit roundabout` and `exit rotary` instructions for roundabouts.
There is now an option to exclude certain road classes **at runtime** using the `exclude=` HTTP/Node option. By default we support `exclude=motorway`, `exclude=toll` and `exclude=ferry` in the `car.lua` profile. Keep in mind that each additional exclude combination impact the pre-processing and memory usage. This option is available both for CH and MLD.

- Guidance
  - now announcing turning onto oneways at the end of a road (e.g. onto dual carriageways)
  - Adds new instruction types at the exit of roundabouts and rotaries `exit roundabout` and `exit rotary`.
- HTTP:
  - New query parameter for route/table/match/trip plugings:
    `exclude=` that can be used to exclude certain classes (e.g. exclude=motorway, exclude=toll).
    This is configurable in the profile.
- NodeJS:
  - New query option `exclude` for the route/table/match/trip plugins. (e.g. `exclude: [""motorway"", ""toll""]`)
- Profile:
  - New property for profile table: `excludable` that can be used to configure which classes are excludable at query time.
  - New optional property for profile table: `classes` that allows you to specify which classes you expect to be used.
    We recommend this for better error messages around classes, otherwise the possible class names are infered automatically.
- Traffic:
  - If traffic data files contain an empty 4th column, they will update edge durations but not modify the edge weight.  This is useful for
    updating ETAs returned, without changing route selection (for example, in a distance-based profile with traffic data loaded).
- Infrastructure:
  - New file `.osrm.cell_metrics` created by `osrm-customize`.
- Debug tiles:
  - Added new properties `type` and `modifier` to `turns` layer, useful for viewing guidance calculated turn types on the map
",2436255
665,False,False,2017-08-17T21:44:56Z,2017-08-17T22:14:11Z,"Fresh off the press is OSRM 5.11.0.

The main new feature in this release is support for conditional turn restrictions that use ways as the via elements.  Via-way turn restrictions also now work when there is a traffic-light node on the via way.

There were also a collection of guidance improvements, and several cleanups to the build system (the API docs are now buildable again, we don't crash GCC6, and various Visual Studio problems were corrected).

[Full Changelog](https://github.com/Project-OSRM/osrm-backend/blob/5.11/CHANGELOG.md)",2436255
666,False,False,2017-08-03T20:22:10Z,2017-08-07T14:33:36Z,"The v5.10 release comes with a major feature: via-way turn restrictions. These turn restrictions occur in OpenStreetMap in the [form of a restriction relation](http://wiki.openstreetmap.org/wiki/Relation:restriction): `(fromWayId, viaWayId, toWayId)` and prevent multiple specific turns depending on the way the driver is coming from and going to.

Below are some more notable changes. Please note that in the future we plan to speed up the release process to push out stable and tested releases more often.

Give it a try!

```
osrm-extract berlin.osm.pbf
osrm-partition berlin.osrm
osrm-customize berlin.osrm
osrm-routed --algorithm=MLD berlin.osrm
```

---

Features:
- https://github.com/Project-OSRM/osrm-backend/issues/2681 - We now handle `(from, via, to)` way restrictions where `from`, `via` and `to` are ways in addition to `(from,via,to)` node restrictions we always handled. These turn restrictions prevent turns from a way via a specific way onto a way: ![](https://user-images.githubusercontent.com/12932279/28968020-4843c89e-791e-11e7-92d2-57b1f74815f6.png)
- https://github.com/Project-OSRM/osrm-backend/pull/4333 - We now handle [Throughabouts](https://en.wikipedia.org/wiki/Roundabout#Hamburger_roundabout.2Fthroughabout.2Fcut-through): ![](https://user-images.githubusercontent.com/12932279/28579814-032894aa-715e-11e7-99cc-e41a0e290387.png)
- [Emil Tin](https://github.com/emiltin) did large-scale profile refactoring work: a new version 2 profile API was added which cleans up a number of things and makes it easier to for profiles to include each other. Profiles using the old version 0 and 1 APIs are still supported.


---

[Full Changelog](https://github.com/Project-OSRM/osrm-backend/blob/5.10/CHANGELOG.md#5100)",2436255
667,False,False,2017-07-19T16:58:11Z,2017-07-19T17:05:48Z,"With the v5.9 release we continue to stabilize our Multi-Level Dijkstra (MLD) pipeline which we introduced in v5.7 allowing for incredibly fast traffic updates while still being able to handle requests in the milliseconds. In addition to feature parity for the Contraction Hierarchies (CH) table plugin in MLD this release implements a brand new alternative routes algorithm which we tailored specifically for MLD making heavy use of its partitioner. We also radically decreased our preprocessing times by partially removing STXXL, without any significant memory increase.
Other great features of this release is the support for exit numbers and user-defined classes in the response.


Give it a try!

```
osrm-extract berlin.osm.pbf
osrm-partition berlin.osrm
osrm-customize berlin.osrm
osrm-routed --algorithm=MLD berlin.osrm
```

---

- https://github.com/Project-OSRM/osrm-backend/pull/4202 - Implements the table plugin for MLD. The pull request contains some performance measurements.
- https://github.com/Project-OSRM/osrm-backend/issues/3905 and https://github.com/Project-OSRM/osrm-backend/pull/4047 - Implements multiple alternative routes for MLD: you can now request multiple alternative routes. Please read the issue and pull request for details, images and gifs.
- https://github.com/Project-OSRM/osrm-backend/pull/4215 - Implements exit numbers / names. Picks up the `junction:ref` way tag; adds an `exits` property to the response's `RouteStep`. The companion project [osrm-tag-rewriter](https://github.com/mapbox/osrm-tag-rewriter) now also re-writes exit numbers / names into `junction:ref`.
- https://github.com/Project-OSRM/osrm-backend/pull/4252 - stxxl (`libstxxl-dev`) is optional now but still on by default. Disable it via `cmake .. -DCMAKE_BUILD_TYPE=Release -DENABLE_STXXL=Off`. Processing will then happen in memory which should be fine unless you try to process the planet on your toaster.
- https://github.com/Project-OSRM/osrm-backend/pull/4204 and https://github.com/Project-OSRM/osrm-backend/issues/4290 - Adds a `classes` property to the response intersection array indicating a road's class. Can be set in the profiles on each way. The use-case for this is flagging a road as a toll, ferry or motorway road class which clients can than pick up from the response.
- https://github.com/Project-OSRM/osrm-backend/issues/4260 and https://github.com/Project-OSRM/osrm-backend/pull/4296 - Deprecates the `UseLane` instruction which was needed for lane anticipation (guide users in the correct lane for multi-hop steps) before there was an intersection array in the response. Lane anticipation will continue to constrain lanes in the response intersection array but we will no longer emit an extra `UseLane` instruction. In addition lane anticipation will now trigger based on a distance threshold of some hundreds of meters (depending on numbers of lanes to cross).
- https://github.com/Project-OSRM/osrm-backend/pull/4258 - In addition to respecting `highway=construction` tags we now discard old-style `construction=*` and `proposed=*` ways.


---

[Full Changelog](https://github.com/Project-OSRM/osrm-backend/blob/5.9/CHANGELOG.md)",2436255
668,False,False,2017-06-19T17:01:50Z,2017-06-21T07:56:01Z,"The 5.8 release is focused on long overdue memory and disk usage reductions across the board (on the planet roughly: memory 10% decrease, disk 15% decrease). With some minor issues fixed in the guidance engine this release targets stability and benefits on the infrastructure side. Notable additional changes and features are listed below. The full changelog is [here](https://github.com/Project-OSRM/osrm-backend/blob/5.8/CHANGELOG.md#580).

Give it a try!

```
osrm-extract berlin.osm.pbf
osrm-partition berlin.osrm
osrm-customize berlin.osrm
osrm-routed --algorithm=MLD berlin.osrm
```

---

#### Infrastructure
- https://github.com/Project-OSRM/osrm-backend/pull/4096 - Command-line tools (`osrm-extract`, `osrm-contract`, `osrm-routed`, and others) now return error codes and legible error messages for common problem scenarios. You can find the list of error codes [here](https://github.com/Project-OSRM/osrm-backend/blob/5.8/include/osrm/error_codes.hpp#L18-L26).
- https://github.com/Project-OSRM/osrm-backend/pull/4036 - `.osrm.nodes` file was renamed to `.nbg_nodes` and `.ebg_nodes` was added.

#### Conditional Turn Restrictions
- https://github.com/Project-OSRM/osrm-backend/pull/3841 - Added conditional restriction support with `parse-conditional-restrictions=true|false` to `osrm-extract`. This option saves conditional turn restrictions to the `.restrictions` file for parsing later. Added `parse-conditionals-from-now=utc time stamp` and `--time-zone-file=/path/to/file` to `osrm-contract`.

#### Profiles
- https://github.com/Project-OSRM/osrm-backend/pull/4147 - Speed up pre-processing by only running the Lua node function for nodes that have tags (by default, can be changed). Cuts OSM file parsing time in half.

#### API
- https://github.com/Project-OSRM/osrm-backend/pull/4039 - Adds an `approaches` parameter to the API. The use-case is to approach a waypoint on the side of the road that deposits or picks up your passenger without needing to cross the road and then continue routing you without issuing a u-turn. Read about it [here](https://www.openstreetmap.org/user/Jean-Maxime%20FILLAU/diary/41741).
- https://github.com/Project-OSRM/osrm-backend/pull/4134 - Adds a `polyline6` option to the HTTP API for sending coordinates in the request polyline encoded with a precision of 6.

---

[Full Changelog](https://github.com/Project-OSRM/osrm-backend/blob/5.8/CHANGELOG.md#580)",2436255
669,False,False,2017-04-21T08:49:09Z,2017-04-25T09:08:06Z,"After months of work this release is the first to feature an additional routing algorithm next to Contraction Hierarchies. It's based on a Multi-Level Dijkstra approach partitioning the road network and allowing for incredible fast weight updates. This is a trade-off between processing time and query speed: MLD based queries are about a factor two to three slower then queries on a full CH (still in the milliseconds range).

The new algorithm is still experimental and we are working on feature parity with Contraction Hierarchies: so far the `route` and `match` plugins are supported. For a continental sized network we expect partitioning to take in the order of minutes and fully updating weights under a minute.

- [Here](http://oxidase.github.io/maps/mld/) is a replay for a route between Munich and Berlin (wait for it to explore the search space)
- [Here](https://api.mapbox.com/styles/v1/mokob/ciyn43e6i00ag2skexope7eg5.html?title=true&access_token=pk.eyJ1IjoibW9rb2IiLCJhIjoiY2lnaTJqczFyMHN2bHZpa3I0dTdwbGlqYSJ9.B8zhP12x93OLT7tHv0xSXw#5.7/50.681/10.693) is a example partition on Germany

Quickstart:

    osrm-extract data.osm.pbf
    osrm-partition data.osrm
    osrm-customize data.osrm
    osrm-routed --algorithm=MLD data.osrm

#### Node.js Bindings

We merged the Node.js bindings `node-osrm` into the `osrm-backend` repository, with the hopes of an easier development workflow. You can build them using CMake via

    cmake .. -DCMAKE_BUILD_TYPE=Release -DENABLE_NODE_BINDINGS=On -DENABLE_MASON=On
    
or just use `npm install osrm` for pre-built packages.

#### Map Matching

New option `gaps=split|ignore` to enable / disbale track splitting.

New option `tidy=true|false` to simplify traces automatically and remove blobs.
Use this option or tidy your noisy traces (e.g. with [geojson-tidy](https://github.com/mapbox/geojson-tidy)) can increase the Map Matching's quality.

#### Profiles

Important in case you're using the segment function: we added a `force_split_edges` flag to the global properties which - when set to true - guarantees that the segment function will be called for all segments, but also doubles memory consumption in the worst case.

---

[Full Changelog](https://github.com/Project-OSRM/osrm-backend/blob/v5.7.0/CHANGELOG.md#570)",2436255
670,False,False,2017-02-23T11:42:13Z,2017-02-23T13:08:29Z,"The 5.6 release includes some great new features:

Most importantly we now support the infamous issue  [#77](https://github.com/Project-OSRM/osrm-backend/issues/77): Routing on generic weights, not only the duration. The car profile makes use of this new feature by penalizing turns onto restricted streets (HOV-only, `access=destination`) heavily. This makes sure we don't route through them but still support starting/stopping from them. This increased our resource usage quite a bit, so if you are running global deployments make sure you have enough headroom before upgrading.

We also dropped our dependency on Luabind and replaced it with the awesome sol2 that we can bundle as header-only library.

The trip plugin also saw some improvements with regard to allowing you to do non-roundtrips and explicitly selecting the first / last node as start and end-points.

---

#### Tags
- Never route over `highway=steps` in the car profile even if access tags allow it. This is a case of Wiki vs real-data where we pick the sensible solution for users. See [#3435](https://github.com/Project-OSRM/osrm-backend/issues/3435) and [#3668](https://github.com/Project-OSRM/osrm-backend/pull/3668).
- Support `destination:street` tag. See [#3543](https://github.com/Project-OSRM/osrm-backend/pull/3543).
- Support `surface=sett` for the bike profile. See [#3657](https://github.com/Project-OSRM/osrm-backend/pull/3657).
- We now respect `access=destination` and only route there when the start/destination is on that road.
- We now route over hov-only roads, when the start point is already on one.

#### API
- Added an option `generate_hints` (`true` by default) which allows to prevent the engine to generate hints. If there is no need for hints use this to make the response considerably smaller. See [#3456](https://github.com/Project-OSRM/osrm-backend/pull/3456).
- `annotations` now also supports a list of specific values like `distances,nodes,speeds` to only include data selectively.
- The trip plugin supports two new parameters `round_trip={true,false}` and `source={first,any}` and `destination={first,any}`.

#### Infrastructure
- We disabled Link-Time Optimization by default when building from source as it lead to complications with old compilers and binutils. If your system is recent enough and you know what you are doing pass `-DENABLE_LTO=ON` to CMake. See [#3524](https://github.com/Project-OSRM/osrm-backend/pull/3524).
- Updated to the latest libosmium version which allows us to skip PBF metadata improving parsing speed up by 10-20%. If you need metadata on OSM Objects (think: a way object's version) use `osrm-extract --with-osm-metadata`. See [#3373](https://github.com/Project-OSRM/osrm-backend/pull/3373).
- Luabind is no longer required. We removed Luabind completely and vendor sol2 for bindings now. See [#3382](https://github.com/Project-OSRM/osrm-backend/pull/3382).
- We refactored the [car](https://github.com/Project-OSRM/osrm-backend/blob/master/profiles/car.lua) / [bike](https://github.com/Project-OSRM/osrm-backend/blob/master/profiles/bicycle.lua) and [foot](https://github.com/Project-OSRM/osrm-backend/blob/master/profiles/foot.lua) profile. They should be more readable and easier to get into now. Thanks Emil Tin for your efforts here.

#### Tools
- We re-wrote the `osrm-components` tool: it generates a GeoJSON small components layer now. See [#3570](https://github.com/Project-OSRM/osrm-backend/pull/3570).
- There is a new tool `osrm-extract-conditionals` for processing conditional tags (opening hour grammar). See [#3414](https://github.com/Project-OSRM/osrm-backend/issues/3414) and [#3415](https://github.com/Project-OSRM/osrm-backend/pull/3415).

---

[Full Changelog](https://github.com/Project-OSRM/osrm-backend/blob/master/CHANGELOG.md#560)
",2436255
671,False,False,2017-01-19T07:33:08Z,2017-01-19T23:56:53Z,"Bugfix release which includes the following changes from v5.5.3:
- PR #3561 - added missing backwards speeds for cycleways in bicycle profile
- PR #3515 - adjusted number of `nodes` in `annotation`
- Ticket #3430 - Fix possible division by zero by clamping latitude to +/- 85.05
- PR #3555 - Fix an error that occurs when a road forks immediately after exiting a ferry
- PR #3575 - Don't emit invalid turn types for obvious turns at sliproads and roundabouts.
",2436255
672,False,False,2016-12-21T23:55:53Z,2016-12-22T05:01:47Z,"This is a bugfix release.  We reverted https://github.com/Project-OSRM/osrm-backend/pull/3184 as it had a major performance impact on dense graphs (i.e. the walk and bike profiles).
",2436255
673,False,False,2016-12-16T21:58:21Z,2016-12-16T23:23:50Z,"Bugfix release to correct a deadlock using `osrm-datastore` in combination with multiple reader processes.

The bug in question is https://github.com/Project-OSRM/osrm-backend/issues/3455
",2436255
674,False,False,2016-12-15T10:12:43Z,2016-12-15T10:16:35Z,"<!--- @TheMarex  please tweet the release (maybe some highlights) and then re-tweet from Mapbox --->

#### Tags
- Added a more accurate weight penalty for ways tagged with [`oneway=alternating`](http://wiki.openstreetmap.org/wiki/Tag:oneway%3Dalternating). These tags are for narrow bridges or tunnels on which the direction of traffic alternates every `n` minutes and are sometimes traffic light controlled.
- Brought guidance support in line with guidance on roundabouts for [`junction=circular`](https://wiki.openstreetmap.org/wiki/Tag:junction%3Dcircular) tagged junctions. These junctions can be thought of as roundabouts where traffic within the roundabout does not always have right of way (examples [[1]](http://www.openstreetmap.org/way/288767318#map=19/52.51863/13.45327), [[2]](http://www.openstreetmap.org/way/37294337#map=19/52.49906/13.41832)).
- Support for [`destination:forward`, `destination:backward`, `destination:ref:forward`, `destination:ref:backward`](http://wiki.openstreetmap.org/wiki/Key:destination) also in combination with [`oneway=-1`](http://wiki.openstreetmap.org/wiki/Key:oneway) tags.

#### Guidance
- Polished up turn angle classification by detecting offsets due to lanes and minor variations due to data modelling inaccuracies. Turn angles now better resemble what users experience.
- More accurate classification of sliproad scenarios (examples [[1]](http://www.openstreetmap.org/way/33912098#map=19/52.53781/13.34441), [[2]](http://www.openstreetmap.org/way/4597207#map=19/52.52725/13.38695)). When the maneuver is obvious, we now emit a single instruction for turning onto and then immediately off of sliproads.
- Improvements to the name change heuristic reduce new name announcements.

#### API
- We now support precision 5 (default) and 6 polyline geometries with the new parameter, `geometries=polyline6`.

#### Infrastructure
- Improvements to the Hilbert space filling curve contribute to improvements to geospatial lookup performance.
- The ever useful [Debug Map](http://map.project-osrm.org/debug/#15.93/52.5145/13.3516) now displays turn penalties at higher zoom levels.
- We now provide [online documentation](http://project-osrm.org/docs/v5.5.0/api) for the API (requests, responses, examples).
- Shared memory now supports multiple clients (multiple instances of libosrm).
- Improved error reporting, especially for I/O and file loading.

---

[Full Changelog](https://github.com/Project-OSRM/osrm-backend/blob/master/CHANGELOG.md#550)
",2436255
675,False,False,2016-10-04T12:20:17Z,2016-10-04T13:18:34Z,"With OSRM v5.4.0 we continued our focus on Guidance and improved lane support which was introduced in v5.3.

Some additional highlights:
- Better classification for Roundabout Turns and roundabouts in general
- Improved sliproad detection
- Improved turn penalty function fit to real data
- Support for Lane Access Tags
- Designated HOV Lanes
- Improved Lane Anticipation for subsequent quick lane changes
- Name change detection heuristic reducing the number of instructions 
- Eliding instructions for quick turns in Staggered Intersections
- More aggressive instruction collapsing
- Limiting merge instructions to Motorways

---

[Full Changelog](https://github.com/Project-OSRM/osrm-backend/blob/master/CHANGELOG.md#540)
",2436255
676,False,True,2020-03-19T02:22:48Z,2020-03-19T02:42:09Z,"NOTE: This build is by no means stable or intended for serious use. It's a complete rewrite of the entire program and only here to simplify testing of what has been implemented. For any serious work, stick to the 0.1.x releases below.",115342681
677,False,True,2019-11-11T06:05:02Z,2019-11-11T06:26:27Z,"- Addressed issue where renders sometimes froze mid-render
- Fixed broken translation files
- Added confirmation dialog when creating a sequence from footage",115342681
678,False,False,2019-07-09T15:16:17Z,2019-08-22T02:46:25Z,A very minor update that includes more user-submitted translations.,115342681
679,False,False,2019-05-02T14:19:00Z,2019-05-02T14:53:26Z,Travis CI build log: https://travis-ci.org/olive-editor/olive/builds/527343693,115342681
680,False,False,2018-12-23T01:01:12Z,2018-12-23T01:06:19Z,,115342681
681,False,False,2018-12-02T09:06:52Z,2018-12-23T01:05:53Z,,115342681
682,False,True,2020-03-24T00:57:31Z,2020-03-24T02:04:29Z,"## Instructions
Set the ""C_Cpp.updateChannel"" setting to ""Insiders"" to auto-install the latest Insiders vsix. Or if that doesn't work (such as in the remote scenario with a version older than 0.26.3-insiders2), manually download the vsix that matches the target OS and run the ""Install from VSIX"" command in VS Code.

## Requirements
* VS Code 1.30.0 or later.

## Version 0.27.0-insiders4: March 23, 2019
### Bug Fixes
* Fix `Go to Symbol in Workspace` not applying `search.exclude` settings. [#5099](https://github.com/microsoft/vscode-cpptools/issues/5099)
* Fix some settings not being editable in the UI. [PR #5126](https://github.com/microsoft/vscode-cpptools/pull/5126)
* Fix `cpp_properties.json` error squiggles not appearing. [#5131](https://github.com/microsoft/vscode-cpptools/issues/5131)
* Fix the wrong workspace folder settings being used. [#5134](https://github.com/microsoft/vscode-cpptools/issues/5134)
* Fix the ""Open File…"" scenario without a workspace folder (again). [#5136](https://github.com/microsoft/vscode-cpptools/issues/5136)
* Fix changes to `files.exclude` having no effect if they're identical to the previous workspace folder's. [#5138](https://github.com/microsoft/vscode-cpptools/issues/5138)
* Fix the debugger not working for macOS High Sierra or older. [#5146](https://github.com/microsoft/vscode-cpptools/issues/5146)
* Fix `search.exclude` not applying if there are > 1 symbols matching in the excluded file. [#5152](https://github.com/microsoft/vscode-cpptools/issues/5152)
* Fix tag parsing (workspace symbol searching) not working on Windows 7. [#5155](https://github.com/microsoft/vscode-cpptools/issues/5155)
* Fix a race condition that could cause the Outline, `Find All References`, etc. to stop working.
* Fix `Rescan Workspace` running an extra time per workspace folder.
* Fix a random crash after settings change.

### Known Issues
* The configuration UI and json shows errors when an older version of `cl.exe` is set in the `compilerPath`. [#5151](https://github.com/microsoft/vscode-cpptools/issues/5151)
* The ""Open File..."" scenarios (without a workspace) shows ""Tag Parser initializing"" (all symbol operations fail). [#5176](https://github.com/microsoft/vscode-cpptools/issues/5176)
* The debugger doesn't work until the extension is reinstalled after macOS High Sierra or older is upgraded to a newer OS. [#5171](https://github.com/microsoft/vscode-cpptools/issues/5171)
* The Outline view may sometimes be incorrect for files outside the workspace. [#3949](https://github.com/microsoft/vscode-cpptools/issues/3949)
",54800346
683,False,True,2020-03-13T23:58:26Z,2020-03-16T20:42:46Z,"## Instructions
Set the ""C_Cpp.updateChannel"" setting to ""Insiders"" to auto-install the latest Insiders vsix. Or if that doesn't work (such as in the remote scenario with a version older than 0.26.3-insiders2), manually download the vsix that matches the target OS and run the ""Install from VSIX"" command in VS Code.

## Requirements
* VS Code 1.30.0 or later.

## Bug Fixes
* Fix update to clang-format 9.0.1 (and without shared library dependencies). [#2887](https://github.com/microsoft/vscode-cpptools/issues/2887), [#3174](https://github.com/microsoft/vscode-cpptools/issues/3174)
* Add new setting `C_Cpp.debugger.useBacktickCommandSubstitution` to fix debugging when CShell is the remote default shell. [#4015](https://github.com/microsoft/vscode-cpptools/issues/4015)
  * @Helloimbob [PR #5053](https://github.com/microsoft/vscode-cpptools/pull/5053)
* Fix Outline view not updating fast enough after switching branches. [#4894](https://github.com/microsoft/vscode-cpptools/issues/4894)
* Fix extension randomly getting stuck while communicating with the IntelliSense process on Mac. [#4989](https://github.com/microsoft/vscode-cpptools/issues/4989)
* Fix completion results appearing after numeric literals. [#5019](https://github.com/microsoft/vscode-cpptools/issues/5019)
* Fix crashes that sometimes occur after adding multiple workspace folders. [#5059](https://github.com/microsoft/vscode-cpptools/issues/5059)
* Add URI's to the debug logging for messages (e.g. `fileChanged`). [#5062](https://github.com/microsoft/vscode-cpptools/issues/5062)
* Fix crashes that sometimes occurs after switching color themes. [#5063](https://github.com/microsoft/vscode-cpptools/issues/5063)
* Fix `clang_format_sortIncludes` setting not getting used. [#5068](https://github.com/microsoft/vscode-cpptools/issues/5068)
* Fix error after updating a document too soon after startup. [#5076](https://github.com/microsoft/vscode-cpptools/issues/5076)
* Fix IntelliSense process crashing on macOS 10.12 or older after a settings change. [#5090](https://github.com/microsoft/vscode-cpptools/issues/5090)
* Fix Pause (break all) not working on Mac with Attach debugging.
* Other language server crash fixes.

## Known Issues
* When a workspace is used, all the folders get the wrong workspace folder settings. [#5134](https://github.com/microsoft/vscode-cpptools/issues/5134)
* The open file scenario doesn't work as expected. [#5136](https://github.com/microsoft/vscode-cpptools/issues/5136)
* The debugger doesn't work for macOS High Sierra or older. [#5146](https://github.com/microsoft/vscode-cpptools/issues/5146)
* Pause (break all) doesn't work (in certain scenarios) when debugging on Mac. Workaround: use `kill -2 <pid>` to trigger the break.

",54800346
684,False,True,2020-03-04T22:56:15Z,2020-03-05T01:41:57Z,"## Instructions
Set the ""C_Cpp.updateChannel"" setting to ""Insiders"" to auto-install the latest Insiders vsix. Or if that doesn't work (such as in the remote scenario with a version older than 0.26.3-insiders2), manually download the vsix that matches the target OS and run the ""Install from VSIX"" command in VS Code.

## Requirements
* VS Code 1.30.0 or later.

### Bug Fixes
* Fix the `Open File...` scenario (without a workspace folder). [#5049](https://github.com/microsoft/vscode-cpptools/issues/5049)
* Fix `browsePath` null reference that can occur with some configuration providers. [PR #5055](https://github.com/microsoft/vscode-cpptools/pull/5055)

## Known Issues (that we plan to fix in next release)
* Extension sometimes crashes after adding multiple folders at the same time. [#5059](https://github.com/microsoft/vscode-cpptools/issues/5059)
* Extension sometimes crashes after changing color themes with a multiroot workspace. [#5063](https://github.com/microsoft/vscode-cpptools/issues/5063)
* We're investigating several other known crashes...
* Pause (break all) doesn't work when debugging on Mac. Workaround: use `kill -2 <pid>` to trigger the break.
* The extension can randomly get stuck while doing IntelliSense operations on Mac (not a regression compared to 0.26.3). [#4989](https://github.com/microsoft/vscode-cpptools/issues/4989)
",54800346
685,False,True,2020-03-03T20:53:09Z,2020-03-04T02:53:28Z,"## Instructions
Set the ""C_Cpp.updateChannel"" setting to ""Insiders"" to auto-install the latest Insiders vsix. Or if that doesn't work (such as in the remote scenario with a version older than 0.26.3-insiders2), manually download the vsix that matches the target OS and run the ""Install from VSIX"" command in VS Code.

## Requirements
* VS Code 1.30.0 or later.

### Enhancements
* Improved multi-root implementation with a single language server process and database for the entire workspace (shared between workspace folders). Fixes most [multi-root bugs](https://github.com/microsoft/vscode-cpptools/issues?q=is%3Aopen+is%3Aissue+label%3A%22Feature%3A+Multiroot%22+label%3A%22fixed+%28release+pending%29%22+milestone%3A0.27.0).
* Update to clang-format 9.0.1 (and without shared library dependencies). [#2887](https://github.com/microsoft/vscode-cpptools/issues/2887), [#3174](https://github.com/microsoft/vscode-cpptools/issues/3174)
* Rename language server processes to `cpptools` and `cpptools-srv` (IntelliSense process). [#4364](https://github.com/microsoft/vscode-cpptools/issues/4364)
* Add support for `-iframework` in `compile_commands.json`. [#4819](https://github.com/microsoft/vscode-cpptools/issues/4819)
* Add `cpptools.setActiveConfigName` command. [#4870](https://github.com/microsoft/vscode-cpptools/issues/4870)
  * @aleksey-sergey [PR 4893](https://github.com/microsoft/vscode-cpptools/pull/4893)
* Default to the bundled `clang-format` if its version is newer. [#4963](https://github.com/microsoft/vscode-cpptools/issues/4963)
* Include only `lldb-mi` for macOS.
  * Fix visualization of standard library types in lldb. [#1768](https://github.com/microsoft/vscode-cpptools/issues/1768)
  * Enable debugging support on macOS Catalina. [#3829](https://github.com/microsoft/vscode-cpptools/issues/3829)

### Bug Fixes
* Fix issue in which the user is not again prompted to use a custom configuration provider if settings files have been deleted. [#2346](https://github.com/microsoft/vscode-cpptools/issues/2346)
* Fix ""Unrecognized format of field ""msg"" in result"" on macOS. [#2492](https://github.com/microsoft/vscode-cpptools/issues/2492)
* Fix IntelliSense using too much CPU when switching branches. [#2806](https://github.com/microsoft/vscode-cpptools/issues/2806)
* Fix for timeout on slow terminals while debugging. [#2889](https://github.com/microsoft/vscode-cpptools/issues/2889)
  * @Epikem [PR MIEngine#965](https://github.com/microsoft/MIEngine/pull/965)
* Fix non-localized text. [#4481](https://github.com/microsoft/vscode-cpptools/issues/4481), [#4879](https://github.com/microsoft/vscode-cpptools/issues/4879)
* Fix issues with paths containing certain Unicode sequences on Mac. [#4712](https://github.com/microsoft/vscode-cpptools/issues/4712)
* Fix IntelliSense parsing bugs and crashes. [#4717](https://github.com/microsoft/vscode-cpptools/issues/4717), [#4798](https://github.com/microsoft/vscode-cpptools/issues/4798)
* Fix configuration UI disabling `compilerPath` if no default compiler is found. [#4727](https://github.com/microsoft/vscode-cpptools/issues/4727)
* Fix issue with providing custom configurations for files specified using URIs schemes we do not recognize. [#4889](https://github.com/microsoft/vscode-cpptools/issues/4889)
* Fix failure to detect CL.exe if VS Installer files are stored on a drive other than the system drive. [#4929](https://github.com/microsoft/vscode-cpptools/issues/4929)
* Fix issue with cancellation of a `Rename` operation causing subsequent `Find All References` and `Rename` operations to fail.  [#5022](https://github.com/microsoft/vscode-cpptools/issues/5022)

## Known Issues (that we plan to fix in next release)
* The `Open File...` scenario is broken (without a workspace folder). [#5049](https://github.com/microsoft/vscode-cpptools/issues/5049)
* Pause (break all) doesn't work when debugging on Mac. Workaround: use `kill -2 <pid>` to trigger the break.
* The extension can randomly get stuck while doing IntelliSense operations on Mac (not a regression compared to 0.26.3). [#4989](https://github.com/microsoft/vscode-cpptools/issues/4989)
",54800346
686,False,False,2020-01-22T01:46:50Z,2020-01-22T21:53:32Z,"## Instructions
To use the ""offline"" .vsix (that doesn't download OS-based dependencies on extension activation), download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.

## Requirements
* VS Code 1.30.0 or later.

## Changes
### Bug Fixes
* IntelliSense bug fixes. [#2774](https://github.com/microsoft/vscode-cpptools/issues/2774)
* Improve memory usage in projects with a large number of files. [#4714](https://github.com/microsoft/vscode-cpptools/issues/4714)
* Fix a crash when failing to launch external executables on Linux and Mac. [#3607](https://github.com/microsoft/vscode-cpptools/issues/3607)
* Update output of `C/C++: Log Diagnostics` to include the correct set of defines when custom configurations or compile commands are used. [#3631](https://github.com/microsoft/vscode-cpptools/issues/3631) [#4270](https://github.com/microsoft/vscode-cpptools/issues/4270)
* Fix Insiders channel not working on remote targets. [#3874](https://github.com/microsoft/vscode-cpptools/issues/3874)
* Fix `compile_commands.json` prompt appearing when a configuration provider is used. [#3972](https://github.com/microsoft/vscode-cpptools/issues/3972)
* Improve IntelliSense performance with range-v3. [#4414](https://github.com/microsoft/vscode-cpptools/issues/4414)
* Fix template members not being nested under the template type in the Outline view. [#4466](https://github.com/microsoft/vscode-cpptools/issues/4466)
* Fix an issue in which failure to invoke a compiler could result in a hang on Linux and Mac. [#4627](https://github.com/microsoft/vscode-cpptools/issues/4627)
* Fix custom configurations sometimes not being applied to headers. [#4649](https://github.com/microsoft/vscode-cpptools/issues/4649)
* Fix headers opening into header-only TU's instead of TU's for candidate source files. [#4696](https://github.com/microsoft/vscode-cpptools/issues/4696), [#3985](https://github.com/microsoft/vscode-cpptools/issues/3985)
* Fix the missing description of `C_Cpp.clang_format_style`.
  * @Enna1 [PR 4734](https://github.com/microsoft/vscode-cpptools/pull/4734)
* Fix Insiders channel not auto-downgrading after an Insiders vsix is unpublished. [#4760](https://github.com/microsoft/vscode-cpptools/issues/4760)
* Fix compiler querying with more than 40 `compilerArgs`. [#4791](https://github.com/microsoft/vscode-cpptools/issues/4791)
* Fix an issue in which files may be unnecessarily removed from the tag parser database on startup, if using a custom configuration provider, resulting in a large number of files being reparsed. [#4802](https://github.com/microsoft/vscode-cpptools/issues/4802)
* Fix an issue in which `Build and Debug Active File` would fail to detect a compiler, without a compiler present in `compilerPath`. [#4834](https://github.com/microsoft/vscode-cpptools/issues/4834)
* Add a version check for `-break-insert` so later versions of `lldb-mi` can be used as a `midebugger`. [MIEngine#946](https://github.com/microsoft/MIEngine/issues/946)
* Fix clang-cl detection for system includes and defines. [#4000](https://github.com/microsoft/vscode-cpptools/issues/4000)
* Fix a bug that could cause the browse database threads to get stuck.

### Enhancements
* If clang-format is found in the environment path, that version will take precedence over the copy of clang-format bundled with the extension. [#3569](https://github.com/microsoft/vscode-cpptools/issues/3569)
* When tag parsing is complete, and includer/includee relationships become available, header-only TU's will be replaced with TU's for candidate source files, if available. [#4969](https://github.com/microsoft/vscode-cpptools/issues/4696)

## Known Issues

* None so far.",54800346
687,False,True,2020-01-17T00:49:53Z,2020-01-17T02:29:56Z,"## Instructions
Set the ""C_Cpp.updateChannel"" setting to ""Insiders"" to auto-install the latest Insiders vsix. Or if that doesn't work (such as in the remote scenario prior to 0.26.3-insiders2), manually download the vsix that matches the target OS and run the ""Install from VSIX"" command in VS Code.

## Requirements
* VS Code 1.30.0 or later.

### Bug Fixes
* Update dependent modules to address a security warning due to use of a deprecated API.  [#4381](https://github.com/microsoft/vscode-cpptools/issues/4381)
* Fix an issue in which files may be unnecessarily removed from the tag parser database on startup, if using a custom configuration provider, resulting in a large number of files being reparsed.  [#4802](https://github.com/microsoft/vscode-cpptools/issues/4802)
* Fix an issue in which `Build and Debug Active File` would fail to detect a compiler, without a compiler present in `compilerPath`.  [#4834](https://github.com/microsoft/vscode-cpptools/issues/4834)
* Fix a crash when failing to launch external executables on Linux and Mac.
* Add a version check for `-break-insert` so later versions of `lldb-mi` can be used as a `midebugger`. [MIEngine#946](https://github.com/microsoft/MIEngine/issues/946)

### Enhancements
* If clang-format is found in the environment path, that version will take precedence over the copy of clang-format bundled with the extension. [#3569](https://github.com/microsoft/vscode-cpptools/issues/3569)

## Known Issues
* None so far.
",54800346
688,False,True,2020-01-08T23:58:10Z,2020-01-09T02:52:50Z,"## Instructions
Set the ""C_Cpp.updateChannel"" setting to ""Insiders"" to auto-install the latest Insiders vsix. Or if that doesn't work (such as in the remote scenario prior to 0.26.3-insiders2), manually download the vsix that matches the target OS and run the ""Install from VSIX"" command in VS Code.

## Requirements
* VS Code 1.30.0 or later.

### Bug Fixes
* Improve memory usage in projects with a large number of files. [#3326](https://github.com/microsoft/vscode-cpptools/issues/3326)
* Fix `compile_commands.json` prompt appearing when a configuration provider is used. [#3972](https://github.com/microsoft/vscode-cpptools/issues/3972)
* Improve IntelliSense performance with range-v3. [#4414](https://github.com/microsoft/vscode-cpptools/issues/4414)
* Fix regression crashes. [#3607](https://github.com/microsoft/vscode-cpptools/issues/3607), [#4770](https://github.com/microsoft/vscode-cpptools/issues/4770)
* Fix compiler querying with more than 40 `compilerArgs`. [#4791](https://github.com/microsoft/vscode-cpptools/issues/4791)
* Fix files being removed from the database on startup with a configuration provider. [#4802](https://github.com/microsoft/vscode-cpptools/issues/4802)
* Fix a bug that could cause the browse database threads to get stuck.

## Known Issues
* None so far.
",54800346
689,False,True,2019-12-19T02:11:40Z,2019-12-19T02:44:50Z,"## Instructions
Set the ""C_Cpp.updateChannel"" setting to ""Insiders"" to auto-install the latest Insiders vsix. Or if that doesn't work (such as in the remote scenario), manually download the vsix that matches the target OS and run the ""Install from VSIX"" command in VS Code.

## Requirements
* VS Code 1.30.0 or later.

## Version 0.26.3-insiders2: December 18, 2019
### Bug Fixes
* Fix IntelliSense regression crashes. [#4754](https://github.com/microsoft/vscode-cpptools/issues/4754)
* Fix Insiders channel not auto-downgrading after an Insiders vsix is unpublished. [#4760](https://github.com/microsoft/vscode-cpptools/issues/4760)
* Fix Insiders channel not working on remote targets. [#3874](https://github.com/microsoft/vscode-cpptools/issues/3874)

## Version 0.26.3-insiders: December 16, 2019
### Bug Fixes
* Fix clang-cl detection for system includes and defines.
* IntelliSense bug fixes. [#2774](https://github.com/microsoft/vscode-cpptools/issues/2774)
* Update output of `C/C++: Log Diagnostics` to include the correct set of defines when custom configurations or compile commands are used. [#3631](https://github.com/microsoft/vscode-cpptools/issues/3631) [#4270](https://github.com/microsoft/vscode-cpptools/issues/4270)
* Fix an issue in which failure to invoke a compiler could result in a hang on Linux and Mac. [#4627](https://github.com/microsoft/vscode-cpptools/issues/4627)
* Fix template members not being nested under the template type in the Outline view. [#4466](https://github.com/microsoft/vscode-cpptools/issues/4466)
* Fix custom configurations sometimes not being applied to headers. [#4649](https://github.com/microsoft/vscode-cpptools/issues/4649)
* Fix headers opening into header-only TU's instead of TU's for candidate source files. [#4696](https://github.com/microsoft/vscode-cpptools/issues/4696)
* Fix the missing description of `C_Cpp.clang_format_style`.
  * @Enna1 [PR 4734](https://github.com/microsoft/vscode-cpptools/pull/4734)

### Enhancements
* When tag parsing is complete, and includer/includee relationships become available, header-only TU's will be replaced with TU's for candidate source files, if available.

## Known Issues
* None so far.
",54800346
690,False,False,2019-12-02T22:57:18Z,2019-12-03T00:58:27Z,"## Instructions
To use the ""offline"" .vsix (that doesn't download OS-based dependencies on extension activation), download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.

## Requirements
* VS Code 1.30.0 or later.

## Changes
### Enhancements
* Reworked how a source file is selected for TU creation when opening a header file. [#2856](https://github.com/microsoft/vscode-cpptools/issues/2856)
* Updated the default value of the `C_Cpp.intelliSenseCachePath` setting to a path under `XDG_CACHE_HOME` on Linux, or `~/Library/Cache` on MacOS. [#3979](https://github.com/microsoft/vscode-cpptools/issues/3979)
* Reset memory usage of the IntelliSense process if it grows beyond a threshold. [#4119](https://github.com/microsoft/vscode-cpptools/issues/4119)
* Add validation that the new symbol name provided to 'Rename Symbol' is a valid identifier. Add the setting `C_Cpp.renameRequiresIdentifier` to allow that verification to be disabled. [#4409](https://github.com/microsoft/vscode-cpptools/issues/4409)
* Enable setting of breakpoints in CUDA sources. [PR #4585](https://github.com/microsoft/vscode-cpptools/pull/4585)
  * Paul Taylor (@trxcllnt)
* Deferred TU creation until the file is visible in the editor. This avoids the overhead of TU creation when the file is opened by VS Code internally for IntelliSense operations. [#4458](https://github.com/microsoft/vscode-cpptools/issues/4458)

### Bug Fixes
* Fix child process creation when the Windows code page is set to a language with non-ASCII characters and there are non-ASCII characters in the extension's install path. [#1560](https://github.com/microsoft/vscode-cpptools/issues/1560)
* Fix path canonicalization of UNC paths to avoid duplicate files opening with different casing. [#2528](https://github.com/microsoft/vscode-cpptools/issues/2528), [#3980](https://github.com/microsoft/vscode-cpptools/issues/3980)
* Fix an issue in which a header may be opened without IntelliSense due to creation of a TU from a source file that includes the header in an inactive region. [#4320](https://github.com/microsoft/vscode-cpptools/issues/4320)
* Fix a hang in the extension process that can occur when using a scope named 'interface'.  [#4470](https://github.com/microsoft/vscode-cpptools/issues/4470)
* Fix an issue with the Rename UI that could cause the rename to not be applied. [#4504](https://github.com/microsoft/vscode-cpptools/issues/4504)
* Show an error message when a Rename fails due to the symbol not being found.  [#4510](https://github.com/microsoft/vscode-cpptools/issues/4510)
* Fix an issue with `launch.json` creation due to localized strings containing quotes. [#4526](https://github.com/microsoft/vscode-cpptools/issues/4526)
* Fix an issue with configuration error squiggles not being applied unless the setting was set in both `c_cpp_properties.json` and `settings.json`. [PR #4538](https://github.com/microsoft/vscode-cpptools/pull/4538)
* Fix document symbol for outline view and breadcrumbs on Windows 7. [#4536](https://github.com/microsoft/vscode-cpptools/issues/4536).
* Add support for `ms-vscode.cmake-tools` configurationProvider id. [#4586](https://github.com/microsoft/vscode-cpptools/issues/4586).
* Fix an issue in which cancellation of Find All References could result in an exception. [#2710](https://github.com/microsoft/vscode-cpptools/issues/2710)
* Fix sort order of files in Find All References and Rename UI. [#4615](https://github.com/microsoft/vscode-cpptools/issues/4615)
* Fix an issue in which localized Chinese strings would not be displayed on systems with case-sensitive file systems. [#4619](https://github.com/microsoft/vscode-cpptools/issues/4619)
* Fix an issue in which files with an extention of `.H` were not correctly associated with C++. [#4632](https://github.com/microsoft/vscode-cpptools/issues/4632)
* Fix an issue in which -m64 or -m32 were not being passed to gcc, causing the reported system includes and system defines to not match the requested `intelliSenseMode`. [#4635](https://github.com/microsoft/vscode-cpptools/issues/4635)

## Known Issues

* One report of a memory issue regression in the main process -- let us know if anyone has more repro info. [#3326](https://github.com/microsoft/vscode-cpptools/issues/3326)",54800346
691,False,True,2019-11-26T00:27:34Z,2019-11-26T02:02:12Z,"## Instructions
Set the ""C_Cpp.updateChannel"" setting to ""Insiders"" to auto-install the latest Insiders vsix. Or if that doesn't work (such as in the remote scenario), manually download the vsix that matches the target OS and run the ""Install from VSIX"" command in VS Code.

## Requirements
* VS Code 1.30.0 or later.

## Changes
### Bug Fixes
* Fix an issue in which a header may be opened in a TU as C instead of C++. [#4632](https://github.com/microsoft/vscode-cpptools/issues/4632)
* Fix an issue introduced in the prior insiders release in which compiler probing would fail if gcc/clang did not support x86 or x64 architectures. [#4657](https://github.com/microsoft/vscode-cpptools/issues/4657)

## Known Issues
* None so far.
",54800346
692,False,True,2019-11-22T01:05:13Z,2019-11-22T01:45:24Z,"## Instructions
Set the ""C_Cpp.updateChannel"" setting to ""Insiders"" to auto-install the latest Insiders vsix. Or if that doesn't work (such as in the remote scenario), manually download the vsix that matches the target OS and run the ""Install from VSIX"" command in VS Code.

## Requirements
* VS Code 1.30.0 or later.

## Changes
### Enhancements
* Deferred TU creation until the file is visible in the editor. This avoids the overhead of TU creation when the file is opened by VS Code internally for IntelliSense operations. [#4458](https://github.com/microsoft/vscode-cpptools/issues/4458)

### Bug Fixes
* Fix an issue in which cancellation of Find All References could result in an exception. [#2710](https://github.com/microsoft/vscode-cpptools/issues/2710)
* Fix sort order of files in Find All References and Rename UI. [#4615](https://github.com/microsoft/vscode-cpptools/issues/4615) 
* Fix an issue in which localized Chinese strings would not be displayed on systems with case-sensitive file systems. [#4619](https://github.com/microsoft/vscode-cpptools/issues/4619)
* Fix an issue in 0.26.2-insiders in which memory cleanup in the native IntelliSense process might result in a crash. [#4630](https://github.com/microsoft/vscode-cpptools/issues/4630)
* Fix an issue in which files with an extention of `.H` were not correctly associated with C++. [#4632](https://github.com/microsoft/vscode-cpptools/issues/4632)
* Fix an issue in which -m64 or -m32 were not being passed to gcc, causing the reported system includes and system defines to not match the requested `intelliSenseMode`. [#4635](https://github.com/microsoft/vscode-cpptools/issues/4635)

## Known Issues

* Compiler querying fails for ARM or other non-x86/x64 compilers that don't accept -m64 or -m32. [#4653](https://github.com/microsoft/vscode-cpptools/issues/4653)
",54800346
693,False,True,2019-11-12T18:10:32Z,2019-11-12T21:38:57Z,"## Instructions
Set the ""C_Cpp.updateChannel"" setting to ""Insiders"" to auto-install the latest Insiders vsix. Or if that doesn't work (such as in the remote scenario), manually download the vsix that matches the target OS and run the ""Install from VSIX"" command in VS Code.

## Requirements
* VS Code 1.30.0 or later.

## Changes
### Enhancements
* Reworked how a source file is selected for TU creation when opening a header file. [#2856](https://github.com/microsoft/vscode-cpptools/issues/2856)
* Updated the default value of the `C_Cpp.intelliSenseCachePath` setting to a path under `XDG_CACHE_HOME` on Linux, or `~/Library/Cache` on MacOS. [#3979](https://github.com/microsoft/vscode-cpptools/issues/3979)
* Reset memory usage of the IntelliSense process if it grows beyond a threshold. [#4119](https://github.com/microsoft/vscode-cpptools/issues/4119)
* Add validation that the new symbol name provided to 'Rename Symbol' is a valid identifier. Add the setting `C_Cpp.renameRequiresIdentifier` to allow that verification to be disabled. [#4409](https://github.com/microsoft/vscode-cpptools/issues/4409)
* Enable setting of breakpoints in CUDA sources. [PR #4585](https://github.com/microsoft/vscode-cpptools/pull/4585)
  * Paul Taylor (@trxcllnt)

### Bug Fixes
* Fix child process creation when the Windows code page is set to a language with non-ASCII characters and there are non-ASCII characters in the extension's install path. [#1560](https://github.com/microsoft/vscode-cpptools/issues/1560)
* Fix path canonicalization of UNC paths to avoid duplicate files opening with different casing. [#2528](https://github.com/microsoft/vscode-cpptools/issues/2528), [#3980](https://github.com/microsoft/vscode-cpptools/issues/3980)
* Fix an issue in which a header may be opened without IntelliSense due to creation of a TU from a source file that includes the header in an inactive region. [#4320](https://github.com/microsoft/vscode-cpptools/issues/4320)
* Fix a hang in the extension process that can occur when using a scope named 'interface'.  [#4470](https://github.com/microsoft/vscode-cpptools/issues/4470)
* Fix an issue with the Rename UI that could cause the rename to not be applied. [#4504](https://github.com/microsoft/vscode-cpptools/issues/4504)
* Show an error message when a Rename fails due to the symbol not being found.  [#4510](https://github.com/microsoft/vscode-cpptools/issues/4510)
* Fix an issue with `launch.json` creation due to localized strings containing quotes. [#4526](https://github.com/microsoft/vscode-cpptools/issues/4526)
* Fix an issue with configuration error squiggles not being applied unless the setting was set in both `c_cpp_properties.json` and `settings.json`. [PR #4538](https://github.com/microsoft/vscode-cpptools/pull/4538)
* Fix document symbol for outline view and breadcrumbs on Windows 7. [#4536](https://github.com/microsoft/vscode-cpptools/issues/4536).
* Add support for `ms-vscode.cmake-tools` configurationProvider id. [#4586](https://github.com/microsoft/vscode-cpptools/issues/4586).

## Known Issues

* None so far.
",54800346
694,False,False,2019-10-26T02:01:24Z,2019-10-28T20:56:11Z,"## Instructions
To use the ""offline"" .vsix (that doesn't download OS-based dependencies on extension activation), download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.

## Requirements
* VS Code 1.30.0 or later.

## Changes
### Bug Fixes
* Fix `launch.json` creation when using non-English display languages. [#4464](https://github.com/microsoft/vscode-cpptools/issues/4464)
* Fix CHS translation. [#4422](https://github.com/microsoft/vscode-cpptools/issues/4422)
* Fix debugging hang when Windows 10 Beta Unicode (UTF-8) support is enabled. [#1527](https://github.com/microsoft/vscode-cpptools/issues/1527)

## Known Issues

* None so far.
",54800346
695,False,False,2019-10-15T23:42:02Z,2019-10-16T02:42:05Z,"## Instructions
To use the ""offline"" .vsix (that doesn't download OS-based dependencies on extension activation), download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.

## Requirements
* VS Code 1.30.0 or later.

## Changes
### New Features
* Add localization support (translated text) via `Configure Display Language`. [#7](https://github.com/microsoft/vscode-cpptools/issues/7)
* Add `Rename Symbol` with a pending rename UI. [#296](https://github.com/microsoft/vscode-cpptools/issues/296),  [PR #4277](https://github.com/microsoft/vscode-cpptools/pull/4277)
* Add support for navigation breadcrumbs and nested symbols in the Outline view (and removed the Navigation status bar item). [#2230](https://github.com/microsoft/vscode-cpptools/issues/2230)
* Add support for C++/CX (`/ZW`, `/ZW:nostdlib`, `/FI`, `/FU`, and `/AI` compiler arguments). [#3039](https://github.com/microsoft/vscode-cpptools/issues/3039)
* Add a tree view UI for the other C++ references results. [#4079](https://github.com/microsoft/vscode-cpptools/issues/4079)

### Enhancements
* App support for .rsp files in `compile_commands.json`. [#1718](https://github.com/microsoft/vscode-cpptools/issues/1718)
* Add support for `SymbolLoadInfo` to `launch.json`. [#3324](https://github.com/microsoft/vscode-cpptools/issues/3324)
* Enable `${workspaceFolder}` in `compilerPath` and `compilerArgs`. [#3440](https://github.com/microsoft/vscode-cpptools/issues/3440)
* Add support for parsing more file types by default. [#3567](https://github.com/microsoft/vscode-cpptools/issues/3567)
* Move status icons to the left to minimize shifting and change the red flame to use the foreground color. [#4198](https://github.com/microsoft/vscode-cpptools/issues/4198)

### Bug Fixes
* Fix querying of non-ENU compilers. [#2874](https://github.com/microsoft/vscode-cpptools/issues/2874)
* Fix `Find All References` not confirming references of method overrides in an inheritance hierarchy. [#4078](https://github.com/microsoft/vscode-cpptools/issues/4078)
* Fix missing references on the last line. [#4150](https://github.com/microsoft/vscode-cpptools/issues/4150)
* Fix `Go to Definition` on implicit default constructors. [#4162](https://github.com/microsoft/vscode-cpptools/issues/4162)
* Fix configuration prompts from appearing if a configuration provider is set. [#4168](https://github.com/microsoft/vscode-cpptools/issues/4168)
* Fix vcpkg code action for missing includes with more than one forward slash. [PR #4172](https://github.com/microsoft/vscode-cpptools/pull/4172)
* Fix parsing of `__has_include` (and other system macros) with gcc. [#4193](https://github.com/microsoft/vscode-cpptools/issues/4193)
* Fix tag parse database not getting updated after changes occur to unopened files in the workspace. [#4211](https://github.com/microsoft/vscode-cpptools/issues/4211)
* Fix `files.exclude` ending with `/` being treated like a per-file exclude (which aren't enabled by default). [#4262](https://github.com/microsoft/vscode-cpptools/issues/4262)
* Fix `Find All References` incorrect results for string and comment references. [#4279](https://github.com/microsoft/vscode-cpptools/issues/4279)
* Fix bug with forced includes in `compile_commands.json`. [#4293](https://github.com/microsoft/vscode-cpptools/issues/4293)
* Fix `Find All References` giving `Not a Reference` for constructors of templated classes. [#4345](https://github.com/microsoft/vscode-cpptools/issues/4345)
* Fix squiggles appearing after a multi-edit replace or rename. [#4351](https://github.com/microsoft/vscode-cpptools/issues/4351)
* Fix `gcc-x86` and `clang-x86` modes. [#4353](https://github.com/microsoft/vscode-cpptools/issues/4353)
* Fix crashes if the database can't be created. [#4359](https://github.com/microsoft/vscode-cpptools/issues/4359)
* Fix bugs with comment references. [#4371](https://github.com/microsoft/vscode-cpptools/issues/4371), [#4372](https://github.com/microsoft/vscode-cpptools/issues/4372)

## Known Issues

* With non-EN display languages: Unable to create 'launch.json' file inside the '.vscode' folder (Cannot read property 'name' of undefined). [#4464](https://github.com/microsoft/vscode-cpptools/issues/4464)",54800346
696,False,True,2019-10-09T02:28:39Z,2019-10-09T03:35:21Z,"## Instructions
Set the ""C_Cpp.updateChannel"" setting to ""Insiders"" to auto-install the latest Insiders vsix. Or if that doesn't work (such as in the remote scenario), manually download the vsix that matches the target OS and run the ""Install from VSIX"" command in VS Code.

## Requirements
* VS Code 1.30.0 or later.

### Bug Fixes
* Fix crash in document outline causing the extension to shut down. [#4386](https://github.com/microsoft/vscode-cpptools/issues/4386)
* Fix document outline showing no results with nested namespaces. [#4389](https://github.com/microsoft/vscode-cpptools/issues/4389)
* Fix missing references on the last line. [#4150](https://github.com/microsoft/vscode-cpptools/issues/4150)
* Fix crashes if the database can't be created. [#4359](https://github.com/microsoft/vscode-cpptools/issues/4359)
* Fix bugs with comment references. [#4371](https://github.com/microsoft/vscode-cpptools/issues/4371), [#4372](https://github.com/microsoft/vscode-cpptools/issues/4372)
* Improve reliability for `Rename` and `Find All References`. [#4378](https://github.com/microsoft/vscode-cpptools/pull/4378)

## Known Issues

* Find All References when a previous operation is ""confirming references"" can cause the 2nd operation to show ""Cannot confirm references"". [#4407](https://github.com/microsoft/vscode-cpptools/issues/4407)
* Rename (and Find All References) gives incorrect results for comment references with UTF-8 characters > 1 byte if UTF-8 characters > 1 byte precede the comment reference. [#4372](https://github.com/microsoft/vscode-cpptools/issues/4372)
",54800346
697,False,True,2019-10-03T17:07:54Z,2019-10-03T20:31:32Z,"## Instructions
Set the ""C_Cpp.updateChannel"" setting to ""Insiders"" to auto-install the latest Insiders vsix. Or if that doesn't work (such as in the remote scenario), manually download the vsix that matches the target OS and run the ""Install from VSIX"" command in VS Code.

## Requirements
* VS Code 1.30.0 or later.

### New Features
* Add localization support (translated text) via `Configure Display Language`. [#7](https://github.com/microsoft/vscode-cpptools/issues/7)
* Add `Rename Symbol` with a pending rename UI. [#296](https://github.com/microsoft/vscode-cpptools/issues/296),  [PR #4277](https://github.com/microsoft/vscode-cpptools/pull/4277)
* Add support for navigation breadcrumbs and nested symbols in the Outline view (and removed the Navigation status bar item). [#2230](https://github.com/microsoft/vscode-cpptools/issues/2230)
* Add a tree view UI for the other C++ references results. [#4079](https://github.com/microsoft/vscode-cpptools/issues/4079)

### Enhancements
* Add support for `SymbolLoadInfo` to `launch.json`. [#3324](https://github.com/microsoft/vscode-cpptools/issues/3324)
* Enable `${workspaceFolder}` in `compilerPath` and `compilerArgs`. [#3440](https://github.com/microsoft/vscode-cpptools/issues/3440)
* Add support for parsing more file types by default. [#3567](https://github.com/microsoft/vscode-cpptools/issues/3567)
* Move status icons to the left to minimize shifting and change the red flame to use the foreground color. [#4198](https://github.com/microsoft/vscode-cpptools/issues/4198)

### Bug Fixes
* Fix querying of non-ENU compilers. [#2874](https://github.com/microsoft/vscode-cpptools/issues/2874)
* Fix `Find All References` not confirming references of method overrides in an inheritance hierarchy. [#4078](https://github.com/microsoft/vscode-cpptools/issues/4078)
* Fix `Go to Definition` on implicit default constructors. [#4162](https://github.com/microsoft/vscode-cpptools/issues/4162)
* Fix configuration prompts from appearing if a configuration provider is set. [#4168](https://github.com/microsoft/vscode-cpptools/issues/4168)
* Fix vcpkg code action for missing includes with more than one forward slash. [PR #4172](https://github.com/microsoft/vscode-cpptools/pull/4172)
* Fix parsing of `__has_include` (and other system macros) with gcc. [#4193](https://github.com/microsoft/vscode-cpptools/issues/4193)
* Fix tag parse database not getting updated after changes occur to unopened files in the workspace. [#4211](https://github.com/microsoft/vscode-cpptools/issues/4211)
* Fix `files.exclude` ending with `/` being treated like a per-file exclude (which aren't enabled by default). [#4262](https://github.com/microsoft/vscode-cpptools/issues/4262)
* Fix `Find All References` incorrect results for string and comment references. [#4279](https://github.com/microsoft/vscode-cpptools/issues/4279)
* Fix bug with forced includes in `compile_commands.json`. [#4293](https://github.com/microsoft/vscode-cpptools/issues/4293)
* Fix `Find All References` giving `Not a Reference` for constructors of templated classes. [#4345](https://github.com/microsoft/vscode-cpptools/issues/4345)
* Fix squiggles appearing after a multi-edit replace or rename. [#4351](https://github.com/microsoft/vscode-cpptools/issues/4351)
* Fix `gcc-x86` and `clang-x86` modes. [#4353](https://github.com/microsoft/vscode-cpptools/issues/4353)

## Known Issues

* Rename (and Find All References) gives incorrect results for comment references with UTF-8 characters > 1 byte. [#4383 4372](https://github.com/microsoft/vscode-cpptools/issues/4372)
* An IntelliSense crash that should be fixed in the final release. [#4302](https://github.com/microsoft/vscode-cpptools/issues/4302)
",54800346
698,False,False,2019-08-28T22:27:34Z,2019-08-30T00:27:21Z,"## Instructions
To use the ""offline"" .vsix (that doesn't download OS-based dependencies on extension activation), download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.

## Requirements
* VS Code 1.30.0 or later.

## Changes
### Bug Fixes
* Fix `Switch Header/Source` for `.H` and `.C` targets. [#3048](https://github.com/microsoft/vscode-cpptools/issues/3048)
* Fix `C_Cpp.updateChannel` not respecting `extensions.autoUpdate`. [#3632](https://github.com/microsoft/vscode-cpptools/issues/3632)
* Fix duplicate content appearing after formatting of a new file (2nd fix). [#4091](https://github.com/microsoft/vscode-cpptools/issues/4091)
* Fix links in `Log Diagnostics` output. [#4122](https://github.com/microsoft/vscode-cpptools/issues/4122)
* Fix `NullReferenceException` when debugging if `""description""` is missing. [#4125](https://github.com/microsoft/vscode-cpptools/issues/4125)
* Fix `files.exclude` processing when using `\\`. [#4127](https://github.com/microsoft/vscode-cpptools/issues/4127)
* Fix bug when attaching to an elevated process on Linux. [#4133](https://github.com/microsoft/vscode-cpptools/issues/4133)
* Fix IntelliSense-based `Go to Definition` failing for a nested class in a template class. [#4135](https://github.com/microsoft/vscode-cpptools/issues/4135)
* Fix incorrect configuration squiggles with `compilerPath` when variables are used. [#4141](https://github.com/microsoft/vscode-cpptools/issues/4141)
  * @mistersandman [PR #4142](https://github.com/microsoft/vscode-cpptools/pull/4142)
* Fix `executeReferenceProvider` when code is selected. [#4147](https://github.com/microsoft/vscode-cpptools/issues/4147)
* Fix code action for resolving missing includes via the `vcpkg` dependency manager. [PR #4156](https://github.com/microsoft/vscode-cpptools/pull/4156)

## Known Issues

* None so far.",54800346
699,False,False,2019-08-21T01:59:53Z,2019-08-22T00:54:39Z,"## Instructions
To use the ""offline"" .vsix (that doesn't download OS-based dependencies on extension activation), download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.

## Requirements
* VS Code 1.30.0 or later.

## Changes
### New Features
* Add `Find All References` (Experimental Version). [#15](https://github.com/microsoft/vscode-cpptools/issues/15)
  * Please refer to [Find All References](https://github.com/microsoft/vscode-cpptools/labels/Feature%3A%20Find%20All%20References) for proposed future improvements, such as [#4079](https://github.com/microsoft/vscode-cpptools/issues/4079).
* Add `-x86` options for `intelliSenseMode`. [#2275](https://github.com/microsoft/vscode-cpptools/issues/2275), [#2312](https://github.com/microsoft/vscode-cpptools/issues/2312)
* Add `c++20` option to `cppStandard`. [#3448](https://github.com/microsoft/vscode-cpptools/issues/3448)
* Add a code action for resolving missing includes via the `vcpkg` dependency manager. [PR #3791](https://github.com/microsoft/vscode-cpptools/pull/3791)

### Enhancements
* Added support for compile commands: 
  * `-iquote`. [#2088](https://github.com/microsoft/vscode-cpptools/issues/2088)
  * `-imacros`. [#2417](https://github.com/microsoft/vscode-cpptools/issues/2417)
  * `-idirafter`(`--include-directory-after` & `--include-directory-after=`). [#3713](https://github.com/microsoft/vscode-cpptools/issues/3713)
  * `-imsvc`. [#4032](https://github.com/microsoft/vscode-cpptools/issues/4032)
* Switch to using VS Code's `Go to Declaration`. [#2959](https://github.com/microsoft/vscode-cpptools/issues/2959)
* Added `compilerArgs` property setting. [PR #3950](https://github.com/microsoft/vscode-cpptools/pull/3950)
* Added support for V3 API. [#3987](https://github.com/microsoft/vscode-cpptools/pull/3987)
* Add `not supported` messages for ARM and Alpine containers. [PR #4027](https://github.com/microsoft/vscode-cpptools/pull/4027)
* Add validation for paths from `env` variables. [#3912](https://github.com/microsoft/vscode-cpptools/issues/3912)

### Bug Fixes
* Fix wrong type of `this` pointer. [#2303](https://github.com/microsoft/vscode-cpptools/issues/2303)
* Fix previous cache path not deleted when new cache path is specified. Note that the VS Code bug [Microsoft/vscode#59391](https://github.com/microsoft/vscode/issues/59391) still occurs on the settings UI, but this fix should delete any incomplete path names as the extension receives changes from the cache path setting. [#3644](https://github.com/microsoft/vscode-cpptools/issues/3644).
* Fix broken shell script when launch/attaching as root. [#3711](https://github.com/microsoft/vscode-cpptools/issues/3711)
  * Christian A. Jacobsen (@ChristianJacobsen) [PR MIEngine#906](https://github.com/microsoft/MIEngine/pull/906)
* Fix "".H"" files not appearing in include completion results on Linux/macOS. [#3744](https://github.com/microsoft/vscode-cpptools/issues/3744)
* Fix `compile_commands.json` file changes not updated. [#3864](https://github.com/microsoft/vscode-cpptools/issues/3864).
* Fix `Failed to parse` error message in the open file scenario. [#3888](https://github.com/microsoft/vscode-cpptools/issues/3888)
* Fix loading the wrong symbols when creating or copying a file. [#3897](https://github.com/microsoft/vscode-cpptools/issues/3897)
* Fix IntelliSense process crash in clang mode. [#3898](https://github.com/microsoft/vscode-cpptools/issues/3898)
* Fix IntelliSense-based `Go to Definition` failing with `using namespace`. [#3902](https://github.com/microsoft/vscode-cpptools/issues/3902), [#4018](https://github.com/microsoft/vscode-cpptools/issues/4018)
* Fix completion not showing results for smart pointers. [#3926](https://github.com/microsoft/vscode-cpptools/issues/3926), [#3930](https://github.com/microsoft/vscode-cpptools/issues/3930)
* Fix `clang_format_path` cannot be set in workspace settings. [#3937](https://github.com/microsoft/vscode-cpptools/issues/3937)
* Fix typos and grammar in documentation.
  * @pi1024e [PR #4014](https://github.com/microsoft/vscode-cpptools/pull/4014)
* Fix NullReferenceException when unable to launch and an unresolved parameter exists in the string. This was causing a useless error message. [#4024](https://github.com/microsoft/vscode-cpptools/issues/4024), [#4090](https://github.com/microsoft/vscode-cpptools/issues/4090)
* Fix debugger can't debug file whose folder path includes a parenthesis. [#4030](https://github.com/microsoft/vscode-cpptools/issues/4030)
* Fix duplicate content appearing after formatting of a new file. [#4091](https://github.com/microsoft/vscode-cpptools/issues/4091)
* Fix `files.exclude` bug on Windows. [#4095](https://github.com/microsoft/vscode-cpptools/issues/4095)
* Fix NullReferenceException when `cwd` is null.  [MIEngine#911](https://github.com/microsoft/MIEngine/issues/911)
* Fix wrong IntelliSense for C++ types after editing within a function and after a lambda.

## Known Issues

* `NullReferenceException` when debugging if `""description""` is missing. [#4125](https://github.com/microsoft/vscode-cpptools/issues/4125)
* [Find All References](https://github.com/microsoft/vscode-cpptools/labels/Feature%3A%20Find%20All%20References) issues.
* C++20 support is incomplete (approximately equal to the support in VS 2019 16.3). More support will be gradually added in future releases, e.g. [#4088](https://github.com/microsoft/vscode-cpptools/issues/4088)",54800346
700,False,True,2019-08-15T22:23:21Z,2019-08-16T00:32:20Z,"## Instructions
Set the ""C_Cpp.updateChannel"" setting to ""Insiders"" to auto-install the latest Insiders vsix. Or if that doesn't work (such as in the remote scenario), manually download the vsix that matches the target OS and run the ""Install from VSIX"" command in VS Code.

## Requirements
* VS Code 1.30.0 or later.

### Enhancements
* Enable `Find All References` without checking `C_Cpp.experimentalFeatures`.
* Fix `Find All References` progress bar not increasing as often as it should.
* Add `not supported` messages for ARM and Alpine containers. [PR #4027](https://github.com/microsoft/vscode-cpptools/pull/4027)
* Add support for `-imsvc` compile commands flag. [#4032](https://github.com/microsoft/vscode-cpptools/issues/4032)

### Bug Fixes
* Fix IntelliSense process crash in clang mode. [#3898](https://github.com/microsoft/vscode-cpptools/issues/3898)
* Fix completion not showing results for smart pointers. [#3930](https://github.com/microsoft/vscode-cpptools/issues/3930)
* Fix `Cannot confirm reference` sometimes being shown instead of `Inactive reference`. [#4041](https://github.com/microsoft/vscode-cpptools/issues/4041)
* Fix bug when `compile_commands.json` changes. [#4058](https://github.com/microsoft/vscode-cpptools/issues/4058)
* Fix wrong IntelliSense for C++ types after editing within a function and after a lambda.

## Known Issues

* It fails to run on Mac 10.12. [#4096](https://github.com/microsoft/vscode-cpptools/issues/4096)
* In remote scenarios like Remote-SSH, the extension may not install successfully when using the ""Insiders"" updateChannel. [#3874](https://github.com/microsoft/vscode-cpptools/issues/3874)
* [Find All References](https://github.com/microsoft/vscode-cpptools/labels/Feature%3A%20Find%20All%20References) issues.
* The following doesn't work: ""Add support for resolving missing includes via the vcpkg dependency manager."" [PR #3791](https://github.com/microsoft/vscode-cpptools/pull/3791)
",54800346
701,False,True,2019-08-09T00:57:58Z,2019-08-10T01:36:25Z,"## Instructions
Set the ""C_Cpp.updateChannel"" setting to ""Insiders"" to auto-install the latest Insiders vsix. Or if that doesn't work (such as in the remote scenario), manually download the vsix that matches the target OS and run the ""Install from VSIX"" command in VS Code.

## Requirements
* VS Code 1.30.0 or later.

## Changes
### New Features
* Add `Find All References` when `C_Cpp.experimentalFeatures` is set to `""Enabled""`. [#15](https://github.com/microsoft/vscode-cpptools/issues/15)
* Add `-x86` options for `intelliSenseMode`. [#2312](https://github.com/microsoft/vscode-cpptools/issues/2312)
* Add `c++20` option to `cppStandard`. [#3448](https://github.com/microsoft/vscode-cpptools/issues/3448)
* Add support for resolving missing includes via the `vcpkg` dependency manager. [PR #3791](https://github.com/microsoft/vscode-cpptools/pull/3791)

### Enhancements
* Added support for compile commands: 
  * `-iquote`. [#2088](https://github.com/microsoft/vscode-cpptools/issues/2088)
  * `-imacros`. [#2417](https://github.com/microsoft/vscode-cpptools/issues/2417)
  * `-idirafter`(`--include-directory-after` & `--include-directory-after=`). [#3713](https://github.com/microsoft/vscode-cpptools/issues/3713)
* Switch to using VS Code's `Go to Declaration`. [#2959](https://github.com/microsoft/vscode-cpptools/issues/2959)
* Added `compilerArgs` property setting. [PR #3950](https://github.com/microsoft/vscode-cpptools/pull/3950)
* Added support for V3 API. [#3987](https://github.com/microsoft/vscode-cpptools/pull/3987)

### Bug Fixes
* Fix previous cache path not deleted when new cache path is specified. Note that the VS Code bug [Microsoft/vscode#59391](https://github.com/microsoft/vscode/issues/59391) still occurs on the settings UI, but this fix should delete any incomplete path names as the extension receives changes from the cache path setting. [#3644](https://github.com/microsoft/vscode-cpptools/issues/3644).
* Fix `compile_commands.json` file changes not updated. [#3864](https://github.com/microsoft/vscode-cpptools/issues/3864).
* Fix `Failed to parse` error message in the open file scenario. [#3888](https://github.com/microsoft/vscode-cpptools/issues/3888)
* Fix IntelliSense-based `Go to Definition` failing with `using namespace`. [#3902](https://github.com/microsoft/vscode-cpptools/issues/3902)
* Fix typos and grammar in documentation.
  * @pi1024e [PR #4014](https://github.com/microsoft/vscode-cpptools/pull/4014)

## Known Issues

* In certain remote scenarios like Remote-SSH, the extension may not install successfully when using the ""Insiders"" updateChannel. [#3874](https://github.com/microsoft/vscode-cpptools/issues/3874)
* More C++20 support and IntelliSense bug fixes will be added in the next Insiders release. [#3930](https://github.com/microsoft/vscode-cpptools/issues/3930)
* ""Inactive references"" are sometimes incorrectly reported as ""Cannot confirm reference"": [#4041](https://github.com/microsoft/vscode-cpptools/issues/4041)
* ""Click to preview"" is disabled for ""Peek References"": [#4040](https://github.com/microsoft/vscode-cpptools/issues/4040)
* Other [Find All References](https://github.com/microsoft/vscode-cpptools/labels/Feature%3A%20Find%20All%20References) issues.
",54800346
702,False,False,2019-07-19T19:33:53Z,2019-07-22T19:41:34Z,"## Instructions
To use the ""offline"" .vsix (that doesn't download OS-based dependencies on extension activation), download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.

## Requirements
* VS Code 1.30.0 or later.

## Changes
### Bug Fixes
* Fix an issue with the Outline not being populated when a file is opened. [#3877](https://github.com/microsoft/vscode-cpptools/issues/3877)
* Update scopes used by semantic colorization. [PR# 3896](https://github.com/microsoft/vscode-cpptools/pull/3896)

## Known Issues

* None so far.
",54800346
703,False,False,2019-07-03T02:04:05Z,2019-07-04T01:07:50Z,"## Instructions
To use the ""offline"" .vsix (that doesn't download OS-based dependencies on extension activation), download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.

## Requirements
* VS Code 1.30.0 or later.

## Changes
## Version 0.24.0: July 3, 2019
### New Features
* Semantic colorization [Documentation](https://github.com/microsoft/vscode-cpptools/blob/master/Documentation/LanguageServer/colorization.md) [#230](https://github.com/microsoft/vscode-cpptools/issues/230)
* Add `Rescan Workspace` command. [microsoft/vscode-cpptools-api#11](https://github.com/microsoft/vscode-cpptools-api/issues/11)

### Enhancements
* Configuration UI editor improvements:  
  * Add list of detected compiler paths. [PR #3708](https://github.com/microsoft/vscode-cpptools/pull/3708)
  * Enable selecting/editing of other configurations and add ""Advanced Settings"" section. [PR #3732](https://github.com/microsoft/vscode-cpptools/pull/3732)
* Enable `envFile` for `cppdbg`. [PR #3723](https://github.com/microsoft/vscode-cpptools/pull/3723)
* Change the default path value of `C_Cpp.intelliSenseCachePath`. [#3347](https://github.com/microsoft/vscode-cpptools/issues/3347) [#3664](https://github.com/microsoft/vscode-cpptools/issues/3664)
* Change `C_Cpp.clang_format_path` to `machine` scope. [#3774](https://github.com/microsoft/vscode-cpptools/issues/3774)
* Add validation to the advanced configuration UI settings. [PR #3838](https://github.com/microsoft/vscode-cpptools/pull/3838)
* Add `Current Configuration` to `C/C++: Log Diagnostics`. [PR #3866](https://github.com/microsoft/vscode-cpptools/pull/3866)

### Bug Fixes
* Fix for gdb `follow-fork-mode` `child` not working. [#2738](https://github.com/microsoft/vscode-cpptools/issues/2738)
* Fix IntelliSense process crash on hover with certain arrays. [#3081](https://github.com/Microsoft/vscode-cpptools/issues/3081)
* Fix IntelliSense-based `Go to Definition` for goto labels. [#3111](https://github.com/microsoft/vscode-cpptools/issues/3111)
* Fix IntelliSense behaving incorrectly when files are opened with different casing on Windows. [#3229](https://github.com/microsoft/vscode-cpptools/issues/3229)
* Fix user defined literals crashing IntelliSense in clang/gcc mode. [#3481](https://github.com/microsoft/vscode-cpptools/issues/3481)
* Improve `sourceFileMap` to be more dynamic. [#3504](https://github.com/microsoft/vscode-cpptools/issues/3504)
* Fix IntelliSense-based hover document comments being shown for invalid declarations not used by the current translation unit. [#3596](https://github.com/microsoft/vscode-cpptools/issues/3596)
* Fix `Go to Definition` when is `void` missing in the parameter list of a function definition a .c file. [#3609](https://github.com/microsoft/vscode-cpptools/issues/3609)
* Fix configuration validation of compiler path and IntelliSense mode compatibility for `clang-cl.exe` compiler. [#3637](https://github.com/microsoft/vscode-cpptools/issues/3637)
* Fix resolving `${workspaceFolderBasename}` and add `${workspaceStorage}`. [#3642](https://github.com/microsoft/vscode-cpptools/issues/3642)
* Fix IntelliSense-based `Go to Definition` performance issue due to extra database iteration. [#3655](https://github.com/microsoft/vscode-cpptools/issues/3655)
* Fix `SourceRequest` causing debugging to stop with `NotImplementedException`. [#3662](https://github.com/microsoft/vscode-cpptools/issues/3662)
* Fix typo in `intelliSenseMode` description.
  * Karsten Thoms (@kthoms) [PR #3682](https://github.com/microsoft/vscode-cpptools/pull/3682)
* Fix invalid warning with typedef enums in .c files. [#3685](https://github.com/microsoft/vscode-cpptools/issues/3685)
* Fix incorrect `keyword` completion occurring for pragma `#keyword`. [#3690](https://github.com/microsoft/vscode-cpptools/issues/3690)
* Fix problem matcher to show fatal errors from GCC [#3712](https://github.com/microsoft/vscode-cpptools/issues/3712)
* Fix multi-root folders with the same name sharing the same browse database. [PR #3715](https://github.com/microsoft/vscode-cpptools/pull/3715)
* Fix `remoteProcessPicker` on Windows. [#3758](https://github.com/microsoft/vscode-cpptools/issues/3758)
* Fix crash when tag parsing Objective-C code. [#3776](https://github.com/microsoft/vscode-cpptools/issues/3776)
* Fix duplicate slashes getting added to `c_cpp_properties.json`. [PR #3778](https://github.com/microsoft/vscode-cpptools/pull/3778)
* Fix `envFile` variable substitution. [#3836](https://github.com/microsoft/vscode-cpptools/issues/3836)
* Fix missing headers popup. [PR #3840](https://github.com/microsoft/vscode-cpptools/pull/3840)
* Fix multiple anonymous unions not showing correctly in Locals while debugging. [MIEngine#820](https://github.com/microsoft/MIEngine/issues/820)
* Fix pause not working when using `DebugServer`/`MIDebuggerServerAddress` on Linux and macOS. [MIEngine#844](https://github.com/microsoft/MIEngine/issues/844)
* Improvements to CPU and memory usage when editing.

## Known Issues

* Outline shows `No symbols found` after a file is opened (until it's edited). [#3877](https://github.com/microsoft/vscode-cpptools/issues/3877)
",54800346
704,False,True,2019-06-28T02:10:25Z,2019-06-28T02:42:21Z,"## Instructions
Set the ""C_Cpp.updateChannel"" setting to ""Insiders"" to auto-install the latest Insiders vsix. Or if that doesn't work (such as in the remote scenario), manually download and install the vsix that matches the target OS.

## Requirements
* VS Code 1.30.0 or later.

## Changes
### Enhancements
* Add validation to the advanced configuration UI settings. [PR #3838](https://github.com/microsoft/vscode-cpptools/pull/3838)

### Bug Fixes
* Fix IntelliSense process crash on hover with certain arrays. [#3081](https://github.com/Microsoft/vscode-cpptools/issues/3081)
* Fix crashes after edits, document highlighting, completion, hover, and squiggles. [#3834](https://github.com/microsoft/vscode-cpptools/issues/3834)
* Fix `envFile` variable substitution. [#3836](https://github.com/microsoft/vscode-cpptools/issues/3836)
* Fix missing headers popup. [PR #3840](https://github.com/microsoft/vscode-cpptools/pull/3840)

## Known Issues

* None so far.",54800346
705,False,True,2019-06-26T01:16:38Z,2019-06-26T01:42:45Z,"## Instructions
Set the ""C_Cpp.updateChannel"" setting to ""Insiders"" to auto-install the latest Insiders vsix. Or if that doesn't work (such as in the remote scenario), manually download and install the vsix that matches the target OS.

## Requirements
* VS Code 1.30.0 or later.

## Changes
### Minor Changes
* Change `C_Cpp.clang_format_path` to `machine` scope. [#3774](https://github.com/microsoft/vscode-cpptools/issues/3774)
* Removed syntactic/lexical colorization from `enhancedColorization`.  [PR #3821](https://github.com/microsoft/vscode-cpptools/pull/3821)

### Bug Fixes
* Fix crash when tag parsing Objective-C code. [#3776](https://github.com/microsoft/vscode-cpptools/issues/3776)
* Fix duplicate slashes getting added to `c_cpp_properties.json`. [PR #3778](https://github.com/microsoft/vscode-cpptools/pull/3778)
* Fix incorrect ""file already opened in editor"" message on Linux/Mac. [#3786](https://github.com/microsoft/vscode-cpptools/issues/3786)
* Fix colorization for themes with background colors equal to the editor background color. [#3780](https://github.com/microsoft/vscode-cpptools/issues/3780)
* Improve performance of colorization. [#3781](https://github.com/microsoft/vscode-cpptools/issues/3781)
* Fix regression crash on hover. [#3792](https://github.com/microsoft/vscode-cpptools/issues/3792)

## Known Issues

* There are still some crashes.",54800346
706,False,True,2019-06-14T20:29:06Z,2019-06-14T22:11:15Z,"## Instructions
Set the ""C_Cpp.updateChannel"" setting to ""Insiders"" to auto-install the latest Insiders vsix.

## Requirements
* VS Code 1.30.0 or later.

## Changes
### New Features
* Syntactic/lexical and semantic colorization [Documentation](https://github.com/microsoft/vscode-cpptools/blob/master/Documentation/LanguageServer/colorization.md) [#230](https://github.com/microsoft/vscode-cpptools/issues/230) [#3460](https://github.com/microsoft/vscode-cpptools/issues/3460)
* Add `Rescan Workspace` command. [microsoft/vscode-cpptools-api#11](https://github.com/microsoft/vscode-cpptools-api/issues/11)

### Minor Changes
* Configuration UI editor improvements:  
  * Add list of detected compiler paths. [PR #3708](https://github.com/microsoft/vscode-cpptools/pull/3708)
  * Enable selecting/editing of other configurations and add ""Advanced Settings"" section. [PR #3732](https://github.com/microsoft/vscode-cpptools/pull/3732)
* Enable `envFile` for `cppdbg`. [PR #3723](https://github.com/microsoft/vscode-cpptools/pull/3723)
* Change the default path value of `C_Cpp.intelliSenseCachePath`. [#3347](https://github.com/microsoft/vscode-cpptools/issues/3347) [#3664](https://github.com/microsoft/vscode-cpptools/issues/3664)


### Bug Fixes
* Fix IntelliSense-based `Go to Definition` for goto labels. [#3111](https://github.com/microsoft/vscode-cpptools/issues/3111)
* Fix IntelliSense behaving incorrectly when files are opened with different casing on Windows. [#3229](https://github.com/microsoft/vscode-cpptools/issues/3229)
* Fix user defined literals crashing IntelliSense in clang/gcc mode. [#3481](https://github.com/microsoft/vscode-cpptools/issues/3481)
* Fix IntelliSense-based hover document comments being shown for invalid declarations not used by the current translation unit. [#3596](https://github.com/microsoft/vscode-cpptools/issues/3596)
* Fix `Go to Definition` when is `void` missing in the parameter list of a function definition a .c file. [#3609](https://github.com/microsoft/vscode-cpptools/issues/3609)
* Fix configuration validation of compiler path and IntelliSense mode compatibility for `clang-cl.exe` compiler. [#3637](https://github.com/microsoft/vscode-cpptools/issues/3637)
* Fix resolving `${workspaceFolderBasename}` and add `${workspaceStorage}`. [#3642](https://github.com/microsoft/vscode-cpptools/issues/3642)
* Fix IntelliSense-based `Go to Definition` performance issue due to extra database iteration. [#3655](https://github.com/microsoft/vscode-cpptools/issues/3655)
* Fix `SourceRequest` causing debugging to stop with `NotImplementedException`. [#3662](https://github.com/microsoft/vscode-cpptools/issues/3662)
* Fix typo in `intelliSenseMode` description.
  * Karsten Thoms (@kthoms) [PR #3682](https://github.com/microsoft/vscode-cpptools/pull/3682)
* Fix invalid warning with typedef enums in .c files. [#3685](https://github.com/microsoft/vscode-cpptools/issues/3685)
* Fix incorrect `keyword` completion occurring for pragma `#keyword`. [#3690](https://github.com/microsoft/vscode-cpptools/issues/3690)
* Fix problem matcher to show fatal errors from GCC [#3712](https://github.com/microsoft/vscode-cpptools/issues/3712)
* Fix multi-root folders with the same name sharing the same browse database. [PR #3715](https://github.com/microsoft/vscode-cpptools/pull/3715)
* Fix `remoteProcessPicker` on Windows. [#3758](https://github.com/microsoft/vscode-cpptools/issues/3758)
* Fix configuration squiggles not appearing for multiple occurrences of the same error. [#3765](https://github.com/microsoft/vscode-cpptools/issues/3765)
* Improvements to CPU and memory usage when editing.
* Fix pause not working when using `DebugServer`/`MIDebuggerServerAddress` on Linux and macOS. [MIEngine#844](https://github.com/microsoft/MIEngine/issues/844)
* Fix multiple anonymous unions not showing correctly in Locals while debugging. [MIEngine#820](https://github.com/microsoft/MIEngine/issues/820)

## Known Issues

* None so far.",54800346
707,False,False,2019-05-10T22:57:24Z,2019-05-14T01:39:05Z,"## Instructions
To use the ""offline"" .vsix (that doesn't download OS-based dependencies on extension activation), download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.

## Requirements
* VS Code 1.30.0 or later.

## Changes
### Bug Fixes
* Fix `launch.json` creation when `intelliSenseEngine` is `""Disabled""`. [#3583](https://github.com/microsoft/vscode-cpptools/issues/3583)
* Fix C/C++ commands not working if the language service isn't activated. [#3615](https://github.com/microsoft/vscode-cpptools/issues/3615)
* Fix missing extension `""Details""` page. [#3621](https://github.com/microsoft/vscode-cpptools/issues/3621)
* Fix some random crashes related to IntelliSense inactive region processing.

## Known Issues

* None yet.
",54800346
708,False,False,2019-05-07T01:31:48Z,2019-05-07T03:01:38Z,"## Instructions
To use the ""offline"" .vsix (that doesn't download OS-based dependencies on extension activation), download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.

## Requirements
* VS Code 1.30.0 or later.

## Changes
### New Features
* Add a configuration UI editor to edit IntelliSense settings defined in the underlying `c_cpp_properties.json` file. [PR #3479](https://github.com/Microsoft/vscode-cpptools/pull/3479), [PR #3487](https://github.com/Microsoft/vscode-cpptools/pull/3487), [PR #3519](https://github.com/Microsoft/vscode-cpptools/pull/3519), [#3524](https://github.com/Microsoft/vscode-cpptools/issues/3524), [PR #3563](https://github.com/Microsoft/vscode-cpptools/pull/3563), [#3526](https://github.com/Microsoft/vscode-cpptools/issues/3526)
  * Add a new command `C/C++: Edit configurations (UI)` to open the UI editor.
  * Replace the `C/C++: Edit configurations...` command with `C/C++: Edit configurations (JSON)` to open `c_cpp_properties.json`.
  * The default whether to open the UI editor or JSON file is based on the `workbench.settings.editor` setting.
* Add command `C/C++: Log Diagnostics` to log language service diagnostics. [PR #3489](https://github.com/Microsoft/vscode-cpptools/pull/3489)
* Add support for `.env` files for `cppvsdbg`. [#3490](https://github.com/Microsoft/vscode-cpptools/issues/3490)

### Other Changes
* Enable flag `/permissive-` as an argument to `compilerPath` with `cl.exe`. [#1589](https://github.com/Microsoft/vscode-cpptools/issues/1589), [#3446](https://github.com/Microsoft/vscode-cpptools/issues/3446)
* Configuration squiggles for `c_cpp_properties.json` now validates if the setting values of `compilerPath` and `intelliSenseMode` match on Windows. [#2983](https://github.com/Microsoft/vscode-cpptools/issues/2983)
* Enable `-fms-extensions` to be used as an argument to `compilerPath` on Linux/Mac. [#3063](https://github.com/Microsoft/vscode-cpptools/issues/3063)
* Change the default value of `C_Cpp.intelliSenseEngineFallback` setting to `Disabled`. [#3165](https://github.com/Microsoft/vscode-cpptools/issues/3165)
* Add squiggle when `compilerPath` uses spaces and arguments without `""`. [#3357](https://github.com/Microsoft/vscode-cpptools/issues/3357)
* Change the `Disabled` value for `C_Cpp.errorSquiggles` to stop showing missing header squiggles. [#3361](https://github.com/Microsoft/vscode-cpptools/issues/3361)
* Add `enableConfigurationSquiggles` setting to allow squiggles to be disabled for `c_cpp_properties.json`. [#3403](https://github.com/Microsoft/vscode-cpptools/issues/3403)
* Switch to using the `installExtension` command for offline/insider vsix installing (to reduce install failures). [#3408](https://github.com/Microsoft/vscode-cpptools/issues/3408)
* Add a better example to the description of `C_Cpp.clang_format_style` and `C_Cpp.clang_format_fallback_style`. [#3419](https://github.com/Microsoft/vscode-cpptools/issues/3419)
* Add a new (default) value of `EnabledIfIncludesResolve` to `C_Cpp.errorSquiggles`, which only shows error squiggles if include headers are successfully resolved. [PR #3421](https://github.com/Microsoft/vscode-cpptools/pull/3421)
* Disable debug heap by default with cppvsdbg. [#3484](https://github.com/Microsoft/vscode-cpptools/issues/3484)
  * Reported by Djoulihen (@Djoulihen)
* Enable configuration squiggles for paths delimited by semicolons. [PR #3517](https://github.com/Microsoft/vscode-cpptools/pull/3517)
* Don't show release notes if the extension has never been installed before. [#3533](https://github.com/Microsoft/vscode-cpptools/issues/3533)
* Remove IntelliSense fallback code actions.

### Bug Fixes
* Fix browsing for functions with BOOST_FOREACH. [#953](https://github.com/Microsoft/vscode-cpptools/issues/953)
* Work around issue with VS Code not treating `.C` files as C++ files [Microsoft/vscode#59369](https://github.com/Microsoft/vscode/issues/59369) -- `.C` files become associated by name in `files.associations`. [#2558](https://github.com/Microsoft/vscode-cpptools/issues/2558)
* Fix various IntelliSense parsing bugs. [#2824](https://github.com/Microsoft/vscode-cpptools/issues/2824), [#3110](https://github.com/Microsoft/vscode-cpptools/issues/3110), [#3168](https://github.com/Microsoft/vscode-cpptools/issues/3168)
* Preserve newlines in documentation comments. [#2937](https://github.com/Microsoft/vscode-cpptools/issues/2937)
* Fix documentation comments above multi-line templates (and some other issues). [#3162](https://github.com/Microsoft/vscode-cpptools/issues/3162)
* Fix ""Extension causes high cpu load"" due to module loading. [#3213](https://github.com/Microsoft/vscode-cpptools/issues/3213)
* Fix auto-removal of compiler-provided paths in `includePath` when they end with a directory separator on Windows. [#3245](https://github.com/Microsoft/vscode-cpptools/issues/3245)
* Fix duplicate compiler build tasks appearing when `compilerPath` has arguments. [PR #3360](https://github.com/Microsoft/vscode-cpptools/pull/3360)
* Fix environment variables not resolving with `C_Cpp.intelliSenseCachePath`. [#3367](https://github.com/Microsoft/vscode-cpptools/issues/3367)
* Fix the formatting of snippets text. [#3376](https://github.com/Microsoft/vscode-cpptools/issues/3376)
* Fix the default `AccessModifierOffset` used when formatting. [#3376](https://github.com/Microsoft/vscode-cpptools/issues/3376)
* Fix null reference during initialization when using custom configuration providers. [PR #3377](https://github.com/Microsoft/vscode-cpptools/pull/3377)
* Fix symbol parsing when `__MINGW_ATTRIB_*` is used. [#3390](https://github.com/Microsoft/vscode-cpptools/issues/3390)
* Fix `compile_commands.json` configuration prompt being disabled per user instead of per folder. [PR #3399](https://github.com/Microsoft/vscode-cpptools/pull/3399)
* Fix `.cmd` and `.bat` files not working for `compilerPath` on Windows. [#3428](https://github.com/Microsoft/vscode-cpptools/issues/3428)
* Fix `compilerPath` with arguments that are surrounded by quotes. [#3428](https://github.com/Microsoft/vscode-cpptools/issues/3428)
* Fix documentation comments interpreting special characters as markdown. [#3441](https://github.com/Microsoft/vscode-cpptools/issues/3441)
* Fix hover using the configuration of the active document instead of the hovered document. [#3452](https://github.com/Microsoft/vscode-cpptools/issues/3452)
* Fix `c_cpp_properties.json` squiggles when the configuration name has regex characters. [PR #3478](https://github.com/Microsoft/vscode-cpptools/pull/3478)
* Use the `editor.tabSize` setting instead of `2` when creating build tasks. [PR #3486](https://github.com/Microsoft/vscode-cpptools/pull/3486)
* Fix some potential crashes on hover. [#3509](https://github.com/Microsoft/vscode-cpptools/issues/3509)
* Fix for `NullReferenceException` occurring when `""args""` is not specified in `launch.json`. [#3532](https://github.com/Microsoft/vscode-cpptools/issues/3532)
* Fix `Go to Definition` giving no results when IntelliSense doesn't find the symbol. [#3549](https://github.com/Microsoft/vscode-cpptools/issues/3549)
* Fix configuration squiggles with trailing backslashes. [PR #3573](https://github.com/Microsoft/vscode-cpptools/pull/3573)
* Fix `includePath` code actions, configuration prompts, and the `C/C++: Change configuration provider...` command. [PR #3576](https://github.com/Microsoft/vscode-cpptools/pull/3576)
* Fix randomly occurring crash (that could occur when opening files while IntelliSense squiggles are pending).
* Fix crash on hover (that could occur when document comments have blank lines).
* Fix code action sometimes not appearing over a squiggled identifier.
* Fix icon of parameters in completion results.

## Known Issues

* None yet.
",54800346
709,False,True,2019-05-01T22:58:19Z,2019-05-02T00:19:39Z,"## Instructions
Set the ""C_Cpp.updateChannel"" setting to ""Insiders"" to auto-install the latest Insiders vsix.

## Requirements
* VS Code 1.30.0 or later.

## Changes
### New Features
* Add support for `.env` files for `cppvsdbg`. [#3490](https://github.com/Microsoft/vscode-cpptools/issues/3490)

### Minor Changes
* Switch to using the `installExtension` command for offline/insider vsix installing (to reduce install failures). [#3408](https://github.com/Microsoft/vscode-cpptools/issues/3408)
* Enable configuration squiggles for paths delimited by semicolons. [PR #3517](https://github.com/Microsoft/vscode-cpptools/pull/3517)
* Add `Edit Configurations (JSON)` to the `Select a configuration` dropdown. [PR #3519](https://github.com/Microsoft/vscode-cpptools/pull/3519)
* Update configuration UI to save changes after the UI changes focus. [#3524](https://github.com/Microsoft/vscode-cpptools/issues/3524)
* Don't show release notes if the extension has never been installed before. [#3533](https://github.com/Microsoft/vscode-cpptools/issues/3533)
* Add input validation to the configuration UI. [PR #3563](https://github.com/Microsoft/vscode-cpptools/pull/3563)
* Add process ID and memory usage to `C/C++: Log Diagnostics` results.
* Remove IntelliSense fallback code actions.

### Bug Fixes
* Work around issue with VS Code not treating `.C` files as C++ files [Microsoft/vscode#59369](https://github.com/Microsoft/vscode/issues/59369) -- `.C` files become associated by name in `files.associations`. [#2558](https://github.com/Microsoft/vscode-cpptools/issues/2558)
* Fix ""Extension causes high cpu load"" due to module loading. [#3213](https://github.com/Microsoft/vscode-cpptools/issues/3213)
* Fix backslashes getting added each time settings are saved. [#3526](https://github.com/Microsoft/vscode-cpptools/issues/3526)
* Fix regression with some C++17 features with `msvc-x64` mode. [#3541](https://github.com/Microsoft/vscode-cpptools/issues/3541)
* Fix `Go to Definition` giving no results when IntelliSense doesn't find the symbol. [#3549](https://github.com/Microsoft/vscode-cpptools/issues/3549)
* Fix configuration squiggles with trailing backslashes. [PR #3573](https://github.com/Microsoft/vscode-cpptools/pull/3573)
* Fix `includePath` code actions, configuration prompts, and the `C/C++: Change configuration provider...` command. [PR #3576](https://github.com/Microsoft/vscode-cpptools/pull/3576)
* Fix crash on hover (that could occur when document comments have blank lines).
* Fix randomly occurring crash (that could occur when opening files while IntelliSense squiggles are pending).

## Known Issues

* None so far.",54800346
710,False,True,2019-04-24T01:10:57Z,2019-04-24T02:10:47Z,"## Instructions
Set the ""C_Cpp.updateChannel"" setting to ""Insiders"" to auto-install the latest Insiders vsix.

## Requirements
* VS Code 1.30.0 or later.

## Changes
### New Features
* Add a configuration UI editor to edit IntelliSense settings defined in the underlying `c_cpp_properties.json` file. [PR #3479](https://github.com/Microsoft/vscode-cpptools/pull/3479), [PR #3487](https://github.com/Microsoft/vscode-cpptools/pull/3487)
  * Add a new command `C/C++: Edit configurations (UI)` to open the UI editor.
  * Replace the `C/C++: Edit configurations...` command with `C/C++: Edit configurations (JSON)` to open `c_cpp_properties.json`.
  * The default whether to open the UI editor or JSON file is based on the `workbench.settings.editor` setting.
* Add command `C/C++: Log Diagnostics` to log language service diagnostics. [PR #3489](https://github.com/Microsoft/vscode-cpptools/pull/3489)

### Minor Changes
* Configuration squiggles for `c_cpp_properties.json` now validates if the setting values of `compilerPath` and `intelliSenseMode` match on Windows. [#2983](https://github.com/Microsoft/vscode-cpptools/issues/2983)
* Change the default value of `C_Cpp.intelliSenseEngineFallback` setting to `Disabled`. [#3165](https://github.com/Microsoft/vscode-cpptools/issues/3165)
* Change the `Disabled` value for `C_Cpp.errorSquiggles` to stop showing missing header squiggles. [#3361](https://github.com/Microsoft/vscode-cpptools/issues/3361)
* Add a new (default) value of `EnabledIfIncludesResolve` to `C_Cpp.errorSquiggles`, which only shows error squiggles if include headers are successfully resolved. [PR #3421](https://github.com/Microsoft/vscode-cpptools/pull/3421)
* Enable flag `/permissive-` as an argument to `compilerPath` with `cl.exe`. [#3446](https://github.com/Microsoft/vscode-cpptools/issues/3446)
* Disable debug heap by default with cppvsdbg. [#3484](https://github.com/Microsoft/vscode-cpptools/issues/3484)
  * Reported by Djoulihen (@Djoulihen)

### Bug Fixes
* Fix browsing for functions with BOOST_FOREACH. [#953](https://github.com/Microsoft/vscode-cpptools/issues/953)
* Preserve newlines in documentation comments. [#2937](https://github.com/Microsoft/vscode-cpptools/issues/2937)
* Fix documentation comments above multi-line templates (and some other issues). [#3162](https://github.com/Microsoft/vscode-cpptools/issues/3162)
* Fix auto-removal of compiler-provided paths in `includePath` when they end with a directory separator on Windows. [#3245](https://github.com/Microsoft/vscode-cpptools/issues/3245)
* Fix `.cmd` and `.bat` files not working for `compilerPath` on Windows. [#3428](https://github.com/Microsoft/vscode-cpptools/issues/3428)
* Fix `compilerPath` with arguments that are surrounded by quotes. [#3428](https://github.com/Microsoft/vscode-cpptools/issues/3428)
* Fix documentation comments interpreting special characters as markdown. [#3441](https://github.com/Microsoft/vscode-cpptools/issues/3441)
* Fix a JSON parsing error when a path in `c_cpp_properties.json` ended with `\\""`. [#3449](https://github.com/Microsoft/vscode-cpptools/issues/3449)
* Fix hover using the configuration of the active document instead of the hovered document. [#3452](https://github.com/Microsoft/vscode-cpptools/issues/3452)
* Fix `c_cpp_properties.json` squiggles when the configuration name has regex characters. [PR #3478](https://github.com/Microsoft/vscode-cpptools/pull/3478)
* Use the `editor.tabSize` setting instead of `2` when creating build tasks. [PR #3486](https://github.com/Microsoft/vscode-cpptools/pull/3486)
* Fix some potential crashes on hover. [#3509](https://github.com/Microsoft/vscode-cpptools/issues/3509)
* Fix icon of parameters in completion results.
* Fix code action sometimes not appearing over a squiggled identifier.

## Known Issues

* Extra escape characters are added to paths with back slash when UI editor is updated. [#3526](https://github.com/Microsoft/vscode-cpptools/issues/3526)
* UI editor doesn't commit changes after until a new field is given focus. [#3524](https://github.com/Microsoft/vscode-cpptools/issues/3524)
* Some C++17 features don't work with cl.exe. [#3541](https://github.com/Microsoft/vscode-cpptools/issues/3541)",54800346
711,False,True,2019-04-09T04:50:46Z,2019-04-10T02:23:49Z,"## Instructions
Set the ""C_Cpp.updateChannel"" setting to ""Insiders"" to auto-install the latest Insiders vsix.

## Requirements
* VS Code 1.30.0 or later.

## Bug Fixes
* Fix various IntelliSense parsing bugs. [#2824](https://github.com/Microsoft/vscode-cpptools/issues/2824), [#3110](https://github.com/Microsoft/vscode-cpptools/issues/3110), [#3168](https://github.com/Microsoft/vscode-cpptools/issues/3168)
* Enable `-fms-extensions` to be used as an argument to `compilerPath` on Linux/Mac. [#3063](https://github.com/Microsoft/vscode-cpptools/issues/3063)
* Fix duplicate compiler build tasks appearing when `compilerPath` has arguments. [PR #3360](https://github.com/Microsoft/vscode-cpptools/pull/3360)
* Add squiggle when `compilerPath` uses spaces and arguments without `""`. [#3357](https://github.com/Microsoft/vscode-cpptools/issues/3357)
* Fix environment variables not resolving with `C_Cpp.intelliSenseCachePath`. [#3367](https://github.com/Microsoft/vscode-cpptools/issues/3367)
* Fix the formatting of snippets text. [#3376](https://github.com/Microsoft/vscode-cpptools/issues/3376)
* Fix the default `AccessModifierOffset` used when formatting. [#3376](https://github.com/Microsoft/vscode-cpptools/issues/3376)
* Fix null reference during initialization when using custom configuration providers. [PR #3377](https://github.com/Microsoft/vscode-cpptools/pull/3377)
* Fix symbol parsing when `__MINGW_ATTRIB_*` is used. [#3390](https://github.com/Microsoft/vscode-cpptools/issues/3390)
* Fix `compile_commands.json` configuration prompt being disabled per user instead of per folder. [PR #3399](https://github.com/Microsoft/vscode-cpptools/pull/3399)
* Add `enableConfigurationSquiggles` setting to allow squiggles to be disabled for `c_cpp_properties.json`. [#3403](https://github.com/Microsoft/vscode-cpptools/issues/3403)

## Known Regressions

Nothing yet.",54800346
712,False,False,2019-03-21T02:06:23Z,2019-03-22T00:12:13Z,"## Instructions
To use the ""offline"" .vsix (that doesn't download OS-based dependencies on extension activation), download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.

## Requirements
* VS Code 1.30.0 or later.

###  Changes (fixes issues found in 0.22.0)
* Fix `tasks.json` with single-line comments being overwritten when `Build and Debug Active File` is used. [#3327](https://github.com/Microsoft/vscode-cpptools/issues/3327)
* Fix an invalid `compilerPath` property getting added to `tasks.json` after doing `Configure Task` with a C/C++ compiler.
* Add IntelliSense caching for macOS 10.13 or later (0.22.0 only supported Windows and Linux).

## Known Issues

* C_Cpp.intelliSenseCachePath doesn't resolve tilde or env for home directory. [#3367](https://github.com/Microsoft/vscode-cpptools/issues/3367)

",54800346
713,False,False,2019-03-19T23:52:44Z,2019-03-20T04:46:08Z,"## Instructions
To use the ""offline"" .vsix (that doesn't download OS-based dependencies on extension activation), download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.

## Requirements
* VS Code 1.30.0 or later.

### Major Changes
* Add warning squiggles for invalid properties and paths in `c_cpp_properties.json`. [#2799](https://github.com/Microsoft/vscode-cpptools/issues/2799), [PR #3283](https://github.com/Microsoft/vscode-cpptools/pull/3283)
* Add C/C++ compiler build tasks for compiling the active source file, with support for `F5` debugging and the `Build and Debug Active File` context menu command. [PR #3118](https://github.com/Microsoft/vscode-cpptools/pull/3118), [PR #3244](https://github.com/Microsoft/vscode-cpptools/pull/3244)
* Add AutoPCH support to reduce IntelliSense parsing time, with `C_Cpp.intelliSenseCachePath` and `C_Cpp.intelliSenseCacheSize` settings. It isn't enabled for Mac yet. [PR #3184](https://github.com/Microsoft/vscode-cpptools/pull/3184)

### Minor Changes
* Fix IntelliSense not working on Windows when the username has a space in it and file `C:\Users\<firstname>` exists. [#1377](https://github.com/Microsoft/vscode-cpptools/issues/1377), [#2114](https://github.com/Microsoft/vscode-cpptools/issues/2114), [#2176](https://github.com/Microsoft/vscode-cpptools/issues/2176), [#3052](https://github.com/Microsoft/vscode-cpptools/issues/3052), [#3139](https://github.com/Microsoft/vscode-cpptools/issues/3139)
* Enable `${command:cpptools.activeConfigName}` in tasks. [#1524](https://github.com/Microsoft/vscode-cpptools/issues/1524)
* Fix bugs with squiggles and IntelliSense updating after edits. [#1779](https://github.com/Microsoft/vscode-cpptools/issues/1779), [#3124](https://github.com/Microsoft/vscode-cpptools/issues/3124), [#3260](https://github.com/Microsoft/vscode-cpptools/issues/3260)
* Fix formatting (and other non-IntelliSense operations) being blocked by IntelliSense processing. [#1928](https://github.com/Microsoft/vscode-cpptools/issues/1928)
* Fix completion when the start of an identifier matches a keyword. [#1986](https://github.com/Microsoft/vscode-cpptools/issues/1986)
* Fix auto-removal of compiler-provided paths in `includePath`. [#2177](https://github.com/Microsoft/vscode-cpptools/issues/2177)
* Fix crash on Windows when 8.3 filenames are used. [#2453](https://github.com/Microsoft/vscode-cpptools/issues/2453), [#3104](https://github.com/Microsoft/vscode-cpptools/issues/3104)
* Add support for `Scope::Member` scoped symbol searches. [#2484](https://github.com/Microsoft/vscode-cpptools/issues/2484)
* Fix signature help active parameter selection when parameter names are missing or subsets of each other. [#2952](https://github.com/Microsoft/vscode-cpptools/issues/2952)
* Fix `--enable-pretty-printing` with `gdb` when complex objects are used as keys in maps. [#3024](https://github.com/Microsoft/vscode-cpptools/issues/3024)
* Fix IntelliSense-based `Go to Definition` for `noexcept` methods. [#3060](https://github.com/Microsoft/vscode-cpptools/issues/3060)
* Render macro hover expansions as C/C++. [#3075](https://github.com/Microsoft/vscode-cpptools/issues/3075)
* Enable completion after `struct` when manually invoked. [#3080](https://github.com/Microsoft/vscode-cpptools/issues/3080)
* Add `C_Cpp.suggestSnippets` setting to disable language server snippets. [#3083](https://github.com/Microsoft/vscode-cpptools/issues/3083)
* Show a prompt for changing `C_Cpp.updateChannel` to `Insiders`. [#3089](https://github.com/Microsoft/vscode-cpptools/issues/3089)
  * lh123 (@lh123) [PR #3221](https://github.com/Microsoft/vscode-cpptools/pull/3221)
* Fix `compilerPath` not getting priority over the `compile_commands.json` compiler. [#3102](https://github.com/Microsoft/vscode-cpptools/issues/3102)
* Fix Linux `compile_commands.json` compiler querying with relative paths. [#3112](https://github.com/Microsoft/vscode-cpptools/issues/3112)
* Allow `*` in `includePath` to apply to `browse.path` when `browse.path` is not specified. [#3121](https://github.com/Microsoft/vscode-cpptools/issues/3121)
  * Tucker Kern (@mill1000) [PR #3122](https://github.com/Microsoft/vscode-cpptools/pull/3122)
* Disable `(` and `<` completion commit characters. [#3127](https://github.com/Microsoft/vscode-cpptools/issues/3127)
* Add Chinese translations for command titles. [PR #3128](https://github.com/Microsoft/vscode-cpptools/pull/3128)
* Fix remote process picker bug. [#2585](https://github.com/Microsoft/vscode-cpptools/issues/2585), [#3150](https://github.com/Microsoft/vscode-cpptools/issues/3150)
* Fix command not found and empty `c_cpp_properties.json` if activation is too slow. [#3160](https://github.com/Microsoft/vscode-cpptools/issues/3160), [#3176](https://github.com/Microsoft/vscode-cpptools/issues/3176)
* Fix `cppvsdbg` debugger showing `""An unspecified error has occurred.""` for structured binding variables. [#3197](https://github.com/Microsoft/vscode-cpptools/issues/3197)
* Fix bugs with the Insider reload prompt appearing when it shouldn't. [#3206](https://github.com/Microsoft/vscode-cpptools/issues/3206)
* Fix variable expansion (e.g. `${env.HOME}`) not working when `${default}` is used in `c_cpp_properties.json`. [#3309](https://github.com/Microsoft/vscode-cpptools/issues/3309)
* Fix other unreported IntelliSense engine bugs.

## Known Issues

- Using the `Build and Debug Active File` command overwrites the previous `tasks.json` contents if it fails to parse. [#3327](https://github.com/Microsoft/vscode-cpptools/issues/3327)
- Using the `Build and Debug Active File` command causes an ""undefined task type"" warning to get logged. [#3322](https://github.com/Microsoft/vscode-cpptools/issues/3322)

",54800346
714,False,True,2019-03-15T00:27:22Z,2019-03-15T02:24:48Z,"## Instructions
Set the ""C_Cpp.updateChannel"" setting to ""Insiders"" to auto-install the latest Insiders vsix.

## Requirements
* VS Code 1.30.0 or later.

## Bug Fixes
* Fix bugs with squiggles and IntelliSense updating after edits. [#1779](https://github.com/Microsoft/vscode-cpptools/issues/1779), [#3124](https://github.com/Microsoft/vscode-cpptools/issues/3124), [#3260](https://github.com/Microsoft/vscode-cpptools/issues/3260)
* Fix formatting (and other non-IntelliSense operations) being blocked by IntelliSense processing. [#1928](https://github.com/Microsoft/vscode-cpptools/issues/1928)
* Show a prompt for changing `C_Cpp.updateChannel` to `Insiders`. [#3089](https://github.com/Microsoft/vscode-cpptools/issues/3089)
  * lh123 (@lh123) [PR #3221](https://github.com/Microsoft/vscode-cpptools/pull/3221)
* Fix bugs with the Insider reload prompt appearing when it shouldn't. [#3206](https://github.com/Microsoft/vscode-cpptools/issues/3206)
* Enable `F5` and the `Build and Debug Active File` context menu command. [PR #3244](https://github.com/Microsoft/vscode-cpptools/pull/3244)
* Fix IntelliSense process crashing with Mac Sierra 10.12 or earlier. [#3256](https://github.com/Microsoft/vscode-cpptools/issues/3256)
* Fix incorrect `c_cpp_properties.json` squiggles with `cl.exe`. [#3263](https://github.com/Microsoft/vscode-cpptools/pull/3263)
* Add `cl.exe` build and debug support. [PR #3264](https://github.com/Microsoft/vscode-cpptools/pull/3264)
* Fix debugging not working for Windows 32-bit programs. [#3258](https://github.com/Microsoft/vscode-cpptools/issues/3258)
* Add warning squiggles for invalid properties in `c_cpp_properties.json`. [PR #3283](https://github.com/Microsoft/vscode-cpptools/pull/3283)
* Fix AutoPCH performance on Windows and Linux.

## Known Regressions (or bugs with new features)

Nothing ""major"" yet.",54800346
715,False,True,2019-03-02T01:26:25Z,2019-03-02T02:14:49Z,"## Instructions
To use the ""offline"" .vsix (that doesn't download OS-based dependencies on extension activation), download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code. Or, set the ""C_Cpp.updateChannel"" setting to ""Insiders"" to auto-install the latest Insiders vsix.

## Requirements
* VS Code 1.30.0 or later.

## Bug Fixes
* Fix IntelliSense not working on Windows when the username has a space in it and file `C:\Users\<firstname>` exists. [#1377](https://github.com/Microsoft/vscode-cpptools/issues/1377), [#2114](https://github.com/Microsoft/vscode-cpptools/issues/2114), [#2176](https://github.com/Microsoft/vscode-cpptools/issues/2176), [#3052](https://github.com/Microsoft/vscode-cpptools/issues/3052), [#3139](https://github.com/Microsoft/vscode-cpptools/issues/3139)
* Enable `${command:cpptools.activeConfigName}` in tasks. [#1524](https://github.com/Microsoft/vscode-cpptools/issues/1524)
* Fix completion when the start of an identifier matches a keyword. [#1986](https://github.com/Microsoft/vscode-cpptools/issues/1986)
* Fix auto-removal of compiler-provided paths in `includePath`. [#2177](https://github.com/Microsoft/vscode-cpptools/issues/2177)
* Add support for `Scope::Member` scoped symbol searches. [#2484](https://github.com/Microsoft/vscode-cpptools/issues/2484)
* Fix remote process picker bug. [#2585](https://github.com/Microsoft/vscode-cpptools/issues/2585), [#3150](https://github.com/Microsoft/vscode-cpptools/issues/3150)
* Add warning squiggles to `c_cpp_properties.json` for invalid paths. [#2799](https://github.com/Microsoft/vscode-cpptools/issues/2799)
* Fix bug with manual completion invocation after `struct`. [#3080](https://github.com/Microsoft/vscode-cpptools/issues/3080)
* Add C/C++ compiler build tasks for compiling the active source file. [PR #3118](https://github.com/Microsoft/vscode-cpptools/pull/3118)
* Fix command not found and empty `c_cpp_properties.json` if activation is too slow. [#3160](https://github.com/Microsoft/vscode-cpptools/issues/3160), [#3176](https://github.com/Microsoft/vscode-cpptools/issues/3176)
* Add AutoPCH support to reduce IntelliSense parsing time, with `C_Cpp.intelliSenseCachePath` and `C_Cpp.intelliSenseCacheSize` settings. [PR #3184](https://github.com/Microsoft/vscode-cpptools/pull/3184)
* Fix `cppvsdbg` debugger showing `""An unspecified error has occurred.""` for structured binding variables. [#3197](https://github.com/Microsoft/vscode-cpptools/issues/3197)

## Known Regressions

* IntelliSense process crashes with Mac Sierra 10.12 or earlier. [#3256](https://github.com/Microsoft/vscode-cpptools/issues/3256)
* Debugging doesn't work for Windows 32-bit apps. [#3258](https://github.com/Microsoft/vscode-cpptools/issues/3258)
* Squiggles can be incorrect after modifying header files. [#3260](https://github.com/Microsoft/vscode-cpptools/issues/3260)",54800346
716,False,True,2019-02-06T22:44:40Z,2019-02-07T01:50:25Z,"## Instructions
To use the ""offline"" .vsix (that doesn't download OS-based dependencies on extension activation), download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code. Or, set the ""C_Cpp.updateChannel"" setting to ""Insiders"" to auto-install the latest Insiders vsix.

## Requirements
* VS Code 1.30.0 or later.

## Bug Fixes
* Fix crash on Windows when 8.3 filenames are used. [#2453](https://github.com/Microsoft/vscode-cpptools/issues/2453), [#3104](https://github.com/Microsoft/vscode-cpptools/issues/3104)
* Fix signature help active parameter selection when parameter names are missing or subsets of each other. [#2952](https://github.com/Microsoft/vscode-cpptools/issues/2952)
* Fix `--enable-pretty-printing` with `gdb` when complex objects are used as keys in maps. [#3024](https://github.com/Microsoft/vscode-cpptools/issues/3024)
* Fix IntelliSense-based `Go to Definition` for `noexcept` methods. [#3060](https://github.com/Microsoft/vscode-cpptools/issues/3060)
* Render macro hover expansions as C/C++. [#3075](https://github.com/Microsoft/vscode-cpptools/issues/3075)
* Enable completion after `struct` when manually invoked. [#3080](https://github.com/Microsoft/vscode-cpptools/issues/3080)
* Add `C_Cpp.suggestSnippets` setting to disable language server snippets. [#3083](https://github.com/Microsoft/vscode-cpptools/issues/3083)
* Fix `compilerPath` not getting priority over the `compile_commands.json` compiler. [#3102](https://github.com/Microsoft/vscode-cpptools/issues/3102)
* Fix Linux `compile_commands.json` compiler querying with relative paths. [#3112](https://github.com/Microsoft/vscode-cpptools/issues/3112)
* Allow `*` in `includePath` to apply to `browse.path` when `browse.path` is not specified. [#3121](https://github.com/Microsoft/vscode-cpptools/issues/3121)
  * Tucker Kern (@mill1000) [PR #3122](https://github.com/Microsoft/vscode-cpptools/pull/3122)
* Disable `(` and `<` completion commit characters. [#3127](https://github.com/Microsoft/vscode-cpptools/issues/3127)
* Add Chinese translations for command titles. [PR #3128](https://github.com/Microsoft/vscode-cpptools/pull/3128)
* Fix other unreported IntelliSense engine bugs.

## Known Regressions

None yet.",54800346
717,False,False,2019-01-23T03:17:42Z,2019-01-23T22:02:18Z,"## Instructions
To use the ""offline"" .vsix (that doesn't download OS-based dependencies on extension activation), download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.

## New Features
* Add documentation comments for hover, completion, and signature help. [#399](https://github.com/Microsoft/vscode-cpptools/issues/399)
* Add completion committing for methods after `(`. [#1184](https://github.com/Microsoft/vscode-cpptools/issues/1184)
* Add macro expansions to hover. [#1734](https://github.com/Microsoft/vscode-cpptools/issues/1734)
* Add support for `__int128_t` and `__uint128_t` types. [#1815](https://github.com/Microsoft/vscode-cpptools/issues/1815)
* Add Italian translations for command titles.
  * Julien Russo (@Dotpys) [PR #2663](https://github.com/Microsoft/vscode-cpptools/pull/2663)
* Add icons for operators, structs/unions, enum values, template arguments, and macros. [#2849](https://github.com/Microsoft/vscode-cpptools/issues/2849)
* Change `#include` completion to show individual folders instead of the entire paths, fixing previous performance problems. [#2836](https://github.com/Microsoft/vscode-cpptools/issues/2836)
* Add text `(declaration)`, `(typedef)`, `(type alias)`, and `(union)` to symbols. [#2851](https://github.com/Microsoft/vscode-cpptools/issues/2851)
* Add a refresh button to the `Attach to Process` picker. [#2885](https://github.com/Microsoft/vscode-cpptools/issues/2885)
  * Matt Bise (@mbise1993) [PR #2895](https://github.com/Microsoft/vscode-cpptools/pull/2895)
* Add completion committing for templates after `<`. [#2953](https://github.com/Microsoft/vscode-cpptools/issues/2953)

## Bug Fixes
* Add the Microsoft digital signature to Windows binaries to avoid getting incorrectly flagged by virus scanners. [#1103](https://github.com/Microsoft/vscode-cpptools/issues/1103), [#2970](https://github.com/Microsoft/vscode-cpptools/issues/2970)
* Fix bugs when UTF-8 characters > 1 byte are used. [#1504](https://github.com/Microsoft/vscode-cpptools/issues/1504), [#1525](https://github.com/Microsoft/vscode-cpptools/issues/1525), [#2034](https://github.com/Microsoft/vscode-cpptools/issues/2034), [#2082](https://github.com/Microsoft/vscode-cpptools/issues/2082), [#2883](https://github.com/Microsoft/vscode-cpptools/issues/2883)
* Fix some IntelliSense process crashes. [#1785](https://github.com/Microsoft/vscode-cpptools/issues/1785), [#2913](https://github.com/Microsoft/vscode-cpptools/issues/2913)
* Fix several incorrect IntelliSense error squiggles. [#1942](https://github.com/Microsoft/vscode-cpptools/issues/1942), [#2422](https://github.com/Microsoft/vscode-cpptools/issues/2422), [#2474](https://github.com/Microsoft/vscode-cpptools/issues/2474), [#2478](https://github.com/Microsoft/vscode-cpptools/issues/2478), [#2597](https://github.com/Microsoft/vscode-cpptools/issues/2597), [#2763](https://github.com/Microsoft/vscode-cpptools/issues/2763)
* Fix some main process crashes. [#2505](https://github.com/Microsoft/vscode-cpptools/issues/2505), [#2768](https://github.com/Microsoft/vscode-cpptools/issues/2768)
* Fix incorrect IntelliSense error with Mac clang 10.0 libraries. [#2608](https://github.com/Microsoft/vscode-cpptools/issues/2608)
* Fix completion not working in template specializations. [#2620](https://github.com/Microsoft/vscode-cpptools/issues/2620)
* Fix incorrect completions after Enter is used after struct, class, etc. [#2734](https://github.com/Microsoft/vscode-cpptools/issues/2734)
* Fix memory ""leak"" when parsing a large workspace. [#2737](https://github.com/Microsoft/vscode-cpptools/issues/2737)
* Fix IntelliSense-based `Go to Definition` with overloads that return a template with a default param (e.g. vector) [#2736](https://github.com/Microsoft/vscode-cpptools/issues/2736)
* Fix `Go to Definition` when `__catch()`, `_NO_EXCEPT_DEBUG`, or `_LIBCPP_BEGIN_NAMESPACE_STD` is used. [#2761](https://github.com/Microsoft/vscode-cpptools/issues/2761), [#2766](https://github.com/Microsoft/vscode-cpptools/issues/2766)
* Fix `Go to Definition` when `method(void)` is used. [#2802](https://github.com/Microsoft/vscode-cpptools/issues/2802)
* Fix error `""TypeError: Cannot read property 'map' of undefined at asCompletionResult""`. [#2807](https://github.com/Microsoft/vscode-cpptools/issues/2807)
* Fix quotes around defines not supported for custom configuration providers. [#2820](https://github.com/Microsoft/vscode-cpptools/issues/2820)
* Fix PowerShell bug on Win7. [#2822](https://github.com/Microsoft/vscode-cpptools/issues/2822)
* Fix Tag Parser completion details missing keywords (i.e. `using`, `class`, `#define`, etc.). [#2850](https://github.com/Microsoft/vscode-cpptools/issues/2850)
* Fix problem with empty recursive include paths. [#2855](https://github.com/Microsoft/vscode-cpptools/issues/2855)
* Fix `NullReferenceException` on debugger launch with VS Code Insiders. [#2858](https://github.com/Microsoft/vscode-cpptools/issues/2858), [PR Microsoft/MIEngine#810](https://github.com/Microsoft/MIEngine/pull/810)
* Fix IntelliSense errors with template argument deduction. [#2907](https://github.com/Microsoft/vscode-cpptools/issues/2907), [#2912](https://github.com/Microsoft/vscode-cpptools/issues/2912)
* Retry Insider VSIX downloading with `http.proxySupport` `""off""`. [#2927](https://github.com/Microsoft/vscode-cpptools/issues/2927)
* Fix snippet completions being offered when they shouldn't be. [#2942](https://github.com/Microsoft/vscode-cpptools/issues/2942)
* Set the `editor.wordBasedSuggestions` to `false` by default to prevent incorrect completions. [#2943](https://github.com/Microsoft/vscode-cpptools/issues/2943)
* Fix IntelliSense-based `Go to Definition` for functions with function pointer parameters. [#2981](https://github.com/Microsoft/vscode-cpptools/issues/2981)
* Fix `<` incorrectly triggering completions. [#2985](https://github.com/Microsoft/vscode-cpptools/issues/2985)
* Fix recursive includes not adding paths used by `forcedInclude` files. [#2986](https://github.com/Microsoft/vscode-cpptools/issues/2986)
* Fix crash when `//` is used in a recursive `includePath`. [#2987](https://github.com/Microsoft/vscode-cpptools/issues/2987)
* Fix compiler in `compile_commands.json` not taking precedence over the `Cpp.default.compilerPath`. [#2793](https://github.com/Microsoft/vscode-cpptools/issues/2793)
* Fix `#include` completion not working for symlinks. [#2843](https://github.com/Microsoft/vscode-cpptools/issues/2843)
* Fix IntelliSense-based `Go to Definition` for `const` methods. [#3014](https://github.com/Microsoft/vscode-cpptools/issues/3014)
* Support `C_Cpp.updateChannel` for VS Code Exploration builds.

## Known Issues

* Documentation comments in completion causes the ""File: "" info to disappear. [#2938](https://github.com/Microsoft/vscode-cpptools/issues/2938)
* Hover macro expansion isn't formatted as c/cpp code. [#3075](https://github.com/Microsoft/vscode-cpptools/issues/3075)
",54800346
718,False,True,2019-01-18T19:23:33Z,2019-01-19T00:38:54Z,"* Change `#include` completion to show individual folders instead of the entire paths, fixing previous performance problems. [#2836](https://github.com/Microsoft/vscode-cpptools/issues/2836)
* Fix `#include` completion not working for symlinks. [#2843](https://github.com/Microsoft/vscode-cpptools/issues/2843)
* Fix IntelliSense-based `Go to Definition` for `const` methods. [#3014](https://github.com/Microsoft/vscode-cpptools/issues/3014)
",54800346
719,False,True,2019-01-03T22:31:12Z,2019-01-04T00:58:55Z,"### Known Issues

* A regression occurred with recursive includes when forcedInclude is used. It will be fixed in our next release (see https://github.com/Microsoft/vscode-cpptools/issues/2986 ).

### Changes

* Add completion committing for methods after `(`. [#882](https://github.com/Microsoft/vscode-cpptools/issues/882), [#1184](https://github.com/Microsoft/vscode-cpptools/issues/1184)
* Add the Microsoft digital signature to Windows binaries to avoid getting incorrectly flagged by virus scanners. [#1103](https://github.com/Microsoft/vscode-cpptools/issues/1103), [#2970](https://github.com/Microsoft/vscode-cpptools/issues/2970)
* Add macro expansions to hover. [#1734](https://github.com/Microsoft/vscode-cpptools/issues/1734)
* Fix incorrect completions after Enter is used after struct, class, etc. [#2734](https://github.com/Microsoft/vscode-cpptools/issues/2734)
* Fix quotes around defines not supported for custom configuration providers. [#2820](https://github.com/Microsoft/vscode-cpptools/issues/2820)
* Fix Tag Parser completion details missing keywords (i.e. `using`, `class`, `#define`, etc.). [#2850](https://github.com/Microsoft/vscode-cpptools/issues/2850)
* Fix missing `(declaration)` on symbols. [#2851](https://github.com/Microsoft/vscode-cpptools/issues/2851)
* Fix IntelliSense errors with template argument deduction. [#2907](https://github.com/Microsoft/vscode-cpptools/issues/2907), [#2912](https://github.com/Microsoft/vscode-cpptools/issues/2912)
* Fix snippet completions being offered when they shouldn't be. [#2942](https://github.com/Microsoft/vscode-cpptools/issues/2942)
* Set the `editor.wordBasedSuggestions` to `false` by default to prevent incorrect completions. [#2943](https://github.com/Microsoft/vscode-cpptools/issues/2943)
* Add completion committing for templates after `<`. [#2953](https://github.com/Microsoft/vscode-cpptools/issues/2953)
* Fix IntelliSense-based `Go to Definition` for functions with function pointer parameters. [#2981](https://github.com/Microsoft/vscode-cpptools/issues/2981)
* Fix `<` incorrectly triggering completions. [#2985](https://github.com/Microsoft/vscode-cpptools/issues/2985)
* Fix recursive includes not adding paths used by `forcedInclude` files. [#2986](https://github.com/Microsoft/vscode-cpptools/issues/2986)
* Fix crash when `//` is used in a recursive `includePath`. [#2987](https://github.com/Microsoft/vscode-cpptools/issues/2987)
* Fix 3 crashes found with 0.21.0-insiders2.

### Instructions
To use the ""offline"" .vsix (that doesn't download dependencies on extension activation), download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.",54800346
720,False,True,2018-12-17T22:33:09Z,2018-12-18T00:21:26Z,"* Add documentation comments for hover, completion, and signature help. [#399](https://github.com/Microsoft/vscode-cpptools/issues/399)
* Fix bugs when UTF-8 characters > 1 byte are used. [#1504](https://github.com/Microsoft/vscode-cpptools/issues/1504), [#1525](https://github.com/Microsoft/vscode-cpptools/issues/1525), [#2034](https://github.com/Microsoft/vscode-cpptools/issues/2034), [#2082](https://github.com/Microsoft/vscode-cpptools/issues/2082), [#2883](https://github.com/Microsoft/vscode-cpptools/issues/2883)
* Fix some IntelliSense process crashes. [#1785](https://github.com/Microsoft/vscode-cpptools/issues/1785), [#2913](https://github.com/Microsoft/vscode-cpptools/issues/2913)
* Fix some incorrect IntelliSense error squiggles. [#2422](https://github.com/Microsoft/vscode-cpptools/issues/2422), [#2597](https://github.com/Microsoft/vscode-cpptools/issues/2597)
* Fix incorrect IntelliSense error with Mac clang 10.0 libraries. [#2608](https://github.com/Microsoft/vscode-cpptools/issues/2608)
* Add Italian translations for command titles.
  * Julien Russo (@Dotpys) [PR #2663](https://github.com/Microsoft/vscode-cpptools/pull/2663)
* Fix `Go to Definition` when `method(void)` is used. [#2802](https://github.com/Microsoft/vscode-cpptools/issues/2802)
* Fix PowerShell bug on Win7. [#2822](https://github.com/Microsoft/vscode-cpptools/issues/2822)
* Support `C_Cpp.updateChannel` for VS Code Exploration builds.
* Add icons for operators, structs/unions, enum values, template arguments, and macros. [#2849](https://github.com/Microsoft/vscode-cpptools/issues/2849)
* Add text `(declaration)`, `(typedef)`, `(type alias)`, and `(union)` to symbols. [#2851](https://github.com/Microsoft/vscode-cpptools/issues/2851)
* Fix problem with empty recursive include paths. [#2855](https://github.com/Microsoft/vscode-cpptools/issues/2855)
* Fix `NullReferenceException` on debugger launch with VS Code Insiders. [#2858](https://github.com/Microsoft/vscode-cpptools/issues/2858), [PR Microsoft/MIEngine#810](https://github.com/Microsoft/MIEngine/pull/810)
* Add a refresh button to the `Attach to Process` picker. [#2885](https://github.com/Microsoft/vscode-cpptools/issues/2885)
  * Matt Bise (@mbise1993) [PR #2895](https://github.com/Microsoft/vscode-cpptools/pull/2895)
* Retry Insider VSIX downloading with `http.proxySupport` `""off""`. [#2927](https://github.com/Microsoft/vscode-cpptools/issues/2927)

### Instructions
To use the ""offline"" .vsix (that doesn't download dependencies on extension activation), download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.",54800346
721,False,True,2018-11-09T01:34:34Z,2018-11-09T03:17:44Z,"* Add support for `__int128_t` and `__uint128_t` types. [#1815](https://github.com/Microsoft/vscode-cpptools/issues/1815)
* Fix several incorrect IntelliSense error squiggles. [#1942](https://github.com/Microsoft/vscode-cpptools/issues/1942), [#2478](https://github.com/Microsoft/vscode-cpptools/issues/2478), [#2763](https://github.com/Microsoft/vscode-cpptools/issues/2763)
* Fix several crashes. [#2505](https://github.com/Microsoft/vscode-cpptools/issues/2505), [#2768](https://github.com/Microsoft/vscode-cpptools/issues/2768)
* Fix completion not working in template specializations. [#2620](https://github.com/Microsoft/vscode-cpptools/issues/2620)
* Fix IntelliSense-based `Go to Definition` with overloads that return a template with a default param (e.g. vector) [#2736](https://github.com/Microsoft/vscode-cpptools/issues/2736)
* Fix memory ""leak"" when parsing a large workspace. [#2737](https://github.com/Microsoft/vscode-cpptools/issues/2737)
* Fix `Go to Definition` when `__catch()`, `_NO_EXCEPT_DEBUG`, or `_LIBCPP_BEGIN_NAMESPACE_STD` is used. [#2761](https://github.com/Microsoft/vscode-cpptools/issues/2761), [#2766](https://github.com/Microsoft/vscode-cpptools/issues/2766)
* Fix compiler in `compile_commands.json` not taking precedence over the `Cpp.default.compilerPath`. [#2793](https://github.com/Microsoft/vscode-cpptools/issues/2793)

### Instructions
To use the ""offline"" .vsix (that doesn't download dependencies on extension activation), download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.",54800346
722,False,False,2018-11-01T00:24:43Z,2018-11-01T02:51:06Z,"* Fix IntelliSense-based `Go to Declaration` when there's only a definition in a TU. [#2743](https://github.com/Microsoft/vscode-cpptools/issues/2743)
* Fix `#include` completion for standalone header files. [#2744](https://github.com/Microsoft/vscode-cpptools/issues/2744)
* Fix the highest hitting main process crash.
* Fix IntelliSense process crash with completion.

### Instructions
To use the ""offline"" .vsix (that doesn't download dependencies on extension activation), download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.",54800346
723,False,False,2018-10-25T23:46:17Z,2018-10-30T23:18:41Z,"* Add IntegratedTerminal support for Linux and Windows. [#35](https://github.com/microsoft/vscode-cpptools/issues/35)
* Unify Visual Studio Code debug protocol parsing by using a shared library with Visual Studio.
* Fix IntelliSense-based `Go to Definition` on overloads (in the same TU). [#1071](https://github.com/Microsoft/vscode-cpptools/issues/1071)
* Fix inactive regions not being disabled when falling back to the Tag Parser. [#2181](https://github.com/Microsoft/vscode-cpptools/issues/2181)
* Fix `#include` completion not working with `compile_commands.json` or custom configuration providers. [#2242](https://github.com/Microsoft/vscode-cpptools/issues/2242)
* Fix IntelliSense failing if recursive includes removes all paths. [#2442](https://github.com/Microsoft/vscode-cpptools/issues/2442)
* Fix incorrect IntelliSense errors with MinGW (stop using `-fms-extensions` by default). [#2443](https://github.com/Microsoft/vscode-cpptools/issues/2443), [#2623](https://github.com/Microsoft/vscode-cpptools/issues/2623)
* Fix error squiggles sometimes not updating after typing. [#2448](https://github.com/Microsoft/vscode-cpptools/issues/2448)
* Add support for Mac framework paths in `compile_commands.json`. [#2508](https://github.com/Microsoft/vscode-cpptools/issues/2508)
* Fix IntelliSense-based `Go to Definition` falling back to the Tag Parser for definitions not in the TU. [#2536](https://github.com/Microsoft/vscode-cpptools/issues/2536), [#2677](https://github.com/Microsoft/vscode-cpptools/issues/2677)
* Fix IntelliSense-based `Go to Definition` on the identifier of a definition with no declaration. [#2573](https://github.com/Microsoft/vscode-cpptools/issues/2573)
* Fix IntelliSense-based `Go to Definition` not falling back to the declaration (in certain cases). [#2574](https://github.com/Microsoft/vscode-cpptools/issues/2574)
* Fix IntelliSense-based `Go to Definition` going to the wrong location after edits are made. [#2579](https://github.com/Microsoft/vscode-cpptools/issues/2579)
* Fix `Go to Definition` when the `intelliSenseEngineFallback` is `Disabled` and `#include`s are missing. [#2583](https://github.com/Microsoft/vscode-cpptools/issues/2583)
* Fix empty `C_Cpp.default.*` settings not being used. [#2584](https://github.com/Microsoft/vscode-cpptools/issues/2584)
* Fix quoting around `ssh`'s command (for the debugger). [#2585](https://github.com/Microsoft/vscode-cpptools/issues/2585)
* Fix crash on hover (and `Go to Definition`) when using the `Tag Parser`. [#2586](https://github.com/Microsoft/vscode-cpptools/issues/2586)
* Fix errors when a workspace folder isn't open. [#2613](https://github.com/Microsoft/vscode-cpptools/issues/2613), [#2691](https://github.com/Microsoft/vscode-cpptools/issues/2691)
* Fix `-isystem` without a space after getting ignored in `compile_comamands.json`. [#2629](https://github.com/Microsoft/vscode-cpptools/issues/2629)
* Fix Insiders update channel installation bugs. [#2636](https://github.com/Microsoft/vscode-cpptools/issues/2636), [#2685](https://github.com/Microsoft/vscode-cpptools/issues/2685)
* Fix IntelliSense-based `Go to Declaration` falling back to the Tag Parser if the definition is also in the TU. [#2642](https://github.com/Microsoft/vscode-cpptools/issues/2642)
* Fix the `Disabled` `intelliSenseEngine` setting not working with custom configuration providers. [#2656](https://github.com/Microsoft/vscode-cpptools/issues/2656)

### Instructions
To use the ""offline"" .vsix (that doesn't download dependencies on extension activation), download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.",54800346
724,False,True,2018-10-19T23:16:17Z,2018-10-20T01:22:54Z,"* Fix `#include` completion not working with `compile_commands.json` or custom configuration providers. [#2242](https://github.com/Microsoft/vscode-cpptools/issues/2242)
* Fix `-isystem` without a space after getting ignored in `compile_comamands.json`. [#2629](https://github.com/Microsoft/vscode-cpptools/issues/2629)
* Fix the `Disabled` `intelliSenseEngine` setting not working with custom configuration providers. [#2656](https://github.com/Microsoft/vscode-cpptools/issues/2656)
* Fix IntelliSense-based `Go to Definition` returning results with non-matching signatures. [#2677](https://github.com/Microsoft/vscode-cpptools/issues/2677)
* Fix Insiders update channel not working for `0.19.1-insiders`. [#2685](https://github.com/Microsoft/vscode-cpptools/issues/2685)

### Instructions
To use the ""offline"" .vsix (that doesn't download dependencies on extension activation), download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.",54800346
725,False,True,2018-10-16T20:42:08Z,2018-10-17T00:15:41Z,"* Add IntegratedTerminal support for Linux and Windows. [#35](https://github.com/microsoft/vscode-cpptools/issues/35)
* Unify Visual Studio Code debug protocol parsing by using a shared library with Visual Studio.
* Fix Intellisense-based `Go to Definition` falling back to the Tag Parser for definitions not in the TU. [#2536](https://github.com/Microsoft/vscode-cpptools/issues/2536)
* Fix `-isystem` without a space after getting ignored in `compile_comamands.json`. [#2629](https://github.com/Microsoft/vscode-cpptools/issues/2629)
* Fix Insiders update channel installation failure on Windows/Mac. [#2636](https://github.com/Microsoft/vscode-cpptools/issues/2636)
* Fix IntelliSense-based `Go to Declaration` falling back to the Tag Parser if the definition is also in the TU. [#2642](https://github.com/Microsoft/vscode-cpptools/issues/2642)

### Instructions
To use the ""offline"" .vsix (that doesn't download dependencies on extension activation), download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.",54800346
726,False,True,2018-10-08T22:26:42Z,2018-10-09T20:32:51Z,"* Fix IntelliSense-based `Go to Definition` on overloads. [#1071](https://github.com/Microsoft/vscode-cpptools/issues/1071)
* Fix IntelliSense failing if recursive includes removes all paths. [#2442](https://github.com/Microsoft/vscode-cpptools/issues/2442)
* Fix incorrect IntelliSense errors with MinGW (stop using `-fms-extensions` by default). [#2443](https://github.com/Microsoft/vscode-cpptools/issues/2443), [#2623](https://github.com/Microsoft/vscode-cpptools/issues/2623)
* Fix error squiggles sometimes not updating after typing. [#2448](https://github.com/Microsoft/vscode-cpptools/issues/2448)
* Fix IntelliSense-based `Go to Definition` on the identifier of a definition with no declaration. [#2573](https://github.com/Microsoft/vscode-cpptools/issues/2573)
* Fix IntelliSense-based `Go to Definition` not falling back to the declaration (in certain cases). [#2574](https://github.com/Microsoft/vscode-cpptools/issues/2574)
* Fix IntelliSense-based `Go to Definition` going to the wrong location after edits are made. [#2579](https://github.com/Microsoft/vscode-cpptools/issues/2579)
* Fix `Go to Definition` when the `intelliSenseEngineFallback` is `Disabled` and `#include`s are missing. [#2583](https://github.com/Microsoft/vscode-cpptools/issues/2583)
* Fix empty `C_Cpp.default.*` settings not being used. [#2584](https://github.com/Microsoft/vscode-cpptools/issues/2584)
* Fix quoting around `ssh`'s command (for the debugger). [#2585](https://github.com/Microsoft/vscode-cpptools/issues/2585)
* Fix crash on hover (and `Go to Definition`) when using the `Tag Parser`. [#2586](https://github.com/Microsoft/vscode-cpptools/issues/2586)
* Fix errors when a workspace folder isn't open. [#2613](https://github.com/Microsoft/vscode-cpptools/issues/2613)

### Instructions
To use the ""offline"" .vsix (that doesn't download dependencies on extension activation), download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.",54800346
727,False,False,2018-09-27T22:05:13Z,2018-09-28T00:36:50Z,"* Change the symbol database to update without needing to save. [#202](https://github.com/Microsoft/vscode-cpptools/issues/202)
* Enable IntelliSense-based `Go to Definition` for the current translation unit, including local variables and overloaded operators. [#255](https://github.com/Microsoft/vscode-cpptools/issues/255), [#979](https://github.com/Microsoft/vscode-cpptools/issues/979)
* Improved the `Go to Definition` performance with large workspaces and files with lots of `#include`s. [#273](https://github.com/Microsoft/vscode-cpptools/issues/273)
* Disable `Go to Definition` for invalid tokens, e.g. comments, strings, keywords, etc. [#559](https://github.com/Microsoft/vscode-cpptools/issues/559)
* Add `C_Cpp.updateChannel` setting for easier access to Insider builds of the extension. [#1526](https://github.com/Microsoft/vscode-cpptools/issues/1526)
* Add support for v2 of the configuration provider API. [#2237](https://github.com/Microsoft/vscode-cpptools/issues/2237)
* Fix bug with parsing definitions in `compile_commands.json`. [#2305](https://github.com/Microsoft/vscode-cpptools/issues/2305)
* Fix `sh` failure when attaching to a remote Linux process. [#2444](https://github.com/Microsoft/vscode-cpptools/issues/2444)
* Fix incorrect default `cl.exe` macro. [PR #2468](https://github.com/Microsoft/vscode-cpptools/issues/2468)
* Fix multiple bugs with the symbols in the Outline view not updating correctly. [#2477](https://github.com/Microsoft/vscode-cpptools/issues/2477), [#2500](https://github.com/Microsoft/vscode-cpptools/issues/2500), [#2504](https://github.com/Microsoft/vscode-cpptools/issues/2504)
* Add support for `workspaceFolderBasename` expansion. [#2491](https://github.com/Microsoft/vscode-cpptools/issues/2491)
  * Gabriel Arjones (@g-arjones) [PR #2495](https://github.com/Microsoft/vscode-cpptools/pull/2495), [PR #2503](https://github.com/Microsoft/vscode-cpptools/pull/2503)
* Fix bug with variable resolution. [#2532](https://github.com/Microsoft/vscode-cpptools/issues/2532)
* Fix off-by-one bug with hover and `Go to Definition`. [#2535](https://github.com/Microsoft/vscode-cpptools/issues/2535)
* Fix for [Microsoft/vscode#54213](https://github.com/Microsoft/vscode/issues/54213)

### Instructions
To use the ""offline"" .vsix (that doesn't download dependencies on extension activation), download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.",54800346
728,False,False,2018-08-17T18:08:28Z,2018-08-17T18:43:45Z,"* Fix 0.18.0 regression causing non-MinGW compilers to use `-fms-extensions` on Windows. [#2424](https://github.com/Microsoft/vscode-cpptools/issues/2424), [#2425](https://github.com/Microsoft/vscode-cpptools/issues/2425) 

### Instructions
Download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.",54800346
729,False,False,2018-08-17T13:07:19Z,2018-08-17T13:35:09Z,"### New Features
* Add the `C_Cpp.intelliSenseEngine` setting value of `Disabled` (for users who only use the debugger). [#785](https://github.com/Microsoft/vscode-cpptools/issues/785)
* Add `C_Cpp.workspaceSymbols` setting with default `Just My Code` to filter out system header symbols. [#1119](https://github.com/Microsoft/vscode-cpptools/issues/1119), [#2320](https://github.com/Microsoft/vscode-cpptools/issues/2320)
* Add `C_Cpp.inactiveRegionForegroundColor` and `C_Cpp.inactiveRegionBackgroundColor` settings. [#1620](https://github.com/Microsoft/vscode-cpptools/issues/1620), [#2212](https://github.com/Microsoft/vscode-cpptools/issues/2212)
  * John Patterson (@john-patterson) [PR 2308](https://github.com/Microsoft/vscode-cpptools/pull/2308)
* Add `gcc-x64` `intelliSenseMode` and send the correct clang or gcc version to our parser, fixing various IntelliSense errors. [#2112](https://github.com/Microsoft/vscode-cpptools/issues/2112), [#2175](https://github.com/Microsoft/vscode-cpptools/issues/2175), [#2260](https://github.com/Microsoft/vscode-cpptools/issues/2260), [#2299](https://github.com/Microsoft/vscode-cpptools/issues/2299), [#2317](https://github.com/Microsoft/vscode-cpptools/issues/2317)
* Make `Go to Definition` on the definition go to the declaration instead. [#2298](https://github.com/Microsoft/vscode-cpptools/issues/2298)
* Add multi-pass environment variable resolution allowing variables defined in terms of other variables. [#2057](https://github.com/Microsoft/vscode-cpptools/issues/2057)
  * John Patterson (@john-patterson) [PR 2322](https://github.com/Microsoft/vscode-cpptools/pull/2322)
* Allow users to use `~` for `${userProfile}` on Windows. [PR 2333](https://github.com/Microsoft/vscode-cpptools/pull/2333)
* Add support for compiler flags `-fms-extensions` and `-fno-ms-extensions` on Windows (the default for MinGW-based compilers). [#2363](https://github.com/Microsoft/vscode-cpptools/issues/2363)
* Make completion ""show more results"" (i.e. inaccessible members) when invoked a 2nd time. [#2386](https://github.com/Microsoft/vscode-cpptools/issues/2386)

### Bug Fixes
* Fix attach to process for systems without `bash` by using `sh` instead. [#569](https://github.com/Microsoft/vscode-cpptools/issues/569)
  * Andy Neff (@andyneff) [PR 2340](https://github.com/Microsoft/vscode-cpptools/pull/2340)
* Fix IntelliSense crash after hover or completion with `_Complex` types. [#689](https://github.com/Microsoft/vscode-cpptools/issues/689), [#1112](https://github.com/Microsoft/vscode-cpptools/issues/1112)
* Fix `files.exclude` not working to exclude non-workspace folders from symbol parsing. [#1066](https://github.com/Microsoft/vscode-cpptools/issues/1066)
* Fix `Switch Header/Source` to give results that match the parent folder name before using just the file name. [#1085](https://github.com/Microsoft/vscode-cpptools/issues/1085)
* Fix incorrect IntelliSense errors caused by namespace lookup failure when instantiation template arguments in clang mode. [#1395](https://github.com/Microsoft/vscode-cpptools/issues/1395), [#1559](https://github.com/Microsoft/vscode-cpptools/issues/1559), [#1753](https://github.com/Microsoft/vscode-cpptools/issues/1753), [#2272](https://github.com/Microsoft/vscode-cpptools/issues/2272)
* Fix missing parameter help when using { for constructors. [#1667](https://github.com/Microsoft/vscode-cpptools/issues/1667)
* Fix Mac framework dependencies not being discovered. [#1913](https://github.com/Microsoft/vscode-cpptools/issues/1913)
* Fix `compilerPath` not working with `${workspaceFolder}`. [#1982](https://github.com/Microsoft/vscode-cpptools/issues/1982)
* Fix red flame getting stuck after modifying `c_cpp_properties.json`. [#2077](https://github.com/Microsoft/vscode-cpptools/issues/2077)
* Don't add empty `windowsSDKVersion` if none exists. [#2300](https://github.com/Microsoft/vscode-cpptools/issues/2300)
* Fix IntelliSense crash when the gcc-8 type_traits header is used. [#2323](https://github.com/Microsoft/vscode-cpptools/issues/2323), [#2328](https://github.com/Microsoft/vscode-cpptools/issues/2328)
* Limit configuration popups to one at a time. [#2324](https://github.com/Microsoft/vscode-cpptools/issues/2324)
* Don't show `includePath` code actions if compile commands or custom configuration providers are used. [#2334](https://github.com/Microsoft/vscode-cpptools/issues/2334)
* Fix `Cpp.clang_format_path` not accepting environment variables. [#2344](https://github.com/Microsoft/vscode-cpptools/issues/2344)
* Fix IntelliSense not working with non-ASCII characters in the WSL install path. [#2351](https://github.com/Microsoft/vscode-cpptools/issues/2351)
* Filter out buggy IntelliSense error `""= delete"" can only appear on the first declaration of a function`. [#2352](https://github.com/Microsoft/vscode-cpptools/issues/2352)
* Fix IntelliSense failing with WSL if gcc is installed bug g++ isn't. [#2360](https://github.com/Microsoft/vscode-cpptools/issues/2360)
* Fix WSL paths starting with `/mnt/` failing to get symbols parsed. [#2361](https://github.com/Microsoft/vscode-cpptools/issues/2361)
* Fix IntelliSense process crash when hovering over a designated initializer list with an anonymous struct. [#2370](https://github.com/Microsoft/vscode-cpptools/issues/2370)
* Stop showing ""File: "" in completion details for internal compiler defines. [#2387](https://github.com/Microsoft/vscode-cpptools/issues/2387)
* Invoke `Edit Configurations...` when the `Configuration Help` button is clicked. [#2408](https://github.com/Microsoft/vscode-cpptools/issues/2408)
* Fix provider configuration prompt not showing for newly added workspace folders. [#2415](https://github.com/Microsoft/vscode-cpptools/issues/2415)
* Fix to allow SIGINT to be sent using the kill -2 command when using pipeTransport.

### Instructions
Download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.",54800346
730,False,True,2018-08-04T00:58:03Z,2018-08-06T07:12:28Z,"* Fix attach to process for systems without `bash` by using `sh` instead. [#569](https://github.com/Microsoft/vscode-cpptools/issues/569)
  * Andy Neff (@andyneff) [PR 2340](https://github.com/Microsoft/vscode-cpptools/pull/2340)
* Fix IntelliSense crash after hover or completion with `_Complex` types. [#689](https://github.com/Microsoft/vscode-cpptools/issues/689), [#1112](https://github.com/Microsoft/vscode-cpptools/issues/1112)
* Add `C_Cpp.workspaceSymbols` setting with default `Just My Code` to filter out system header symbols. [#1119](https://github.com/Microsoft/vscode-cpptools/issues/1119), [#2320](https://github.com/Microsoft/vscode-cpptools/issues/2320)
* Add `C_Cpp.inactiveRegionForegroundColor` and `C_Cpp.inactiveRegionBackgroundColor` settings. [#1620](https://github.com/Microsoft/vscode-cpptools/issues/1620), [#2212](https://github.com/Microsoft/vscode-cpptools/issues/2212)
  * John Patterson (@john-patterson) [PR 2308](https://github.com/Microsoft/vscode-cpptools/pull/2308)
* Fix Mac framework dependencies not being discovered. [#1913](https://github.com/Microsoft/vscode-cpptools/issues/1913)
* Fix red flame getting stuck after modifying `c_cpp_properties.json`. [#2077](https://github.com/Microsoft/vscode-cpptools/issues/2077)
* Add `gcc-x64` `intelliSenseMode` and send the correct clang or gcc version to our parser, fixing various IntelliSense errors. [#2175](https://github.com/Microsoft/vscode-cpptools/issues/2175), [#2299](https://github.com/Microsoft/vscode-cpptools/issues/2299), [#2317](https://github.com/Microsoft/vscode-cpptools/issues/2317)
* Make `Go to Definition` on the definition go to the declaration instead. [#2298](https://github.com/Microsoft/vscode-cpptools/issues/2298)
* Don't add empty `windowsSDKVersion` if none exists. [#2300](https://github.com/Microsoft/vscode-cpptools/issues/2300)
* Add multi-pass environment variable resolution allowing variables defined in terms of other variables. [#2322](https://github.com/Microsoft/vscode-cpptools/pull/2322)
  * John Patterson (@john-patterson) [PR 2322](https://github.com/Microsoft/vscode-cpptools/pull/2322)
* Fix IntelliSense crash when the gcc-8 type_traits header is used. [#2323](https://github.com/Microsoft/vscode-cpptools/issues/2323), [#2328](https://github.com/Microsoft/vscode-cpptools/issues/2328)
* Limit configuration popups to one at a time. [#2324](https://github.com/Microsoft/vscode-cpptools/issues/2324)
* Allow users to use `~` for `${userProfile}` on Windows. [PR 2333](https://github.com/Microsoft/vscode-cpptools/pull/2333)
* Filter out buggy IntelliSense error `""= delete"" can only appear on the first declaration of a function`. [#2352](https://github.com/Microsoft/vscode-cpptools/issues/2352)

### Instructions
Download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.",54800346
731,False,False,2018-07-19T19:27:41Z,2018-07-19T21:46:27Z,"* Fix `Go to Definition` for code scoped with an aliased namespace. [#387](https://github.com/Microsoft/vscode-cpptools/issues/387)
* Fix incorrect IntelliSense errors with template template-arguments. [#1014](https://github.com/Microsoft/vscode-cpptools/issues/1014)
* Fix crash when using designated initializer lists. [#1440](https://github.com/Microsoft/vscode-cpptools/issues/1440)
* Add `windowsSdkVersion` to `c_cpp_properties.json`. [#1585](https://github.com/Microsoft/vscode-cpptools/issues/1585)
* Add `${vcpkgRoot}` variable. [#1817](https://github.com/Microsoft/vscode-cpptools/issues/1817)
* Fix dangling IntelliSense processes. [#2075](https://github.com/Microsoft/vscode-cpptools/issues/2075), [#2169](https://github.com/Microsoft/vscode-cpptools/issues/2169)
* Fix incorrect IntelliSense errors when class template argument deduction is used. [#2101](https://github.com/Microsoft/vscode-cpptools/issues/2101)
* Skip automatic parsing of source files in Mac system framework paths. [#2156](https://github.com/Microsoft/vscode-cpptools/issues/2156)
* Fix `Edit Configurations...` not working after `c_cpp_properties.json` is deleted. [#2214](https://github.com/Microsoft/vscode-cpptools/issues/2214)
* Fix indexing of the entire root drive on Windows when no is folder open. [#2216](https://github.com/Microsoft/vscode-cpptools/issues/2216)
* Disable the config provider message for headers outside the workspace and when debugging. [#2221](https://github.com/Microsoft/vscode-cpptools/issues/2221)
* Add `Change Configuration Provider...` command. [#2224](https://github.com/Microsoft/vscode-cpptools/issues/2224)
* Fix out-of-memory crash with `#include` code actions when no folder is open. [#2225](https://github.com/Microsoft/vscode-cpptools/issues/2225)
* Fix `intelliSenseMode` with custom config providers on Windows. [#2228](https://github.com/Microsoft/vscode-cpptools/issues/2228)
* Fix formatting not working on Windows if the VC++ 2015 redist isn't installed. [#2232](https://github.com/Microsoft/vscode-cpptools/issues/2232)
* Fix variables not resolving in `macFrameworkPath`. [#2234](https://github.com/Microsoft/vscode-cpptools/issues/2234)
* Fix `Go to Definition` not working for macros followed by `.` or `->`. [#2245](https://github.com/Microsoft/vscode-cpptools/issues/2245)
* Fix `#include` autocomplete with Mac framework headers. [#2251](https://github.com/Microsoft/vscode-cpptools/issues/2251)
* Fix for debugging to support empty arguments for debuggee. [#2258](https://github.com/Microsoft/vscode-cpptools/issues/2258)
* Fix `Go to Definition` bug (missing symbols outside the workspace). [#2281](https://github.com/Microsoft/vscode-cpptools/issues/2281)
* Add a setting to silence configuration provider warnings. [#2292](https://github.com/Microsoft/vscode-cpptools/issues/2292)
* Fix for debugging async Visual C++ causing debugger to hang.
* Fix `main` snippet.

### Known Issues

* Due to bug [#2169](https://github.com/Microsoft/vscode-cpptools/issues/2169) from the previous release, you may still experience failures until all the dangling, old processes are killed (or restarting your machine), because the processes maintain a lock on the same database file. See https://github.com/Microsoft/vscode-cpptools/issues/2296 for one case of this.

### Instructions
Download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.
",54800346
732,False,True,2018-07-12T23:13:52Z,2018-07-13T00:23:09Z,"* Fix `Go to Definition` for code scoped with an aliased namespace. [#387](https://github.com/Microsoft/vscode-cpptools/issues/387)
* Fix incorrect IntelliSense errors with template template-arguments. [#1014](https://github.com/Microsoft/vscode-cpptools/issues/1014)
* Fix crash when using designated initializer lists. [#1440](https://github.com/Microsoft/vscode-cpptools/issues/1440)
* Add `windowsSdkVersion` to `c_cpp_properties.json`. [#1585](https://github.com/Microsoft/vscode-cpptools/issues/1585)
* Add `${vcpkgRoot}` variable. [#1817](https://github.com/Microsoft/vscode-cpptools/issues/1817)
* Fix dangling IntelliSense processes and stuck red flame. [#2075](https://github.com/Microsoft/vscode-cpptools/issues/2075), [#2077](https://github.com/Microsoft/vscode-cpptools/issues/2077), [#2169](https://github.com/Microsoft/vscode-cpptools/issues/2169)
* Fix incorrect IntelliSense errors when class template argument deduction is used. [#2101](https://github.com/Microsoft/vscode-cpptools/issues/2101)
* Skip automatic parsing of source files in Mac system framework paths. [#2156](https://github.com/Microsoft/vscode-cpptools/issues/2156)
* Fix `Edit Configurations...` not working after `c_cpp_properties.json` is deleted. [#2214](https://github.com/Microsoft/vscode-cpptools/issues/2214)
* Fix indexing of the entire root drive on Windows when no is folder open. [#2216](https://github.com/Microsoft/vscode-cpptools/issues/2216)
* Disable the config provider message for headers outside the workspace and when debugging. [#2221](https://github.com/Microsoft/vscode-cpptools/issues/2221)
* Add `Change Configuration Provider...` command. [#2224](https://github.com/Microsoft/vscode-cpptools/issues/2224)
* Fix out-of-memory crash with `#include` code actions when no folder is open. [#2225](https://github.com/Microsoft/vscode-cpptools/issues/2225)
* Fix `intelliSenseMode` with custom config providers on Windows. [#2228](https://github.com/Microsoft/vscode-cpptools/issues/2228)
* Fix variables not resolving in `macFrameworkPath`. [#2234](https://github.com/Microsoft/vscode-cpptools/issues/2234)
* Fix `Go to Definition` not working for macros followed by `.` or `->`. [#2245](https://github.com/Microsoft/vscode-cpptools/issues/2245)

### Known Issues

This release had some regressions (unreported) that were fixed in the final 0.17.7 release.

### Instructions
Download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.
",54800346
733,False,False,2018-07-02T18:38:35Z,2018-07-02T21:38:50Z,"* Fix the database icon getting stuck with recursive includes. [#2104](https://github.com/Microsoft/vscode-cpptools/issues/2104)
* Fix the red flame appearing late with recursive includes. [#2105](https://github.com/Microsoft/vscode-cpptools/issues/2105)
* Fix source files being parsed in system directories. [#2156](https://github.com/Microsoft/vscode-cpptools/issues/2156)
   NOTE: This wasn't fixed for system frameworks on Mac.
* Fix internal document corruption (visible after formatting) when edits are made too soon after activation. [#2162](https://github.com/Microsoft/vscode-cpptools/issues/2162)
* Fix a crash when saving with recursive includes. [#2173](https://github.com/Microsoft/vscode-cpptools/issues/2173)
* Fix a crash when the `includePath` or `browse.path` is `""**""`. [#2174](https://github.com/Microsoft/vscode-cpptools/issues/2174)
* Fix IntelliSense for WSL without g++ installed. [#2178](https://github.com/Microsoft/vscode-cpptools/issues/2178)
* Fix random IntelliSense (completion) failures due to edits being delayed. [#2184](https://github.com/Microsoft/vscode-cpptools/issues/2184)
* Fix database deletion failure with non-ASCII file paths on Windows. [#2205](https://github.com/Microsoft/vscode-cpptools/issues/2205)
* Fix `Go to Definition` results with `var::` and `var->`, and filter out invalid constructor results. [#2207](https://github.com/Microsoft/vscode-cpptools/issues/2207)
* Fix a performance bug with recursive includes.
* Fixed a CPU usage problem on Mac related to system frameworks parsing.
* Keep the IntelliSense process around for 10 seconds after a file is closed in case it's needed again.
* Added an API so build system extensions can provide IntelliSense configurations for source files. More details at [npmjs.com](https://www.npmjs.com/package/vscode-cpptools).
* Fix automatic argument quoting when debugging with gdb/lldb to include when the argument has a '(' or ')' in it. Also escape existing '""' symbols.
* Removed `-` in `ps` call for ProcessPicker and RemoteProcessPicker. [#2183](https://github.com/Microsoft/vscode-cpptools/issues/2183)

### Instructions
Download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.",54800346
734,False,False,2018-06-22T01:42:58Z,2018-06-22T03:30:43Z,"* Detect `compile_commands.json` and show prompt to use it. [#1297](https://github.com/Microsoft/vscode-cpptools/issues/1297)
* Change inactive regions from gray to translucent. [#1907](https://github.com/Microsoft/vscode-cpptools/issues/1907)
* Improve performance of recursive includes paths. [#2068](https://github.com/Microsoft/vscode-cpptools/issues/2068)
* Fix IntelliSense client failure due to `No args provider`. [#1908](https://github.com/Microsoft/vscode-cpptools/issues/1908)
* Fix `#include` completion with headers in the same directory. [#2031](https://github.com/Microsoft/vscode-cpptools/issues/2031)
* Fix non-header files outside the workspace folder not being parsed (i.e. so `Go to Definition` works). [#2053](https://github.com/Microsoft/vscode-cpptools/issues/2053)
* Fix some crashes. [#2080](https://github.com/Microsoft/vscode-cpptools/issues/2080)
* Support asm clobber registers on Windows. [#2090](https://github.com/Microsoft/vscode-cpptools/issues/2090)
* Fix usage of `${config:section.setting}`. [#2165](https://github.com/Microsoft/vscode-cpptools/issues/2165)
* `browse.path` now inherits `includePath` if not set in `c_cpp_properties.json`.
* On Windows, `compilerPath` now populates with the guessed `cl.exe` path, and the `MSVC` include path is based on the `cl.exe` path.
* Fix files under a non-recursive `browse.path` being removed from the database.
* Fix `*` not working in `browse.path` with WSL.
* Fix for -break-insert main returning multiple bind points. [#729](https://github.com/Microsoft/MIEngine/pull/729)
* Use -- instead of -x for gnome-terminal. [#733](https://github.com/Microsoft/MIEngine/pull/733)
* Added `miDebuggerArgs` in order to pass arguments to the program in `miDebuggerPath`. [#720](https://github.com/Microsoft/MIEngine/pull/720)

### Instructions
Download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.",54800346
735,False,True,2018-06-07T23:26:44Z,2018-06-08T01:08:39Z,"* Change inactive regions from gray to translucent. [#1907](https://github.com/Microsoft/vscode-cpptools/issues/1907)
* Improve performance of recursive includes paths. [#2068](https://github.com/Microsoft/vscode-cpptools/issues/2068)
* Fix #include completion with headers in the same directory. [#2031](https://github.com/Microsoft/vscode-cpptools/issues/2031)
* Support asm clobber registers on Windows. [#2090](https://github.com/Microsoft/vscode-cpptools/issues/2090)
* Fix some crashes. [#2080](https://github.com/Microsoft/vscode-cpptools/issues/2080)

### Instructions
Download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.",54800346
736,False,False,2018-05-31T23:11:05Z,2018-06-01T00:47:14Z,"* Fix infinite loop (caused by deadlock) when using recursive includes. [#2043](https://github.com/Microsoft/vscode-cpptools/issues/2043)
* Stop using recursive includes in the default configuration.
  * @Hyzeta [PR #2059](https://github.com/Microsoft/vscode-cpptools/pull/2059)
* Fix various other potential deadlocks and crashes.
* Fix Go to Definition on `#include` not filtering out results based on the path. [#1253](https://github.com/Microsoft/vscode-cpptools/issues/1253), [#2033](https://github.com/Microsoft/vscode-cpptools/issues/2033)
* Fix database icon getting stuck. [#1917](https://github.com/Microsoft/vscode-cpptools/issues/1917)

### Instructions
Download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.",54800346
737,False,False,2018-05-22T20:17:55Z,2018-05-22T23:05:44Z,"* Add support for `${workspaceFolder:folderName}`. [#1774](https://github.com/Microsoft/vscode-cpptools/issues/1774)
* Fix infinite loop during initialization on Windows. [#1960](https://github.com/Microsoft/vscode-cpptools/issues/1960)
* Fix main process IntelliSense-related crashes. [#2006](https://github.com/Microsoft/vscode-cpptools/issues/2006)
* Fix deadlock after formatting large files. [#2007](https://github.com/Microsoft/vscode-cpptools/issues/2007)
* Fix recursive includes failing to find some system includes. [#2019](https://github.com/Microsoft/vscode-cpptools/issues/2019)

### Instructions
Download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.",54800346
738,False,True,2018-05-22T02:24:59Z,2018-05-22T02:29:40Z,"* Fix infinite loop during initialization on Windows. [#1960](https://github.com/Microsoft/vscode-cpptools/issues/1960)
* Fix main process IntelliSense-related crashes. [#2006](https://github.com/Microsoft/vscode-cpptools/issues/2006)
* Fix deadlock after formatting large files. [#2007](https://github.com/Microsoft/vscode-cpptools/issues/2007)
* Fix recursive includes failing to find some system includes. [#2019](https://github.com/Microsoft/vscode-cpptools/issues/2019)

### Instructions
Download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.

### NOTE

This vsix has the unintended version of 0.17.2 instead of 0.17.2-insiders, so our actual 0.17.2 was bumped to 0.17.3.

### Status

This is the build we plan to release tomorrow, but we still need to do a final build and test pass (we found/fixed a last minute bug that delayed the official release).
",54800346
739,False,False,2018-05-17T02:57:30Z,2018-05-17T22:00:33Z,"* Improve performance of recursive includes. #1949
* Fix code navigation failure after switching between WSL and non-WSL configs. #1958
* Fix extension crash when the includePath is a file or the root drive. #1979, #1965
* Fix IntelliSense crash in have_member_access_from_class_scope. #1763
* Fix #include completion bugs. #1959, #1970
* Add Debug value for loggingLevel (previously the hidden value ""6"").
* Fix C++17 features not being fully enabled with msvc-x64 mode. #1990
* Fix IntelliSense interprocess deadlocks. #1407, #1777",54800346
740,False,False,2018-05-07T20:44:53Z,2018-05-07T23:54:50Z,"[April 2018 Update]()

## Notable features in this release

### Autocomplete for `#include` (#802)
If you type a `""` or `<` after the `#include` keyword, you will get suggestions for header files that you can include.  The suggestions are computed based on your `""browse.path""` and `""includePath""`.
* NOTE: We don't inspect `""compileCommands""` to provide the information for this feature yet.

### Configuration Improvements (#1338)

#### Better support for system include paths if `""compilerPath""` is set
If you set the `""compilerPath""` property in your **c_cpp_properties.json** configurations, you no longer need to manually add the system include paths or defines to the configurations.  We will implicitly add them to `""includePath""`, `""defines""`, and `""browse.path""` for you.  In other words, we will not write them to **c_cpp_properties.json**, but the language server will use them.

#### Better support for `""compilerPath""` on Windows (#1845, #1736)
In **c_cpp_properties.json** you can directly address your WSL compiler by using the linux path and we will discover the system include path for you.  If you have multiple distros installed, we pick the one marked as Default when you run `wslconfig.exe /l`

For example:
```
        {
            ""name"": ""WSL"",
            ""compilerPath"": ""/usr/bin/gcc"",
            ...
        }
```

We also detect Cygwin now and will transform the system include path the compiler provides to one that Windows understands.

#### Setting default values for configuration properties (#368, #410, #1229, #1270, #1404)
New settings have been added to the extension that allow you to set defaults for all of the properties in **c_cpp_properties.json** configs so that you don't have to set the same values over and over if most of your projects have similar configurations.

### Support for WSL on Windows builds 17110 and higher (#1694)

Starting with Windows build 17110, case-sensitive folders were turned on for WSL installations by default.  The extension has been updated to work with case-sensitive files on Windows when a WSL configuration is detected.

### Recursive includePath syntax (#897)

You can now use recursive paths when configuring IntelliSense.  Using two asterisks `**` at the end of a path instructs the extension to do a recursive search for includes starting from that folder:

```
    ""includePath"": ""${workspaceFolder}/**""
```

We are still working on optimizations to improve the experience in large projects with hundreds of folders, but initial support is available in this release (as a result, the IntelliSense features may take longer to be available after opening/editing a file, i.e. the red flame). Also, newly added folders with headers are not picked up until the workspace is reloaded.

### Code snippets

We have added a few code snippets to the extension.  They will show up in the auto-complete list as you are writing code and they can be used to insert boilerplate code for common tasks like declaring a class, writing a for loop, etc.

### Vcpkg integration

[Vcpkg](https://github.com/Microsoft/vcpkg) is a cross-platform package manager for C++. We will automatically add Vcpkg's header download location to the include path for opened folders that have not generated a **c_cpp_properties.json** configuration file yet.

### Updated Visual Studio Windows Debugger

Updated the ""cppvsdbg"" used (i.e. when compiling with cl.exe).

We also fixed the following issues: #1559, #1577, #1771, #1782, #1783, #1790, #1819, #1873, #1890",54800346
741,False,True,2018-05-03T23:27:03Z,2018-05-03T23:57:41Z,"### Instructions
Download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.

**NOTE**: This VSIX has a dependency on VS Code version 1.22.  If you try to install one of these VSIX packages with an earlier version of VS Code, the extension will not load.

## Notable features in this release

All of the features listed in [0.17.0-insiders](https://github.com/Microsoft/vscode-cpptools/releases/tag/v0.17.0-insiders), plus:

### Support for WSL on Windows builds 17110 and higher

Starting with Windows build 17110, case-sensitive folders were turned on for WSL installations by default.  This broke most of the extension's features and we have resolved most of them.  If you still see problems with WSL in the latest Windows builds, please let us know.  We are still working on an issue with switching configurations between WSL and non-WSL.  Reloading the VS Code window after changing to a WSL config will resolve that issue.

### Recursive includePath syntax

You can now use recursive paths when configuring IntelliSense.  Using two asterisks `**` at the end of a path instructs the extension to do a recursive search for includes starting from that folder:

```
    ""includePath"": ""${workspaceFolder}/**""
```

We are still working on optimizations to improve the experience in large projects with hundreds of folders, but initial support is available in this release (as a result, the IntelliSense features may take longer to be available after opening/editing a file, i.e. the red flame). Also, newly added folders with headers are not picked up until the workspace is reloaded.

### Code snippets

We have added a few code snippets to the extension.  They will show up in the auto-complete list as you are writing code and they can be used to insert boilerplate code for common tasks like declaring a class, writing a for loop, etc.


### Updated Visual Studio Windows Debugger

Updated the ""cppvsdbg"" used (i.e. when compiling with cl.exe).
",54800346
742,False,True,2018-04-24T15:32:06Z,2018-04-24T20:10:12Z,"### Instructions
Download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.

**NOTE**: This VSIX has a dependency on VS Code version 1.22.  If you try to install one of these VSIX packages with an earlier version of VS Code, the extension will not load.

## Notable features in this release

### Autocomplete for `#include`
If you type a `""` or `<` after the `#include` keyword, you will get suggestions for header files that you can include.  The suggestions are computed based on your `""browse.path""` and `""includePath""`.
* NOTE: We don't inspect `""compileCommands""` to provide the information for this feature yet.

### Better support for system include paths if `""compilerPath""` is set
If you set the `""compilerPath""` property in your **c_cpp_properties.json** configurations, you no longer need to manually add the system include paths or defines to the configurations.  We will implicitly add them to `""includePath""`, `""defines""`, and `""browse.path""` for you.  In other words, we will not write them to **c_cpp_properties.json**, but the language server will use them.

### Better support for `""compilerPath""` on Windows
In **c_cpp_properties.json** you can directly address your WSL compiler by using the linux path and we will discover the system include path for you.  If you have multiple distros installed, we pick the one marked as Default when you run `wslconfig.exe /l`

For example:
```
        {
            ""name"": ""WSL"",
            ""compilerPath"": ""/usr/bin/gcc"",
            ...
        }
```

We also detect Cygwin now and will transform the system include path the compiler provides to one that Windows understands.

### Setting default values for configuration properties
New settings have been added to the extension that allow you to set defaults for all of the properties in **c_cpp_properties.json** configs so that you don't have to set the same values over and over if most of your projects have similar configurations.  We will write documentation for this before the final release, but more details can be found in issue [#1338](https://github.com/Microsoft/vscode-cpptools/issues/1338#issuecomment-380851175)",54800346
743,False,False,2018-03-31T00:08:02Z,2018-03-31T00:54:39Z,"* Fix random deadlock caused by logging code on Linux/Mac. [#1759](https://github.com/Microsoft/vscode-cpptools/issues/1759)
* Fix compiler from `compileCommands` not being queried for includes/defines if `compilerPath` isn't set on Windows. [#1754](https://github.com/Microsoft/vscode-cpptools/issues/1754)
* Fix OSX `UseShellExecute` I/O bug. [#1756](https://github.com/Microsoft/vscode-cpptools/issues/1756)
* Invalidate partially unzipped files from package manager. [#1757](https://github.com/Microsoft/vscode-cpptools/issues/1757)",54800346
744,False,False,2018-03-28T03:36:40Z,2018-03-29T05:30:12Z,"Instructions: Download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.

* Enable autocomplete for local and global scopes. [#13](https://github.com/Microsoft/vscode-cpptools/issues/13)
* Add a setting to define multiline comment patterns: `C_Cpp.commentContinuationPatterns`. [#1100](https://github.com/Microsoft/vscode-cpptools/issues/1100), [#1539](https://github.com/Microsoft/vscode-cpptools/issues/1539)
* Add a setting to disable inactive region highlighting: `C_Cpp.dimInactiveRegions`. [#1592](https://github.com/Microsoft/vscode-cpptools/issues/1592)
* Add `forcedInclude` configuration setting. [#852](https://github.com/Microsoft/vscode-cpptools/issues/852)
* Add `compilerPath`, `cStandard`, and `cppStandard` configuration settings, and query gcc/clang-based compilers for default defines. [#1293](https://github.com/Microsoft/vscode-cpptools/issues/1293), [#1251](https://github.com/Microsoft/vscode-cpptools/issues/1251), [#1448](https://github.com/Microsoft/vscode-cpptools/issues/1448), [#1465](https://github.com/Microsoft/vscode-cpptools/issues/1465), [#1484](https://github.com/Microsoft/vscode-cpptools/issues/1484)
* Fix text being temporarily gray when an inactive region is deleted. [Microsoft/vscode#44872](https://github.com/Microsoft/vscode/issues/44872)
* Add support for `${workspaceFolder}` variable in **c_cpp_properties.json**. [#1392](https://github.com/Microsoft/vscode-cpptools/issues/1392)
* Fix IntelliSense not updating in source files after dependent header files are changed. [#1501](https://github.com/Microsoft/vscode-cpptools/issues/1501)
* Change database icon to use the `statusBar.foreground` color. [#1638](https://github.com/Microsoft/vscode-cpptools/issues/1638)
* Enable C++/CLI IntelliSense mode via adding the `/clr` arg to the `compilerPath`. [#1596](https://github.com/Microsoft/vscode-cpptools/issues/1596)
* Fix delay in language service activation caused by **cpptools.json** downloading. [#1640](https://github.com/Microsoft/vscode-cpptools/issues/1640)
* Fix debugger failure when a single quote is in the path. [#1554](https://github.com/Microsoft/vscode-cpptools/issues/1554)
* Fix terminal stdout and stderr redirection to not send to VS Code. [#1348](https://github.com/Microsoft/vscode-cpptools/issues/1348)
* Fix blank config and endless ""Initializing..."" if the file watcher limit is hit when using `compileCommands`. [PR #1709](https://github.com/Microsoft/vscode-cpptools/pull/1709)
* Fix error squiggles re-appearing after editing then closing a file. [#1712](https://github.com/Microsoft/vscode-cpptools/issues/1712)
* Show error output from clang-format. [#1259](https://github.com/Microsoft/vscode-cpptools/issues/1259)
* Fix `add_expression_to_index` crash (most frequent crash in 0.15.0). [#1396](https://github.com/Microsoft/vscode-cpptools/issues/1396)
* Fix incorrect error squiggle `explicitly instantiated more than once`. [#871](https://github.com/Microsoft/vscode-cpptools/issues/871)",54800346
745,False,True,2018-03-23T20:26:27Z,2018-03-23T20:37:21Z,"Instructions: Download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.

* Enable autocomplete for local and global scopes. [#13](https://github.com/Microsoft/vscode-cpptools/issues/13)
* Add a setting to define multiline comment patterns: `C_Cpp.commentContinuationPatterns`. [#1100](https://github.com/Microsoft/vscode-cpptools/issues/1100), [#1539](https://github.com/Microsoft/vscode-cpptools/issues/1539)
* Add a setting to disable inactive region highlighting: `C_Cpp.dimInactiveRegions`. [#1592](https://github.com/Microsoft/vscode-cpptools/issues/1592)
* Add `forcedInclude` configuration setting. [#852](https://github.com/Microsoft/vscode-cpptools/issues/852)
* Add `compilerPath`, `cStandard`, and `cppStandard` configuration settings, and query gcc/clang-based compilers for default defines. [#1293](https://github.com/Microsoft/vscode-cpptools/issues/1293), [#1251](https://github.com/Microsoft/vscode-cpptools/issues/1251), [#1448](https://github.com/Microsoft/vscode-cpptools/issues/1448), [#1465](https://github.com/Microsoft/vscode-cpptools/issues/1465), [#1484](https://github.com/Microsoft/vscode-cpptools/issues/1484)
* Fix text being temporarily gray when an inactive region is deleted. [Microsoft/vscode#44872](https://github.com/Microsoft/vscode/issues/44872)
* Add support for `${workspaceFolder}` variable in **c_cpp_properties.json**. [#1392](https://github.com/Microsoft/vscode-cpptools/issues/1392)
* Fix IntelliSense not updating in source files after dependent header files are changed. [#1501](https://github.com/Microsoft/vscode-cpptools/issues/1501)
* Change database icon to use the `statusBar.foreground` color. [#1638](https://github.com/Microsoft/vscode-cpptools/issues/1638)
* Enable C++/CLI IntelliSense mode via adding the `/clr` arg to the `compilerPath`. [#1596](https://github.com/Microsoft/vscode-cpptools/issues/1596)
* Fix delay in language service activation caused by **cpptools.json** downloading. [#1640](https://github.com/Microsoft/vscode-cpptools/issues/1640)
* Fix debugger failure when a single quote is in the path. [#1554](https://github.com/Microsoft/vscode-cpptools/issues/1554)
* Fix terminal stdout and stderr redirection to not send to VS Code. [#1348](https://github.com/Microsoft/vscode-cpptools/issues/1348)
* Fix blank config and endless ""Initializing..."" if the file watcher limit is hit when using `compileCommands`. [PR #1709](https://github.com/Microsoft/vscode-cpptools/pull/1709)
* Fix error squiggles re-appearing after editing then closing a file. [#1712](https://github.com/Microsoft/vscode-cpptools/issues/1712)
* Show error output from clang-format. [#1259](https://github.com/Microsoft/vscode-cpptools/issues/1259)
* Fix `add_expression_to_index` crash (most frequent crash in 0.15.0). [#1396](https://github.com/Microsoft/vscode-cpptools/issues/1396)
* Fix incorrect error squiggle `explicitly instantiated more than once`. [#871](https://github.com/Microsoft/vscode-cpptools/issues/871)",54800346
746,False,True,2018-03-08T23:21:29Z,2018-03-09T00:18:50Z,"Download the .vsix that matches your OS and run the ""Install from VSIX"" command in VS Code.

* Enable autocomplete for local and global scopes. [#13](https://github.com/Microsoft/vscode-cpptools/issues/13)
* Add a setting to define multiline comment patterns: `C_Cpp.commentContinuationPatterns`. [#1100](https://github.com/Microsoft/vscode-cpptools/issues/1100), [#1539](https://github.com/Microsoft/vscode-cpptools/issues/1539)
* Add a setting to disable inactive region highlighting: `C_Cpp.dimInactiveRegions`. [#1592](https://github.com/Microsoft/vscode-cpptools/issues/1592)
* Add `forcedInclude` configuration setting. [#852](https://github.com/Microsoft/vscode-cpptools/issues/852)
* Add `compilerPath`, `cStandard`, and `cppStandard` configuration settings, and query gcc/clang-based compilers for default defines. [#1293](https://github.com/Microsoft/vscode-cpptools/issues/1293), [#1251](https://github.com/Microsoft/vscode-cpptools/issues/1251), [#1448](https://github.com/Microsoft/vscode-cpptools/issues/1448), [#1465](https://github.com/Microsoft/vscode-cpptools/issues/1465), [#1484](https://github.com/Microsoft/vscode-cpptools/issues/1484)
* Fix text being temporarily gray when an inactive region is deleted. [Microsoft/vscode#44872](https://github.com/Microsoft/vscode/issues/44872)
* Add support for `${workspaceFolder}` variable in **c_cpp_properties.json**. [#1392](https://github.com/Microsoft/vscode-cpptools/issues/1392)

This is the March 9th update to Insiders, which fixed a couple bugs with the March 8th version (attach debugging and forcedInclude crash).

Known issues (that will be fixed in our next release): Global :: doesn't work, compilerPath doesn't work on Windows with gcc/clang-based compilers and WSL, and command line args are not addable to the compilerPath.
",54800346
747,False,False,2018-02-15T00:55:56Z,2018-02-15T22:20:35Z,"* Add colorization for inactive regions. [#1466](https://github.com/Microsoft/vscode-cpptools/issues/1466)
* Fix 3 highest hitting crashes. [#1137](https://github.com/Microsoft/vscode-cpptools/issues/1137), [#1337](https://github.com/Microsoft/vscode-cpptools/issues/1337), [#1497](https://github.com/Microsoft/vscode-cpptools/issues/1497)
* Update IntelliSense compiler (bug fixes and more C++17 support). [#1067](https://github.com/Microsoft/vscode-cpptools/issues/1067), [#1313](https://github.com/Microsoft/vscode-cpptools/issues/1313), [#1461](https://github.com/Microsoft/vscode-cpptools/issues/1461)
* Fix duplicate `cannot open source file` errors. [#1469](https://github.com/Microsoft/vscode-cpptools/issues/1469)
* Fix `Go to Symbol in File...` being slow for large workspaces. [#1472](https://github.com/Microsoft/vscode-cpptools/issues/1472)
* Fix stuck processes during shutdown. [#1474](https://github.com/Microsoft/vscode-cpptools/issues/1474)
* Fix error popup appearing with non-workspace files when using `compile_commands.json`. [#1475](https://github.com/Microsoft/vscode-cpptools/issues/1475)
* Fix snippet completions being blocked after `#`. [#1531](https://github.com/Microsoft/vscode-cpptools/issues/1531)
* Add more macros to `cpp.hint` (fixing missing symbols).
* Add `__CHAR_BIT__=8` to default defines on Mac. [#1510](https://github.com/Microsoft/vscode-cpptools/issues/1510)
* Added support for config variables to `c_cpp_properties.json`. [#314](https://github.com/Microsoft/vscode-cpptools/issues/314)
  * Joshua Cannon (@thejcannon) [PR #1529](https://github.com/Microsoft/vscode-cpptools/pull/1529)
* Define `_UNICODE` by default on Windows platforms. [#1538](https://github.com/Microsoft/vscode-cpptools/issues/1538)
  * Charles Milette (@sylveon) [PR #1540](https://github.com/Microsoft/vscode-cpptools/pull/1540)",54800346
748,False,True,2018-02-01T20:58:43Z,2018-02-05T21:18:44Z,"* Add colorization for inactive regions. #1466
* Fix 3 highest hitting crashes. #1137, #1337
* Update IntelliSense compiler (bug fixes and more C++17 support). #1067, #1313, #1461
* Fix Go to Symbol in File... being slow for large workspaces. #1472
* Fix duplicate cannot open source file errors. #1469
* Fix error popup appearing with non-workspace files when using compile_commands.json. #1475
* Add more macros to cpp.hint (fixing missing symbols).

http://landinghub.visualstudio.com/sign-up-for-the-vs-code-c/c-insiders-program",54800346
749,False,False,2018-01-17T21:09:00Z,2018-01-17T22:43:47Z,"Bug fixes and workspace parsing performance improvements:

https://blogs.msdn.microsoft.com/vcblog/2018/01/17/visual-studio-code-cc-extension-jan-2018-update/

Fix tag parser failing (and continuing to fail after edits) when it shouldn't. #1367
Fix tag parser taking too long due to redundant processing. #1288
Fix debugging silently failing the 1st time if a C/C++ file isn't opened. #1366
Skip automatically adding to files.associations if it matches an existing glob pattern or if C_Cpp.autoAddFileAssociations is false. #722
The debugger no longer requires an extra reload. #1362
Fix incorrect ""Warning: Expected file ... is missing"" message after installing on Linux. #1334
Fix ""Include file not found"" messages not re-appearing after settings changes. #1363
Performance improvements with browse.path parsing, and stop showing ""Parsing files"" when there's no actual parsing. #1393
Fix crash when settings with the wrong type are used. #1396
Allow semicolons in browse.path. #1415
Fix to handle relative pathing in source file paths properly when normalizing. #1228
Fix delay in language service activation caused by cpptools.json downloading. #1429
Add C_Cpp.workspaceParsingPriority setting to enable using less than 100% CPU during parsing of workspace files.
Add C_Cpp.exclusionPolicy default to checkFolders to avoid expensive files.exclude checking on every file.",54800346
750,False,True,2018-01-09T01:54:28Z,2018-01-09T22:01:49Z,,54800346
751,False,False,2017-12-12T01:03:58Z,2017-12-19T11:11:12Z,"* Fix for stackwalk `NullReferenceException`. [#1339](https://github.com/Microsoft/vscode-cpptools/issues/1339)
* Fix for `-isystem` (or `-I`) not being used in `compile_commands.json` if there's a space after it. [#1343](https://github.com/Microsoft/vscode-cpptools/issues/1343)
* Fix for header switching from `.cc` to `.hpp` files (and other cases). [#1341](https://github.com/Microsoft/vscode-cpptools/issues/1341)
* Fix reload prompts not appearing in debugging scenarios (after the initial installation). [#1344](https://github.com/Microsoft/vscode-cpptools/issues/1344)
* Add a ""wait"" message when commands are invoked during download/installation. [#1344](https://github.com/Microsoft/vscode-cpptools/issues/1344)
* Prevent blank ""C/C++ Configuration"" from appearing when debugging is started but the language service is not. [#1353](https://github.com/Microsoft/vscode-cpptools/issues/1353)",54800346
752,False,True,2017-12-12T01:03:58Z,2017-12-13T00:45:27Z,,54800346
753,False,False,2017-12-08T19:20:54Z,2017-12-12T00:37:56Z,"December 2017 Update

We added support for offline installation, 32-bit Linux, and Linux distros without glibc 2.18 (e.g. CentOS, RHEL, Scientific Linux). The list of issues fixed is:

* Enable the language service processes to run without glibc 2.18. [#19](https://github.com/Microsoft/vscode-cpptools/issues/19)
* Enable the language service processes to run on 32-bit Linux. [#424](https://github.com/Microsoft/vscode-cpptools/issues/424)
* Fix extension process not working on Windows with non-ASCII usernames. [#1319](https://github.com/Microsoft/vscode-cpptools/issues/1319)
* Fix IntelliSense on single processor VMs. [#1321](https://github.com/Microsoft/vscode-cpptools/issues/1321)
* Enable offline installation of the extension. [#298](https://github.com/Microsoft/vscode-cpptools/issues/298)
* Add support for `-isystem` in `compile_commands.json`. [#1156](https://github.com/Microsoft/vscode-cpptools/issues/1156)
* Remember the selected configuration across launches of VS Code. [#1273](https://github.com/Microsoft/vscode-cpptools/issues/1273)
* Fix 'Add Configuration...` entries not appearing if the extension wasn't previously activated. [#1287](https://github.com/Microsoft/vscode-cpptools/issues/1287)
* Add `(declaration)` to declarations in the navigation list. [#1311](https://github.com/Microsoft/vscode-cpptools/issues/1311)
* Fix function definition body not being visible after navigation. [#1311](https://github.com/Microsoft/vscode-cpptools/issues/1311)
* Improve performance for fetching call stacks with large arguments. [#363](https://github.com/Microsoft/vscode-cpptools/issues/363)",54800346
754,False,False,2017-11-09T21:29:02Z,2017-11-28T00:41:03Z,"This release addresses multiple community-reported issues
* Fix for disappearing parameter hints tooltip. #1165
* Fix for parameter hints only showing up after the opening parenthesis. #902, #819
* Fix for customer reported crashes in the TypeScript extension code. #1240, #1245
* Fix .browse.VC-#.db files being unnecessarily created when an shm file exists. #1234
* Fix High CPU load on unsupported Linux distros. #1249
* Fix language service to only activate after a C/C++ file is opened or a C/Cpp command is used (not onDebug).
* Fix database resetting if shutdown was blocked by an IntelliSense operation.
* Fix deadlock that can occur when switching configurations.
* Fix browse.databaseFilename changing not taking effect until a reload.
",54800346
755,False,False,2017-11-09T21:29:02Z,2017-11-09T21:37:58Z,Shortly after releasing 0.14.1 we noticed a spike in our extension activation telemetry.  It turned out that a few users were attempting to activate the extension on a Linux platform that we don't support yet and VS Code was repeatedly trying to activate our extension after it crashed.  We pushed a patch for the telemetry bug to reduce the amount of network traffic those users would see.,54800346
756,False,False,2017-10-31T16:40:24Z,2017-11-09T17:09:12Z,"[November 2017 Update](https://blogs.msdn.microsoft.com/vcblog/2017/11/09/visual-studio-code-cc-extension-nov-2017-update-multi-root-workspaces-support-is-here/)

### Support for multiple root folders (#1070)

VS Code is releasing support for opening multiple folders in the same window starting with the 1.18 stable build (Insiders had access to this feature sooner). In version 0.14.1 we have support for this feature working, but the following issues may be encountered:
* Opening parent/child folders may not produce correct results. For example, if folder `B` is a subfolder of `A` and both `A` and `B` have been opened in VS Code, incorrect behavior may be noticed when files under folder `B` are opened since the extension must pick one of the two folders to ""own"" the files under `B`. We currently pick the folder that was opened first, so keep that in mind if you set up your multi-root workspace this way.
* When a multi-root workspace is open (e.g. 2 or more folders have been opened), the default storage location for the code browsing database changes. VS Code has not yet provided an API to allow us to reuse the folder's previous storage location so you will notice that the extension will re-index your folders if you did not supply a `browse.databaseFilename` in your **c_cpp_properties.json** file. However, we will only index one folder at a time so as not to consume all of your CPU resources. The ""active"" folder (the owner of the currently focused file) will be given permission to index and the others will be paused until they become active.
* Multi-root workspaces have a new layer to which settings can be applied. The settings should apply to all folders opened in the workspace, but we are still investigating an issue related to this. For the time being, the extension only respects ""User"" and ""per-folder"" settings when a multi-root workspace is open.

### Other notable changes/bug fixes

We have fixed our issues with the extension holding a lock on file handles preventing users from saving their edited files. Microsoft/vscode#27329, #1040

We have added commands that allow users to pause and resume the thread that indexes all of your folder's files (for code browsing/navigation). They are available in VS Code's command palette or by clicking on the database icon in the lower right corner of the status bar. #1141

You should no longer get a second ""reload window"" prompt when installing/updating the extension unless you have a launch.json file active.",54800346
757,False,False,2017-10-18T14:51:28Z,2017-10-19T17:12:07Z,"[October 2017 Update](https://blogs.msdn.microsoft.com/vcblog/2017/10/20/visual-studio-code-cc-extension-october-2017-update/)

### Support for compile_commands.json (#156)

In this release we added support for specifying includes and defines via `compile_commands.json`.  In your **c_cpp_properties.json** file, add `""compileCommands"": ""/path/to/compile_commands.json""` to your configuration and the extension will use the include paths and defines listed in the compile commands database rather than the `""includePath""` and `""defines""` in **c_cpp_properties.json**

If you open a file in your workspace that does not have an entry in the compile commands database, the extension will notify you and use the `""includePath""` and `""defines""` in your **c_cpp_properties.json** instead.

### Indexing improvements (#1106)

* The extension now only scans directories once even if duplicate or overlapping paths are specified in the `""browse.path""` setting.
* A new icon for indexing has been created that will show the current status of indexing when the mouse cursor hovers over it. The flame icon is now only used when the ""Default"" IntelliSense engine is doing an expensive operation.
  * (Note that the denominator currently shows the number of files discovered in all paths, but only the files in your workspace and any dependent headers will actually be parsed)

    ![new icon](https://user-images.githubusercontent.com/12818240/31783008-9df0f522-b4b1-11e7-8e13-325211ead6ba.png)

### Logging to the Output window

We added logging to the Output window. This replaces the need to set environment variables and log to a file [as documented here](https://github.com/Microsoft/vscode-cpptools/blob/master/Documentation/LanguageServer/Enabling%20logging.md). To change the verbosity, edit the `""C_Cpp.loggingLevel""` setting. The default behavior is to only display errors encountered by the extension.

### Other notable additions/fixes

We fixed the highest hitting crashes in the extension that caused IntelliSense features to appear to be hung. #1076

We fixed an issue where the indexer was parsing all header files discovered on the system (heavy CPU usage)when a workspace folder was not open. #1109

",54800346
758,False,False,2017-09-18T12:25:27Z,2017-10-05T21:40:37Z,"We released a stability patch today to address some of the highest hitting crashes in the extension, some of which were introduced by version 0.13.0.

Fixes for issues #558, #981, #1040, #1060, and #1076 were also included in this patch.",54800346
759,False,False,2017-09-18T12:25:27Z,2017-09-25T22:59:11Z,"[September 2017 Update](https://blogs.msdn.microsoft.com/vcblog/2017/10/04/visual-studio-code-cc-extension-september-2017-update-more-intellisense-goodness/)

Setting up the include path for IntelliSense just got easier. When you open a folder, the extension will recursively search for potential include paths that match the header files your code is using based on the paths set by the `browse.path` setting in **c_cpp_properties.json** and give you suggestions to help you set up the include path. Click on the green squiggles under #include statements and a light bulb will appear and offer suggestions of paths that will allow IntelliSense to resolve the included file.

![lightbulbs](https://user-images.githubusercontent.com/12818240/30834884-0c8cc246-a20a-11e7-965a-9548fc90f841.png)

Reference highlighting support is now provided by the extension. Moving the text cursor over a symbol in the editor will highlight matching symbols in the same file. When the IntelliSense engine is set to ""Default"", only matching symbols will be highlighted (as shown below). When the IntelliSense engine is set to ""Tag Parser"", all exact word matches will be highlighted. This feature corresponds to VS Code's `editor.occurrencesHighlight` setting. Selecting a range of text will continue to invoke VS Code's `editor.selectionHighlight` behavior.

![highlighting](https://user-images.githubusercontent.com/12818240/30834886-11c02a96-a20a-11e7-8304-8f7bb0ffa33e.png)

When you set the IntelliSense engine to ""Default"" you will now start to see parameter hints only for the functions that match the context in which the function is invoked. Hints will also be presented for template arguments. Previously, the extension returned hints for all functions with a matching name, regardless of context.

![parameterhints](https://user-images.githubusercontent.com/12818240/30834865-f2f82dc0-a209-11e7-9a69-a5758352c955.png)

* The IntelliSense database now correctly removes symbols for files in paths that have been removed from the `browse.path` setting. #262
* Multiline comments now automatically insert ` * ` on new lines when the comment starts with `/**`. #579
* When the IntelliSense engine is set to ""Tag Parser"", Go to definition, completion, and parameter hints for partially scoped members now works as expected. #635
* `macFrameworkPath` now correctly resolves variables and `~`. #970
",54800346
760,False,False,2017-08-17T22:24:03Z,2017-08-17T23:53:41Z,"[August 2017 Update](https://blogs.msdn.microsoft.com/vcblog/2017/08/22/visual-studio-code-cc-extension-august-2017-update/)

We fixed a regression in the parsing code related to file paths that contain multi-byte Unicode characters.  The bug caused the browse database to be incomplete, which broke goto definition/declaration.  #958

We also added a command to reset the browse database. In the event that you change the `""browse.path""` setting in c_cpp_properties.json, the browse database may not remove some of the symbols that were added previously. This new command allows you to purge all symbols from the database and reparse the workspace.  #464, #601

* Additional fixes for language server issues: #943, #944 ",54800346
761,False,False,2017-08-10T16:14:20Z,2017-08-17T22:12:05Z,"* Added a gcc problemMatcher. #854
* Fix a crash with the IntelliSense process (responsible for ~25% of all crashes).
* Fixes for language server issues #325, #884, #886, #888, #906, Microsoft/vscode#27404",54800346
762,False,False,2017-07-17T23:19:42Z,2017-07-18T23:30:19Z,"[July 2017 Update](https://blogs.msdn.microsoft.com/vcblog/2017/07/18/visual-studio-code-cc-extension-july-2017-update-time-to-try-out-the-new-intellisense/)

* Fix Tag Parser features not working with some MinGW library code.
* Fix a symbol search crash.
* Fix an IntelliSense engine compiler crash.
* Fix `Go to Declaration` to return `Go to Definition` results if the declarations have no results.
* Fixes for language server issues: #870, #872, #875, 
* Deprecate `addWorkspaceRootToIncludePath` setting and instead make `${workspaceRoot}` in `browse.path` explicit.
* Add `Show Release Notes` command.
* Add `Edit Configurations...` command to the `Select a Configuration...` dropdown.
* Update Microsoft Visual C++ debugger to Visual Studio 2017 released components.
  * Fix issue with showing wrong thread. [#550](https://github.com/Microsoft/vscode-cpptools/issues/550)
  * Fix issue with binaries compiled with /FASTLINK causing debugger to hang. [#484](https://github.com/Microsoft/vscode-cpptools/issues/484)
* Fix issue in MinGW/Cygwin debugging where stop debugging causes VS Code to hang. Microsoft/MIEngine#636
",54800346
763,False,False,2017-06-12T15:29:42Z,2017-06-28T00:13:53Z,"[June 2017 Update](https://blogs.msdn.microsoft.com/vcblog/2017/06/27/visual-studio-code-cc-extension-june-2017-update/)
* The default IntelliSense engine now provides semantic-aware autocomplete suggestions for `.`, `->`, and `::` operators. [#13](https://github.com/Microsoft/vscode-cpptools/issues/13)
* The default IntelliSense engine now reports the unresolved include files in referenced headers and falls back to the Tag Parser until headers are resolved.
  * This behavior can be overridden by setting `""C_Cpp.intelliSenseEngineFallback"": ""Disabled""`
* Added `""C_Cpp.intelliSenseMode""` setting to allow switching between MSVC and Clang modes. [#710](https://github.com/Microsoft/vscode-cpptools/issues/710), [#757](https://github.com/Microsoft/vscode-cpptools/issues/757)
* A crashed IntelliSense engine no longer gives the popup message, and it automatically restarts after an edit to the translation unit occurs.
* Fix the IntelliSense engine to use ""c"" mode if a C header is opened before the C file.
* Fix a bug which could cause the IntelliSense engine to not update results if changes are made to multiple files of a translation unit.
* Auto `files.association` registers ""c"" language headers when `Go to Definition` is used in a C file.
* Downloading extension dependencies will retry up to 5 times in the event of a failure. [#694](https://github.com/Microsoft/vscode-cpptools/issues/694)
* Changes to `c_cpp_properties.json` are detected even if file watchers fail.
* Update default IntelliSense options for MSVC mode to make Boost projects work better. [#775](https://github.com/Microsoft/vscode-cpptools/issues/775)
* Fix `Go to Definition` not working until all `browse.path` files are re-scanned. [#788](https://github.com/Microsoft/vscode-cpptools/issues/788)
",54800346
764,False,False,2017-06-12T15:29:42Z,2017-06-28T00:11:23Z,* Fixed a blocking debugger issue on Linux #792 ,54800346
765,False,False,2017-06-12T15:29:42Z,2017-06-28T00:10:18Z,* fixed a bug with automatic population of `includePath` on Linux/Mac,54800346
766,False,False,2017-05-23T23:07:57Z,2017-05-24T21:38:01Z,"Enabling the new IntelliSense engine by default for everyone turned out to be disruptive for a lot of our users, so we are disabling it by default for non-Insiders while we work on a better migration experience.

We appreciate the time everyone has taken to provide feedback.",54800346
767,False,False,2017-05-23T23:07:57Z,2017-05-24T21:35:10Z,"This update improves the debugger setup experience by adding new commands to the command palette and configuration snippets for launch.json. 
[More detail about these features can be found here](https://blogs.msdn.microsoft.com/vcblog/2017/05/19/visual-studio-code-cc-extension-may-2017-update/).

Based on the telemetry received from our customers using the new IntelliSense engine on the Insider build as well as those who opted in, we decided to enable it by default for all VS Code users.

We committed fixes for the following language server issues: #120, #546, #604, #606, #648, #656, #662, #666, #673, #685, #691, #699
",54800346
768,False,False,2017-04-11T00:45:11Z,2017-04-25T17:20:11Z,"In this release we are making available a preview of the first few features supported by the new IntelliSense engine. You can check out the feature by changing the `C_Cpp.intelliSenseEngine` setting to `Default` in your settings.json file.  [We describe the features currently implemented in more detail here](https://blogs.msdn.microsoft.com/vcblog/2017/04/25/visual-studio-code-cc-extension-april-2017-update).

We know the results of the IntelliSense engine aren't perfect (that's why this feature is in preview), so we would appreciate your feedback on the experience so we can prioritize the issues and make it better for everyone.

**An important thing to note** is that we have changed the meaning of the `includePath` setting in your c_cpp_properties.json file.  The `includePath` setting now controls the (non-recursive) paths that are used by IntelliSense when parsing your files.  The old (recursive) paths you used to set for `includePath` are being moved to the `browse.path` setting.  When you open a folder in VS Code, we will copy your existing `includePath` setting to the `browse.path` setting if the `browse.path` setting is non-existent.  If you don't have a c_cpp_properties.json file for your folder, we will pick a default set of folders as described in the blog post linked above.

We also committed fixes for the following language server issues: [#23118](https://github.com/Microsoft/vscode/issues/23118), #485 #584, #586, #591, #593, #608, #611, #625, #630, #641, #650, #653, #654
",54800346
769,False,False,2017-03-21T19:07:39Z,2017-03-23T00:01:01Z,"In this update we reverted a change we made in v0.10.4 which globally set language specific overrides for the `editor.quickSuggestions` setting (Issue #572).  The change in v0.10.4 resulted in an unexpected regression for developers using our extension in conjunction with another extension that provides auto-complete suggestions.  Instead, in v0.10.5 we will add this setting to a developer’s settings.json file if the `C_Cpp.autocomplete` setting is set to `Default` and remove it (if applicable) when a developer changes this setting to `Disabled`.

**It is important to note**, however, that a bug in the current stable version of VS Code (1.10.2) does not automatically refresh the settings.json file at the time the `C_Cpp.autocomplete` setting changes values.  To avoid getting a merge conflict in your settings.json file in VS Code, we recommend you close and reopen the settings.json file after making any changes to the `C_Cpp.autocomplete` setting.  The insider build of VS Code does not exhibit this bug, so we expect it to be fixed in the stable build shortly.

We also fixed a memory corruption bug reported in issue #430
We fixed some issues around missing symbols on Linux/Mac stdlib.h functions. #578
We made additional fixes for switch header/source not respecting `files.exclude`. #485
",54800346
770,False,False,2020-02-12T20:19:32Z,2020-02-13T13:30:15Z,"# v3.7.0

## Major Updates

- Added the ability to customize the memory manager(Thanks jacobkahn and flashlight) [#2461]
- Added 16-bit floating point support for several functions [#2413] [#2587] [#2585] [#2587] [#2583]
- Added sumByKey, productByKey, minByKey, maxByKey, allTrueByKey, anyTrueByKey, countByKey [#2254]
- Added confidence connected components [#2748]
- Added neural network based convolution and gradient functions [#2359]
- Added a padding function [#2682]
- Added pinverse for pseudo inverse [#2279]
- Added support for uniform ranges in approx1 and approx2 functions. [#2297]
- Added support to write to preallocated arrays for some functions [#2599] [#2481] [#2328] [#2327]
- Added meanvar function [#2258]
- Add support for sparse-sparse arithmetic support [#2312]
- Added rsqrt function for reciprocal square root [#2500]
- Added a lower level af_gemm function for general matrix multiplication [#2481]
- Added a function to set the cuBLAS math mode for the CUDA backend [#2584]
- Separate debug symbols into separate files [#2535]
- Print stacktraces on errors [#2632]
- Support move constructor for af::array [#2595]
- Expose events in the public API [#2461]
- Add setAxesLabelFormat to format labels on graphs [#2495]
- Added deconvolution functions [#1881]

## Improvements

- Better error messages for systems with driver or device incompatibilities [#2678] [#2448][#2761]
- Optimized unified backend function calls [#2695]
- Optimized anisotropic smoothing [#2713]
- Optimized canny filter for CUDA and OpenCL [#2727]
- Better MKL search script [#2738][#2743][#2745]
- Better logging of different submodules in ArrayFire [#2670] [#2669]
- Improve documentation [#2665] [#2620] [#2615] [#2639] [#2628] [#2633] [#2622] [#2617] [#2558] [#2326][#2515]
- Optimized af::array assignment [#2575]
- Update the k-means example to display the result [#2521]

## Fixes

- Fix multi-config generators [#2736]
- Fix access errors in canny [#2727]
- Fix segfault in the unified backend if no backends are available [#2720]
- Fix access errors in scan-by-key [#2693]
- Fix sobel operator [#2600]
- Fix an issue with the random number generator and s16 [#2587]
- Fix issue with boolean product reduction [#2544]
- Fix array_proxy move constructor [#2537]
- Fix convolve3 launch configuration [#2519]
- Fix an issue where the fft function modified the input array [#2520]
- Added a work around for nvidia-opencl runtime if forge dependencies are missing [#2761]

## Contributions

Special thanks to our contributors: 
@jacobkahn 
@WilliamTambellini 
@lehins 
@r-barnes 
@gaika 
@ShalokShalom
",25889802
771,False,False,2019-05-03T21:01:05Z,2019-05-20T21:15:31Z,"# v3.6.4

The source code with sub-modules can be downloaded directly from the following link:

http://arrayfire.com/arrayfire_source/arrayfire-full-3.6.4.tar.bz2

## Fixes
- Address a JIT performance regression due to moving kernel arguments to shared memory #2501
- Fix the default parameter for setAxisTitle #2491 ",25889802
772,False,False,2019-04-17T20:42:47Z,2019-04-22T06:21:18Z,"v3.6.3
======
The source code with sub-modules can be downloaded directly from the following link:

http://arrayfire.com/arrayfire_source/arrayfire-full-3.6.3.tar.bz2

Improvements
------------
- Graphics are now a runtime dependency instead of a link time dependency #2365
- Reduce the CUDA backend binary size using runtime compilation of kernels #2437
- Improved batched matrix multiplication on the CPU backend by using Intel MKL's `cblas_Xgemm_batched`#2206
- Print JIT kernels to disk or stream using the `AF_JIT_KERNEL_TRACE` environment variable #2404
- `void*` pointers are now allowed as arguments to `af::array::write()` #2367
- Slightly improve the efficiency of JITed tile operations #2472
- Make the random number generation on the CPU backend to be consistent with CUDA and OpenCL #2435
- Handled very large JIT tree generations #2484 #2487

Bug Fixes
---------
- Fixed `af::array::array_proxy` move assignment operator #2479
- Fixed input array dimensions validation in svdInplace() #2331
- Fixed the typedef declaration for window resource handle #2357.
- Increase compatibility with GCC 8 #2379
- Fixed `af::write` tests #2380
- Fixed a bug in broadcast step of 1D exclusive scan #2366
- Fixed OpenGL related build errors on OSX #2382
- Fixed multiple array evaluation. Performance improvement. #2384
- Fixed buffer overflow and expected output of kNN SSD small test #2445
- Fixed MKL linking order to enable threaded BLAS #2444
- Added validations for forge module plugin availability before calling resource cleanup #2443
- Improve compatibility on MSVC toolchain(_MSC_VER > 1914) with the CUDA backend #2443
- Fixed BLAS gemm func generators for newest MSVC 19 on VS 2017 #2464
- Fix errors on exits when using the cuda backend with unified #2470

Documentation
-------------
- Updated svdInplace() documentation following a bugfix #2331
- Fixed a typo in matrix multiplication documentation #2358
- Fixed a code snippet demonstrating C-API use #2406
- Updated hamming matcher implementation limitation #2434
- Added illustration for the rotate function #2453

Misc
----
- Use cudaMemcpyAsync instead of cudaMemcpy throughout the codebase #2362
- Display a more informative error message if CUDA driver is incompatible #2421 #2448
- Changed forge resource management to use smart pointers #2452
- Deprecated intl and uintl typedefs in API #2360
- Enabled graphics by default for all builds starting with v3.6.3 #2365
- Fixed several warnings #2344 #2356 #2361
- Refactored initArray() calls to use createEmptyArray(). initArray() is for internal use only by Array class. #2361
- Refactored `void*` memory allocations to use unsigned char type #2459
- Replaced deprecated MKL API with in-house implementations for sparse to sparse/dense conversions #2312
- Reorganized and fixed some internal backend API #2356
- Updated compilation order of CUDA files to speed up compile time #2368
- Removed conditional graphics support builds after enabling runtime loading of graphics dependencies #2365
- Marked graphics dependencies as optional in CPack RPM config #2365
- Refactored a sparse arithmetic backend API #2379
- Fixed const correctness of `af_device_array` API #2396
- Update Forge to v1.0.4 #2466
- Manage Forge resources from the DeviceManager class #2381
- Fixed non-mkl & non-batch blas upstream call arguments #2401
- Link MKL with OpenMP instead of TBB by default
- use clang-format to format source code

Contributions
-------------
Special thanks to our contributors:
[Alessandro Bessi](https://github.com/alessandrobessi)
[zhihaoy](https://github.com/zhihaoy)
[Jacob Khan](https://github.com/jacobkahn)
[William Tambellini](https://github.com/WilliamTambellini)
",25889802
773,False,False,2018-11-19T11:52:56Z,2018-11-29T22:35:56Z,"v3.6.2
======
The source code with sub-modules can be downloaded directly from the following link:

http://arrayfire.com/arrayfire_source/arrayfire-full-3.6.2.tar.bz2

Features
--------
* Batching support for `cond` argument in select() [#2243]
* Broadcast batching for matmul [#2315]
* Add support for multiple nearest neighbours from nearestNeighbour() [#2280]

Improvements
------------
* Performance improvements in morph() [#2238]
* Fix linking errors when compiling without Freeimage/Graphics [#2248]
* Fixes to improve the usage of ArrayFire as a sub-project [#2290] 
* Allow custom library path for loading dynamic backend libraries [#2302]

Bug fixes
-----------
* Fix overflow in `dim4::ndims`. [#2289]
* Remove setDevice from `af::array` destructor [#2319]
* Fix pow precision for integral types [#2305]
* Fix issues with tile with a large repeat dimension [#2307]
* Fix grid based indexing calculation in `af_draw_hist` [#2230]
* Fix bug when using an `af::array` for indexing [#2311]
* Fix CLBlast errors on exit on Windows [#2222]

Documentation
-------------
* Improve `unwrap` documentation [#2301]
* Improve `wrap` documentation [#2320]
* Fix and improve `accum` documentation [#2298]
* Improve `tile` documentation [#2293]
* Clarify `approx*` indexing in documentation [#2287]
* Update examples of select in detailed documentation [#2277]
* Update `lookup` examples [#2288]
* Update set documentation [#2299] 

Misc
-------------
* New ArrayFire ASSERT utility functions [#2249][#2256][#2257][#2263]
* Improve error messages in JIT [#2309]
* `af*` library and dependencies directory changed to ```lib64``` [#2186]

Contributions
-------------
Thank you to our contributors:
[Jacob Kahn](https://github.com/jacobkahn)
[Vardan Akopian](https://github.com/vakopian)
",25889802
774,False,False,2018-07-05T13:56:08Z,2018-07-06T04:23:04Z,"v 3.6.1
=====

The source code for this release can be downloaded here:
http://arrayfire.com/arrayfire_source/arrayfire-full-3.6.1.tar.bz2

Improvements
-------------------
* FreeImage is now a run-time dependency [#2164]
* Reduced binary size by setting the symbol visibility to hidden [#2168]
* Add logging to memory manager and unified loader using the `AF_TRACE` environment variable [#2169][#2216]
* Improved CPU Anisotropic Diffusion performance [#2174]
* Perform normalization after FFT for improved accuracy [#2185, #2192]
* Updated CLBlast to v1.4.0 [#2178]
* Added additional validation when using `af::seq` for indexing [#2153]
* Perform checks for unsupported cards by the CUDA implementation [#2182]
* Avoid selecting backend if no devices are found. [#2218]

Bug Fixes
-------------
* Fixed region when all pixels were the foreground or background [#2152]
* Fixed several memory leaks [#2202, #2201, #2180, #2179, #2177, #2175]
* Fixed bug in setDevice which didn't allow you to select the last device [#2189]
* Fixed bug in min/max where the first element of the array was a NaN value [#2155]
* Fixed graphics window indexing [#2207]
* Fixed renaming issue when installing cuda libraries on OSX [#2221]
* Fixed NSIS installer PATH variable [#2223]
",25889802
775,False,False,2018-05-02T11:54:22Z,2018-05-04T07:11:54Z,"v3.6.0
======

The source code with submodules can be downloaded directly from the following link:
http://arrayfire.com/arrayfire_source/arrayfire-full-3.6.0.tar.bz2

Major Updates
-------------

- Added the [`topk()`](http://arrayfire.org/docs/group__stat__func__topk.htm) function. <sup>[1](https://github.com/arrayfire/arrayfire/pull/2061)</sup>
- Added batched matrix multiply support.<sup>[2](https://github.com/arrayfire/arrayfire/pull/1898)</sup> <sup>[3](https://github.com/arrayfire/arrayfire/pull/2059)</sup>
- Added anisotropic diffusion, `anisotropicDiffusion()`.[Documentation](http://arrayfire.org/docs/group__image__func__anisotropic__diffusion.htm) <sup>[3](https://github.com/arrayfire/arrayfire/pull/1850)</sup>.

Features
--------

- Added support for batched matrix multiply. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1898)</sup> <sup>[2](https://github.com/arrayfire/arrayfire/pull/2059)</sup>
- New anisotropic diffusion function, `anisotropicDiffusion()`. [Documentation](http://arrayfire.org/docs/group__image__func__anisotropic__diffusion.htm) <sup>[3](https://github.com/arrayfire/arrayfire/pull/1850)</sup>.
- New `topk()` function, which returns the top k elements along a given dimension of the input. [Documentation](http://arrayfire.org/docs/group__stat__func__topk.htm). <sup>[4](https://github.com/arrayfire/arrayfire/pull/2061)</sup>
- New gradient diffusion [example](https://github.com/arrayfire/arrayfire/blob/master/examples/image_processing/gradient_diffusion.cpp).

Improvements
------------

- JITed `select()` and `shift()` functions for CUDA and OpenCL backends. <sup>[1](https://github.com/arrayfire/arrayfire/pull/2047)</sup>
- Significant CMake improvements. <sup>[2](https://github.com/arrayfire/arrayfire/pull/1861)</sup> <sup>[3](https://github.com/arrayfire/arrayfire/pull/2070)</sup> <sup>[4](https://github.com/arrayfire/arrayfire/pull/2018)</sup>
- Improved the quality of the random number generator <sup>[5](https://github.com/arrayfire/arrayfire/pull/2122)
- Corrected assert function calls in select() tests. <sup>[5](https://github.com/arrayfire/arrayfire/pull/2058)</sup>
- Modified `af_colormap` struct to match forge's definition. <sup>[6](https://github.com/arrayfire/arrayfire/pull/2082)</sup>
- Improved Black Scholes example. <sup>[7](https://github.com/arrayfire/arrayfire/pull/2079)</sup>
- Used CPack to generate installers. <sup>[8](https://github.com/arrayfire/arrayfire/pull/1861)</sup>. We will be using CPack to generate installers beginning with this release.
- Refactored [black_scholes_options](https://github.com/arrayfire/arrayfire/blob/master/examples/financial/black_scholes_options.cpp) example to use built-in `af::erfc` function for cumulative normal distribution.<sup>[9](https://github.com/arrayfire/arrayfire/pull/2079).
- Reduced the scope of mutexes in memory manager <sup>[10](https://github.com/arrayfire/arrayfire/pull/2125)
- Official installers do not require the CUDA toolkit to be installed starting with v3.6.0.

Bug fixes
-----------

- Fixed `shfl_down()` warnings with CUDA 9. <sup>[1](https://github.com/arrayfire/arrayfire/pull/2040)</sup>
- Disabled CUDA JIT debug flags on ARM architecture.<sup>[2](https://github.com/arrayfire/arrayfire/pull/2037)
- Fixed CLBLast install lib dir for linux platform where `lib` directory has arch(64) suffix.<sup>[3](https://github.com/arrayfire/arrayfire/pull/2094)
- Fixed assert condition in 3d morph opencl kernel.<sup>[4](https://github.com/arrayfire/arrayfire/pull/2033)
- Fixed JIT errors with large non-linear kernels<sup>[5](https://github.com/arrayfire/arrayfire/pull/2127)</sup>
- Fixed bug in CPU JIT after moddims was called <sup>[5](https://github.com/arrayfire/arrayfire/pull/2127)</sup>
- Fixed a deadlock scenario caused by the method `MemoryManager::nativeFree`<sup>[6](https://github.com/arrayfire/arrayfire/pull/2124)</sup>

Documentation
-------------

- Fixed variable name typo in `vectorization.md`. <sup>[1](https://github.com/arrayfire/arrayfire/pull/2032)</sup>
- Fixed `AF_API_VERSION` value in Doxygen config file. <sup>[2](https://github.com/arrayfire/arrayfire/pull/2053)</sup>

Known issues
------------

- NVCC does not currently support platform toolset v141 (Visual Studio 2017 R15.6). Use the v140 platform toolset, instead. You may pass in the toolset version to CMake via the `-T` flag like so `cmake -G ""Visual Studio 15 2017 Win64"" -T v140`.
  - To download and install other platform toolsets, visit https://blogs.msdn.microsoft.com/vcblog/2017/11/15/side-by-side-minor-version-msvc-toolsets-in-visual-studio-2017
- Several OpenCL tests failing on OSX:
  - `canny_opencl, fft_opencl, gen_assign_opencl, homography_opencl,
    reduce_opencl, scan_by_key_opencl, solve_dense_opencl,
    sparse_arith_opencl, sparse_convert_opencl, where_opencl`

Contributions
-------------

Special thanks to our contributors:
[Adrien F. Vincent](https://github.com/afvincent), [Cedric Nugteren](https://github.com/CNugteren), [Felix](https://github.com/fzimmermann89), [Filip Matzner](https://github.com/FloopCZ), [HoneyPatouceul](https://github.com/HoneyPatouceul), [Patrick Lavin](https://github.com/plavin), [Ralf Stubner](https://github.com/rstub), [William Tambellini](https://github.com/WilliamTambellini)

",25889802
776,False,False,2017-09-18T06:46:40Z,2017-09-19T05:04:36Z,"v3.5.1
==============
The source code with submodules can be downloaded directly from the following
link: http://arrayfire.com/arrayfire_source/arrayfire-full-3.5.1.tar.bz2

Installer CUDA Version: 8.0 (Required)
Installer OpenCL Version: 1.2 (Minimum)

Improvements
------------
- Relaxed `af::unwrap()` function's arguments. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1853)</sup>
- Changed behavior of af::array::allocated() to specify memory allocated. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1877)</sup>
- Removed restriction on the number of bins for `af::histogram()` on CUDA and
  OpenCL kernels. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1895)</sup>


Performance
-----------
- Improved JIT performance. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1864)</sup>
- Improved CPU element-wise operation performance. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1890)</sup>
- Improved regions performance using texture objects. <sup> [1](https://github.com/arrayfire/arrayfire/pull/1903)</sup>


Bug fixes
---------
- Fixed overflow issues in mean. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1849)</sup>
- Fixed memory leak when chaining indexing operations. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1879)</sup>
- Fixed bug in array assignment when using an empty array to index. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1897)</sup>
- Fixed bug with `af::matmul()` which occured when its RHS argument was an
  indexed vector. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1883)</sup>
- Fixed bug deadlock bug when sparse array was used with a JIT Array. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1889)</sup>
- Fixed pixel tests for FAST kernels. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1891)</sup>
- Fixed `af::replace` so that it is now copy-on-write. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1892)</sup>
- Fixed launch configuration issues in CUDA JIT. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1893)</sup>
- Fixed segfaults and ""Pure Virtual Call"" error warnings when exiting on
  Windows. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1899) [2](https://github.com/arrayfire/arrayfire/pull/1924)</sup>
- Workaround for `clEnqueueReadBuffer` bug on OSX.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1888)</sup>

Build
-----
- Fixed issues when compiling with GCC 7.1. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1872)</sup> <sup>[2](https://github.com/arrayfire/arrayfire/pull/1876)</sup>
- Eliminated unnecessary Boost dependency from CPU and CUDA backends. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1857)</sup>

Misc
----
- Updated support links to point to Slack instead of Gitter. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1905)</sup>
",25889802
777,False,False,2017-06-23T17:02:37Z,2017-06-23T17:09:43Z,"v3.5.0
==============

The source code with submodules can be downloaded directly from the following link:
http://arrayfire.com/arrayfire_source/arrayfire-full-3.5.0.tar.bz2

**Installer CUDA Version: 8.0 (Required)**
**Installer OpenCL Version: 1.2 (Minimum)**

Major Updates
-------------

* ArrayFire now supports threaded applications. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1706)</sup>
* Added Canny edge detector. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1743)</sup>
* Added Sparse-Dense arithmetic operations. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1696)</sup>

Features
--------

* __ArrayFire Threading__
  * af::array can be read by multiple threads
  * All ArrayFire functions can be executed concurrently by multiple threads
  * Threads can operate on different devices to simplify Muli-device workloads
* __New Canny edge detector function, af::canny().__ <sup>[1](https://github.com/arrayfire/arrayfire/pull/1743)</sup>
  * Can automatically calculate high threshold with `AF_CANNY_THRESHOLD_AUTO_OTSU`
  * Supports both L1 and L2 Norms to calculate gradients
* New tuned OpenCL BLAS backend, [CLBlast](https://github.com/arrayfire/arrayfire/pull/1727).

Improvements
------------

* Converted CUDA JIT to use [NVRTC](http://docs.nvidia.com/cuda/nvrtc/index.html) instead of [NVVM](http://docs.nvidia.com/cuda/nvvm-ir-spec/index.html).
* Performance improvements in af::reorder(). <sup>[1](https://github.com/arrayfire/arrayfire/pull/1766)</sup>
* Performance improvements in array::scalar<T>(). <sup>[1](https://github.com/arrayfire/arrayfire/pull/1809)</sup>
* Improved unified backend performance. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1770)</sup>
* ArrayFire now depends on Forge v1.0. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1800)</sup>
* Can now specify the FFT plan cache size using the af::setFFTPlanCacheSize() function.
* Get the number of physical bytes allocated by the memory manager `af_get_allocated_bytes()`. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1630)</sup>
* af::dot() can now return a scalar value to the host. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1628)</sup>

Bug Fixes
---------

* Fixed improper release of default Mersenne random engine. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1716)</sup>
* Fixed af::randu() and af::randn() ranges for floating point types. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1784)</sup>
* Fixed assignment bug in CPU backend. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1765)</sup>
* Fixed complex (`c32`,`c64`) multiplication in OpenCL convolution kernels. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1816)</sup>
* Fixed inconsistent behavior with af::replace() and replace_scalar(). <sup>[1](https://github.com/arrayfire/arrayfire/pull/1773)</sup>
* Fixed memory leak in af_fir(). <sup>[1](https://github.com/arrayfire/arrayfire/pull/1765)</sup>
* Fixed memory leaks in af_cast for sparse arrays. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1826)</sup>
* Fixing correctness of af_pow for complex numbers by using Cartesian form. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1765)</sup>
* Corrected af::select() with indexing in CUDA and OpenCL backends. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1731)</sup>
* Workaround for VS2015 compiler ternary bug. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1771)</sup>
* Fixed memory corruption in `cuda::findPlan()`. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1793)</sup>
* Argument checks in af_create_sparse_array avoids inputs of type int64. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1747)</sup>

Build fixes
-----------

* On OSX, utilize new GLFW package from the brew package manager. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1720)</sup> <sup>[2](https://github.com/arrayfire/arrayfire/pull/1775)</sup>
* Fixed CUDA PTX names generated by CMake v3.7. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1689)</sup>
* Support `gcc` > 5.x for CUDA. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1708)</sup>

Examples
--------

* New genetic algorithm example. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1695)</sup>

Documentation
-------------

* Updated `README.md` to improve readability and formatting. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1726)</sup>
* Updated `README.md` to mention Julia and Nim wrappers. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1714)</sup>
* Improved installation instructions - `docs/pages/install.md`. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1740)</sup>

Miscellaneous
-------------

* A few improvements for ROCm support. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1710)</sup>
* Removed CUDA 6.5 support. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1687)</sup>

Known issues
------------

* Windows
  * The Windows NVIDIA driver version `37x.xx` contains a bug which causes `fftconvolve_opencl` to fail. Upgrade or downgrade to a different version of the driver to avoid this failure.
  * The following tests fail on Windows with NVIDIA hardware: `threading_cuda`,`qr_dense_opencl`, `solve_dense_opencl`.
* macOS
  * The Accelerate framework, used by the CPU backend on macOS, leverages Intel graphics cards (Iris) when there are no discrete GPUs available. This OpenCL implementation is known to give incorrect results on the following tests: `lu_dense_{cpu,opencl}`, `solve_dense_{cpu,opencl}`, `inverse_dense_{cpu,opencl}`.
  * Certain tests intermittently fail on macOS with NVIDIA GPUs apparently due to inconsistent driver behavior: `fft_large_cuda` and `svd_dense_cuda`.
  * The following tests are currently failing on macOS with AMD GPUs: `cholesky_dense_opencl` and `scan_by_key_opencl`.
",25889802
778,False,False,2016-12-21T01:40:39Z,2016-12-21T14:25:32Z,"# v3.4.2

The source code with submodules can be downloaded directly from the following link:
http://arrayfire.com/arrayfire_source/arrayfire-full-3.4.2.tar.bz2

**Installer CUDA Version: 8.0 (Required)**
**Installer OpenCL Version: 1.2 (Minimum)**

## Deprecation Announcement

This release supports CUDA 6.5 and higher. The next ArrayFire release will
support CUDA 7.0 and higher, dropping support for CUDA 6.5. Reasons for no
longer supporting CUDA 6.5 include:
- CUDA 7.0 NVCC supports the C++11 standard (whereas CUDA 6.5 does not), which
  is used by ArrayFire's CPU and OpenCL backends.
- Very few ArrayFire users still use CUDA 6.5.

As a result, the older Jetson TK1 / Tegra K1 will no longer be supported in
the next ArrayFire release. The newer Jetson TX1 / Tegra X1 will continue to
have full capability with ArrayFire.

## Docker
- [ArrayFire has been Dockerized](https://github.com/arrayfire/arrayfire-docker).

## Improvements
- Implemented sparse storage format conversions between AF_STORAGE_CSR
  and AF_STORAGE_COO.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1642)</sup>
  - Directly convert between AF_STORAGE_COO <--> AF_STORAGE_CSR
    using the af::sparseConvertTo() function.
  - af::sparseConvertTo() now also supports converting to dense.
- Added cast support for [sparse arrays](http://arrayfire.org/docs/group__sparse__func.htm).
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1653)</sup>
  - Casting only changes the values array and the type. The row and column
    index arrays are not changed.
- Reintroduced automated computation of chart axes limits for graphics functions.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1639)</sup>
  - The axes limits will always be the minimum/maximum of the current and new
    limit.
  - The user can still set limits from API calls. If the user sets a limit
    from the API call, then the automatic limit setting will be disabled.
- Using `boost::scoped_array` instead of `boost::scoped_ptr` when managing
  array resources.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1637)</sup>
- Internal performance improvements to getInfo() by using `const` references
  to avoid unnecessary copying of `ArrayInfo` objects.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1665)</sup>
- Added support for scalar af::array inputs for af::convolve() and
  [set functions](http://arrayfire.org/docs/group__set__mat.htm).
  <sup>[1](https://github.com/arrayfire/arrayfire/issues/1660)</sup>
  <sup>[2](https://github.com/arrayfire/arrayfire/issues/1675)</sup>
  <sup>[3](https://github.com/arrayfire/arrayfire/pull/1668)</sup>
- Performance fixes in af::fftConvolve() kernels.
  <sup>[1](https://github.com/arrayfire/arrayfire/issues/1679)</sup>
  <sup>[2](https://github.com/arrayfire/arrayfire/pull/1680)</sup>

## Build
- Support for Visual Studio 2015 compilation.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1632)</sup>
  <sup>[2](https://github.com/arrayfire/arrayfire/pull/1640)</sup>
- Fixed `FindCBLAS.cmake` when PkgConfig is used.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1657)</sup>

## Bug fixes
- Fixes to JIT when tree is large.
  <sup>[1](https://github.com/arrayfire/arrayfire/issues/1646)</sup>
  <sup>[2](https://github.com/arrayfire/arrayfire/pull/1638)</sup>
- Fixed indexing bug when converting dense to sparse af::array as 
  AF_STORAGE_COO.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1642)</sup>
- Fixed af::bilateral() OpenCL kernel compilation on OS X.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1638)</sup>
- Fixed memory leak in af::regions() (CPU) and af::rgb2ycbcr().
  <sup>[1](https://github.com/arrayfire/arrayfire/issues/1664)</sup>
  <sup>[2](https://github.com/arrayfire/arrayfire/issues/1664)</sup>
  <sup>[3](https://github.com/arrayfire/arrayfire/pull/1666)</sup>

## Installers
- Major OS X installer fixes.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1629)</sup>
  - Fixed installation scripts.
  - Fixed installation symlinks for libraries.
- Windows installer now ships with more pre-built examples.

## Examples
- Added af::choleskyInPlace() calls to `cholesky.cpp` example.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1671)</sup>

## Documentation
- Added `u8` as supported data type in `getting_started.md`.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1661)</sup>
- Fixed typos.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1652)</sup>

## CUDA 8 on OSX
- [CUDA 8.0.55](https://developer.nvidia.com/cuda-toolkit) supports Xcode 8.
  <sup>[1](https://github.com/arrayfire/arrayfire/issues/1664)</sup>

## Known Issues
- Known failures with CUDA 6.5. These include all functions that use
  sorting. As a result, sparse storage format conversion between
  AF_STORAGE_COO and AF_STORAGE_CSR has been disabled for CUDA 6.5.
",25889802
779,False,False,2016-10-14T17:15:24Z,2016-10-15T19:31:44Z,"# v3.4.1

The source code with submodules can be downloaded directly from the following link:
http://arrayfire.com/arrayfire_source/arrayfire-full-3.4.1.tar.bz2

**Installer CUDA Version: 8.0 (Required)**
**Installer OpenCL Version: 1.2 (Minimum)**

## Installers
- Installers for Linux, OS X and Windows
  - CUDA backend now uses [CUDA 8.0](https://developer.nvidia.com/cuda-toolkit).
  - Uses [Intel MKL 2017](https://software.intel.com/en-us/intel-mkl).
  - CUDA Compute 2.x (Fermi) is no longer compiled into the library.
- Installer for OS X
  - The libraries shipping in the OS X Installer are now compiled with Apple
    Clang v7.3.1 (previouly v6.1.0).
  - The OS X version used is 10.11.6 (previously 10.10.5).
- Installer for Jetson TX1 / Tegra X1
  - Requires [JetPack for L4T 2.3](https://developer.nvidia.com/embedded/jetpack)
    (containing Linux for Tegra r24.2 for TX1).
  - CUDA backend now uses [CUDA 8.0](https://developer.nvidia.com/cuda-toolkit) 64-bit.
  - Using CUDA's cusolver instead of CPU fallback.
  - Uses OpenBLAS for CPU BLAS.
  - All ArrayFire libraries are now 64-bit.

## Improvements
- Add sparse array support to af::eval().
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1598)</sup>
- Add OpenCL-CPU fallback support for sparse af::matmul() when running on
  a unified memory device. Uses MKL Sparse BLAS.
- When using CUDA libdevice, pick the correct compute version based on device.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1612)</sup>
- OpenCL FFT now also supports prime factors 7, 11 and 13.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1383)</sup>
  <sup>[2](https://github.com/arrayfire/arrayfire/pull/1619)</sup>

## Bug Fixes
- Allow CUDA libdevice to be detected from custom directory.
- Fix `aarch64` detection on Jetson TX1 64-bit OS.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1593)</sup>
- Add missing definition of `af_set_fft_plan_cache_size` in unified backend.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1591)</sup>
- Fix intial values for af::min() and af::max() operations.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1594)</sup>
  <sup>[2](https://github.com/arrayfire/arrayfire/pull/1595)</sup>
- Fix distance calculation in af::nearestNeighbour for CUDA and OpenCL backend.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1596)</sup>
  <sup>[2](https://github.com/arrayfire/arrayfire/pull/1595)</sup>
- Fix OpenCL bug where scalars where are passed incorrectly to compile options.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1595)</sup>
- Fix bug in af::Window::surface() with respect to dimensions and ranges.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1604)</sup>
- Fix possible double free corruption in af_assign_seq().
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1605)</sup>
- Add missing eval for key in af::scanByKey in CPU backend.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1605)</sup>
- Fixed creation of sparse values array using AF_STORAGE_COO.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1620)</sup>
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1621)</sup>

## Examples
- Add a Conjugate Gradient solver example
  to demonstrate sparse and dense matrix operations.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1599)</sup>

## CUDA Backend
- When using [CUDA 8.0](https://developer.nvidia.com/cuda-toolkit),
  compute 2.x are no longer in default compute list.
  - This follows [CUDA 8.0](https://developer.nvidia.com/cuda-toolkit)
    deprecating computes 2.x.
  - Default computes for CUDA 8.0 will be 30, 50, 60.
- When using CUDA pre-8.0, the default selection remains 20, 30, 50.
- CUDA backend now uses `-arch=sm_30` for PTX compilation as default.
  - Unless compute 2.0 is enabled.

## Known Issues
- af::lu() on CPU is known to give incorrect results when built run on
  OS X 10.11 or 10.12 and compiled with Accelerate Framework.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1617)</sup>
  - Since the OS X Installer libraries uses MKL rather than Accelerate
    Framework, this issue does not affect those libraries.
",25889802
780,False,False,2016-09-13T04:16:37Z,2016-09-13T04:17:48Z,"# v3.4.0

The source code with submodules can be downloaded directly from the following link:
http://arrayfire.com/arrayfire_source/arrayfire-full-3.4.0.tar.bz2

Installer CUDA Version: 7.5 (Required)
Installer OpenCL Version: 1.2 (Minimum)

## Major Updates
- [Sparse Matrix and BLAS](ref sparse_func). <sup>[1](https://github.com/arrayfire/arrayfire/issues/821)
  [2](https://github.com/arrayfire/arrayfire/pull/1319)</sup>
- Faster JIT for CUDA and OpenCL. <sup>[1](https://github.com/arrayfire/arrayfire/issues/1472)
  [2](https://github.com/arrayfire/arrayfire/pull/1462)</sup>
- Support for [random number generator engines](ref af::randomEngine).
  <sup>[1](https://github.com/arrayfire/arrayfire/issues/868)
  [2](https://github.com/arrayfire/arrayfire/pull/1551)</sup>
- Improvements to graphics. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1555)
  [2](https://github.com/arrayfire/arrayfire/pull/1566)</sup>

## Features
- **[Sparse Matrix and BLAS](ref sparse_func)** <sup>[1](https://github.com/arrayfire/arrayfire/issues/821)
  [2](https://github.com/arrayfire/arrayfire/pull/1319)</sup>
  - Support for [CSR](ref AF_STORAGE_CSR) and [COO](ref AF_STORAGE_COO)
    [storage types](ref af_storage).
  - Sparse-Dense Matrix Multiplication and Matrix-Vector Multiplication as a
    part of af::matmul() using AF_STORAGE_CSR format for sparse.
  - Conversion to and from [dense](ref AF_STORAGE_DENSE) matrix to [CSR](ref AF_STORAGE_CSR)
    and [COO](ref AF_STORAGE_COO) [storage types](ref af_storage).
- **Faster JIT** <sup>[1](https://github.com/arrayfire/arrayfire/issues/1472)
  [2](https://github.com/arrayfire/arrayfire/pull/1462)</sup>
  - Performance improvements for CUDA and OpenCL JIT functions.
  - Support for evaluating multiple outputs in a single kernel. See af::array::eval() for more.
- **[Random Number Generation](ref af::randomEngine)**
  <sup>[1](https://github.com/arrayfire/arrayfire/issues/868)
  [2](https://github.com/arrayfire/arrayfire/pull/1551)</sup>
  - af::randomEngine(): A random engine class to handle setting the [type](af_random_type) and seed
    for random number generator engines.
  - Supported engine types are:
    - [Philox](http://www.thesalmons.org/john/random123/)
    - [Threefry](http://www.thesalmons.org/john/random123/)
    - [Mersenne Twister](http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MTGP/)
- **Graphics** <sup>[1](https://github.com/arrayfire/arrayfire/pull/1555)
  [2](https://github.com/arrayfire/arrayfire/pull/1566)</sup>
  - Using [Forge v0.9.0](https://github.com/arrayfire/forge/releases/tag/v0.9.0)
  - [Vector Field](ref af::Window::vectorField) plotting functionality.
    <sup>[1](https://github.com/arrayfire/arrayfire/pull/1566)</sup>
  - Removed [GLEW](http://glew.sourceforge.net/) and replaced with [glbinding](https://github.com/cginternals/glbinding).
    - Removed usage of GLEW after support for MX (multithreaded) was dropped in v2.0.
      <sup>[1](https://github.com/arrayfire/arrayfire/issues/1540)</sup>
  - Multiple overlays on the same window are now possible.
    - Overlays support for same type of object (2D/3D)
    - Supported by af::Window::plot, af::Window::hist, af::Window::surface,
      af::Window::vectorField.
  - New API to set axes limits for graphs.
    - Draw calls do not automatically compute the limits. This is now under user control.
    - af::Window::setAxesLimits can be used to set axes limits automatically or manually.
    - af::Window::setAxesTitles can be used to set axes titles.
  - New API for plot and scatter:
    - af::Window::plot() and af::Window::scatter() now can handle 2D and 3D and determine appropriate order.
    - af_draw_plot_nd()
    - af_draw_plot_2d()
    - af_draw_plot_3d()
    - af_draw_scatter_nd()
    - af_draw_scatter_2d()
    - af_draw_scatter_3d()
- **New [interpolation methods](ref af_interp_type)**
  <sup>[1](https://github.com/arrayfire/arrayfire/issues/1562)</sup>
  - Applies to
    - af::resize()
    - af::transform()
    - af::approx1()
    - af::approx2()
- **Support for [complex mathematical functions](ref mathfunc_mat)**
  <sup>[1](https://github.com/arrayfire/arrayfire/issues/1507)</sup>
  - Add complex support for trig_mat, af::sqrt(), af::log().
- **af::medfilt1(): Median filter for 1-d signals** <sup>[1](https://github.com/arrayfire/arrayfire/pull/1479)</sup>
- <b>Generalized scan functions: scan_func_scan and scan_func_scanbykey</b>
  - Now supports inclusive or exclusive scans
  - Supports binary operations defined by af_binary_op.
    <sup>[1](https://github.com/arrayfire/arrayfire/issues/388)</sup>
- **[Image Moments](ref moments_mat) functions**
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1453)</sup>
- <b>Add af::getSizeOf() function for af_dtype</b>
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1404)</sup>
- <b>Explicitly extantiate af::array::device() for `void *</b>
  <sup>[1](https://github.com/arrayfire/arrayfire/issues/1503)</sup>

## Bug Fixes
- Fixes to edge-cases in morph_mat. <sup>[1](https://github.com/arrayfire/arrayfire/issues/1564)</sup>
- Makes JIT tree size consistent between devices. <sup>[1](https://github.com/arrayfire/arrayfire/issues/1457)</sup>
- Delegate higher-dimension in convolve_mat to correct dimensions. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1445)</sup>
- Indexing fixes with C++11. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1426) [2](https://github.com/arrayfire/arrayfire/pull/1426)</sup>
- Handle empty arrays as inputs in various functions. <sup>[1](https://github.com/arrayfire/arrayfire/issues/799)</sup>
- Fix bug when single element input to af::median. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1423)</sup>
- Fix bug in calculation of time from af::timeit(). <sup>[1](https://github.com/arrayfire/arrayfire/pull/1414)</sup>
- Fix bug in floating point numbers in af::seq. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1404)</sup>
- Fixes for OpenCL graphics interop on NVIDIA devices.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1408/commits/e1f16e6)</sup>
- Fix bug when compiling large kernels for AMD devices.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1465)</sup>
- Fix bug in af::bilateral when shared memory is over the limit.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1478)</sup>
- Fix bug in kernel header compilation tool `bin2cpp`.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1544)</sup>
- Fix inital values for morph_mat functions.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1547)</sup>
- Fix bugs in af::homography() CPU and OpenCL kernels.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1584)</sup>
- Fix bug in CPU TNJ.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1587)</sup>

## Improvements
- CUDA 8 and compute 6.x(Pascal) support, current installer ships with CUDA 7.5. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1432) [2](https://github.com/arrayfire/arrayfire/pull/1487) [3](https://github.com/arrayfire/arrayfire/pull/1539)</sup>
- User controlled FFT plan caching. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1448)</sup>
- CUDA performance improvements for image_func_wrap, image_func_unwrap and approx_mat.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1411)</sup>
- Fallback for CUDA-OpenGL interop when no devices does not support OpenGL.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1415)</sup>
- Additional forms of batching with the transform_func_transform functions.
  [New behavior defined here](https://github.com/arrayfire/arrayfire/pull/1412).
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1412)</sup>
- Update to OpenCL2 headers. <sup>[1](https://github.com/arrayfire/arrayfire/issues/1344)</sup>
- Support for integration with external OpenCL contexts. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1140)</sup>
- Performance improvements to interal copy in CPU Backend.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1440)</sup>
- Performance improvements to af::select and af::replace CUDA kernels.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1587)</sup>
- Enable OpenCL-CPU offload by default for devices with Unified Host Memory.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1521)</sup>
  - To disable, use the environment variable `AF_OPENCL_CPU_OFFLOAD=0`.

## Build
- Compilation speedups. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1526)</sup>
- Build fixes with MKL. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1526)</sup>
- Error message when CMake CUDA Compute Detection fails. <sup>[1](https://github.com/arrayfire/arrayfire/issues/1535)</sup>
- Several CMake build issues with Xcode generator fixed.
  <sup>[1](https://github.com/arrayfire/arrayfire/pull/1493) [2](https://github.com/arrayfire/arrayfire/pull/1499)</sup>
- Fix multiple OpenCL definitions at link time. <sup>[1](https://github.com/arrayfire/arrayfire/issues/1429)</sup>
- Fix lapacke detection in CMake. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1423)</sup>
- Update build tags of
  - [clBLAS](https://github.com/clMathLibraries/clBLAS)
  - [clFFT](https://github.com/clMathLibraries/clFFT)
  - [Boost.Compute](https://github.com/boostorg/compute)
  - [Forge](https://github.com/arrayfire/forge)
  - [glbinding](https://github.com/cginternals/glbinding)
- Fix builds with GCC 6.1.1 and GCC 5.3.0. <sup>[1](https://github.com/arrayfire/arrayfire/pull/1409)</sup>

## Installers
- All installers now ship with ArrayFire libraries build with MKL 2016.
- All installers now ship with Forge development files and examples included.
- CUDA Compute 2.0 has been removed from the installers. Please contact us
  directly if you have a special need.

## Examples
- Added [example simulating gravity](ref graphics/field.cpp) for
  demonstration of vector field.
- Improvements to financial/black_scholes_options.cpp example.
- Improvements to graphics/gravity_sim.cpp example.
- Fix graphics examples to use af::Window::setAxesLimits and
  af::Window::setAxesTitles functions.

## Documentation & Licensing
- [ArrayFire copyright and trademark policy](http://arrayfire.com/trademark-policy)
- Fixed grammar in license.
- Add license information for glbinding.
- Remove license infomation for GLEW.
- Random123 now applies to all backends.
- Random number functions are now under random_mat.

## Deprecations

The following functions have been deprecated and may be modified or removed
permanently from future versions of ArrayFire.
- af::Window::plot3(): Use af::Window::plot instead.
- af_draw_plot(): Use af_draw_plot_nd or af_draw_plot_2d instead.
- af_draw_plot3(): Use af_draw_plot_nd or af_draw_plot_3d instead.
- af::Window::scatter3(): Use af::Window::scatter instead.
- af_draw_scatter(): Use af_draw_scatter_nd or af_draw_scatter_2d instead.
- af_draw_scatter3(): Use af_draw_scatter_nd or af_draw_scatter_3d instead.

## Known Issues

Certain CUDA functions are known to be broken on Tegra K1. The following ArrayFire tests are currently failing:
- assign_cuda
- harris_cuda
- homography_cuda
- median_cuda
- orb_cudasort_cuda
- sort_by_key_cuda
- sort_index_cuda
",25889802
781,False,False,2016-04-25T21:32:27Z,2016-04-26T16:52:10Z,"# v3.3.2

The source code with submodules can be downloaded directly from the following link:
http://arrayfire.com/arrayfire_source/arrayfire-full-3.3.2.tar.bz2

## Improvements
- Family of [Sort](ref sort_mat) functions now support
  [higher order dimensions](https://github.com/arrayfire/arrayfire/pull/1373).
- Improved performance of batched sort on dim 0 for all [Sort](ref sort_mat) functions.
- [Median](ref stat_func_median) now also supports higher order dimensions.

## Bug Fixes
- Fixes to [error handling](https://github.com/arrayfire/arrayfire/issues/1352) in C++ API for binary functions.
- Fixes to [external OpenCL context management](https://github.com/arrayfire/arrayfire/issues/1350).
- Fixes to [JPEG_GREYSCALE](https://github.com/arrayfire/arrayfire/issues/1360) for FreeImage versions <= 3.154.
- Fixed for [non-float inputs](https://github.com/arrayfire/arrayfire/issues/1386) to \ref af::rgb2gray().

## Build
- [Disable CPU Async](https://github.com/arrayfire/arrayfire/issues/1378) when building with GCC < 4.8.4.
- Add option to [disable CPUID](https://github.com/arrayfire/arrayfire/issues/1369) from CMake.
- More verbose message when [CUDA Compute Detection fails](https://github.com/arrayfire/arrayfire/issues/1362).
- Print message to use [CUDA library stub](https://github.com/arrayfire/arrayfire/issues/1363)
  from CUDA Toolkit if CUDA Library is not found from default paths.
- [Build Fixes](https://github.com/arrayfire/arrayfire/pull/1385) on Windows.
  - For compiling tests our of source.
  - For compiling ArrayFire with static MKL.
- [Exclude <sys/sysctl.h>](https://github.com/arrayfire/arrayfire/pull/1368) when building on GNU Hurd.
- Add [manual CMake options](https://github.com/arrayfire/arrayfire/pull/1389) to build DEB and RPM packages.

## Documentation
- Fixed documentation for \ref af::replace().
- Fixed images in [Using on OSX](ref using_on_osx) page.

## Installer
- Linux x64 installers will now be compiled with GCC 4.9.2.
- OSX installer gives better error messages on brew failures and
  now includes link to [Fixing OS X Installer Failures](https://github.com/arrayfire/arrayfire/wiki/Fixing-Common-OS-X-Installer-Failures)
  for brew installation failures.
",25889802
782,False,False,2016-03-17T00:05:50Z,2016-03-17T19:11:06Z,"# v3.3.1

The source code with submodules can be downloaded directly from the following link:
http://arrayfire.com/arrayfire_source/arrayfire-full-3.3.1.tar.bz2

## Bug Fixes
- Fixes to \ref af::array::device()
  - CPU Backend: [evaluate arrays](https://github.com/arrayfire/arrayfire/issues/1316)
    before returning pointer with asynchronous calls in CPU backend.
  - OpenCL Backend: [fix segfaults](https://github.com/arrayfire/arrayfire/issues/1324)
    when requested for device pointers on empty arrays.
- Fixed \ref af::array::operator%() from using [rem to mod](https://github.com/arrayfire/arrayfire/issues/1318).
- Fixed [array destruction](https://github.com/arrayfire/arrayfire/issues/1321)
  when backends are switched in Unified API.
- Fixed [indexing](https://github.com/arrayfire/arrayfire/issues/1331) after
  \ref af::moddims() is called.
- Fixes FFT calls for CUDA and OpenCL backends when used on
  [multiple devices](https://github.com/arrayfire/arrayfire/issues/1332).
- Fixed [unresolved external](https://github.com/arrayfire/arrayfire/commit/32965ef)
  for some functions from \ref af::array::array_proxy class.

## Build
- CMake compiles files in alphabetical order.
- CMake fixes for BLAS and LAPACK on some Linux distributions.

## Improvements
- Fixed [OpenCL FFT performance](https://github.com/arrayfire/arrayfire/issues/1323) regression.
- \ref af::array::device() on OpenCL backend [returns](https://github.com/arrayfire/arrayfire/issues/1311)
  `cl_mem` instead of `(void*)cl::Buffer*`.
- In Unified backend, [load versioned libraries](https://github.com/arrayfire/arrayfire/issues/1312)
  at runtime.

## Documentation
- Reorganized, cleaner README file.
- Replaced non-free lena image in assets with free-to-distribute lena image.
",25889802
783,False,False,2016-02-26T20:02:59Z,2016-02-28T18:21:33Z,"# v3.3.0

The source code with submodules can be downloaded directly from the following link:
http://arrayfire.com/arrayfire_source/arrayfire-full-3.3.0.tar.bz2

## Major Updates
- CPU backend supports aysnchronous execution.
- Performance improvements to OpenCL BLAS and FFT functions.
- Improved performance of memory manager.
- Improvements to visualization functions.
- Improved sorted order for OpenCL devices.
- Integration with external OpenCL projects.

## Features
- \ref af::getActiveBackend(): Returns the current backend being used.
- [Scatter plot](https://github.com/arrayfire/arrayfire/pull/1116) added to graphics.
- \ref af::transform() now supports perspective transformation matrices.
- \ref af::infoString(): Returns `af::info()` as a string.
- \ref af::printMemInfo(): Print a table showing information about buffer from the memory manager
  - The \ref AF_MEM_INFO macro prints numbers and total sizes of all buffers (requires including af/macros.h)
- \ref af::allocHost(): Allocates memory on host.
- \ref af::freeHost(): Frees host side memory allocated by arrayfire.
- OpenCL functions can now use CPU implementation.
  - Currently limited to Unified Memory devices (CPU and On-board Graphics).
  - Functions: af::matmul() and all [LAPACK](ref linalg_mat) functions.
  - Takes advantage of optimized libraries such as MKL without doing memory copies.
  - Use the environment variable `AF_OPENCL_CPU_OFFLOAD=1` to take advantage of this feature.
- Functions specific to OpenCL backend.
  - \ref afcl::addDevice(): Adds an external device and context to ArrayFire's device manager.
  - \ref afcl::deleteDevice(): Removes an external device and context from ArrayFire's device manager.
  - \ref afcl::setDevice(): Sets an external device and context from ArrayFire's device manager.
  - \ref afcl::getDeviceType(): Gets the device type of the current device.
  - \ref afcl::getPlatform(): Gets the platform of the current device.
- \ref af::createStridedArray() allows [array creation user-defined strides](https://github.com/arrayfire/arrayfire/issues/1177) and device pointer.
- [Expose functions](https://github.com/arrayfire/arrayfire/issues/1131) that provide information
  about memory layout of Arrays.
  - \ref af::getStrides(): Gets the strides for each dimension of the array.
  - \ref af::getOffset(): Gets the offsets for each dimension of the array.
  - \ref af::getRawPtr(): Gets raw pointer to the location of the array on device.
  - \ref af::isLinear(): Returns true if all elements in the array are contiguous.
  - \ref af::isOwner(): Returns true if the array owns the raw pointer, false if it is a sub-array.
  - \ref af::getStrides(): Gets the strides of the array.
  - \ref af::getStrides(): Gets the strides of the array.
- \ref af::getDeviceId(): Gets the device id on which the array resides.
- \ref af::isImageIOAvailable(): Returns true if ArrayFire was compiled with Freeimage enabled
- \ref af::isLAPACKAvailable(): Returns true if ArrayFire was compiled with LAPACK functions enabled

## Bug Fixes
- Fixed [errors when using 3D / 4D arrays](https://github.com/arrayfire/arrayfire/pull/1251) in select and replace
- Fixed [JIT errors on AMD devices](https://github.com/arrayfire/arrayfire/pull/1238) for OpenCL backend.
- Fixed [imageio bugs](https://github.com/arrayfire/arrayfire/pull/1229) for 16 bit images.
- Fixed [bugs when loading and storing images](https://github.com/arrayfire/arrayfire/pull/1228) natively.
- Fixed [bug in FFT for NVIDIA GPUs](https://github.com/arrayfire/arrayfire/issues/615) when using OpenCL backend.
- Fixed [bug when using external context](https://github.com/arrayfire/arrayfire/pull/1241) with OpenCL backend.
- Fixed [memory leak](https://github.com/arrayfire/arrayfire/issues/1269) in \ref af_median_all().
- Fixed [memory leaks and performance](https://github.com/arrayfire/arrayfire/pull/1274) in graphics functions.
- Fixed [bugs when indexing followed by moddims](https://github.com/arrayfire/arrayfire/issues/1275).
- \ref af_get_revision() now returns actual commit rather than AF_REVISION.
- Fixed [releasing arrays](https://github.com/arrayfire/arrayfire/issues/1282) when using different backends.
- OS X OpenCL: [LAPACK functions](ref linalg_mat) on CPU devices use OpenCL offload (previously threw errors).
- [Add support for 32-bit integer image types](https://github.com/arrayfire/arrayfire/pull/1287) in Image IO.
- Fixed [set operations for row vectors](https://github.com/arrayfire/arrayfire/issues/1300)
- Fixed [bugs](https://github.com/arrayfire/arrayfire/issues/1243) in \ref af::meanShift() and af::orb().

## Improvements
- Optionally [offload BLAS and LAPACK](https://github.com/arrayfire/arrayfire/pull/1221) functions to CPU implementations to improve performance.
- Performance improvements to the memory manager.
- Error messages are now more detailed.
- Improved sorted order for OpenCL devices.
- JIT heuristics can now be tweaked using environment variables. See
  [Environment Variables](ref configuring_environment) tutorial.
- Add `BUILD_<BACKEND>` [options to examples and tests](https://github.com/arrayfire/arrayfire/issues/1286)
  to toggle backends when compiling independently.

## Examples
- New visualization [example simulating gravity](ref graphics/gravity_sim.cpp).

## Build
- Support for Intel `icc` compiler
- Support to compile with Intel MKL as a BLAS and LAPACK provider
- Tests are now available for building as standalone (like examples)
- Tests can now be built as a single file for each backend
- Better handling of NONFREE build options
- [Searching for GLEW in CMake default paths](https://github.com/arrayfire/arrayfire/pull/1292)
- Fixes for compiling with MKL on OSX.

## Installers
- Improvements to OSX Installer
  - CMake config files are now installed with libraries
  - Independent options for installing examples and documentation components

## Deprecations
- `af_lock_device_arr` is now deprecated to be removed in v4.0.0. Use \ref af_lock_array() instead.
- `af_unlock_device_arr` is now deprecated to be removed in v4.0.0. use \ref af_unlock_array() instead.

## Documentation
- Fixes to documentation for \ref matchTemplate().
- Improved documentation for deviceInfo.
- Fixes to documentation for \ref exp().

## Known Issues
- [Solve OpenCL fails on NVIDIA Maxwell devices](https://github.com/arrayfire/arrayfire/issues/1246)
  for f32 and c32 when M > N and K % 4 is 1 or 2.
",25889802
784,False,True,2016-02-04T16:41:39Z,2016-02-04T23:57:04Z,,25889802
785,False,False,2015-12-30T20:19:41Z,2015-12-31T17:59:13Z,"# Release Notes {#releasenotes}

The source code with submodules can be downloaded directly from the following link:
http://arrayfire.com/arrayfire_source/arrayfire-full-3.2.2.tar.bz2

# v3.2.2

## Bug Fixes
- Fixed [memory leak](https://github.com/arrayfire/arrayfire/pull/1145) in
  CUDA Random number generators
- Fixed [bug](https://github.com/arrayfire/arrayfire/issues/1157) in
  af::select() and af::replace() tests
- Fixed [exception](https://github.com/arrayfire/arrayfire/issues/1164)
  thrown when printing empty arrays with af::print()
- Fixed [bug](https://github.com/arrayfire/arrayfire/issues/1170) in CPU
  random number generation. Changed the generator to
  [mt19937](http://en.cppreference.com/w/cpp/numeric/random)
- Fixed exception handling (internal)
  - [Exceptions](https://github.com/arrayfire/arrayfire/issues/1188)
    now show function, short file name and line number
  - Added [AF_RETURN_ERROR](https://github.com/arrayfire/arrayfire/issues/1186)
    macro to handle returning errors.
  - Removed THROW macro, and renamed AF_THROW_MSG to AF_THROW_ERR.
- Fixed [bug](https://github.com/arrayfire/arrayfire/commit/9459c6)
  in \ref af::identity() that may have affected CUDA Compute 5.2 cards

## Build
- Added a [MIN_BUILD_TIME](https://github.com/arrayfire/arrayfire/issues/1193)
  option to build with minimum optimization compiler flags resulting in faster
  compile times
- Fixed [issue](https://github.com/arrayfire/arrayfire/issues/1143) in CBLAS
  detection by CMake
- Fixed tests failing for builds without optional components
  [FreeImage](https://github.com/arrayfire/arrayfire/issues/1143) and
  [LAPACK](https://github.com/arrayfire/arrayfire/issues/1167)
- Added a [test](https://github.com/arrayfire/arrayfire/issues/1192)
  for unified backend
- Only [info and backend tests](https://github.com/arrayfire/arrayfire/issues/1192)
  are now built for unified backend
- [Sort tests](https://github.com/arrayfire/arrayfire/issues/1199)
  execution alphabetically
- Fixed compilation flags and errors in tests and examples
- [Moved AF_REVISION and AF_COMPILER_STR](https://github.com/arrayfire/arrayfire/commit/2287c5)
  into src/backend. This is because as revision is updated with every commit,
  entire ArrayFire would have to be rebuilt in the old code.
  - v3.3 will add a af_get_revision() function to get the revision string.
- [Clean up examples](https://github.com/arrayfire/arrayfire/pull/1158)
  - Remove getchar for Windows (this will be handled by the installer)
  - Other miscellaneous code cleanup
  - Fixed bug in [plot3.cpp](ref graphics/plot3.cpp) example
- [Rename](https://github.com/arrayfire/arrayfire/commit/35f0fc2) clBLAS/clFFT
  external project suffix from external -> ext
- [Add OpenBLAS](https://github.com/arrayfire/arrayfire/pull/1197) as a
  lapack/lapacke alternative

## Improvements
- Added \ref AF_MEM_INFO macro to print memory info from ArrayFire's memory
  manager ([cross issue](https://github.com/arrayfire/arrayfire/issues/1172))
- Added [additional paths](https://github.com/arrayfire/arrayfire/issues/1184)
  for searching for `libaf*` for Unified backend on unix-style OS.
  - Note: This still requires dependencies such as forge, CUDA, NVVM etc to be
    in `LD_LIBRARY_PATH` as described in [Unified Backend](ref unifiedbackend)
- [Create streams](https://github.com/arrayfire/arrayfire/commit/ed0373f)
  for devices only when required in CUDA Backend

## Documentation
- [Hide scrollbars](https://github.com/arrayfire/arrayfire/commit/9d218a5)
  appearing for pre and code styles
- Fix [documentation](https://github.com/arrayfire/arrayfire/commit/ac09f91) for af::replace
- Add [code sample](https://github.com/arrayfire/arrayfire/commit/4e06483)
  for converting the output of af::getAvailableBackends() into bools
- Minor fixes in documentation
",25889802
786,False,False,2015-12-05T04:54:09Z,2015-12-05T21:04:04Z,"# Release Notes {#releasenotes}

The source code with submodules can be downloaded directly from the following link:
http://arrayfire.com/arrayfire_source/arrayfire-full-3.2.1.tar.bz2

# v3.2.1

## Bug Fixes
- Fixed [bug](https://github.com/arrayfire/arrayfire/pull/1136) in homography()
- Fixed [bug](https://github.com/arrayfire/arrayfire/issues/1135) in behavior
  of af::array::device()
- Fixed [bug](https://github.com/arrayfire/arrayfire/issues/1129) when
  indexing with span along trailing dimension
- Fixed [bug](https://github.com/arrayfire/arrayfire/issues/1127) when
  indexing in [GFor](ref gfor)
- Fixed [bug](https://github.com/arrayfire/arrayfire/issues/1122) in CPU
  information fetching
- Fixed compilation [bug](https://github.com/arrayfire/arrayfire/issues/1117)
  in unified backend caused by missing link library
- Add [missing symbol](https://github.com/arrayfire/arrayfire/pull/1114) for
  af_draw_surface()

## Build
- Tests can now be used as a [standalone project](https://github.com/arrayfire/arrayfire/pull/1120)
  - Tests can now be built using pre-compiled libraries
  - Similar to how the examples are built
- The install target now installs the examples source irrespective of the
  BUILD_EXAMPLES value
  - Examples are not built if BUILD_EXAMPLES is off

## Documentation
- HTML documentation is now [built and installed](https://github.com/arrayfire/arrayfire/pull/1109)
  in docs/html
- Added documentation for \ref af::seq class
- Updated [Matrix Manipulation](http://www.arrayfire.com/docs/matrixmanipulation.htm) tutorial
- Examples list is now generated by CMake
  - <a href=""http://www.arrayfire.com/docs/examples.htm"">Examples</a> are now listed as dir/example.cpp
- Removed dummy groups used for indexing documentation (affcted doxygen < 1.8.9)
",25889802
787,False,False,2015-11-12T22:41:35Z,2015-11-13T17:07:41Z,"# Release Notes

The source code with submodules can be downloaded directly from the following link:
http://arrayfire.com/arrayfire_source/arrayfire-full-3.2.0.tar.bz2

## Major Updates
- Added Unified backend
  - Allows switching backends at runtime
  - Read [Unified Backend](ref unifiedbackend) for more.
- Support for 16-bit integers (\ref s16 and \ref u16)
  - All functions that support 32-bit interger types (\ref s32, \ref u32),
    now also support 16-bit interger types

## Function Additions
- Unified Backend
  - \ref setBackend() - Sets a backend as active
  - \ref getBackendCount() - Gets the number of backends available for use
  - \ref getAvailableBackends() - Returns information about available backends
  - \ref getBackendId() - Gets the backend enum for an array
- Vision
  - \ref homography() - Homography estimation
  - \ref gloh() - GLOH Descriptor for SIFT
- Image Processing
  - \ref loadImageNative() - Load an image as native data without modification
  - \ref saveImageNative() - Save an image without modifying data or type
- Graphics
  - \ref af::Window::plot3() - 3-dimensional line plot
  - \ref af::Window::surface() - 3-dimensional curve plot
- Indexing
  - \ref af_create_indexers()
  - \ref af_set_array_indexer()
  - \ref af_set_seq_indexer()
  - \ref af_set_seq_param_indexer()
  - \ref af_release_indexers()
- CUDA Backend Specific
  - \ref setNativeId() - Set the CUDA device with given native id as active
    - ArrayFire uses a modified order for devices. The native id for a
      device can be retreived using `nvidia-smi`
- OpenCL Backend Specific
  - \ref setDeviceId() - Set the OpenCL device using the `clDeviceId`

## Other Improvements
- Added \ref c32 and \ref c64 support for \ref isNaN(), \ref isInf() and \ref iszero()
- Added CPU information for `x86` and `x86_64` architectures in CPU backend's \ref info()
- Batch support for \ref approx1() and \ref approx2()
  - Now can be used with gfor as well
- Added \ref s64 and \ref u64 support to:
  - \ref sort() (along with sort index and sort by key)
  - \ref setUnique(), \ref setUnion(), \ref setIntersect()
  - \ref convolve() and \ref fftConvolve()
  - \ref histogram() and \ref histEqual()
  - \ref lookup()
  - \ref mean()
- Added \ref AF_MSG macro

## Build Improvements
- Submodules update is now automatically called if not cloned recursively
- [Fixes for compilation](https://github.com/arrayfire/arrayfire/issues/766) on Visual Studio 2015
- Option to use [fallback to CPU LAPACK](https://github.com/arrayfire/arrayfire/pull/1053)
  for linear algebra functions in case of CUDA 6.5 or older versions.

## Bug Fixes
- Fixed [memory leak](https://github.com/arrayfire/arrayfire/pull/1096) in \ref susan()
- Fixed [failing test](https://github.com/arrayfire/arrayfire/commit/144a2db)
  in \ref lower() and \ref upper() for CUDA compute 53
- Fixed [bug](https://github.com/arrayfire/arrayfire/issues/1092) in CUDA for indexing out of bounds
- Fixed [dims check](https://github.com/arrayfire/arrayfire/commit/6975da8) in \ref iota()
- Fixed [out-of-bounds access](https://github.com/arrayfire/arrayfire/commit/7fc3856) in \ref sift()
- Fixed [memory allocation](https://github.com/arrayfire/arrayfire/commit/5e88e4a) in \ref fast() OpenCL
- Fixed [memory leak](https://github.com/arrayfire/arrayfire/pull/994) in image I/O functions
- \ref dog() now returns float-point type arrays

## Documentation Updates
- Improved tutorials documentation
  - More detailed Using on [Linux](ref using_on_windows), [OSX](ref using_on_windows),
    [Windows](ref using_on_windows) pages.
- Added return type information for functions that return different type
  arrays

## New Examples
- Graphics
  - [Plot3](ref plot3.cpp)
  - [Surface](ref surface.cpp)
- [Shallow Water Equation](ref swe.cpp)
- [Basic](ref basic.cpp) as a Unified backend example

## Installers
- All installers now include the Unified backend and corresponding CMake files
- Visual Studio projects include Unified in the Platform Configurations
- Added installer for Jetson TX1
- SIFT and GLOH do not ship with the installers as SIFT is protected by
  patents that do not allow commercial distribution without licensing.
",25889802
788,False,False,2015-10-18T04:52:38Z,2015-10-18T19:04:24Z,"The source code with submodules can be downloaded directly from the following link:
http://arrayfire.com/arrayfire_source/arrayfire-full-3.1.3.tar.bz2

## Bug Fixes
- Fixed [bugs](https://github.com/arrayfire/arrayfire/issues/1042) in various OpenCL kernels without offset additions
- Remove ARCH_32 and ARCH_64 flags
- Fix [missing symbols](https://github.com/arrayfire/arrayfire/issues/1040) when freeimage is not found
- Use CUDA driver version for Windows
- Improvements to SIFT
- Fixed [memory leak](https://github.com/arrayfire/arrayfire/issues/1045) in median
- Fixes for Windows compilation when not using MKL [#1047](https://github.com/arrayfire/arrayfire/issues/1047)
- Fixed for building without LAPACK

## Other
- Documentation: Fixed documentation for select and replace
- Documentation: Fixed documentation for af_isnan
",25889802
789,False,False,2015-09-25T22:09:22Z,2015-09-26T16:13:57Z,"The source code with submodules can be downloaded directly from the following link:
http://arrayfire.com/arrayfire_source/arrayfire-full-3.1.2.tar.bz2

## Bug Fixes
- Fixed [bug](https://github.com/arrayfire/arrayfire/commit/4698f12) in assign that was causing test to fail
- Fixed bug in convolve. Frequency condition now depends on kernel size only
- Fixed [bug](https://github.com/arrayfire/arrayfire/issues/1005) in indexed reductions for complex type in OpenCL backend
- Fixed [bug](https://github.com/arrayfire/arrayfire/issues/1006) in kernel name generation in ireduce for OpenCL backend
- Fixed non-linear to linear indices in ireduce
- Fixed [bug](https://github.com/arrayfire/arrayfire/issues/1011) in reductions for small arrays
- Fixed [bug](https://github.com/arrayfire/arrayfire/issues/1010) in histogram for indexed arrays
- Fixed [compiler error](https://github.com/arrayfire/arrayfire/issues/1015) CPUID for non-compliant devices
- Fixed [failing tests](https://github.com/arrayfire/arrayfire/issues/1008) on i386 platforms
- Add missing AFAPI

## Other
- Documentation: Added missing examples and other corrections
- Documentation: Fixed warnings in documentation building
- Installers: Send error messages to log file in OSX Installer
",25889802
790,False,False,2015-09-13T12:43:23Z,2015-09-13T13:33:09Z,"The source code with submodules can be downloaded directly from the following link:
http://arrayfire.com/arrayfire_source/arrayfire-full-3.1.1.tar.bz2

## Installers
- CUDA backend now depends on CUDA 7.5 toolkit
- OpenCL backend now require OpenCL 1.2 or greater

## Bug Fixes
- Fixed [bug](https://github.com/arrayfire/arrayfire/issues/981) in reductions after indexing
- Fixed [bug](https://github.com/arrayfire/arrayfire/issues/976) in indexing when using reverse indices

## Build
- `cmake` now includes `PKG_CONFIG` in the search path for CBLAS and LAPACKE libraries
- [heston_model.cpp](https://github.com/arrayfire/arrayfire/blob/devel/examples/financial/heston_model.cpp) example now builds with the default ArrayFire cmake files after installation

## Other
- Fixed bug in [image_editing.cpp](https://github.com/arrayfire/arrayfire/blob/devel/examples/image_processing/image_editing.cpp)
",25889802
791,False,False,2015-08-27T22:43:17Z,2015-08-28T19:40:07Z,"The source code with submodules can be downloaded directly from the following link:
http://arrayfire.com/arrayfire_source/arrayfire-full-3.1.0.tar.bz2

# Release Notes {#releasenotes}

# v3.1.0

## Function Additions
- Computer Vision Functions
  - nearestNeighbour() - Nearest Neighbour with SAD, SSD and SHD distances
  - harris() - Harris Corner Detector
  - susan() - Susan Corner Detector
  - sift() - Scale Invariant Feature Transform (SIFT)
    - Method and apparatus for identifying scale invariant features""
      ""in an image and use of same for locating an object in an image,\"" David""
      ""G. Lowe, US Patent 6,711,293 (March 23, 2004). Provisional application""
      ""filed March 8, 1999. Asignee: The University of British Columbia. For""
      ""further details, contact David Lowe (lowe@cs.ubc.ca) or the""
      ""University-Industry Liaison Office of the University of British""
      ""Columbia."")
    - SIFT is available for compiling but does not ship with ArrayFire
      hosted installers/pre-built libraries
  - dog() -  Difference of Gaussians
- Image Processing Functions
  - ycbcr2rgb() and rgb2ycbcr() - RGB <->YCbCr color space conversion
  - wrap() and unwrap() Wrap and Unwrap
  - sat() - Summed Area Tables
  - loadImageMem() and saveImageMem() - Load and Save images to/from memory
    - af_image_format - Added imageFormat (af_image_format) enum
- Array & Data Handling
  - copy() - Copy
  - array::lock() and array::unlock() - Lock and Unlock
  - select() and replace() - Select and Replace
  - Get array reference count (af_get_data_ref_count)
- Signal Processing
  - fftInPlace() - 1D in place FFT
  - fft2InPlace() - 2D in place FFT
  - fft3InPlace() - 3D in place FFT
  - ifftInPlace() - 1D in place Inverse FFT
  - ifft2InPlace() - 2D in place Inverse FFT
  - ifft3InPlace() - 3D in place Inverse FFT
  - fftR2C() - Real to complex FFT
  - fftC2R() - Complex to Real FFT
- Linear Algebra
  - svd() and svdInPlace() - Singular Value Decomposition
- Other operations
  - sigmoid() - Sigmoid
  - Sum (with option to replace NaN values)
  - Product (with option to replace NaN values)
- Graphics
  - Window::setSize() - Window resizing using Forge API
- Utility
  - Allow users to set print precision (print, af_print_array_gen)
  - saveArray() and readArray() - Stream arrays to binary files
  - toString() - toString function returns the array and data as a string
- CUDA specific functionality
  - getStream() - Returns default CUDA stream ArrayFire uses for the current device
  - getNativeId() - Returns native id of the CUDA device

## Improvements
- dot
  - Allow complex inputs with conjugate option
- AF_INTERP_LOWER interpolation
  - For resize, rotate and transform based functions
- 64-bit integer support
  - For reductions, random, iota, range, diff1, diff2, accum, join, shift
    and tile
- convolve
  - Support for non-overlapping batched convolutions
- Complex Arrays
  - Fix binary ops on complex inputs of mixed types
  - Complex type support for exp
- tile
  - Performance improvements by using JIT when possible.
- Add AF_API_VERSION macro
  - Allows disabling of API to maintain consistency with previous versions
- Other Performance Improvements
  - Use reference counting to reduce unnecessary copies
- CPU Backend
  - Device properties for CPU
  - Improved performance when all buffers are indexed linearly
- CUDA Backend
  - Use streams in CUDA (no longer using default stream)
  - Using async cudaMem ops
  - Add 64-bit integer support for JIT functions
  - Performance improvements for CUDA JIT for non-linear 3D and 4D arrays
- OpenCL Backend
  - Improve compilation times for OpenCL backend
  - Performance improvements for non-linear JIT kernels on OpenCL
  - Improved shared memory load/store in many OpenCL kernels (PR 933)
  - Using cl.hpp v1.2.7

## Bug Fixes
- Common
  - Fix compatibility of c32/c64 arrays when operating with scalars
  - Fix median for all values of an array
  - Fix double free issue when indexing (30cbbc7)
  - Fix bug in rank
  - Fix default values for scale throwing exception
  - Fix conjg raising exception on real input
  - Fix bug when using conjugate transpose for vector input
  - Fix issue with const input for array_proxy::get()
- CPU Backend
  - Fix randn generating same sequence for multiple calls
  - Fix setSeed for randu
  - Fix casting to and from complex
  - Check NULL values when allocating memory
  - Fix offset issue for CPU element-wise operations

The source code with submodules can be downloaded directly from the following link:
http://arrayfire.com/arrayfire_source/arrayfire-full-3.1.0.tar.bz2

## New Examples
- Match Template
- Susan
- Heston Model (contributed by Michael Nowotny)

## Distribution Changes
- Fixed automatic detection of ArrayFire when using with CMake in the Windows
  Installer
- Compiling ArrayFire with FreeImage as a static library for Linux x86
  installers

## Known Issues
- OpenBlas can cause issues with QR factorization in CPU backend
- FreeImage older than 3.10 can cause issues with loadImageMem and
  saveImageMem
- OpenCL backend issues on OSX
  - AMD GPUs not supported because of driver issues
  - Intel CPUs not supported
  - Linear algebra functions do not work on Intel GPUs.
- Stability and correctness issues with open source OpenCL implementations such as Beignet, GalliumCompute.
",25889802
792,False,False,2015-06-26T19:37:14Z,2015-06-26T19:42:56Z,"The source code with submodules can be downloaded directly from the following link:
http://arrayfire.com/arrayfire_source/arrayfire-full-3.0.2.tar.bz2

## Bug Fixes
- Added missing symbols from the compatible API
- Fixed a bug affecting corner rows and elements in `grad()`
- Fixed linear interpolation bugs affecting large images in the following:
  - `approx1()`
  - `approx2()`
  - `resize()`
  - `rotate()`
  - `scale()`
  - `skew()`
  - `transform()`

## Documentation
- Added missing documentation for `constant()`
- Added missing documentation for `array::scalar()`
- Added supported input types for functions in `arith.h`
",25889802
793,False,False,2015-06-12T22:31:36Z,2015-06-13T02:59:58Z,"The source code with submodules can be downloaded directly from the following link:
http://arrayfire.com/arrayfire_source/arrayfire-full-3.0.1.tar.bz2

## Bug Fixes
- Fixed header to work in Visual Studio 2015
- Fixed a bug in batched mode for FFT based convolutions
- Fixed graphics issues on OSX
- Fixed various bugs in visualization functions

## Other improvements
- Improved fractal example
- New OSX installer
- Improved Windows installer
  - Default install path has been changed
- Fixed bug in machine learning examples
",25889802
794,False,False,2015-06-02T15:38:46Z,2015-06-02T15:42:32Z,"# v3.0.0

The source code with submodules can be downloaded directly from the following link:
http://arrayfire.com/arrayfire_source/arrayfire-full-3.0.0.tar.bz2

## Major Updates
- ArrayFire is now open source
- Major changes to the visualization library
- Introducing handle based C API
- New backend: CPU fallback available for systems without GPUs
- Dense linear algebra functions available for all backends
- Support for 64 bit integers

## Function Additions
- Data generation functions
  - range()
  - iota()
- Computer Vision Algorithms
  - features()
    - A data structure to hold features
  - fast()
    - FAST feature detector
  - orb()
    - ORB A feature descriptor extractor
- Image Processing
  - convolve1(), convolve2(), convolve3()
    - Specialized versions of convolve() to enable better batch support
  - fftconvolve1(), fftconvolve2(), fftconvolve3()
    - Convolutions in frequency domain to support larger kernel sizes
  - dft(), idft()
    - Unified functions for calling multi dimensional ffts.
  - matchTemplate()
    - Match a kernel in an image
  - sobel()
    - Get sobel gradients of an image
  - rgb2hsv(), hsv2rgb(), rgb2gray(), gray2rgb()
    - Explicit function calls to colorspace conversions
  - erode3d(), dilate3d()
    - Explicit erode and dilate calls for image morphing
- Linear Algebra
  - matmulNT(), matmulTN(), matmulTT()
    - Specialized versions of matmul() for transposed inputs
  - luInPlace(), choleskyInPlace(), qrInPlace()
    - In place factorizations to improve memory requirements
  - solveLU()
    - Specialized solve routines to improve performance
  - OpenCL backend now Linear Algebra functions
- Other functions
  - lookup() - lookup indices from a table
  - batchFunc() - helper function to perform batch operations
- Visualization functions
  - Support for multiple windows
  - window.hist()
    - Visualize the output of the histogram
- C API
  - Removed old pointer based C API
  - Introducing handle base C API
  - Just In Time compilation available in C API
  - C API has feature parity with C++ API
  - bessel functions removed
  - cross product functions removed
  - Kronecker product functions removed

## Performance Improvements
- Improvements across the board for OpenCL backend

## API Changes
- `print` is now af_print()
- seq(): The step parameter is now the third input
  - seq(start, step, end) changed to seq(start, end, step)
- gfor(): The iterator now needs to be seq()

## Deprecated Function APIs

Deprecated APIs are in af/compatible.h
- devicecount() changed to getDeviceCount()
- deviceset() changed to setDevice()
- deviceget() changed to getDevice()
- loadimage() changed to loadImage()
- saveimage() changed to saveImage()
- gaussiankernel() changed to gaussianKernel()
- alltrue() changed to allTrue()
- anytrue() changed to anyTrue()
- setunique() changed to setUnique()
- setunion() changed to setUnion()
- setintersect() changed to setIntersect()
- histequal() changed to histEqual()
- colorspace() changed to colorSpace()
- filter() deprecated. Use convolve1() and convolve2()
- mul() changed to product()
- deviceprop() changed to deviceProp()

## Known Issues
- OpenCL backend issues on OSX
  - AMD GPUs not supported because of driver issues
  - Intel CPUs not supported
  - Linear algebra functions do not work on Intel GPUs.
- Stability and correctness issues with open source OpenCL implementations such as Beignet, GalliumCompute.
",25889802
